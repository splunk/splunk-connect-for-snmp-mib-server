#
# PySNMP MIB module CISCO-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "ifDescr")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, MibIdentifier, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter64, ObjectIdentity, Bits, IpAddress, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibIdentifier", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "Unsigned32", "Integer32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
sonetVTCurrentStatus, sonetPathCurrentEntry, sonetLineCurrentStatus, sonetSectionCurrentStatus, sonetPathCurrentStatus = mibBuilder.importSymbols("SONET-MIB", "sonetVTCurrentStatus", "sonetPathCurrentEntry", "sonetLineCurrentStatus", "sonetSectionCurrentStatus", "sonetPathCurrentStatus")
ciscoSonetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 126))
ciscoSonetMIB.setRevisions(('2003-03-07 00:00', '2002-06-14 00:00', '2002-05-22 00:00', '2001-10-17 00:00', '2000-07-12 00:00', '1999-03-08 00:00',))
if mibBuilder.loadTexts: ciscoSonetMIB.setLastUpdated('200303070000Z')
if mibBuilder.loadTexts: ciscoSonetMIB.setOrganization('Cisco Systems, Inc.')
ciscoSonetMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 0))
ciscoSonetMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1))
csConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1))
csApsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2))
csSection = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3))
csLine = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4))
csPath = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5))
csStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6))
cspConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7))
csNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 8))
csAu4Tug3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9))
class CsApsLineFailureCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("csApsChannelMismatch", 1), ("csApsProtectionByteFail", 2), ("csApsFEProtectionFailure", 3), ("csApsModeMismatch", 4))

class CsApsLineFailureStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("noApsLineFailure", 0), ("csApsChannelMismatchBit", 1), ("csApsProtectionByteFailBit", 2), ("csApsFEProtectionFailureBit", 3), ("csApsModeMismatchBit", 4))

class CsApsLineSwitchReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("csApsOther", 1), ("csApsRevertive", 2), ("csApsManual", 3), ("csApsSignalDefectLow", 4), ("csApsSignalDefectHigh", 5), ("csApsSignalFailureLow", 6), ("csApsSignalFailureHigh", 7), ("csApsForceSwitch", 8), ("csApsLockOut", 9), ("csApsNoSwitch", 10))

csConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1), )
if mibBuilder.loadTexts: csConfigTable.setStatus('current')
csConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csConfigEntry.setStatus('current')
csConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoopback", 1), ("lineLocal", 2), ("lineRemote", 3))).clone('noLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigLoopbackType.setStatus('current')
csConfigXmtClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigXmtClockSource.setStatus('current')
csConfigFrameScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigFrameScramble.setStatus('current')
csConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sonetSts3c", 1), ("sonetStm1", 2), ("sonetSts12c", 3), ("sonetStm4", 4), ("sonetSts48c", 5), ("sonetStm16", 6), ("sonetSts192c", 7), ("sonetStm64", 8), ("sonetSts3", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csConfigType.setStatus('current')
csConfigRDIVType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3))).clone('onebit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigRDIVType.setStatus('current')
csConfigRDIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("onebit", 1), ("threebit", 3))).clone('onebit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csConfigRDIPType.setStatus('current')
csVTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2), )
if mibBuilder.loadTexts: csVTConfigTable.setStatus('current')
csVTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1), )
csConfigEntry.registerAugmentions(("CISCO-SONET-MIB", "csVTConfigEntry"))
csVTConfigEntry.setIndexNames(*csConfigEntry.getIndexNames())
if mibBuilder.loadTexts: csVTConfigEntry.setStatus('current')
csTributaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt15vc11", 1), ("vt2vc12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryType.setStatus('current')
csTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryMappingType.setStatus('current')
csTributaryFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dsx1D4", 2), ("dsx1ESF", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryFramingType.setStatus('current')
csSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csSignallingTransportMode.setStatus('current')
csTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTributaryGroupingType.setStatus('current')
csApsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1), )
if mibBuilder.loadTexts: csApsConfigTable.setStatus('current')
csApsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SONET-MIB", "csApsWorkingIndex"))
if mibBuilder.loadTexts: csApsConfigEntry.setStatus('current')
csApsWorkingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csApsWorkingIndex.setStatus('current')
csApsProtectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsProtectionIndex.setStatus('current')
csApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csApsDisabled", 1), ("csApsEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsEnable.setStatus('current')
csApsArchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToOne", 2), ("anexBOnePlusOne", 3), ("ycableOnePlusOneNok1k2", 4), ("straightOnePlusOneNok1k2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsArchMode.setStatus('current')
csApsActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csApsWorkingLine", 1), ("csApsProtectionLine", 2), ("csApsNone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsActiveLine.setStatus('current')
csApsSigFaultBER = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsSigFaultBER.setStatus('current')
csApsSigDegradeBER = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsSigDegradeBER.setStatus('current')
csApsWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsWaitToRestore.setStatus('current')
csApsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsDirection.setStatus('current')
csApsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsRevertive.setStatus('current')
csApsDirectionOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsDirectionOperational.setStatus('current')
csApsArchModeOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToOne", 2), ("anexBOnePlusOne", 3), ("ycableOnePlusOneNok1k2", 4), ("straightOnePlusOneNok1k2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsArchModeOperational.setStatus('current')
csApsChannelProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bellcore", 1), ("itu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csApsChannelProtocol.setStatus('current')
csApsFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 14), CsApsLineFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsFailureStatus.setStatus('current')
csApsSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 15), CsApsLineSwitchReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsSwitchReason.setStatus('current')
csApsPrimarySection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("workingSection1", 1), ("workingSection2", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsPrimarySection.setStatus('current')
csApsLineFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 2), CsApsLineFailureCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsLineFailureCode.setStatus('current')
csApsLineSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 2, 3), CsApsLineSwitchReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csApsLineSwitchReason.setStatus('current')
cssTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1), )
if mibBuilder.loadTexts: cssTotalTable.setStatus('current')
cssTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cssTotalEntry.setStatus('current')
cssTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalESs.setStatus('current')
cssTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalSESs.setStatus('current')
cssTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 3), Gauge32()).setUnits('severely errored framing seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalSEFSs.setStatus('current')
cssTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 1, 1, 4), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTotalCVs.setStatus('current')
cssTraceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2), )
if mibBuilder.loadTexts: cssTraceTable.setStatus('current')
cssTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cssTraceEntry.setStatus('current')
cssTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssTraceToTransmit.setStatus('current')
cssTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssTraceToExpect.setStatus('current')
cssTraceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTraceFailure.setStatus('current')
cssTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssTraceReceived.setStatus('current')
cslTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1), )
if mibBuilder.loadTexts: cslTotalTable.setStatus('current')
cslTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cslTotalEntry.setStatus('current')
cslTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalESs.setStatus('current')
cslTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalSESs.setStatus('current')
cslTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalCVs.setStatus('current')
cslTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 1, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslTotalUASs.setStatus('current')
cslFarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2), )
if mibBuilder.loadTexts: cslFarEndTotalTable.setStatus('current')
cslFarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cslFarEndTotalEntry.setStatus('current')
cslFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalESs.setStatus('current')
cslFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalSESs.setStatus('current')
cslFarEndTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalCVs.setStatus('current')
cslFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 4, 2, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslFarEndTotalUASs.setStatus('current')
cspTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1), )
if mibBuilder.loadTexts: cspTotalTable.setStatus('current')
cspTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspTotalEntry.setStatus('current')
cspTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalESs.setStatus('current')
cspTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalSESs.setStatus('current')
cspTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalCVs.setStatus('current')
cspTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 1, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTotalUASs.setStatus('current')
cspFarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2), )
if mibBuilder.loadTexts: cspFarEndTotalTable.setStatus('current')
cspFarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspFarEndTotalEntry.setStatus('current')
cspFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 1), Gauge32()).setUnits('errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalESs.setStatus('current')
cspFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 2), Gauge32()).setUnits('severely errored seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalSESs.setStatus('current')
cspFarEndTotalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 3), Gauge32()).setUnits('coding violations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalCVs.setStatus('current')
cspFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 2, 1, 4), Gauge32()).setUnits('unavailable seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspFarEndTotalUASs.setStatus('current')
cspTraceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3), )
if mibBuilder.loadTexts: cspTraceTable.setStatus('current')
cspTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cspTraceEntry.setStatus('current')
cspTraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTraceToTransmit.setStatus('current')
cspTraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTraceToExpect.setStatus('current')
cspTraceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTraceFailure.setStatus('current')
cspTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ValueSizeConstraint(64, 64), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTraceReceived.setStatus('current')
csStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1), )
if mibBuilder.loadTexts: csStatsTable.setStatus('current')
csStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csStatsEntry.setStatus('current')
cssLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 1), Counter32()).setUnits('loss of signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssLOSs.setStatus('current')
cssLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 2), Counter32()).setUnits('loss of frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cssLOFs.setStatus('current')
cslAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 3), Counter32()).setUnits('alarm indication signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslAISs.setStatus('current')
cslRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 4), Counter32()).setUnits('remote failure indications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslRFIs.setStatus('current')
cspAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 5), Counter32()).setUnits('alarm indication signals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspAISs.setStatus('current')
cspRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 6, 1, 1, 6), Counter32()).setUnits('remote failure indications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspRFIs.setStatus('current')
cspConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1), )
if mibBuilder.loadTexts: cspConfigTable.setStatus('current')
cspConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1), )
sonetPathCurrentEntry.registerAugmentions(("CISCO-SONET-MIB", "cspConfigEntry"))
cspConfigEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: cspConfigEntry.setStatus('current')
cspSonetPathPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unequipped", 1), ("unspecified", 2), ("ds3", 3), ("vt15vc11", 4), ("vt2vc12", 5), ("atmCell", 6), ("hdlcFr", 7), ("e3", 8), ("vtStructured", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSonetPathPayload.setStatus('current')
cspTributaryMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("byteSynchronous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTributaryMappingType.setStatus('current')
cspSignallingTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("signallingTransferMode", 2), ("clearMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSignallingTransportMode.setStatus('current')
cspTributaryGroupingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("au3Grouping", 2), ("au4Grouping", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspTributaryGroupingType.setStatus('current')
csAu4Tug3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1), )
if mibBuilder.loadTexts: csAu4Tug3ConfigTable.setStatus('current')
csAu4Tug3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SONET-MIB", "csAu4Tug3"))
if mibBuilder.loadTexts: csAu4Tug3ConfigEntry.setStatus('current')
csAu4Tug3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: csAu4Tug3.setStatus('current')
csAu4Tug3Payload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("vc11", 2), ("vc12", 3), ("tu3ds3", 4), ("tu3e3", 5))).clone('vc11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAu4Tug3Payload.setStatus('current')
csNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 126, 1, 8, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csNotificationsEnabled.setStatus('current')
ciscoSonetSectionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 1)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetSectionStatusChange.setStatus('current')
ciscoSonetLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 2)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetLineStatusChange.setStatus('current')
ciscoSonetPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 3)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetPathStatusChange.setStatus('current')
ciscoSonetVTStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 126, 0, 4)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: ciscoSonetVTStatusChange.setStatus('current')
ciscoSonetMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3))
ciscoSonetMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1))
ciscoSonetMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2))
ciscoSonetMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 1)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetStatsMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetApsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance = ciscoSonetMIBCompliance.setStatus('deprecated')
ciscoSonetMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 2)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetStatsMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetApsMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetVTConfMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance1 = ciscoSonetMIBCompliance1.setStatus('deprecated')
ciscoSonetMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 3)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetNotifEnableGroup"), ("CISCO-SONET-MIB", "ciscoSonetSectionNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance2 = ciscoSonetMIBCompliance2.setStatus('deprecated')
ciscoSonetMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 1, 4)).setObjects(("CISCO-SONET-MIB", "ciscoSonetConfMIBGroup1"), ("CISCO-SONET-MIB", "ciscoSonetTraceMIBGroup"), ("CISCO-SONET-MIB", "ciscoSonetNotifEnableGroup"), ("CISCO-SONET-MIB", "ciscoSonetSectionNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetMIBCompliance3 = ciscoSonetMIBCompliance3.setStatus('current')
ciscoSonetConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 1)).setObjects(("CISCO-SONET-MIB", "csConfigLoopbackType"), ("CISCO-SONET-MIB", "csConfigXmtClockSource"), ("CISCO-SONET-MIB", "csConfigFrameScramble"), ("CISCO-SONET-MIB", "csConfigType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetConfMIBGroup = ciscoSonetConfMIBGroup.setStatus('deprecated')
ciscoSonetStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 2)).setObjects(("CISCO-SONET-MIB", "cssTotalESs"), ("CISCO-SONET-MIB", "cssTotalSESs"), ("CISCO-SONET-MIB", "cssTotalSEFSs"), ("CISCO-SONET-MIB", "cssTotalCVs"), ("CISCO-SONET-MIB", "cssLOSs"), ("CISCO-SONET-MIB", "cssLOFs"), ("CISCO-SONET-MIB", "cslAISs"), ("CISCO-SONET-MIB", "cslRFIs"), ("CISCO-SONET-MIB", "cspAISs"), ("CISCO-SONET-MIB", "cspRFIs"), ("CISCO-SONET-MIB", "cslTotalESs"), ("CISCO-SONET-MIB", "cslTotalSESs"), ("CISCO-SONET-MIB", "cslTotalCVs"), ("CISCO-SONET-MIB", "cslTotalUASs"), ("CISCO-SONET-MIB", "cslFarEndTotalESs"), ("CISCO-SONET-MIB", "cslFarEndTotalSESs"), ("CISCO-SONET-MIB", "cslFarEndTotalCVs"), ("CISCO-SONET-MIB", "cslFarEndTotalUASs"), ("CISCO-SONET-MIB", "cspTotalESs"), ("CISCO-SONET-MIB", "cspTotalSESs"), ("CISCO-SONET-MIB", "cspTotalCVs"), ("CISCO-SONET-MIB", "cspTotalUASs"), ("CISCO-SONET-MIB", "cspFarEndTotalESs"), ("CISCO-SONET-MIB", "cspFarEndTotalSESs"), ("CISCO-SONET-MIB", "cspFarEndTotalCVs"), ("CISCO-SONET-MIB", "cspFarEndTotalUASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetStatsMIBGroup = ciscoSonetStatsMIBGroup.setStatus('current')
ciscoSonetTraceMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 3)).setObjects(("CISCO-SONET-MIB", "cssTraceToTransmit"), ("CISCO-SONET-MIB", "cssTraceToExpect"), ("CISCO-SONET-MIB", "cssTraceFailure"), ("CISCO-SONET-MIB", "cssTraceReceived"), ("CISCO-SONET-MIB", "cspTraceToTransmit"), ("CISCO-SONET-MIB", "cspTraceToExpect"), ("CISCO-SONET-MIB", "cspTraceFailure"), ("CISCO-SONET-MIB", "cspTraceReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetTraceMIBGroup = ciscoSonetTraceMIBGroup.setStatus('current')
ciscoSonetApsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 4)).setObjects(("CISCO-SONET-MIB", "csApsProtectionIndex"), ("CISCO-SONET-MIB", "csApsEnable"), ("CISCO-SONET-MIB", "csApsArchMode"), ("CISCO-SONET-MIB", "csApsActiveLine"), ("CISCO-SONET-MIB", "csApsSigFaultBER"), ("CISCO-SONET-MIB", "csApsSigDegradeBER"), ("CISCO-SONET-MIB", "csApsWaitToRestore"), ("CISCO-SONET-MIB", "csApsDirection"), ("CISCO-SONET-MIB", "csApsRevertive"), ("CISCO-SONET-MIB", "csApsLineFailureCode"), ("CISCO-SONET-MIB", "csApsLineSwitchReason"), ("CISCO-SONET-MIB", "csApsDirectionOperational"), ("CISCO-SONET-MIB", "csApsArchModeOperational"), ("CISCO-SONET-MIB", "csApsChannelProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetApsMIBGroup = ciscoSonetApsMIBGroup.setStatus('deprecated')
ciscoSonetApsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 5)).setObjects(("CISCO-SONET-MIB", "csApsProtectionIndex"), ("CISCO-SONET-MIB", "csApsEnable"), ("CISCO-SONET-MIB", "csApsArchMode"), ("CISCO-SONET-MIB", "csApsActiveLine"), ("CISCO-SONET-MIB", "csApsSigFaultBER"), ("CISCO-SONET-MIB", "csApsSigDegradeBER"), ("CISCO-SONET-MIB", "csApsWaitToRestore"), ("CISCO-SONET-MIB", "csApsDirection"), ("CISCO-SONET-MIB", "csApsRevertive"), ("CISCO-SONET-MIB", "csApsLineFailureCode"), ("CISCO-SONET-MIB", "csApsLineSwitchReason"), ("CISCO-SONET-MIB", "csApsDirectionOperational"), ("CISCO-SONET-MIB", "csApsArchModeOperational"), ("CISCO-SONET-MIB", "csApsChannelProtocol"), ("CISCO-SONET-MIB", "csApsFailureStatus"), ("CISCO-SONET-MIB", "csApsSwitchReason"), ("CISCO-SONET-MIB", "csApsPrimarySection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetApsMIBGroup1 = ciscoSonetApsMIBGroup1.setStatus('current')
ciscoSonetConfMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 6)).setObjects(("CISCO-SONET-MIB", "csConfigLoopbackType"), ("CISCO-SONET-MIB", "csConfigXmtClockSource"), ("CISCO-SONET-MIB", "csConfigFrameScramble"), ("CISCO-SONET-MIB", "csConfigType"), ("CISCO-SONET-MIB", "csConfigRDIPType"), ("CISCO-SONET-MIB", "csConfigRDIVType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetConfMIBGroup1 = ciscoSonetConfMIBGroup1.setStatus('current')
ciscoSonetVTConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 7)).setObjects(("CISCO-SONET-MIB", "csTributaryType"), ("CISCO-SONET-MIB", "csTributaryMappingType"), ("CISCO-SONET-MIB", "csTributaryFramingType"), ("CISCO-SONET-MIB", "csSignallingTransportMode"), ("CISCO-SONET-MIB", "csTributaryGroupingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetVTConfMIBGroup = ciscoSonetVTConfMIBGroup.setStatus('current')
ciscoSonetPathConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 8)).setObjects(("CISCO-SONET-MIB", "cspSonetPathPayload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathConfMIBGroup = ciscoSonetPathConfMIBGroup.setStatus('current')
ciscoSonetNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 9)).setObjects(("CISCO-SONET-MIB", "csNotificationsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetNotifEnableGroup = ciscoSonetNotifEnableGroup.setStatus('current')
ciscoSonetSectionNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 10)).setObjects(("CISCO-SONET-MIB", "ciscoSonetSectionStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetSectionNotifGroup = ciscoSonetSectionNotifGroup.setStatus('current')
ciscoSonetLineNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 11)).setObjects(("CISCO-SONET-MIB", "ciscoSonetLineStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetLineNotifGroup = ciscoSonetLineNotifGroup.setStatus('current')
ciscoSonetPathNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 12)).setObjects(("CISCO-SONET-MIB", "ciscoSonetPathStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathNotifGroup = ciscoSonetPathNotifGroup.setStatus('current')
ciscoSonetVTNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 13)).setObjects(("CISCO-SONET-MIB", "ciscoSonetVTStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetVTNotifGroup = ciscoSonetVTNotifGroup.setStatus('current')
ciscoSonetPathConfMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 14)).setObjects(("CISCO-SONET-MIB", "cspTributaryMappingType"), ("CISCO-SONET-MIB", "cspSignallingTransportMode"), ("CISCO-SONET-MIB", "cspTributaryGroupingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetPathConfMIBGroup1 = ciscoSonetPathConfMIBGroup1.setStatus('current')
ciscoSonetAu4Tug3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 126, 3, 2, 15)).setObjects(("CISCO-SONET-MIB", "csAu4Tug3Payload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSonetAu4Tug3Group = ciscoSonetAu4Tug3Group.setStatus('current')
mibBuilder.exportSymbols("CISCO-SONET-MIB", csAu4Tug3Config=csAu4Tug3Config, ciscoSonetLineNotifGroup=ciscoSonetLineNotifGroup, csConfigTable=csConfigTable, ciscoSonetMIBObjects=ciscoSonetMIBObjects, cssTraceToExpect=cssTraceToExpect, cssLOFs=cssLOFs, cslAISs=cslAISs, cssTotalSEFSs=cssTotalSEFSs, csApsArchMode=csApsArchMode, ciscoSonetVTStatusChange=ciscoSonetVTStatusChange, csTributaryGroupingType=csTributaryGroupingType, cspConfig=cspConfig, cslFarEndTotalSESs=cslFarEndTotalSESs, csConfigLoopbackType=csConfigLoopbackType, cspFarEndTotalUASs=cspFarEndTotalUASs, csApsActiveLine=csApsActiveLine, csAu4Tug3ConfigTable=csAu4Tug3ConfigTable, cssTotalESs=cssTotalESs, csTributaryMappingType=csTributaryMappingType, cssTotalTable=cssTotalTable, csPath=csPath, cspTotalSESs=cspTotalSESs, cspFarEndTotalESs=cspFarEndTotalESs, cslTotalESs=cslTotalESs, csApsConfigEntry=csApsConfigEntry, cssTotalEntry=cssTotalEntry, ciscoSonetVTConfMIBGroup=ciscoSonetVTConfMIBGroup, csSignallingTransportMode=csSignallingTransportMode, cspTotalCVs=cspTotalCVs, ciscoSonetMIB=ciscoSonetMIB, cspTributaryGroupingType=cspTributaryGroupingType, csApsLineFailureCode=csApsLineFailureCode, ciscoSonetConfMIBGroup=ciscoSonetConfMIBGroup, cssTotalCVs=cssTotalCVs, cslTotalTable=cslTotalTable, cslFarEndTotalTable=cslFarEndTotalTable, cspConfigTable=cspConfigTable, csTributaryType=csTributaryType, cspFarEndTotalSESs=cspFarEndTotalSESs, ciscoSonetPathStatusChange=ciscoSonetPathStatusChange, cslTotalUASs=cslTotalUASs, cslTotalEntry=cslTotalEntry, ciscoSonetMIBCompliance=ciscoSonetMIBCompliance, ciscoSonetLineStatusChange=ciscoSonetLineStatusChange, csApsProtectionIndex=csApsProtectionIndex, CsApsLineSwitchReason=CsApsLineSwitchReason, ciscoSonetPathConfMIBGroup1=ciscoSonetPathConfMIBGroup1, csApsSwitchReason=csApsSwitchReason, csLine=csLine, cslFarEndTotalEntry=cslFarEndTotalEntry, csApsArchModeOperational=csApsArchModeOperational, csSection=csSection, ciscoSonetTraceMIBGroup=ciscoSonetTraceMIBGroup, cspTributaryMappingType=cspTributaryMappingType, cslTotalSESs=cslTotalSESs, csApsConfig=csApsConfig, CsApsLineFailureCode=CsApsLineFailureCode, PYSNMP_MODULE_ID=ciscoSonetMIB, ciscoSonetSectionNotifGroup=ciscoSonetSectionNotifGroup, csApsSigFaultBER=csApsSigFaultBER, cslTotalCVs=cslTotalCVs, cspTraceToTransmit=cspTraceToTransmit, csStatsEntry=csStatsEntry, csApsChannelProtocol=csApsChannelProtocol, csApsSigDegradeBER=csApsSigDegradeBER, csApsWorkingIndex=csApsWorkingIndex, csConfigType=csConfigType, cssTraceFailure=cssTraceFailure, ciscoSonetApsMIBGroup=ciscoSonetApsMIBGroup, cssTraceReceived=cssTraceReceived, csStatsTable=csStatsTable, csConfigXmtClockSource=csConfigXmtClockSource, cspAISs=cspAISs, cspTraceEntry=cspTraceEntry, csVTConfigTable=csVTConfigTable, ciscoSonetMIBCompliance1=ciscoSonetMIBCompliance1, csApsEnable=csApsEnable, csApsFailureStatus=csApsFailureStatus, ciscoSonetStatsMIBGroup=ciscoSonetStatsMIBGroup, cspFarEndTotalTable=cspFarEndTotalTable, ciscoSonetAu4Tug3Group=ciscoSonetAu4Tug3Group, csConfig=csConfig, cslFarEndTotalESs=cslFarEndTotalESs, cslFarEndTotalUASs=cslFarEndTotalUASs, ciscoSonetMIBConformance=ciscoSonetMIBConformance, csStats=csStats, ciscoSonetMIBGroups=ciscoSonetMIBGroups, cspConfigEntry=cspConfigEntry, cspFarEndTotalCVs=cspFarEndTotalCVs, csAu4Tug3ConfigEntry=csAu4Tug3ConfigEntry, csAu4Tug3=csAu4Tug3, csNotifications=csNotifications, ciscoSonetMIBCompliances=ciscoSonetMIBCompliances, ciscoSonetMIBCompliance3=ciscoSonetMIBCompliance3, ciscoSonetSectionStatusChange=ciscoSonetSectionStatusChange, cssTotalSESs=cssTotalSESs, csTributaryFramingType=csTributaryFramingType, cspTotalTable=cspTotalTable, cspSignallingTransportMode=cspSignallingTransportMode, csConfigRDIPType=csConfigRDIPType, ciscoSonetPathConfMIBGroup=ciscoSonetPathConfMIBGroup, cssLOSs=cssLOSs, cspRFIs=cspRFIs, ciscoSonetConfMIBGroup1=ciscoSonetConfMIBGroup1, cssTraceToTransmit=cssTraceToTransmit, cspFarEndTotalEntry=cspFarEndTotalEntry, cslRFIs=cslRFIs, cssTraceTable=cssTraceTable, cspTraceToExpect=cspTraceToExpect, cspTraceFailure=cspTraceFailure, ciscoSonetNotifEnableGroup=ciscoSonetNotifEnableGroup, csApsConfigTable=csApsConfigTable, cspTotalESs=cspTotalESs, csApsWaitToRestore=csApsWaitToRestore, ciscoSonetApsMIBGroup1=ciscoSonetApsMIBGroup1, csConfigRDIVType=csConfigRDIVType, csVTConfigEntry=csVTConfigEntry, cslFarEndTotalCVs=cslFarEndTotalCVs, ciscoSonetPathNotifGroup=ciscoSonetPathNotifGroup, cspTotalUASs=cspTotalUASs, csApsDirection=csApsDirection, cssTraceEntry=cssTraceEntry, csConfigEntry=csConfigEntry, cspTraceReceived=cspTraceReceived, cspTotalEntry=cspTotalEntry, csConfigFrameScramble=csConfigFrameScramble, csApsRevertive=csApsRevertive, ciscoSonetVTNotifGroup=ciscoSonetVTNotifGroup, ciscoSonetMIBNotifs=ciscoSonetMIBNotifs, cspSonetPathPayload=cspSonetPathPayload, csApsLineSwitchReason=csApsLineSwitchReason, cspTraceTable=cspTraceTable, csAu4Tug3Payload=csAu4Tug3Payload, CsApsLineFailureStatus=CsApsLineFailureStatus, csNotificationsEnabled=csNotificationsEnabled, csApsPrimarySection=csApsPrimarySection, csApsDirectionOperational=csApsDirectionOperational, ciscoSonetMIBCompliance2=ciscoSonetMIBCompliance2)
