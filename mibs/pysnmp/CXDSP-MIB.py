#
# PySNMP MIB module CXDSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXDSP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
cxDsp, SapIndex, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxDsp", "SapIndex", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, iso, ObjectIdentity, Unsigned32, IpAddress, Gauge32, Counter64, Integer32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "iso", "ObjectIdentity", "Unsigned32", "IpAddress", "Gauge32", "Counter64", "Integer32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class X25Address(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class DspCuAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 254)

class DspDevAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 254)

class DspRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

class DspCircuitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("singusr-noreqcirc", 1), ("singusr-reqcirc", 2), ("multuser-reqcirc", 3), ("mes-usr-reqcirc", 4))

class DspOperationalMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("offline", 1), ("online", 2))

class DspPartner(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("terminal-terminal", 1), ("host-terminal", 2))

class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

class ThruputClass(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("bps75", 3), ("bps150", 4), ("bps300", 5), ("bps600", 6), ("bps1200", 7), ("bps2400", 8), ("bps4800", 9), ("bps9600", 10), ("bps19200", 11), ("bps38400", 12), ("bps64000", 13))

dspSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1), )
if mibBuilder.loadTexts: dspSapTable.setStatus('mandatory')
dspSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1), ).setIndexNames((0, "CXDSP-MIB", "dspSapNumber"))
if mibBuilder.loadTexts: dspSapEntry.setStatus('mandatory')
dspSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspSapNumber.setStatus('mandatory')
dspSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 2), DspRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapRowStatus.setStatus('mandatory')
dspSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2))).clone('lower')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapType.setStatus('mandatory')
dspSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapAlias.setStatus('mandatory')
dspSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapCompanionAlias.setStatus('mandatory')
dspSapSnalcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapSnalcRef.setStatus('mandatory')
dspSapEbcdicAsciiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encdicMode", 1), ("asciiMode", 2))).clone('encdicMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspSapEbcdicAsciiMode.setStatus('mandatory')
dspSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspSapControl.setStatus('mandatory')
dspSapOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 1, 1, 30), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspSapOperationalMode.setStatus('mandatory')
dspCuTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2), )
if mibBuilder.loadTexts: dspCuTable.setStatus('mandatory')
dspCuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1), ).setIndexNames((0, "CXDSP-MIB", "dspCuSapNumber"), (0, "CXDSP-MIB", "dspCuAddress"))
if mibBuilder.loadTexts: dspCuEntry.setStatus('mandatory')
dspCuSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuSapNumber.setStatus('mandatory')
dspCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 2), DspCuAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuAddress.setStatus('mandatory')
dspCuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 3), DspRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuRowStatus.setStatus('mandatory')
dspCuType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("termInterfaceUnit", 1), ("hostInterfaceUnit", 2))).clone('termInterfaceUnit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuType.setStatus('mandatory')
dspCuCallingX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 5), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuCallingX25Address.setStatus('mandatory')
dspCuCalledX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 6), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuCalledX25Address.setStatus('mandatory')
dspCuDSPCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 8), DspCircuitType().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuDSPCircuitType.setStatus('mandatory')
dspCuWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuWindow.setStatus('mandatory')
dspCuUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuUserData.setStatus('mandatory')
dspCuFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuFacility.setStatus('mandatory')
dspCuApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuApplicationId.setStatus('mandatory')
dspCuReqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fixedClassCrm", 1), ("specificClassCrm", 2), ("nonSpecificClassCrm", 3), ("associateDeviceCrm", 4))).clone('fixedClassCrm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuReqMode.setStatus('mandatory')
dspCuPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 14), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuPacketSize.setStatus('mandatory')
dspCuThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 15), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuThroughput.setStatus('mandatory')
dspCuPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 16), DspPartner().clone('terminal-terminal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspCuPartner.setStatus('mandatory')
dspCuControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspCuControl.setStatus('mandatory')
dspCuState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("x25-connecting", 2), ("x25-wait-endtoend", 3), ("x25-connected", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuState.setStatus('mandatory')
dspCuOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 31), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuOperationalMode.setStatus('mandatory')
dspCuX25CallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuX25CallRequest.setStatus('mandatory')
dspCuX25CallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuX25CallAccept.setStatus('mandatory')
dspCuClears = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuClears.setStatus('mandatory')
dspCuClearsInd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuClearsInd.setStatus('mandatory')
dspCuInvToClear = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspCuInvToClear.setStatus('mandatory')
dspDevTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3), )
if mibBuilder.loadTexts: dspDevTable.setStatus('mandatory')
dspDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1), ).setIndexNames((0, "CXDSP-MIB", "dspDevSapNumber"), (0, "CXDSP-MIB", "dspDevCuAddress"), (0, "CXDSP-MIB", "dspDevAddress"))
if mibBuilder.loadTexts: dspDevEntry.setStatus('mandatory')
dspDevSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevSapNumber.setStatus('mandatory')
dspDevCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 2), DspCuAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCuAddress.setStatus('mandatory')
dspDevAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 3), DspDevAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevAddress.setStatus('mandatory')
dspDevRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRowStatus.setStatus('mandatory')
dspDevUCN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevUCN.setStatus('mandatory')
dspDevRemoteCuAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 6), DspCuAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRemoteCuAddress.setStatus('mandatory')
dspDevRemoteDevAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 7), DspDevAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevRemoteDevAddress.setStatus('mandatory')
dspDevFormatSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("char480", 1), ("char960", 2), ("char1920", 3), ("char2560", 4), ("char3440", 5), ("char3564", 6), ("charReserved1", 7), ("charReserved2", 8))).clone('char3440')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevFormatSize.setStatus('mandatory')
dspDevAttPrnt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPrinterAttached", 1), ("printerAttached", 2))).clone('noPrinterAttached')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevAttPrnt.setStatus('mandatory')
dspDevCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneCharSet", 1), ("aplCharSet", 2), ("textCharSet", 3), ("aplTextCharSet", 4))).clone('textCharSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevCharSet.setStatus('mandatory')
dspDevColour = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("colourSuport", 1), ("noColourSuport", 2))).clone('noColourSuport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevColour.setStatus('mandatory')
dspDevTTextSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparentText", 1), ("nonTransparentText", 2))).clone('nonTransparentText')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevTTextSupport.setStatus('mandatory')
dspDevDPmode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("display", 1), ("printer", 2))).clone('display')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dspDevDPmode.setStatus('mandatory')
dspDevControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dspDevControl.setStatus('mandatory')
dspDevOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 30), DspOperationalMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevOperationalMode.setStatus('mandatory')
dspDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("x25-connected", 2), ("wait-circuit-request", 3), ("wait-circuit-enabled", 4), ("wait-status", 5), ("connected", 6), ("disconnecting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevState.setStatus('mandatory')
dspDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevStatus.setStatus('mandatory')
dspDevSense = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevSense.setStatus('mandatory')
dspDevCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCommand.setStatus('mandatory')
dspDevResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevResponse.setStatus('mandatory')
dspDevCmdRspUndel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspUndel.setStatus('mandatory')
dspDevCmdRspUndelReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("eot", 1), ("rvi", 2), ("ff", 3), ("timeout", 4), ("nak", 5), ("wack", 6), ("reserved", 7), ("invalid", 8), ("ur", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspUndelReason.setStatus('mandatory')
dspDevCmdRspAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspAbort.setStatus('mandatory')
dspDevCmdRspAbortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 10))).clone(namedValues=NamedValues(("ff", 3), ("timeout", 4), ("nak", 5), ("ste", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCmdRspAbortReason.setStatus('mandatory')
dspDevStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevStatStatus.setStatus('mandatory')
dspDevAck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevAck.setStatus('mandatory')
dspDevInvToClear = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevInvToClear.setStatus('mandatory')
dspDevInvClearReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 18, 19, 32, 33))).clone(namedValues=NamedValues(("userInitiated", 1), ("unidentPkt", 16), ("invStateTrans", 17), ("invDqFormat", 18), ("invDataFormat", 19), ("timeout", 32), ("facility", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevInvClearReason.setStatus('mandatory')
dspDevReset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevReset.setStatus('mandatory')
dspDevResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19))).clone(namedValues=NamedValues(("unidentDqPkt", 16), ("seqErr", 17), ("invDqFormat", 18), ("invDataFormat", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevResetReason.setStatus('mandatory')
dspDevCircuitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitEnabled.setStatus('mandatory')
dspDevCircuitRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitRequest.setStatus('mandatory')
dspDevCircuitDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 57, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspDevCircuitDisconnect.setStatus('mandatory')
mibBuilder.exportSymbols("CXDSP-MIB", dspSapNumber=dspSapNumber, dspSapType=dspSapType, dspCuPacketSize=dspCuPacketSize, dspDevSapNumber=dspDevSapNumber, dspCuTable=dspCuTable, dspSapSnalcRef=dspSapSnalcRef, dspCuEntry=dspCuEntry, dspDevTTextSupport=dspDevTTextSupport, dspDevCircuitDisconnect=dspDevCircuitDisconnect, dspCuRowStatus=dspCuRowStatus, dspDevInvClearReason=dspDevInvClearReason, dspCuX25CallRequest=dspCuX25CallRequest, dspDevStatus=dspDevStatus, dspCuX25CallAccept=dspCuX25CallAccept, dspCuReqMode=dspCuReqMode, dspDevRowStatus=dspDevRowStatus, dspCuAddress=dspCuAddress, dspCuState=dspCuState, dspCuCallingX25Address=dspCuCallingX25Address, dspDevRemoteCuAddress=dspDevRemoteCuAddress, DspOperationalMode=DspOperationalMode, dspCuApplicationId=dspCuApplicationId, dspDevColour=dspDevColour, dspDevOperationalMode=dspDevOperationalMode, dspDevCircuitEnabled=dspDevCircuitEnabled, dspDevCuAddress=dspDevCuAddress, dspDevAddress=dspDevAddress, dspSapCompanionAlias=dspSapCompanionAlias, dspSapOperationalMode=dspSapOperationalMode, dspCuPartner=dspCuPartner, dspDevRemoteDevAddress=dspDevRemoteDevAddress, dspDevSense=dspDevSense, dspSapAlias=dspSapAlias, dspDevState=dspDevState, dspCuClears=dspCuClears, dspDevCircuitRequest=dspDevCircuitRequest, dspDevAttPrnt=dspDevAttPrnt, dspCuWindow=dspCuWindow, dspDevEntry=dspDevEntry, dspCuType=dspCuType, dspDevCharSet=dspDevCharSet, ThruputClass=ThruputClass, dspSapTable=dspSapTable, dspCuSapNumber=dspCuSapNumber, dspSapRowStatus=dspSapRowStatus, dspCuInvToClear=dspCuInvToClear, dspCuClearsInd=dspCuClearsInd, PacketSize=PacketSize, dspDevCommand=dspDevCommand, DspDevAddress=DspDevAddress, dspDevUCN=dspDevUCN, DspCircuitType=DspCircuitType, dspCuOperationalMode=dspCuOperationalMode, dspDevCmdRspAbort=dspDevCmdRspAbort, dspSapControl=dspSapControl, dspCuCalledX25Address=dspCuCalledX25Address, dspSapEntry=dspSapEntry, dspSapEbcdicAsciiMode=dspSapEbcdicAsciiMode, dspDevResetReason=dspDevResetReason, dspDevCmdRspUndel=dspDevCmdRspUndel, dspCuFacility=dspCuFacility, dspDevStatStatus=dspDevStatStatus, dspCuThroughput=dspCuThroughput, DspRowStatus=DspRowStatus, dspDevReset=dspDevReset, DspCuAddress=DspCuAddress, dspDevAck=dspDevAck, DspPartner=DspPartner, dspDevFormatSize=dspDevFormatSize, dspDevResponse=dspDevResponse, dspCuDSPCircuitType=dspCuDSPCircuitType, dspCuControl=dspCuControl, dspDevControl=dspDevControl, dspDevCmdRspAbortReason=dspDevCmdRspAbortReason, X25Address=X25Address, dspDevInvToClear=dspDevInvToClear, dspCuUserData=dspCuUserData, dspDevTable=dspDevTable, dspDevCmdRspUndelReason=dspDevCmdRspUndelReason, dspDevDPmode=dspDevDPmode)
