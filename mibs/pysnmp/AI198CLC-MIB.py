#
# PySNMP MIB module AI198CLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AI198CLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Gauge32, ObjectIdentity, Bits, enterprises, IpAddress, iso, Unsigned32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "Bits", "enterprises", "IpAddress", "iso", "Unsigned32", "TimeTicks", "MibIdentifier")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiCLC = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 9))
if mibBuilder.loadTexts: aiCLC.setLastUpdated('9505081700Z')
if mibBuilder.loadTexts: aiCLC.setOrganization('Applied Innovation Incorporated')
aiCLCSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 9, 1))
ai198 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198))
ai198Ver1 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1))
ai198Ver10 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 0))
ai198Ver102 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 0, 2))
ai198Ver103 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 0, 3))
ai198Ver104 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 0, 4))
ai198Ver12 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 2))
ai198Ver120 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 2, 0))
ai198Ver13 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 3))
ai198Ver130 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 198, 1, 3, 0))
aiCLCBox1DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox1DensAdmin.setStatus('current')
aiCLCBox2DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox2DensAdmin.setStatus('current')
aiCLCBox3DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox3DensAdmin.setStatus('current')
aiCLCBox4DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox4DensAdmin.setStatus('current')
aiCLCBox5DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox5DensAdmin.setStatus('current')
aiCLCBox6DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox6DensAdmin.setStatus('current')
aiCLCBox7DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox7DensAdmin.setStatus('current')
aiCLCBox8DensAdmin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16, 32))).clone(namedValues=NamedValues(("disabled", 1), ("four", 4), ("eight", 8), ("sixteen", 16), ("thirtytwo", 32))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBox8DensAdmin.setStatus('current')
aiCLCNodeName = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(0, 29)).clone('NODE-XXX')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCNodeName.setStatus('current')
aiCLCLogPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCLogPortEnable.setStatus('current')
aiCLCAlmLogPort = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAlmLogPort.setStatus('current')
aiCLCActLogLvl = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCActLogLvl.setStatus('current')
aiCLCMinorAlmMin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCMinorAlmMin.setStatus('current')
aiCLCMinorAlmMax = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCMinorAlmMax.setStatus('current')
aiCLCMajorAlmMin = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCMajorAlmMin.setStatus('current')
aiCLCMajorAlmMax = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCMajorAlmMax.setStatus('current')
aiCLCCraftLogEcho = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCraftLogEcho.setStatus('current')
aiCLCCaamlRoute = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCaamlRoute.setStatus('current')
aiCLCCaamlIdleTmr = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCaamlIdleTmr.setStatus('current')
aiCLCCaamlRetryTmr = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCaamlRetryTmr.setStatus('current')
aiCLCConnInfo = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCConnInfo.setStatus('current')
aiCLCLongBrkLen = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1875, 50000)).clone(1875)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCLongBrkLen.setStatus('current')
aiCLCDestMenu = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestMenu.setStatus('current')
aiCLCDownSpd = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDownSpd.setStatus('current')
aiCLCFaultSwitch = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCFaultSwitch.setStatus('current')
aiCLCDestMenuFmt = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("oneCol", 1), ("fourCol", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestMenuFmt.setStatus('current')
aiCLCAutoCLCUpdate = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAutoCLCUpdate.setStatus('current')
aiCLCAlarmLvl = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAlarmLvl.setStatus('current')
aiCLCTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 29), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTimeDate.setStatus('current')
aiCLCRstTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCRstTimeDate.setStatus('current')
aiCLCHoldConn = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCHoldConn.setStatus('current')
aiCLCNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCNumPorts.setStatus('current')
aiCLCQueuedPorts = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCQueuedPorts.setStatus('current')
aiCLCEEPromFaults = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCEEPromFaults.setStatus('current')
aiCLCFreeEE = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCFreeEE.setStatus('current')
aiCLCBuffers = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCBuffers.setStatus('current')
aiCLCFreeBuffers = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCFreeBuffers.setStatus('current')
aiCLCBufAllocErr = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCBufAllocErr.setStatus('current')
aiCLCBufAlign = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCBufAlign.setStatus('current')
aiCLCCpuXacts = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCpuXacts.setStatus('current')
aiCLCSLCXacts = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCSLCXacts.setStatus('current')
aiCLCConnectionsPlaced = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCConnectionsPlaced.setStatus('current')
aiCLCTxTail = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCTxTail.setStatus('current')
aiCLCEECRC = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCEECRC.setStatus('current')
aiCLCVersion = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCVersion.setStatus('current')
aiCLCBackupCLC = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCBackupCLC.setStatus('current')
aiCLCCpu = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slotA", 1), ("slotB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCpu.setStatus('current')
aiCLCCpyConfig = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCpyConfig.setStatus('current')
aiCLCDLWinVerbose = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLWinVerbose.setStatus('current')
aiCLCDLWinIn = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLWinIn.setStatus('current')
aiCLCDLWinOut = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLWinOut.setStatus('current')
aiCLCDLWinUni = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLWinUni.setStatus('current')
aiCLCDLMsgAll = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLMsgAll.setStatus('current')
aiCLCDLNoBody = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLNoBody.setStatus('current')
aiCLCDLAlias = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDLAlias.setStatus('current')
aiCLCDebugVal = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDebugVal.setStatus('current')
aiCLCSwitchRestart = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("restart", 1), ("restartCfg", 2), ("nextCLC", 3), ("reset", 4), ("resetSLC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSwitchRestart.setStatus('current')
aiCLCInitStrings = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCInitStrings.setStatus('current')
aiCLCCopyFlash = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("apbs", 2), ("apas", 3), ("asbs", 4), ("asap", 5), ("bpas", 6), ("bpbs", 7), ("bsbp", 8), ("bsas", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCopyFlash.setStatus('current')
aiCLCCopyFlashToSLC = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCopyFlashToSLC.setStatus('current')
aiCLCReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 61), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCReadCommunity.setStatus('current')
aiCLCWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 62), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCWriteCommunity.setStatus('current')
aiCLCIPAdrs = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCIPAdrs.setStatus('current')
aiCLCRouterIPAdrs = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 64), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRouterIPAdrs.setStatus('current')
aiCLCSubnetIPAdrs = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 65), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSubnetIPAdrs.setStatus('current')
aiCLCTrapTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 1, 66), )
if mibBuilder.loadTexts: aiCLCTrapTable.setStatus('current')
aiCLCLastTrapMsgText = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCLastTrapMsgText.setStatus('current')
aiCLCLastTrapMsgNum = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCLastTrapMsgNum.setStatus('current')
aiCLCCrashMsgText = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCrashMsgText.setStatus('current')
aiCLCNumEventsSinceLastTrap = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCNumEventsSinceLastTrap.setStatus('current')
aiCLCTrapTimer = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTrapTimer.setStatus('current')
aiCLCAsyncTrap = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAsyncTrap.setStatus('current')
aiCLCTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTelnetServerPort.setStatus('current')
aiCLCColdStartTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCColdStartTrapDelay.setStatus('current')
aiCLCFtpCtrlPort = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCFtpCtrlPort.setStatus('current')
aiCLCBackupCLCHealth = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2), ("presentFaulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCBackupCLCHealth.setStatus('current')
aiCLCBanner = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 77), DisplayString().subtype(subtypeSpec=ValueRangeConstraint(0, 1170))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCBanner.setStatus('current')
aiCLCTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTimeZone.setStatus('current')
aiCLCDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDaylightSavings.setStatus('current')
aiCLCSNTP = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSNTP.setStatus('current')
aiCLCSNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 81), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSNTPPrimaryServer.setStatus('current')
aiCLCSNTPSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 82), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSNTPSecondaryServer.setStatus('current')
aiCLCSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSNTPPollInterval.setStatus('current')
aiCLCRadiusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("localFallback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusEnabled.setStatus('current')
aiCLCRadiusAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 85), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusAddr1.setStatus('current')
aiCLCRadiusPort1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusPort1.setStatus('current')
aiCLCRadiusSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('applied')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusSecret1.setStatus('current')
aiCLCRadiusAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 88), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusAddr2.setStatus('current')
aiCLCRadiusPort2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusPort2.setStatus('current')
aiCLCRadiusSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('applied')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCRadiusSecret2.setStatus('current')
aiCLCTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTrapInterval.setStatus('current')
aiCLCTacacsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("localFallback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsEnabled.setStatus('current')
aiCLCTacacsAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 93), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsAddr1.setStatus('current')
aiCLCTacacsPort1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsPort1.setStatus('current')
aiCLCTacacsSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('applied')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsSecret1.setStatus('current')
aiCLCTacacsAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 96), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsAddr2.setStatus('current')
aiCLCTacacsPort2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 97), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsPort2.setStatus('current')
aiCLCTacacsSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 539, 9, 1, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('applied')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCTacacsSecret2.setStatus('current')
aiCLCTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 1, 66, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCTrapIPAdrs"))
if mibBuilder.loadTexts: aiCLCTrapTableEntry.setStatus('current')
aiCLCTrapIPAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 1, 66, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCTrapIPAdrs.setStatus('current')
aiCLCTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 1, 66, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCTrapRowStatus.setStatus('current')
aiCLCCardTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 2), )
if mibBuilder.loadTexts: aiCLCCardTable.setStatus('current')
aiCLCCardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 2, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCCTIndex"))
if mibBuilder.loadTexts: aiCLCCardTableEntry.setStatus('current')
aiCLCCTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTIndex.setStatus('current')
aiCLCCTAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTAdminStatus.setStatus('current')
aiCLCCTBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTBasePort.setStatus('current')
aiCLCCTHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTHighPort.setStatus('current')
aiCLCCTRdCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTRdCommStr.setStatus('current')
aiCLCCTWrCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTWrCommStr.setStatus('current')
aiCLCCTCardSnmpState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nosnmp", 1), ("snmpProxy", 2), ("snmpDirect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTCardSnmpState.setStatus('current')
aiCLCCTCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("asynch", 1), ("aslc", 2), ("ethernet", 3), ("x25", 4), ("asp", 5), ("islc", 6), ("ai2524", 7), ("ai294", 8), ("ai196im", 9), ("x25m", 10), ("islc1", 11), ("ai296", 12), ("ai285", 13), ("ai232", 14), ("ai196ILEG", 15), ("aimod", 16), ("aiflx", 17), ("empty", 18), ("ai120", 19), ("aie1", 20), ("aitc", 21), ("aifocus", 22), ("wanE1", 23), ("wanT1", 24))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTCardType.setStatus('current')
aiCLCCTSlotExp = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTSlotExp.setStatus('current')
aiCLCCTIPAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTIPAdrs.setStatus('current')
aiCLCCTRtrIPAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTRtrIPAdrs.setStatus('current')
aiCLCCTSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTSubnetMask.setStatus('current')
aiCLCCTAutoIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTAutoIdIndex.setStatus('current')
aiCLCCTSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTSysOID.setStatus('current')
aiCLCCTRealCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("asynch", 1), ("aslc", 2), ("ethernet", 3), ("x25", 4), ("asp", 5), ("islc", 6), ("ai2524", 7), ("ai294", 8), ("ai196im", 9), ("x25m", 10), ("islc1", 11), ("ai296", 12), ("ai285", 13), ("ai232", 14), ("ai196ILEG", 15), ("aimod", 16), ("aiflx", 17), ("empty", 18), ("ai120", 19), ("aie1", 20), ("aitc", 21), ("aifocus", 22), ("wanE1", 23), ("wanT1", 24))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTRealCardType.setStatus('current')
aiCLCCTIPRange = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTIPRange.setStatus('current')
aiCLCCTTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTTelnetPort.setStatus('current')
aiCLCCTCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTCardReset.setStatus('current')
aiCLCCTLastSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCCTLastSequenceNumber.setStatus('current')
aiCLCCTRtr2IPAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCTRtr2IPAdrs.setStatus('current')
aiCLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 3), )
if mibBuilder.loadTexts: aiCLCPortTable.setStatus('current')
aiCLCPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 3, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCPortNumber"))
if mibBuilder.loadTexts: aiCLCPortTableEntry.setStatus('current')
aiCLCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCPortNumber.setStatus('current')
aiCLCPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user", 1), ("destination", 2), ("actConn", 3), ("dedicated", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortType.setStatus('current')
aiCLCPortDedicated = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortDedicated.setStatus('current')
aiCLCPortDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortDestName.setStatus('current')
aiCLCPortEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortEcho.setStatus('current')
aiCLCPortDestMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortDestMenu.setStatus('current')
aiCLCPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortQueue.setStatus('current')
aiCLCSLCProtocolCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCSLCProtocolCode.setStatus('current')
aiCLCPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCPortState.setStatus('current')
aiCLCPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("idle", 1), ("selcos", 2), ("pswd", 3), ("uname", 4), ("dna", 5), ("tcp", 6), ("queue", 7), ("holdq", 8), ("waitq", 9), ("ai", 10), ("conn", 11), ("preconn", 12), ("predisc", 13), ("hold", 14), ("netconn", 15), ("file", 16), ("inact", 17), ("swdwn", 18), ("telnetClient", 19), ("unknown", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCPortStatus.setStatus('current')
aiCLCPortAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCPortAlm.setStatus('current')
aiCLCPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortDesc.setStatus('current')
aiCLCPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCPortReset.setStatus('current')
aiCLCAliasTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 4), )
if mibBuilder.loadTexts: aiCLCAliasTable.setStatus('current')
aiCLCAliasTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 4, 1), ).setIndexNames((1, "AI198CLC-MIB", "aiCLCAliasIndex"))
if mibBuilder.loadTexts: aiCLCAliasTableEntry.setStatus('current')
aiCLCAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCAliasIndex.setStatus('current')
aiCLCAliasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCAliasRowStatus.setStatus('current')
aiCLCXlatType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("simple", 1), ("muxconn", 2), ("muxxlat", 3), ("slcroute", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCXlatType.setStatus('current')
aiCLCAliasDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAliasDestName.setStatus('current')
aiCLCCalledAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCalledAdrs.setStatus('current')
aiCLCAliasDestMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAliasDestMenu.setStatus('current')
aiCLCLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCLinkNum.setStatus('current')
aiCLCCallerAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCallerAdrs.setStatus('current')
aiCLCCallData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCallData.setStatus('current')
aiCLCApplicString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCApplicString.setStatus('current')
aiCLCCalledProtoStr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCalledProtoStr.setStatus('current')
aiCLCCallerProtoStr = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCCallerProtoStr.setStatus('current')
aiCLCAlternRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAlternRoute.setStatus('current')
aiCLCAliasPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAliasPosition.setStatus('current')
aiCLCDestTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 5), )
if mibBuilder.loadTexts: aiCLCDestTable.setStatus('current')
aiCLCDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 5, 1), ).setIndexNames((1, "AI198CLC-MIB", "aiCLCDestName"))
if mibBuilder.loadTexts: aiCLCDestTableEntry.setStatus('current')
aiCLCDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCDestName.setStatus('current')
aiCLCDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aiCLCDestRowStatus.setStatus('current')
aiCLCDestCallInit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestCallInit.setStatus('current')
aiCLCDestDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestDisc.setStatus('current')
aiCLCDestDispMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestDispMenu.setStatus('current')
aiCLCDestBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestBaud.setStatus('current')
aiCLCDestIsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestIsSwitch.setStatus('current')
aiCLCDestTmrType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("actTmr", 1), ("sessTmr", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestTmrType.setStatus('current')
aiCLCDestTmrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4368000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestTmrVal.setStatus('current')
aiCLCDestTmrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4368000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestTmrDelay.setStatus('current')
aiCLCDestPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestPswd.setStatus('current')
aiCLCDestQPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestQPswd.setStatus('current')
aiCLCDestMenuMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestMenuMsg.setStatus('current')
aiCLCDestConnMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestConnMsg.setStatus('current')
aiCLCDestDiscMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestDiscMsg.setStatus('current')
aiCLCDestState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestState.setStatus('current')
aiCLCDestNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCDestNumPorts.setStatus('current')
aiCLCDestNumUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCDestNumUsed.setStatus('current')
aiCLCDestNumFree = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCDestNumFree.setStatus('current')
aiCLCDestQHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCDestQHigh.setStatus('current')
aiCLCDestPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCDestPortList.setStatus('current')
aiCLCDestWaitForPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCDestWaitForPort.setStatus('current')
aiCLCAsyncTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 6), )
if mibBuilder.loadTexts: aiCLCAsyncTable.setStatus('current')
aiCLCAsyncTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 6, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCAsyncifIndex"))
if mibBuilder.loadTexts: aiCLCAsyncTableEntry.setStatus('current')
aiCLCAsyncifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAsyncifIndex.setStatus('current')
aiCLCAsyncPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAsyncPort.setStatus('current')
aiCLCAsyncAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAsyncAdminStatus.setStatus('current')
aiCLCAsyncDiscType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nobrkdisc", 1), ("brkdisc", 2), ("longbrkdisc", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCAsyncDiscType.setStatus('current')
aiCLCEIASignals = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eiaDisabled", 1), ("dsrRtsPass", 2), ("dsrOffDisc", 3), ("dsrOnOffDisc", 4), ("dcdOffDisc", 5), ("dcdOnOffDisc", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIASignals.setStatus('current')
aiCLCEIARtsDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIARtsDisc.setStatus('current')
aiCLCEIADtrDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIADtrDisc.setStatus('current')
aiCLCEIARtsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIARtsConn.setStatus('current')
aiCLCEIADtrConn = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIADtrConn.setStatus('current')
aiCLCEIARtsToggle = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIARtsToggle.setStatus('current')
aiCLCEIADtrToggle = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiCLCEIADtrToggle.setStatus('current')
aiCLCAutoIDTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 7), )
if mibBuilder.loadTexts: aiCLCAutoIDTable.setStatus('current')
aiCLCAutoIDTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 7, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCAIDIndex"))
if mibBuilder.loadTexts: aiCLCAutoIDTableEntry.setStatus('current')
aiCLCAIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDIndex.setStatus('current')
aiCLCAIDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDPort.setStatus('current')
aiCLCAIDProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDProduct.setStatus('current')
aiCLCAIDSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDSerialNumber.setStatus('current')
aiCLCAIDManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDManufDate.setStatus('current')
aiCLCAIDMACAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAIDMACAdrs.setStatus('current')
aiCLCAI2524LinkTable = MibTable((1, 3, 6, 1, 4, 1, 539, 9, 8), )
if mibBuilder.loadTexts: aiCLCAI2524LinkTable.setStatus('current')
aiCLCAI2524LinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 9, 8, 1), ).setIndexNames((0, "AI198CLC-MIB", "aiCLCAI2524Port"))
if mibBuilder.loadTexts: aiCLCAI2524LinkTableEntry.setStatus('current')
aiCLCAI2524Port = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAI2524Port.setStatus('current')
aiCLCAI2524LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiCLCAI2524LinkStatus.setStatus('current')
mibBuilder.exportSymbols("AI198CLC-MIB", aiCLCRadiusAddr1=aiCLCRadiusAddr1, aiCLCSystem=aiCLCSystem, aiCLCAlmLogPort=aiCLCAlmLogPort, aiCLCCaamlRetryTmr=aiCLCCaamlRetryTmr, aiCLCActLogLvl=aiCLCActLogLvl, aiCLCReadCommunity=aiCLCReadCommunity, aiCLCDestPortList=aiCLCDestPortList, aiCLCCaamlIdleTmr=aiCLCCaamlIdleTmr, aiCLCCTAdminStatus=aiCLCCTAdminStatus, aiCLCPortStatus=aiCLCPortStatus, aiCLCAutoIDTable=aiCLCAutoIDTable, aiCLCCTIPRange=aiCLCCTIPRange, aiCLCDestTable=aiCLCDestTable, aiCLCTimeDate=aiCLCTimeDate, aiCLCAliasTableEntry=aiCLCAliasTableEntry, ai198Ver120=ai198Ver120, aiCLCVersion=aiCLCVersion, aiCLCLastTrapMsgNum=aiCLCLastTrapMsgNum, aiCLCCpuXacts=aiCLCCpuXacts, aiCLCPortDesc=aiCLCPortDesc, aiCLCDestCallInit=aiCLCDestCallInit, aiCLCAsyncAdminStatus=aiCLCAsyncAdminStatus, aiCLCRouterIPAdrs=aiCLCRouterIPAdrs, aiCLCDestTableEntry=aiCLCDestTableEntry, aiCLCAutoCLCUpdate=aiCLCAutoCLCUpdate, aiCLC=aiCLC, aiCLCPortType=aiCLCPortType, aiCLCDestMenuMsg=aiCLCDestMenuMsg, aiCLCCTRtrIPAdrs=aiCLCCTRtrIPAdrs, aiCLCPortDestName=aiCLCPortDestName, aiCLCAliasDestName=aiCLCAliasDestName, aiCLCBanner=aiCLCBanner, aiCLCCTCardSnmpState=aiCLCCTCardSnmpState, aiCLCBufAlign=aiCLCBufAlign, aiCLCRadiusPort1=aiCLCRadiusPort1, aiCLCTacacsAddr2=aiCLCTacacsAddr2, aiCLCCTAutoIdIndex=aiCLCCTAutoIdIndex, aiCLCAutoIDTableEntry=aiCLCAutoIDTableEntry, aiCLCCTIndex=aiCLCCTIndex, aiCLCCTWrCommStr=aiCLCCTWrCommStr, ai198=ai198, aiCLCPortAlm=aiCLCPortAlm, aiCLCDestMenuFmt=aiCLCDestMenuFmt, aiCLCEEPromFaults=aiCLCEEPromFaults, aiCLCCTSubnetMask=aiCLCCTSubnetMask, aiCLCFtpCtrlPort=aiCLCFtpCtrlPort, ai198Ver103=ai198Ver103, aiCLCNumEventsSinceLastTrap=aiCLCNumEventsSinceLastTrap, aiCLCAIDMACAdrs=aiCLCAIDMACAdrs, ai198Ver13=ai198Ver13, aiCLCDaylightSavings=aiCLCDaylightSavings, aiCLCTrapIPAdrs=aiCLCTrapIPAdrs, aiCLCSNTP=aiCLCSNTP, aiCLCDestNumFree=aiCLCDestNumFree, aiCLCDestMenu=aiCLCDestMenu, aiCLCDestName=aiCLCDestName, aiCLCSubnetIPAdrs=aiCLCSubnetIPAdrs, aiCLCDestBaud=aiCLCDestBaud, aiCLCCTIPAdrs=aiCLCCTIPAdrs, aiCLCDLWinUni=aiCLCDLWinUni, aiCLCCTBasePort=aiCLCCTBasePort, aiCLCDestDisc=aiCLCDestDisc, aiCLCAsyncTable=aiCLCAsyncTable, aiCLCRadiusSecret2=aiCLCRadiusSecret2, aiCLCTrapRowStatus=aiCLCTrapRowStatus, aiCLCMinorAlmMin=aiCLCMinorAlmMin, aiCLCTacacsPort2=aiCLCTacacsPort2, aiCLCCardTableEntry=aiCLCCardTableEntry, aiCLCPortNumber=aiCLCPortNumber, aiCLCAliasDestMenu=aiCLCAliasDestMenu, aiCLCDestIsSwitch=aiCLCDestIsSwitch, aiCLCCallerProtoStr=aiCLCCallerProtoStr, aiCLCBox1DensAdmin=aiCLCBox1DensAdmin, aiCLCBuffers=aiCLCBuffers, aiCLCDestTmrDelay=aiCLCDestTmrDelay, aiCLCCTRealCardType=aiCLCCTRealCardType, aiCLCCpu=aiCLCCpu, ai198Ver1=ai198Ver1, aiCLCFreeBuffers=aiCLCFreeBuffers, aiCLCCrashMsgText=aiCLCCrashMsgText, aiCLCAIDSerialNumber=aiCLCAIDSerialNumber, aiCLCCardTable=aiCLCCardTable, aiCLCAIDPort=aiCLCAIDPort, aiCLCAIDManufDate=aiCLCAIDManufDate, aiCLCAI2524LinkStatus=aiCLCAI2524LinkStatus, aiCLCDestNumUsed=aiCLCDestNumUsed, aiCLCEIADtrDisc=aiCLCEIADtrDisc, aiCLCPortDestMenu=aiCLCPortDestMenu, aiCLCTrapInterval=aiCLCTrapInterval, aiCLCCTSysOID=aiCLCCTSysOID, aiCLCCalledProtoStr=aiCLCCalledProtoStr, aiCLCEIARtsConn=aiCLCEIARtsConn, aiCLCTxTail=aiCLCTxTail, aiCLCTimeZone=aiCLCTimeZone, aiCLCDestRowStatus=aiCLCDestRowStatus, aiCLCCTLastSequenceNumber=aiCLCCTLastSequenceNumber, aiCLCLinkNum=aiCLCLinkNum, aiCLCQueuedPorts=aiCLCQueuedPorts, aiCLCConnectionsPlaced=aiCLCConnectionsPlaced, aiCLCTrapTable=aiCLCTrapTable, aiCLCPortReset=aiCLCPortReset, aiCLCBox5DensAdmin=aiCLCBox5DensAdmin, aiCLCDestQHigh=aiCLCDestQHigh, aiCLCAliasIndex=aiCLCAliasIndex, aii=aii, aiCLCBox2DensAdmin=aiCLCBox2DensAdmin, aiCLCApplicString=aiCLCApplicString, aiCLCEIADtrToggle=aiCLCEIADtrToggle, aiCLCPortTable=aiCLCPortTable, aiCLCAsyncTrap=aiCLCAsyncTrap, aiCLCPortQueue=aiCLCPortQueue, aiCLCHoldConn=aiCLCHoldConn, aiCLCLogPortEnable=aiCLCLogPortEnable, aiCLCAlternRoute=aiCLCAlternRoute, aiCLCBox4DensAdmin=aiCLCBox4DensAdmin, aiCLCAlarmLvl=aiCLCAlarmLvl, aiCLCDLAlias=aiCLCDLAlias, aiCLCFaultSwitch=aiCLCFaultSwitch, aiCLCPortState=aiCLCPortState, aiCLCEIADtrConn=aiCLCEIADtrConn, aiCLCRadiusEnabled=aiCLCRadiusEnabled, aiCLCAliasTable=aiCLCAliasTable, aiCLCBox3DensAdmin=aiCLCBox3DensAdmin, aiCLCDebugVal=aiCLCDebugVal, aiCLCBox7DensAdmin=aiCLCBox7DensAdmin, aiCLCPortTableEntry=aiCLCPortTableEntry, aiCLCColdStartTrapDelay=aiCLCColdStartTrapDelay, aiCLCCalledAdrs=aiCLCCalledAdrs, aiCLCMinorAlmMax=aiCLCMinorAlmMax, aiCLCRstTimeDate=aiCLCRstTimeDate, aiCLCDestNumPorts=aiCLCDestNumPorts, aiCLCTacacsEnabled=aiCLCTacacsEnabled, aiCLCXlatType=aiCLCXlatType, ai198Ver130=ai198Ver130, aiCLCBox8DensAdmin=aiCLCBox8DensAdmin, aiCLCAsyncifIndex=aiCLCAsyncifIndex, aiCLCLastTrapMsgText=aiCLCLastTrapMsgText, aiCLCEIARtsToggle=aiCLCEIARtsToggle, PYSNMP_MODULE_ID=aiCLC, aiCLCDLWinVerbose=aiCLCDLWinVerbose, aiCLCCTCardReset=aiCLCCTCardReset, aiCLCCopyFlash=aiCLCCopyFlash, aiCLCCraftLogEcho=aiCLCCraftLogEcho, aiCLCWriteCommunity=aiCLCWriteCommunity, aiCLCTacacsSecret2=aiCLCTacacsSecret2, aiCLCCTRdCommStr=aiCLCCTRdCommStr, aiCLCDLWinOut=aiCLCDLWinOut, aiCLCAliasRowStatus=aiCLCAliasRowStatus, aiCLCDestTmrVal=aiCLCDestTmrVal, aiCLCNumPorts=aiCLCNumPorts, aiCLCAIDIndex=aiCLCAIDIndex, aiCLCTacacsAddr1=aiCLCTacacsAddr1, aiCLCAliasPosition=aiCLCAliasPosition, aiCLCMajorAlmMin=aiCLCMajorAlmMin, aiCLCPortEcho=aiCLCPortEcho, aiCLCBufAllocErr=aiCLCBufAllocErr, aiCLCDestQPswd=aiCLCDestQPswd, aiCLCTrapTimer=aiCLCTrapTimer, ai198Ver12=ai198Ver12, aiCLCIPAdrs=aiCLCIPAdrs, aiCLCMajorAlmMax=aiCLCMajorAlmMax, aiCLCAI2524LinkTableEntry=aiCLCAI2524LinkTableEntry, aiCLCCTCardType=aiCLCCTCardType, aiCLCCTTelnetPort=aiCLCCTTelnetPort, aiCLCNodeName=aiCLCNodeName, aiCLCDestTmrType=aiCLCDestTmrType, aiCLCDestPswd=aiCLCDestPswd, aiCLCAI2524LinkTable=aiCLCAI2524LinkTable, aiCLCCaamlRoute=aiCLCCaamlRoute, aiCLCBox6DensAdmin=aiCLCBox6DensAdmin, ai198Ver104=ai198Ver104, aiCLCRadiusPort2=aiCLCRadiusPort2, aiCLCEIARtsDisc=aiCLCEIARtsDisc, aiCLCSNTPPollInterval=aiCLCSNTPPollInterval, aiCLCDLNoBody=aiCLCDLNoBody, aiCLCCTSlotExp=aiCLCCTSlotExp, aiCLCRadiusAddr2=aiCLCRadiusAddr2, aiCLCAsyncPort=aiCLCAsyncPort, aiCLCCallData=aiCLCCallData, aiCLCTelnetServerPort=aiCLCTelnetServerPort, aiCLCDestState=aiCLCDestState, aiCLCCTHighPort=aiCLCCTHighPort, aiCLCDestWaitForPort=aiCLCDestWaitForPort, aiCLCLongBrkLen=aiCLCLongBrkLen, aiCLCCopyFlashToSLC=aiCLCCopyFlashToSLC, aiCLCDestDiscMsg=aiCLCDestDiscMsg, aiCLCTrapTableEntry=aiCLCTrapTableEntry, aiCLCAIDProduct=aiCLCAIDProduct, aiCLCDestDispMenu=aiCLCDestDispMenu, aiCLCCTRtr2IPAdrs=aiCLCCTRtr2IPAdrs, aiCLCSLCProtocolCode=aiCLCSLCProtocolCode, aiCLCCallerAdrs=aiCLCCallerAdrs, aiCLCEECRC=aiCLCEECRC, ai198Ver102=ai198Ver102, aiCLCDLMsgAll=aiCLCDLMsgAll, aiCLCEIASignals=aiCLCEIASignals, aiCLCAsyncTableEntry=aiCLCAsyncTableEntry, aiCLCAsyncDiscType=aiCLCAsyncDiscType, aiCLCPortDedicated=aiCLCPortDedicated, aiCLCSNTPPrimaryServer=aiCLCSNTPPrimaryServer, aiCLCSLCXacts=aiCLCSLCXacts, ai198Ver10=ai198Ver10, aiCLCConnInfo=aiCLCConnInfo, aiCLCTacacsSecret1=aiCLCTacacsSecret1, aiCLCCpyConfig=aiCLCCpyConfig, aiCLCBackupCLC=aiCLCBackupCLC, aiCLCTacacsPort1=aiCLCTacacsPort1, aiCLCDownSpd=aiCLCDownSpd, aiCLCInitStrings=aiCLCInitStrings, aiCLCDestConnMsg=aiCLCDestConnMsg, aiCLCBackupCLCHealth=aiCLCBackupCLCHealth, aiCLCSwitchRestart=aiCLCSwitchRestart, aiCLCRadiusSecret1=aiCLCRadiusSecret1, aiCLCAI2524Port=aiCLCAI2524Port, aiCLCDLWinIn=aiCLCDLWinIn, aiCLCSNTPSecondaryServer=aiCLCSNTPSecondaryServer, aiCLCFreeEE=aiCLCFreeEE, aiSystemOID=aiSystemOID)
