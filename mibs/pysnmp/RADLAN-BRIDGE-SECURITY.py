#
# PySNMP MIB module RADLAN-BRIDGE-SECURITY (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-BRIDGE-SECURITY
# Produced by pysmi-0.3.4 at Mon Apr 29 18:46:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, Bits, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, TimeTicks, MibIdentifier, ObjectIdentity, IpAddress, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Bits", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "TimeTicks", "MibIdentifier", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
rlBridgeSecurity = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 112))
if mibBuilder.loadTexts: rlBridgeSecurity.setLastUpdated('200604020000Z')
if mibBuilder.loadTexts: rlBridgeSecurity.setOrganization('')
rlIpDhcpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 112, 1))
rlIpSourceGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 112, 2))
rlIpArpInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 112, 3))
rlProtocolFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 112, 4))
rlSelectiveQinq = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 112, 5))
rlIpDhcpSnoopMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpDhcpSnoopMibVersion.setStatus('current')
rlIpDhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopEnable.setStatus('current')
rlIpDhcpSnoopFileEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopFileEnable.setStatus('current')
rlIpDhcpSnoopClearAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopClearAction.setStatus('current')
rlIpDhcpSnoopFileUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopFileUpdateTime.setStatus('current')
rlIpDhcpSnoopVerifyMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopVerifyMacAddress.setStatus('current')
rlIpDhcpSnoopCurrentEntiresNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpDhcpSnoopCurrentEntiresNumber.setStatus('current')
rlIpDhcpOpt82InsertionEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpOpt82InsertionEnable.setStatus('current')
rlIpDhcpOpt82RxOnUntrustedEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpOpt82RxOnUntrustedEnable.setStatus('current')
rlIpDhcpSnoopStaticTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 1, 10), )
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticTable.setStatus('current')
rlIpDhcpSnoopStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpDhcpSnoopStaticVLANTag"), (0, "RADLAN-BRIDGE-SECURITY", "rlIpDhcpSnoopStaticMACAddress"))
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticEntry.setStatus('current')
rlIpDhcpSnoopStaticVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1, 1), VlanId())
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticVLANTag.setStatus('current')
rlIpDhcpSnoopStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticMACAddress.setStatus('current')
rlIpDhcpSnoopStaticIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticIPAddress.setStatus('current')
rlIpDhcpSnoopStaticPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticPortInterface.setStatus('current')
rlIpDhcpSnoopStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 10, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopStaticRowStatus.setStatus('current')
class RlIpDhcpSnoopType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("learnedByProtocol", 1), ("deletedByTimeout", 2), ("static", 3))

rlIpDhcpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 1, 11), )
if mibBuilder.loadTexts: rlIpDhcpSnoopTable.setStatus('current')
rlIpDhcpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpDhcpSnoopVLANTag"), (0, "RADLAN-BRIDGE-SECURITY", "rlIpDhcpSnoopMACAddress"))
if mibBuilder.loadTexts: rlIpDhcpSnoopEntry.setStatus('current')
rlIpDhcpSnoopVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 1), VlanId())
if mibBuilder.loadTexts: rlIpDhcpSnoopVLANTag.setStatus('current')
rlIpDhcpSnoopMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlIpDhcpSnoopMACAddress.setStatus('current')
rlIpDhcpSnoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 3), RlIpDhcpSnoopType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopType.setStatus('current')
rlIpDhcpSnoopLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopLeaseTime.setStatus('current')
rlIpDhcpSnoopIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopIPAddress.setStatus('current')
rlIpDhcpSnoopPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 6), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopPortInterface.setStatus('current')
rlIpDhcpSnoopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 11, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopRowStatus.setStatus('current')
rlIpDhcpSnoopEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 1, 12), )
if mibBuilder.loadTexts: rlIpDhcpSnoopEnableVlanTable.setStatus('current')
rlIpDhcpSnoopEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 1, 12, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpDhcpSnoopEnableVlanTag"))
if mibBuilder.loadTexts: rlIpDhcpSnoopEnableVlanEntry.setStatus('current')
rlIpDhcpSnoopEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 12, 1, 1), VlanId())
if mibBuilder.loadTexts: rlIpDhcpSnoopEnableVlanTag.setStatus('current')
rlIpDhcpSnoopEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 12, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopEnableVlanRowStatus.setStatus('current')
rlIpDhcpSnoopTrustedPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 1, 13), )
if mibBuilder.loadTexts: rlIpDhcpSnoopTrustedPortTable.setStatus('current')
rlIpDhcpSnoopTrustedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlIpDhcpSnoopTrustedPortEntry.setStatus('current')
rlIpDhcpSnoopTrustedPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 1, 13, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpDhcpSnoopTrustedPortRowStatus.setStatus('current')
rlIpSourceGuardMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardMibVersion.setStatus('current')
rlIpSourceGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpSourceGuardEnable.setStatus('current')
rlIpSourceGuardRetryToInsert = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("retryToInsertNow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpSourceGuardRetryToInsert.setStatus('current')
rlIpSourceGuardRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpSourceGuardRetryTime.setStatus('current')
rlIpSourceGuardPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 2, 5), )
if mibBuilder.loadTexts: rlIpSourceGuardPortTable.setStatus('current')
rlIpSourceGuardPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlIpSourceGuardPortEntry.setStatus('current')
rlIpSourceGuardPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 5, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpSourceGuardPortRowStatus.setStatus('current')
class RlIpSourceGuardType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dynamic", 1), ("static", 2))

class RlIpSourceGuardStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class RlIpSourceGuardFailReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noProblem", 1), ("noResource", 2), ("noSnoopVlan", 3), ("trustPort", 4))

rlIpSourceGuardTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 2, 6), )
if mibBuilder.loadTexts: rlIpSourceGuardTable.setStatus('current')
rlIpSourceGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RADLAN-BRIDGE-SECURITY", "rlIpSourceGuardIPAddress"), (0, "RADLAN-BRIDGE-SECURITY", "rlIpSourceGuardVLANTag"))
if mibBuilder.loadTexts: rlIpSourceGuardEntry.setStatus('current')
rlIpSourceGuardIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: rlIpSourceGuardIPAddress.setStatus('current')
rlIpSourceGuardVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 2), VlanId())
if mibBuilder.loadTexts: rlIpSourceGuardVLANTag.setStatus('current')
rlIpSourceGuardMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardMACAddress.setStatus('current')
rlIpSourceGuardType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 4), RlIpSourceGuardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardType.setStatus('current')
rlIpSourceGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 5), RlIpSourceGuardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardStatus.setStatus('current')
rlIpSourceGuardFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 6, 1, 6), RlIpSourceGuardFailReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardFailReason.setStatus('current')
rlIpSourceGuardPermittedRuleCounterTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 2, 7), )
if mibBuilder.loadTexts: rlIpSourceGuardPermittedRuleCounterTable.setStatus('current')
rlIpSourceGuardPermittedRuleCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 2, 7, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpSourceGuardPermittedRuleCounterVLANTag"))
if mibBuilder.loadTexts: rlIpSourceGuardPermittedRuleCounterEntry.setStatus('current')
rlIpSourceGuardPermittedRuleCounterVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 7, 1, 1), VlanId())
if mibBuilder.loadTexts: rlIpSourceGuardPermittedRuleCounterVLANTag.setStatus('current')
rlIpSourceGuardPermittedRuleCounterNumOfStaticRules = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardPermittedRuleCounterNumOfStaticRules.setStatus('current')
rlIpSourceGuardPermittedRuleCounterNumOfDhcpRules = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpSourceGuardPermittedRuleCounterNumOfDhcpRules.setStatus('current')
class RlIpArpInspectListNameType(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 32)

rlIpArpInspectMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpArpInspectMibVersion.setStatus('current')
rlIpArpInspectEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectEnable.setStatus('current')
rlIpArpInspectLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectLogInterval.setStatus('current')
rlIpArpInspectValidation = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectValidation.setStatus('current')
rlIpArpInspectListTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 3, 5), )
if mibBuilder.loadTexts: rlIpArpInspectListTable.setStatus('current')
rlIpArpInspectListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 3, 5, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpArpInspectListName"), (0, "RADLAN-BRIDGE-SECURITY", "rlIpArpInspectListIPAddress"))
if mibBuilder.loadTexts: rlIpArpInspectListEntry.setStatus('current')
rlIpArpInspectListName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 5, 1, 1), RlIpArpInspectListNameType())
if mibBuilder.loadTexts: rlIpArpInspectListName.setStatus('current')
rlIpArpInspectListIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlIpArpInspectListIPAddress.setStatus('current')
rlIpArpInspectListMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectListMACAddress.setStatus('current')
rlIpArpInspectListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectListRowStatus.setStatus('current')
rlIpArpInspectEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 3, 6), )
if mibBuilder.loadTexts: rlIpArpInspectEnableVlanTable.setStatus('current')
rlIpArpInspectEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlIpArpInspectEnableVlanTag"))
if mibBuilder.loadTexts: rlIpArpInspectEnableVlanEntry.setStatus('current')
rlIpArpInspectEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 1), VlanId())
if mibBuilder.loadTexts: rlIpArpInspectEnableVlanTag.setStatus('current')
rlIpArpInspectAssignedListName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 2), RlIpArpInspectListNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectAssignedListName.setStatus('current')
rlIpArpInspectEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectEnableVlanRowStatus.setStatus('current')
rlIpArpInspectVlanNumOfArpForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpArpInspectVlanNumOfArpForwarded.setStatus('current')
rlIpArpInspectVlanNumOfArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpArpInspectVlanNumOfArpDropped.setStatus('current')
rlIpArpInspectVlanNumOfArpMismatched = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpArpInspectVlanNumOfArpMismatched.setStatus('current')
rlIpArpInspectVlanClearCountersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectVlanClearCountersAction.setStatus('current')
rlIpArpInspectTrustedPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 3, 7), )
if mibBuilder.loadTexts: rlIpArpInspectTrustedPortTable.setStatus('current')
rlIpArpInspectTrustedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlIpArpInspectTrustedPortEntry.setStatus('current')
rlIpArpInspectTrustedPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 3, 7, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectTrustedPortRowStatus.setStatus('current')
rlIpArpInspectClearCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 3, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpArpInspectClearCountersAction.setStatus('current')
class ProtocolFilteringMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("all", 0), ("cdp", 1), ("vtp", 2), ("dtp", 3), ("udld", 4), ("pagp", 5), ("sstp", 6))

rlProtocolFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 4, 1), )
if mibBuilder.loadTexts: rlProtocolFilteringTable.setStatus('current')
rlProtocolFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlProtocolFilteringEntry.setStatus('current')
rlProtocolFilteringList = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 4, 1, 1, 1), ProtocolFilteringMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlProtocolFilteringList.setStatus('current')
rlProtocolFilteringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 4, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlProtocolFilteringRowStatus.setStatus('current')
class RlSelectiveQinqDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class RlSelectiveQinqAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("addVlan", 1), ("overrideVlan", 2), ("permit", 3), ("deny", 4))

class RlSelectiveQinqClassifierField(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("vid", 1), ("srcMac3bytes", 2), ("ethertype", 3), ("srcIp", 4), ("any", 255))

class MacAddr3bytes(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

rlSelectiveQinqListDeleteAllAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 112, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("deleteAllNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListDeleteAllAction.setStatus('current')
rlSelectiveQinqListTable = MibTable((1, 3, 6, 1, 4, 1, 89, 112, 5, 2), )
if mibBuilder.loadTexts: rlSelectiveQinqListTable.setStatus('current')
rlSelectiveQinqListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1), ).setIndexNames((0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListDirection"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierIfIndex"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierField"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierVID"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierSrcMac3bytes"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierEtherType"), (0, "RADLAN-BRIDGE-SECURITY", "rlSelectiveQinqListClassifierSrcIp"))
if mibBuilder.loadTexts: rlSelectiveQinqListEntry.setStatus('current')
rlSelectiveQinqListDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 1), RlSelectiveQinqDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSelectiveQinqListDirection.setStatus('current')
rlSelectiveQinqListClassifierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 2), InterfaceIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierIfIndex.setStatus('current')
rlSelectiveQinqListClassifierField = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 3), RlSelectiveQinqClassifierField().clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierField.setStatus('current')
rlSelectiveQinqListClassifierVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 4), VlanId().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierVID.setStatus('current')
rlSelectiveQinqListClassifierSrcMac3bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 5), MacAddr3bytes().clone('11:11:11')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierSrcMac3bytes.setStatus('current')
rlSelectiveQinqListClassifierEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(1499)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierEtherType.setStatus('current')
rlSelectiveQinqListClassifierSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListClassifierSrcIp.setStatus('current')
rlSelectiveQinqListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 8), RlSelectiveQinqAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListAction.setStatus('current')
rlSelectiveQinqListActionVID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 9), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListActionVID.setStatus('current')
rlSelectiveQinqListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 112, 5, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSelectiveQinqListRowStatus.setStatus('current')
mibBuilder.exportSymbols("RADLAN-BRIDGE-SECURITY", rlIpDhcpSnoopLeaseTime=rlIpDhcpSnoopLeaseTime, rlIpDhcpSnoopEnable=rlIpDhcpSnoopEnable, rlIpDhcpSnoopTrustedPortEntry=rlIpDhcpSnoopTrustedPortEntry, rlIpDhcpSnoopType=rlIpDhcpSnoopType, rlProtocolFilteringList=rlProtocolFilteringList, RlSelectiveQinqClassifierField=RlSelectiveQinqClassifierField, rlIpArpInspectTrustedPortRowStatus=rlIpArpInspectTrustedPortRowStatus, rlIpSourceGuardPermittedRuleCounterEntry=rlIpSourceGuardPermittedRuleCounterEntry, rlIpDhcpSnoopVerifyMacAddress=rlIpDhcpSnoopVerifyMacAddress, rlIpDhcpSnoopRowStatus=rlIpDhcpSnoopRowStatus, rlIpSourceGuardEnable=rlIpSourceGuardEnable, rlBridgeSecurity=rlBridgeSecurity, rlIpSourceGuardMibVersion=rlIpSourceGuardMibVersion, rlIpDhcpSnoopEnableVlanTag=rlIpDhcpSnoopEnableVlanTag, rlProtocolFiltering=rlProtocolFiltering, rlSelectiveQinqListEntry=rlSelectiveQinqListEntry, rlIpArpInspectListMACAddress=rlIpArpInspectListMACAddress, rlIpSourceGuard=rlIpSourceGuard, rlIpSourceGuardIPAddress=rlIpSourceGuardIPAddress, ProtocolFilteringMap=ProtocolFilteringMap, rlIpDhcpSnoopStaticTable=rlIpDhcpSnoopStaticTable, rlIpDhcpSnoopVLANTag=rlIpDhcpSnoopVLANTag, RlIpSourceGuardType=RlIpSourceGuardType, rlIpArpInspectListName=rlIpArpInspectListName, rlIpDhcpSnoopStaticIPAddress=rlIpDhcpSnoopStaticIPAddress, rlSelectiveQinq=rlSelectiveQinq, rlIpArpInspectAssignedListName=rlIpArpInspectAssignedListName, rlIpDhcpSnoopFileUpdateTime=rlIpDhcpSnoopFileUpdateTime, rlIpDhcpSnoopEntry=rlIpDhcpSnoopEntry, RlIpSourceGuardFailReason=RlIpSourceGuardFailReason, rlIpSourceGuardStatus=rlIpSourceGuardStatus, rlIpArpInspectEnableVlanEntry=rlIpArpInspectEnableVlanEntry, rlIpArpInspectVlanNumOfArpDropped=rlIpArpInspectVlanNumOfArpDropped, rlIpSourceGuardPermittedRuleCounterNumOfDhcpRules=rlIpSourceGuardPermittedRuleCounterNumOfDhcpRules, RlIpDhcpSnoopType=RlIpDhcpSnoopType, rlIpSourceGuardTable=rlIpSourceGuardTable, rlIpArpInspectClearCountersAction=rlIpArpInspectClearCountersAction, RlIpArpInspectListNameType=RlIpArpInspectListNameType, rlSelectiveQinqListActionVID=rlSelectiveQinqListActionVID, rlIpArpInspectEnable=rlIpArpInspectEnable, rlIpArpInspectVlanNumOfArpForwarded=rlIpArpInspectVlanNumOfArpForwarded, rlIpArpInspect=rlIpArpInspect, rlIpSourceGuardRetryTime=rlIpSourceGuardRetryTime, rlIpDhcpSnoopEnableVlanEntry=rlIpDhcpSnoopEnableVlanEntry, rlIpDhcpSnoop=rlIpDhcpSnoop, rlIpDhcpSnoopMACAddress=rlIpDhcpSnoopMACAddress, rlIpDhcpOpt82InsertionEnable=rlIpDhcpOpt82InsertionEnable, rlIpDhcpSnoopClearAction=rlIpDhcpSnoopClearAction, rlProtocolFilteringRowStatus=rlProtocolFilteringRowStatus, rlIpArpInspectTrustedPortEntry=rlIpArpInspectTrustedPortEntry, PYSNMP_MODULE_ID=rlBridgeSecurity, rlIpArpInspectVlanClearCountersAction=rlIpArpInspectVlanClearCountersAction, RlSelectiveQinqDirection=RlSelectiveQinqDirection, rlIpArpInspectEnableVlanTable=rlIpArpInspectEnableVlanTable, rlIpSourceGuardVLANTag=rlIpSourceGuardVLANTag, rlIpArpInspectLogInterval=rlIpArpInspectLogInterval, rlIpArpInspectListTable=rlIpArpInspectListTable, rlIpDhcpSnoopStaticPortInterface=rlIpDhcpSnoopStaticPortInterface, rlIpArpInspectEnableVlanRowStatus=rlIpArpInspectEnableVlanRowStatus, rlProtocolFilteringEntry=rlProtocolFilteringEntry, rlIpDhcpSnoopTable=rlIpDhcpSnoopTable, rlIpArpInspectEnableVlanTag=rlIpArpInspectEnableVlanTag, rlIpArpInspectListEntry=rlIpArpInspectListEntry, rlIpSourceGuardPermittedRuleCounterTable=rlIpSourceGuardPermittedRuleCounterTable, rlIpArpInspectListRowStatus=rlIpArpInspectListRowStatus, rlIpDhcpOpt82RxOnUntrustedEnable=rlIpDhcpOpt82RxOnUntrustedEnable, rlSelectiveQinqListClassifierIfIndex=rlSelectiveQinqListClassifierIfIndex, rlIpSourceGuardFailReason=rlIpSourceGuardFailReason, rlIpSourceGuardPortEntry=rlIpSourceGuardPortEntry, rlSelectiveQinqListClassifierEtherType=rlSelectiveQinqListClassifierEtherType, rlSelectiveQinqListClassifierField=rlSelectiveQinqListClassifierField, rlIpDhcpSnoopIPAddress=rlIpDhcpSnoopIPAddress, rlIpSourceGuardType=rlIpSourceGuardType, rlSelectiveQinqListDeleteAllAction=rlSelectiveQinqListDeleteAllAction, rlIpArpInspectValidation=rlIpArpInspectValidation, rlSelectiveQinqListAction=rlSelectiveQinqListAction, RlSelectiveQinqAction=RlSelectiveQinqAction, rlIpSourceGuardPortTable=rlIpSourceGuardPortTable, rlIpDhcpSnoopEnableVlanTable=rlIpDhcpSnoopEnableVlanTable, rlIpDhcpSnoopTrustedPortTable=rlIpDhcpSnoopTrustedPortTable, rlSelectiveQinqListClassifierSrcMac3bytes=rlSelectiveQinqListClassifierSrcMac3bytes, rlIpDhcpSnoopStaticVLANTag=rlIpDhcpSnoopStaticVLANTag, rlSelectiveQinqListClassifierSrcIp=rlSelectiveQinqListClassifierSrcIp, rlIpDhcpSnoopStaticEntry=rlIpDhcpSnoopStaticEntry, rlSelectiveQinqListRowStatus=rlSelectiveQinqListRowStatus, rlIpDhcpSnoopFileEnable=rlIpDhcpSnoopFileEnable, rlIpSourceGuardPermittedRuleCounterNumOfStaticRules=rlIpSourceGuardPermittedRuleCounterNumOfStaticRules, rlIpDhcpSnoopMibVersion=rlIpDhcpSnoopMibVersion, rlProtocolFilteringTable=rlProtocolFilteringTable, rlIpDhcpSnoopTrustedPortRowStatus=rlIpDhcpSnoopTrustedPortRowStatus, rlSelectiveQinqListClassifierVID=rlSelectiveQinqListClassifierVID, rlIpSourceGuardPermittedRuleCounterVLANTag=rlIpSourceGuardPermittedRuleCounterVLANTag, rlSelectiveQinqListTable=rlSelectiveQinqListTable, rlIpDhcpSnoopStaticMACAddress=rlIpDhcpSnoopStaticMACAddress, MacAddr3bytes=MacAddr3bytes, rlIpSourceGuardPortRowStatus=rlIpSourceGuardPortRowStatus, rlIpArpInspectVlanNumOfArpMismatched=rlIpArpInspectVlanNumOfArpMismatched, rlIpSourceGuardMACAddress=rlIpSourceGuardMACAddress, rlIpSourceGuardEntry=rlIpSourceGuardEntry, rlIpDhcpSnoopStaticRowStatus=rlIpDhcpSnoopStaticRowStatus, rlIpDhcpSnoopCurrentEntiresNumber=rlIpDhcpSnoopCurrentEntiresNumber, rlIpDhcpSnoopEnableVlanRowStatus=rlIpDhcpSnoopEnableVlanRowStatus, RlIpSourceGuardStatus=RlIpSourceGuardStatus, rlIpArpInspectListIPAddress=rlIpArpInspectListIPAddress, rlSelectiveQinqListDirection=rlSelectiveQinqListDirection, rlIpArpInspectTrustedPortTable=rlIpArpInspectTrustedPortTable, rlIpDhcpSnoopPortInterface=rlIpDhcpSnoopPortInterface, rlIpArpInspectMibVersion=rlIpArpInspectMibVersion, rlIpSourceGuardRetryToInsert=rlIpSourceGuardRetryToInsert)
