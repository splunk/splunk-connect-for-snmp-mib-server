#
# PySNMP MIB module HPN-ICF-L2VPN-PWE3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-L2VPN-PWE3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, MibIdentifier, Counter64, ModuleIdentity, Counter32, Unsigned32, ObjectIdentity, IpAddress, NotificationType, iso, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "MibIdentifier", "Counter64", "ModuleIdentity", "Counter32", "Unsigned32", "ObjectIdentity", "IpAddress", "NotificationType", "iso", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hpnicfL2VpnPwe3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78))
if mibBuilder.loadTexts: hpnicfL2VpnPwe3.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: hpnicfL2VpnPwe3.setOrganization('')
class HpnicfL2VpnVcEncapsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 255))
    namedValues = NamedValues(("frameRelayDlciMartini", 1), ("atmAal5SduVccTransport", 2), ("atmTransparentCellTransport", 3), ("ethernetTagged", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("cem", 8), ("atmN2OneVccCellTransport", 9), ("atmN2OneVpcCellTransport", 10), ("ipLayer2Transport", 11), ("atmOne2OneVccCellMode", 12), ("atmOne2OneVpcCellMode", 13), ("atmAal5PduVccTransport", 14), ("frameRelayPortMode", 15), ("cep", 16), ("saE1oP", 17), ("saT1oP", 18), ("saE3oP", 19), ("saT3oP", 20), ("cESoPsnBasicMode", 21), ("tDMoIPbasicMode", 22), ("l2VpnCESoPSNTDMwithCAS", 23), ("l2VpnTDMoIPTDMwithCAS", 24), ("frameRelayDlci", 25), ("ipInterworking", 64), ("unknown", 255))

hpnicfL2VpnPwe3ScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 1))
hpnicfPwVcTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPwVcTrapOpen.setStatus('current')
hpnicfL2VpnPwe3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2))
hpnicfPwVcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1), )
if mibBuilder.loadTexts: hpnicfPwVcTable.setStatus('current')
hpnicfPwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcIndex"))
if mibBuilder.loadTexts: hpnicfPwVcEntry.setStatus('current')
hpnicfPwVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfPwVcIndex.setStatus('current')
hpnicfPwVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcID.setStatus('current')
hpnicfPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 3), HpnicfL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcType.setStatus('current')
hpnicfPwVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcPeerAddr.setStatus('current')
hpnicfPwVcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcMtu.setStatus('current')
hpnicfPwVcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("multiPort", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcCfgType.setStatus('current')
hpnicfPwVcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPwVcInboundLabel.setStatus('current')
hpnicfPwVcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPwVcOutboundLabel.setStatus('current')
hpnicfPwVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcIfIndex.setStatus('current')
hpnicfPwVcAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPwVcAcStatus.setStatus('current')
hpnicfPwVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPwVcStatus.setStatus('current')
hpnicfPwVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPwVcRowStatus.setStatus('current')
hpnicfL2VpnPwe3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3))
hpnicfPwVcSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3, 1)).setObjects(("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"))
if mibBuilder.loadTexts: hpnicfPwVcSwitchWtoP.setStatus('current')
hpnicfPwVcSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3, 2)).setObjects(("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"))
if mibBuilder.loadTexts: hpnicfPwVcSwitchPtoW.setStatus('current')
hpnicfPwVcDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3, 3)).setObjects(("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"))
if mibBuilder.loadTexts: hpnicfPwVcDown.setStatus('current')
hpnicfPwVcUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3, 4)).setObjects(("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"))
if mibBuilder.loadTexts: hpnicfPwVcUp.setStatus('current')
hpnicfPwVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 78, 3, 5)).setObjects(("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcID"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcType"), ("HPN-ICF-L2VPN-PWE3-MIB", "hpnicfPwVcPeerAddr"))
if mibBuilder.loadTexts: hpnicfPwVcDeleted.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-L2VPN-PWE3-MIB", hpnicfPwVcEntry=hpnicfPwVcEntry, hpnicfPwVcOutboundLabel=hpnicfPwVcOutboundLabel, hpnicfPwVcID=hpnicfPwVcID, hpnicfL2VpnPwe3Table=hpnicfL2VpnPwe3Table, hpnicfL2VpnPwe3=hpnicfL2VpnPwe3, hpnicfPwVcTable=hpnicfPwVcTable, hpnicfPwVcSwitchPtoW=hpnicfPwVcSwitchPtoW, PYSNMP_MODULE_ID=hpnicfL2VpnPwe3, hpnicfPwVcAcStatus=hpnicfPwVcAcStatus, hpnicfPwVcDeleted=hpnicfPwVcDeleted, hpnicfPwVcStatus=hpnicfPwVcStatus, hpnicfL2VpnPwe3Notifications=hpnicfL2VpnPwe3Notifications, hpnicfPwVcMtu=hpnicfPwVcMtu, hpnicfPwVcSwitchWtoP=hpnicfPwVcSwitchWtoP, hpnicfPwVcIndex=hpnicfPwVcIndex, hpnicfPwVcUp=hpnicfPwVcUp, hpnicfPwVcDown=hpnicfPwVcDown, hpnicfPwVcIfIndex=hpnicfPwVcIfIndex, hpnicfPwVcType=hpnicfPwVcType, hpnicfPwVcCfgType=hpnicfPwVcCfgType, hpnicfPwVcInboundLabel=hpnicfPwVcInboundLabel, HpnicfL2VpnVcEncapsType=HpnicfL2VpnVcEncapsType, hpnicfPwVcRowStatus=hpnicfPwVcRowStatus, hpnicfL2VpnPwe3ScalarGroup=hpnicfL2VpnPwe3ScalarGroup, hpnicfPwVcTrapOpen=hpnicfPwVcTrapOpen, hpnicfPwVcPeerAddr=hpnicfPwVcPeerAddr)
