#
# PySNMP MIB module ADAPTEC-UNIVERSAL-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTEC-UNIVERSAL-STORAGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, NotificationType, Gauge32, TimeTicks, NotificationType, Unsigned32, IpAddress, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ObjectIdentity, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "NotificationType", "Gauge32", "TimeTicks", "NotificationType", "Unsigned32", "IpAddress", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ObjectIdentity", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
universalStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14))
ausMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1))
ausMibStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 100))
ausAggregatedController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 200))
ausController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 201))
ausControllerRelationship = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 202))
ausI2ORaidController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 210))
ausCCodeController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 211))
ausHostRAIDController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 212))
ausServeRAIDController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 213))
ausChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 300))
ausChannelRelationship = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 301))
ausDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 400))
ausDevicePort = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 401))
ausStorageDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 410))
ausEnclosureDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 411))
ausExternalRaidDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 412))
ausOtherDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 499))
ausEnclosureFan = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 500))
ausEnclosurePowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 501))
ausEnclosureTemperatureSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 502))
ausEnclosureSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 503))
ausArray = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000))
ausExtent = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001))
ausSpare = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002))
ausEventLogCount = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 2000))
ausEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001))
class TriState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("false", 2), ("true", 3))

class ObjectStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("okay", 3), ("warning", 4), ("failure", 5))

class OptionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("notInstalled", 4), ("installedAndInactive", 5), ("installedAndActive", 6))

class BatteryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("notInstalled", 4), ("okay", 5), ("failed", 6), ("charging", 7), ("discharging", 8), ("inMaintenanceMode", 9))

class IndexList(DisplayString):
    pass

ausMibStatusRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusRevMajor.setStatus('mandatory')
ausMibStatusRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusRevMinor.setStatus('mandatory')
ausMibStatusSecondsSinceInitiation = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusSecondsSinceInitiation.setStatus('mandatory')
ausMibStatusCopyright = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusCopyright.setStatus('mandatory')
ausMibStatusOverall = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 5), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusOverall.setStatus('mandatory')
ausAggregatedControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1), )
if mibBuilder.loadTexts: ausAggregatedControllerTable.setStatus('mandatory')
ausAggregatedControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausAggregatedControllerIndex"))
if mibBuilder.loadTexts: ausAggregatedControllerEntry.setStatus('mandatory')
ausAggregatedControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausAggregatedControllerIndex.setStatus('mandatory')
ausAggregatedControllerList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1, 2), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausAggregatedControllerList.setStatus('mandatory')
ausControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1), )
if mibBuilder.loadTexts: ausControllerTable.setStatus('mandatory')
ausControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausControllerIndex"))
if mibBuilder.loadTexts: ausControllerEntry.setStatus('mandatory')
ausControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerIndex.setStatus('mandatory')
ausControllerUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerUniqueId.setStatus('mandatory')
ausControllerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerVendor.setStatus('mandatory')
ausControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerModel.setStatus('mandatory')
ausControllerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRevision.setStatus('mandatory')
ausControllerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerSerialNumber.setStatus('mandatory')
ausControllerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerDescription.setStatus('mandatory')
ausControllerHostBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("pci", 4), ("pci-32", 5), ("pci-64", 6), ("picx", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHostBusType.setStatus('mandatory')
ausControllerHostBusMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHostBusMaximumTransferRate.setStatus('mandatory')
ausControllerNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerNumberOfChannels.setStatus('mandatory')
ausControllerHighestChannelWithDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHighestChannelWithDevices.setStatus('mandatory')
ausControllerInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerInstalledMemory.setStatus('mandatory')
ausControllerAudibleAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 13), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerAudibleAlarmStatus.setStatus('mandatory')
ausControllerBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 14), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerBatteryStatus.setStatus('mandatory')
ausControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 15), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerStatus.setStatus('mandatory')
ausControllerOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 16), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerOverallStatus.setStatus('mandatory')
ausControllerRelationshipTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1), )
if mibBuilder.loadTexts: ausControllerRelationshipTable.setStatus('mandatory')
ausControllerRelationshipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausControllerRelationshipIndex"))
if mibBuilder.loadTexts: ausControllerRelationshipEntry.setStatus('mandatory')
ausControllerRelationshipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipIndex.setStatus('mandatory')
ausControllerRelationshipType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hostAttachedController", 1), ("externalRaid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipType.setStatus('mandatory')
ausControllerRelationshipList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 3), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipList.setStatus('mandatory')
ausControllerRelationshipRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipRelation.setStatus('mandatory')
ausI2ORaidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1), )
if mibBuilder.loadTexts: ausI2ORaidControllerTable.setStatus('mandatory')
ausI2ORaidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausI2ORaidControllerIndex"))
if mibBuilder.loadTexts: ausI2ORaidControllerEntry.setStatus('mandatory')
ausI2ORaidControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerIndex.setStatus('mandatory')
ausI2ORaidControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerAddress.setStatus('mandatory')
ausI2ORaidControllerBackgroundTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerBackgroundTaskPriority.setStatus('mandatory')
ausI2ORaidControllerBiosRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerBiosRevision.setStatus('mandatory')
ausI2ORaidControllerSmorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerSmorRevision.setStatus('mandatory')
ausI2ORaidControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerMainIndex.setStatus('mandatory')
ausCCodeControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1), )
if mibBuilder.loadTexts: ausCCodeControllerTable.setStatus('mandatory')
ausCCodeControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausCCodeControllerIndex"))
if mibBuilder.loadTexts: ausCCodeControllerEntry.setStatus('mandatory')
ausCCodeControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerIndex.setStatus('mandatory')
ausCCodeControllerPCIBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerPCIBusId.setStatus('mandatory')
ausCCodeControllerPCISlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerPCISlotNumber.setStatus('mandatory')
ausCCodeControllerBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerBiosVersion.setStatus('mandatory')
ausCCodeControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerMainIndex.setStatus('mandatory')
ausHostRAIDControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1), )
if mibBuilder.loadTexts: ausHostRAIDControllerTable.setStatus('mandatory')
ausHostRAIDControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausHostRAIDControllerIndex"))
if mibBuilder.loadTexts: ausHostRAIDControllerEntry.setStatus('mandatory')
ausHostRAIDControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerIndex.setStatus('mandatory')
ausHostRAIDControllerPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIBus.setStatus('mandatory')
ausHostRAIDControllerPCIDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIDevice.setStatus('mandatory')
ausHostRAIDControllerPCIFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIFunction.setStatus('mandatory')
ausHostRAIDControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerMainIndex.setStatus('mandatory')
ausServeRAIDControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1), )
if mibBuilder.loadTexts: ausServeRAIDControllerTable.setStatus('mandatory')
ausServeRAIDControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausServeRAIDControllerIndex"))
if mibBuilder.loadTexts: ausServeRAIDControllerEntry.setStatus('mandatory')
ausServeRAIDControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerIndex.setStatus('mandatory')
ausServeRAIDControllerBIOSRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerBIOSRevision.setStatus('mandatory')
ausServeRAIDControllerDefaultRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("medium", 4), ("high", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerDefaultRebuildRate.setStatus('mandatory')
ausServeRAIDControllerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerSlotNumber.setStatus('mandatory')
ausServeRAIDControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerMainIndex.setStatus('mandatory')
ausChannelTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1), )
if mibBuilder.loadTexts: ausChannelTable.setStatus('mandatory')
ausChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausChannelIndex"))
if mibBuilder.loadTexts: ausChannelEntry.setStatus('mandatory')
ausChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelIndex.setStatus('mandatory')
ausChannelLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hostAttached", 1), ("externalRaid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelLocation.setStatus('mandatory')
ausChannelAusControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelAusControllerIndex.setStatus('mandatory')
ausChannelAusControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelAusControllerChannelNumber.setStatus('mandatory')
ausChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("scsi", 3), ("ide", 4), ("fibreChannel", 5), ("sata", 6), ("sas", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelType.setStatus('mandatory')
ausChannelTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelTypeDescription.setStatus('mandatory')
ausChannelControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelControllerId.setStatus('mandatory')
ausChannelControllerSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelControllerSubId.setStatus('mandatory')
ausChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelWidth.setStatus('mandatory')
ausChannelMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelMaximumTransferRate.setStatus('mandatory')
ausChannelMaximumAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelMaximumAttachments.setStatus('mandatory')
ausChannelOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 12), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelOverallStatus.setStatus('mandatory')
ausChannelRelationshipTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1), )
if mibBuilder.loadTexts: ausChannelRelationshipTable.setStatus('mandatory')
ausChannelRelationshipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausChannelRelationshipIndex"))
if mibBuilder.loadTexts: ausChannelRelationshipEntry.setStatus('mandatory')
ausChannelRelationshipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipIndex.setStatus('mandatory')
ausChannelRelationshipList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 2), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipList.setStatus('mandatory')
ausChannelRelationshipRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipRelation.setStatus('mandatory')
ausDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1), )
if mibBuilder.loadTexts: ausDeviceTable.setStatus('mandatory')
ausDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausDeviceIndex"))
if mibBuilder.loadTexts: ausDeviceEntry.setStatus('mandatory')
ausDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceIndex.setStatus('mandatory')
ausDeviceUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceUniqueId.setStatus('mandatory')
ausDeviceAusChannelIndices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 3), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceAusChannelIndices.setStatus('mandatory')
ausDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("directAccess", 3), ("sequentialAccess", 4), ("printer", 5), ("processor", 6), ("writeOnce", 7), ("cdRom", 8), ("scanner", 9), ("opticalMemory", 10), ("mediumChanger", 11), ("communications", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceType.setStatus('mandatory')
ausDeviceTypeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSubordinateTable", 1), ("storageDevice", 2), ("enclosureDevice", 3), ("externalRaidDevice", 4), ("otherDevice", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceTypeGroup.setStatus('mandatory')
ausDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceVendor.setStatus('mandatory')
ausDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceModel.setStatus('mandatory')
ausDeviceRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceRevision.setStatus('mandatory')
ausDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceSerialNumber.setStatus('mandatory')
ausDeviceNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceNumberOfPorts.setStatus('mandatory')
ausDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceStatus.setStatus('mandatory')
ausDevicePortTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1), )
if mibBuilder.loadTexts: ausDevicePortTable.setStatus('mandatory')
ausDevicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausDevicePortIndex"))
if mibBuilder.loadTexts: ausDevicePortEntry.setStatus('mandatory')
ausDevicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortIndex.setStatus('mandatory')
ausDevicePortUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortUniqueId.setStatus('mandatory')
ausDevicePortAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusDeviceIndex.setStatus('mandatory')
ausDevicePortAusDevicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusDevicePortNumber.setStatus('mandatory')
ausDevicePortAusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusChannelIndex.setStatus('mandatory')
ausDevicePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortId.setStatus('mandatory')
ausDevicePortSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortSubId.setStatus('mandatory')
ausDevicePortWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortWidth.setStatus('mandatory')
ausDevicePortMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortMaximumTransferRate.setStatus('mandatory')
ausDevicePortNegotiatedTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortNegotiatedTransferRate.setStatus('mandatory')
ausDevicePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortStatus.setStatus('mandatory')
ausStorageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1), )
if mibBuilder.loadTexts: ausStorageDeviceTable.setStatus('mandatory')
ausStorageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausStorageDeviceIndex"))
if mibBuilder.loadTexts: ausStorageDeviceEntry.setStatus('mandatory')
ausStorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceIndex.setStatus('mandatory')
ausStorageDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceDescription.setStatus('mandatory')
ausStorageDeviceFormattedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceFormattedCapacity.setStatus('mandatory')
ausStorageDeviceBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceBlockSize.setStatus('mandatory')
ausStorageDeviceNumberOfBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksLow.setStatus('mandatory')
ausStorageDeviceNumberOfBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksHigh.setStatus('mandatory')
ausStorageDeviceRemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notSupported", 2), ("supportedAndNotLoaded", 3), ("supportedAndLoaded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceRemovableMedia.setStatus('mandatory')
ausStorageDeviceSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notSupported", 2), ("notEnabled", 3), ("okay", 4), ("errorPredicted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceSmartStatus.setStatus('mandatory')
ausStorageDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceMainIndex.setStatus('mandatory')
ausEnclosureDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1), )
if mibBuilder.loadTexts: ausEnclosureDeviceTable.setStatus('mandatory')
ausEnclosureDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureDeviceIndex"))
if mibBuilder.loadTexts: ausEnclosureDeviceEntry.setStatus('mandatory')
ausEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIndex.setStatus('mandatory')
ausEnclosureDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceDescription.setStatus('mandatory')
ausEnclosureDeviceProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("decFault", 3), ("saf-te", 4), ("ses", 5), ("aemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceProcessorType.setStatus('mandatory')
ausEnclosureDeviceNumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfFans.setStatus('mandatory')
ausEnclosureDeviceNumberOfPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfPowerSupplies.setStatus('mandatory')
ausEnclosureDeviceNumberOfSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfSlots.setStatus('mandatory')
ausEnclosureDeviceNumberOfTemperatureSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfTemperatureSensors.setStatus('mandatory')
ausEnclosureDeviceIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIdLow.setStatus('mandatory')
ausEnclosureDeviceIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIdHigh.setStatus('mandatory')
ausEnclosureDeviceStandardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceStandardRevision.setStatus('mandatory')
ausEnclosureDevicePowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDevicePowerOnTime.setStatus('mandatory')
ausEnclosureDevicePowerCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDevicePowerCycles.setStatus('mandatory')
ausEnclosureDeviceDoorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 13), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceDoorLock.setStatus('mandatory')
ausEnclosureDeviceSpeaker = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 14), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceSpeaker.setStatus('mandatory')
ausEnclosureDeviceTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("okay", 3), ("tooHot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceTemperatureState.setStatus('mandatory')
ausEnclosureDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceMainIndex.setStatus('mandatory')
ausExternalRaidDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1), )
if mibBuilder.loadTexts: ausExternalRaidDeviceTable.setStatus('mandatory')
ausExternalRaidDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausExternalRaidDeviceIndex"))
if mibBuilder.loadTexts: ausExternalRaidDeviceEntry.setStatus('mandatory')
ausExternalRaidDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceIndex.setStatus('mandatory')
ausExternalRaidDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceDescription.setStatus('mandatory')
ausExternalRaidDeviceNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceNumberOfChannels.setStatus('mandatory')
ausExternalRaidDeviceInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceInstalledMemory.setStatus('mandatory')
ausExternalRaidDeviceAudibleAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 5), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceAudibleAlarmStatus.setStatus('mandatory')
ausExternalRaidDeviceBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 6), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceBatteryStatus.setStatus('mandatory')
ausExternalRaidDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceMainIndex.setStatus('mandatory')
ausOtherDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1), )
if mibBuilder.loadTexts: ausOtherDeviceTable.setStatus('mandatory')
ausOtherDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausOtherDeviceIndex"))
if mibBuilder.loadTexts: ausOtherDeviceEntry.setStatus('mandatory')
ausOtherDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceIndex.setStatus('mandatory')
ausOtherDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceDescription.setStatus('mandatory')
ausOtherDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceMainIndex.setStatus('mandatory')
ausEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1), )
if mibBuilder.loadTexts: ausEnclosureFanTable.setStatus('mandatory')
ausEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureFanIndex"))
if mibBuilder.loadTexts: ausEnclosureFanEntry.setStatus('mandatory')
ausEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanIndex.setStatus('mandatory')
ausEnclosureFanAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanAusEnclosureDeviceIndex.setStatus('mandatory')
ausEnclosureFanOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanOrdinal.setStatus('mandatory')
ausEnclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("off", 3), ("quarterSpeed", 4), ("halfSpeed", 5), ("threeQuartersSpeed", 6), ("fullSpeed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanSpeed.setStatus('mandatory')
ausEnclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 5), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanStatus.setStatus('mandatory')
ausEnclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1), )
if mibBuilder.loadTexts: ausEnclosurePowerSupplyTable.setStatus('mandatory')
ausEnclosurePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosurePowerSupplyIndex"))
if mibBuilder.loadTexts: ausEnclosurePowerSupplyEntry.setStatus('mandatory')
ausEnclosurePowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyIndex.setStatus('mandatory')
ausEnclosurePowerSupplyAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyAusEnclosureDeviceIndex.setStatus('mandatory')
ausEnclosurePowerSupplyOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyOrdinal.setStatus('mandatory')
ausEnclosurePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("operationalAndOn", 3), ("operationalAndOff", 4), ("onAndMalfunctioning", 5), ("offAndMalfunctioning", 6), ("installed", 7), ("notInstalled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyStatus.setStatus('mandatory')
ausEnclosureTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1), )
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorTable.setStatus('mandatory')
ausEnclosureTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureTemperatureSensorIndex"))
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorEntry.setStatus('mandatory')
ausEnclosureTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorIndex.setStatus('mandatory')
ausEnclosureTemperatureSensorAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorAusEnclosureDeviceIndex.setStatus('mandatory')
ausEnclosureTemperatureSensorOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOrdinal.setStatus('mandatory')
ausEnclosureTemperatureSensorOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 4), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOverTemperature.setStatus('mandatory')
ausEnclosureTemperatureSensorDegrees = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorDegrees.setStatus('mandatory')
ausEnclosureSlotTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1), )
if mibBuilder.loadTexts: ausEnclosureSlotTable.setStatus('mandatory')
ausEnclosureSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureSlotIndex"))
if mibBuilder.loadTexts: ausEnclosureSlotEntry.setStatus('mandatory')
ausEnclosureSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotIndex.setStatus('mandatory')
ausEnclosureSlotAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotAusEnclosureDeviceIndex.setStatus('mandatory')
ausEnclosureSlotOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotOrdinal.setStatus('mandatory')
ausEnclosureSlotPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotPortId.setStatus('mandatory')
ausEnclosureSlotInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotInsertions.setStatus('mandatory')
ausArrayTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1), )
if mibBuilder.loadTexts: ausArrayTable.setStatus('mandatory')
ausArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausArrayIndex"))
if mibBuilder.loadTexts: ausArrayEntry.setStatus('mandatory')
ausArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayIndex.setStatus('mandatory')
ausArrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayName.setStatus('mandatory')
ausArrayCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayCapacity.setStatus('mandatory')
ausArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("raid0", 3), ("raid1", 4), ("raid2", 5), ("raid3", 6), ("raid4", 7), ("raid5", 8), ("raid6", 9), ("raid10", 10), ("raid50", 11), ("volume", 12), ("volume-of-raid0", 13), ("volume-of-raid1", 14), ("volume-of-raid5", 15), ("raid1e", 16), ("raid5ee", 17), ("raid-volume", 18), ("raid60", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayType.setStatus('mandatory')
ausArrayStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayStripeSize.setStatus('mandatory')
ausArrayTaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noTaskActive", 3), ("reconstruct", 4), ("zeroInitialize", 5), ("verify", 6), ("verifyWithFix", 7), ("modification", 8), ("copyback", 9), ("compaction", 10), ("expansion", 11), ("snapshotBackup", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskStatus.setStatus('mandatory')
ausArrayTaskCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskCompletion.setStatus('mandatory')
ausArrayTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notSupported", 3), ("notApplicable", 4), ("none", 5), ("low", 6), ("medium", 7), ("high", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskPriority.setStatus('mandatory')
ausArrayHostingControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("physicalController", 1), ("aggregateController", 2), ("externalRaidController", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayHostingControllerType.setStatus('mandatory')
ausArrayHostingControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayHostingControllerIndex.setStatus('mandatory')
ausArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayStatus.setStatus('mandatory')
ausArrayState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("optimal", 3), ("quickInited", 4), ("impacted", 5), ("degraded", 6), ("failed", 7), ("compacted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayState.setStatus('mandatory')
ausArrayCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("disabled", 3), ("writeBack", 4), ("writeThru", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayCacheStatus.setStatus('mandatory')
ausArrayMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayMembership.setStatus('mandatory')
ausExtentTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1), )
if mibBuilder.loadTexts: ausExtentTable.setStatus('mandatory')
ausExtentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausExtentIndex"))
if mibBuilder.loadTexts: ausExtentEntry.setStatus('mandatory')
ausExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentIndex.setStatus('mandatory')
ausExtentAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentAusDeviceIndex.setStatus('mandatory')
ausExtentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentSize.setStatus('mandatory')
ausExtentStartingLBALow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentStartingLBALow.setStatus('mandatory')
ausExtentStartingLBAHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentStartingLBAHigh.setStatus('mandatory')
ausExtentNumberOfBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentNumberOfBlocksLow.setStatus('mandatory')
ausExtentNumberOfBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentNumberOfBlocksHigh.setStatus('mandatory')
ausExtentArrayMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentArrayMembership.setStatus('mandatory')
ausSpareTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1), )
if mibBuilder.loadTexts: ausSpareTable.setStatus('mandatory')
ausSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausSpareIndex"))
if mibBuilder.loadTexts: ausSpareEntry.setStatus('mandatory')
ausSpareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareIndex.setStatus('mandatory')
ausSpareAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareAusDeviceIndex.setStatus('mandatory')
ausSpareType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("global", 1), ("dedicated", 2), ("externalRaidGlobal", 3), ("unknown", 4), ("other", 5), ("standby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareType.setStatus('mandatory')
ausSpareAusControllerOrArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareAusControllerOrArrayIndex.setStatus('mandatory')
ausEventLogNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 2000, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogNumEntries.setStatus('mandatory')
ausEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1), )
if mibBuilder.loadTexts: ausEventLogTable.setStatus('mandatory')
ausEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEventLogIndex"))
if mibBuilder.loadTexts: ausEventLogEntry.setStatus('mandatory')
ausEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogIndex.setStatus('mandatory')
ausEventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogString.setStatus('mandatory')
ausEventLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogTimeStamp.setStatus('mandatory')
ausTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000))
ausTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 1), DisplayString())
if mibBuilder.loadTexts: ausTrapMessage.setStatus('mandatory')
ausTrapObjectIndex = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 2), Integer32())
if mibBuilder.loadTexts: ausTrapObjectIndex.setStatus('mandatory')
ausTrapControllerType = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aggregateController", 1), ("internalController", 2), ("externalController", 3))))
if mibBuilder.loadTexts: ausTrapControllerType.setStatus('mandatory')
ausTrapControllerStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("okay", 1), ("noControllersFound", 2), ("controllerAdded", 3), ("controllerDeleted", 4), ("controllerFailover", 5), ("commandsNotResponding", 6), ("cannotReadControllerInformation", 7), ("replaceBattery", 8), ("defectiveCache", 9), ("firmwareVersionMismatch", 10))))
if mibBuilder.loadTexts: ausTrapControllerStatus.setStatus('mandatory')
ausTrapDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("okay", 1), ("deviceAdded", 2), ("deviceRemoved", 3), ("deviceFailed", 4), ("smartEvent", 5), ("unsupportedDeviceType", 6))))
if mibBuilder.loadTexts: ausTrapDeviceStatus.setStatus('mandatory')
ausTrapEnclosureStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("enclosureResponding", 1), ("enclosureNotResponding", 2), ("fanMalfunction", 3), ("fanOperational", 4), ("fanRemoved", 5), ("fanInstalled", 6), ("temperatureInRange", 7), ("temperatureOutOfRange", 8), ("powerSupplyMalfunction", 9), ("powerSupplyOperational", 10), ("powerSupplyRemoved", 11), ("powerSupplyInstalled", 12))))
if mibBuilder.loadTexts: ausTrapEnclosureStatus.setStatus('mandatory')
ausTrapEnclosureObjectOrdinal = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 7), Integer32())
if mibBuilder.loadTexts: ausTrapEnclosureObjectOrdinal.setStatus('mandatory')
ausTrapArrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("okay", 1), ("critical", 2), ("offline", 3), ("blocked", 4), ("unblocked", 5))))
if mibBuilder.loadTexts: ausTrapArrayStatus.setStatus('mandatory')
ausTrapArrayTaskStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("rebuilding", 1), ("rebuildComplete", 2), ("rebuildFailed", 3), ("synchronizing", 4), ("synchronizationComplete", 5), ("synchronizationFailed", 6), ("migrating", 7), ("migrationComplete", 8), ("migrationFailed", 9), ("compressing", 10), ("compressionComplete", 11), ("compressionFailed", 12), ("decompressing", 13), ("decompressionComplete", 14), ("decompressionFailed", 15), ("compacting", 16), ("compactionComplete", 17), ("compactionFailed", 18), ("expanding", 19), ("expansionComplete", 20), ("expansionFailed", 21), ("flashCopying", 22), ("flashCopyComplete", 23), ("flashCopyFailed", 24))))
if mibBuilder.loadTexts: ausTrapArrayTaskStatus.setStatus('mandatory')
ausTrapSpareStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("okay", 1), ("added", 2), ("deleted", 3), ("failed", 4))))
if mibBuilder.loadTexts: ausTrapSpareStatus.setStatus('mandatory')
ausTrapEnumAsText = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 11), DisplayString())
if mibBuilder.loadTexts: ausTrapEnumAsText.setStatus('mandatory')
ausTrapOtherInformational = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1001)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
ausTrapOtherWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1002)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
ausTrapOtherFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1003)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
ausTrapDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1010)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1011)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapDeviceFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1012)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1020)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
ausTrapEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1021)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
ausTrapEnclosureFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1022)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
ausTrapArrayInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1030)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapArrayWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1031)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapArrayFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1032)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapArrayTaskInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1040)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapArrayTaskWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1041)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapArrayTaskFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1042)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapSpareInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1050)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapSpareWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1051)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
ausTrapSpareFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1052)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
mibBuilder.exportSymbols("ADAPTEC-UNIVERSAL-STORAGE-MIB", ausChannelControllerId=ausChannelControllerId, ausStorageDeviceDescription=ausStorageDeviceDescription, ausTrapObjectIndex=ausTrapObjectIndex, ausArrayCapacity=ausArrayCapacity, ausExternalRaidDeviceAudibleAlarmStatus=ausExternalRaidDeviceAudibleAlarmStatus, ausEnclosureTemperatureSensorEntry=ausEnclosureTemperatureSensorEntry, ausMibStatusSecondsSinceInitiation=ausMibStatusSecondsSinceInitiation, ausI2ORaidControllerBiosRevision=ausI2ORaidControllerBiosRevision, ausServeRAIDControllerTable=ausServeRAIDControllerTable, ausChannelMaximumTransferRate=ausChannelMaximumTransferRate, ausTrapOtherInformational=ausTrapOtherInformational, ausArrayTaskPriority=ausArrayTaskPriority, ausMibStatusRevMinor=ausMibStatusRevMinor, ausStorageDeviceSmartStatus=ausStorageDeviceSmartStatus, ausChannelEntry=ausChannelEntry, ausEnclosureSlotInsertions=ausEnclosureSlotInsertions, ausTrapDeviceFatal=ausTrapDeviceFatal, ausDevicePortNegotiatedTransferRate=ausDevicePortNegotiatedTransferRate, ausControllerRelationshipType=ausControllerRelationshipType, ausEnclosureSlotOrdinal=ausEnclosureSlotOrdinal, ausSpareEntry=ausSpareEntry, ausArrayMembership=ausArrayMembership, ausControllerIndex=ausControllerIndex, ausI2ORaidControllerMainIndex=ausI2ORaidControllerMainIndex, ausDeviceSerialNumber=ausDeviceSerialNumber, ausI2ORaidControllerEntry=ausI2ORaidControllerEntry, ausTrapEnclosureInformation=ausTrapEnclosureInformation, ausDeviceStatus=ausDeviceStatus, ausTrapArrayTaskWarning=ausTrapArrayTaskWarning, ausControllerRelationship=ausControllerRelationship, ausEnclosureTemperatureSensorAusEnclosureDeviceIndex=ausEnclosureTemperatureSensorAusEnclosureDeviceIndex, ausServeRAIDControllerDefaultRebuildRate=ausServeRAIDControllerDefaultRebuildRate, ausEnclosureDevice=ausEnclosureDevice, ausEnclosureDeviceEntry=ausEnclosureDeviceEntry, ausArrayHostingControllerIndex=ausArrayHostingControllerIndex, ausArrayTaskCompletion=ausArrayTaskCompletion, ausCCodeControllerPCISlotNumber=ausCCodeControllerPCISlotNumber, ausStorageDeviceNumberOfBlocksHigh=ausStorageDeviceNumberOfBlocksHigh, OptionStatus=OptionStatus, ausSpareTable=ausSpareTable, ausExtentSize=ausExtentSize, ausTrapDeviceWarning=ausTrapDeviceWarning, ausCCodeControllerTable=ausCCodeControllerTable, ausDeviceVendor=ausDeviceVendor, ausEnclosureDeviceMainIndex=ausEnclosureDeviceMainIndex, ausControllerDescription=ausControllerDescription, ausControllerAudibleAlarmStatus=ausControllerAudibleAlarmStatus, ausOtherDeviceEntry=ausOtherDeviceEntry, ausDevicePortMaximumTransferRate=ausDevicePortMaximumTransferRate, ausControllerUniqueId=ausControllerUniqueId, ausDevice=ausDevice, ausControllerEntry=ausControllerEntry, ausI2ORaidControllerBackgroundTaskPriority=ausI2ORaidControllerBackgroundTaskPriority, ausServeRAIDControllerEntry=ausServeRAIDControllerEntry, ausHostRAIDControllerEntry=ausHostRAIDControllerEntry, ausCCodeControllerEntry=ausCCodeControllerEntry, ausServeRAIDControllerBIOSRevision=ausServeRAIDControllerBIOSRevision, ausArrayName=ausArrayName, ausArrayStripeSize=ausArrayStripeSize, ausControllerInstalledMemory=ausControllerInstalledMemory, ausArrayTaskStatus=ausArrayTaskStatus, ausArrayHostingControllerType=ausArrayHostingControllerType, ausCCodeControllerIndex=ausCCodeControllerIndex, ausChannelAusControllerChannelNumber=ausChannelAusControllerChannelNumber, ausChannelTypeDescription=ausChannelTypeDescription, ausEnclosureTemperatureSensor=ausEnclosureTemperatureSensor, ausChannelOverallStatus=ausChannelOverallStatus, ausExternalRaidDeviceDescription=ausExternalRaidDeviceDescription, ausDevicePortEntry=ausDevicePortEntry, ausEnclosureTemperatureSensorIndex=ausEnclosureTemperatureSensorIndex, ausTrapEnclosureFatal=ausTrapEnclosureFatal, ausControllerVendor=ausControllerVendor, ausEnclosureFanSpeed=ausEnclosureFanSpeed, ausEnclosureSlotPortId=ausEnclosureSlotPortId, ausTrapControllerType=ausTrapControllerType, ausEnclosureDeviceIndex=ausEnclosureDeviceIndex, ausEnclosurePowerSupplyEntry=ausEnclosurePowerSupplyEntry, ausStorageDeviceMainIndex=ausStorageDeviceMainIndex, ausArray=ausArray, ausChannelIndex=ausChannelIndex, ausOtherDevice=ausOtherDevice, ausExternalRaidDevice=ausExternalRaidDevice, BatteryStatus=BatteryStatus, ausI2ORaidControllerIndex=ausI2ORaidControllerIndex, ausTrapObjects=ausTrapObjects, ausStorageDevice=ausStorageDevice, ausControllerStatus=ausControllerStatus, ausChannelTable=ausChannelTable, ausEnclosureSlot=ausEnclosureSlot, ausExternalRaidDeviceIndex=ausExternalRaidDeviceIndex, ausChannel=ausChannel, ausEnclosurePowerSupplyAusEnclosureDeviceIndex=ausEnclosurePowerSupplyAusEnclosureDeviceIndex, adaptec=adaptec, ausMibStatus=ausMibStatus, ausCCodeControllerBiosVersion=ausCCodeControllerBiosVersion, ausTrapArrayStatus=ausTrapArrayStatus, ausTrapArrayInformation=ausTrapArrayInformation, ausEnclosureDeviceIdHigh=ausEnclosureDeviceIdHigh, ausControllerHighestChannelWithDevices=ausControllerHighestChannelWithDevices, ausEnclosureSlotEntry=ausEnclosureSlotEntry, IndexList=IndexList, ausControllerRelationshipTable=ausControllerRelationshipTable, ausServeRAIDControllerIndex=ausServeRAIDControllerIndex, ausOtherDeviceTable=ausOtherDeviceTable, ausEventLogString=ausEventLogString, ausChannelLocation=ausChannelLocation, ausController=ausController, ausEnclosureDeviceNumberOfTemperatureSensors=ausEnclosureDeviceNumberOfTemperatureSensors, ausI2ORaidControllerTable=ausI2ORaidControllerTable, ausStorageDeviceEntry=ausStorageDeviceEntry, ausTrapEnclosureObjectOrdinal=ausTrapEnclosureObjectOrdinal, ausTrapEnclosureStatus=ausTrapEnclosureStatus, ausDeviceTypeGroup=ausDeviceTypeGroup, ausTrapArrayTaskFatal=ausTrapArrayTaskFatal, ausDevicePort=ausDevicePort, ausHostRAIDController=ausHostRAIDController, ausI2ORaidControllerSmorRevision=ausI2ORaidControllerSmorRevision, ausHostRAIDControllerPCIDevice=ausHostRAIDControllerPCIDevice, ausCCodeController=ausCCodeController, ausServeRAIDControllerMainIndex=ausServeRAIDControllerMainIndex, ausEnclosureTemperatureSensorDegrees=ausEnclosureTemperatureSensorDegrees, ausHostRAIDControllerPCIFunction=ausHostRAIDControllerPCIFunction, ausI2ORaidController=ausI2ORaidController, ausDeviceTable=ausDeviceTable, ausControllerBatteryStatus=ausControllerBatteryStatus, ausControllerRelationshipRelation=ausControllerRelationshipRelation, ausEnclosureDeviceDescription=ausEnclosureDeviceDescription, ausChannelControllerSubId=ausChannelControllerSubId, ausChannelRelationshipEntry=ausChannelRelationshipEntry, ausArrayType=ausArrayType, ausExtentEntry=ausExtentEntry, ausAggregatedController=ausAggregatedController, ausControllerTable=ausControllerTable, ausExtentStartingLBAHigh=ausExtentStartingLBAHigh, ausEnclosureDeviceTable=ausEnclosureDeviceTable, ausControllerModel=ausControllerModel, ausSpare=ausSpare, ausAggregatedControllerEntry=ausAggregatedControllerEntry, ausControllerSerialNumber=ausControllerSerialNumber, ausExternalRaidDeviceMainIndex=ausExternalRaidDeviceMainIndex, ausTrapOtherFatal=ausTrapOtherFatal, ausEnclosureSlotIndex=ausEnclosureSlotIndex, ausSpareIndex=ausSpareIndex, ausDeviceAusChannelIndices=ausDeviceAusChannelIndices, ObjectStatus=ObjectStatus, ausChannelRelationshipIndex=ausChannelRelationshipIndex, ausStorageDeviceNumberOfBlocksLow=ausStorageDeviceNumberOfBlocksLow, ausDevicePortStatus=ausDevicePortStatus, ausDeviceNumberOfPorts=ausDeviceNumberOfPorts, ausTrapSpareInformation=ausTrapSpareInformation, ausServeRAIDControllerSlotNumber=ausServeRAIDControllerSlotNumber, ausCCodeControllerPCIBusId=ausCCodeControllerPCIBusId, ausMibStatusCopyright=ausMibStatusCopyright, ausHostRAIDControllerMainIndex=ausHostRAIDControllerMainIndex, ausArrayTable=ausArrayTable, ausControllerRelationshipIndex=ausControllerRelationshipIndex, ausEventLogTimeStamp=ausEventLogTimeStamp, ausEnclosureTemperatureSensorOrdinal=ausEnclosureTemperatureSensorOrdinal, ausOtherDeviceMainIndex=ausOtherDeviceMainIndex, ausI2ORaidControllerAddress=ausI2ORaidControllerAddress, ausOtherDeviceIndex=ausOtherDeviceIndex, ausExtentArrayMembership=ausExtentArrayMembership, ausExtentStartingLBALow=ausExtentStartingLBALow, ausTrapArrayTaskStatus=ausTrapArrayTaskStatus, ausAggregatedControllerList=ausAggregatedControllerList, ausEnclosurePowerSupplyTable=ausEnclosurePowerSupplyTable, ausControllerRevision=ausControllerRevision, ausEnclosureTemperatureSensorTable=ausEnclosureTemperatureSensorTable, ausChannelRelationship=ausChannelRelationship, ausTrapMessage=ausTrapMessage, ausControllerHostBusType=ausControllerHostBusType, ausChannelMaximumAttachments=ausChannelMaximumAttachments, ausDevicePortId=ausDevicePortId, ausTrapDeviceStatus=ausTrapDeviceStatus, ausStorageDeviceTable=ausStorageDeviceTable, ausEnclosurePowerSupplyIndex=ausEnclosurePowerSupplyIndex, ausTrapControllerStatus=ausTrapControllerStatus, ausSpareAusControllerOrArrayIndex=ausSpareAusControllerOrArrayIndex, ausDeviceType=ausDeviceType, ausTrapOtherWarning=ausTrapOtherWarning, ausChannelWidth=ausChannelWidth, ausEnclosureFanTable=ausEnclosureFanTable, ausEnclosurePowerSupply=ausEnclosurePowerSupply, ausMibStatusOverall=ausMibStatusOverall, ausControllerRelationshipList=ausControllerRelationshipList, ausExtentAusDeviceIndex=ausExtentAusDeviceIndex, ausTrapSpareFatal=ausTrapSpareFatal, ausEnclosureDeviceNumberOfSlots=ausEnclosureDeviceNumberOfSlots, ausExtentTable=ausExtentTable, ausEnclosureSlotTable=ausEnclosureSlotTable, ausDeviceRevision=ausDeviceRevision, ausEnclosureDevicePowerOnTime=ausEnclosureDevicePowerOnTime, ausDevicePortAusChannelIndex=ausDevicePortAusChannelIndex, ausEnclosureDeviceStandardRevision=ausEnclosureDeviceStandardRevision, ausEnclosureFan=ausEnclosureFan, ausStorageDeviceRemovableMedia=ausStorageDeviceRemovableMedia, ausEnclosureDeviceNumberOfPowerSupplies=ausEnclosureDeviceNumberOfPowerSupplies, ausExternalRaidDeviceBatteryStatus=ausExternalRaidDeviceBatteryStatus, ausEnclosureSlotAusEnclosureDeviceIndex=ausEnclosureSlotAusEnclosureDeviceIndex, ausEventLogIndex=ausEventLogIndex, ausDeviceModel=ausDeviceModel, ausHostRAIDControllerTable=ausHostRAIDControllerTable, ausEnclosureDeviceProcessorType=ausEnclosureDeviceProcessorType, ausExtentIndex=ausExtentIndex, ausServeRAIDController=ausServeRAIDController, ausStorageDeviceIndex=ausStorageDeviceIndex, ausExtentNumberOfBlocksHigh=ausExtentNumberOfBlocksHigh, ausArrayCacheStatus=ausArrayCacheStatus, ausArrayStatus=ausArrayStatus, ausDevicePortIndex=ausDevicePortIndex, ausEventLogTable=ausEventLogTable, ausChannelAusControllerIndex=ausChannelAusControllerIndex, ausDeviceEntry=ausDeviceEntry, ausDevicePortAusDeviceIndex=ausDevicePortAusDeviceIndex, ausEnclosureDeviceTemperatureState=ausEnclosureDeviceTemperatureState, ausExternalRaidDeviceTable=ausExternalRaidDeviceTable, ausEnclosureFanEntry=ausEnclosureFanEntry, ausDevicePortWidth=ausDevicePortWidth, ausMIB=ausMIB, universalStorage=universalStorage, ausEventLogNumEntries=ausEventLogNumEntries, ausEnclosureTemperatureSensorOverTemperature=ausEnclosureTemperatureSensorOverTemperature, ausSpareAusDeviceIndex=ausSpareAusDeviceIndex, ausAggregatedControllerIndex=ausAggregatedControllerIndex, ausArrayEntry=ausArrayEntry, ausExtentNumberOfBlocksLow=ausExtentNumberOfBlocksLow, ausTrapSpareWarning=ausTrapSpareWarning, ausDeviceUniqueId=ausDeviceUniqueId, ausChannelType=ausChannelType, ausEnclosureDeviceDoorLock=ausEnclosureDeviceDoorLock, ausControllerRelationshipEntry=ausControllerRelationshipEntry, ausHostRAIDControllerPCIBus=ausHostRAIDControllerPCIBus, ausSpareType=ausSpareType, ausAggregatedControllerTable=ausAggregatedControllerTable, ausStorageDeviceBlockSize=ausStorageDeviceBlockSize, ausEnclosurePowerSupplyStatus=ausEnclosurePowerSupplyStatus, TriState=TriState, ausDevicePortAusDevicePortNumber=ausDevicePortAusDevicePortNumber, ausTrapArrayFatal=ausTrapArrayFatal, ausControllerHostBusMaximumTransferRate=ausControllerHostBusMaximumTransferRate, ausTrapDeviceInformation=ausTrapDeviceInformation, ausDevicePortTable=ausDevicePortTable, ausEnclosureFanIndex=ausEnclosureFanIndex, ausDeviceIndex=ausDeviceIndex, ausEnclosurePowerSupplyOrdinal=ausEnclosurePowerSupplyOrdinal, ausTrapEnclosureWarning=ausTrapEnclosureWarning, ausArrayState=ausArrayState, ausEventLog=ausEventLog, ausHostRAIDControllerIndex=ausHostRAIDControllerIndex, ausDevicePortUniqueId=ausDevicePortUniqueId, ausEnclosureDeviceSpeaker=ausEnclosureDeviceSpeaker, ausEnclosureDeviceIdLow=ausEnclosureDeviceIdLow, ausTrapArrayTaskInformation=ausTrapArrayTaskInformation, ausEventLogCount=ausEventLogCount)
mibBuilder.exportSymbols("ADAPTEC-UNIVERSAL-STORAGE-MIB", ausExternalRaidDeviceInstalledMemory=ausExternalRaidDeviceInstalledMemory, ausEnclosureFanStatus=ausEnclosureFanStatus, ausEnclosureFanOrdinal=ausEnclosureFanOrdinal, ausOtherDeviceDescription=ausOtherDeviceDescription, ausExternalRaidDeviceEntry=ausExternalRaidDeviceEntry, ausCCodeControllerMainIndex=ausCCodeControllerMainIndex, ausControllerNumberOfChannels=ausControllerNumberOfChannels, ausTrapArrayWarning=ausTrapArrayWarning, ausChannelRelationshipList=ausChannelRelationshipList, ausEnclosureDevicePowerCycles=ausEnclosureDevicePowerCycles, ausExtent=ausExtent, ausChannelRelationshipRelation=ausChannelRelationshipRelation, ausEnclosureDeviceNumberOfFans=ausEnclosureDeviceNumberOfFans, ausExternalRaidDeviceNumberOfChannels=ausExternalRaidDeviceNumberOfChannels, ausDevicePortSubId=ausDevicePortSubId, ausArrayIndex=ausArrayIndex, ausMibStatusRevMajor=ausMibStatusRevMajor, ausStorageDeviceFormattedCapacity=ausStorageDeviceFormattedCapacity, ausEventLogEntry=ausEventLogEntry, ausChannelRelationshipTable=ausChannelRelationshipTable, ausControllerOverallStatus=ausControllerOverallStatus, ausTrapSpareStatus=ausTrapSpareStatus, ausEnclosureFanAusEnclosureDeviceIndex=ausEnclosureFanAusEnclosureDeviceIndex, ausTrapEnumAsText=ausTrapEnumAsText)
