#
# PySNMP MIB module Telematics-Nevada-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Telematics-Nevada-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, ModuleIdentity, Counter64, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Bits, TimeTicks, IpAddress, NotificationType, ObjectIdentity, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ModuleIdentity", "Counter64", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Bits", "TimeTicks", "IpAddress", "NotificationType", "ObjectIdentity", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
telematics = MibIdentifier((1, 3, 6, 1, 4, 1, 230))
tmxNevada = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5))
nevadaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1))
nevadaModels = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 2))
nevadaFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5))
nevadaIti = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6))
nevadaSync = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7))
nevadaX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10))
nevadaIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11))
nevadaPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12))
nevadaElx = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15))
nevadaIp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16))
nevadaTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17))
nevadaFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18))
nevadaTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20))
nevadaRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40))
nevadaSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45))
nevadaApacs = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50))
nevadaR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55))
nevadaRb = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58))
nevadaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 64))
nevadaAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 65))
nevadaPos = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66))
nevadaL2tp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70))
class NvPortName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class NvPoolName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class NvNetAddress(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 16)

class NvVisaType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 102))
    namedValues = NamedValues(("undef", 1), ("fxd1", 2), ("fxd2", 3), ("fxd3", 4), ("fxd4", 5), ("fxd5", 6), ("fxd6", 7), ("fxd7", 8), ("fxd8", 9), ("fxd9", 10), ("fxd10", 11), ("fxd11", 12), ("fxd12", 13), ("fxd13", 14), ("fxd14", 15), ("fxd15", 16), ("fxd16", 17), ("fxd17", 18), ("fxd18", 19), ("fxd19", 20), ("fxd20", 21), ("fxd21", 22), ("fxd22", 23), ("fxd23", 24), ("fxd24", 25), ("fxd25", 26), ("fxd26", 27), ("fxd27", 28), ("fxd28", 29), ("fxd29", 30), ("fxd30", 31), ("fxd31", 32), ("fxd32", 33), ("varfs", 102))

class NvIsoType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 202, 204, 222, 224))
    namedValues = NamedValues(("unused", 1), ("fxb1", 2), ("fxb2", 3), ("fxb3", 4), ("fxb4", 5), ("fxb5", 6), ("fxb6", 7), ("fxb7", 8), ("fxb8", 9), ("fxb9", 10), ("fxb10", 11), ("fxb11", 12), ("fxb12", 13), ("fxb13", 14), ("fxb14", 15), ("fxb15", 16), ("fxb16", 17), ("fxb17", 18), ("fxb18", 19), ("fxb19", 20), ("fxb20", 21), ("fxb21", 22), ("fxb22", 23), ("fxb23", 24), ("fxb24", 25), ("fxb25", 26), ("fxb26", 27), ("fxb27", 28), ("fxb28", 29), ("fxb29", 30), ("fxb30", 31), ("fxb31", 32), ("fxb32", 33), ("fxb33", 34), ("fxb34", 35), ("fxb35", 36), ("fxb36", 37), ("fxb37", 38), ("fxb38", 39), ("fxb39", 40), ("fxb40", 41), ("fxb41", 42), ("fxb42", 43), ("fxn1", 102), ("fxn2", 103), ("fxn3", 104), ("fxn4", 105), ("fxn5", 106), ("fxn6", 107), ("fxn7", 108), ("fxn8", 109), ("fxn9", 110), ("fxn10", 111), ("fxn11", 112), ("fxn12", 113), ("fxn13", 114), ("fxn14", 115), ("fxn15", 116), ("fxn16", 117), ("fxn17", 118), ("fxn18", 119), ("fxn19", 120), ("fxn20", 121), ("fxn21", 122), ("fxn22", 123), ("fxn23", 124), ("fxn24", 125), ("fxn25", 126), ("fxn26", 127), ("fxn27", 128), ("fxn28", 129), ("fxn29", 130), ("fxn30", 131), ("fxn31", 132), ("fxn32", 133), ("fxn33", 134), ("fxn34", 135), ("fxn35", 136), ("fxn36", 137), ("fxn37", 138), ("fxn38", 139), ("fxn39", 140), ("fxn40", 141), ("fxn41", 142), ("fxn42", 143), ("llbyte", 202), ("lllbyte", 204), ("llnibble", 222), ("lllnibble", 224))

nvNodestat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 1))
nvNodestatTotalbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTotalbufs.setStatus('mandatory')
nvNodestatCurminbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurminbufs.setStatus('mandatory')
nvNodestatCurmincpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurmincpu.setStatus('mandatory')
nvNodestatCurtime = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurtime.setStatus('mandatory')
nvNodestatFreebufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatFreebufs.setStatus('mandatory')
nvNodestatFreecpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatFreecpu.setStatus('mandatory')
nvNodestatMaxcpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMaxcpu.setStatus('mandatory')
nvNodestatMinbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMinbufs.setStatus('mandatory')
nvNodestatMincpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMincpu.setStatus('mandatory')
nvNodestatRxavgpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatRxavgpps.setStatus('mandatory')
nvNodestatRxcurpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatRxcurpps.setStatus('mandatory')
nvNodestatTxavgpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTxavgpps.setStatus('mandatory')
nvNodestatTxcurpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTxcurpps.setStatus('mandatory')
nvNodestatX25call = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatX25call.setStatus('mandatory')
nvNodestatChgreqid = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatChgreqid.setStatus('mandatory')
nvNodestatCurclk = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurclk.setStatus('mandatory')
nvNodestatClkfails = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatClkfails.setStatus('mandatory')
nvNodestatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatDtreset.setStatus('mandatory')
nvNodestatNumcalls = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatNumcalls.setStatus('mandatory')
nvNodeconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 2))
nvNodeconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfMaxRec.setStatus('mandatory')
nvNodeconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfNumRec.setStatus('mandatory')
nvNodeconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3), )
if mibBuilder.loadTexts: nvNodeconfTable.setStatus('mandatory')
nvNodeconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNodeconfIndex"))
if mibBuilder.loadTexts: nvNodeconfEntry.setStatus('mandatory')
nvNodeconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfIndex.setStatus('mandatory')
nvNodeconfPartnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfPartnum.setStatus('mandatory')
nvNodeconfDbversion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfDbversion.setStatus('mandatory')
nvNodeconfSwdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfSwdate.setStatus('mandatory')
nvNodeconfSwversion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfSwversion.setStatus('mandatory')
nvNodeconfCalarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfCalarms.setStatus('mandatory')
nvNodeconfStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfStartup.setStatus('mandatory')
nvNodeconfSwtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sview", 1), ("inf", 2), ("inf2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfSwtype.setStatus('mandatory')
nvNodeconfX25call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfX25call.setStatus('mandatory')
nvNodeconfAcctrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfAcctrec.setStatus('mandatory')
nvNodeconfAlarmrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfAlarmrec.setStatus('mandatory')
nvNodeconfBusyout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfBusyout.setStatus('mandatory')
nvNodeconfRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate1.setStatus('mandatory')
nvNodeconfRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate2.setStatus('mandatory')
nvNodeconfRate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate3.setStatus('mandatory')
nvNodeconfRate4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate4.setStatus('mandatory')
nvNodeconfNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfNodeid.setStatus('mandatory')
nvNodeconfExstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("link", 2), ("x25", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfExstat.setStatus('mandatory')
nvNodeconfRsttimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRsttimer.setStatus('mandatory')
nvNodeconfChgreqid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfChgreqid.setStatus('mandatory')
nvNodeconfClksrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc1.setStatus('mandatory')
nvNodeconfClksrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc2.setStatus('mandatory')
nvNodeconfClksrc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc3.setStatus('mandatory')
nvNodeconfDsprfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfDsprfail.setStatus('mandatory')
nvNodeconfFrmrfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfFrmrfail.setStatus('mandatory')
nvNodeconfQdlifail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfQdlifail.setStatus('mandatory')
nvAcctstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 3))
nvAcctstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatMaxRec.setStatus('mandatory')
nvAcctstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatNumRec.setStatus('mandatory')
nvAcctstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3), )
if mibBuilder.loadTexts: nvAcctstatTable.setStatus('mandatory')
nvAcctstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAcctstatRecord"))
if mibBuilder.loadTexts: nvAcctstatEntry.setStatus('mandatory')
nvAcctstatComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatComponent.setStatus('mandatory')
nvAcctstatRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRecord.setStatus('mandatory')
nvAcctstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCalled.setStatus('mandatory')
nvAcctstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCalling.setStatus('mandatory')
nvAcctstatRecorg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iti", 1), ("x25", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRecorg.setStatus('mandatory')
nvAcctstatSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatSegsize.setStatus('mandatory')
nvAcctstatDay = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatDay.setStatus('mandatory')
nvAcctstatMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatMinute.setStatus('mandatory')
nvAcctstatSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatSecond.setStatus('mandatory')
nvAcctstatTxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxpaks.setStatus('mandatory')
nvAcctstat64ktxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxpaks.setStatus('mandatory')
nvAcctstatRxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxpaks.setStatus('mandatory')
nvAcctstat64krxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxpaks.setStatus('mandatory')
nvAcctstatTxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxchars.setStatus('mandatory')
nvAcctstat64ktxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxchars.setStatus('mandatory')
nvAcctstatRxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxchars.setStatus('mandatory')
nvAcctstat64krxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxchars.setStatus('mandatory')
nvAcctstatTxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxsegs.setStatus('mandatory')
nvAcctstat64ktxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxsegs.setStatus('mandatory')
nvAcctstatRxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxsegs.setStatus('mandatory')
nvAcctstat64krxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxsegs.setStatus('mandatory')
nvAcctstatAbstime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatAbstime.setStatus('mandatory')
nvAcctstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatDtreset.setStatus('mandatory')
nvAcctstatCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCallid.setStatus('mandatory')
nvAcctstatInfofunc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatInfofunc.setStatus('mandatory')
nvAcctoper = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 4))
nvAcctoperMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperMaxRec.setStatus('mandatory')
nvAcctoperNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperNumRec.setStatus('mandatory')
nvAcctoperTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3), )
if mibBuilder.loadTexts: nvAcctoperTable.setStatus('mandatory')
nvAcctoperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAcctoperIndex"))
if mibBuilder.loadTexts: nvAcctoperEntry.setStatus('mandatory')
nvAcctoperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperIndex.setStatus('mandatory')
nvAcctoperComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperComponent.setStatus('mandatory')
nvAcctoperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAcctoperEnable.setStatus('mandatory')
nvAcctoperSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAcctoperSegsize.setStatus('mandatory')
nvModemstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 5))
nvModemstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMaxRec.setStatus('mandatory')
nvModemstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatNumRec.setStatus('mandatory')
nvModemstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3), )
if mibBuilder.loadTexts: nvModemstatTable.setStatus('mandatory')
nvModemstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemstatIndex"))
if mibBuilder.loadTexts: nvModemstatEntry.setStatus('mandatory')
nvModemstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatIndex.setStatus('mandatory')
nvModemstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatName.setStatus('mandatory')
nvModemstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("hshake", 2), ("ecdc", 3), ("connected", 4), ("retraining", 5), ("renegotiating", 6), ("clearDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatState.setStatus('mandatory')
nvModemstatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("idle", 1), ("t1200R75", 2), ("t75R1200", 3), ("v300", 4), ("v600", 5), ("v1200", 6), ("v2400", 7), ("v4800", 8), ("v7200", 9), ("v9600NT", 10), ("v9600", 11), ("v12000", 12), ("v14400", 13), ("v16800", 14), ("v19200", 15), ("v21600", 16), ("v24000", 17), ("v26400", 18), ("v28800", 19), ("v31200", 20), ("v33600", 21), ("v32000", 22), ("v34000", 23), ("v36000", 24), ("v38000", 25), ("v40000", 26), ("v42000", 27), ("v44000", 28), ("v46000", 29), ("v48000", 30), ("v50000", 31), ("v52000", 32), ("v54000", 33), ("v56000", 34), ("v58000", 35), ("v60000", 36), ("vv28000", 37), ("v29333", 38), ("v30667", 39), ("vv32000", 40), ("v33333", 41), ("v34667", 42), ("vv36000", 43), ("v37333", 44), ("v38667", 45), ("vv40000", 46), ("v41333", 47), ("v42667", 48), ("vv44000", 49), ("v45333", 50), ("v46667", 51), ("vv48000", 52), ("v49333", 53), ("v50667", 54), ("vv52000", 55), ("v53333", 56), ("v54667", 57), ("vv56000", 58), ("v57333", 59), ("v58667", 60), ("vv60000", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRate.setStatus('mandatory')
nvModemstatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21))).clone(namedValues=NamedValues(("idle", 1), ("v34", 2), ("v32bis", 3), ("v32", 4), ("v22bis", 5), ("v22", 6), ("v21", 7), ("bell212", 9), ("unknown", 10), ("bell103", 11), ("v23", 12), ("v27", 13), ("v29", 14), ("v33", 15), ("v17", 16), ("v34bis", 17), ("vpcm", 18), ("v110", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatType.setStatus('mandatory')
nvModemstatEctype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("v42ErrorCorrection", 2), ("mnpErrorCorrection", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatEctype.setStatus('mandatory')
nvModemstatDctype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDctype.setStatus('mandatory')
nvModemstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("predetection", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMode.setStatus('mandatory')
nvModemstatRxparity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("even", 2), ("odd", 3), ("mark", 4), ("space", 5), ("none", 6), ("clear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRxparity.setStatus('mandatory')
nvModemstatTxparity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("even", 2), ("odd", 3), ("mark", 4), ("space", 5), ("none", 6), ("clear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatTxparity.setStatus('mandatory')
nvModemstatAccms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatAccms.setStatus('mandatory')
nvModemstatMse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMse.setStatus('mandatory')
nvModemstatRcvlvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRcvlvl.setStatus('mandatory')
nvModemstatRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRetrain.setStatus('mandatory')
nvModemstatRenego = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRenego.setStatus('mandatory')
nvModemstatSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("passed", 2), ("dspFailed", 3), ("sramFailed", 4), ("sramAndDspFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatSelftest.setStatus('mandatory')
nvModemstatFirmver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatFirmver.setStatus('mandatory')
nvModemstatModel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatModel.setStatus('mandatory')
nvModemstatRxpclear = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRxpclear.setStatus('mandatory')
nvModemstatDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDsp.setStatus('mandatory')
nvModemstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDtreset.setStatus('mandatory')
nvModemconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 6))
nvModemconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfMaxRec.setStatus('mandatory')
nvModemconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfNumRec.setStatus('mandatory')
nvModemconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3), )
if mibBuilder.loadTexts: nvModemconfTable.setStatus('mandatory')
nvModemconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemconfIndex"))
if mibBuilder.loadTexts: nvModemconfEntry.setStatus('mandatory')
nvModemconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfIndex.setStatus('mandatory')
nvModemconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfName.setStatus('mandatory')
nvModemconfProfilename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfProfilename.setStatus('mandatory')
nvModemconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfEnable.setStatus('mandatory')
nvModemconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfStatus.setStatus('mandatory')
nvSymuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 7))
nvSymuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserMaxRec.setStatus('mandatory')
nvSymuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserNumRec.setStatus('mandatory')
nvSymuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3), )
if mibBuilder.loadTexts: nvSymuserTable.setStatus('mandatory')
nvSymuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSymuserIndex"))
if mibBuilder.loadTexts: nvSymuserEntry.setStatus('mandatory')
nvSymuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserIndex.setStatus('mandatory')
nvSymuserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserUsername.setStatus('mandatory')
nvSymuserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserPassword.setStatus('mandatory')
nvSymuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserStatus.setStatus('mandatory')
nvNmsuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 8))
nvNmsuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserMaxRec.setStatus('mandatory')
nvNmsuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserNumRec.setStatus('mandatory')
nvNmsuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3), )
if mibBuilder.loadTexts: nvNmsuserTable.setStatus('mandatory')
nvNmsuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNmsuserIndex"))
if mibBuilder.loadTexts: nvNmsuserEntry.setStatus('mandatory')
nvNmsuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserIndex.setStatus('mandatory')
nvNmsuserCalladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCalladdr.setStatus('mandatory')
nvNmsuserCalldata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCalldata.setStatus('mandatory')
nvNmsuserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserPassword.setStatus('mandatory')
nvNmsuserPsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserPsiz.setStatus('mandatory')
nvNmsuserWsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserWsiz.setStatus('mandatory')
nvNmsuserRpoacode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserRpoacode.setStatus('mandatory')
nvNmsuserOchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("oall", 2), ("onorm", 3), ("orev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserOchrg.setStatus('mandatory')
nvNmsuserCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCug.setStatus('mandatory')
nvNmsuserTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserTput.setStatus('mandatory')
nvNmsuserNmsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserNmsid.setStatus('mandatory')
nvNmsuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserStatus.setStatus('mandatory')
nvNetmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 9))
nvNetmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapMaxRec.setStatus('mandatory')
nvNetmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapNumRec.setStatus('mandatory')
nvNetmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3), )
if mibBuilder.loadTexts: nvNetmapTable.setStatus('mandatory')
nvNetmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetmapIndex"))
if mibBuilder.loadTexts: nvNetmapEntry.setStatus('mandatory')
nvNetmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapIndex.setStatus('mandatory')
nvNetmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapNetaddr.setStatus('mandatory')
nvNetmapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapUserdata.setStatus('mandatory')
nvNetmapNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapNodeid.setStatus('mandatory')
nvNetmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapStatus.setStatus('mandatory')
nvNetroute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 10))
nvNetrouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteMaxRec.setStatus('mandatory')
nvNetrouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteNumRec.setStatus('mandatory')
nvNetrouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3), )
if mibBuilder.loadTexts: nvNetrouteTable.setStatus('mandatory')
nvNetrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetrouteIndex"))
if mibBuilder.loadTexts: nvNetrouteEntry.setStatus('mandatory')
nvNetrouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteIndex.setStatus('mandatory')
nvNetrouteNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteNodeid.setStatus('mandatory')
nvNetrouteService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteService.setStatus('mandatory')
nvNetroutePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetroutePrio.setStatus('mandatory')
nvNetrouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteStatus.setStatus('mandatory')
nvNetpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 11))
nvNetpvcMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcMaxRec.setStatus('mandatory')
nvNetpvcNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcNumRec.setStatus('mandatory')
nvNetpvcTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3), )
if mibBuilder.loadTexts: nvNetpvcTable.setStatus('mandatory')
nvNetpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetpvcIndex"))
if mibBuilder.loadTexts: nvNetpvcEntry.setStatus('mandatory')
nvNetpvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcIndex.setStatus('mandatory')
nvNetpvcService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcService.setStatus('mandatory')
nvNetpvcPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvcid.setStatus('mandatory')
nvNetpvcPvccode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvccode.setStatus('mandatory')
nvNetpvcPvcend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("originatingEnd", 2), ("terminatingEnd", 3), ("symmetricEnd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvcend.setStatus('mandatory')
nvNetpvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcStatus.setStatus('mandatory')
nvNetpvcmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 12))
nvNetpvcmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapMaxRec.setStatus('mandatory')
nvNetpvcmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapNumRec.setStatus('mandatory')
nvNetpvcmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3), )
if mibBuilder.loadTexts: nvNetpvcmapTable.setStatus('mandatory')
nvNetpvcmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetpvcmapIndex"))
if mibBuilder.loadTexts: nvNetpvcmapEntry.setStatus('mandatory')
nvNetpvcmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapIndex.setStatus('mandatory')
nvNetpvcmapPvccode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapPvccode.setStatus('mandatory')
nvNetpvcmapNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapNodeid.setStatus('mandatory')
nvNetpvcmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapStatus.setStatus('mandatory')
nvNetcon = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 13))
nvNetconMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconMaxRec.setStatus('mandatory')
nvNetconNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconNumRec.setStatus('mandatory')
nvNetconTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3), )
if mibBuilder.loadTexts: nvNetconTable.setStatus('mandatory')
nvNetconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetconIndex"))
if mibBuilder.loadTexts: nvNetconEntry.setStatus('mandatory')
nvNetconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconIndex.setStatus('mandatory')
nvNetconSrccompid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconSrccompid.setStatus('mandatory')
nvNetconDstcompid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconDstcompid.setStatus('mandatory')
nvNetconCallingad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconCallingad.setStatus('mandatory')
nvNetconCalledad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconCalledad.setStatus('mandatory')
nvNetconConstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 9))).clone(namedValues=NamedValues(("initial", 2), ("awaitingResponse", 3), ("dataTransfer", 5), ("disconnected", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconConstate.setStatus('mandatory')
nvNetconConid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconConid.setStatus('mandatory')
nvNetconSrcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconSrcid.setStatus('mandatory')
nvNetconDstid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconDstid.setStatus('mandatory')
nvRoutemap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 14))
nvRoutemapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapMaxRec.setStatus('mandatory')
nvRoutemapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapNumRec.setStatus('mandatory')
nvRoutemapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3), )
if mibBuilder.loadTexts: nvRoutemapTable.setStatus('mandatory')
nvRoutemapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRoutemapIndex"))
if mibBuilder.loadTexts: nvRoutemapEntry.setStatus('mandatory')
nvRoutemapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapIndex.setStatus('mandatory')
nvRoutemapAddrstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapAddrstr.setStatus('mandatory')
nvRoutemapAddrtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 9))).clone(namedValues=NamedValues(("callednum", 2), ("calledsub", 3), ("any", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapAddrtype.setStatus('mandatory')
nvRoutemapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapNetaddr.setStatus('mandatory')
nvRoutemapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapUserdata.setStatus('mandatory')
nvRoutemapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapStatus.setStatus('mandatory')
nvMediastat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 15))
nvMediastatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatMaxRec.setStatus('mandatory')
nvMediastatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatNumRec.setStatus('mandatory')
nvMediastatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3), )
if mibBuilder.loadTexts: nvMediastatTable.setStatus('mandatory')
nvMediastatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMediastatIndex"))
if mibBuilder.loadTexts: nvMediastatEntry.setStatus('mandatory')
nvMediastatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatIndex.setStatus('mandatory')
nvMediastatOrigimage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 401))).clone(namedValues=NamedValues(("image1", 1), ("image2", 401)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatOrigimage.setStatus('mandatory')
nvMediastatImage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 401))).clone(namedValues=NamedValues(("image1", 1), ("image2", 401)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatImage.setStatus('mandatory')
nvMediastatDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatDebug.setStatus('mandatory')
nvMediastatImagechg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatImagechg.setStatus('mandatory')
nvMediastatDump = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatDump.setStatus('mandatory')
nvMediastatImage1db = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage1db.setStatus('mandatory')
nvMediastatImage1sw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage1sw.setStatus('mandatory')
nvMediastatImage2db = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage2db.setStatus('mandatory')
nvMediastatImage2sw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage2sw.setStatus('mandatory')
nvMediastatMediasize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 33))).clone(namedValues=NamedValues(("absent", 1), ("v2MB", 3), ("v4MB", 5), ("v6MB", 7), ("v8MB", 9), ("v10MB", 11), ("v12MB", 13), ("v14MB", 15), ("v16MB", 17), ("v18MB", 19), ("v20MB", 21), ("v32MB", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatMediasize.setStatus('mandatory')
nvTnnlconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 16))
nvTnnlconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfMaxRec.setStatus('mandatory')
nvTnnlconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfNumRec.setStatus('mandatory')
nvTnnlconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3), )
if mibBuilder.loadTexts: nvTnnlconfTable.setStatus('mandatory')
nvTnnlconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnnlconfIndex"))
if mibBuilder.loadTexts: nvTnnlconfEntry.setStatus('mandatory')
nvTnnlconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfIndex.setStatus('mandatory')
nvTnnlconfPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfPortname.setStatus('mandatory')
nvTnnlconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfRsrcpool.setStatus('mandatory')
nvTnnlconfLineprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dontcare", 2), ("rfc1662", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfLineprot.setStatus('mandatory')
nvTnnlconfProt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("transparent", 2), ("rfc1598", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfProt.setStatus('mandatory')
nvTnnlconfRtmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("useconfig", 2), ("usecallednm", 3), ("usecalledsb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfRtmethod.setStatus('mandatory')
nvTnnlconfNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfNetaddr.setStatus('mandatory')
nvTnnlconfUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfUserdata.setStatus('mandatory')
nvTnnlconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfStatus.setStatus('mandatory')
nvTnnlstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 17))
nvTnnlstatfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatfMaxRec.setStatus('mandatory')
nvTnnlstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatNumRec.setStatus('mandatory')
nvTnnlstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3), )
if mibBuilder.loadTexts: nvTnnlstatTable.setStatus('mandatory')
nvTnnlstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnnlstatIndex"))
if mibBuilder.loadTexts: nvTnnlstatEntry.setStatus('mandatory')
nvTnnlstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatIndex.setStatus('mandatory')
nvTnnlstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatPortname.setStatus('mandatory')
nvTnnlstatRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatRsrcpool.setStatus('mandatory')
nvTnnlstatConnstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tunnelnocb", 2), ("tunnelnoport", 3), ("tunnelinactive", 4), ("tunnelcalling", 5), ("tunnelactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatConnstat.setStatus('mandatory')
nvTnnlstatRtstring = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatRtstring.setStatus('mandatory')
nvTnnlstatNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatNetaddr.setStatus('mandatory')
nvTnnlstatUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatUserdata.setStatus('mandatory')
nvTnnlstatCallatts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatCallatts.setStatus('mandatory')
nvTnnlstatCallattfs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatCallattfs.setStatus('mandatory')
nvTnnlstatInframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatInframes.setStatus('mandatory')
nvTnnlstatOutframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatOutframes.setStatus('mandatory')
nvTnnlstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatDtreset.setStatus('mandatory')
nvCDLITable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 18), )
if mibBuilder.loadTexts: nvCDLITable.setStatus('mandatory')
nvCDLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCDLISlotIndex"), (0, "Telematics-Nevada-MIB", "nvCDLIPortIndex"))
if mibBuilder.loadTexts: nvCDLIEntry.setStatus('mandatory')
nvCDLISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLISlotIndex.setStatus('mandatory')
nvCDLIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLIPortIndex.setStatus('mandatory')
nvCDLIName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLIName.setStatus('mandatory')
nvCDLIFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d4sf", 1), ("d4esf", 2), ("pcm30", 3), ("crc4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIFormat.setStatus('mandatory')
nvCDLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLICode.setStatus('mandatory')
nvCDLIFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("att", 2), ("ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIFdl.setStatus('mandatory')
nvCDLISignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccs", 1), ("rbs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLISignaling.setStatus('mandatory')
nvCDLILineimp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohm-120", 1), ("ohm-75", 2), ("ohm-100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLILineimp.setStatus('mandatory')
nvCDLIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIEnable.setStatus('mandatory')
nvCDLICsudsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLICsudsu.setStatus('mandatory')
nvCDLIAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("t130", 1), ("t124", 2), ("t118", 3), ("t112", 4), ("t16", 5), ("t10", 6), ("t1neg75", 7), ("t1neg150", 8), ("t1neg225", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIAtten.setStatus('mandatory')
nvCDLIGain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g12db", 1), ("g26db", 2), ("g36db", 3), ("g43db", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIGain.setStatus('mandatory')
nvCDLIDataInver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIDataInver.setStatus('mandatory')
nvSDLITable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 19), )
if mibBuilder.loadTexts: nvSDLITable.setStatus('mandatory')
nvSDLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSDLISlotIndex"), (0, "Telematics-Nevada-MIB", "nvSDLIPortIndex"))
if mibBuilder.loadTexts: nvSDLIEntry.setStatus('mandatory')
nvSDLISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLISlotIndex.setStatus('mandatory')
nvSDLIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIPortIndex.setStatus('mandatory')
nvSDLISdlinm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLISdlinm.setStatus('mandatory')
nvSDLIDlitype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIDlitype.setStatus('mandatory')
nvSDLICurstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("unknwn", 2), ("down", 3), ("red", 4), ("blue", 5), ("yell", 6), ("mLine", 7), ("mPay", 8), ("busyAIS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLICurstate.setStatus('mandatory')
nvSDLIRedcnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIRedcnts.setStatus('mandatory')
nvSDLIYelcnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIYelcnts.setStatus('mandatory')
nvSDLIBlucnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIBlucnts.setStatus('mandatory')
nvSDLIErrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIErrcnt.setStatus('mandatory')
nvSDLITxundrun = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLITxundrun.setStatus('mandatory')
nvSDLIRxfrmslp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIRxfrmslp.setStatus('mandatory')
nvSDLIDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIDtreset.setStatus('mandatory')
nvUgconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 20))
nvUgconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfMaxRec.setStatus('mandatory')
nvUgconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfNumRec.setStatus('mandatory')
nvUgconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3), )
if mibBuilder.loadTexts: nvUgconfTable.setStatus('mandatory')
nvUgconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvUgconfIndex"))
if mibBuilder.loadTexts: nvUgconfEntry.setStatus('mandatory')
nvUgconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfIndex.setStatus('mandatory')
nvUgconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfName.setStatus('mandatory')
nvUgconfPool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfPool.setStatus('mandatory')
nvUgconfNumrsrvd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfNumrsrvd.setStatus('mandatory')
nvUgconfThreshld = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfThreshld.setStatus('mandatory')
nvUgconfMaxbw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfMaxbw.setStatus('mandatory')
nvUgconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfStatus.setStatus('mandatory')
nvUgstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 21))
nvUgstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatMaxRec.setStatus('mandatory')
nvUgstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatNumRec.setStatus('mandatory')
nvUgstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3), )
if mibBuilder.loadTexts: nvUgstatTable.setStatus('mandatory')
nvUgstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvUgstatIndex"))
if mibBuilder.loadTexts: nvUgstatEntry.setStatus('mandatory')
nvUgstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatIndex.setStatus('mandatory')
nvUgstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatName.setStatus('mandatory')
nvUgstatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatPool.setStatus('mandatory')
nvUgstatNumused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatNumused.setStatus('mandatory')
nvUgstatBwused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatBwused.setStatus('mandatory')
nvUgstatBwrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatBwrejs.setStatus('mandatory')
nvUgstatUnavrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatUnavrejs.setStatus('mandatory')
nvUgstatThresrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatThresrejs.setStatus('mandatory')
nvUgstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatDtreset.setStatus('mandatory')
nvDrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 22))
nvDrstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatMaxRec.setStatus('mandatory')
nvDrstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumRec.setStatus('mandatory')
nvDrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3), )
if mibBuilder.loadTexts: nvDrstatTable.setStatus('mandatory')
nvDrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDrstatIndex"))
if mibBuilder.loadTexts: nvDrstatEntry.setStatus('mandatory')
nvDrstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatIndex.setStatus('mandatory')
nvDrstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatName.setStatus('mandatory')
nvDrstatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("dsp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatClass.setStatus('mandatory')
nvDrstatNumdev = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumdev.setStatus('mandatory')
nvDrstatNumrsrvd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumrsrvd.setStatus('mandatory')
nvDrstatNumavail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumavail.setStatus('mandatory')
nvDrstatNumused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumused.setStatus('mandatory')
nvDrstatMaxused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatMaxused.setStatus('mandatory')
nvDrstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatDtreset.setStatus('mandatory')
nvCFRMRTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 23), )
if mibBuilder.loadTexts: nvCFRMRTable.setStatus('mandatory')
nvCFRMREntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCFRMRSlotIndex"), (0, "Telematics-Nevada-MIB", "nvCFRMRPortIndex"))
if mibBuilder.loadTexts: nvCFRMREntry.setStatus('mandatory')
nvCFRMRSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRSlotIndex.setStatus('mandatory')
nvCFRMRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRPortIndex.setStatus('mandatory')
nvCFRMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRName.setStatus('mandatory')
nvCFRMRRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("undef", 1), ("v64K", 2), ("v128K", 3), ("v192K", 4), ("v256K", 5), ("v320K", 6), ("v384K", 7), ("v448K", 8), ("v512K", 9), ("v576K", 10), ("v640K", 11), ("v704K", 12), ("v768K", 13), ("v832K", 14), ("v896K", 15), ("v960K", 16), ("v1024K", 17), ("v1088K", 18), ("v1152K", 19), ("v1216K", 20), ("v1280K", 21), ("v1344K", 22), ("v1408K", 23), ("v1472K", 24), ("v1536K", 25), ("v1600K", 26), ("v1664K", 27), ("v1728K", 28), ("v1792K", 29), ("v1856K", 30), ("v1920K", 31), ("v1984K", 32), ("v2048K", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRRate.setStatus('mandatory')
nvCFRMREIAtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v3wire", 1), ("vx21bis", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMREIAtype.setStatus('mandatory')
nvCFRMRClkmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insync", 1), ("exsync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRClkmode.setStatus('mandatory')
nvCFRMRDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRDebounce.setStatus('mandatory')
nvCFRMREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMREnable.setStatus('mandatory')
nvSFRMRTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 24), )
if mibBuilder.loadTexts: nvSFRMRTable.setStatus('mandatory')
nvSFRMREntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSFRMRSlotIndex"), (0, "Telematics-Nevada-MIB", "nvSFRMRPortIndex"))
if mibBuilder.loadTexts: nvSFRMREntry.setStatus('mandatory')
nvSFRMRSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRSlotIndex.setStatus('mandatory')
nvSFRMRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRPortIndex.setStatus('mandatory')
nvSFRMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRName.setStatus('mandatory')
nvSFRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("absent", 1), ("dead", 2), ("broken", 3), ("async", 4), ("sync", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRMode.setStatus('mandatory')
nvSFRMRState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("free", 1), ("down", 2), ("setup", 3), ("up", 4), ("test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRState.setStatus('mandatory')
nvSFRMRRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("undef", 1), ("v64K", 2), ("v128K", 3), ("v192K", 4), ("v256K", 5), ("v320K", 6), ("v384K", 7), ("v448K", 8), ("v512K", 9), ("v576K", 10), ("v640K", 11), ("v704K", 12), ("v768K", 13), ("v832K", 14), ("v896K", 15), ("v960K", 16), ("v1024K", 17), ("v1088K", 18), ("v1152K", 19), ("v1216K", 20), ("v1280K", 21), ("v1344K", 22), ("v1408K", 23), ("v1472K", 24), ("v1536K", 25), ("v1600K", 26), ("v1664K", 27), ("v1728K", 28), ("v1792K", 29), ("v1856K", 30), ("v1920K", 31), ("v1984K", 32), ("v2048K", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRate.setStatus('mandatory')
nvSFRMRCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRCid.setStatus('mandatory')
nvSFRMRRxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxoff.setStatus('mandatory')
nvSFRMRTxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRTxoff.setStatus('mandatory')
nvSFRMRNrxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRNrxoff.setStatus('mandatory')
nvSFRMRNtxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRNtxoff.setStatus('mandatory')
nvSFRMRLostfrms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRLostfrms.setStatus('mandatory')
nvSFRMRFerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRFerrs.setStatus('mandatory')
nvSFRMRPerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRPerrs.setStatus('mandatory')
nvSFRMRRxovrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxovrs.setStatus('mandatory')
nvSFRMRCrcerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRCrcerrs.setStatus('mandatory')
nvSFRMRRxaborts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxaborts.setStatus('mandatory')
nvSFRMRDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRDtreset.setStatus('mandatory')
nvSlotstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 25))
nvSlotstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatMaxRec.setStatus('mandatory')
nvSlotstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatNumRec.setStatus('mandatory')
nvSlotstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3), )
if mibBuilder.loadTexts: nvSlotstatTable.setStatus('mandatory')
nvSlotstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSlotstatIndex"))
if mibBuilder.loadTexts: nvSlotstatEntry.setStatus('mandatory')
nvSlotstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatIndex.setStatus('mandatory')
nvSlotstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatName.setStatus('mandatory')
nvSlotstatCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("empty", 1), ("dliE1", 2), ("dliT1", 3), ("framer", 4), ("dsp", 5), ("phost", 6), ("qpsPower", 7), ("framer2", 8), ("qDE1", 9), ("qDT1", 10), ("oDLI", 11), ("fRMR", 12), ("ps", 13), ("none", 51), ("pHOSTIO", 52), ("fRMRIO", 53), ("e1IO", 55), ("t1IO", 56), ("pOWERIO", 57), ("v11EXT", 58), ("v11INT", 59), ("v35", 60), ("v24V35", 61), ("v24", 62), ("qDE1IO", 63), ("qDT1IO", 64), ("oDIO", 65), ("pEM", 66), ("pHIOM", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCardType.setStatus('mandatory')
nvSlotstatIotype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("empty", 1), ("none", 51), ("phostIo", 52), ("frmrIo", 53), ("e1Io", 54), ("t1Io", 56), ("powerIo", 57), ("v11ext", 58), ("v11int", 59), ("v35", 60), ("v24v35", 61), ("v24", 62), ("qDE1IO", 63), ("qDT1IO", 64), ("oDIO", 65), ("pEM", 66), ("pHIOM", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatIotype.setStatus('mandatory')
nvSlotstatCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notapp", 1), ("p5-100", 2), ("i960JF", 3), ("adsp2181", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCpu.setStatus('mandatory')
nvSlotstatRam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatRam.setStatus('mandatory')
nvSlotstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 1), ("failure", 2), ("notPowered", 3), ("notapplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatStatus.setStatus('mandatory')
nvSlotstatCardid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCardid.setStatus('mandatory')
nvSlotstatHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatHwRevision.setStatus('mandatory')
nvSlotstatCatPartnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCatPartnum.setStatus('mandatory')
nvSlotstatSrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatSrNumber.setStatus('mandatory')
nvSlotstatProdChkDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatProdChkDate.setStatus('mandatory')
nvCDSPTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 26), )
if mibBuilder.loadTexts: nvCDSPTable.setStatus('mandatory')
nvCDSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCDSPSlotIndex"), (0, "Telematics-Nevada-MIB", "nvCDSPPortIndex"))
if mibBuilder.loadTexts: nvCDSPEntry.setStatus('mandatory')
nvCDSPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPSlotIndex.setStatus('mandatory')
nvCDSPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPPortIndex.setStatus('mandatory')
nvCDSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPName.setStatus('mandatory')
nvCDSPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("yes", 2), ("slowno", 3), ("fastno", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPEnable.setStatus('mandatory')
nvCDSPNumfaicon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPNumfaicon.setStatus('mandatory')
nvCDSPNumload = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPNumload.setStatus('mandatory')
nvSDSPTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 27), )
if mibBuilder.loadTexts: nvSDSPTable.setStatus('mandatory')
nvSDSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSDSPSlotIndex"), (0, "Telematics-Nevada-MIB", "nvSDSPPortIndex"))
if mibBuilder.loadTexts: nvSDSPEntry.setStatus('mandatory')
nvSDSPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPSlotIndex.setStatus('mandatory')
nvSDSPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPPortIndex.setStatus('mandatory')
nvSDSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPName.setStatus('mandatory')
nvSDSPState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 2), ("busy", 3), ("dead", 4), ("asleep", 5), ("dwld", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPState.setStatus('mandatory')
nvSDSPNumfaicon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumfaicon.setStatus('mandatory')
nvSDSPNumload = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumload.setStatus('mandatory')
nvSDSPFailcaus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("healthy", 2), ("dwldFail", 3), ("portUpFail", 4), ("handshkeAbort", 5), ("handshkeTimeout", 6), ("llHandAbort", 7), ("llHandTimeout", 8), ("llHandHsAbo", 9), ("cmdTimeout", 10), ("monRegTimeout", 11), ("clrDownTimeout", 12), ("chCreErrNoReload", 13), ("chCreErrReload", 14), ("userDown", 15), ("handModify", 16), ("userReset", 17), ("notUsable", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPFailcaus.setStatus('mandatory')
nvSDSPNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumcalls.setStatus('mandatory')
nvSDSPNumfnegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumfnegs.setStatus('mandatory')
nvSDSPDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPDtreset.setStatus('mandatory')
nvSDSPNumIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumIncom.setStatus('mandatory')
nvSDSPNumOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumOutgo.setStatus('mandatory')
nvSDSPNumIfailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumIfailneg.setStatus('mandatory')
nvSDSPNumOfailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumOfailneg.setStatus('mandatory')
nvSDSPEvent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent1.setStatus('mandatory')
nvSDSPEvent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent2.setStatus('mandatory')
nvSDSPEvent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent3.setStatus('mandatory')
nvSDSPEvent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent4.setStatus('mandatory')
nvSDSPEvent5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent5.setStatus('mandatory')
nvSDSPEvent6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent6.setStatus('mandatory')
nvSDSPEvent7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent7.setStatus('mandatory')
nvSDSPEvent8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent8.setStatus('mandatory')
nvSDSPEvent9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent9.setStatus('mandatory')
nvSDSPEvent10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent10.setStatus('mandatory')
nvSDSPEvent11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent11.setStatus('mandatory')
nvSDSPEvent12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent12.setStatus('mandatory')
nvCroute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 28))
nvCrouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteMaxRec.setStatus('mandatory')
nvCrouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteNumRec.setStatus('mandatory')
nvCrouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3), )
if mibBuilder.loadTexts: nvCrouteTable.setStatus('mandatory')
nvCrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrouteIndex"))
if mibBuilder.loadTexts: nvCrouteEntry.setStatus('mandatory')
nvCrouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteIndex.setStatus('mandatory')
nvCrouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteAddr.setStatus('mandatory')
nvCrouteRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRouting.setStatus('mandatory')
nvCrouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("switched", 2), ("pernament", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteType.setStatus('mandatory')
nvCrouteVol1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711a", 3), ("g711mu", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteVol1prot.setStatus('mandatory')
nvCrouteVol1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcmode", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteVol1mode.setStatus('mandatory')
nvCrouteBw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteBw.setStatus('mandatory')
nvCrouteRcscp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRcscp1.setStatus('mandatory')
nvCrouteRcscp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRcscp2.setStatus('mandatory')
nvCrouteDialmapid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteDialmapid.setStatus('mandatory')
nvCrouteReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteReserve1.setStatus('obsolete')
nvCrouteDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteDirection.setStatus('mandatory')
nvCrouteChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteChoice.setStatus('mandatory')
nvCrouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteStatus.setStatus('mandatory')
nvCrcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 29))
nvCrcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatMaxRec.setStatus('mandatory')
nvCrcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatNumRec.setStatus('mandatory')
nvCrcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3), )
if mibBuilder.loadTexts: nvCrcstatTable.setStatus('mandatory')
nvCrcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrcstatIndex"))
if mibBuilder.loadTexts: nvCrcstatEntry.setStatus('mandatory')
nvCrcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatIndex.setStatus('mandatory')
nvCrcstatCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCid.setStatus('mandatory')
nvCrcstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pending", 1), ("connecting", 2), ("connected", 3), ("clearing", 4), ("hung", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatState.setStatus('mandatory')
nvCrcstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallednum.setStatus('mandatory')
nvCrcstatBw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatBw.setStatus('mandatory')
nvCrcstatRcsc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc0.setStatus('mandatory')
nvCrcstatDevice0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice0.setStatus('mandatory')
nvCrcstatRcsc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc1.setStatus('mandatory')
nvCrcstatDevice1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice1.setStatus('mandatory')
nvCrcstatRcsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc2.setStatus('mandatory')
nvCrcstatDevice2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice2.setStatus('mandatory')
nvCrcstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatReserve1.setStatus('obsolete')
nvCrcstatReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatReserve2.setStatus('obsolete')
nvCrcstatCallngnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallngnum.setStatus('mandatory')
nvCrcstatCalledsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCalledsub.setStatus('mandatory')
nvCrcstatCallngsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallngsub.setStatus('mandatory')
nvCrcstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711A", 3), ("g711MU", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatL1prot.setStatus('mandatory')
nvCrcstatL1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcmode", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatL1mode.setStatus('mandatory')
nvCrcstatCroute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCroute.setStatus('mandatory')
nvCrcstatRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRouting.setStatus('mandatory')
nvCrcstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDirection.setStatus('mandatory')
nvCrfstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 30))
nvCrfstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatMaxRec.setStatus('mandatory')
nvCrfstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatNumRec.setStatus('mandatory')
nvCrfstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3), )
if mibBuilder.loadTexts: nvCrfstatTable.setStatus('mandatory')
nvCrfstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrfstatIndex"))
if mibBuilder.loadTexts: nvCrfstatEntry.setStatus('mandatory')
nvCrfstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatIndex.setStatus('mandatory')
nvCrfstatCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCid.setStatus('mandatory')
nvCrfstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallednum.setStatus('mandatory')
nvCrfstatCallngnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallngnum.setStatus('mandatory')
nvCrfstatCalledsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCalledsub.setStatus('mandatory')
nvCrfstatCallngsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallngsub.setStatus('mandatory')
nvCrfstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711A", 3), ("g711MU", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatL1prot.setStatus('mandatory')
nvCrfstatL1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcprot", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatL1mode.setStatus('mandatory')
nvCrfstatCroute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCroute.setStatus('mandatory')
nvCrfstatRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRouting.setStatus('mandatory')
nvCrfstatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatAddr.setStatus('mandatory')
nvCrfstatCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("crfNoRoute", 2), ("crfTsAllocFail", 3), ("crfRcscAllocFail", 4), ("crfConAbort", 5), ("crfConFail", 6), ("dvNoGroup", 7), ("dvBwRej", 8), ("dvThrshRej", 9), ("dvUnavail", 10), ("frBwUnavail", 11), ("portNoConn", 12), ("scsaStuck", 13), ("psReject", 14), ("psChCrErr", 15), ("dvNoPool", 16), ("dvBadClass", 17), ("dspHwUnavail", 18), ("dspBadResrc", 19), ("dspNoSetupI", 20), ("dspRoRoNone", 21), ("dspChCRspTO", 22), ("dspChCRNoHw", 23), ("dspChCrSyEr", 24), ("dspChCrBitF", 25), ("dspChCrDwlF", 26), ("dspMsgNotPS", 27), ("r2NoDspTs", 28), ("r2ChCrErr", 29), ("srcAborted", 30), ("crfRsrcBusy", 31), ("dspmFullLts", 32), ("sigChCrErr", 33), ("busy", 34), ("noAnswer", 35), ("tsUnavail", 36), ("noDialtone", 37), ("causeUnspecified", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCause.setStatus('mandatory')
nvCrfstatRcsc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc0.setStatus('mandatory')
nvCrfstatRcsc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc1.setStatus('mandatory')
nvCrfstatRcsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc2.setStatus('mandatory')
nvCrfstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatReserve1.setStatus('obsolete')
nvCrfstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatDirection.setStatus('mandatory')
nvRrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 31))
nvRrstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatMaxRec.setStatus('mandatory')
nvRrstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumRec.setStatus('mandatory')
nvRrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3), )
if mibBuilder.loadTexts: nvRrstatTable.setStatus('mandatory')
nvRrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRrstatIndex"))
if mibBuilder.loadTexts: nvRrstatEntry.setStatus('mandatory')
nvRrstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatIndex.setStatus('mandatory')
nvRrstatPoolname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatPoolname.setStatus('mandatory')
nvRrstatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("protocolStack", 2), ("digitalModem", 3), ("priCall", 4), ("priDc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatClass.setStatus('mandatory')
nvRrstatNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumbers.setStatus('mandatory')
nvRrstatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatConns.setStatus('mandatory')
nvRrstatMaxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatMaxcalls.setStatus('mandatory')
nvRrstatNumIcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumIcalls.setStatus('mandatory')
nvRrstatNumOcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumOcalls.setStatus('mandatory')
nvRrstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumcalls.setStatus('mandatory')
nvRrstatAvgtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatAvgtime.setStatus('mandatory')
nvRrstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatDtreset.setStatus('mandatory')
nvModemprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 32))
nvModemprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofMaxRec.setStatus('mandatory')
nvModemprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofNumRec.setStatus('mandatory')
nvModemprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3), )
if mibBuilder.loadTexts: nvModemprofTable.setStatus('mandatory')
nvModemprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemprofIndex"))
if mibBuilder.loadTexts: nvModemprofEntry.setStatus('mandatory')
nvModemprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofIndex.setStatus('mandatory')
nvModemprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofName.setStatus('mandatory')
nvModemprofRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofRsrcpool.setStatus('mandatory')
nvModemprofDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofDspname.setStatus('mandatory')
nvModemprofType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("modauto", 1), ("v34", 2), ("v32bis", 3), ("v32", 4), ("v23t75r12", 5), ("v23t12r75", 6), ("v22bis", 7), ("v22", 8), ("v21", 9), ("b212a", 10), ("b103", 11), ("pautob", 12), ("pautoc", 13), ("v34bis", 14), ("vpcm", 15), ("v21rev", 16), ("v110mod", 21), ("v110b600", 22), ("v110b1200", 23), ("v110b2400", 24), ("v110b4800", 25), ("v110b7200", 26), ("v110b9600", 27), ("v110b12000", 28), ("v110b14400", 29), ("v110b19200", 30), ("v110b48000", 31), ("v110b56000", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofType.setStatus('mandatory')
nvModemprofEc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("v42ec", 2), ("mNPec", 3), ("eitherec", 4), ("autoec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofEc.setStatus('mandatory')
nvModemprofDc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofDc.setStatus('mandatory')
nvModemprofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 8))).clone(namedValues=NamedValues(("sync", 3), ("async", 4), ("auto", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofMode.setStatus('mandatory')
nvModemprofCmpdtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("mulaw", 2), ("alaw", 3), ("nocmpdt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofCmpdtype.setStatus('mandatory')
nvModemprofTxlvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofTxlvl.setStatus('mandatory')
nvModemprofRxthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofRxthresh.setStatus('mandatory')
nvModemprofAnston = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofAnston.setStatus('mandatory')
nvModemprofAnstondur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofAnstondur.setStatus('mandatory')
nvModemprofBildly = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofBildly.setStatus('mandatory')
nvModemprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofStatus.setStatus('mandatory')
nvModemprofFalbckchr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofFalbckchr.setStatus('mandatory')
nvIfStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 33))
nvIfStackInfoNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoNumRec.setStatus('mandatory')
nvIfStackInfoTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2), )
if mibBuilder.loadTexts: nvIfStackInfoTable.setStatus('mandatory')
nvIfStackInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIfStackInfoHigherLI"), (0, "Telematics-Nevada-MIB", "nvIfStackInfoLowerLI"))
if mibBuilder.loadTexts: nvIfStackInfoEntry.setStatus('mandatory')
nvIfStackInfoHigherLI = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoHigherLI.setStatus('mandatory')
nvIfStackInfoLowerLI = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoLowerLI.setStatus('mandatory')
nvIfStackInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoStatus.setStatus('mandatory')
nvIfStackInfoRid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoRid.setStatus('mandatory')
nvDialmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 34))
nvDialmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapMaxRec.setStatus('mandatory')
nvDialmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapNumRec.setStatus('mandatory')
nvDialmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3), )
if mibBuilder.loadTexts: nvDialmapTable.setStatus('mandatory')
nvDialmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDialmapIndex"))
if mibBuilder.loadTexts: nvDialmapEntry.setStatus('mandatory')
nvDialmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapIndex.setStatus('mandatory')
nvDialmapNumdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapNumdelete.setStatus('mandatory')
nvDialmapAddprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapAddprefix.setStatus('mandatory')
nvDialmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapStatus.setStatus('mandatory')
nvDspmalloc = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 35))
nvDspmallocMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocMaxRec.setStatus('mandatory')
nvDspmallocNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocNumRec.setStatus('mandatory')
nvDspmallocTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3), )
if mibBuilder.loadTexts: nvDspmallocTable.setStatus('mandatory')
nvDspmallocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDspmallocIndex"))
if mibBuilder.loadTexts: nvDspmallocEntry.setStatus('mandatory')
nvDspmallocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocIndex.setStatus('mandatory')
nvDspmallocDsptype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("kfModem", 2), ("v90Modem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocDsptype.setStatus('mandatory')
nvDspmallocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDspmallocWeight.setStatus('mandatory')
nvDspmallocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDspmallocStatus.setStatus('mandatory')
nvDialstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 36))
nvDialstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatMaxRec.setStatus('mandatory')
nvDialstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNumRec.setStatus('mandatory')
nvDialstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3), )
if mibBuilder.loadTexts: nvDialstatTable.setStatus('mandatory')
nvDialstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDialstatIndex"))
if mibBuilder.loadTexts: nvDialstatEntry.setStatus('mandatory')
nvDialstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatIndex.setStatus('mandatory')
nvDialstatRcscpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatRcscpool.setStatus('mandatory')
nvDialstatNcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcurrent.setStatus('mandatory')
nvDialstatNcalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcalling.setStatus('mandatory')
nvDialstatTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("busy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatTrace.setStatus('mandatory')
nvDialstatLastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastAddr.setStatus('mandatory')
nvDialstatLastCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastCause.setStatus('mandatory')
nvDialstatLastDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastDiag.setStatus('mandatory')
nvDialstatLastResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastResponse.setStatus('mandatory')
nvDialstatNdialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNdialout.setStatus('mandatory')
nvDialstatNattempt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNattempt.setStatus('mandatory')
nvDialstatNsucceed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNsucceed.setStatus('mandatory')
nvDialstatNfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNfail.setStatus('mandatory')
nvDialstatNcircfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcircfail.setStatus('mandatory')
nvDialstatNcmderror = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcmderror.setStatus('mandatory')
nvDialstatNdialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNdialtone.setStatus('mandatory')
nvDialstatNbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNbusy.setStatus('mandatory')
nvDialstatNnoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoRoute.setStatus('mandatory')
nvDialstatNnoModem = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoModem.setStatus('mandatory')
nvDialstatNnoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoInput.setStatus('mandatory')
nvDialstatNinvnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNinvnum.setStatus('mandatory')
nvDialstatNnoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoAnswer.setStatus('mandatory')
nvDialstatNmnegfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNmnegfail.setStatus('mandatory')
nvDialstatNconnfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNconnfail.setStatus('mandatory')
nvDialstatNmiscfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNmiscfail.setStatus('mandatory')
nvDialstatMaxcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatMaxcall.setStatus('mandatory')
nvDialstatAdSucctim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatAdSucctim.setStatus('mandatory')
nvDialstatAdFailtim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatAdFailtim.setStatus('mandatory')
nvDialstatNabredial = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNabredial.setStatus('mandatory')
nvFrmrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 37), )
if mibBuilder.loadTexts: nvFrmrstatTable.setStatus('mandatory')
nvFrmrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrmrstatSlotIndex"))
if mibBuilder.loadTexts: nvFrmrstatEntry.setStatus('mandatory')
nvFrmrstatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatSlotIndex.setStatus('mandatory')
nvFrmrstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("free", 1), ("dead", 2), ("dying", 3), ("up", 4), ("download", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatState.setStatus('mandatory')
nvFrmrstatFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("none", 1), ("softfail", 2), ("hardfail", 3), ("download", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatFailCause.setStatus('mandatory')
nvFrmrstatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatResetTime.setStatus('mandatory')
nvFrmrstatNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumFailures.setStatus('mandatory')
nvFrmrstatNumReloads = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumReloads.setStatus('mandatory')
nvFrmrstatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatTotalCalls.setStatus('mandatory')
nvFrmrstatCallsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatCallsPresent.setStatus('mandatory')
nvFrmrstatNumPortUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumPortUp.setStatus('mandatory')
nvFrmrstatNumFailUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumFailUp.setStatus('mandatory')
nvFrmrstatNumTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumTxFrames.setStatus('mandatory')
nvFrmrstatNumRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumRxFrames.setStatus('mandatory')
nvFrmrstatNumTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumTxBytes.setStatus('mandatory')
nvFrmrstatNumRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumRxBytes.setStatus('mandatory')
nvNas = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 2, 1))
nvFrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 1))
nvFrstatCurtime = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatCurtime.setStatus('mandatory')
nvFrstatTxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatTxcurfps.setStatus('mandatory')
nvFrstatTxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatTxavgfps.setStatus('mandatory')
nvFrstatRxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatRxcurfps.setStatus('mandatory')
nvFrstatRxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatRxavgfps.setStatus('mandatory')
nvFrstatMtxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMtxcurfps.setStatus('mandatory')
nvFrstatMtxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMtxavgfps.setStatus('mandatory')
nvFrstatMrxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMrxcurfps.setStatus('mandatory')
nvFrstatMrxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMrxavgfps.setStatus('mandatory')
nvFrstatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatDtreset.setStatus('mandatory')
nvFristat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 2))
nvFristatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatMaxRec.setStatus('mandatory')
nvFristatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatNumRec.setStatus('mandatory')
nvFristatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3), )
if mibBuilder.loadTexts: nvFristatTable.setStatus('mandatory')
nvFristatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFristatIndex"))
if mibBuilder.loadTexts: nvFristatEntry.setStatus('mandatory')
nvFristatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatIndex.setStatus('mandatory')
nvFristatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatPort.setStatus('mandatory')
nvFristatOperstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconnected", 1), ("badFriConfig", 2), ("idle", 3), ("setup", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatOperstate.setStatus('mandatory')
nvFristatLmistate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("normal", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatLmistate.setStatus('mandatory')
nvFristatCurseq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatCurseq.setStatus('mandatory')
nvFristatRcvseq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRcvseq.setStatus('mandatory')
nvFristatErrorcounts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatErrorcounts.setStatus('mandatory')
nvFristatRxexceszes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRxexceszes.setStatus('mandatory')
nvFristatRxbaddlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRxbaddlcis.setStatus('mandatory')
nvFristatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatDtreset.setStatus('mandatory')
nvFrvcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 3))
nvFrvcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatMaxRec.setStatus('mandatory')
nvFrvcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatNumRec.setStatus('mandatory')
nvFrvcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3), )
if mibBuilder.loadTexts: nvFrvcstatTable.setStatus('mandatory')
nvFrvcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrvcstatIndex"))
if mibBuilder.loadTexts: nvFrvcstatEntry.setStatus('mandatory')
nvFrvcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatIndex.setStatus('mandatory')
nvFrvcstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatService.setStatus('mandatory')
nvFrvcstatServiceid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatServiceid.setStatus('mandatory')
nvFrvcstatFri = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatFri.setStatus('mandatory')
nvFrvcstatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDlci.setStatus('mandatory')
nvFrvcstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("free", 1), ("badPvcConfig", 2), ("disabled", 3), ("badDLCI", 4), ("operDisabled", 5), ("friFull", 6), ("noFri", 7), ("friDown", 8), ("friError", 9), ("pvcInit", 10), ("pvcDown", 11), ("pvcUp", 12), ("pvcInactive", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatStatus.setStatus('mandatory')
nvFrvcstatTxcongstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatTxcongstatus.setStatus('mandatory')
nvFrvcstatRxbufdepletion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatRxbufdepletion.setStatus('mandatory')
nvFrvcstatOutputrate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatOutputrate.setStatus('mandatory')
nvFrvcstatInputrate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatInputrate.setStatus('mandatory')
nvFrvcstatExcessdatas = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatExcessdatas.setStatus('mandatory')
nvFrvcstatTxframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatTxframes.setStatus('mandatory')
nvFrvcstatRxframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatRxframes.setStatus('mandatory')
nvFrvcstatDrprxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDrprxs.setStatus('mandatory')
nvFrvcstatDrprxdes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDrprxdes.setStatus('mandatory')
nvFrvcstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDtreset.setStatus('mandatory')
nvFriconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 4))
nvFriconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfMaxRec.setStatus('mandatory')
nvFriconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfNumRec.setStatus('mandatory')
nvFriconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3), )
if mibBuilder.loadTexts: nvFriconfTable.setStatus('mandatory')
nvFriconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFriconfIndex"))
if mibBuilder.loadTexts: nvFriconfEntry.setStatus('mandatory')
nvFriconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfIndex.setStatus('mandatory')
nvFriconfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfPort.setStatus('mandatory')
nvFriconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfRsrcpool.setStatus('mandatory')
nvFriconfMaxfrmsz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfMaxfrmsz.setStatus('mandatory')
nvFriconfLmitype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nolmi", 1), ("go4", 2), ("ansi", 3), ("itu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfLmitype.setStatus('mandatory')
nvFriconfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("net", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfMode.setStatus('mandatory')
nvFriconfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfDlci.setStatus('mandatory')
nvFriconfnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT1.setStatus('mandatory')
nvFriconfnT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT2.setStatus('mandatory')
nvFriconfnT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT3.setStatus('mandatory')
nvFriconfnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN1.setStatus('mandatory')
nvFriconfnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN2.setStatus('mandatory')
nvFriconfnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN3.setStatus('mandatory')
nvFriconfnN4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfnN4.setStatus('mandatory')
nvFriconfnP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnP1.setStatus('mandatory')
nvFriconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfStatus.setStatus('mandatory')
nvFrvcconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 5))
nvFrvcconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfMaxRec.setStatus('mandatory')
nvFrvcconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfNumRec.setStatus('mandatory')
nvFrvcconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3), )
if mibBuilder.loadTexts: nvFrvcconfTable.setStatus('mandatory')
nvFrvcconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrvcconfIndex"))
if mibBuilder.loadTexts: nvFrvcconfEntry.setStatus('mandatory')
nvFrvcconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfIndex.setStatus('mandatory')
nvFrvcconfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfDlci.setStatus('mandatory')
nvFrvcconfFri = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfFri.setStatus('mandatory')
nvFrvcconfMappedpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfMappedpvc.setStatus('mandatory')
nvFrvcconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfEnable.setStatus('mandatory')
nvFrvcconfT = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfT.setStatus('mandatory')
nvFrvcconfBc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfBc.setStatus('mandatory')
nvFrvcconfBe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfBe.setStatus('mandatory')
nvFrvcconfN = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfN.setStatus('mandatory')
nvFrvcconfRxbufspac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxbufspac.setStatus('mandatory')
nvFrvcconfRxcgthres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxcgthres.setStatus('mandatory')
nvFrvcconfRxcgclear = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxcgclear.setStatus('mandatory')
nvFrvcconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfStatus.setStatus('mandatory')
nvIticstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 1))
nvIticstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxRec.setStatus('mandatory')
nvIticstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumRec.setStatus('mandatory')
nvIticstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3), )
if mibBuilder.loadTexts: nvIticstatTable.setStatus('mandatory')
nvIticstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticstatIndex"))
if mibBuilder.loadTexts: nvIticstatEntry.setStatus('mandatory')
nvIticstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatIndex.setStatus('mandatory')
nvIticstatClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatClassname.setStatus('mandatory')
nvIticstatNnccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNnccs.setStatus('mandatory')
nvIticstatNnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNnfails.setStatus('mandatory')
nvIticstatNpassfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNpassfails.setStatus('mandatory')
nvIticstatCurcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatCurcalls.setStatus('mandatory')
nvIticstatAvgtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatAvgtime.setStatus('mandatory')
nvIticstatMaxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxcalls.setStatus('mandatory')
nvIticstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumcalls.setStatus('mandatory')
nvIticstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatDtreset.setStatus('mandatory')
nvIticstatTcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTcalls.setStatus('mandatory')
nvIticstatN300bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN300bd.setStatus('mandatory')
nvIticstatN1200bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN1200bd.setStatus('mandatory')
nvIticstatN2400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN2400bd.setStatus('mandatory')
nvIticstatN9600bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN9600bd.setStatus('mandatory')
nvIticstatN14400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN14400bd.setStatus('mandatory')
nvIticstatN28800bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN28800bd.setStatus('mandatory')
nvIticstatFailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatFailneg.setStatus('mandatory')
nvIticstatTrmdscdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdscdat.setStatus('mandatory')
nvIticstatLoscarsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscarsu.setStatus('mandatory')
nvIticstatLoscarcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscarcip.setStatus('mandatory')
nvIticstatLoscardat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscardat.setStatus('mandatory')
nvIticstatTrmdscsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdscsu.setStatus('mandatory')
nvIticstatTrmdsccip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdsccip.setStatus('mandatory')
nvIticstatNcurIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNcurIncom.setStatus('mandatory')
nvIticstatNcurOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNcurOutgo.setStatus('mandatory')
nvIticstatMaxIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxIncom.setStatus('mandatory')
nvIticstatMaxOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxOutgo.setStatus('mandatory')
nvIticstatNumIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumIncom.setStatus('mandatory')
nvIticstatNumOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumOutgo.setStatus('mandatory')
nvIticstatNncr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNncr.setStatus('mandatory')
nvItipstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 2))
nvItipstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatMaxRec.setStatus('mandatory')
nvItipstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNumRec.setStatus('mandatory')
nvItipstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3), )
if mibBuilder.loadTexts: nvItipstatTable.setStatus('mandatory')
nvItipstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItipstatIndex"))
if mibBuilder.loadTexts: nvItipstatEntry.setStatus('mandatory')
nvItipstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatIndex.setStatus('mandatory')
nvItipstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPortname.setStatus('mandatory')
nvItipstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatReserve1.setStatus('obsolete')
nvItipstatAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatAcct.setStatus('mandatory')
nvItipstatClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatClassname.setStatus('mandatory')
nvItipstatSrcadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatSrcadr.setStatus('mandatory')
nvItipstatDstadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatDstadr.setStatus('mandatory')
nvItipstatTxPsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("pktUndefined", 1), ("pkt16", 5), ("pkt32", 6), ("pkt64", 7), ("pkt128", 8), ("pkt256", 9), ("pkt512", 10), ("pkt1024", 11), ("pkt2048", 12), ("pkt4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxPsze.setStatus('mandatory')
nvItipstatRxPsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("pktUndefined", 1), ("pkt16", 5), ("pkt32", 6), ("pkt64", 7), ("pkt128", 8), ("pkt256", 9), ("pkt512", 10), ("pkt1024", 11), ("pkt2048", 12), ("pkt4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxPsze.setStatus('mandatory')
nvItipstatTxWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxWsze.setStatus('mandatory')
nvItipstatRxWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxWsze.setStatus('mandatory')
nvItipstatTxTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tcUndefined", 1), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxTput.setStatus('mandatory')
nvItipstatRxTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tcUndefined", 1), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxTput.setStatus('mandatory')
nvItipstatCugtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCug", 1), ("cug", 2), ("cugWithOutgoingAccess", 3), ("bilateralCug", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatCugtype.setStatus('mandatory')
nvItipstatCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatCug.setStatus('mandatory')
nvItipstatRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRpoa.setStatus('mandatory')
nvItipstatRevf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRevf.setStatus('mandatory')
nvItipstatPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPrio.setStatus('mandatory')
nvItipstatFast = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFastSelect", 1), ("fastSelect", 2), ("fastSelectRestricted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatFast.setStatus('mandatory')
nvItipstatPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPvc.setStatus('mandatory')
nvItipstatNdcode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNdcode.setStatus('mandatory')
nvItipstatNddiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNddiag.setStatus('mandatory')
nvItipstatNdorigin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNdorigin.setStatus('mandatory')
nvItipstatNrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrcode.setStatus('mandatory')
nvItipstatNrdiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrdiag.setStatus('mandatory')
nvItipstatOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatOrg.setStatus('mandatory')
nvItipstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("idle", 2), ("awaitingCommand", 3), ("awaitingSelection", 4), ("awaitingUserid", 5), ("awaitingPassword", 6), ("dataTransfer", 8), ("invitationToClear", 9), ("padCommandAfterEscape", 10), ("padCommand", 11), ("awaitingTerminalConnectResponse", 12), ("awaitingFastSelectUserData", 13), ("loopback", 14), ("awaitingDiscBeforeCallBack", 15), ("awaitingCallBack", 16), ("awaitingDialoutUserInput", 17), ("unused2", 18), ("unused3", 19), ("unused4", 20), ("unused5", 21), ("loginServicesControlMode", 22), ("callReselection", 23), ("scanLoginString", 24), ("waitOutputDoneBeforeIdel", 25), ("dlspcWaitCallClearFromDUI", 26), ("escFromConnInProgress", 27), ("waitRadiusResponseToMsg", 28), ("waitUserInputForRadChallenge", 29), ("connectingWaitForModemTrain", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatState.setStatus('mandatory')
nvItipstatUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatUserdata.setStatus('mandatory')
nvItipstatUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatUsername.setStatus('mandatory')
nvItipstatX28type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("undefined", 1), ("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatX28type.setStatus('mandatory')
nvItipstatX3type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("undefined", 1), ("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatX3type.setStatus('mandatory')
nvItipstatReservet = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatReservet.setStatus('mandatory')
nvItipstatNtccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtccs.setStatus('mandatory')
nvItipstatNnccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNnccs.setStatus('mandatory')
nvItipstatNnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNnfails.setStatus('mandatory')
nvItipstatNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtxpaks.setStatus('mandatory')
nvItipstatNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrxpaks.setStatus('mandatory')
nvItipstatNtxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtxresets.setStatus('mandatory')
nvItipstatNrxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrxresets.setStatus('mandatory')
nvItipstatNctxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNctxpaks.setStatus('mandatory')
nvItipstatNcrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNcrxpaks.setStatus('mandatory')
nvItipstatNctxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNctxresets.setStatus('mandatory')
nvItipstatNcrxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNcrxresets.setStatus('mandatory')
nvItipstatNinputs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNinputs.setStatus('mandatory')
nvItipstatNoutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNoutputs.setStatus('mandatory')
nvItipstatParam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatParam.setStatus('mandatory')
nvItipstatPreparam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPreparam.setStatus('mandatory')
nvItipstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatDtreset.setStatus('mandatory')
nvItipstatId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatId.setStatus('mandatory')
nvItipstatNtconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtconn.setStatus('mandatory')
nvItipstatNtdc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtdc.setStatus('mandatory')
nvItipstatNncr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNncr.setStatus('mandatory')
nvItipstatNtimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtimeout.setStatus('mandatory')
nvItiustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 5))
nvItiustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatMaxRec.setStatus('mandatory')
nvItiustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNumRec.setStatus('mandatory')
nvItiustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3), )
if mibBuilder.loadTexts: nvItiustatTable.setStatus('mandatory')
nvItiustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiustatIndex"))
if mibBuilder.loadTexts: nvItiustatEntry.setStatus('mandatory')
nvItiustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatIndex.setStatus('mandatory')
nvItiustatUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatUsername.setStatus('mandatory')
nvItiustatNcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNcalls.setStatus('mandatory')
nvItiustatNpassfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNpassfails.setStatus('mandatory')
nvItiustatNcallbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNcallbacks.setStatus('mandatory')
nvItiustatDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatDuration.setStatus('mandatory')
nvItiustatNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNtxpaks.setStatus('mandatory')
nvItiustatNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNrxpaks.setStatus('mandatory')
nvItiustatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatDtreset.setStatus('mandatory')
nvDlspcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 6))
nvDlspcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatMaxRec.setStatus('mandatory')
nvDlspcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNumRec.setStatus('mandatory')
nvDlspcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3), )
if mibBuilder.loadTexts: nvDlspcstatTable.setStatus('mandatory')
nvDlspcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlspcstatIndex"))
if mibBuilder.loadTexts: nvDlspcstatEntry.setStatus('mandatory')
nvDlspcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatIndex.setStatus('mandatory')
nvDlspcstatNports = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNports.setStatus('mandatory')
nvDlspcstatNidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNidle.setStatus('mandatory')
nvDuistat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 7))
nvDuistatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatMaxRec.setStatus('mandatory')
nvDuistatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNumRec.setStatus('mandatory')
nvDuistatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3), )
if mibBuilder.loadTexts: nvDuistatTable.setStatus('mandatory')
nvDuistatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDuistatIndex"))
if mibBuilder.loadTexts: nvDuistatEntry.setStatus('mandatory')
nvDuistatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatIndex.setStatus('mandatory')
nvDuistatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatType.setStatus('mandatory')
nvDuistatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNua.setStatus('mandatory')
nvDuistatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("calling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatState.setStatus('mandatory')
nvDuistatLink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLink.setStatus('mandatory')
nvDuistatLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLcn.setStatus('mandatory')
nvDuistatLastcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLastcause.setStatus('mandatory')
nvDuistatLastdiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLastdiag.setStatus('mandatory')
nvDuistatNmnxtcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNmnxtcall.setStatus('mandatory')
nvDuistatNretries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNretries.setStatus('mandatory')
nvDuistatNrejects = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNrejects.setStatus('mandatory')
nvDuistatNaccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNaccepts.setStatus('mandatory')
nvDuistatNinvmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNinvmsgs.setStatus('mandatory')
nvDuistatNunxmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNunxmsgs.setStatus('mandatory')
nvDuistatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatDtreset.setStatus('mandatory')
nvItiport = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 16))
nvItiportMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportMaxRec.setStatus('mandatory')
nvItiportNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportNumRec.setStatus('mandatory')
nvItiportTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3), )
if mibBuilder.loadTexts: nvItiportTable.setStatus('mandatory')
nvItiportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiportIndex"))
if mibBuilder.loadTexts: nvItiportEntry.setStatus('mandatory')
nvItiportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportIndex.setStatus('mandatory')
nvItiportName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportName.setStatus('mandatory')
nvItiportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportEnable.setStatus('mandatory')
nvItiportIticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportIticlass.setStatus('mandatory')
nvItiportRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportRsrcpool.setStatus('mandatory')
nvItiportPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportPortname.setStatus('mandatory')
nvItiportTimer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer1.setStatus('mandatory')
nvItiportMinbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMinbspace.setStatus('mandatory')
nvItiportMaxbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMaxbspace.setStatus('mandatory')
nvItiportFclevel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportFclevel.setStatus('mandatory')
nvItiportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("m8N1", 1), ("m7E1", 2), ("m7O1", 3), ("m7M1", 4), ("m7S1", 5), ("m8G1", 7), ("mAP1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMode.setStatus('mandatory')
nvItiportTimer0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer0.setStatus('mandatory')
nvItiportTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer2.setStatus('mandatory')
nvDportstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 8))
nvDportstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatMaxRec.setStatus('mandatory')
nvDportstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatNumRec.setStatus('mandatory')
nvDportstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3), )
if mibBuilder.loadTexts: nvDportstatTable.setStatus('mandatory')
nvDportstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDportstatIndex"))
if mibBuilder.loadTexts: nvDportstatEntry.setStatus('mandatory')
nvDportstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIndex.setStatus('mandatory')
nvDportstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatPortname.setStatus('mandatory')
nvDportstatSetstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatSetstate.setStatus('mandatory')
nvDportstatIntfstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIntfstate.setStatus('mandatory')
nvDportstatChstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("connectedDuiHost", 2), ("connectingUserSelectedHost", 3), ("escapedFromConnectionInProgress", 4), ("connectedUserSelectedHost", 5), ("escapedDataState", 6), ("portDisabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatChstate.setStatus('mandatory')
nvDportstatDuihost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDuihost.setStatus('mandatory')
nvDportstatDuistatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDuistatus.setStatus('mandatory')
nvDportstatPorttype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("publicSwitched", 2), ("directConnect", 3), ("passwordProtectedDirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatPorttype.setStatus('mandatory')
nvDportstatCli = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatCli.setStatus('mandatory')
nvDportstatResetdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatResetdate.setStatus('mandatory')
nvDportstatUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatUptime.setStatus('mandatory')
nvDportstatDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDowntime.setStatus('mandatory')
nvDportstatSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatSessions.setStatus('mandatory')
nvDportstatIncalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIncalls.setStatus('mandatory')
nvDportstatOutcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatOutcalls.setStatus('mandatory')
nvDportstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDtreset.setStatus('mandatory')
nvIticlass = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 9))
nvIticlassMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassMaxRec.setStatus('mandatory')
nvIticlassNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassNumRec.setStatus('mandatory')
nvIticlassTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3), )
if mibBuilder.loadTexts: nvIticlassTable.setStatus('mandatory')
nvIticlassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticlassIndex"))
if mibBuilder.loadTexts: nvIticlassEntry.setStatus('mandatory')
nvIticlassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassIndex.setStatus('mandatory')
nvIticlassClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClassname.setStatus('mandatory')
nvIticlassAcctsigl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 2), ("demand", 3), ("on", 4), ("dmand1", 5), ("on1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassAcctsigl.setStatus('mandatory')
nvIticlassActonloss = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("ignore", 2), ("clear", 3), ("reset", 4), ("discon", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassActonloss.setStatus('mandatory')
nvIticlassBannerid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassBannerid.setStatus('mandatory')
nvIticlassBreaksgnl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassBreaksgnl.setStatus('mandatory')
nvIticlassCalmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("norm", 2), ("abrv", 3), ("direct", 4), ("pvc", 5), ("teleneta", 6), ("special", 7), ("telenb", 8), ("telenc", 9), ("login", 10), ("pad", 11), ("telkom", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCalmethod.setStatus('mandatory')
nvIticlassClasmsgid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClasmsgid.setStatus('mandatory')
nvIticlassClaspaswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClaspaswd.setStatus('mandatory')
nvIticlassCmdtimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCmdtimout.setStatus('mandatory')
nvIticlassCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCug.setStatus('mandatory')
nvIticlassDatacmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDatacmd.setStatus('mandatory')
nvIticlassDefwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDefwsze.setStatus('mandatory')
nvIticlassDefpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDefpsze.setStatus('mandatory')
nvIticlassDevtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("term", 2), ("host", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDevtype.setStatus('mandatory')
nvIticlassExitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassExitcmd.setStatus('mandatory')
nvIticlassFastsel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 2), ("inallow", 3), ("outallow", 4), ("allowed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassFastsel.setStatus('mandatory')
nvIticlassIchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("iall", 2), ("inorm", 3), ("irev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassIchrg.setStatus('mandatory')
nvIticlassInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInactivty.setStatus('mandatory')
nvIticlassIncbar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("inbar", 2), ("inallow", 3), ("inx28", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassIncbar.setStatus('mandatory')
nvIticlassInitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInitcmd.setStatus('mandatory')
nvIticlassMaskstrng = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaskstrng.setStatus('mandatory')
nvIticlassMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaxpsze.setStatus('mandatory')
nvIticlassMaxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaxwsze.setStatus('mandatory')
nvIticlassOchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("oall", 2), ("onorm", 3), ("orev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassOchrg.setStatus('mandatory')
nvIticlassOutbar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("outone", 2), ("outbar", 3), ("outallow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassOutbar.setStatus('mandatory')
nvIticlassPrefixid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPrefixid.setStatus('mandatory')
nvIticlassProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassProfile.setStatus('mandatory')
nvIticlassPromptid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPromptid.setStatus('mandatory')
nvIticlassPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPvcid.setStatus('mandatory')
nvIticlassRejectid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRejectid.setStatus('mandatory')
nvIticlassRpoacode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRpoacode.setStatus('mandatory')
nvIticlassRpoatype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("file", 3), ("restrict", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRpoatype.setStatus('mandatory')
nvIticlassSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 2), ("class", 3), ("user", 4), ("callback", 5), ("nui", 6), ("radius", 7), ("usrnui", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassSecurity.setStatus('mandatory')
nvIticlassTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 2), ("apacs", 3), ("cdapacs", 4), ("cdx28", 5), ("epapacs", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassTermtype.setStatus('mandatory')
nvIticlassX28type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("pci", 2), ("c76", 3), ("c80", 4), ("c84", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX28type.setStatus('mandatory')
nvIticlassX3type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX3type.setStatus('mandatory')
nvIticlassXoffin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXoffin.setStatus('mandatory')
nvIticlassXoffout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXoffout.setStatus('mandatory')
nvIticlassXonin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXonin.setStatus('mandatory')
nvIticlassXonout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXonout.setStatus('mandatory')
nvIticlassTidprompt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassTidprompt.setStatus('mandatory')
nvIticlassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassStatus.setStatus('mandatory')
nvIticlassEscchar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassEscchar.setStatus('mandatory')
nvIticlassInvclrcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInvclrcmd.setStatus('mandatory')
nvIticlassX29mskstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX29mskstr.setStatus('mandatory')
nvIticlassDroptimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDroptimer.setStatus('mandatory')
nvIticlassClasmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 16))).clone(namedValues=NamedValues(("m8N1", 1), ("m7E1", 2), ("m7O1", 3), ("m7M1", 4), ("m7S1", 5), ("m8G1", 7), ("mAP1", 8), ("unused", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClasmode.setStatus('mandatory')
nvIticlassDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDialout.setStatus('mandatory')
nvIticlassCallingid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("userdata", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCallingid.setStatus('mandatory')
nvIticlassAcctng = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noacct", 1), ("usage", 2), ("billng", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassAcctng.setStatus('mandatory')
nvIticlassInvclrtim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInvclrtim.setStatus('mandatory')
nvIticlassComfac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lcfac", 1), ("ucfac", 2), ("lcnofac", 3), ("ucnofac", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassComfac.setStatus('mandatory')
nvIticmd = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 10))
nvIticmdMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdMaxRec.setStatus('mandatory')
nvIticmdNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdNumRec.setStatus('mandatory')
nvIticmdTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3), )
if mibBuilder.loadTexts: nvIticmdTable.setStatus('mandatory')
nvIticmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticmdIndex"))
if mibBuilder.loadTexts: nvIticmdEntry.setStatus('mandatory')
nvIticmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdIndex.setStatus('mandatory')
nvIticmdCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdCommand.setStatus('mandatory')
nvIticmdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdClass.setStatus('mandatory')
nvIticmdStringid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdStringid.setStatus('mandatory')
nvIticmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdStatus.setStatus('mandatory')
nvIticonf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 11))
nvIticonfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfMaxRec.setStatus('mandatory')
nvIticonfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfNumRec.setStatus('mandatory')
nvIticonfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3), )
if mibBuilder.loadTexts: nvIticonfTable.setStatus('mandatory')
nvIticonfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticonfIndex"))
if mibBuilder.loadTexts: nvIticonfEntry.setStatus('mandatory')
nvIticonfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfIndex.setStatus('mandatory')
nvIticonfNumcopy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfNumcopy.setStatus('mandatory')
nvIticonfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfBroadcast.setStatus('mandatory')
nvIticonfItiswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfItiswitch.setStatus('mandatory')
nvIticonfPadaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfPadaddr.setStatus('mandatory')
nvIticonfDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfDnic.setStatus('mandatory')
nvIticonfConfigstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfConfigstr.setStatus('mandatory')
nvIticonfValserver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfValserver.setStatus('mandatory')
nvIticonfV120p11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k64k", 1), ("urate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfV120p11.setStatus('mandatory')
nvItimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 12))
nvItimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapMaxRec.setStatus('mandatory')
nvItimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapNumRec.setStatus('mandatory')
nvItimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3), )
if mibBuilder.loadTexts: nvItimapTable.setStatus('mandatory')
nvItimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItimapIndex"))
if mibBuilder.loadTexts: nvItimapEntry.setStatus('mandatory')
nvItimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapIndex.setStatus('mandatory')
nvItimapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapNetaddr.setStatus('mandatory')
nvItimapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapUserdata.setStatus('mandatory')
nvItimapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapClass.setStatus('mandatory')
nvItimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapStatus.setStatus('mandatory')
nvItiprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 13))
nvItiprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofMaxRec.setStatus('mandatory')
nvItiprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofNumRec.setStatus('mandatory')
nvItiprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3), )
if mibBuilder.loadTexts: nvItiprofTable.setStatus('mandatory')
nvItiprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiprofIndex"))
if mibBuilder.loadTexts: nvItiprofEntry.setStatus('mandatory')
nvItiprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofIndex.setStatus('mandatory')
nvItiprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofName.setStatus('mandatory')
nvItiprofP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP1.setStatus('mandatory')
nvItiprofP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP2.setStatus('mandatory')
nvItiprofP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP3.setStatus('mandatory')
nvItiprofP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP4.setStatus('mandatory')
nvItiprofP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP5.setStatus('mandatory')
nvItiprofP6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP6.setStatus('mandatory')
nvItiprofP7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP7.setStatus('mandatory')
nvItiprofP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP8.setStatus('mandatory')
nvItiprofP9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP9.setStatus('mandatory')
nvItiprofP10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP10.setStatus('mandatory')
nvItiprofP11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP11.setStatus('mandatory')
nvItiprofP12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP12.setStatus('mandatory')
nvItiprofP13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP13.setStatus('mandatory')
nvItiprofP14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP14.setStatus('mandatory')
nvItiprofP15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP15.setStatus('mandatory')
nvItiprofP16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP16.setStatus('mandatory')
nvItiprofP17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP17.setStatus('mandatory')
nvItiprofP18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP18.setStatus('mandatory')
nvItiprofP19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP19.setStatus('mandatory')
nvItiprofP20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP20.setStatus('mandatory')
nvItiprofP21 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP21.setStatus('mandatory')
nvItiprofP22 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP22.setStatus('mandatory')
nvItiprofP23 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP23.setStatus('mandatory')
nvItiprofP24 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP24.setStatus('mandatory')
nvItiprofP25 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP25.setStatus('mandatory')
nvItiprofP26 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP26.setStatus('mandatory')
nvItiprofP27 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP27.setStatus('mandatory')
nvItiprofP28 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP28.setStatus('mandatory')
nvItiprofP29 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP29.setStatus('mandatory')
nvItiprofP30 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP30.setStatus('mandatory')
nvItiprofP31 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP31.setStatus('mandatory')
nvItiprofP32 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP32.setStatus('mandatory')
nvItiprofP33 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP33.setStatus('mandatory')
nvItiprofP34 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP34.setStatus('mandatory')
nvItiprofP35 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP35.setStatus('mandatory')
nvItiprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofStatus.setStatus('mandatory')
nvItirpoa = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 14))
nvItirpoaMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaMaxRec.setStatus('mandatory')
nvItirpoaNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaNumRec.setStatus('mandatory')
nvItirpoaTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3), )
if mibBuilder.loadTexts: nvItirpoaTable.setStatus('mandatory')
nvItirpoaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItirpoaIndex"))
if mibBuilder.loadTexts: nvItirpoaEntry.setStatus('mandatory')
nvItirpoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaIndex.setStatus('mandatory')
nvItirpoaCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaCode.setStatus('mandatory')
nvItirpoaCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaCarrier.setStatus('mandatory')
nvItirpoaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaStatus.setStatus('mandatory')
nvItiuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 15))
nvItiuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserMaxRec.setStatus('mandatory')
nvItiuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserNumRec.setStatus('mandatory')
nvItiuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3), )
if mibBuilder.loadTexts: nvItiuserTable.setStatus('mandatory')
nvItiuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiuserIndex"))
if mibBuilder.loadTexts: nvItiuserEntry.setStatus('mandatory')
nvItiuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserIndex.setStatus('mandatory')
nvItiuserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUsername.setStatus('mandatory')
nvItiuserCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserCallback.setStatus('mandatory')
nvItiuserClrestrct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("ignore", 2), ("select", 3), ("restrict", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserClrestrct.setStatus('mandatory')
nvItiuserInitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserInitcmd.setStatus('mandatory')
nvItiuserUserclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUserclass.setStatus('mandatory')
nvItiuserUserpaswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUserpaswd.setStatus('mandatory')
nvItiuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserStatus.setStatus('mandatory')
nvItiuserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserNumber.setStatus('mandatory')
nvDuiconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 17))
nvDuiconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfMaxRec.setStatus('mandatory')
nvDuiconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfNumRec.setStatus('mandatory')
nvDuiconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3), )
if mibBuilder.loadTexts: nvDuiconfTable.setStatus('mandatory')
nvDuiconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDuiconfIndex"))
if mibBuilder.loadTexts: nvDuiconfEntry.setStatus('mandatory')
nvDuiconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfIndex.setStatus('mandatory')
nvDuiconfType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfType.setStatus('mandatory')
nvDuiconfNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfNua.setStatus('mandatory')
nvDuiconfCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfCalling.setStatus('mandatory')
nvDuiconfFirsttry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfFirsttry.setStatus('mandatory')
nvDuiconfRetrytime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfRetrytime.setStatus('mandatory')
nvDuiconfRetryinc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfRetryinc.setStatus('mandatory')
nvDuiconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfStatus.setStatus('mandatory')
nvDlspcconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 18))
nvDlspcconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfMaxRec.setStatus('mandatory')
nvDlspcconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfNumRec.setStatus('mandatory')
nvDlspcconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3), )
if mibBuilder.loadTexts: nvDlspcconfTable.setStatus('mandatory')
nvDlspcconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlspcconfIndex"))
if mibBuilder.loadTexts: nvDlspcconfEntry.setStatus('mandatory')
nvDlspcconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfIndex.setStatus('mandatory')
nvDlspcconfNodename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfNodename.setStatus('mandatory')
nvDlspcconfSitename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfSitename.setStatus('mandatory')
nvDlspcconfHelpphone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfHelpphone.setStatus('mandatory')
nvDlspcconfAbortmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfAbortmsg.setStatus('mandatory')
nvDlspcconfPidtable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfPidtable.setStatus('mandatory')
nvDlspcconfPortalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfPortalarm.setStatus('mandatory')
nvDlspcconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfStatus.setStatus('mandatory')
nvDlstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 1))
nvDlstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatMaxRec.setStatus('mandatory')
nvDlstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatNumRec.setStatus('mandatory')
nvDlstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3), )
if mibBuilder.loadTexts: nvDlstatTable.setStatus('mandatory')
nvDlstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlstatIndex"))
if mibBuilder.loadTexts: nvDlstatEntry.setStatus('mandatory')
nvDlstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIndex.setStatus('mandatory')
nvDlstatLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLinkname.setStatus('mandatory')
nvDlstatApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("primarySdlcStation", 3), ("secondarySdlcStation", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatApp.setStatus('mandatory')
nvDlstatLfrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 33, 122, 193))).clone(namedValues=NamedValues(("none", 1), ("badNR", 17), ("overrun", 33), ("undefinedControlField", 122), ("badSUFrame", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLfrmr.setStatus('mandatory')
nvDlstatLreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("none", 1), ("badCommandFrame", 2), ("badResponseFrame", 4), ("receiverOverrun", 5), ("badNR", 9), ("networkDisconnect", 10), ("driverDisconnect", 11), ("unsolicitedFinal", 12), ("frmr", 13), ("unexpectedUA", 14), ("remoteTimeout", 15), ("sabm", 16), ("sarm", 17), ("disc", 18), ("dm", 19), ("snrm", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLreset.setStatus('mandatory')
nvDlstatMstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("startingDriver", 3), ("discSent", 4), ("sabmSent", 5), ("sarmSetup", 6), ("frmrSent", 7), ("sabmReset", 8), ("up", 9), ("clearing", 10), ("dm", 11), ("nu", 12), ("sabmAwaitingRrAFterCr", 13), ("badCmdAwaitingRrToSendFrmr", 14), ("frmrAwaitingRrToEnterRs", 15), ("discAwaitingRrToEnterSs", 16), ("awaitingIdleDriverToSendDn", 17), ("awaitingIdleDriverToResend", 18), ("waitingToSendDisc", 19), ("waitingToSendSnrm", 20), ("disconnectMode", 21), ("waitingToSendXid", 22), ("sentXid", 23), ("multipleSnrm", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatMstate.setStatus('mandatory')
nvDlstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("unconfigured", 1), ("lap", 2), ("lapb", 4), ("lapbExtended", 8), ("austrianPTT", 12), ("pss", 16), ("sdlc", 17), ("sdlcExtended", 49)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatProtocol.setStatus('mandatory')
nvDlstatPstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("normalReceiveMode", 3), ("remoteBusy", 4), ("remoteTimedOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatPstate.setStatus('mandatory')
nvDlstatSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("normalTransmit", 3), ("localBusy", 4), ("rejectFrameSent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatSstate.setStatus('mandatory')
nvDlstatAbtfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatAbtfrxs.setStatus('mandatory')
nvDlstatAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatAlarms.setStatus('mandatory')
nvDlstatFrmrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatFrmrrxs.setStatus('mandatory')
nvDlstatFrmrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatFrmrtxs.setStatus('mandatory')
nvDlstatIfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIfrxs.setStatus('mandatory')
nvDlstatIftxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIftxs.setStatus('mandatory')
nvDlstatRejrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRejrxs.setStatus('mandatory')
nvDlstatRejtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRejtxs.setStatus('mandatory')
nvDlstatRnrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRnrrxs.setStatus('mandatory')
nvDlstatRnrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRnrtxs.setStatus('mandatory')
nvDlstatRrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRrrxs.setStatus('mandatory')
nvDlstatRrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRrtxs.setStatus('mandatory')
nvDlstatRxdds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRxdds.setStatus('mandatory')
nvDlstatTouts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatTouts.setStatus('mandatory')
nvDlstatTretrys = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatTretrys.setStatus('mandatory')
nvDlstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatDtreset.setStatus('mandatory')
nvLinkstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 2))
nvLinkstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatMaxRec.setStatus('mandatory')
nvLinkstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatNumRec.setStatus('mandatory')
nvLinkstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3), )
if mibBuilder.loadTexts: nvLinkstatTable.setStatus('mandatory')
nvLinkstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLinkstatIndex"))
if mibBuilder.loadTexts: nvLinkstatEntry.setStatus('mandatory')
nvLinkstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIndex.setStatus('mandatory')
nvLinkstatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatPort.setStatus('mandatory')
nvLinkstatApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("primarySDLCStation", 3), ("secondarySDLCStation", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatApp.setStatus('mandatory')
nvLinkstatFstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("startingDriver", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFstate.setStatus('mandatory')
nvLinkstatLfrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 33, 129, 193))).clone(namedValues=NamedValues(("none", 1), ("badNR", 17), ("overrun", 33), ("undefinedControlField", 129), ("badSUFrame", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatLfrmr.setStatus('mandatory')
nvLinkstatLreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("none", 1), ("illegalCommand", 2), ("illegalResponse", 4), ("receiverOverrun", 5), ("illegalNr", 9), ("networkDisconnect", 10), ("driverDisconnect", 11), ("unsolicitedFinal", 12), ("frmrOrCmdr", 13), ("unexpectedUa", 14), ("remoteTimedOut", 15), ("sabm", 16), ("sarm", 17), ("disconnect", 18), ("dm", 19), ("snrm", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatLreset.setStatus('mandatory')
nvLinkstatN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatN1.setStatus('mandatory')
nvLinkstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("unconfigured", 1), ("lap", 2), ("lapb", 4), ("lapbExtended", 8), ("austrianPTT", 12), ("pss", 16), ("sdlc", 17), ("sdlcExtended", 49)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatProtocol.setStatus('mandatory')
nvLinkstatAbtfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatAbtfrxs.setStatus('mandatory')
nvLinkstatAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatAlarms.setStatus('mandatory')
nvLinkstatFrmrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFrmrrxs.setStatus('mandatory')
nvLinkstatFrmrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFrmrtxs.setStatus('mandatory')
nvLinkstatIfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIfrxs.setStatus('mandatory')
nvLinkstatIftxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIftxs.setStatus('mandatory')
nvLinkstatRejrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRejrxs.setStatus('mandatory')
nvLinkstatRejtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRejtxs.setStatus('mandatory')
nvLinkstatRnrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRnrrxs.setStatus('mandatory')
nvLinkstatRnrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRnrtxs.setStatus('mandatory')
nvLinkstatRrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRrrxs.setStatus('mandatory')
nvLinkstatRrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRrtxs.setStatus('mandatory')
nvLinkstatRxdds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRxdds.setStatus('mandatory')
nvLinkstatTouts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTouts.setStatus('mandatory')
nvLinkstatTretrys = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTretrys.setStatus('mandatory')
nvLinkstatTchartxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTchartxs.setStatus('mandatory')
nvLinkstatTcharrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTcharrxs.setStatus('mandatory')
nvLinkstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatDtreset.setStatus('mandatory')
nvLinkstatNlinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatNlinkup.setStatus('mandatory')
nvDlconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 3))
nvDlconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfMaxRec.setStatus('mandatory')
nvDlconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfNumRec.setStatus('mandatory')
nvDlconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3), )
if mibBuilder.loadTexts: nvDlconfTable.setStatus('mandatory')
nvDlconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlconfDlnumber"))
if mibBuilder.loadTexts: nvDlconfEntry.setStatus('mandatory')
nvDlconfDlnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 428))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfDlnumber.setStatus('mandatory')
nvDlconfLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlconfLinkname.setStatus('mandatory')
nvDlconfPuaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlconfPuaddr.setStatus('mandatory')
nvLinkconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 4))
nvLinkconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfMaxRec.setStatus('mandatory')
nvLinkconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfNumRec.setStatus('mandatory')
nvLinkconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3), )
if mibBuilder.loadTexts: nvLinkconfTable.setStatus('mandatory')
nvLinkconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLinkconfIndex"))
if mibBuilder.loadTexts: nvLinkconfEntry.setStatus('mandatory')
nvLinkconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfIndex.setStatus('mandatory')
nvLinkconfLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfLinkname.setStatus('mandatory')
nvLinkconfPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfPortname.setStatus('mandatory')
nvLinkconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfRsrcpool.setStatus('mandatory')
nvLinkconfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("lap", 2), ("lapb", 4), ("lapbe", 8), ("aust", 12), ("pss", 16), ("sdlc", 17), ("sdlce", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfProtocol.setStatus('mandatory')
nvLinkconfWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfWsze.setStatus('mandatory')
nvLinkconfHostinact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfHostinact.setStatus('mandatory')
nvLinkconfN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfN2.setStatus('mandatory')
nvLinkconfPollthres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfPollthres.setStatus('mandatory')
nvLinkconfT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT1.setStatus('mandatory')
nvLinkconfT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT2.setStatus('mandatory')
nvLinkconfT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT3.setStatus('mandatory')
nvLinkconfAckthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfAckthresh.setStatus('mandatory')
nvLinkconfDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfDialout.setStatus('mandatory')
nvLinkconfWaitframe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfWaitframe.setStatus('mandatory')
nvX25stat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 1))
nvX25statMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statMaxRec.setStatus('mandatory')
nvX25statNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNumRec.setStatus('mandatory')
nvX25statTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3), )
if mibBuilder.loadTexts: nvX25statTable.setStatus('mandatory')
nvX25statEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25statIndex"))
if mibBuilder.loadTexts: nvX25statEntry.setStatus('mandatory')
nvX25statIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statIndex.setStatus('mandatory')
nvX25statNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNetname.setStatus('mandatory')
nvX25statCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("dteOriginated", 2), ("numberBusy", 3), ("outOfOrder", 4), ("remoteDteOperational", 5), ("remoteProcedureError", 6), ("localProcedureError", 7), ("reverseChargeNotSubscribed", 8), ("incompatibleDestination", 9), ("fastSelectNotSubscribed", 10), ("invalidFacilityRequest", 11), ("accessBarred", 12), ("networkCongestion", 13), ("networkOperational", 14), ("notObtainable", 15), ("rpoaOutOfOrder", 16), ("shipAbsent", 17), ("networkOutOfOrder", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statCode.setStatus('mandatory')
nvX25statDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statDiag.setStatus('mandatory')
nvX25statIfstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("r1Down", 1), ("r2Startup", 2), ("r3Restart", 3), ("r4Up", 4), ("r5Disconnected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statIfstate.setStatus('mandatory')
nvX25statCallcur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statCallcur.setStatus('mandatory')
nvX25statOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statOpen.setStatus('mandatory')
nvX25statUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statUp.setStatus('mandatory')
nvX25statNtxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxcalls.setStatus('mandatory')
nvX25statNrxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxcalls.setStatus('mandatory')
nvX25statNtxcallcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxcallcs.setStatus('mandatory')
nvX25statNrxcallcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxcallcs.setStatus('mandatory')
nvX25statNtxclrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxclrs.setStatus('mandatory')
nvX25statNrxclrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxclrs.setStatus('mandatory')
nvX25statNtxclrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxclrcs.setStatus('mandatory')
nvX25statNrxclrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxclrcs.setStatus('mandatory')
nvX25statNtxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxres.setStatus('mandatory')
nvX25statNrxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxres.setStatus('mandatory')
nvX25statNtxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxints.setStatus('mandatory')
nvX25statNrxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxints.setStatus('mandatory')
nvX25statNtxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxrrs.setStatus('mandatory')
nvX25statNrxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxrrs.setStatus('mandatory')
nvX25statNtxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxrnrs.setStatus('mandatory')
nvX25statNrxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxrnrs.setStatus('mandatory')
nvX25statNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxpaks.setStatus('mandatory')
nvX25statNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxpaks.setStatus('mandatory')
nvX25statNtxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxsegs.setStatus('mandatory')
nvX25statNrxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxsegs.setStatus('mandatory')
nvX25statNtxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxchars.setStatus('mandatory')
nvX25statNrxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxchars.setStatus('mandatory')
nvX25statMaxvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statMaxvc.setStatus('mandatory')
nvX25statDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statDtreset.setStatus('mandatory')
nvX25statLinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statLinkup.setStatus('mandatory')
nvX25call = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 2))
nvX25callMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callMaxRec.setStatus('mandatory')
nvX25callNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNumRec.setStatus('mandatory')
nvX25callTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3), )
if mibBuilder.loadTexts: nvX25callTable.setStatus('mandatory')
nvX25callEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25callIndex"))
if mibBuilder.loadTexts: nvX25callEntry.setStatus('mandatory')
nvX25callIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callIndex.setStatus('mandatory')
nvX25callNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNetname.setStatus('mandatory')
nvX25callChanstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("p1", 1), ("p1r", 2), ("p2", 3), ("p3", 4), ("p3r", 5), ("d1i1", 6), ("d1i2", 7), ("d1i3", 8), ("d1i4", 9), ("d2", 10), ("d3", 11), ("d4", 12), ("d5", 13), ("d6", 14), ("d7", 15), ("p5C", 16), ("p5T", 17), ("p6", 18), ("p6r", 19), ("p2r", 20), ("p7r", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callChanstate.setStatus('mandatory')
nvX25callChantype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("incoming", 2), ("outgoing", 3), ("twoway", 4), ("permanent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callChantype.setStatus('mandatory')
nvX25callCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("c-dte", 2), ("c-bsy", 3), ("c-ooo", 4), ("c-rdo", 5), ("c-rpe", 6), ("c-lpe", 7), ("c-rns", 8), ("c-id", 9), ("c-fns", 10), ("c-ifr", 11), ("c-ab", 12), ("c-nc", 13), ("c-no", 14), ("c-nob", 15), ("c-roo", 16), ("c-sa", 17), ("c-noo", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callCode.setStatus('mandatory')
nvX25callDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callDiag.setStatus('mandatory')
nvX25callExpack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callExpack.setStatus('mandatory')
nvX25callLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callLcn.setStatus('mandatory')
nvX25callRxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxpsze.setStatus('mandatory')
nvX25callRxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxwsze.setStatus('mandatory')
nvX25callRxtput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxtput.setStatus('mandatory')
nvX25callNr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNr.setStatus('mandatory')
nvX25callNrunak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrunak.setStatus('mandatory')
nvX25callNs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNs.setStatus('mandatory')
nvX25callNsunak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNsunak.setStatus('mandatory')
nvX25callNunakpac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNunakpac.setStatus('mandatory')
nvX25callTxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxpsze.setStatus('mandatory')
nvX25callTxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxwsze.setStatus('mandatory')
nvX25callTxtput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxtput.setStatus('mandatory')
nvX25callNrxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxints.setStatus('mandatory')
nvX25callNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxpaks.setStatus('mandatory')
nvX25callNrxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxres.setStatus('mandatory')
nvX25callNrxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxrnrs.setStatus('mandatory')
nvX25callNrxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxrrs.setStatus('mandatory')
nvX25callNrxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxsegs.setStatus('mandatory')
nvX25callNtxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxints.setStatus('mandatory')
nvX25callNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxpaks.setStatus('mandatory')
nvX25callNtxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxsegs.setStatus('mandatory')
nvX25callNtxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxres.setStatus('mandatory')
nvX25callNtxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxrrs.setStatus('mandatory')
nvX25callDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callDtreset.setStatus('mandatory')
nvX25conf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 3))
nvX25confMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confMaxRec.setStatus('mandatory')
nvX25confNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confNumRec.setStatus('mandatory')
nvX25confTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3), )
if mibBuilder.loadTexts: nvX25confTable.setStatus('mandatory')
nvX25confEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25confIndex"))
if mibBuilder.loadTexts: nvX25confEntry.setStatus('mandatory')
nvX25confIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confIndex.setStatus('mandatory')
nvX25confNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confNetname.setStatus('mandatory')
nvX25confApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 17, 33))).clone(namedValues=NamedValues(("dte", 2), ("dce", 3), ("trunkx", 17), ("trunky", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confApp.setStatus('mandatory')
nvX25confAutostart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("stndby", 3), ("v32", 4), ("dialin", 5), ("bidir", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAutostart.setStatus('mandatory')
nvX25confDlnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDlnumber.setStatus('mandatory')
nvX25confLic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLic.setStatus('mandatory')
nvX25confLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLoc.setStatus('mandatory')
nvX25confLpc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLpc.setStatus('mandatory')
nvX25confLtc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLtc.setStatus('mandatory')
nvX25confNic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNic.setStatus('mandatory')
nvX25confNoc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNoc.setStatus('mandatory')
nvX25confNpc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNpc.setStatus('mandatory')
nvX25confNtc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNtc.setStatus('mandatory')
nvX25confAcktimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAcktimer.setStatus('mandatory')
nvX25confAckthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAckthresh.setStatus('mandatory')
nvX25confNuireq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNuireq.setStatus('mandatory')
nvX25confCugformat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("basic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confCugformat.setStatus('mandatory')
nvX25confDbmod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDbmod.setStatus('mandatory')
nvX25confDefpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDefpsze.setStatus('mandatory')
nvX25confDefwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDefwsze.setStatus('mandatory')
nvX25confDeftput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDeftput.setStatus('mandatory')
nvX25confDiagsupr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDiagsupr.setStatus('mandatory')
nvX25confDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("incoming", 2), ("outgoing", 3), ("twoway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDirection.setStatus('mandatory')
nvX25confFlowneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("psn", 3), ("wsn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confFlowneg.setStatus('mandatory')
nvX25confFstacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confFstacc.setStatus('mandatory')
nvX25confUpdncmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confUpdncmd.setStatus('mandatory')
nvX25confMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confMaxpsze.setStatus('mandatory')
nvX25confMaxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confMaxwsze.setStatus('mandatory')
nvX25confNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNetaddr.setStatus('mandatory')
nvX25confNettype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ccitt", 1), ("datapac", 2), ("transpac", 3), ("upss", 4), ("transb", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNettype.setStatus('mandatory')
nvX25confNetvrsion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 81, 85))).clone(namedValues=NamedValues(("v1976", 77), ("v1980", 81), ("v1984", 85)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNetvrsion.setStatus('mandatory')
nvX25confPktbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confPktbuf.setStatus('mandatory')
nvX25confStndbytim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confStndbytim.setStatus('mandatory')
nvX25confRevacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confRevacc.setStatus('mandatory')
nvX25confThruneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confThruneg.setStatus('mandatory')
nvX25confTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx0.setStatus('mandatory')
nvX25confTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx1.setStatus('mandatory')
nvX25confTx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx2.setStatus('mandatory')
nvX25confTx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx3.setStatus('mandatory')
nvX25confXtend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confXtend.setStatus('mandatory')
nvX25confNuirtg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNuirtg.setStatus('mandatory')
nvX25confIsdnaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confIsdnaddr.setStatus('mandatory')
nvX25nuimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 4))
nvX25nuimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapMaxRec.setStatus('mandatory')
nvX25nuimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapNumRec.setStatus('mandatory')
nvX25nuimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3), )
if mibBuilder.loadTexts: nvX25nuimapTable.setStatus('mandatory')
nvX25nuimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25nuimapIndex"))
if mibBuilder.loadTexts: nvX25nuimapEntry.setStatus('mandatory')
nvX25nuimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapIndex.setStatus('mandatory')
nvX25nuimapNui = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 58))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapNui.setStatus('mandatory')
nvX25nuimapCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapCalled.setStatus('mandatory')
nvX25nuimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapStatus.setStatus('mandatory')
nvXbillconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 5))
nvXbillconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfMaxRec.setStatus('mandatory')
nvXbillconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfNumRec.setStatus('mandatory')
nvXbillconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3), )
if mibBuilder.loadTexts: nvXbillconfTable.setStatus('mandatory')
nvXbillconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXbillconfIndex"))
if mibBuilder.loadTexts: nvXbillconfEntry.setStatus('mandatory')
nvXbillconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfIndex.setStatus('mandatory')
nvXbillconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfEnable.setStatus('mandatory')
nvXbillconfSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfSegsize.setStatus('mandatory')
nvXbillconfBilltime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfBilltime.setStatus('mandatory')
nvXnuaset = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 6))
nvXnuasetMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetMaxRec.setStatus('mandatory')
nvXnuasetNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetNumRec.setStatus('mandatory')
nvXnuasetTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3), )
if mibBuilder.loadTexts: nvXnuasetTable.setStatus('mandatory')
nvXnuasetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXnuasetIndex"))
if mibBuilder.loadTexts: nvXnuasetEntry.setStatus('mandatory')
nvXnuasetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetIndex.setStatus('mandatory')
nvXnuasetSetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetSetname.setStatus('mandatory')
nvXnuasetNua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua1.setStatus('mandatory')
nvXnuasetNua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua2.setStatus('mandatory')
nvXnuasetNua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua3.setStatus('mandatory')
nvXnuasetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetStatus.setStatus('mandatory')
nvXbillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 7))
nvXbillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatMaxRec.setStatus('mandatory')
nvXbillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNumRec.setStatus('mandatory')
nvXbillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3), )
if mibBuilder.loadTexts: nvXbillstatTable.setStatus('mandatory')
nvXbillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXbillstatIndex"))
if mibBuilder.loadTexts: nvXbillstatEntry.setStatus('mandatory')
nvXbillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatIndex.setStatus('mandatory')
nvXbillstatNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNodeid.setStatus('mandatory')
nvXbillstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatDate.setStatus('mandatory')
nvXbillstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTime.setStatus('mandatory')
nvXbillstatNuaset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNuaset.setStatus('mandatory')
nvXbillstatDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatDatarate.setStatus('mandatory')
nvXbillstatTxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTxseg.setStatus('mandatory')
nvXbillstatRxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxseg.setStatus('mandatory')
nvXbillstatRxcallc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxcallc.setStatus('mandatory')
nvXbillstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatHostclr.setStatus('mandatory')
nvXbillstatNetclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNetclr.setStatus('mandatory')
nvXbillstatTxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTxpak.setStatus('mandatory')
nvXbillstatRxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxpak.setStatus('mandatory')
nvXbillstatLess5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatLess5.setStatus('mandatory')
nvXbillstat5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat5to10.setStatus('mandatory')
nvXbillstat10to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat10to15.setStatus('mandatory')
nvXbillstat15to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat15to20.setStatus('mandatory')
nvXbillstatGrtr20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatGrtr20.setStatus('mandatory')
nvXbillstatClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatClosed.setStatus('mandatory')
nvPriconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 1))
nvPriconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfMaxRec.setStatus('mandatory')
nvPriconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfNumRec.setStatus('mandatory')
nvPriconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3), )
if mibBuilder.loadTexts: nvPriconfTable.setStatus('mandatory')
nvPriconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPriconfIndex"))
if mibBuilder.loadTexts: nvPriconfEntry.setStatus('mandatory')
nvPriconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfIndex.setStatus('mandatory')
nvPriconfPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfPriname.setStatus('mandatory')
nvPriconfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 18, 20, 22, 24, 27, 33))).clone(namedValues=NamedValues(("none", 1), ("att4ess", 17), ("att5ess", 18), ("dms100", 20), ("ntt", 22), ("v1tr6", 24), ("net5", 27), ("vn3", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfSwitch.setStatus('mandatory')
nvPriconfDsltype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("switched", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDsltype.setStatus('mandatory')
nvPriconfRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caladr", 1), ("subadr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfRouting.setStatus('mandatory')
nvPriconfDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDliname.setStatus('mandatory')
nvPriconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfRsrcpool.setStatus('mandatory')
nvPriconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfStatus.setStatus('mandatory')
nvPriconfBusyout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfBusyout.setStatus('mandatory')
nvPriconfEstlink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfEstlink.setStatus('mandatory')
nvPriconfDlirst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDlirst.setStatus('mandatory')
nvPriconfDchrst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDchrst.setStatus('mandatory')
nvPriconfNfasdch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasdch.setStatus('mandatory')
nvPriconfNfasif = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasif.setStatus('mandatory')
nvPriconfNfasgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasgrp.setStatus('mandatory')
nvPriconfTsshift = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfTsshift.setStatus('mandatory')
nvPriconfX25diags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfX25diags.setStatus('mandatory')
nvPriconfNumbtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("unknown", 2), ("internat", 3), ("national", 4), ("netspec", 5), ("subscrib", 6), ("abbrev", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNumbtype.setStatus('mandatory')
nvPriconfNumbplan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 10, 11))).clone(namedValues=NamedValues(("unknown", 2), ("isdn", 3), ("data", 5), ("telex", 6), ("natstand", 10), ("private", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNumbplan.setStatus('mandatory')
nvPriconfModemcap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speech", 1), ("audio3k", 2), ("audio7k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfModemcap.setStatus('mandatory')
nvPriconfL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfL1prot.setStatus('mandatory')
nvPriconfStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfStandby.setStatus('mandatory')
nvPristat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 2))
nvPristatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxRec.setStatus('mandatory')
nvPristatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNumRec.setStatus('mandatory')
nvPristatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3), )
if mibBuilder.loadTexts: nvPristatTable.setStatus('mandatory')
nvPristatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPristatIndex"))
if mibBuilder.loadTexts: nvPristatEntry.setStatus('mandatory')
nvPristatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatIndex.setStatus('mandatory')
nvPristatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatPriname.setStatus('mandatory')
nvPristatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatStatus.setStatus('mandatory')
nvPristatCallrecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallrecvs.setStatus('mandatory')
nvPristatCallaceps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallaceps.setStatus('mandatory')
nvPristatCallrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallrejs.setStatus('mandatory')
nvPristatCallinrels = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallinrels.setStatus('mandatory')
nvPristatCalloutrels = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCalloutrels.setStatus('mandatory')
nvPristatEstreq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatEstreq.setStatus('mandatory')
nvPristatDlirst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDlirst.setStatus('mandatory')
nvPristatDchrst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDchrst.setStatus('mandatory')
nvPristatCallcur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallcur.setStatus('mandatory')
nvPristatDchanup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDchanup.setStatus('mandatory')
nvPristatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDtreset.setStatus('mandatory')
nvPristatNcurincom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNcurincom.setStatus('mandatory')
nvPristatNcuroutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNcuroutgo.setStatus('mandatory')
nvPristatNrxsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxsetup.setStatus('mandatory')
nvPristatMaxrsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxrsetup.setStatus('mandatory')
nvPristatNrxsetupa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxsetupa.setStatus('mandatory')
nvPristatNtxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxconn.setStatus('mandatory')
nvPristatNtxbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxbusy.setStatus('mandatory')
nvPristatNtxsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxsetup.setStatus('mandatory')
nvPristatMaxtsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxtsetup.setStatus('mandatory')
nvPristatNtxsetupa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxsetupa.setStatus('mandatory')
nvPristatNrxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxconn.setStatus('mandatory')
nvPristatNrxbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxbusy.setStatus('mandatory')
nvPristatNnoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNnoanswer.setStatus('mandatory')
nvPristatMaxincom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxincom.setStatus('mandatory')
nvPristatMaxoutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxoutgo.setStatus('mandatory')
nvPristatCallsent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallsent.setStatus('mandatory')
nvPristatCallconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallconn.setStatus('mandatory')
nvPristatCallfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallfail.setStatus('mandatory')
nvPricstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 3))
nvPricstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatMaxRec.setStatus('mandatory')
nvPricstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatNumRec.setStatus('mandatory')
nvPricstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3), )
if mibBuilder.loadTexts: nvPricstatTable.setStatus('mandatory')
nvPricstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricstatIndex"))
if mibBuilder.loadTexts: nvPricstatEntry.setStatus('mandatory')
nvPricstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatIndex.setStatus('mandatory')
nvPricstatSeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatSeqno.setStatus('mandatory')
nvPricstatCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCallid.setStatus('mandatory')
nvPricstatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatRate.setStatus('mandatory')
nvPricstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disc", 1), ("idle", 2), ("waiting", 3), ("active", 4), ("clearing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatState.setStatus('mandatory')
nvPricstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatPriname.setStatus('mandatory')
nvPricstatCalldir = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("out", 2), ("in", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCalldir.setStatus('mandatory')
nvPricstatContype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 25, 256))).clone(namedValues=NamedValues(("audio", 1), ("data", 9), ("video", 25), ("noType", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatContype.setStatus('mandatory')
nvPricstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("v110", 2), ("g711-M", 3), ("g711-A", 4), ("g712", 5), ("h221", 6), ("nON-CCITT", 8), ("v120", 9), ("x31", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatL1prot.setStatus('mandatory')
nvPricstatCallingno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCallingno.setStatus('mandatory')
nvPricstatCalledno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCalledno.setStatus('mandatory')
nvPricstatBchanl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatBchanl.setStatus('mandatory')
nvPridstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 4))
nvPridstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatMaxRec.setStatus('mandatory')
nvPridstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatNumRec.setStatus('mandatory')
nvPridstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3), )
if mibBuilder.loadTexts: nvPridstatTable.setStatus('mandatory')
nvPridstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPridstatIndex"))
if mibBuilder.loadTexts: nvPridstatEntry.setStatus('mandatory')
nvPridstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatIndex.setStatus('mandatory')
nvPridstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatPriname.setStatus('mandatory')
nvPridstatEventno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 255, 253))).clone(namedValues=NamedValues(("channelMissing", 114), ("outcallEstablished", 115), ("noTimeslotInfoRcvd", 116), ("channelNotFound", 117), ("invalidEvent", 118), ("unknownEvent", 119), ("noChannelAvail", 120), ("directoryNumMismatch", 121), ("originatorNumMismatch", 122), ("mandatoryInfoElemMissing", 123), ("calledNumBusy", 124), ("callingNumBusy", 125), ("incallEstablished", 126), ("dchannelConnect", 127), ("channelCollision", 128), ("noTimeslotAvailable", 129), ("reassignTimeslots", 130), ("undefinedString", 255), ("undefinedEvent", 253)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatEventno.setStatus('mandatory')
nvPridstatProtlayer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lapd", 1), ("l3err", 2), ("l3caus", 3), ("l3call", 4), ("ckRtr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatProtlayer.setStatus('mandatory')
nvPridstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatTime.setStatus('mandatory')
nvPridstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatDate.setStatus('mandatory')
nvPricuconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 5))
nvPricuconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfMaxRec.setStatus('mandatory')
nvPricuconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfNumRec.setStatus('mandatory')
nvPricuconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3), )
if mibBuilder.loadTexts: nvPricuconfTable.setStatus('mandatory')
nvPricuconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricuconfIndex"))
if mibBuilder.loadTexts: nvPricuconfEntry.setStatus('mandatory')
nvPricuconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfIndex.setStatus('mandatory')
nvPricuconfThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh1.setStatus('mandatory')
nvPricuconfThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh2.setStatus('mandatory')
nvPricuconfThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(61, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh3.setStatus('mandatory')
nvPricuconfThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(91, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh4.setStatus('mandatory')
nvPricuconfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfInterval.setStatus('mandatory')
nvPricuconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfStatus.setStatus('mandatory')
nvPricustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 6))
nvPricustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatMaxRec.setStatus('mandatory')
nvPricustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatNumRec.setStatus('mandatory')
nvPricustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3), )
if mibBuilder.loadTexts: nvPricustatTable.setStatus('mandatory')
nvPricustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricustatIndex"))
if mibBuilder.loadTexts: nvPricustatEntry.setStatus('mandatory')
nvPricustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatIndex.setStatus('mandatory')
nvPricustatThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh1.setStatus('mandatory')
nvPricustatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter1.setStatus('mandatory')
nvPricustatThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh2.setStatus('mandatory')
nvPricustatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter2.setStatus('mandatory')
nvPricustatThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh3.setStatus('mandatory')
nvPricustatCounter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter3.setStatus('mandatory')
nvPricustatThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh4.setStatus('mandatory')
nvPricustatCounter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter4.setStatus('mandatory')
nvPricustatResettime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatResettime.setStatus('mandatory')
nvPppstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 1))
nvPppstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatMaxRec.setStatus('mandatory')
nvPppstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatNumRec.setStatus('mandatory')
nvPppstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3), )
if mibBuilder.loadTexts: nvPppstatTable.setStatus('mandatory')
nvPppstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPppstatIndex"))
if mibBuilder.loadTexts: nvPppstatEntry.setStatus('mandatory')
nvPppstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIndex.setStatus('mandatory')
nvPppstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatName.setStatus('mandatory')
nvPppstatPppAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatPppAdminS.setStatus('mandatory')
nvPppstatLcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatLcpOperS.setStatus('mandatory')
nvPppstatIpcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpcpOperS.setStatus('mandatory')
nvPppstatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInOctets.setStatus('mandatory')
nvPppstatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInPkts.setStatus('mandatory')
nvPppstatInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInDiscard.setStatus('mandatory')
nvPppstatInError = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInError.setStatus('mandatory')
nvPppstatInEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInEch.setStatus('mandatory')
nvPppstatInEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInEchRp.setStatus('mandatory')
nvPppstatInDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInDiscRq.setStatus('mandatory')
nvPppstatUnKnwnPr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatUnKnwnPr.setStatus('mandatory')
nvPppstatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutOctets.setStatus('mandatory')
nvPppstatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutPkts.setStatus('mandatory')
nvPppstatOutDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutDiscrd.setStatus('mandatory')
nvPppstatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutErrors.setStatus('mandatory')
nvPppstatOutEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutEch.setStatus('mandatory')
nvPppstatOutEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutEchRp.setStatus('mandatory')
nvPppstatOutDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutDiscRq.setStatus('mandatory')
nvPppstatUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatUserName.setStatus('mandatory')
nvPppstatIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpAddr.setStatus('mandatory')
nvPppstatBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatBundleId.setStatus('mandatory')
nvPppstatIpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpcp.setStatus('mandatory')
nvPppstatMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatMultilink.setStatus('mandatory')
nvPppstatCcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatCcpOperS.setStatus('mandatory')
nvPppstatComprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPppstatComprot.setStatus('mandatory')
nvPppstatTnnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("l2tpwt", 2), ("l2tpcn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatTnnlState.setStatus('mandatory')
nvPppstatTnnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatTnnlId.setStatus('mandatory')
nvPppstatCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatCallId.setStatus('mandatory')
nvPppstatOutCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutCmPcnt.setStatus('mandatory')
nvPppstatInCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInCmPcnt.setStatus('mandatory')
nvPppstatOutExpnds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutExpnds.setStatus('mandatory')
nvPppstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatDtreset.setStatus('mandatory')
nvPppstatRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatRealm.setStatus('mandatory')
nvLcpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 2))
nvLcpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfMaxRec.setStatus('mandatory')
nvLcpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfNumRec.setStatus('mandatory')
nvLcpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3), )
if mibBuilder.loadTexts: nvLcpconfTable.setStatus('mandatory')
nvLcpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLcpconfIndex"))
if mibBuilder.loadTexts: nvLcpconfEntry.setStatus('mandatory')
nvLcpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfIndex.setStatus('mandatory')
nvLcpconfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfPort.setStatus('mandatory')
nvLcpconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfRsrcpool.setStatus('mandatory')
nvLcpconfItiudata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfItiudata.setStatus('mandatory')
nvLcpconfAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAccm.setStatus('mandatory')
nvLcpconfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sync", 1), ("async", 2), ("tpp", 3), ("x25", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMode.setStatus('mandatory')
nvLcpconfPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfPfc.setStatus('mandatory')
nvLcpconfAcfc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAcfc.setStatus('mandatory')
nvLcpconfRestartim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfRestartim.setStatus('mandatory')
nvLcpconfMaxterm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxterm.setStatus('mandatory')
nvLcpconfMaxcfg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxcfg.setStatus('mandatory')
nvLcpconfMaxnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxnak.setStatus('mandatory')
nvLcpconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfInactivty.setStatus('mandatory')
nvLcpconfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("either", 4), ("telno", 5), ("prxypap", 6), ("prxychap", 7), ("prxyeith", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAuth.setStatus('mandatory')
nvLcpconfSecurtmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfSecurtmr.setStatus('mandatory')
nvLcpconfChalint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfChalint.setStatus('mandatory')
nvLcpconfMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMultilink.setStatus('mandatory')
nvLcpconfpppTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfpppTrapEn.setStatus('mandatory')
nvLcpconfComprot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfComprot1.setStatus('mandatory')
nvLcpconfComprot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfComprot2.setStatus('mandatory')
nvLcpconfUsrdelim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfUsrdelim.setStatus('mandatory')
nvLcpconfNaifwd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useronly", 1), ("fullnai", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfNaifwd.setStatus('mandatory')
nvLcpconfTxmaxbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfTxmaxbuf.setStatus('mandatory')
nvLcpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfStatus.setStatus('mandatory')
nvMpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 3))
nvMpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfMaxRec.setStatus('mandatory')
nvMpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfNumRec.setStatus('mandatory')
nvMpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3), )
if mibBuilder.loadTexts: nvMpconfTable.setStatus('mandatory')
nvMpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpconfIndex"))
if mibBuilder.loadTexts: nvMpconfEntry.setStatus('mandatory')
nvMpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfIndex.setStatus('mandatory')
nvMpconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfProfile.setStatus('mandatory')
nvMpconfAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfAdminS.setStatus('mandatory')
nvMpconfTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTrapEnable.setStatus('mandatory')
nvMpconfLnkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfLnkLimit.setStatus('mandatory')
nvMpconfTxFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxFrag.setStatus('mandatory')
nvMpconfTxFragMin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxFragMin.setStatus('mandatory')
nvMpconfTxShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxShortSeq.setStatus('mandatory')
nvMpconfComprot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4), ("stacopt0", 5), ("any", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComprot1.setStatus('mandatory')
nvMpconfComprot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4), ("stacopt0", 5), ("any", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComprot2.setStatus('mandatory')
nvMpconfComptype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bundle", 1), ("lnkbylnk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComptype.setStatus('mandatory')
nvMpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfStatus.setStatus('mandatory')
nvMpstatPart1 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 4))
nvMpstatPart1MaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1MaxRec.setStatus('mandatory')
nvMpstatPart1NumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1NumRec.setStatus('mandatory')
nvMpstatPart1Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3), )
if mibBuilder.loadTexts: nvMpstatPart1Table.setStatus('mandatory')
nvMpstatPart1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpstatPart1Index"))
if mibBuilder.loadTexts: nvMpstatPart1Entry.setStatus('mandatory')
nvMpstatPart1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Index.setStatus('mandatory')
nvMpstatPart1UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1UserName.setStatus('mandatory')
nvMpstatPart1IpcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1IpcpOperS.setStatus('mandatory')
nvMpstatPart1Ipcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Ipcp.setStatus('mandatory')
nvMpstatPart1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1IpAddress.setStatus('mandatory')
nvMpstatPart1Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Profile.setStatus('mandatory')
nvMpstatPart1RmtClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("local", 2), ("ipaddr", 3), ("global", 4), ("magicnum", 5), ("dirnum", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtClass.setStatus('mandatory')
nvMpstatPart1RmtDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtDisc.setStatus('mandatory')
nvMpstatPart1LocClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("local", 2), ("ipaddr", 3), ("global", 4), ("magicnum", 5), ("dirnum", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocClass.setStatus('mandatory')
nvMpstatPart1LocDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocDisc.setStatus('mandatory')
nvMpstatPart1RmtMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtMRRU.setStatus('mandatory')
nvMpstatPart1LocMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocMRRU.setStatus('mandatory')
nvMpstatPart1RmtSeqS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtSeqS.setStatus('mandatory')
nvMpstatPart1LocSeqS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocSeqS.setStatus('mandatory')
nvMpstatPart1Link1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link1.setStatus('mandatory')
nvMpstatPart1Link2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link2.setStatus('mandatory')
nvMpstatPart1Link3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link3.setStatus('mandatory')
nvMpstatPart1Link4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link4.setStatus('mandatory')
nvMpstatPart1Link5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link5.setStatus('mandatory')
nvMpstatPart1Link6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link6.setStatus('mandatory')
nvMpstatPart1Link7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link7.setStatus('mandatory')
nvMpstatPart1Link8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link8.setStatus('mandatory')
nvMpstatPart1Link9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link9.setStatus('mandatory')
nvMpstatPart1Link10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link10.setStatus('mandatory')
nvMpstatPart1Link11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link11.setStatus('mandatory')
nvMpstatPart1Link12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link12.setStatus('mandatory')
nvMpstatPart1Link13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link13.setStatus('mandatory')
nvMpstatPart1Link14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link14.setStatus('mandatory')
nvMpstatPart1Link15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link15.setStatus('mandatory')
nvMpstatPart1Link16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link16.setStatus('mandatory')
nvMpstatPart2 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 5))
nvMpstatPart2MaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2MaxRec.setStatus('mandatory')
nvMpstatPart2NumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2NumRec.setStatus('mandatory')
nvMpstatPart2Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3), )
if mibBuilder.loadTexts: nvMpstatPart2Table.setStatus('mandatory')
nvMpstatPart2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpstatPart2Index"))
if mibBuilder.loadTexts: nvMpstatPart2Entry.setStatus('mandatory')
nvMpstatPart2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2Index.setStatus('mandatory')
nvMpstatPart2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InOctets.setStatus('mandatory')
nvMpstatPart2InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InPkts.setStatus('mandatory')
nvMpstatPart2InBfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InBfrags.setStatus('mandatory')
nvMpstatPart2InEfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEfrags.setStatus('mandatory')
nvMpstatPart2InMfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InMfrags.setStatus('mandatory')
nvMpstatPart2InRsmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InRsmErr.setStatus('mandatory')
nvMpstatPart2InDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InDiscrd.setStatus('mandatory')
nvMpstatPart2InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InErrors.setStatus('mandatory')
nvMpstatPart2InEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEch.setStatus('mandatory')
nvMpstatPart2InEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEchRp.setStatus('mandatory')
nvMpstatPart2InDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InDiscRq.setStatus('mandatory')
nvMpstatPart2UnKnwnPr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2UnKnwnPr.setStatus('mandatory')
nvMpstatPart2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutOctets.setStatus('mandatory')
nvMpstatPart2OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutPkts.setStatus('mandatory')
nvMpstatPart2OutBfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutBfrags.setStatus('mandatory')
nvMpstatPart2OutEfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEfrags.setStatus('mandatory')
nvMpstatPart2OutMfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutMfrags.setStatus('mandatory')
nvMpstatPart2OutDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutDiscrd.setStatus('mandatory')
nvMpstatPart2OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutErrors.setStatus('mandatory')
nvMpstatPart2OutEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEch.setStatus('mandatory')
nvMpstatPart2OutEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEchRp.setStatus('mandatory')
nvMpstatPart2OutDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutDiscRq.setStatus('mandatory')
nvMpstatPart2OutCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutCmPcnt.setStatus('mandatory')
nvMpstatPart2InCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InCmPcnt.setStatus('mandatory')
nvMpstatPart2OutExpnds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutExpnds.setStatus('mandatory')
nvMpstatPart2Dtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2Dtreset.setStatus('mandatory')
nvElxstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15, 1))
nvElxstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatMaxRec.setStatus('mandatory')
nvElxstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatNumRec.setStatus('mandatory')
nvElxstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3), )
if mibBuilder.loadTexts: nvElxstatTable.setStatus('mandatory')
nvElxstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvElxstatIndex"))
if mibBuilder.loadTexts: nvElxstatEntry.setStatus('mandatory')
nvElxstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatIndex.setStatus('mandatory')
nvElxstatPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatPhysAddr.setStatus('mandatory')
nvElxstatAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatAdminStat.setStatus('mandatory')
nvElxstatOperStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOperStat.setStatus('mandatory')
nvElxstatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInOctets.setStatus('mandatory')
nvElxstatInUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInUcasts.setStatus('mandatory')
nvElxstatInNUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInNUcasts.setStatus('mandatory')
nvElxstatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInDiscards.setStatus('mandatory')
nvElxstatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInErrors.setStatus('mandatory')
nvElxstatUnKnwnPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatUnKnwnPrs.setStatus('mandatory')
nvElxstatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutOctets.setStatus('mandatory')
nvElxstatOutUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutUcasts.setStatus('mandatory')
nvElxstatOutNUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutNUcasts.setStatus('mandatory')
nvElxstatOutDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutDiscrds.setStatus('mandatory')
nvElxstatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutErrors.setStatus('mandatory')
nvElxstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatDtreset.setStatus('mandatory')
nvElxconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15, 2))
nvElxconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfMaxRec.setStatus('mandatory')
nvElxconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfNumRec.setStatus('mandatory')
nvElxconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3), )
if mibBuilder.loadTexts: nvElxconfTable.setStatus('mandatory')
nvElxconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvElxconfIndex"))
if mibBuilder.loadTexts: nvElxconfEntry.setStatus('mandatory')
nvElxconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfIndex.setStatus('mandatory')
nvElxconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvElxconfEnable.setStatus('mandatory')
nvElxconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvElxconfInactivty.setStatus('mandatory')
nvIpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 1))
nvIpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfMaxRec.setStatus('mandatory')
nvIpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfNumRec.setStatus('mandatory')
nvIpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3), )
if mibBuilder.loadTexts: nvIpconfTable.setStatus('mandatory')
nvIpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpconfIndex"))
if mibBuilder.loadTexts: nvIpconfEntry.setStatus('mandatory')
nvIpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfIndex.setStatus('mandatory')
nvIpconfIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfIpaddr.setStatus('mandatory')
nvIpconfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfMask.setStatus('mandatory')
nvIpconfBcastaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfBcastaddr.setStatus('mandatory')
nvIpconfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfMtu.setStatus('mandatory')
nvIpconfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfEncap.setStatus('mandatory')
nvIpconfRoutprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9))).clone(namedValues=NamedValues(("none", 1), ("rip", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfRoutprot.setStatus('mandatory')
nvIpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfStatus.setStatus('mandatory')
nvIpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 2))
nvIpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatMaxRec.setStatus('mandatory')
nvIpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatNumRec.setStatus('mandatory')
nvIpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3), )
if mibBuilder.loadTexts: nvIpstatTable.setStatus('mandatory')
nvIpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpstatIndex"))
if mibBuilder.loadTexts: nvIpstatEntry.setStatus('mandatory')
nvIpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatIndex.setStatus('mandatory')
nvIpstatInRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInRxs.setStatus('mandatory')
nvIpstatInHdrErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInHdrErrs.setStatus('mandatory')
nvIpstatInAdrErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInAdrErrs.setStatus('mandatory')
nvIpstatForwDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatForwDatas.setStatus('mandatory')
nvIpstatUnKnwnPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatUnKnwnPrs.setStatus('mandatory')
nvIpstatInDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInDiscrds.setStatus('mandatory')
nvIpstatInDlvrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInDlvrs.setStatus('mandatory')
nvIpstatOutRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutRqsts.setStatus('mandatory')
nvIpstatOutDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutDiscrds.setStatus('mandatory')
nvIpstatOutNoRts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutNoRts.setStatus('mandatory')
nvIpstatReasmRqds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmRqds.setStatus('mandatory')
nvIpstatReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmOKs.setStatus('mandatory')
nvIpstatReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmFails.setStatus('mandatory')
nvIpstatFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragOKs.setStatus('mandatory')
nvIpstatFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragFails.setStatus('mandatory')
nvIpstatFragCrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragCrs.setStatus('mandatory')
nvIpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatDtreset.setStatus('mandatory')
nvIpwanmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 3))
nvIpwanmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapMaxRec.setStatus('mandatory')
nvIpwanmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapNumRec.setStatus('mandatory')
nvIpwanmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3), )
if mibBuilder.loadTexts: nvIpwanmapTable.setStatus('mandatory')
nvIpwanmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpwanmapIndex"))
if mibBuilder.loadTexts: nvIpwanmapEntry.setStatus('mandatory')
nvIpwanmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapIndex.setStatus('mandatory')
nvIpwanmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIpaddr.setStatus('mandatory')
nvIpwanmapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMask.setStatus('mandatory')
nvIpwanmapBcastcntl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapBcastcntl.setStatus('mandatory')
nvIpwanmapMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMtu.setStatus('mandatory')
nvIpwanmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMetric.setStatus('mandatory')
nvIpwanmapInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapInactivty.setStatus('mandatory')
nvIpwanmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapNetaddr.setStatus('mandatory')
nvIpwanmapUserdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapUserdat.setStatus('mandatory')
nvIpwanmapRevacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRevacc.setStatus('mandatory')
nvIpwanmapRevcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRevcall.setStatus('mandatory')
nvIpwanmapTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("link", 1), ("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapTput.setStatus('mandatory')
nvIpwanmapPsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapPsize.setStatus('mandatory')
nvIpwanmapWsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapWsize.setStatus('mandatory')
nvIpwanmapCugtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nocug", 1), ("cug", 2), ("cugog", 3), ("bcug", 4), ("bcugog", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapCugtype.setStatus('mandatory')
nvIpwanmapCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapCug.setStatus('mandatory')
nvIpwanmapRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRpoa.setStatus('mandatory')
nvIpwanmapPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapPvcid.setStatus('mandatory')
nvIpwanmapFrpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapFrpvc.setStatus('mandatory')
nvIpwanmapNetprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x25", 1), ("slip", 2), ("frelay", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapNetprot.setStatus('mandatory')
nvIpwanmapIpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIpcp.setStatus('mandatory')
nvIpwanmapIdnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIdnum.setStatus('mandatory')
nvIpwanmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapStatus.setStatus('mandatory')
nvIproute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 4))
nvIprouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteMaxRec.setStatus('mandatory')
nvIprouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteNumRec.setStatus('mandatory')
nvIprouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3), )
if mibBuilder.loadTexts: nvIprouteTable.setStatus('mandatory')
nvIprouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIprouteIndex"))
if mibBuilder.loadTexts: nvIprouteEntry.setStatus('mandatory')
nvIprouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteIndex.setStatus('mandatory')
nvIprouteIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteIpaddr.setStatus('mandatory')
nvIprouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteMask.setStatus('mandatory')
nvIprouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteNexthop.setStatus('mandatory')
nvIprouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteMetric.setStatus('mandatory')
nvIprouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteStatus.setStatus('mandatory')
nvIprtstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 5))
nvIprtstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatMaxRec.setStatus('mandatory')
nvIprtstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatNumRec.setStatus('mandatory')
nvIprtstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3), )
if mibBuilder.loadTexts: nvIprtstatTable.setStatus('mandatory')
nvIprtstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIprtstatIndex"))
if mibBuilder.loadTexts: nvIprtstatEntry.setStatus('mandatory')
nvIprtstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatIndex.setStatus('mandatory')
nvIprtstatDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatDest.setStatus('mandatory')
nvIprtstatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("x25", 1), ("slip", 2), ("frelay", 3), ("ppp", 4), ("ether", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatInterface.setStatus('mandatory')
nvIprtstatMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatMetric.setStatus('mandatory')
nvIprtstatNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatNextHop.setStatus('mandatory')
nvIprtstatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 2), ("invald", 3), ("direct", 4), ("remote", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatType.setStatus('mandatory')
nvIprtstatProto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 9, 17))).clone(namedValues=NamedValues(("local", 3), ("icmp", 5), ("rip", 9), ("rad", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatProto.setStatus('mandatory')
nvIcmpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 6))
nvIcmpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatMaxRec.setStatus('mandatory')
nvIcmpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatNumRec.setStatus('mandatory')
nvIcmpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3), )
if mibBuilder.loadTexts: nvIcmpstatTable.setStatus('mandatory')
nvIcmpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIcmpstatIndex"))
if mibBuilder.loadTexts: nvIcmpstatEntry.setStatus('mandatory')
nvIcmpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatIndex.setStatus('mandatory')
nvIcmpstatInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInMsgs.setStatus('mandatory')
nvIcmpstatInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInErrs.setStatus('mandatory')
nvIcmpstatInDstUnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInDstUnrs.setStatus('mandatory')
nvIcmpstatInTmExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmExcds.setStatus('mandatory')
nvIcmpstatInPrmPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInPrmPrbs.setStatus('mandatory')
nvIcmpstatInSrcQus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInSrcQus.setStatus('mandatory')
nvIcmpstatInRdrcts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInRdrcts.setStatus('mandatory')
nvIcmpstatInEchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInEchs.setStatus('mandatory')
nvIcmpstatInEchRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInEchRps.setStatus('mandatory')
nvIcmpstatInTmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmSts.setStatus('mandatory')
nvIcmpstatInTmStRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmStRps.setStatus('mandatory')
nvIcmpstatInAdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInAdMs.setStatus('mandatory')
nvIcmpstatInAdMsRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInAdMsRps.setStatus('mandatory')
nvIcmpstatOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutMsgs.setStatus('mandatory')
nvIcmpstatOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutErrs.setStatus('mandatory')
nvIcmpstatOutDstUnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutDstUnrs.setStatus('mandatory')
nvIcmpstatOutTmExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmExcds.setStatus('mandatory')
nvIcmpstatOutPrmPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutPrmPrbs.setStatus('mandatory')
nvIcmpstatOutSrcQus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutSrcQus.setStatus('mandatory')
nvIcmpstatOutRdrcts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutRdrcts.setStatus('mandatory')
nvIcmpstatOutEchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutEchs.setStatus('mandatory')
nvIcmpstatOutEchRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutEchRps.setStatus('mandatory')
nvIcmpstatOutTmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmSts.setStatus('mandatory')
nvIcmpstatOutTmStRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmStRps.setStatus('mandatory')
nvIcmpstatOutAdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutAdMs.setStatus('mandatory')
nvIcmpstatOutAdMsRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutAdMsRps.setStatus('mandatory')
nvIcmpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatDtreset.setStatus('mandatory')
nvIptrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 7))
nvIptrunkMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkMaxRec.setStatus('mandatory')
nvIptrunkNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkNumRec.setStatus('mandatory')
nvIptrunkTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3), )
if mibBuilder.loadTexts: nvIptrunkTable.setStatus('mandatory')
nvIptrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIptrunkIndex"))
if mibBuilder.loadTexts: nvIptrunkEntry.setStatus('mandatory')
nvIptrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkIndex.setStatus('mandatory')
nvIptrunkIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkIpaddr.setStatus('mandatory')
nvIptrunkDstiptrnk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkDstiptrnk.setStatus('mandatory')
nvIptrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkStatus.setStatus('mandatory')
nvIpcpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 8))
nvIpcpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfMaxRec.setStatus('mandatory')
nvIpcpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfNumRec.setStatus('mandatory')
nvIpcpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3), )
if mibBuilder.loadTexts: nvIpcpconfTable.setStatus('mandatory')
nvIpcpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpcpconfIndex"))
if mibBuilder.loadTexts: nvIpcpconfEntry.setStatus('mandatory')
nvIpcpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfIndex.setStatus('mandatory')
nvIpcpconfLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfLcp.setStatus('mandatory')
nvIpcpconfCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfCompress.setStatus('mandatory')
nvIpcpconfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfTest.setStatus('mandatory')
nvIpcpconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfProfile.setStatus('mandatory')
nvIpcpconfDnsadd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfDnsadd1.setStatus('mandatory')
nvIpcpconfDnsadd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfDnsadd2.setStatus('mandatory')
nvIpcpconfNbnsadd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfNbnsadd1.setStatus('mandatory')
nvIpcpconfNbnsadd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfNbnsadd2.setStatus('mandatory')
nvIpcpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfStatus.setStatus('mandatory')
nvTcpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 1))
nvTcpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatMaxRec.setStatus('mandatory')
nvTcpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatNumRec.setStatus('mandatory')
nvTcpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3), )
if mibBuilder.loadTexts: nvTcpstatTable.setStatus('mandatory')
nvTcpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpstatIndex"))
if mibBuilder.loadTexts: nvTcpstatEntry.setStatus('mandatory')
nvTcpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatIndex.setStatus('mandatory')
nvTcpstatConnattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConnattempts.setStatus('mandatory')
nvTcpstatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatAccepts.setStatus('mandatory')
nvTcpstatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConnects.setStatus('mandatory')
nvTcpstatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDrops.setStatus('mandatory')
nvTcpstatConndrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConndrops.setStatus('mandatory')
nvTcpstatCloseds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatCloseds.setStatus('mandatory')
nvTcpstatSegstimeds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSegstimeds.setStatus('mandatory')
nvTcpstatRttupdateds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRttupdateds.setStatus('mandatory')
nvTcpstatDelacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDelacks.setStatus('mandatory')
nvTcpstatTimeoutdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatTimeoutdrops.setStatus('mandatory')
nvTcpstatRexmttimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRexmttimeos.setStatus('mandatory')
nvTcpstatPersisttimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatPersisttimeos.setStatus('mandatory')
nvTcpstatKeeptimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeeptimeos.setStatus('mandatory')
nvTcpstatKeepprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeepprobes.setStatus('mandatory')
nvTcpstatKeepdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeepdrops.setStatus('mandatory')
nvTcpstatSndtotals = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndtotals.setStatus('mandatory')
nvTcpstatSndpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndpacks.setStatus('mandatory')
nvTcpstatSndbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndbytes.setStatus('mandatory')
nvTcpstatSndrexmitpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndrexmitpacks.setStatus('mandatory')
nvTcpstatSndrexmitbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndrexmitbytes.setStatus('mandatory')
nvTcpstatSndacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndacks.setStatus('mandatory')
nvTcpstatSndprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndprobes.setStatus('mandatory')
nvTcpstatSndurgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndurgs.setStatus('mandatory')
nvTcpstatSndwinups = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndwinups.setStatus('mandatory')
nvTcpstatSndctrls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndctrls.setStatus('mandatory')
nvTcpstatRcvtotals = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvtotals.setStatus('mandatory')
nvTcpstatRcvpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpacks.setStatus('mandatory')
nvTcpstatRcvbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbytes.setStatus('mandatory')
nvTcpstatRcvbadsums = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbadsums.setStatus('mandatory')
nvTcpstatRcvbadoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbadoffs.setStatus('mandatory')
nvTcpstatRcvshorts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvshorts.setStatus('mandatory')
nvTcpstatRcvduppacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvduppacks.setStatus('mandatory')
nvTcpstatRcvdupbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvdupbytes.setStatus('mandatory')
nvTcpstatRcvpartduppacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpartduppacks.setStatus('mandatory')
nvTcpstatRcvpartdupbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpartdupbytes.setStatus('mandatory')
nvTcpstatRcvoopacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvoopacks.setStatus('mandatory')
nvTcpstatRcvoobytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvoobytes.setStatus('mandatory')
nvTcpstatRcvpackafterwins = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpackafterwins.setStatus('mandatory')
nvTcpstatRcvbyteafterwins = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbyteafterwins.setStatus('mandatory')
nvTcpstatRcvaftercloses = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvaftercloses.setStatus('mandatory')
nvTcpstatRcvwinprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvwinprobes.setStatus('mandatory')
nvTcpstatRcvdupacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvdupacks.setStatus('mandatory')
nvTcpstatRcvacktoomuchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvacktoomuchs.setStatus('mandatory')
nvTcpstatRcvackpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvackpacks.setStatus('mandatory')
nvTcpstatRcvackbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvackbytes.setStatus('mandatory')
nvTcpstatRcvwinupds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvwinupds.setStatus('mandatory')
nvTcpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDtreset.setStatus('mandatory')
nvTcpcnstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 2))
nvTcpcnstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatMaxRec.setStatus('mandatory')
nvTcpcnstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatNumRec.setStatus('mandatory')
nvTcpcnstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3), )
if mibBuilder.loadTexts: nvTcpcnstatTable.setStatus('mandatory')
nvTcpcnstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpcnstatIndex"))
if mibBuilder.loadTexts: nvTcpcnstatEntry.setStatus('mandatory')
nvTcpcnstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatIndex.setStatus('mandatory')
nvTcpcnstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("null", 1), ("closed", 2), ("listen", 3), ("syncsent", 4), ("syncrcv", 5), ("established", 6), ("wait1", 7), ("wait2", 8), ("closewait", 9), ("lastack", 10), ("closing", 11), ("timewait", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatState.setStatus('mandatory')
nvTcpcnstatLocaladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatLocaladdr.setStatus('mandatory')
nvTcpcnstatLocalport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatLocalport.setStatus('mandatory')
nvTcpcnstatRemaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatRemaddr.setStatus('mandatory')
nvTcpcnstatRemport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatRemport.setStatus('mandatory')
nvTcpcnstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatDtreset.setStatus('mandatory')
nvTcprstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 3))
nvTcprstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatMaxRec.setStatus('mandatory')
nvTcprstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatNumRec.setStatus('mandatory')
nvTcprstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3), )
if mibBuilder.loadTexts: nvTcprstatTable.setStatus('mandatory')
nvTcprstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcprstatIndex"))
if mibBuilder.loadTexts: nvTcprstatEntry.setStatus('mandatory')
nvTcprstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatIndex.setStatus('mandatory')
nvTcprstatInport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatInport.setStatus('mandatory')
nvTcprstatOutport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatOutport.setStatus('mandatory')
nvTcprstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatService.setStatus('mandatory')
nvTcprstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatDtreset.setStatus('mandatory')
nvTslotconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 6))
nvTslotconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfMaxRec.setStatus('mandatory')
nvTslotconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfNumRec.setStatus('mandatory')
nvTslotconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3), )
if mibBuilder.loadTexts: nvTslotconfTable.setStatus('mandatory')
nvTslotconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTslotconfIndex"))
if mibBuilder.loadTexts: nvTslotconfEntry.setStatus('mandatory')
nvTslotconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfIndex.setStatus('mandatory')
nvTslotconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfName.setStatus('mandatory')
nvTslotconfOrigans = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("originate", 2), ("answer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfOrigans.setStatus('mandatory')
nvTslotconfTcpprof = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfTcpprof.setStatus('mandatory')
nvTslotconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfReserve1.setStatus('mandatory')
nvTslotconfReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfReserve2.setStatus('mandatory')
nvTslotconfMaxrxbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfMaxrxbuf.setStatus('mandatory')
nvTslotconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfEnable.setStatus('mandatory')
nvTslotconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfStatus.setStatus('mandatory')
nvTslotconfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ver0", 2), ("ver1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfVersion.setStatus('mandatory')
nvTslotconfPeertsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfPeertsid.setStatus('mandatory')
nvTslotconfPeeripadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfPeeripadr.setStatus('mandatory')
nvTslotstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 7))
nvTslotstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatMaxRec.setStatus('mandatory')
nvTslotstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumRec.setStatus('mandatory')
nvTslotstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3), )
if mibBuilder.loadTexts: nvTslotstatTable.setStatus('mandatory')
nvTslotstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTslotstatIndex"))
if mibBuilder.loadTexts: nvTslotstatEntry.setStatus('mandatory')
nvTslotstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatIndex.setStatus('mandatory')
nvTslotstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatName.setStatus('mandatory')
nvTslotstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatService.setStatus('mandatory')
nvTslotstatServiceid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatServiceid.setStatus('mandatory')
nvTslotstatOpstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("idle", 2), ("conreq", 3), ("conwait", 4), ("conn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatOpstate.setStatus('mandatory')
nvTslotstatRemipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatRemipaddr.setStatus('mandatory')
nvTslotstatRemtsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatRemtsid.setStatus('mandatory')
nvTslotstatTcpcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTcpcn.setStatus('mandatory')
nvTslotstatNumcon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumcon.setStatus('mandatory')
nvTslotstatNumfailcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumfailcn.setStatus('mandatory')
nvTslotstatTotrxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTotrxfrm.setStatus('mandatory')
nvTslotstatTottxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTottxfrm.setStatus('mandatory')
nvTslotstatCurtxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurtxfrm.setStatus('mandatory')
nvTslotstatCurrxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurrxfrm.setStatus('mandatory')
nvTslotstatCurdrprx = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurdrprx.setStatus('mandatory')
nvTslotstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatDtreset.setStatus('mandatory')
nvTcpprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 8))
nvTcpprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofMaxRec.setStatus('mandatory')
nvTcpprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofNumRec.setStatus('mandatory')
nvTcpprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3), )
if mibBuilder.loadTexts: nvTcpprofTable.setStatus('mandatory')
nvTcpprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpprofIndex"))
if mibBuilder.loadTexts: nvTcpprofEntry.setStatus('mandatory')
nvTcpprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofIndex.setStatus('mandatory')
nvTcpprofProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofProfname.setStatus('mandatory')
nvTcpprofKeepidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepidle.setStatus('mandatory')
nvTcpprofKeepprbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepprbs.setStatus('mandatory')
nvTcpprofKeepintvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepintvl.setStatus('mandatory')
nvTcpprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofStatus.setStatus('mandatory')
nvNsockconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 4))
nvNsockconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfMaxRec.setStatus('mandatory')
nvNsockconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfNumRec.setStatus('mandatory')
nvNsockconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3), )
if mibBuilder.loadTexts: nvNsockconfTable.setStatus('mandatory')
nvNsockconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNsockconfIndex"))
if mibBuilder.loadTexts: nvNsockconfEntry.setStatus('mandatory')
nvNsockconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfIndex.setStatus('mandatory')
nvNsockconfMaxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfMaxconn.setStatus('mandatory')
nvNsockconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfStatus.setStatus('mandatory')
nvNsockconfDefport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfDefport.setStatus('mandatory')
nvNsockmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 5))
nvNsockmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapMaxRec.setStatus('mandatory')
nvNsockmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapNumRec.setStatus('mandatory')
nvNsockmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3), )
if mibBuilder.loadTexts: nvNsockmapTable.setStatus('mandatory')
nvNsockmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNsockmapIndex"))
if mibBuilder.loadTexts: nvNsockmapEntry.setStatus('mandatory')
nvNsockmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapIndex.setStatus('mandatory')
nvNsockmapOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("nbus", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapOrigin.setStatus('mandatory')
nvNsockmapService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("telnet", 2), ("pos", 3), ("x25", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapService.setStatus('mandatory')
nvNsockmapMaxsessn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapMaxsessn.setStatus('mandatory')
nvNsockmapNbusport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapNbusport.setStatus('mandatory')
nvNsockmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapNetaddr.setStatus('mandatory')
nvNsockmapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapUserdata.setStatus('mandatory')
nvNsockmapTcpport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapTcpport.setStatus('mandatory')
nvNsockmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapIpaddr.setStatus('mandatory')
nvNsockmapTcpmsglen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vap", 2), ("bin2", 3), ("bin3", 4), ("bin4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapTcpmsglen.setStatus('mandatory')
nvNsockmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapStatus.setStatus('mandatory')
nvFtpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18, 1))
nvFtpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfMaxRec.setStatus('mandatory')
nvFtpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfNumRec.setStatus('mandatory')
nvFtpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3), )
if mibBuilder.loadTexts: nvFtpconfTable.setStatus('mandatory')
nvFtpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFtpconfIndex"))
if mibBuilder.loadTexts: nvFtpconfEntry.setStatus('mandatory')
nvFtpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfIndex.setStatus('mandatory')
nvFtpconfReqaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfReqaddr.setStatus('mandatory')
nvFtpconfUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfUsername.setStatus('mandatory')
nvFtpconfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfPassword.setStatus('mandatory')
nvFtpconfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfTimeout.setStatus('mandatory')
nvFtpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfStatus.setStatus('mandatory')
nvFtpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18, 2))
nvFtpstatIndex = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatIndex.setStatus('mandatory')
nvFtpstatServaddr = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatServaddr.setStatus('mandatory')
nvFtpstatNumreqs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatNumreqs.setStatus('mandatory')
nvFtpstatConnects = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatConnects.setStatus('mandatory')
nvFtpstatConnfails = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatConnfails.setStatus('mandatory')
nvFtpstatTotalfirvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfirvs.setStatus('mandatory')
nvFtpstatTotalfisds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfisds.setStatus('mandatory')
nvFtpstatTotalkbyrvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalkbyrvs.setStatus('mandatory')
nvFtpstatTotalkbysds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalkbysds.setStatus('mandatory')
nvFtpstatClientaddr = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatClientaddr.setStatus('mandatory')
nvFtpstatCurrstat = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closed", 1), ("copen", 2), ("bothopen", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrstat.setStatus('mandatory')
nvFtpstatCommstat = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cmdok", 2), ("cmdfail", 3), ("cmderr", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCommstat.setStatus('mandatory')
nvFtpstatTotalsucs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalsucs.setStatus('mandatory')
nvFtpstatTotalfals = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfals.setStatus('mandatory')
nvFtpstatTotalerrs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalerrs.setStatus('mandatory')
nvFtpstatCurrfirecs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrfirecs.setStatus('mandatory')
nvFtpstatCurrfisnds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrfisnds.setStatus('mandatory')
nvFtpstatCurrkbyrvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrkbyrvs.setStatus('mandatory')
nvFtpstatCurrkbysds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrkbysds.setStatus('mandatory')
nvFtpstatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatDtreset.setStatus('mandatory')
nvTnconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 1))
nvTnconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfMaxRec.setStatus('mandatory')
nvTnconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfNumRec.setStatus('mandatory')
nvTnconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3), )
if mibBuilder.loadTexts: nvTnconfTable.setStatus('mandatory')
nvTnconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnconfIndex"))
if mibBuilder.loadTexts: nvTnconfEntry.setStatus('mandatory')
nvTnconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfIndex.setStatus('mandatory')
nvTnconfNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfNumSess.setStatus('mandatory')
nvTnconfDeftnclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDeftnclass.setStatus('mandatory')
nvTnconfDefiticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefiticlass.setStatus('mandatory')
nvTnconfDefminbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefminbspace.setStatus('mandatory')
nvTnconfDefmaxbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefmaxbspace.setStatus('mandatory')
nvTnclass = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 2))
nvTnclassMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassMaxRec.setStatus('mandatory')
nvTnclassNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassNumRec.setStatus('mandatory')
nvTnclassTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3), )
if mibBuilder.loadTexts: nvTnclassTable.setStatus('mandatory')
nvTnclassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnclassIndex"))
if mibBuilder.loadTexts: nvTnclassEntry.setStatus('mandatory')
nvTnclassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassIndex.setStatus('mandatory')
nvTnclassClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassClassname.setStatus('mandatory')
nvTnclassAobreak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassAobreak.setStatus('mandatory')
nvTnclassIpcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassIpcmd.setStatus('mandatory')
nvTnclassGoahead = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("suppress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassGoahead.setStatus('mandatory')
nvTnclassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassStatus.setStatus('mandatory')
nvTnmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 3))
nvTnmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapMaxRec.setStatus('mandatory')
nvTnmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapNumRec.setStatus('mandatory')
nvTnmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3), )
if mibBuilder.loadTexts: nvTnmapTable.setStatus('mandatory')
nvTnmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnmapIndex"))
if mibBuilder.loadTexts: nvTnmapEntry.setStatus('mandatory')
nvTnmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapIndex.setStatus('mandatory')
nvTnmapPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapPortnum.setStatus('mandatory')
nvTnmapTnclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapTnclass.setStatus('mandatory')
nvTnmapIticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapIticlass.setStatus('mandatory')
nvTnmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapStatus.setStatus('mandatory')
nvTnstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 4))
nvTnstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatMaxRec.setStatus('mandatory')
nvTnstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatNumRec.setStatus('mandatory')
nvTnstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3), )
if mibBuilder.loadTexts: nvTnstatTable.setStatus('mandatory')
nvTnstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnstatIndex"))
if mibBuilder.loadTexts: nvTnstatEntry.setStatus('mandatory')
nvTnstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatIndex.setStatus('mandatory')
nvTnstatPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatPortnum.setStatus('mandatory')
nvTnstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disconnected", 1), ("connecting", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatStatus.setStatus('mandatory')
nvTnstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("linemode", 2), ("binary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatMode.setStatus('mandatory')
nvTnstatLastCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatLastCmd.setStatus('mandatory')
nvTnstatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatOptions.setStatus('mandatory')
nvTnstatClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatClientAddr.setStatus('mandatory')
nvTncconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 5))
nvTncconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfMaxRec.setStatus('mandatory')
nvTncconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfNumRec.setStatus('mandatory')
nvTncconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3), )
if mibBuilder.loadTexts: nvTncconfTable.setStatus('mandatory')
nvTncconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncconfIndex"))
if mibBuilder.loadTexts: nvTncconfEntry.setStatus('mandatory')
nvTncconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfIndex.setStatus('mandatory')
nvTncconfNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfNumSess.setStatus('mandatory')
nvTncconfX3parms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfX3parms.setStatus('mandatory')
nvTncconfSetact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfSetact.setStatus('mandatory')
nvTncconfIdletim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfIdletim.setStatus('mandatory')
nvTncconfEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfEscape.setStatus('mandatory')
nvTncconfEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfEcho.setStatus('mandatory')
nvTncconfInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfInterrupt.setStatus('mandatory')
nvTncconfQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfQuit.setStatus('mandatory')
nvTncconfFout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfFout.setStatus('mandatory')
nvTncconfErase = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfErase.setStatus('mandatory')
nvTncconfKill = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfKill.setStatus('mandatory')
nvTncconfAyt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfAyt.setStatus('mandatory')
nvTncconfSuspend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfSuspend.setStatus('mandatory')
nvTncconfDnsaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfDnsaddr.setStatus('mandatory')
nvTncconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfStatus.setStatus('mandatory')
nvTncmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 6))
nvTncmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapMaxRec.setStatus('mandatory')
nvTncmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapNumRec.setStatus('mandatory')
nvTncmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3), )
if mibBuilder.loadTexts: nvTncmapTable.setStatus('mandatory')
nvTncmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncmapIndex"))
if mibBuilder.loadTexts: nvTncmapEntry.setStatus('mandatory')
nvTncmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapIndex.setStatus('mandatory')
nvTncmapNetad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapNetad.setStatus('mandatory')
nvTncmapUsdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapUsdata.setStatus('mandatory')
nvTncmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapIpaddr.setStatus('mandatory')
nvTncmapTcppn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapTcppn.setStatus('mandatory')
nvTncmapX3parms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapX3parms.setStatus('mandatory')
nvTncmapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asci", 1), ("binary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapMode.setStatus('mandatory')
nvTncmapSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapSecure.setStatus('mandatory')
nvTncmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapStatus.setStatus('mandatory')
nvTncstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 7))
nvTncstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatMaxRec.setStatus('mandatory')
nvTncstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatNumRec.setStatus('mandatory')
nvTncstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3), )
if mibBuilder.loadTexts: nvTncstatTable.setStatus('mandatory')
nvTncstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncstatIndex"))
if mibBuilder.loadTexts: nvTncstatEntry.setStatus('mandatory')
nvTncstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatIndex.setStatus('mandatory')
nvTncstatSessnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatSessnum.setStatus('mandatory')
nvTncstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discon", 1), ("cnectg", 2), ("cnetctd", 3), ("cmd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatStatus.setStatus('mandatory')
nvTncstatDnsidx = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatDnsidx.setStatus('mandatory')
nvTncstatCalladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatCalladdr.setStatus('mandatory')
nvTncstatCalldata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatCalldata.setStatus('mandatory')
nvTncstatIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatIpaddr.setStatus('mandatory')
nvTncstatPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatPortnum.setStatus('mandatory')
nvTncstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("linemode", 2), ("binary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatMode.setStatus('mandatory')
nvTncstatX29err = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatX29err.setStatus('mandatory')
nvRadconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 1))
nvRadconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfMaxRec.setStatus('mandatory')
nvRadconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfNumRec.setStatus('mandatory')
nvRadconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3), )
if mibBuilder.loadTexts: nvRadconfTable.setStatus('mandatory')
nvRadconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadconfIndex"))
if mibBuilder.loadTexts: nvRadconfEntry.setStatus('mandatory')
nvRadconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfIndex.setStatus('mandatory')
nvRadconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfName.setStatus('mandatory')
nvRadconfSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfSecret.setStatus('mandatory')
nvRadconfN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfN1.setStatus('mandatory')
nvRadconfT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfT1.setStatus('mandatory')
nvRadconfAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("adapt", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct.setStatus('mandatory')
nvRadconfNumdigits = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNumdigits.setStatus('mandatory')
nvRadconfAuth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth1.setStatus('mandatory')
nvRadconfAuth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth2.setStatus('mandatory')
nvRadconfAuth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth3.setStatus('mandatory')
nvRadconfAcct1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct1.setStatus('mandatory')
nvRadconfAcct2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct2.setStatus('mandatory')
nvRadconfAcct3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct3.setStatus('mandatory')
nvRadconfAcctauth = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secret", 1), ("zero", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcctauth.setStatus('mandatory')
nvRadconfAuth1port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth1port.setStatus('mandatory')
nvRadconfAuth2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth2port.setStatus('mandatory')
nvRadconfAuth3port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth3port.setStatus('mandatory')
nvRadconfAcct1port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct1port.setStatus('mandatory')
nvRadconfAcct2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct2port.setStatus('mandatory')
nvRadconfAcct3port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct3port.setStatus('mandatory')
nvRadconfAttrchk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAttrchk.setStatus('mandatory')
nvRadconfDnsatt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfDnsatt1.setStatus('mandatory')
nvRadconfDnsatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfDnsatt2.setStatus('mandatory')
nvRadconfNbnsatt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNbnsatt1.setStatus('mandatory')
nvRadconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfStatus.setStatus('mandatory')
nvRadconfNbnsatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNbnsatt2.setStatus('mandatory')
nvRaduser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 2))
nvRaduserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserMaxRec.setStatus('mandatory')
nvRaduserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserNumRec.setStatus('mandatory')
nvRaduserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3), )
if mibBuilder.loadTexts: nvRaduserTable.setStatus('mandatory')
nvRaduserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRaduserIndex"))
if mibBuilder.loadTexts: nvRaduserEntry.setStatus('mandatory')
nvRaduserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserIndex.setStatus('mandatory')
nvRaduserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserUsername.setStatus('mandatory')
nvRaduserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserPasswd.setStatus('mandatory')
nvRaduserRespmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserRespmsg.setStatus('mandatory')
nvRaduserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserStatus.setStatus('mandatory')
nvRadcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 3))
nvRadcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatMaxRec.setStatus('mandatory')
nvRadcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNumRec.setStatus('mandatory')
nvRadcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3), )
if mibBuilder.loadTexts: nvRadcstatTable.setStatus('mandatory')
nvRadcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadcstatIndex"))
if mibBuilder.loadTexts: nvRadcstatEntry.setStatus('mandatory')
nvRadcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatIndex.setStatus('mandatory')
nvRadcstatRadAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatRadAdminS.setStatus('mandatory')
nvRadcstatRadcOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatRadcOperS.setStatus('mandatory')
nvRadcstatNAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuths.setStatus('mandatory')
nvRadcstatNAuthLocl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthLocl.setStatus('mandatory')
nvRadcstatNAuthLost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthLost.setStatus('mandatory')
nvRadcstatNAuthRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthRtry.setStatus('mandatory')
nvRadcstatNAuth1Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth1Acc.setStatus('mandatory')
nvRadcstatNAuth1Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth1Rej.setStatus('mandatory')
nvRadcstatNAuth2Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth2Acc.setStatus('mandatory')
nvRadcstatNAuth2Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth2Rej.setStatus('mandatory')
nvRadcstatNAuth3Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth3Acc.setStatus('mandatory')
nvRadcstatNAuth3Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth3Rej.setStatus('mandatory')
nvRadcstatNAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct.setStatus('mandatory')
nvRadcstatNAcctLost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcctLost.setStatus('mandatory')
nvRadcstatNAcctRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcctRtry.setStatus('mandatory')
nvRadcstatNAcct1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct1.setStatus('mandatory')
nvRadcstatNAcct2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct2.setStatus('mandatory')
nvRadcstatNAcct3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct3.setStatus('mandatory')
nvRadcstatNSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNSilent.setStatus('mandatory')
nvRadcstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatDtreset.setStatus('mandatory')
nvRadustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 4))
nvRadustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatMaxRec.setStatus('mandatory')
nvRadustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNumRec.setStatus('mandatory')
nvRadustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3), )
if mibBuilder.loadTexts: nvRadustatTable.setStatus('mandatory')
nvRadustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadustatIndex"))
if mibBuilder.loadTexts: nvRadustatEntry.setStatus('mandatory')
nvRadustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatIndex.setStatus('mandatory')
nvRadustatRaduOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("open", 2), ("ready", 3), ("waiting", 4), ("active", 5), ("astart", 6), ("astop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatRaduOperS.setStatus('mandatory')
nvRadustatSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSessionId.setStatus('mandatory')
nvRadustatUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatUserId.setStatus('mandatory')
nvRadustatNasPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNasPort.setStatus('mandatory')
nvRadustatNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNasIpAddr.setStatus('mandatory')
nvRadustatFrmIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmIpaddr.setStatus('mandatory')
nvRadustatFrmIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmIpMask.setStatus('mandatory')
nvRadustatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatState.setStatus('mandatory')
nvRadustatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatClass.setStatus('mandatory')
nvRadustatSType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("login", 2), ("framed", 3), ("callBackLogin", 4), ("callBackFramed", 5), ("outboundUser", 6), ("adminUser", 7), ("execUser", 8), ("authOnly", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSType.setStatus('mandatory')
nvRadustatFrmProto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSet", 1), ("ppp", 2), ("slip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmProto.setStatus('mandatory')
nvRadustatFrmRting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("sendRtPkt", 2), ("listenRtPkt", 3), ("sendListen", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmRting.setStatus('mandatory')
nvRadustatSTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSTime.setStatus('mandatory')
nvRadustatFrmMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmMtu.setStatus('mandatory')
nvRadustatFrmRt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmRt.setStatus('mandatory')
nvRadustatSTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSTimeout.setStatus('mandatory')
nvRadustatITimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatITimeout.setStatus('mandatory')
nvRadustatDFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatDFilter.setStatus('mandatory')
nvRadustatReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatReqId.setStatus('mandatory')
nvRadustatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatDtreset.setStatus('mandatory')
nvSnmpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45, 1))
nvSnmpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfMaxRec.setStatus('mandatory')
nvSnmpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfNumRec.setStatus('mandatory')
nvSnmpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3), )
if mibBuilder.loadTexts: nvSnmpconfTable.setStatus('mandatory')
nvSnmpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSnmpconfIndex"))
if mibBuilder.loadTexts: nvSnmpconfEntry.setStatus('mandatory')
nvSnmpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfIndex.setStatus('mandatory')
nvSnmpconflocation = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconflocation.setStatus('mandatory')
nvSnmpconfcontact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfcontact.setStatus('mandatory')
nvSnmpconfsysname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfsysname.setStatus('mandatory')
nvSnmpconfauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfauthen.setStatus('mandatory')
nvSnmpconfstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfstatus.setStatus('mandatory')
nvSnmpmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45, 2))
nvSnmpmgrMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrMaxRec.setStatus('mandatory')
nvSnmpmgrNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrNumRec.setStatus('mandatory')
nvSnmpmgrTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3), )
if mibBuilder.loadTexts: nvSnmpmgrTable.setStatus('mandatory')
nvSnmpmgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSnmpmgrIndex"))
if mibBuilder.loadTexts: nvSnmpmgrEntry.setStatus('mandatory')
nvSnmpmgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrIndex.setStatus('mandatory')
nvSnmpmgrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrIp.setStatus('mandatory')
nvSnmpmgrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrComm.setStatus('mandatory')
nvSnmpmgrAccPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ro", 1), ("rw", 2), ("wo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrAccPriv.setStatus('mandatory')
nvSnmpmgrSndTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrSndTrap.setStatus('mandatory')
nvSnmpmgrstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrstatus.setStatus('mandatory')
nvPosprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 1))
nvPosprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofMaxRec.setStatus('mandatory')
nvPosprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofNumRec.setStatus('mandatory')
nvPosprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3), )
if mibBuilder.loadTexts: nvPosprofTable.setStatus('mandatory')
nvPosprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosprofIndex"))
if mibBuilder.loadTexts: nvPosprofEntry.setStatus('mandatory')
nvPosprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofIndex.setStatus('mandatory')
nvPosprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofName.setStatus('mandatory')
nvPosprofSize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("b128", 1), ("b256", 2), ("b512", 3), ("b1024", 4), ("b2048", 5), ("b4096", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofSize.setStatus('mandatory')
nvPosprofNumchan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofNumchan.setStatus('mandatory')
nvPosprofPermchan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPermchan.setStatus('mandatory')
nvPosprofDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uplink", 1), ("dnlink", 2), ("nmslink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofDirection.setStatus('mandatory')
nvPosprofProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sdlc", 1), ("x25", 2), ("visa", 3), ("tcp", 4), ("spdh", 5), ("dfono", 6), ("dtfspc", 7), ("dtfgen", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofProtocol.setStatus('mandatory')
nvPosprofAddrtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("tpdu", 2), ("fast3", 3), ("fast6", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofAddrtype.setStatus('mandatory')
nvPosprofUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofUserdata.setStatus('mandatory')
nvPosprofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("m8n1", 1), ("m7e1", 2), ("m7o1", 3), ("m7m1", 4), ("m7s1", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofMode.setStatus('mandatory')
nvPosprofIdletime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofIdletime.setStatus('mandatory')
nvPosprofRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("datartg", 1), ("tpdurtg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRouting.setStatus('mandatory')
nvPosprofTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ascii", 2), ("ebcdic", 3), ("fastpos", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTranslate.setStatus('mandatory')
nvPosprofTpduaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTpduaddr.setStatus('mandatory')
nvPosprofEftrspto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofEftrspto.setStatus('mandatory')
nvPosprofRetrytim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRetrytim.setStatus('mandatory')
nvPosprofNretry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofNretry.setStatus('mandatory')
nvPosprofActsupl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sndnak", 2), ("reverse", 3), ("muzo", 4), ("closelcn", 5), ("fdr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofActsupl.setStatus('mandatory')
nvPosprofResptim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofResptim.setStatus('mandatory')
nvPosprofPolltim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPolltim.setStatus('mandatory')
nvPosprofPolladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPolladdr.setStatus('mandatory')
nvPosprofSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofSkip.setStatus('mandatory')
nvPosprofTcpmsglen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vap", 2), ("bin2", 3), ("bin3", 4), ("bin4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTcpmsglen.setStatus('mandatory')
nvPosprofPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPortname.setStatus('mandatory')
nvPosprofRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRsrcpool.setStatus('mandatory')
nvPosprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofStatus.setStatus('mandatory')
nvPosconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 2))
nvPosconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfMaxRec.setStatus('mandatory')
nvPosconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfNumRec.setStatus('mandatory')
nvPosconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3), )
if mibBuilder.loadTexts: nvPosconfTable.setStatus('mandatory')
nvPosconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosconfIndex"))
if mibBuilder.loadTexts: nvPosconfEntry.setStatus('mandatory')
nvPosconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfIndex.setStatus('mandatory')
nvPosconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfName.setStatus('mandatory')
nvPosconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfEnable.setStatus('mandatory')
nvPosconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfProfile.setStatus('mandatory')
nvPosconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfStatus.setStatus('mandatory')
nvPosmsgmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 3))
nvPosmsgmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapMaxRec.setStatus('mandatory')
nvPosmsgmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapNumRec.setStatus('mandatory')
nvPosmsgmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3), )
if mibBuilder.loadTexts: nvPosmsgmapTable.setStatus('mandatory')
nvPosmsgmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosmsgmapIndex"))
if mibBuilder.loadTexts: nvPosmsgmapEntry.setStatus('mandatory')
nvPosmsgmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapIndex.setStatus('mandatory')
nvPosmsgmapPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapPattern.setStatus('mandatory')
nvPosmsgmapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapDest.setStatus('mandatory')
nvPosmsgmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapStatus.setStatus('mandatory')
nvPosniimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 4))
nvPosniimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapMaxRec.setStatus('mandatory')
nvPosniimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapNumRec.setStatus('mandatory')
nvPosniimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3), )
if mibBuilder.loadTexts: nvPosniimapTable.setStatus('mandatory')
nvPosniimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosniimapIndex"))
if mibBuilder.loadTexts: nvPosniimapEntry.setStatus('mandatory')
nvPosniimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapIndex.setStatus('mandatory')
nvPosniimapTpduaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapTpduaddr.setStatus('mandatory')
nvPosniimapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapDest.setStatus('mandatory')
nvPosniimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapStatus.setStatus('mandatory')
nvPosnmsmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 5))
nvPosnmsmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapMaxRec.setStatus('mandatory')
nvPosnmsmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapNumRec.setStatus('mandatory')
nvPosnmsmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3), )
if mibBuilder.loadTexts: nvPosnmsmapTable.setStatus('mandatory')
nvPosnmsmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosnmsmapIndex"))
if mibBuilder.loadTexts: nvPosnmsmapEntry.setStatus('mandatory')
nvPosnmsmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapIndex.setStatus('mandatory')
nvPosnmsmapNmsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapNmsid.setStatus('mandatory')
nvPosnmsmapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapDest.setStatus('mandatory')
nvPosnmsmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapStatus.setStatus('mandatory')
nvPosiso = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 6))
nvPosisoMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoMaxRec.setStatus('mandatory')
nvPosisoNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoNumRec.setStatus('mandatory')
nvPosisoTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3), )
if mibBuilder.loadTexts: nvPosisoTable.setStatus('mandatory')
nvPosisoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosisoIndex"))
if mibBuilder.loadTexts: nvPosisoEntry.setStatus('mandatory')
nvPosisoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoIndex.setStatus('mandatory')
nvPosisoName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoName.setStatus('mandatory')
nvPosisoContrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoContrec.setStatus('mandatory')
nvPosisoField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 4), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField2.setStatus('mandatory')
nvPosisoField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 5), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField3.setStatus('mandatory')
nvPosisoField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 6), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField4.setStatus('mandatory')
nvPosisoField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 7), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField5.setStatus('mandatory')
nvPosisoField6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 8), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField6.setStatus('mandatory')
nvPosisoField7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 9), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField7.setStatus('mandatory')
nvPosisoField8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 10), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField8.setStatus('mandatory')
nvPosisoField9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 11), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField9.setStatus('mandatory')
nvPosisoField10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 12), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField10.setStatus('mandatory')
nvPosisoField11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 13), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField11.setStatus('mandatory')
nvPosisoField12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 14), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField12.setStatus('mandatory')
nvPosisoField13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 15), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField13.setStatus('mandatory')
nvPosisoField14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 16), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField14.setStatus('mandatory')
nvPosisoField15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 17), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField15.setStatus('mandatory')
nvPosisoField16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 18), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField16.setStatus('mandatory')
nvPosisoField17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 19), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField17.setStatus('mandatory')
nvPosisoField18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 20), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField18.setStatus('mandatory')
nvPosisoField19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 21), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField19.setStatus('mandatory')
nvPosisoField20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 22), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField20.setStatus('mandatory')
nvPosisoField21 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 23), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField21.setStatus('mandatory')
nvPosisoField22 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 24), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField22.setStatus('mandatory')
nvPosisoField23 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 25), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField23.setStatus('mandatory')
nvPosisoField24 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 26), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField24.setStatus('mandatory')
nvPosisoField25 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 27), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField25.setStatus('mandatory')
nvPosisoField26 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 28), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField26.setStatus('mandatory')
nvPosisoField27 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 29), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField27.setStatus('mandatory')
nvPosisoField28 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 30), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField28.setStatus('mandatory')
nvPosisoField29 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 31), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField29.setStatus('mandatory')
nvPosisoField30 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 32), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField30.setStatus('mandatory')
nvPosisoField31 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 33), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField31.setStatus('mandatory')
nvPosisoField32 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 34), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField32.setStatus('mandatory')
nvPosisoField33 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 35), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField33.setStatus('mandatory')
nvPosisoField34 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 36), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField34.setStatus('mandatory')
nvPosisoField35 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 37), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField35.setStatus('mandatory')
nvPosisoField36 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 38), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField36.setStatus('mandatory')
nvPosisoField37 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 39), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField37.setStatus('mandatory')
nvPosisoField38 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 40), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField38.setStatus('mandatory')
nvPosisoField39 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 41), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField39.setStatus('mandatory')
nvPosisoField40 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 42), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField40.setStatus('mandatory')
nvPosisoField41 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 43), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField41.setStatus('mandatory')
nvPosisoField42 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 44), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField42.setStatus('mandatory')
nvPosisoField43 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 45), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField43.setStatus('mandatory')
nvPosisoField44 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 46), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField44.setStatus('mandatory')
nvPosisoField45 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 47), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField45.setStatus('mandatory')
nvPosisoField46 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 48), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField46.setStatus('mandatory')
nvPosisoField47 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 49), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField47.setStatus('mandatory')
nvPosisoField48 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 50), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField48.setStatus('mandatory')
nvPosisoField49 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 51), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField49.setStatus('mandatory')
nvPosisoField50 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 52), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField50.setStatus('mandatory')
nvPosisoField51 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 53), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField51.setStatus('mandatory')
nvPosisoField52 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 54), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField52.setStatus('mandatory')
nvPosisoField53 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 55), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField53.setStatus('mandatory')
nvPosisoField54 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 56), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField54.setStatus('mandatory')
nvPosisoField55 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 57), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField55.setStatus('mandatory')
nvPosisoField56 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 58), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField56.setStatus('mandatory')
nvPosisoField57 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 59), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField57.setStatus('mandatory')
nvPosisoField58 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 60), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField58.setStatus('mandatory')
nvPosisoField59 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 61), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField59.setStatus('mandatory')
nvPosisoField60 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 62), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField60.setStatus('mandatory')
nvPosisoField61 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 63), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField61.setStatus('mandatory')
nvPosisoField62 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 64), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField62.setStatus('mandatory')
nvPosisoField63 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 65), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField63.setStatus('mandatory')
nvPosisoField64 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 66), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField64.setStatus('mandatory')
nvPosisoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoStatus.setStatus('mandatory')
nvPosvisa = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 7))
nvPosvisaMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaMaxRec.setStatus('mandatory')
nvPosvisaNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaNumRec.setStatus('mandatory')
nvPosvisaTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3), )
if mibBuilder.loadTexts: nvPosvisaTable.setStatus('mandatory')
nvPosvisaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosvisaIndex"))
if mibBuilder.loadTexts: nvPosvisaEntry.setStatus('mandatory')
nvPosvisaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaIndex.setStatus('mandatory')
nvPosvisaName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaName.setStatus('mandatory')
nvPosvisaField1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 3), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField1.setStatus('mandatory')
nvPosvisaField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 4), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField2.setStatus('mandatory')
nvPosvisaField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 5), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField3.setStatus('mandatory')
nvPosvisaField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 6), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField4.setStatus('mandatory')
nvPosvisaField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 7), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField5.setStatus('mandatory')
nvPosvisaField6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 8), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField6.setStatus('mandatory')
nvPosvisaField7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 9), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField7.setStatus('mandatory')
nvPosvisaField8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 10), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField8.setStatus('mandatory')
nvPosvisaField9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 11), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField9.setStatus('mandatory')
nvPosvisaField10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 12), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField10.setStatus('mandatory')
nvPosvisaField11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 13), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField11.setStatus('mandatory')
nvPosvisaField12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 14), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField12.setStatus('mandatory')
nvPosvisaField13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 15), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField13.setStatus('mandatory')
nvPosvisaField14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 16), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField14.setStatus('mandatory')
nvPosvisaField15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 17), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField15.setStatus('mandatory')
nvPosvisaField16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 18), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField16.setStatus('mandatory')
nvPosvisaField17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 19), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField17.setStatus('mandatory')
nvPosvisaField18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 20), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField18.setStatus('mandatory')
nvPosvisaField19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 21), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField19.setStatus('mandatory')
nvPosvisaField20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 22), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField20.setStatus('mandatory')
nvPosvisaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaStatus.setStatus('mandatory')
nvPosstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 8))
nvPosstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatMaxRec.setStatus('mandatory')
nvPosstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumRec.setStatus('mandatory')
nvPosstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3), )
if mibBuilder.loadTexts: nvPosstatTable.setStatus('mandatory')
nvPosstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosstatIndex"))
if mibBuilder.loadTexts: nvPosstatEntry.setStatus('mandatory')
nvPosstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatIndex.setStatus('mandatory')
nvPosstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatName.setStatus('mandatory')
nvPosstatNactivchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNactivchn.setStatus('mandatory')
nvPosstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sdlc", 1), ("x25", 2), ("visa", 3), ("tcp", 4), ("spdh", 5), ("dfono", 6), ("dtfspc", 7), ("dtfgen", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatProtocol.setStatus('mandatory')
nvPosstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumcalls.setStatus('mandatory')
nvPosstatNfailcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNfailcall.setStatus('mandatory')
nvPosstatNumimsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumimsgs.setStatus('mandatory')
nvPosstatNumomsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumomsgs.setStatus('mandatory')
nvPosstatEftreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatEftreqs.setStatus('mandatory')
nvPosstatEftrsps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatEftrsps.setStatus('mandatory')
nvPosstatNmsreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsreqs.setStatus('mandatory')
nvPosstatNmsrsps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsrsps.setStatus('mandatory')
nvPosstatNodatart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNodatart.setStatus('mandatory')
nvPosstatNotpdurt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNotpdurt.setStatus('mandatory')
nvPosstatInvrqtpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatInvrqtpdu.setStatus('mandatory')
nvPosstatNousdest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNousdest.setStatus('mandatory')
nvPosstatQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatQueued.setStatus('mandatory')
nvPosstatCommfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatCommfail.setStatus('mandatory')
nvPosstatInvrstpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatInvrstpdu.setStatus('mandatory')
nvPosstatDnlnkfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatDnlnkfail.setStatus('mandatory')
nvPosstatRspnomtch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatRspnomtch.setStatus('mandatory')
nvPosstatConnfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatConnfail.setStatus('mandatory')
nvPosstatRsptimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatRsptimout.setStatus('mandatory')
nvPosstatNmsbaddst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsbaddst.setStatus('mandatory')
nvPosstatNmsbadhst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsbadhst.setStatus('mandatory')
nvPosstatNbadframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNbadframes.setStatus('mandatory')
nvPosstatNtoolong = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNtoolong.setStatus('mandatory')
nvPosstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatDtreset.setStatus('mandatory')
nvApacsconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 1))
nvApacsconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfMaxRec.setStatus('mandatory')
nvApacsconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfNumRec.setStatus('mandatory')
nvApacsconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3), )
if mibBuilder.loadTexts: nvApacsconfTable.setStatus('mandatory')
nvApacsconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApacsconfIndex"))
if mibBuilder.loadTexts: nvApacsconfEntry.setStatus('mandatory')
nvApacsconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfIndex.setStatus('mandatory')
nvApacsconfNodename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfNodename.setStatus('mandatory')
nvApacsconfSitename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfSitename.setStatus('mandatory')
nvApacsconfHelpphone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfHelpphone.setStatus('mandatory')
nvApacsconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfReserve1.setStatus('mandatory')
nvApacsconfBillingT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT1.setStatus('mandatory')
nvApacsconfBillingT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT2.setStatus('mandatory')
nvApacsconfBillingT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT3.setStatus('mandatory')
nvApacsconfBillingT4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT4.setStatus('mandatory')
nvApacsconfBillingT5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT5.setStatus('mandatory')
nvApacsconfBillingT6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT6.setStatus('mandatory')
nvApacsconfDlrtries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfDlrtries.setStatus('mandatory')
nvApacsconfTimerA = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerA.setStatus('mandatory')
nvApacsconfTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerB.setStatus('mandatory')
nvApacsconfTimerC = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerC.setStatus('mandatory')
nvApacsconfDscdleeot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfDscdleeot.setStatus('mandatory')
nvApacsconfParerrall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfParerrall.setStatus('mandatory')
nvApacsconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfStatus.setStatus('mandatory')
nvAnuaconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 2))
nvAnuaconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfMaxRec.setStatus('mandatory')
nvAnuaconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfNumRec.setStatus('mandatory')
nvAnuaconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3), )
if mibBuilder.loadTexts: nvAnuaconfTable.setStatus('mandatory')
nvAnuaconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAnuaconfIndex"))
if mibBuilder.loadTexts: nvAnuaconfEntry.setStatus('mandatory')
nvAnuaconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfIndex.setStatus('mandatory')
nvAnuaconfLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfLabel1.setStatus('mandatory')
nvAnuaconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfReserve1.setStatus('mandatory')
nvAnuaconfNuaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfNuaAddress.setStatus('mandatory')
nvAnuaconfAltLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfAltLabel.setStatus('mandatory')
nvAnuaconfRsvrReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRsvrReverse.setStatus('mandatory')
nvAnuaconfRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("immed", 2), ("fail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRedirect.setStatus('mandatory')
nvAnuaconfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRetries.setStatus('mandatory')
nvAnuaconfPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfPreempt.setStatus('mandatory')
nvAnuaconfMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("psze-128", 8), ("psze-256", 9), ("psze-512", 10), ("psze-1024", 11), ("psze-2048", 12), ("psze-4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfMaxpsze.setStatus('mandatory')
nvAnuaconfStrippar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfStrippar.setStatus('mandatory')
nvAnuaconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfStatus.setStatus('mandatory')
nvAbillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 3))
nvAbillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatMaxRec.setStatus('mandatory')
nvAbillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatNumRec.setStatus('mandatory')
nvAbillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3), )
if mibBuilder.loadTexts: nvAbillstatTable.setStatus('mandatory')
nvAbillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAbillstatIndex"))
if mibBuilder.loadTexts: nvAbillstatEntry.setStatus('mandatory')
nvAbillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatIndex.setStatus('mandatory')
nvAbillstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatNua.setStatus('mandatory')
nvAbillstatTbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTbcalls.setStatus('mandatory')
nvAbillstatTbtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTbtime.setStatus('mandatory')
nvAbillstatTfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTfail.setStatus('mandatory')
nvAbillstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTxbytes.setStatus('mandatory')
nvAbillstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatRxbytes.setStatus('mandatory')
nvAbillstatB1call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB1call.setStatus('mandatory')
nvAbillstatB1time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB1time.setStatus('mandatory')
nvAbillstatB2call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB2call.setStatus('mandatory')
nvAbillstatB2time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB2time.setStatus('mandatory')
nvAbillstatB3call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB3call.setStatus('mandatory')
nvAbillstatB3time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB3time.setStatus('mandatory')
nvAbillstatB4call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB4call.setStatus('mandatory')
nvAbillstatB4time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB4time.setStatus('mandatory')
nvAbillstatB5call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB5call.setStatus('mandatory')
nvAbillstatB5time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB5time.setStatus('mandatory')
nvAbillstatB6call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB6call.setStatus('mandatory')
nvAbillstatB6time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB6time.setStatus('mandatory')
nvAbillstatB7call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB7call.setStatus('mandatory')
nvAbillstatB7time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB7time.setStatus('mandatory')
nvAbillstatPbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPbcalls.setStatus('mandatory')
nvAbillstatPbtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPbtime.setStatus('mandatory')
nvAbillstatPfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPfail.setStatus('mandatory')
nvAbillstatPtxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPtxbytes.setStatus('mandatory')
nvAbillstatPrxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPrxbytes.setStatus('mandatory')
nvAbillstatP1call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP1call.setStatus('mandatory')
nvAbillstatP1time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP1time.setStatus('mandatory')
nvAbillstatP2call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP2call.setStatus('mandatory')
nvAbillstatP2time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP2time.setStatus('mandatory')
nvAbillstatP3call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP3call.setStatus('mandatory')
nvAbillstatP3time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP3time.setStatus('mandatory')
nvAbillstatP4call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP4call.setStatus('mandatory')
nvAbillstatP4time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP4time.setStatus('mandatory')
nvAbillstatP5call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP5call.setStatus('mandatory')
nvAbillstatP5time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP5time.setStatus('mandatory')
nvAbillstatP6call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP6call.setStatus('mandatory')
nvAbillstatP6time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP6time.setStatus('mandatory')
nvAbillstatP7call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP7call.setStatus('mandatory')
nvAbillstatP7time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP7time.setStatus('mandatory')
nvAbillstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatDtreset.setStatus('mandatory')
nvApmdmstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 4))
nvApmdmstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatMaxRec.setStatus('mandatory')
nvApddmstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApddmstatNumRec.setStatus('mandatory')
nvApmdmstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3), )
if mibBuilder.loadTexts: nvApmdmstatTable.setStatus('mandatory')
nvApmdmstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApmdmstatIndex"))
if mibBuilder.loadTexts: nvApmdmstatEntry.setStatus('mandatory')
nvApmdmstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatIndex.setStatus('mandatory')
nvApmdmstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatSpeed.setStatus('mandatory')
nvApmdmstatTbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTbcalls.setStatus('mandatory')
nvApmdmstatSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatSuccess.setStatus('mandatory')
nvApmdmstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatHostclr.setStatus('mandatory')
nvApmdmstatNwclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatNwclr.setStatus('mandatory')
nvApmdmstatFltrain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatFltrain.setStatus('mandatory')
nvApmdmstatFlsess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatFlsess.setStatus('mandatory')
nvApmdmstatTxpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTxpkt.setStatus('mandatory')
nvApmdmstatRxpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatRxpkt.setStatus('mandatory')
nvApmdmstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTxbytes.setStatus('mandatory')
nvApmdmstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatRxbytes.setStatus('mandatory')
nvApmdmstatB1calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB1calls.setStatus('mandatory')
nvApmdmstatB2calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB2calls.setStatus('mandatory')
nvApmdmstatB3calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB3calls.setStatus('mandatory')
nvApmdmstatB4calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB4calls.setStatus('mandatory')
nvApmdmstatB5calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB5calls.setStatus('mandatory')
nvApmdmstatB6calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB6calls.setStatus('mandatory')
nvApmdmstatB7calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB7calls.setStatus('mandatory')
nvApmdmstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatDtreset.setStatus('mandatory')
nvApacsstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 5))
nvApacsstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatMaxRec.setStatus('mandatory')
nvApacsstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNumRec.setStatus('mandatory')
nvApacsstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3), )
if mibBuilder.loadTexts: nvApacsstatTable.setStatus('mandatory')
nvApacsstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApacsstatIndex"))
if mibBuilder.loadTexts: nvApacsstatEntry.setStatus('mandatory')
nvApacsstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatIndex.setStatus('mandatory')
nvApacsstatNidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNidle.setStatus('mandatory')
nvApacsstatNxidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNxidle.setStatus('mandatory')
nvApacsstatCursimul = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatCursimul.setStatus('mandatory')
nvApacsstatResetdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatResetdate.setStatus('mandatory')
nvApacsstatTcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTcalls.setStatus('mandatory')
nvApacsstatTxnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxnaks.setStatus('mandatory')
nvApacsstatRxnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRxnaks.setStatus('mandatory')
nvApacsstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxbytes.setStatus('mandatory')
nvApacsstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRxbytes.setStatus('mandatory')
nvApacsstatCallrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatCallrcv.setStatus('mandatory')
nvApacsstatFailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatFailneg.setStatus('mandatory')
nvApacsstatNoadrblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNoadrblk.setStatus('mandatory')
nvApacsstatInvadrblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatInvadrblk.setStatus('mandatory')
nvApacsstatNonuamtch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNonuamtch.setStatus('mandatory')
nvApacsstatTrmdscsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdscsu.setStatus('mandatory')
nvApacsstatLoscarsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscarsu.setStatus('mandatory')
nvApacsstatGdadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatGdadrblks.setStatus('mandatory')
nvApacsstatX25clrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25clrcip.setStatus('mandatory')
nvApacsstatActtmocip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatActtmocip.setStatus('mandatory')
nvApacsstatTrmdsccip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdsccip.setStatus('mandatory')
nvApacsstatLoscarcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscarcip.setStatus('mandatory')
nvApacsstatLrcerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLrcerrcip.setStatus('mandatory')
nvApacsstatTmoerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTmoerrcip.setStatus('mandatory')
nvApacsstatX25conns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25conns.setStatus('mandatory')
nvApacsstatX25clrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25clrdat.setStatus('mandatory')
nvApacsstatActtmodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatActtmodat.setStatus('mandatory')
nvApacsstatTrmdscdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdscdat.setStatus('mandatory')
nvApacsstatLoscardat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscardat.setStatus('mandatory')
nvApacsstatDscnoack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDscnoack.setStatus('mandatory')
nvApacsstatDscexcnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDscexcnak.setStatus('mandatory')
nvApacsstatLrcerrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLrcerrdat.setStatus('mandatory')
nvApacsstatBdhostblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatBdhostblk.setStatus('mandatory')
nvApacsstatTrmnodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmnodat.setStatus('mandatory')
nvApacsstatHostnodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatHostnodat.setStatus('mandatory')
nvApacsstatTrmnoack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmnoack.setStatus('mandatory')
nvApacsstatRetrntmo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRetrntmo.setStatus('mandatory')
nvApacsstatRetrnnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRetrnnak.setStatus('mandatory')
nvApacsstatTxenqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxenqs.setStatus('mandatory')
nvApacsstatDleeotsnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDleeotsnt.setStatus('mandatory')
nvApacsstatDleeotrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDleeotrcv.setStatus('mandatory')
nvApacsstatUnxhstclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatUnxhstclr.setStatus('mandatory')
nvApacsstatNwadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNwadrblks.setStatus('mandatory')
nvApacsstatRjadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRjadrblks.setStatus('mandatory')
nvApacsstatNonuaentr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNonuaentr.setStatus('mandatory')
nvApacsstatMaxsimul = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatMaxsimul.setStatus('mandatory')
nvApacsstatN300bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN300bd.setStatus('mandatory')
nvApacsstatN1200bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN1200bd.setStatus('mandatory')
nvApacsstatN2400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN2400bd.setStatus('mandatory')
nvApacsstatN9600bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN9600bd.setStatus('mandatory')
nvApacsstatN14400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN14400bd.setStatus('mandatory')
nvApacsstatN28800bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN28800bd.setStatus('mandatory')
nvApacsstatSimultime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatSimultime.setStatus('mandatory')
nvApacsstatParerrsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrsu.setStatus('mandatory')
nvApacsstatParerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrcip.setStatus('mandatory')
nvApacsstatParerrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrdat.setStatus('mandatory')
nvApacsstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDtreset.setStatus('mandatory')
nvBillconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 6))
nvBillconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconfMaxRec.setStatus('mandatory')
nvBillconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconfNumRec.setStatus('mandatory')
nvBillconf1Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3), )
if mibBuilder.loadTexts: nvBillconf1Table.setStatus('mandatory')
nvBillconf1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillconf1Index"))
if mibBuilder.loadTexts: nvBillconf1Entry.setStatus('mandatory')
nvBillconf1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconf1Index.setStatus('mandatory')
nvBillconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfEnable.setStatus('mandatory')
nvBillconfSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSegsize.setStatus('mandatory')
nvBillconfSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1.setStatus('mandatory')
nvBillconfSet1nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua1.setStatus('mandatory')
nvBillconfSet1nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua2.setStatus('mandatory')
nvBillconfSet1nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua3.setStatus('mandatory')
nvBillconfSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2.setStatus('mandatory')
nvBillconfSet2nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua1.setStatus('mandatory')
nvBillconfSet2nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua2.setStatus('mandatory')
nvBillconfSet2nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua3.setStatus('mandatory')
nvBillconfSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3.setStatus('mandatory')
nvBillconfSet3nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua1.setStatus('mandatory')
nvBillconfSet3nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua2.setStatus('mandatory')
nvBillconfSet3nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua3.setStatus('mandatory')
nvBillconfSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4.setStatus('mandatory')
nvBillconfSet4nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua1.setStatus('mandatory')
nvBillconfSet4nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua2.setStatus('mandatory')
nvBillconfSet4nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua3.setStatus('mandatory')
nvBillconfSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5.setStatus('mandatory')
nvBillconfSet5nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua1.setStatus('mandatory')
nvBillconfSet5nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua2.setStatus('mandatory')
nvBillconfSet5nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua3.setStatus('mandatory')
nvBillconfSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6.setStatus('mandatory')
nvBillconfSet6nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua1.setStatus('mandatory')
nvBillconfSet6nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua2.setStatus('mandatory')
nvBillconfSet6nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua3.setStatus('mandatory')
nvBillconf2Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4), )
if mibBuilder.loadTexts: nvBillconf2Table.setStatus('mandatory')
nvBillconf2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillconf2Index"))
if mibBuilder.loadTexts: nvBillconf2Entry.setStatus('mandatory')
nvBillconf2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconf2Index.setStatus('mandatory')
nvBillconfSet7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7.setStatus('mandatory')
nvBillconfSet7nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua1.setStatus('mandatory')
nvBillconfSet7nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua2.setStatus('mandatory')
nvBillconfSet7nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua3.setStatus('mandatory')
nvBillconfSet8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8.setStatus('mandatory')
nvBillconfSet8nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua1.setStatus('mandatory')
nvBillconfSet8nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua2.setStatus('mandatory')
nvBillconfSet8nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua3.setStatus('mandatory')
nvBillconfSet9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9.setStatus('mandatory')
nvBillconfSet9nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua1.setStatus('mandatory')
nvBillconfSet9nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua2.setStatus('mandatory')
nvBillconfSet9nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua3.setStatus('mandatory')
nvBillconfSet10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10.setStatus('mandatory')
nvBillconfSet10nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua1.setStatus('mandatory')
nvBillconfSet10nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua2.setStatus('mandatory')
nvBillconfSet10nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua3.setStatus('mandatory')
nvBillconfSet11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11.setStatus('mandatory')
nvBillconfSet11nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua1.setStatus('mandatory')
nvBillconfSet11nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua2.setStatus('mandatory')
nvBillconfSet11nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua3.setStatus('mandatory')
nvBillconfSet12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12.setStatus('mandatory')
nvBillconfSet12nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua1.setStatus('mandatory')
nvBillconfSet12nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua2.setStatus('mandatory')
nvBillconfSet12nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua3.setStatus('mandatory')
nvBillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 7))
nvBillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatMaxRec.setStatus('mandatory')
nvBillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNumRec.setStatus('mandatory')
nvBillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3), )
if mibBuilder.loadTexts: nvBillstatTable.setStatus('mandatory')
nvBillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillstatIndex"))
if mibBuilder.loadTexts: nvBillstatEntry.setStatus('mandatory')
nvBillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatIndex.setStatus('mandatory')
nvBillstatNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNodeid.setStatus('mandatory')
nvBillstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatDate.setStatus('mandatory')
nvBillstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTime.setStatus('mandatory')
nvBillstatNuaset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNuaset.setStatus('mandatory')
nvBillstatN300bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN300bps.setStatus('mandatory')
nvBillstatN1200bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN1200bps.setStatus('mandatory')
nvBillstatN2400bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN2400bps.setStatus('mandatory')
nvBillstatNgrtr2400 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNgrtr2400.setStatus('mandatory')
nvBillstatTxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTxseg.setStatus('mandatory')
nvBillstatRxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxseg.setStatus('mandatory')
nvBillstatRxcallc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxcallc.setStatus('mandatory')
nvBillstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatHostclr.setStatus('mandatory')
nvBillstatNetclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNetclr.setStatus('mandatory')
nvBillstatTxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTxpak.setStatus('mandatory')
nvBillstatRxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxpak.setStatus('mandatory')
nvBillstatLess5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatLess5.setStatus('mandatory')
nvBillstat5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat5to10.setStatus('mandatory')
nvBillstat10to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat10to15.setStatus('mandatory')
nvBillstat15to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat15to20.setStatus('mandatory')
nvBillstatGrtr20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatGrtr20.setStatus('mandatory')
nvBillstatClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatClosed.setStatus('mandatory')
nvApfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 8))
nvApfilterMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterMaxRec.setStatus('mandatory')
nvApfilterNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterNumRec.setStatus('mandatory')
nvApfilterTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3), )
if mibBuilder.loadTexts: nvApfilterTable.setStatus('mandatory')
nvApfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApfilterIndex"))
if mibBuilder.loadTexts: nvApfilterEntry.setStatus('mandatory')
nvApfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterIndex.setStatus('mandatory')
nvApfilterCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterCalled.setStatus('mandatory')
nvApfilterCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterCalling.setStatus('mandatory')
nvApfilterAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterAblock.setStatus('mandatory')
nvApfilterLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterLabel1.setStatus('mandatory')
nvApfilterMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterMerchid.setStatus('mandatory')
nvApfilterTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterTermid.setStatus('mandatory')
nvApfilterFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterFailcause.setStatus('mandatory')
nvApfilterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterThreshold.setStatus('mandatory')
nvApfilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterStatus.setStatus('mandatory')
nvApfclstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 9))
nvApfclstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatMaxRec.setStatus('mandatory')
nvApfclstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatNumRec.setStatus('mandatory')
nvApfclstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3), )
if mibBuilder.loadTexts: nvApfclstatTable.setStatus('mandatory')
nvApfclstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApfclstatIndex"))
if mibBuilder.loadTexts: nvApfclstatEntry.setStatus('mandatory')
nvApfclstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatIndex.setStatus('mandatory')
nvApfclstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDate.setStatus('mandatory')
nvApfclstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTime.setStatus('mandatory')
nvApfclstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatCalling.setStatus('mandatory')
nvApfclstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatCalled.setStatus('mandatory')
nvApfclstatAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatAblock.setStatus('mandatory')
nvApfclstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatNua.setStatus('mandatory')
nvApfclstatLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatLabel1.setStatus('mandatory')
nvApfclstatMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatMerchid.setStatus('mandatory')
nvApfclstatTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTermid.setStatus('mandatory')
nvApfclstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatSpeed.setStatus('mandatory')
nvApfclstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTxbytes.setStatus('mandatory')
nvApfclstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatRxbytes.setStatus('mandatory')
nvApfclstatIsdnclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatIsdnclr.setStatus('mandatory')
nvApfclstatX25clr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatX25clr.setStatus('mandatory')
nvApfclstatDialind = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDialind.setStatus('mandatory')
nvApfclstatTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTermtype.setStatus('mandatory')
nvApfclstatPstndur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatPstndur.setStatus('mandatory')
nvApfclstatX25dur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatX25dur.setStatus('mandatory')
nvApfclstatDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDspname.setStatus('mandatory')
nvApfclstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatPriname.setStatus('mandatory')
nvApfclstatWanport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatWanport.setStatus('mandatory')
nvApfclstatFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatFailcause.setStatus('mandatory')
nvApfclstatFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatFilter.setStatus('mandatory')
nvApclstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 10))
nvApclstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatMaxRec.setStatus('mandatory')
nvApclstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatNumRec.setStatus('mandatory')
nvApclstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3), )
if mibBuilder.loadTexts: nvApclstatTable.setStatus('mandatory')
nvApclstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApclstatIndex"))
if mibBuilder.loadTexts: nvApclstatEntry.setStatus('mandatory')
nvApclstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatIndex.setStatus('mandatory')
nvApclstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDate.setStatus('mandatory')
nvApclstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTime.setStatus('mandatory')
nvApclstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatCalling.setStatus('mandatory')
nvApclstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatCalled.setStatus('mandatory')
nvApclstatAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatAblock.setStatus('mandatory')
nvApclstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatNua.setStatus('mandatory')
nvApclstatLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatLabel1.setStatus('mandatory')
nvApclstatMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatMerchid.setStatus('mandatory')
nvApclstatTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTermid.setStatus('mandatory')
nvApclstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatSpeed.setStatus('mandatory')
nvApclstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTxbytes.setStatus('mandatory')
nvApclstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatRxbytes.setStatus('mandatory')
nvApclstatIsdnclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatIsdnclr.setStatus('mandatory')
nvApclstatX25clr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatX25clr.setStatus('mandatory')
nvApclstatDialind = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDialind.setStatus('mandatory')
nvApclstatTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTermtype.setStatus('mandatory')
nvApclstatPstndur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatPstndur.setStatus('mandatory')
nvApclstatX25dur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatX25dur.setStatus('mandatory')
nvApclstatDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDspname.setStatus('mandatory')
nvApclstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatPriname.setStatus('mandatory')
nvApclstatWanport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatWanport.setStatus('mandatory')
nvApclstatFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatFailcause.setStatus('mandatory')
nvApclstatFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatFilter.setStatus('mandatory')
nvR2prof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 1))
nvR2profMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profMaxRec.setStatus('mandatory')
nvR2profNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profNumRec.setStatus('mandatory')
nvR2profTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3), )
if mibBuilder.loadTexts: nvR2profTable.setStatus('mandatory')
nvR2profEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2profIndex"))
if mibBuilder.loadTexts: nvR2profEntry.setStatus('mandatory')
nvR2profIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profIndex.setStatus('mandatory')
nvR2profProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profProfname.setStatus('mandatory')
nvR2profSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSuffix.setStatus('mandatory')
nvR2profcdBits = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profcdBits.setStatus('mandatory')
nvR2profClearback = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClearback.setStatus('mandatory')
nvR2profForcerel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profForcerel.setStatus('mandatory')
nvR2profClearack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClearack.setStatus('mandatory')
nvR2profReanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profReanswer.setStatus('mandatory')
nvR2profMfmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(24, 25, 26))).clone(namedValues=NamedValues(("compelled", 24), ("semicompel", 25), ("noncompel", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfmode.setStatus('mandatory')
nvR2profMfnextdig = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfnextdig.setStatus('mandatory')
nvR2profMfrestart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfrestart.setStatus('mandatory')
nvR2profMfcongstion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfcongstion.setStatus('mandatory')
nvR2profMfvacant = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfvacant.setStatus('mandatory')
nvR2profMfspeech = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfspeech.setStatus('mandatory')
nvR2profMfbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfbusy.setStatus('mandatory')
nvR2profMfspchnc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfspchnc.setStatus('mandatory')
nvR2profMfgroupb = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfgroupb.setStatus('mandatory')
nvR2profMfanumsch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfanumsch.setStatus('mandatory')
nvR2profMftimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMftimeout.setStatus('mandatory')
nvR2profStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profStatus.setStatus('mandatory')
nvR2profAnswergrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profAnswergrd.setStatus('mandatory')
nvR2profClrfwdgrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClrfwdgrd.setStatus('mandatory')
nvR2profMfabnrel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfabnrel.setStatus('mandatory')
nvR2profIdlealmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profIdlealmsk.setStatus('mandatory')
nvR2profSeizalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSeizalmsk.setStatus('mandatory')
nvR2profSzakalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSzakalmsk.setStatus('mandatory')
nvR2profAnswalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profAnswalmsk.setStatus('mandatory')
nvR2profClbkalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClbkalmsk.setStatus('mandatory')
nvR2profFcrlalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profFcrlalmsk.setStatus('mandatory')
nvR2profClfwalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClfwalmsk.setStatus('mandatory')
nvR2profBlckalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profBlckalmsk.setStatus('mandatory')
nvR2syspar = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 2))
nvR2sysparMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparMaxRec.setStatus('mandatory')
nvR2sysparNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparNumRec.setStatus('mandatory')
nvR2sysparTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3), )
if mibBuilder.loadTexts: nvR2sysparTable.setStatus('mandatory')
nvR2sysparEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2sysparIndex"))
if mibBuilder.loadTexts: nvR2sysparEntry.setStatus('mandatory')
nvR2sysparIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparIndex.setStatus('mandatory')
nvR2sysparProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparProfname.setStatus('mandatory')
nvR2sysparMaxperdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMaxperdsp.setStatus('mandatory')
nvR2sysparAllocthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparAllocthrs.setStatus('mandatory')
nvR2sysparDeallthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparDeallthrs.setStatus('mandatory')
nvR2sysparStatint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparStatint.setStatus('mandatory')
nvR2sysparAlarmint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparAlarmint.setStatus('mandatory')
nvR2sysparLineway = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(104, 105))).clone(namedValues=NamedValues(("inonly", 104), ("inout", 105)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparLineway.setStatus('mandatory')
nvR2sysparMaxbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMaxbnmlen.setStatus('mandatory')
nvR2sysparMinbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMinbnmlen.setStatus('mandatory')
nvR2sysparGetcalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparGetcalling.setStatus('mandatory')
nvR2conf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 3))
nvR2confMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confMaxRec.setStatus('mandatory')
nvR2confNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confNumRec.setStatus('mandatory')
nvR2confTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3), )
if mibBuilder.loadTexts: nvR2confTable.setStatus('mandatory')
nvR2confEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2confIndex"))
if mibBuilder.loadTexts: nvR2confEntry.setStatus('mandatory')
nvR2confIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confIndex.setStatus('mandatory')
nvR2confDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2confDliname.setStatus('mandatory')
nvR2confStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2confStatus.setStatus('mandatory')
nvR2pstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 4))
nvR2pstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatMaxRec.setStatus('mandatory')
nvR2pstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatNumRec.setStatus('mandatory')
nvR2pstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3), )
if mibBuilder.loadTexts: nvR2pstatTable.setStatus('mandatory')
nvR2pstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2pstatIndex"))
if mibBuilder.loadTexts: nvR2pstatEntry.setStatus('mandatory')
nvR2pstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatIndex.setStatus('mandatory')
nvR2pstatDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatDliname.setStatus('mandatory')
nvR2pstatPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 2), ("up", 3), ("disabled", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatPstat.setStatus('mandatory')
nvR2pstatTsstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTsstat.setStatus('mandatory')
nvR2pstatObr2dsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatObr2dsp.setStatus('mandatory')
nvR2pstatObstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nocircuit", 1), ("obcircsetup", 2), ("obsigsetup", 3), ("obsigup", 4), ("obbad", 5), ("dspbad", 6), ("swerr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatObstat.setStatus('mandatory')
nvR2pstatLstatinfo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatLstatinfo.setStatus('mandatory')
nvR2pstatLinbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatLinbadcnt.setStatus('mandatory')
nvR2pstatTsbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTsbadcnt.setStatus('mandatory')
nvR2pstatTotisigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotisigatt.setStatus('mandatory')
nvR2pstatToticalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatToticalatt.setStatus('mandatory')
nvR2pstatToticalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatToticalest.setStatus('mandatory')
nvR2pstatTotosigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotosigatt.setStatus('mandatory')
nvR2pstatTotocalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotocalatt.setStatus('mandatory')
nvR2pstatTotocalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotocalest.setStatus('mandatory')
nvR2pstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatDtreset.setStatus('mandatory')
nvR2pstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatFlavor.setStatus('mandatory')
nvR2dspstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 5))
nvR2dspstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatMaxRec.setStatus('mandatory')
nvR2dspstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumRec.setStatus('mandatory')
nvR2dspstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3), )
if mibBuilder.loadTexts: nvR2dspstatTable.setStatus('mandatory')
nvR2dspstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2dspstatIndex"))
if mibBuilder.loadTexts: nvR2dspstatEntry.setStatus('mandatory')
nvR2dspstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatIndex.setStatus('mandatory')
nvR2dspstatDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatDevname.setStatus('mandatory')
nvR2dspstatStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("r2dspinit", 1), ("r2dspconfig", 2), ("r2dspup", 3), ("r2dspdown", 4), ("r2dspfail", 5), ("tsmalfunc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatStat.setStatus('mandatory')
nvR2dspstatNumobchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumobchn.setStatus('mandatory')
nvR2dspstatNumibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumibchn.setStatus('mandatory')
nvR2dspstatUnusedchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatUnusedchn.setStatus('mandatory')
nvR2dspstatTotobchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatTotobchn.setStatus('mandatory')
nvR2dspstatTotibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatTotibchn.setStatus('mandatory')
nvR2dspstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatDtreset.setStatus('mandatory')
nvR2dspstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatFlavor.setStatus('mandatory')
nvR2cstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 6))
nvR2cstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatMaxRec.setStatus('mandatory')
nvR2cstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatNumRec.setStatus('mandatory')
nvR2cstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3), )
if mibBuilder.loadTexts: nvR2cstatTable.setStatus('mandatory')
nvR2cstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2cstatIndex"))
if mibBuilder.loadTexts: nvR2cstatEntry.setStatus('mandatory')
nvR2cstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatIndex.setStatus('mandatory')
nvR2cstatR2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatR2port.setStatus('mandatory')
nvR2cstatTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatTimeslot.setStatus('mandatory')
nvR2cstatIbr2dsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatIbr2dsp.setStatus('mandatory')
nvR2cstatCstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ibnocircuit", 1), ("ibcircsetup", 2), ("ibcircerr", 3), ("ibcirfail", 4), ("ibdspmalf", 5), ("nor2dspts", 6), ("ibdecode", 7), ("ibcomplete", 8), ("ibabnterm", 9), ("ibconrej", 10), ("rejected", 11), ("datacall", 12), ("cleared", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCstat.setStatus('mandatory')
nvR2cstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatDirection.setStatus('mandatory')
nvR2cstatReason = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatReason.setStatus('mandatory')
nvR2cstatCallnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallnum.setStatus('mandatory')
nvR2cstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallednum.setStatus('mandatory')
nvR2cstatCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallingnum.setStatus('mandatory')
nvR2cstatLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("nolang", 1), ("discrim", 2), ("french", 3), ("english", 4), ("german", 5), ("russian", 6), ("spanish", 7), ("spare1", 8), ("spare2", 9), ("spare3", 10), ("spare4", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatLanguage.setStatus('mandatory')
nvR2cstatEchosup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noechosup", 1), ("echosnone", 2), ("echoshalf", 3), ("echosfull", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatEchosup.setStatus('mandatory')
nvR2cstatCparty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("nocparty", 1), ("natsubpri", 2), ("natsubnopri", 3), ("natmaint", 4), ("spare", 5), ("natmanop", 6), ("natdata", 7), ("intsubnopri", 8), ("intsubpri", 9), ("intdata", 10), ("intopftc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCparty.setStatus('mandatory')
nvRbsyspar = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 1))
nvRbsysparMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparMaxRec.setStatus('mandatory')
nvRbsysparNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparNumRec.setStatus('mandatory')
nvRbsysparTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3), )
if mibBuilder.loadTexts: nvRbsysparTable.setStatus('mandatory')
nvRbsysparEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbsysparIndex"))
if mibBuilder.loadTexts: nvRbsysparEntry.setStatus('mandatory')
nvRbsysparIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparIndex.setStatus('mandatory')
nvRbsysparMaxperdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMaxperdsp.setStatus('mandatory')
nvRbsysparAllocthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparAllocthrs.setStatus('mandatory')
nvRbsysparDeallthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparDeallthrs.setStatus('mandatory')
nvRbsysparStatint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparStatint.setStatus('mandatory')
nvRbsysparAlarmint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparAlarmint.setStatus('mandatory')
nvRbsysparMaxbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMaxbnmlen.setStatus('mandatory')
nvRbsysparMinbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMinbnmlen.setStatus('mandatory')
nvRbsysparPollint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparPollint.setStatus('mandatory')
nvRbsysparStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparStatus.setStatus('mandatory')
nvRbconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 2))
nvRbconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfMaxRec.setStatus('mandatory')
nvRbconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfNumRec.setStatus('mandatory')
nvRbconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3), )
if mibBuilder.loadTexts: nvRbconfTable.setStatus('mandatory')
nvRbconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbconfIndex"))
if mibBuilder.loadTexts: nvRbconfEntry.setStatus('mandatory')
nvRbconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfIndex.setStatus('mandatory')
nvRbconfDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfDliname.setStatus('mandatory')
nvRbconfProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfProfname.setStatus('mandatory')
nvRbconfRtmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17))).clone(namedValues=NamedValues(("ibsig", 16), ("direct", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfRtmethod.setStatus('mandatory')
nvRbconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfStatus.setStatus('mandatory')
nvRbpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 3))
nvRbpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatMaxRec.setStatus('mandatory')
nvRbpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatNumRec.setStatus('mandatory')
nvRbpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3), )
if mibBuilder.loadTexts: nvRbpstatTable.setStatus('mandatory')
nvRbpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbpstatIndex"))
if mibBuilder.loadTexts: nvRbpstatEntry.setStatus('mandatory')
nvRbpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatIndex.setStatus('mandatory')
nvRbpstatDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatDliname.setStatus('mandatory')
nvRbpstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatFlavor.setStatus('mandatory')
nvRbpstatPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 2), ("up", 3), ("disabled", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatPstat.setStatus('mandatory')
nvRbpstatTsstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTsstat.setStatus('mandatory')
nvRbpstatRbsrbdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatRbsrbdsp.setStatus('mandatory')
nvRbpstatRbstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nopipe", 1), ("rbsigsetup", 3), ("rbsigup", 4), ("rbbad", 5), ("dspbad", 6), ("swerr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatRbstat.setStatus('mandatory')
nvRbpstatLstatinfo = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatLstatinfo.setStatus('mandatory')
nvRbpstatLinbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatLinbadcnt.setStatus('mandatory')
nvRbpstatTsbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTsbadcnt.setStatus('mandatory')
nvRbpstatTotisigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotisigatt.setStatus('mandatory')
nvRbpstatToticalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatToticalatt.setStatus('mandatory')
nvRbpstatToticalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatToticalest.setStatus('mandatory')
nvRbpstatTotosigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotosigatt.setStatus('mandatory')
nvRbpstatTotocalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotocalatt.setStatus('mandatory')
nvRbpstatTotocalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotocalest.setStatus('mandatory')
nvRbpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatDtreset.setStatus('mandatory')
nvRbdspstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 4))
nvRbdspstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatMaxRec.setStatus('mandatory')
nvRbdspstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumRec.setStatus('mandatory')
nvRbdspstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3), )
if mibBuilder.loadTexts: nvRbdspstatTable.setStatus('mandatory')
nvRbdspstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbdspstatIndex"))
if mibBuilder.loadTexts: nvRbdspstatEntry.setStatus('mandatory')
nvRbdspstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatIndex.setStatus('mandatory')
nvRbdspstatDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatDevname.setStatus('mandatory')
nvRbdspstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatFlavor.setStatus('mandatory')
nvRbdspstatStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rbdspinit", 1), ("rbdspconfig", 2), ("rbdspup", 3), ("rbdspdown", 4), ("rbdspfail", 5), ("tsmalfunc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatStat.setStatus('mandatory')
nvRbdspstatNumrbpipe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumrbpipe.setStatus('mandatory')
nvRbdspstatNumibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumibchn.setStatus('mandatory')
nvRbdspstatUnusedchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatUnusedchn.setStatus('mandatory')
nvRbdspstatTotrbpipe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatTotrbpipe.setStatus('mandatory')
nvRbdspstatTotibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatTotibchn.setStatus('mandatory')
nvRbdspstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatDtreset.setStatus('mandatory')
nvRbcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 5))
nvRbcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatMaxRec.setStatus('mandatory')
nvRbcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatNumRec.setStatus('mandatory')
nvRbcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3), )
if mibBuilder.loadTexts: nvRbcstatTable.setStatus('mandatory')
nvRbcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbcstatIndex"))
if mibBuilder.loadTexts: nvRbcstatEntry.setStatus('mandatory')
nvRbcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatIndex.setStatus('mandatory')
nvRbcstatRbport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatRbport.setStatus('mandatory')
nvRbcstatTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatTimeslot.setStatus('mandatory')
nvRbcstatIbrbdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatIbrbdsp.setStatus('mandatory')
nvRbcstatCstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ibnocircuit", 1), ("ibcircsetup", 2), ("ibcircerr", 3), ("ibcircfail", 4), ("ibdspmalf", 5), ("norbdspts", 6), ("ibdecode", 7), ("ibcomplete", 8), ("dirrouting", 9), ("ibabnterm", 10), ("ibconrej", 11), ("rejected", 12), ("datacall", 13), ("cleared", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCstat.setStatus('mandatory')
nvRbcstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatDirection.setStatus('mandatory')
nvRbcstatReason = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatReason.setStatus('mandatory')
nvRbcstatCallnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallnum.setStatus('mandatory')
nvRbcstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallednum.setStatus('mandatory')
nvRbcstatCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallingnum.setStatus('mandatory')
nvRbprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 6))
nvRbprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofMaxRec.setStatus('mandatory')
nvRbprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofNumRec.setStatus('mandatory')
nvRbprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3), )
if mibBuilder.loadTexts: nvRbprofTable.setStatus('mandatory')
nvRbprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbprofIndex"))
if mibBuilder.loadTexts: nvRbprofEntry.setStatus('mandatory')
nvRbprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofIndex.setStatus('mandatory')
nvRbprofProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofProfname.setStatus('mandatory')
nvRbprofSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofSuffix.setStatus('mandatory')
nvRbprofSigtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("e-and-m", 2), ("loop", 3), ("ground", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofSigtype.setStatus('mandatory')
nvRbprofRlcf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapp", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofRlcf.setStatus('mandatory')
nvRbprofLcfo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapp", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofLcfo.setStatus('mandatory')
nvRbprofWinklen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofWinklen.setStatus('mandatory')
nvRbprofMfdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofMfdelay.setStatus('mandatory')
nvRbprofDisconlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDisconlen.setStatus('mandatory')
nvRbprofIbsigtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofIbsigtype.setStatus('mandatory')
nvRbprofDtmftmout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmftmout.setStatus('mandatory')
nvRbprofDtmfon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmfon.setStatus('mandatory')
nvRbprofDtmfoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmfoff.setStatus('mandatory')
nvRbprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofStatus.setStatus('mandatory')
nvL2tpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 1))
nvL2tpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfMaxRec.setStatus('mandatory')
nvL2tpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfNumRec.setStatus('mandatory')
nvL2tpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3), )
if mibBuilder.loadTexts: nvL2tpconfTable.setStatus('mandatory')
nvL2tpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpconfIndex"))
if mibBuilder.loadTexts: nvL2tpconfEntry.setStatus('mandatory')
nvL2tpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfIndex.setStatus('mandatory')
nvL2tpconfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfAdminStat.setStatus('mandatory')
nvL2tpconfAckTimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfAckTimout.setStatus('mandatory')
nvL2tpconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfInactivty.setStatus('mandatory')
nvL2tpconfRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfRetrans.setStatus('mandatory')
nvL2tpconfIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfIdle.setStatus('mandatory')
nvL2tpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfStatus.setStatus('mandatory')
nvL2tpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 2))
nvL2tpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatMaxRec.setStatus('mandatory')
nvL2tpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatNumRec.setStatus('mandatory')
nvL2tpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3), )
if mibBuilder.loadTexts: nvL2tpstatTable.setStatus('mandatory')
nvL2tpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpstatIndex"))
if mibBuilder.loadTexts: nvL2tpstatEntry.setStatus('mandatory')
nvL2tpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatIndex.setStatus('mandatory')
nvL2tpstatActivTnls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatActivTnls.setStatus('mandatory')
nvL2tpstatActivSns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatActivSns.setStatus('mandatory')
nvL2tpstatMlfrmPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatMlfrmPkt.setStatus('mandatory')
nvL2tpstatCtrlRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlRecv.setStatus('mandatory')
nvL2tpstatCtrlOofW = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlOofW.setStatus('mandatory')
nvL2tpstatCtrlOofS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlOofS.setStatus('mandatory')
nvL2tpstatCtrlSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlSend.setStatus('mandatory')
nvL2tpstatDataRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDataRecv.setStatus('mandatory')
nvL2tpstatDataSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDataSend.setStatus('mandatory')
nvL2tpstatTnlUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatTnlUnav.setStatus('mandatory')
nvL2tpstatSessUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatSessUnav.setStatus('mandatory')
nvL2tpstatProtVrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatProtVrsn.setStatus('mandatory')
nvL2tpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDtreset.setStatus('mandatory')
nvL2tptstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 3))
nvL2tptstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatMaxRec.setStatus('mandatory')
nvL2tptstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatNumRec.setStatus('mandatory')
nvL2tptstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3), )
if mibBuilder.loadTexts: nvL2tptstatTable.setStatus('mandatory')
nvL2tptstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tptstatIndex"))
if mibBuilder.loadTexts: nvL2tptstatEntry.setStatus('mandatory')
nvL2tptstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatIndex.setStatus('mandatory')
nvL2tptstatLocalTnID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatLocalTnID.setStatus('mandatory')
nvL2tptstatRemotTnID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRemotTnID.setStatus('mandatory')
nvL2tptstatLocalWSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatLocalWSiz.setStatus('mandatory')
nvL2tptstatRemotWSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRemotWSiz.setStatus('mandatory')
nvL2tptstatRmtIPaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRmtIPaddr.setStatus('mandatory')
nvL2tptstatRmtHstNme = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRmtHstNme.setStatus('mandatory')
nvL2tptstatTunlState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("null", 1), ("idle", 2), ("cnnting", 3), ("estb", 4), ("disconn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatTunlState.setStatus('mandatory')
nvL2tptstatRecvCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRecvCtrl.setStatus('mandatory')
nvL2tptstatRecvData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRecvData.setStatus('mandatory')
nvL2tptstatSendCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatSendCtrl.setStatus('mandatory')
nvL2tptstatSendData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatSendData.setStatus('mandatory')
nvL2tptstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatDtreset.setStatus('mandatory')
nvL2tpsstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 4))
nvL2tpsstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatMaxRec.setStatus('mandatory')
nvL2tpsstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatNumRec.setStatus('mandatory')
nvL2tpsstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3), )
if mibBuilder.loadTexts: nvL2tpsstatTable.setStatus('mandatory')
nvL2tpsstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpsstatIndex"))
if mibBuilder.loadTexts: nvL2tpsstatEntry.setStatus('mandatory')
nvL2tpsstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatIndex.setStatus('mandatory')
nvL2tpsstatTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatTunnelID.setStatus('mandatory')
nvL2tpsstatLclCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatLclCallID.setStatus('mandatory')
nvL2tpsstatRmtCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatRmtCallID.setStatus('mandatory')
nvL2tpsstatCallSN = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatCallSN.setStatus('mandatory')
nvL2tpsstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("null", 1), ("idle", 2), ("cnnting", 3), ("estb", 4), ("disconn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatState.setStatus('mandatory')
nvL2tpsstatDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDeviceNum.setStatus('mandatory')
nvL2tpsstatDataRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDataRecv.setStatus('mandatory')
nvL2tpsstatDataSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDataSend.setStatus('mandatory')
nvL2tpsstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDtreset.setStatus('mandatory')
nvTrapS0 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS0.setStatus('mandatory')
nvTrapS1 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS1.setStatus('mandatory')
nvTrapS2 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS2.setStatus('mandatory')
nvTrapN0 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN0.setStatus('mandatory')
nvTrapN1 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN1.setStatus('mandatory')
nvTrapN2 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN2.setStatus('mandatory')
nvTrapconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 64, 7))
nvTrapconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfMaxRec.setStatus('mandatory')
nvTrapconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfNumRec.setStatus('mandatory')
nvTrapconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3), )
if mibBuilder.loadTexts: nvTrapconfTable.setStatus('mandatory')
nvTrapconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTrapconfIndex"))
if mibBuilder.loadTexts: nvTrapconfEntry.setStatus('mandatory')
nvTrapconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfIndex.setStatus('mandatory')
nvTrapconfTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfTrapId.setStatus('mandatory')
nvTrapconfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTrapconfDesc.setStatus('mandatory')
nvTrapconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTrapconfStatus.setStatus('mandatory')
nvReboot = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("reboot", 2), ("failed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvReboot.setStatus('mandatory')
nvWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("write", 1), ("executing", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvWriteConfig.setStatus('mandatory')
nvDate = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDate.setStatus('mandatory')
nvWriteRoot = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("write", 1), ("executing", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvWriteRoot.setStatus('mandatory')
nvStartScript = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStartScript.setStatus('mandatory')
nvString = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 65, 6))
nvStringMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringMaxRec.setStatus('mandatory')
nvStringNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringNumRec.setStatus('mandatory')
nvStringTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3), )
if mibBuilder.loadTexts: nvStringTable.setStatus('mandatory')
nvStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvStringIndex"))
if mibBuilder.loadTexts: nvStringEntry.setStatus('mandatory')
nvStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringIndex.setStatus('mandatory')
nvStringData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStringData.setStatus('mandatory')
nvStringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStringStatus.setStatus('mandatory')
nvTrapDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4352)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
nvTrapDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4353)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
nvTrapDuiportavail = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4354)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
nvTrapNoIdlePorts = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4355))
nvTrapDatatimerexpird = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4359)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
nvTrapDUIDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4365)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapDatabaseUpPrimary = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4377)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapDatabaseUpSecondary = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4378)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapLinkNotReady = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4668)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapLinkReady = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4669)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapAlternateConfig = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5635)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapDbautosave = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5636))
nvTrapDbCrcError = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5637))
nvTrapDbsavecount = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5638))
nvTrapLocalDatabaseChanged = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5639))
nvTrapRateIncreasedToL1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5640)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapRateIncreasedToL2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5641)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapRateDecreasedBelowL1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5642)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapRateDecreasedBelowL2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5643)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapReachedStatus = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5644)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"))
nvTrapLeftStatus = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5645)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"))
nvTrapFramerfailaction = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5652)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
nvTrapFramerfailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5653)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapFrPortUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11520)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapFrPortDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11521)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapFrLMIError = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11522)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapFrLMINormal = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11523)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapFrAllDLCIsUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11524)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapFrDLCIsDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11525)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapElxUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,12032)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapElxDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,12033)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapPppLcpUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14848)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapPppLcpDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14849)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapPppIpcpOnLcpUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14850)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"), ("Telematics-Nevada-MIB", "nvTrapN1"))
nvPppIpcpOnLcpDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14851)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"), ("Telematics-Nevada-MIB", "nvTrapN1"))
nvTrapPriDataLayerUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15136)).setObjects(("Telematics-Nevada-MIB", "nvPristatIndex"))
nvTrapPriDataLayerDn = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15137)).setObjects(("Telematics-Nevada-MIB", "nvPristatIndex"))
nvTrapPppLcpNetworkPhase = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15500)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapPppLcpNetworkdown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15501)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapPppMpLinkAdded = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15504)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapPppMpLinkDropped = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15505)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
nvTrapDSPMFailedModemThresh1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16896)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapDSPMFailedModemThresh2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16897)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapDSPMFailedModemThresh3 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16898)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapDSPRFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16899)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapISDNFailedCalls = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16640)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapFRAMERFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17664)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapQDLIFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17920)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapRemovedCard = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17940)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
nvTrapCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17950)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvIpstatInHdrErrs=nvIpstatInHdrErrs, nvSlotstatIotype=nvSlotstatIotype, nvItiprofP33=nvItiprofP33, nvNetpvcmap=nvNetpvcmap, nvR2dspstatTotobchn=nvR2dspstatTotobchn, nvTncconfIndex=nvTncconfIndex, nvL2tptstatRmtHstNme=nvL2tptstatRmtHstNme, nvAnuaconfNuaAddress=nvAnuaconfNuaAddress, nvMpstatPart2OutPkts=nvMpstatPart2OutPkts, nvDlspcconfPortalarm=nvDlspcconfPortalarm, nvDialstatNcmderror=nvDialstatNcmderror, nvTcpstatRcvshorts=nvTcpstatRcvshorts, nvPridstatProtlayer=nvPridstatProtlayer, nvTcprstatIndex=nvTcprstatIndex, nvNas=nvNas, nvTrapCardInserted=nvTrapCardInserted, nvDuistatTable=nvDuistatTable, nvFtpstatCurrkbyrvs=nvFtpstatCurrkbyrvs, nvRadcstatNAuth1Rej=nvRadcstatNAuth1Rej, nvFrmrstatCallsPresent=nvFrmrstatCallsPresent, nvXbillstatLess5=nvXbillstatLess5, nvFriconf=nvFriconf, nvAcctstatRxpaks=nvAcctstatRxpaks, nvTcpstatDtreset=nvTcpstatDtreset, nvPricstatNumRec=nvPricstatNumRec, nvSFRMRPerrs=nvSFRMRPerrs, nvNetmap=nvNetmap, nvNetpvcTable=nvNetpvcTable, nvNmsuserTput=nvNmsuserTput, nvNetpvcStatus=nvNetpvcStatus, nvR2profClrfwdgrd=nvR2profClrfwdgrd, nvSDLICurstate=nvSDLICurstate, nvIpstatOutNoRts=nvIpstatOutNoRts, nvXbillconfSegsize=nvXbillconfSegsize, nvFrvcstatDrprxs=nvFrvcstatDrprxs, nvRadustatFrmRt=nvRadustatFrmRt, nvFtpstatTotalkbysds=nvFtpstatTotalkbysds, nvFriconfStatus=nvFriconfStatus, nvPosisoContrec=nvPosisoContrec, nvBillstatNuaset=nvBillstatNuaset, nvCrfstatL1prot=nvCrfstatL1prot, nvPosvisaField13=nvPosvisaField13, nvApacsstatTable=nvApacsstatTable, nvTrapDatatimerexpird=nvTrapDatatimerexpird, nvNmsuserRpoacode=nvNmsuserRpoacode, nvPristatDchrst=nvPristatDchrst, nvFtpstatNumreqs=nvFtpstatNumreqs, nvSDSPNumIfailneg=nvSDSPNumIfailneg, nvDuiconfNumRec=nvDuiconfNumRec, nvTcpstatConndrops=nvTcpstatConndrops, nvRadustatNasPort=nvRadustatNasPort, nvIpcpconfMaxRec=nvIpcpconfMaxRec, nvAbillstatB5time=nvAbillstatB5time, nvDialstatNdialtone=nvDialstatNdialtone, nvDialstatNdialout=nvDialstatNdialout, nvBillstat5to10=nvBillstat5to10, nvMpstatPart1LocMRRU=nvMpstatPart1LocMRRU, nvTnnlstatConnstat=nvTnnlstatConnstat, nvSlotstatCatPartnum=nvSlotstatCatPartnum, nvNsockconfIndex=nvNsockconfIndex, nvApacsstatN2400bd=nvApacsstatN2400bd, nvIticmdNumRec=nvIticmdNumRec, nvSFRMRTable=nvSFRMRTable, nvCrouteMaxRec=nvCrouteMaxRec, nvXbillstatTxpak=nvXbillstatTxpak, nvIticonfIndex=nvIticonfIndex, nvCrcstatRcsc0=nvCrcstatRcsc0, nvBillconfSet2nua2=nvBillconfSet2nua2, nvRoutemapTable=nvRoutemapTable, nvPricustatThresh4=nvPricustatThresh4, nvX25callNrxsegs=nvX25callNrxsegs, nvCDSPSlotIndex=nvCDSPSlotIndex, nvItipstatNcrxpaks=nvItipstatNcrxpaks, nvMpstatPart2=nvMpstatPart2, nvCrcstatCid=nvCrcstatCid, nvR2confStatus=nvR2confStatus, nvIticlassExitcmd=nvIticlassExitcmd, nvFrmrstatNumFailUp=nvFrmrstatNumFailUp, nvPristat=nvPristat, nvL2tptstatRemotWSiz=nvL2tptstatRemotWSiz, nvRadustatITimeout=nvRadustatITimeout, nvTnnlconfEntry=nvTnnlconfEntry, nvPppIpcpOnLcpDown=nvPppIpcpOnLcpDown, nvIticlassOutbar=nvIticlassOutbar, nvCrouteChoice=nvCrouteChoice, nvFristatErrorcounts=nvFristatErrorcounts, nvMpstatPart2Table=nvMpstatPart2Table, nvItipstatUserdata=nvItipstatUserdata, nvMpstatPart1Link16=nvMpstatPart1Link16, nvTrapDatabaseUpPrimary=nvTrapDatabaseUpPrimary, nvIprouteEntry=nvIprouteEntry, nvTncconfEscape=nvTncconfEscape, nvFriconfnN4=nvFriconfnN4, nvL2tpstatCtrlOofS=nvL2tpstatCtrlOofS, nvTrapDSPMFailedModemThresh2=nvTrapDSPMFailedModemThresh2, nvApclstatIndex=nvApclstatIndex, nvApclstatX25dur=nvApclstatX25dur, nvItiprofP27=nvItiprofP27, nvMpstatPart2InCmPcnt=nvMpstatPart2InCmPcnt, nvCrfstatCause=nvCrfstatCause, nvPosvisaField1=nvPosvisaField1, nvNodestatMinbufs=nvNodestatMinbufs, nvTrapDeviceConnected=nvTrapDeviceConnected, nvTcpstatNumRec=nvTcpstatNumRec, nvPricustatThresh1=nvPricustatThresh1, nvAbillstatPbcalls=nvAbillstatPbcalls, nvDportstatUptime=nvDportstatUptime, nvPricstatPriname=nvPricstatPriname, nvModemstatNumRec=nvModemstatNumRec, nvPriconfNfasgrp=nvPriconfNfasgrp, nvModemstatTxparity=nvModemstatTxparity, nvR2dspstatDtreset=nvR2dspstatDtreset, nvMpstatPart2Index=nvMpstatPart2Index, nvRbpstatTotosigatt=nvRbpstatTotosigatt, nvApacsstatX25clrdat=nvApacsstatX25clrdat, nvMpstatPart1Link8=nvMpstatPart1Link8, nvTnmapIticlass=nvTnmapIticlass, nvPricustatCounter1=nvPricustatCounter1, nvNetpvcPvccode=nvNetpvcPvccode, nvLinkconfRsrcpool=nvLinkconfRsrcpool, nvBillconfSet9nua3=nvBillconfSet9nua3, nvCDLIFdl=nvCDLIFdl, nvDlspcstatNidle=nvDlspcstatNidle, nvIticlassComfac=nvIticlassComfac, nvCrouteRcscp1=nvCrouteRcscp1, nvPosmsgmap=nvPosmsgmap, nvApacsconfBillingT1=nvApacsconfBillingT1, nvX25statIfstate=nvX25statIfstate, nvTcprstatInport=nvTcprstatInport, nvApclstatSpeed=nvApclstatSpeed, nvApacsstatTrmdscdat=nvApacsstatTrmdscdat, nvSDSPNumload=nvSDSPNumload, nvL2tpsstatDataSend=nvL2tpsstatDataSend, nvRadcstatNumRec=nvRadcstatNumRec, nvPosstatInvrstpdu=nvPosstatInvrstpdu, nvBillstatN2400bps=nvBillstatN2400bps, nvIticmdStringid=nvIticmdStringid, nvApacsstatMaxsimul=nvApacsstatMaxsimul, nvTcpstatRcvacktoomuchs=nvTcpstatRcvacktoomuchs, nvItiuserInitcmd=nvItiuserInitcmd, nvItirpoaMaxRec=nvItirpoaMaxRec, nvCFRMREnable=nvCFRMREnable, nvFrvcconf=nvFrvcconf, nvApclstatDate=nvApclstatDate, nvPristatMaxtsetup=nvPristatMaxtsetup, nvLinkconfAckthresh=nvLinkconfAckthresh, nvTrapLeftStatus=nvTrapLeftStatus, nvRadconfNbnsatt1=nvRadconfNbnsatt1, nvIptrunkMaxRec=nvIptrunkMaxRec, nvDialstatNnoModem=nvDialstatNnoModem, nvMediastatEntry=nvMediastatEntry, nvSDSPEvent3=nvSDSPEvent3, nvDlstatLreset=nvDlstatLreset, nvElxstatTable=nvElxstatTable, nvModemstatRetrain=nvModemstatRetrain, nvItipstatNctxresets=nvItipstatNctxresets, nvPosisoField64=nvPosisoField64, nvX25confTx1=nvX25confTx1, nvRbdspstatIndex=nvRbdspstatIndex, nvIpcpconfCompress=nvIpcpconfCompress, nvItimapMaxRec=nvItimapMaxRec, nvLcpconfMode=nvLcpconfMode, nvAbillstatB4time=nvAbillstatB4time, nvItiprofP26=nvItiprofP26, nvIticlassInvclrtim=nvIticlassInvclrtim, nvLcpconfChalint=nvLcpconfChalint, nvRadustatSType=nvRadustatSType, nvX25statNtxclrcs=nvX25statNtxclrcs, nvApacsstatFailneg=nvApacsstatFailneg, nvIpstatEntry=nvIpstatEntry, nvFrmrstatNumRxBytes=nvFrmrstatNumRxBytes, nvTslotstatNumRec=nvTslotstatNumRec, nvDspmalloc=nvDspmalloc, nvRbprof=nvRbprof, nvL2tptstatRmtIPaddr=nvL2tptstatRmtIPaddr, nvPriconfRouting=nvPriconfRouting, nvPosprofIdletime=nvPosprofIdletime, nvFristatTable=nvFristatTable, nvItiuserStatus=nvItiuserStatus, nvX25statIndex=nvX25statIndex, nvPosprofTpduaddr=nvPosprofTpduaddr, nvL2tpconfIndex=nvL2tpconfIndex, nvItiportNumRec=nvItiportNumRec, nvIpwanmapRevacc=nvIpwanmapRevacc, nvRadcstatRadcOperS=nvRadcstatRadcOperS, nvPosprofRouting=nvPosprofRouting, nvLinkconfLinkname=nvLinkconfLinkname, nvBillconf=nvBillconf, nvX25nuimapTable=nvX25nuimapTable, nvIticlassCmdtimout=nvIticlassCmdtimout, nvTnstatNumRec=nvTnstatNumRec, nvBillconfSet7=nvBillconfSet7, nvPppstatOutEchRp=nvPppstatOutEchRp, nvRbconfIndex=nvRbconfIndex, nvPristatNtxbusy=nvPristatNtxbusy, nvIticlassRejectid=nvIticlassRejectid, nvPristatCallcur=nvPristatCallcur, nvFristatRcvseq=nvFristatRcvseq, nvL2tpconfMaxRec=nvL2tpconfMaxRec, nvMpstatPart2InErrors=nvMpstatPart2InErrors, nvRadustatClass=nvRadustatClass, nvIcmpstatInSrcQus=nvIcmpstatInSrcQus, nvNsockmapIndex=nvNsockmapIndex, nvItipstatNdcode=nvItipstatNdcode, nvIpcpconfIndex=nvIpcpconfIndex, nvTncmapStatus=nvTncmapStatus, nvMpstatPart2OutEchRp=nvMpstatPart2OutEchRp, nvModemprofAnston=nvModemprofAnston, nvLinkconfT2=nvLinkconfT2, nvIpconfTable=nvIpconfTable, nvItiprofP30=nvItiprofP30, nvIprtstatInterface=nvIprtstatInterface, nvApclstatDspname=nvApclstatDspname, nvAcctstat64krxsegs=nvAcctstat64krxsegs, nvPosvisaTable=nvPosvisaTable, nvPosisoTable=nvPosisoTable, nevadaAdmin=nevadaAdmin, nvMpstatPart1=nvMpstatPart1, nvPricstatEntry=nvPricstatEntry, nvApfilterCalling=nvApfilterCalling, nvBillconfSet12nua3=nvBillconfSet12nua3, nvIticmdStatus=nvIticmdStatus, nvRrstatNumbers=nvRrstatNumbers, nvPristatCallconn=nvPristatCallconn, nvPosisoField6=nvPosisoField6, nvTrapS1=nvTrapS1, nvPosnmsmapDest=nvPosnmsmapDest, nvIpcpconfNumRec=nvIpcpconfNumRec, nvApacsstatParerrsu=nvApacsstatParerrsu, nvSDSPEvent2=nvSDSPEvent2, nvItipstatParam=nvItipstatParam, nvBillstatGrtr20=nvBillstatGrtr20, nvTslotstatRemtsid=nvTslotstatRemtsid, nvL2tpsstatMaxRec=nvL2tpsstatMaxRec, nvTnstatEntry=nvTnstatEntry, nvRbdspstatStat=nvRbdspstatStat, nvAcctstatDtreset=nvAcctstatDtreset, nvMpstatPart2OutEch=nvMpstatPart2OutEch, nvNodestatMincpu=nvNodestatMincpu, nvRbprofStatus=nvRbprofStatus, nvRadustatFrmMtu=nvRadustatFrmMtu, nvRbprofWinklen=nvRbprofWinklen, nvPosisoField7=nvPosisoField7, nvPosisoField45=nvPosisoField45, nvL2tptstatLocalWSiz=nvL2tptstatLocalWSiz, nvPppstatInPkts=nvPppstatInPkts, nvRbpstatTable=nvRbpstatTable, nvPosisoField17=nvPosisoField17, nvR2pstatMaxRec=nvR2pstatMaxRec, nvTcpstatDrops=nvTcpstatDrops, nvDialstatNfail=nvDialstatNfail, nvItipstatRxTput=nvItipstatRxTput, nvLcpconfNaifwd=nvLcpconfNaifwd, nvItipstatNtxresets=nvItipstatNtxresets)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvApacsstatSimultime=nvApacsstatSimultime, nvTnclassGoahead=nvTnclassGoahead, nvR2pstatObstat=nvR2pstatObstat, nvTnclassMaxRec=nvTnclassMaxRec, nvXbillconfTable=nvXbillconfTable, nvPricuconfStatus=nvPricuconfStatus, nvIpstatInAdrErrs=nvIpstatInAdrErrs, nvDlconfLinkname=nvDlconfLinkname, nvLinkstatPort=nvLinkstatPort, nvTrapFrAllDLCIsUp=nvTrapFrAllDLCIsUp, nvCrfstatMaxRec=nvCrfstatMaxRec, nvRaduserPasswd=nvRaduserPasswd, nvIticlassX3type=nvIticlassX3type, nvR2dspstatNumRec=nvR2dspstatNumRec, nvModemstatIndex=nvModemstatIndex, nvSnmpmgrEntry=nvSnmpmgrEntry, nvItirpoaNumRec=nvItirpoaNumRec, nvAbillstatPrxbytes=nvAbillstatPrxbytes, nvNmsuserMaxRec=nvNmsuserMaxRec, nvBillconfSet11nua1=nvBillconfSet11nua1, nvPosstatNbadframes=nvPosstatNbadframes, nvBillstatDate=nvBillstatDate, nvApfilterCalled=nvApfilterCalled, nvIpwanmapMetric=nvIpwanmapMetric, nvModemstatName=nvModemstatName, nvR2profMaxRec=nvR2profMaxRec, nvIpstatInDiscrds=nvIpstatInDiscrds, nvRbdspstatNumrbpipe=nvRbdspstatNumrbpipe, nvCFRMRDebounce=nvCFRMRDebounce, nvIticlassDatacmd=nvIticlassDatacmd, nvDlstatRejrxs=nvDlstatRejrxs, nvAbillstatDtreset=nvAbillstatDtreset, nvXbillstatRxpak=nvXbillstatRxpak, nvFristatLmistate=nvFristatLmistate, nvApacsstatLoscarcip=nvApacsstatLoscarcip, nvApmdmstatTbcalls=nvApmdmstatTbcalls, nvCDLISlotIndex=nvCDLISlotIndex, nvBillconfSet5nua1=nvBillconfSet5nua1, nvPosstatRspnomtch=nvPosstatRspnomtch, nvL2tptstatDtreset=nvL2tptstatDtreset, nvAbillstatP3time=nvAbillstatP3time, nvDialstatNmiscfail=nvDialstatNmiscfail, nvR2profBlckalmsk=nvR2profBlckalmsk, nvModemprofFalbckchr=nvModemprofFalbckchr, nvAnuaconfEntry=nvAnuaconfEntry, nvDspmallocEntry=nvDspmallocEntry, nvTslotstatName=nvTslotstatName, nvTnmapTable=nvTnmapTable, nvL2tpsstat=nvL2tpsstat, nvAcctstat=nvAcctstat, nvIpcpconfNbnsadd1=nvIpcpconfNbnsadd1, nvR2sysparProfname=nvR2sysparProfname, nvRbcstatCstat=nvRbcstatCstat, nvAcctstatCalling=nvAcctstatCalling, nvFrstatMtxcurfps=nvFrstatMtxcurfps, nvPppstatRealm=nvPppstatRealm, nvRbconfMaxRec=nvRbconfMaxRec, nvR2profcdBits=nvR2profcdBits, nvDspmallocStatus=nvDspmallocStatus, nvIticstatLoscardat=nvIticstatLoscardat, nvDlspcconfTable=nvDlspcconfTable, nvPosstatDnlnkfail=nvPosstatDnlnkfail, nvR2profEntry=nvR2profEntry, nvR2pstatIndex=nvR2pstatIndex, nvSDSPNumcalls=nvSDSPNumcalls, nvX25statNrxres=nvX25statNrxres, nvTcpprofStatus=nvTcpprofStatus, nvDialstatEntry=nvDialstatEntry, nvNodeconfPartnum=nvNodeconfPartnum, nvPosstatConnfail=nvPosstatConnfail, nvPriconfMaxRec=nvPriconfMaxRec, nvSDLIRedcnts=nvSDLIRedcnts, nvApacsconfBillingT4=nvApacsconfBillingT4, nvMediastatMaxRec=nvMediastatMaxRec, nvPricuconfNumRec=nvPricuconfNumRec, nvRadcstatEntry=nvRadcstatEntry, nvIticstatNumOutgo=nvIticstatNumOutgo, nvX25confLpc=nvX25confLpc, nvPosisoField50=nvPosisoField50, nvStringNumRec=nvStringNumRec, nvIpstatTable=nvIpstatTable, nvApclstatCalled=nvApclstatCalled, nvItirpoaCode=nvItirpoaCode, nvItiportTimer0=nvItiportTimer0, nvX25confNuireq=nvX25confNuireq, nvApacsstatTxenqs=nvApacsstatTxenqs, nvTcprstatMaxRec=nvTcprstatMaxRec, nvR2pstatTable=nvR2pstatTable, nvAcctstatAbstime=nvAcctstatAbstime, nvApclstatX25clr=nvApclstatX25clr, nvAcctoperMaxRec=nvAcctoperMaxRec, nvSFRMRName=nvSFRMRName, nvX25callNtxrrs=nvX25callNtxrrs, nvIprouteStatus=nvIprouteStatus, nvDportstatPortname=nvDportstatPortname, nvNetroute=nvNetroute, nvAcctstatRecord=nvAcctstatRecord, nvMpconfTrapEnable=nvMpconfTrapEnable, nvIpstatUnKnwnPrs=nvIpstatUnKnwnPrs, nvNodeconfChgreqid=nvNodeconfChgreqid, nvNetpvcIndex=nvNetpvcIndex, nvElxstat=nvElxstat, nvTrapRateIncreasedToL2=nvTrapRateIncreasedToL2, nvCrfstatIndex=nvCrfstatIndex, nvTnnlconf=nvTnnlconf, nvRbdspstatMaxRec=nvRbdspstatMaxRec, nvModemstat=nvModemstat, nvL2tptstatTunlState=nvL2tptstatTunlState, nvRbconfEntry=nvRbconfEntry, nvCDSPEnable=nvCDSPEnable, nvX25confEntry=nvX25confEntry, nvApclstatIsdnclr=nvApclstatIsdnclr, nvTrapPppMpLinkDropped=nvTrapPppMpLinkDropped, nvTnnlstatCallattfs=nvTnnlstatCallattfs, nvX25nuimapNui=nvX25nuimapNui, nvXbillstat5to10=nvXbillstat5to10, nvPricstatState=nvPricstatState, nvRoutemapMaxRec=nvRoutemapMaxRec, nvIfStackInfoEntry=nvIfStackInfoEntry, nvRbdspstatTotrbpipe=nvRbdspstatTotrbpipe, nvNetrouteMaxRec=nvNetrouteMaxRec, nvDportstatSetstate=nvDportstatSetstate, nvX25statNtxres=nvX25statNtxres, nvStringStatus=nvStringStatus, nvModemstatRcvlvl=nvModemstatRcvlvl, nvR2profMftimeout=nvR2profMftimeout, nvFrvcconfTable=nvFrvcconfTable, nvPosisoField8=nvPosisoField8, nvBillconfSet4=nvBillconfSet4, nvApclstatNua=nvApclstatNua, nvLinkstatProtocol=nvLinkstatProtocol, nvFriconfRsrcpool=nvFriconfRsrcpool, nvSFRMRSlotIndex=nvSFRMRSlotIndex, nvIprouteMetric=nvIprouteMetric, nvDialstatNnoInput=nvDialstatNnoInput, nvModemprofBildly=nvModemprofBildly, nvRadconfAuth3port=nvRadconfAuth3port, nvRadcstatTable=nvRadcstatTable, nvTrapElxDown=nvTrapElxDown, nvPosmsgmapMaxRec=nvPosmsgmapMaxRec, nvPosisoField40=nvPosisoField40, nvPosstatInvrqtpdu=nvPosstatInvrqtpdu, nvPosisoField55=nvPosisoField55, nvSnmpconfsysname=nvSnmpconfsysname, nvMpstatPart1IpcpOperS=nvMpstatPart1IpcpOperS, nvIprtstatIndex=nvIprtstatIndex, nvApacsstatNumRec=nvApacsstatNumRec, nvPosconfStatus=nvPosconfStatus, nvItipstatNnfails=nvItipstatNnfails, nvRbcstatCallingnum=nvRbcstatCallingnum, nvAnuaconfRedirect=nvAnuaconfRedirect, nvRbprofDtmfoff=nvRbprofDtmfoff, nvTnmap=nvTnmap, nvFrmrstatNumPortUp=nvFrmrstatNumPortUp, nvR2dspstat=nvR2dspstat, nvUgconfThreshld=nvUgconfThreshld, nvDialmap=nvDialmap, nvItipstatPortname=nvItipstatPortname, nvPricuconf=nvPricuconf, nvBillconfSet7nua3=nvBillconfSet7nua3, nvMpconfIndex=nvMpconfIndex, nvDlstatTouts=nvDlstatTouts, nvLinkstatRrrxs=nvLinkstatRrrxs, nvTcpprofMaxRec=nvTcpprofMaxRec, nvCrfstatDirection=nvCrfstatDirection, nvDialstatLastAddr=nvDialstatLastAddr, nvBillconfSet5nua3=nvBillconfSet5nua3, nvIticstatNpassfails=nvIticstatNpassfails, nvMpconfTxFrag=nvMpconfTxFrag, nvTrapconfTrapId=nvTrapconfTrapId, nvElxstatIndex=nvElxstatIndex, nvMpconfStatus=nvMpconfStatus, nvApfilterNumRec=nvApfilterNumRec, nvIptrunkIndex=nvIptrunkIndex, nvPristatEntry=nvPristatEntry, nvTcpprof=nvTcpprof, nvPosisoStatus=nvPosisoStatus, nvIcmpstatInAdMs=nvIcmpstatInAdMs, nvPppstatOutDiscrd=nvPppstatOutDiscrd, nvMediastatImage1sw=nvMediastatImage1sw, nvSnmpconfcontact=nvSnmpconfcontact, nvFrvcstatService=nvFrvcstatService, nvSlotstat=nvSlotstat, nvPosconf=nvPosconf, nvRrstatConns=nvRrstatConns, nvPriconfNfasif=nvPriconfNfasif, nvTnconfDefiticlass=nvTnconfDefiticlass, nvR2profMfvacant=nvR2profMfvacant, nvUgconfMaxRec=nvUgconfMaxRec, nvRadconfDnsatt2=nvRadconfDnsatt2, nvTrapDSPRFailed=nvTrapDSPRFailed, nvIpconfStatus=nvIpconfStatus, nvAbillstatPfail=nvAbillstatPfail, nvSFRMRRxovrs=nvSFRMRRxovrs, nvRbpstat=nvRbpstat, nvBillconfSet11nua3=nvBillconfSet11nua3, nvRadustatMaxRec=nvRadustatMaxRec, nvNmsuser=nvNmsuser, nvTcpstatTable=nvTcpstatTable, nvNodeconfDsprfail=nvNodeconfDsprfail, nvX25callNrxrrs=nvX25callNrxrrs, nvElxstatInUcasts=nvElxstatInUcasts, nvTcpstatIndex=nvTcpstatIndex, nvNetpvcmapNumRec=nvNetpvcmapNumRec, nvDlstatEntry=nvDlstatEntry, nvIptrunkTable=nvIptrunkTable, nvBillconf1Index=nvBillconf1Index, nvRadcstat=nvRadcstat, nvDlstatAbtfrxs=nvDlstatAbtfrxs, nvPosvisaField14=nvPosvisaField14, nvDlstatPstate=nvDlstatPstate, nvL2tpsstatTunnelID=nvL2tpsstatTunnelID, nvPosisoField36=nvPosisoField36, nvNsockconfStatus=nvNsockconfStatus, nvX25confTx0=nvX25confTx0, nvItipstatNtdc=nvItipstatNtdc, nvTcpstatCloseds=nvTcpstatCloseds, nvTncconfSuspend=nvTncconfSuspend, nvUgstatNumused=nvUgstatNumused, nvMediastatMediasize=nvMediastatMediasize, nvNodestatNumcalls=nvNodestatNumcalls, nvRadcstatNAuth2Rej=nvRadcstatNAuth2Rej, nvNodeconfSwtype=nvNodeconfSwtype, nvIpstatFragCrs=nvIpstatFragCrs, nvXnuasetNumRec=nvXnuasetNumRec, nvFristatEntry=nvFristatEntry, nvX25statNtxpaks=nvX25statNtxpaks, nvElxstatDtreset=nvElxstatDtreset, nvPosnmsmapIndex=nvPosnmsmapIndex, nvSFRMRState=nvSFRMRState, nvTcpstatMaxRec=nvTcpstatMaxRec, nvApfclstat=nvApfclstat, nvApfilterIndex=nvApfilterIndex, nvCFRMRTable=nvCFRMRTable, nvPosprofSize=nvPosprofSize, nvMpconfTxFragMin=nvMpconfTxFragMin, nvPosisoField19=nvPosisoField19, nvTrapNoIdlePorts=nvTrapNoIdlePorts, nvLinkstat=nvLinkstat, nvPriconfL1prot=nvPriconfL1prot, nvPosisoField9=nvPosisoField9, nvIticlassRpoatype=nvIticlassRpoatype, nvRbpstatRbsrbdsp=nvRbpstatRbsrbdsp, nvApacsconfDlrtries=nvApacsconfDlrtries, nvNmsuserNumRec=nvNmsuserNumRec, nvCDSPTable=nvCDSPTable, nvPosnmsmapStatus=nvPosnmsmapStatus, nvApmdmstatTxpkt=nvApmdmstatTxpkt, nvCrfstatTable=nvCrfstatTable, nvRadconfAcct=nvRadconfAcct, nvBillconfMaxRec=nvBillconfMaxRec, nvRaduserTable=nvRaduserTable, nvTslotconfNumRec=nvTslotconfNumRec, nvApmdmstatRxbytes=nvApmdmstatRxbytes)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvItiprofP12=nvItiprofP12, nvIcmpstatOutPrmPrbs=nvIcmpstatOutPrmPrbs, nvTslotconfEntry=nvTslotconfEntry, nvApfilterFailcause=nvApfilterFailcause, nvX25nuimapIndex=nvX25nuimapIndex, nvX25statMaxvc=nvX25statMaxvc, nvRadcstatNAcctRtry=nvRadcstatNAcctRtry, nvTrapPriDataLayerUp=nvTrapPriDataLayerUp, nvPppstatInDiscRq=nvPppstatInDiscRq, nvNodeconf=nvNodeconf, nvDialstatAdSucctim=nvDialstatAdSucctim, nvApacsstatBdhostblk=nvApacsstatBdhostblk, nvSlotstatIndex=nvSlotstatIndex, nvLinkconfT1=nvLinkconfT1, nvIcmpstat=nvIcmpstat, nvR2cstatIndex=nvR2cstatIndex, nvNodeconfCalarms=nvNodeconfCalarms, nvPricstatMaxRec=nvPricstatMaxRec, nvIticonfPadaddr=nvIticonfPadaddr, nvUgstatEntry=nvUgstatEntry, nvTrapconfNumRec=nvTrapconfNumRec, nvTcpprofKeepidle=nvTcpprofKeepidle, nvFriconfnN2=nvFriconfnN2, nvIpwanmapUserdat=nvIpwanmapUserdat, nvTncconfInterrupt=nvTncconfInterrupt, nvX25statNrxclrs=nvX25statNrxclrs, nvTncmapTcppn=nvTncmapTcppn, nvApacsstatLrcerrdat=nvApacsstatLrcerrdat, nvPosniimapTpduaddr=nvPosniimapTpduaddr, nvElxconfIndex=nvElxconfIndex, nvTcpstatRcvbyteafterwins=nvTcpstatRcvbyteafterwins, nvLinkconfPollthres=nvLinkconfPollthres, nvTncmapNetad=nvTncmapNetad, nvIticstatTrmdscdat=nvIticstatTrmdscdat, nvNetmapMaxRec=nvNetmapMaxRec, nvTslotstatNumfailcn=nvTslotstatNumfailcn, nvItimapNetaddr=nvItimapNetaddr, nvDlstatIndex=nvDlstatIndex, nvFrvcconfRxcgclear=nvFrvcconfRxcgclear, nvRbpstatTotocalatt=nvRbpstatTotocalatt, nvItipstatX3type=nvItipstatX3type, nvDuiconfType=nvDuiconfType, nvNsockmapStatus=nvNsockmapStatus, nvDrstatNumRec=nvDrstatNumRec, nvApacsstatParerrdat=nvApacsstatParerrdat, nvMpstatPart1RmtDisc=nvMpstatPart1RmtDisc, nvXnuasetTable=nvXnuasetTable, nvPristatMaxrsetup=nvPristatMaxrsetup, nvR2profReanswer=nvR2profReanswer, nvRbsysparAlarmint=nvRbsysparAlarmint, nvRbcstatCallnum=nvRbcstatCallnum, nvL2tpstatMlfrmPkt=nvL2tpstatMlfrmPkt, nvAbillstatB2call=nvAbillstatB2call, nvL2tpconfInactivty=nvL2tpconfInactivty, nvModemprofType=nvModemprofType, nvL2tpstatTable=nvL2tpstatTable, nvPosconfTable=nvPosconfTable, nvTrapFrPortUp=nvTrapFrPortUp, nvIticlassXonin=nvIticlassXonin, nvTnconfIndex=nvTnconfIndex, nvPosisoField42=nvPosisoField42, nvDlspcstat=nvDlspcstat, nvR2profMfspeech=nvR2profMfspeech, nvPosprofRsrcpool=nvPosprofRsrcpool, nvItipstatTxWsze=nvItipstatTxWsze, nvSnmpmgrstatus=nvSnmpmgrstatus, nvNmsuserCug=nvNmsuserCug, nvNodestatClkfails=nvNodestatClkfails, nvItipstatRxPsze=nvItipstatRxPsze, nvDlspcconfNodename=nvDlspcconfNodename, nvFrvcstatDtreset=nvFrvcstatDtreset, nvX25callCode=nvX25callCode, nvTnnlstatRtstring=nvTnnlstatRtstring, nvItirpoaTable=nvItirpoaTable, nvApacsstatTmoerrcip=nvApacsstatTmoerrcip, nvBillconfSet2=nvBillconfSet2, nvR2profSuffix=nvR2profSuffix, nvItipstatNtccs=nvItipstatNtccs, nvLcpconfPort=nvLcpconfPort, nvMpstatPart1Link1=nvMpstatPart1Link1, nvTcpstatPersisttimeos=nvTcpstatPersisttimeos, nvRadcstatNAuthLocl=nvRadcstatNAuthLocl, nvIticonfV120p11=nvIticonfV120p11, nvX25confMaxpsze=nvX25confMaxpsze, nvAcctoper=nvAcctoper, nvPosprofDirection=nvPosprofDirection, nvPridstat=nvPridstat, nvItiustat=nvItiustat, nvXbillconfEnable=nvXbillconfEnable, nvPriconf=nvPriconf, nvIticonfItiswitch=nvIticonfItiswitch, nvRadconfAcctauth=nvRadconfAcctauth, nvR2conf=nvR2conf, nvX25callRxtput=nvX25callRxtput, nvIticlassInvclrcmd=nvIticlassInvclrcmd, nvTslotconfReserve2=nvTslotconfReserve2, nvFristatRxexceszes=nvFristatRxexceszes, nvIticonfDnic=nvIticonfDnic, nvR2cstatR2port=nvR2cstatR2port, nvPridstatNumRec=nvPridstatNumRec, nvTrapLocalDatabaseChanged=nvTrapLocalDatabaseChanged, nvTrapconfStatus=nvTrapconfStatus, nvApacsstatGdadrblks=nvApacsstatGdadrblks, nvFriconfLmitype=nvFriconfLmitype, nvLinkconfNumRec=nvLinkconfNumRec, nvIptrunkNumRec=nvIptrunkNumRec, nvDialstatNnoRoute=nvDialstatNnoRoute, nvDuiconfEntry=nvDuiconfEntry, nvIticmdIndex=nvIticmdIndex, nvRadcstatMaxRec=nvRadcstatMaxRec, nvR2cstatIbr2dsp=nvR2cstatIbr2dsp, nvRadustatFrmRting=nvRadustatFrmRting, nvDlstatApp=nvDlstatApp, nvTnnlstatfMaxRec=nvTnnlstatfMaxRec, nvX25callTable=nvX25callTable, nvElxconfNumRec=nvElxconfNumRec, nvNmsuserTable=nvNmsuserTable, nvPosisoField34=nvPosisoField34, nvRbcstatNumRec=nvRbcstatNumRec, nvRbdspstatUnusedchn=nvRbdspstatUnusedchn, nvRbpstatDliname=nvRbpstatDliname, nvPppstatOutExpnds=nvPppstatOutExpnds, nvPriconfPriname=nvPriconfPriname, nvItipstatNddiag=nvItipstatNddiag, nvX25confRevacc=nvX25confRevacc, nvPriconfSwitch=nvPriconfSwitch, nvItirpoaIndex=nvItirpoaIndex, nvTcpprofKeepprbs=nvTcpprofKeepprbs, nvR2sysparDeallthrs=nvR2sysparDeallthrs, nvR2profMfanumsch=nvR2profMfanumsch, nvIticstatNumRec=nvIticstatNumRec, nvDlspcstatEntry=nvDlspcstatEntry, nvNodestatX25call=nvNodestatX25call, nvRadustatEntry=nvRadustatEntry, nvRbdspstatTable=nvRbdspstatTable, nvItiportMaxbspace=nvItiportMaxbspace, nvModemconfProfilename=nvModemconfProfilename, nvR2pstatTotosigatt=nvR2pstatTotosigatt, nvApmdmstatMaxRec=nvApmdmstatMaxRec, nvTnnlconfNumRec=nvTnnlconfNumRec, nvItiprofIndex=nvItiprofIndex, nvDuiconfFirsttry=nvDuiconfFirsttry, nvApfclstatAblock=nvApfclstatAblock, nvRaduserEntry=nvRaduserEntry, nvBillconfSet9=nvBillconfSet9, nvPosisoField5=nvPosisoField5, nvItipstatIndex=nvItipstatIndex, nvNetconSrccompid=nvNetconSrccompid, nvPppstatTnnlState=nvPppstatTnnlState, nvRbdspstatTotibchn=nvRbdspstatTotibchn, nvPricustatNumRec=nvPricustatNumRec, nvPriconfStandby=nvPriconfStandby, nvX25confDlnumber=nvX25confDlnumber, nvPosisoField18=nvPosisoField18, nvX25confNettype=nvX25confNettype, nvNsockmapIpaddr=nvNsockmapIpaddr, nvItirpoaCarrier=nvItirpoaCarrier, nvX25callNs=nvX25callNs, nvTcpstatSndwinups=nvTcpstatSndwinups, nvTncstatIpaddr=nvTncstatIpaddr, nvElxconfInactivty=nvElxconfInactivty, nvBillstatNgrtr2400=nvBillstatNgrtr2400, nvPriconfDlirst=nvPriconfDlirst, nvDialstatNcalling=nvDialstatNcalling, nvAnuaconfStatus=nvAnuaconfStatus, nvAcctstatDay=nvAcctstatDay, nvDportstatOutcalls=nvDportstatOutcalls, nvModemprofTxlvl=nvModemprofTxlvl, nvPppstatLcpOperS=nvPppstatLcpOperS, nvLcpconfStatus=nvLcpconfStatus, nvCDLIAtten=nvCDLIAtten, nvNetconSrcid=nvNetconSrcid, nvPriconfNumbplan=nvPriconfNumbplan, nvPricuconfEntry=nvPricuconfEntry, nvBillstat15to20=nvBillstat15to20, nvX25confDefpsze=nvX25confDefpsze, nvRadconfMaxRec=nvRadconfMaxRec, nvR2dspstatUnusedchn=nvR2dspstatUnusedchn, nvMpstatPart1Link10=nvMpstatPart1Link10, nvRadconfAcct2port=nvRadconfAcct2port, nvDialmapStatus=nvDialmapStatus, nvR2cstatLanguage=nvR2cstatLanguage, nvIticstatNcurOutgo=nvIticstatNcurOutgo, nvBillstatRxcallc=nvBillstatRxcallc, nvIticlassInitcmd=nvIticlassInitcmd, nvPosprofProtocol=nvPosprofProtocol, nvElxstatInNUcasts=nvElxstatInNUcasts, nvPosisoName=nvPosisoName, nvIpwanmapNetprot=nvIpwanmapNetprot, nvFtpstatConnfails=nvFtpstatConnfails, nvNodestatTotalbufs=nvNodestatTotalbufs, nvCrouteVol1mode=nvCrouteVol1mode, nvPricuconfThresh2=nvPricuconfThresh2, nvPosprofEntry=nvPosprofEntry, nvIpcpconf=nvIpcpconf, nvX25confNumRec=nvX25confNumRec, nvDspmallocDsptype=nvDspmallocDsptype, nvDportstatChstate=nvDportstatChstate, nvDportstatDuihost=nvDportstatDuihost, nvBillstatLess5=nvBillstatLess5, nvItiustatNcalls=nvItiustatNcalls, nvPosprofTcpmsglen=nvPosprofTcpmsglen, nvR2profClfwalmsk=nvR2profClfwalmsk, nvTnmapStatus=nvTnmapStatus, nvRbprofSigtype=nvRbprofSigtype, nvItiuserUserpaswd=nvItiuserUserpaswd, nvPricstatTable=nvPricstatTable, nvPricustatCounter3=nvPricustatCounter3, nvTrapFramerfailed=nvTrapFramerfailed, nvBillstat10to15=nvBillstat10to15, nvString=nvString, nvLcpconfUsrdelim=nvLcpconfUsrdelim, nvItiprofP28=nvItiprofP28, nvApacsstatN1200bd=nvApacsstatN1200bd, nvRadustatRaduOperS=nvRadustatRaduOperS, nvIcmpstatInErrs=nvIcmpstatInErrs, nvPosisoMaxRec=nvPosisoMaxRec, nvTrapconfDesc=nvTrapconfDesc, nvTrapFrLMINormal=nvTrapFrLMINormal, nvAbillstatB3time=nvAbillstatB3time, nvRbsysparMaxbnmlen=nvRbsysparMaxbnmlen, nvAbillstatB6time=nvAbillstatB6time, nvApfclstatTable=nvApfclstatTable, nvTrapDUIDown=nvTrapDUIDown, nvBillconfNumRec=nvBillconfNumRec, nvItimapStatus=nvItimapStatus, nvTcpstatSndacks=nvTcpstatSndacks, nvDialmapMaxRec=nvDialmapMaxRec, nvDlconfEntry=nvDlconfEntry, nvPppstatUnKnwnPr=nvPppstatUnKnwnPr, nvDialstatNcurrent=nvDialstatNcurrent, nvItipstatReservet=nvItipstatReservet, nvXbillstatNetclr=nvXbillstatNetclr, nvFtpstatCurrstat=nvFtpstatCurrstat, nvModemstatDctype=nvModemstatDctype, nvTncmapEntry=nvTncmapEntry, nvDuiconfRetrytime=nvDuiconfRetrytime, nvSDLIErrcnt=nvSDLIErrcnt, nvRbprofEntry=nvRbprofEntry, nvLinkstatRxdds=nvLinkstatRxdds, nvX25confNic=nvX25confNic, nvPosstatRsptimout=nvPosstatRsptimout, nvRadconfAcct2=nvRadconfAcct2, nvDuistatEntry=nvDuistatEntry, nvDialstatTable=nvDialstatTable, nvApacsstatTxnaks=nvApacsstatTxnaks, nvPppstat=nvPppstat, nvR2cstatEchosup=nvR2cstatEchosup, nvNetconCalledad=nvNetconCalledad, nvRadconfAuth1port=nvRadconfAuth1port, nvIfStackInfoHigherLI=nvIfStackInfoHigherLI, nvPosisoField54=nvPosisoField54, nvApfilter=nvApfilter, nvSymuserMaxRec=nvSymuserMaxRec)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvTnclassIndex=nvTnclassIndex, nvIticonfMaxRec=nvIticonfMaxRec, nvNetrouteNodeid=nvNetrouteNodeid, nvModemstatMode=nvModemstatMode, nvL2tpstatCtrlRecv=nvL2tpstatCtrlRecv, nvMpstatPart2UnKnwnPr=nvMpstatPart2UnKnwnPr, nvFriconfEntry=nvFriconfEntry, nvCrcstatState=nvCrcstatState, nvRoutemapUserdata=nvRoutemapUserdata, nvCrfstatReserve1=nvCrfstatReserve1, nvIpwanmapCug=nvIpwanmapCug, nvPricstatSeqno=nvPricstatSeqno, nvIticlassXoffout=nvIticlassXoffout, nvCDSPNumfaicon=nvCDSPNumfaicon, nvDportstatIndex=nvDportstatIndex, nvMpstatPart1Link11=nvMpstatPart1Link11, nvPosisoField49=nvPosisoField49, nvRbsysparStatus=nvRbsysparStatus, nvCrcstatCallngsub=nvCrcstatCallngsub, nvIticstatMaxRec=nvIticstatMaxRec, nvBillconfSet8nua2=nvBillconfSet8nua2, nvApclstatTime=nvApclstatTime, nvAbillstatP3call=nvAbillstatP3call, nvL2tpstatProtVrsn=nvL2tpstatProtVrsn, nvMediastat=nvMediastat, nvSDLISlotIndex=nvSDLISlotIndex, nvRadcstatNAuthRtry=nvRadcstatNAuthRtry, nvMpstatPart2OutCmPcnt=nvMpstatPart2OutCmPcnt, nvFriconfPort=nvFriconfPort, nvModemprofStatus=nvModemprofStatus, nvIticmdCommand=nvIticmdCommand, nvBillstatMaxRec=nvBillstatMaxRec, nvSlotstatTable=nvSlotstatTable, nvPricstatRate=nvPricstatRate, nvPristatIndex=nvPristatIndex, nvModemconf=nvModemconf, nvTnconfDeftnclass=nvTnconfDeftnclass, nvTncconfNumRec=nvTncconfNumRec, nvTncmap=nvTncmap, nvMpconfAdminS=nvMpconfAdminS, nvR2cstatTable=nvR2cstatTable, nvRrstatNumIcalls=nvRrstatNumIcalls, nvCFRMRRate=nvCFRMRRate, nvItiportMode=nvItiportMode, nvPosvisaField19=nvPosvisaField19, nvLcpconfMaxRec=nvLcpconfMaxRec, nvTrapLinkNotReady=nvTrapLinkNotReady, nvUgconf=nvUgconf, nvApmdmstatFltrain=nvApmdmstatFltrain, nvNetpvcMaxRec=nvNetpvcMaxRec, nvMediastatImage2sw=nvMediastatImage2sw, nvIprtstat=nvIprtstat, nvPosvisaField15=nvPosvisaField15, nvMpstatPart1Link7=nvMpstatPart1Link7, nvTcprstatOutport=nvTcprstatOutport, nvSFRMRLostfrms=nvSFRMRLostfrms, nvApfclstatLabel1=nvApfclstatLabel1, nvX25confTable=nvX25confTable, nvDlstatRnrtxs=nvDlstatRnrtxs, nvIticlassMaxRec=nvIticlassMaxRec, nvDlspcconfStatus=nvDlspcconfStatus, nvPosisoField38=nvPosisoField38, nvR2sysparEntry=nvR2sysparEntry, nvItiprofP13=nvItiprofP13, nvDlstatRrrxs=nvDlstatRrrxs, nvRadcstatDtreset=nvRadcstatDtreset, nvRadconfEntry=nvRadconfEntry, nvApacsstatX25conns=nvApacsstatX25conns, nvIfStackInfoStatus=nvIfStackInfoStatus, nvIticlassBannerid=nvIticlassBannerid, nvRadconfAuth3=nvRadconfAuth3, nvPosconfMaxRec=nvPosconfMaxRec, nvFrvcconfIndex=nvFrvcconfIndex, nvPristatDlirst=nvPristatDlirst, nvNetpvcmapPvccode=nvNetpvcmapPvccode, nvIticstatIndex=nvIticstatIndex, nvCrouteReserve1=nvCrouteReserve1, nvFriconfTable=nvFriconfTable, nvCDLICsudsu=nvCDLICsudsu, nvMediastatImagechg=nvMediastatImagechg, nvFrvcstatStatus=nvFrvcstatStatus, nvFrmrstatNumTxBytes=nvFrmrstatNumTxBytes, nvFrmrstatEntry=nvFrmrstatEntry, nvItipstatX28type=nvItipstatX28type, nvLinkstatRejrxs=nvLinkstatRejrxs, nvPridstatTime=nvPridstatTime, nvRrstatDtreset=nvRrstatDtreset, nvSFRMRCid=nvSFRMRCid, nvLinkstatRnrtxs=nvLinkstatRnrtxs, nvNodestat=nvNodestat, nvPosisoField23=nvPosisoField23, nvX25confNoc=nvX25confNoc, nvX25confXtend=nvX25confXtend, nvSFRMRNrxoff=nvSFRMRNrxoff, nvCrcstatReserve2=nvCrcstatReserve2, nvRadustatSTimeout=nvRadustatSTimeout, nvCrcstatRcsc2=nvCrcstatRcsc2, nvTrapRateDecreasedBelowL1=nvTrapRateDecreasedBelowL1, nvItiprofP5=nvItiprofP5, nvDlstatProtocol=nvDlstatProtocol, nvTnconf=nvTnconf, nvNodeconfBusyout=nvNodeconfBusyout, nvFtpstatCurrfirecs=nvFtpstatCurrfirecs, nvIticstatMaxcalls=nvIticstatMaxcalls, nvR2pstat=nvR2pstat, nvRrstatMaxRec=nvRrstatMaxRec, nvX25nuimapNumRec=nvX25nuimapNumRec, nvElxstatMaxRec=nvElxstatMaxRec, nvTslotconfIndex=nvTslotconfIndex, nvMpstatPart1Link6=nvMpstatPart1Link6, nvPosvisaField4=nvPosvisaField4, nvApmdmstatB3calls=nvApmdmstatB3calls, nvPosisoField48=nvPosisoField48, nvTcpcnstatLocaladdr=nvTcpcnstatLocaladdr, nvMpstatPart1Link5=nvMpstatPart1Link5, nvDrstatEntry=nvDrstatEntry, nvNetpvcmapNodeid=nvNetpvcmapNodeid, nvNmsuserOchrg=nvNmsuserOchrg, nvItipstatFast=nvItipstatFast, nvMpstatPart2OutErrors=nvMpstatPart2OutErrors, nvFrvcconfDlci=nvFrvcconfDlci, nvFtpconfMaxRec=nvFtpconfMaxRec, nvAcctstatMinute=nvAcctstatMinute, nvL2tpconfIdle=nvL2tpconfIdle, nvTnnlstatNetaddr=nvTnnlstatNetaddr, nvRbpstatDtreset=nvRbpstatDtreset, nvPosprofMode=nvPosprofMode, nvLcpconfEntry=nvLcpconfEntry, nvNodeconfClksrc3=nvNodeconfClksrc3, nvModemstatModel=nvModemstatModel, nvTnstatPortnum=nvTnstatPortnum, nvFriconfMaxRec=nvFriconfMaxRec, nvItiprofP9=nvItiprofP9, nvRbpstatLinbadcnt=nvRbpstatLinbadcnt, nvR2pstatNumRec=nvR2pstatNumRec, nvPosisoField11=nvPosisoField11, nvItipstatNdorigin=nvItipstatNdorigin, nvIptrunkDstiptrnk=nvIptrunkDstiptrnk, nvPosstatNactivchn=nvPosstatNactivchn, nvNetmapIndex=nvNetmapIndex, nvSFRMRMode=nvSFRMRMode, nvMediastatImage1db=nvMediastatImage1db, nvPosvisaField2=nvPosvisaField2, nvR2pstatLinbadcnt=nvR2pstatLinbadcnt, nvIticlassCug=nvIticlassCug, nvRrstatAvgtime=nvRrstatAvgtime, nvCDLIFormat=nvCDLIFormat, nvR2profMfrestart=nvR2profMfrestart, nvPristatCallsent=nvPristatCallsent, nvAnuaconfPreempt=nvAnuaconfPreempt, nvDuistatNumRec=nvDuistatNumRec, nvSymuserPassword=nvSymuserPassword, nvPristatCallfail=nvPristatCallfail, nvFrmrstatTotalCalls=nvFrmrstatTotalCalls, nvSDLIDlitype=nvSDLIDlitype, nvNetconConid=nvNetconConid, nvMpstatPart1Profile=nvMpstatPart1Profile, nvPricstatBchanl=nvPricstatBchanl, nvApacsstatDtreset=nvApacsstatDtreset, nvCrcstatCallngnum=nvCrcstatCallngnum, nvFtpstatTotalfisds=nvFtpstatTotalfisds, nvAbillstatB2time=nvAbillstatB2time, nvTcpstatAccepts=nvTcpstatAccepts, nvCrcstatNumRec=nvCrcstatNumRec, nvPosniimapEntry=nvPosniimapEntry, nvR2profMfnextdig=nvR2profMfnextdig, nvTnnlstatUserdata=nvTnnlstatUserdata, nvRbdspstatNumibchn=nvRbdspstatNumibchn, nvXnuasetNua2=nvXnuasetNua2, nvPosstatNmsrsps=nvPosstatNmsrsps, nvXbillstatTime=nvXbillstatTime, nvIpstatInRxs=nvIpstatInRxs, nvItipstatId=nvItipstatId, nvLinkstatAlarms=nvLinkstatAlarms, nvRbpstatTotocalest=nvRbpstatTotocalest, nvX25statNrxints=nvX25statNrxints, nvPosniimapMaxRec=nvPosniimapMaxRec, nvR2dspstatEntry=nvR2dspstatEntry, nvLcpconfAuth=nvLcpconfAuth, nvDuistatDtreset=nvDuistatDtreset, nvFtpstatTotalkbyrvs=nvFtpstatTotalkbyrvs, nvDrstatMaxRec=nvDrstatMaxRec, nvPriconfDliname=nvPriconfDliname, nvRadconfAuth2port=nvRadconfAuth2port, nvBillconfSet2nua3=nvBillconfSet2nua3, nvApfclstatMerchid=nvApfclstatMerchid, nvTncmapIndex=nvTncmapIndex, nvPosprofPolltim=nvPosprofPolltim, nvMediastatImage=nvMediastatImage, nvTnnlstat=nvTnnlstat, nvTcprstatNumRec=nvTcprstatNumRec, nvR2cstatCallednum=nvR2cstatCallednum, nvBillconfSet9nua2=nvBillconfSet9nua2, nvMpstatPart2OutExpnds=nvMpstatPart2OutExpnds, nvPosnmsmapTable=nvPosnmsmapTable, nvX25callTxpsze=nvX25callTxpsze, nvRadconfAuth1=nvRadconfAuth1, nvMpconfLnkLimit=nvMpconfLnkLimit, nvIpstatReasmOKs=nvIpstatReasmOKs, nvLinkstatDtreset=nvLinkstatDtreset, nvTslotconfOrigans=nvTslotconfOrigans, nvSDSPNumOfailneg=nvSDSPNumOfailneg, nvCFRMRPortIndex=nvCFRMRPortIndex, nvMpstatPart1MaxRec=nvMpstatPart1MaxRec, nvTcpstatDelacks=nvTcpstatDelacks, nvLcpconfItiudata=nvLcpconfItiudata, nvIcmpstatOutDstUnrs=nvIcmpstatOutDstUnrs, nvIcmpstatOutEchRps=nvIcmpstatOutEchRps, nvTslotstatIndex=nvTslotstatIndex, nvX25statNtxrnrs=nvX25statNtxrnrs, nvUgconfStatus=nvUgconfStatus, nvRadconfName=nvRadconfName, nvApacsstatRetrntmo=nvApacsstatRetrntmo, nvCrfstatCalledsub=nvCrfstatCalledsub, nvPosstatEftreqs=nvPosstatEftreqs, nvPppstatUserName=nvPppstatUserName, nvApclstatNumRec=nvApclstatNumRec, nvAcctstatTxsegs=nvAcctstatTxsegs, nvX25statNtxcallcs=nvX25statNtxcallcs, nvDuiconfNua=nvDuiconfNua, nvDlspcconfMaxRec=nvDlspcconfMaxRec, nvIticmdClass=nvIticmdClass, nvPppstatNumRec=nvPppstatNumRec, nvNetconConstate=nvNetconConstate, nvDlstatMstate=nvDlstatMstate, nvPosprofStatus=nvPosprofStatus, nvRbcstatCallednum=nvRbcstatCallednum, nvMediastatIndex=nvMediastatIndex, nvRadustatReqId=nvRadustatReqId, nvFriconfMaxfrmsz=nvFriconfMaxfrmsz, nvModemprofCmpdtype=nvModemprofCmpdtype, nvApclstatLabel1=nvApclstatLabel1, nvFrstatTxcurfps=nvFrstatTxcurfps, nvR2pstatPstat=nvR2pstatPstat, nvPosisoField61=nvPosisoField61, nvDialstatTrace=nvDialstatTrace, nvX25callChantype=nvX25callChantype, nvIpconfNumRec=nvIpconfNumRec, nvPosprof=nvPosprof, nvApmdmstatB1calls=nvApmdmstatB1calls, nvX25callDtreset=nvX25callDtreset, nvMpstatPart1RmtMRRU=nvMpstatPart1RmtMRRU, nvItiprofP19=nvItiprofP19, nvIticlassMaxpsze=nvIticlassMaxpsze, nvX25callNsunak=nvX25callNsunak, nvFrstatDtreset=nvFrstatDtreset, nvPppstatInError=nvPppstatInError, nvUgstatPool=nvUgstatPool, nvApfclstatIndex=nvApfclstatIndex, nvAbillstatB1time=nvAbillstatB1time, nvL2tptstatTable=nvL2tptstatTable, nvAcctoperEnable=nvAcctoperEnable, nvTnmapIndex=nvTnmapIndex, nvRbdspstat=nvRbdspstat)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvX25confStndbytim=nvX25confStndbytim, nvModemprofMode=nvModemprofMode, nvFristatRxbaddlcis=nvFristatRxbaddlcis, nvFriconfnT1=nvFriconfnT1, nvMpstatPart1RmtClass=nvMpstatPart1RmtClass, nvAcctstatTable=nvAcctstatTable, nvX25confNetname=nvX25confNetname, nvNetpvcPvcend=nvNetpvcPvcend, nvSDSPName=nvSDSPName, nvDlstatLinkname=nvDlstatLinkname, nvPricstatContype=nvPricstatContype, nvItiuserNumber=nvItiuserNumber, nvCrfstatRcsc0=nvCrfstatRcsc0, nvCroute=nvCroute, nvPristatEstreq=nvPristatEstreq, nvMpstatPart2InMfrags=nvMpstatPart2InMfrags, nvPosconfIndex=nvPosconfIndex, nvL2tpconfTable=nvL2tpconfTable, nvIticstatFailneg=nvIticstatFailneg, nvDlspcconfEntry=nvDlspcconfEntry, nvNodeconfSwdate=nvNodeconfSwdate, nvL2tpstatIndex=nvL2tpstatIndex, nvItipstatNrdiag=nvItipstatNrdiag, nvPosnmsmapMaxRec=nvPosnmsmapMaxRec, nvTcpcnstatIndex=nvTcpcnstatIndex, nvPosvisaField17=nvPosvisaField17, nvRbpstatRbstat=nvRbpstatRbstat, nvRbdspstatDtreset=nvRbdspstatDtreset, nvIpstatForwDatas=nvIpstatForwDatas, nvFristatPort=nvFristatPort, nvTncmapTable=nvTncmapTable, nvL2tpconfEntry=nvL2tpconfEntry, nvPricuconfThresh4=nvPricuconfThresh4, nvIpwanmapIdnum=nvIpwanmapIdnum, nvX25statNrxchars=nvX25statNrxchars, nvItipstatPvc=nvItipstatPvc, nvApfclstatRxbytes=nvApfclstatRxbytes, nvRadcstatNAuth2Acc=nvRadcstatNAuth2Acc, nvLinkstatIndex=nvLinkstatIndex, nvCrfstatCid=nvCrfstatCid, nvDialstatNinvnum=nvDialstatNinvnum, nvSDSPNumIncom=nvSDSPNumIncom, nvSDSPEvent6=nvSDSPEvent6, nvIticstatMaxIncom=nvIticstatMaxIncom, nvR2prof=nvR2prof, nvIticlassTidprompt=nvIticlassTidprompt, nvRrstatPoolname=nvRrstatPoolname, nvLinkstatNumRec=nvLinkstatNumRec, nvNsockmapNetaddr=nvNsockmapNetaddr, nvTrapconfIndex=nvTrapconfIndex, nvPosisoField33=nvPosisoField33, nvApfilterMerchid=nvApfilterMerchid, nvCrcstatRcsc1=nvCrcstatRcsc1, nvDialstat=nvDialstat, nvApacsconfMaxRec=nvApacsconfMaxRec, nvFrvcconfNumRec=nvFrvcconfNumRec, nvRbsysparAllocthrs=nvRbsysparAllocthrs, nvBillstatIndex=nvBillstatIndex, nvR2dspstatTotibchn=nvR2dspstatTotibchn, nvIticlassPromptid=nvIticlassPromptid, nvItirpoaStatus=nvItirpoaStatus, nvMpstatPart2MaxRec=nvMpstatPart2MaxRec, nvIpstatOutRqsts=nvIpstatOutRqsts, nvIpwanmapNetaddr=nvIpwanmapNetaddr, nvItipstatRxWsze=nvItipstatRxWsze, nvRadustatFrmIpaddr=nvRadustatFrmIpaddr, nvBillstatEntry=nvBillstatEntry, nvL2tptstat=nvL2tptstat, nvRoutemapStatus=nvRoutemapStatus, nvR2profMfcongstion=nvR2profMfcongstion, nvItiuserCallback=nvItiuserCallback, nvIpcpconfStatus=nvIpcpconfStatus, nvSFRMRRxaborts=nvSFRMRRxaborts, nvPristatTable=nvPristatTable, nvFrvcconfRxcgthres=nvFrvcconfRxcgthres, nvAbillstatB6call=nvAbillstatB6call, nvNodeconfStartup=nvNodeconfStartup, nvDlstat=nvDlstat, nvTnnlstatOutframes=nvTnnlstatOutframes, nvApmdmstatB5calls=nvApmdmstatB5calls, nvX25confLoc=nvX25confLoc, nvRbcstatIbrbdsp=nvRbcstatIbrbdsp, nvPosstatNtoolong=nvPosstatNtoolong, nvX25callTxwsze=nvX25callTxwsze, nvPosprofAddrtype=nvPosprofAddrtype, nvTcprstat=nvTcprstat, nvTncmapX3parms=nvTncmapX3parms, nvApacsstatActtmodat=nvApacsstatActtmodat, nvTncmapNumRec=nvTncmapNumRec, nvAcctstat64ktxpaks=nvAcctstat64ktxpaks, nvBillconf2Table=nvBillconf2Table, nvApacsconfBillingT2=nvApacsconfBillingT2, nvLcpconfMaxnak=nvLcpconfMaxnak, nvNsockconfEntry=nvNsockconfEntry, nvTrapS2=nvTrapS2, nvMediastatImage2db=nvMediastatImage2db, nvApacsstatTrmnodat=nvApacsstatTrmnodat, nvCrcstatDevice0=nvCrcstatDevice0, nvLinkstatN1=nvLinkstatN1, nvBillstatN300bps=nvBillstatN300bps, nvApclstatDialind=nvApclstatDialind, nvAbillstatIndex=nvAbillstatIndex, nvPosmsgmapStatus=nvPosmsgmapStatus, nvLcpconfpppTrapEn=nvLcpconfpppTrapEn, nvNodestatFreebufs=nvNodestatFreebufs, nvSnmpmgrIndex=nvSnmpmgrIndex, nvFrstatCurtime=nvFrstatCurtime, nvPosisoField15=nvPosisoField15, nvIticstatMaxOutgo=nvIticstatMaxOutgo, nvNetroutePrio=nvNetroutePrio, nvNodestatMaxcpu=nvNodestatMaxcpu, nvPristatCallrecvs=nvPristatCallrecvs, nvX25callDiag=nvX25callDiag, nvPosmsgmapIndex=nvPosmsgmapIndex, nvRbdspstatFlavor=nvRbdspstatFlavor, nvX25confNpc=nvX25confNpc, nvPricustatMaxRec=nvPricustatMaxRec, nvTrapDbautosave=nvTrapDbautosave, nvLinkstatRejtxs=nvLinkstatRejtxs, nvX25confFlowneg=nvX25confFlowneg, nvBillconfSet4nua1=nvBillconfSet4nua1, nvR2cstatReason=nvR2cstatReason, nvModemprofRxthresh=nvModemprofRxthresh, nvItipstatNoutputs=nvItipstatNoutputs, nvPricstatL1prot=nvPricstatL1prot, nvPppstatOutCmPcnt=nvPppstatOutCmPcnt, nvPosiso=nvPosiso, nvSlotstatNumRec=nvSlotstatNumRec, nvItiprofP20=nvItiprofP20, nvApacsstatResetdate=nvApacsstatResetdate, nvFtpstatServaddr=nvFtpstatServaddr, nvIcmpstatInDstUnrs=nvIcmpstatInDstUnrs, nvX25statDtreset=nvX25statDtreset, nvPosmsgmapTable=nvPosmsgmapTable, nvItiportPortname=nvItiportPortname, nvL2tptstatLocalTnID=nvL2tptstatLocalTnID, nvR2cstatMaxRec=nvR2cstatMaxRec, nvIticlassDefwsze=nvIticlassDefwsze, nvSDSPPortIndex=nvSDSPPortIndex, nvFrmrstatTable=nvFrmrstatTable, nvXbillstat10to15=nvXbillstat10to15, nvL2tpstatActivTnls=nvL2tpstatActivTnls, nvTnnlstatEntry=nvTnnlstatEntry, nvApmdmstatEntry=nvApmdmstatEntry, nvDspmallocMaxRec=nvDspmallocMaxRec, nvCrouteEntry=nvCrouteEntry, nvTslotconfMaxRec=nvTslotconfMaxRec, nvTrapDuiportavail=nvTrapDuiportavail, nvLinkstatTretrys=nvLinkstatTretrys, nvNodeconfRsttimer=nvNodeconfRsttimer, nvFrvcstatNumRec=nvFrvcstatNumRec, nvIticlassAcctng=nvIticlassAcctng, nvPosvisaNumRec=nvPosvisaNumRec, nvModemprofEc=nvModemprofEc, nvPosstatEntry=nvPosstatEntry, nvTcpprofKeepintvl=nvTcpprofKeepintvl, nvR2dspstatTable=nvR2dspstatTable, nvCrcstatTable=nvCrcstatTable, nvFrvcstatMaxRec=nvFrvcstatMaxRec, nvItiustatNcallbacks=nvItiustatNcallbacks, nvPosisoField52=nvPosisoField52, nvSDSPFailcaus=nvSDSPFailcaus, nvModemconfIndex=nvModemconfIndex, nvTslotstatService=nvTslotstatService, nvCrouteBw=nvCrouteBw, nvNmsuserEntry=nvNmsuserEntry, nvPppstatInEch=nvPppstatInEch, nvR2cstatDirection=nvR2cstatDirection, nvXbillstatEntry=nvXbillstatEntry, nvSnmpconfMaxRec=nvSnmpconfMaxRec, nvFrvcstatIndex=nvFrvcstatIndex, nvDrstatClass=nvDrstatClass, nvIfStackInfoLowerLI=nvIfStackInfoLowerLI, nvDlconf=nvDlconf, nvPosisoField30=nvPosisoField30, nvTncconfEntry=nvTncconfEntry, nvX25stat=nvX25stat, nvNsockconfMaxconn=nvNsockconfMaxconn, nvPppstatTnnlId=nvPppstatTnnlId, nvSnmpmgrComm=nvSnmpmgrComm, NvPortName=NvPortName, nvItimapClass=nvItimapClass, nvTcpprofIndex=nvTcpprofIndex, nvSnmpmgrNumRec=nvSnmpmgrNumRec, nvTslotconf=nvTslotconf, nvItiuserUsername=nvItiuserUsername, nvApfclstatPriname=nvApfclstatPriname, nvR2pstatTotocalest=nvR2pstatTotocalest, nvItipstatTable=nvItipstatTable, nvFrvcstatOutputrate=nvFrvcstatOutputrate, nvRoutemapAddrtype=nvRoutemapAddrtype, nvStringEntry=nvStringEntry, nvApacsstatDscexcnak=nvApacsstatDscexcnak, nvX25callNrunak=nvX25callNrunak, nvX25statNrxcalls=nvX25statNrxcalls, nvAnuaconfAltLabel=nvAnuaconfAltLabel, nvR2cstatCallingnum=nvR2cstatCallingnum, nvIfStackInfo=nvIfStackInfo, nvApclstatTable=nvApclstatTable, nvNetpvcmapIndex=nvNetpvcmapIndex, nvApfilterLabel1=nvApfilterLabel1, nvNodeconfTable=nvNodeconfTable, nvPosisoField26=nvPosisoField26, nvPriconfRsrcpool=nvPriconfRsrcpool, nvLcpconfSecurtmr=nvLcpconfSecurtmr, nvNsockmapService=nvNsockmapService, nvIpwanmapTput=nvIpwanmapTput, nvLinkconfEntry=nvLinkconfEntry, nvTslotstatServiceid=nvTslotstatServiceid, nvRbprofDtmfon=nvRbprofDtmfon, nvLcpconfAccm=nvLcpconfAccm, nvItipstatNrxpaks=nvItipstatNrxpaks, nvPricuconfThresh1=nvPricuconfThresh1, nvPricustatIndex=nvPricustatIndex, nvTcpstatEntry=nvTcpstatEntry, nvIticmd=nvIticmd, nvR2profMfgroupb=nvR2profMfgroupb, nvDuistatIndex=nvDuistatIndex, nvItiustatNtxpaks=nvItiustatNtxpaks, nvPosstatNmsbadhst=nvPosstatNmsbadhst, nvCrfstatCallednum=nvCrfstatCallednum, nvBillconfSet10nua2=nvBillconfSet10nua2, nvFristatOperstate=nvFristatOperstate, nvItipstatReserve1=nvItipstatReserve1, nvPosprofNumchan=nvPosprofNumchan, nvNsockconf=nvNsockconf, nvPosstatNumomsgs=nvPosstatNumomsgs, nvCFRMRClkmode=nvCFRMRClkmode, nvMpstatPart2Entry=nvMpstatPart2Entry, nvTnclassIpcmd=nvTnclassIpcmd, nvPriconfIndex=nvPriconfIndex, nvAbillstatB4call=nvAbillstatB4call, nvApmdmstatTable=nvApmdmstatTable, nvPristatPriname=nvPristatPriname, nvItiprofP34=nvItiprofP34, nvTnnlconfPortname=nvTnnlconfPortname, nvTnnlstatDtreset=nvTnnlstatDtreset, nvApfclstatNumRec=nvApfclstatNumRec, nvNetrouteNumRec=nvNetrouteNumRec, nvPricstatCalledno=nvPricstatCalledno, nvIpwanmapMask=nvIpwanmapMask, nvNmsuserCalldata=nvNmsuserCalldata, nvApmdmstat=nvApmdmstat, nvLinkstatNlinkup=nvLinkstatNlinkup, nvApacsconfHelpphone=nvApacsconfHelpphone, nvItiprofEntry=nvItiprofEntry, nvApclstatMaxRec=nvApclstatMaxRec, nvIcmpstatOutAdMsRps=nvIcmpstatOutAdMsRps, nvBillconfSet6nua2=nvBillconfSet6nua2, nvUgconfTable=nvUgconfTable, nvDuistatLastdiag=nvDuistatLastdiag, nvItiustatNpassfails=nvItiustatNpassfails, nvDialstatRcscpool=nvDialstatRcscpool, nvDlspcconfPidtable=nvDlspcconfPidtable)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvIpwanmapIpcp=nvIpwanmapIpcp, nvNetpvcmapEntry=nvNetpvcmapEntry, nvElxstatOutNUcasts=nvElxstatOutNUcasts, nvMpstatPart1Link12=nvMpstatPart1Link12, nvIcmpstatTable=nvIcmpstatTable, nvNetrouteStatus=nvNetrouteStatus, nvUgconfNumRec=nvUgconfNumRec, nvIticlassClasmode=nvIticlassClasmode, nvUgconfNumrsrvd=nvUgconfNumrsrvd, nvPosisoField13=nvPosisoField13, nvIticlassCalmethod=nvIticlassCalmethod, nvMpconfTxShortSeq=nvMpconfTxShortSeq, nvMpstatPart1Link2=nvMpstatPart1Link2, nvAnuaconfMaxRec=nvAnuaconfMaxRec, nvIpstatDtreset=nvIpstatDtreset, nvBillconfSet1nua3=nvBillconfSet1nua3, nvApacsstatN9600bd=nvApacsstatN9600bd, nvRadustatFrmProto=nvRadustatFrmProto, nvTslotconfPeeripadr=nvTslotconfPeeripadr, nvIcmpstatInRdrcts=nvIcmpstatInRdrcts, nvPosconfName=nvPosconfName, nvApmdmstatIndex=nvApmdmstatIndex, nvIprouteTable=nvIprouteTable, nvMpstatPart2InDiscRq=nvMpstatPart2InDiscRq, nvPosisoField44=nvPosisoField44, nvApacsconfParerrall=nvApacsconfParerrall, nvTcpstatRcvpacks=nvTcpstatRcvpacks, nvApacsconfTimerB=nvApacsconfTimerB, nvItiprofMaxRec=nvItiprofMaxRec, nvRbprofDtmftmout=nvRbprofDtmftmout, nvTncconfFout=nvTncconfFout, nvPristatCalloutrels=nvPristatCalloutrels, nvIprtstatEntry=nvIprtstatEntry, nvTrapN0=nvTrapN0, nvIpcpconfTable=nvIpcpconfTable, nvTslotstatCurtxfrm=nvTslotstatCurtxfrm, nvModemstatEctype=nvModemstatEctype, nvX25statNumRec=nvX25statNumRec, nvLcpconfMaxcfg=nvLcpconfMaxcfg, nvNsockmap=nvNsockmap, nvDuistatNunxmsgs=nvDuistatNunxmsgs, nvApacsstatParerrcip=nvApacsstatParerrcip, nvMediastatNumRec=nvMediastatNumRec, nvTrapPppLcpNetworkdown=nvTrapPppLcpNetworkdown, nvMpstatPart2OutBfrags=nvMpstatPart2OutBfrags, nvPosnmsmap=nvPosnmsmap, nvIcmpstatOutRdrcts=nvIcmpstatOutRdrcts, nvLinkstatEntry=nvLinkstatEntry, nvIpwanmapCugtype=nvIpwanmapCugtype, nvPosvisaField16=nvPosvisaField16, nvIticstatDtreset=nvIticstatDtreset, nvPppstatDtreset=nvPppstatDtreset, nvRadconfDnsatt1=nvRadconfDnsatt1, nvItipstatClassname=nvItipstatClassname, nvTnnlconfRsrcpool=nvTnnlconfRsrcpool, nvLinkconfProtocol=nvLinkconfProtocol, nvIpwanmapMtu=nvIpwanmapMtu, nvMpstatPart1Link13=nvMpstatPart1Link13, nvAbillstatP4time=nvAbillstatP4time, nvLcpconfIndex=nvLcpconfIndex, nvMpconfComprot1=nvMpconfComprot1, nvFtpstatTotalsucs=nvFtpstatTotalsucs, nvX25statOpen=nvX25statOpen, nvPosprofIndex=nvPosprofIndex, nvItipstatNctxpaks=nvItipstatNctxpaks, nvTnnlconfMaxRec=nvTnnlconfMaxRec, nvLinkconfDialout=nvLinkconfDialout, nvRrstatClass=nvRrstatClass, nvIfStackInfoNumRec=nvIfStackInfoNumRec, nvApacsconfDscdleeot=nvApacsconfDscdleeot, nvX25confThruneg=nvX25confThruneg, nevadaIsdn=nevadaIsdn, nvLcpconf=nvLcpconf, nvPosvisaField18=nvPosvisaField18, nvPosniimapNumRec=nvPosniimapNumRec, nvRbsysparEntry=nvRbsysparEntry, nvApacsconfBillingT3=nvApacsconfBillingT3, nvPosisoField14=nvPosisoField14, nvX25confLic=nvX25confLic, nvL2tpstatActivSns=nvL2tpstatActivSns, nvCDLIGain=nvCDLIGain, nvNodeconfDbversion=nvNodeconfDbversion, nvAbillstatNumRec=nvAbillstatNumRec, nvLinkconfWaitframe=nvLinkconfWaitframe, nvX25statNrxsegs=nvX25statNrxsegs, nvElxstatOperStat=nvElxstatOperStat, nvFrstatMtxavgfps=nvFrstatMtxavgfps, nvApclstatTermtype=nvApclstatTermtype, nvTnnlconfUserdata=nvTnnlconfUserdata, nvRadcstatNAcct2=nvRadcstatNAcct2, nvIticstatTable=nvIticstatTable, nvDportstatTable=nvDportstatTable, nvXnuaset=nvXnuaset, nvPosisoField12=nvPosisoField12, nvTslotstat=nvTslotstat, nvPosprofActsupl=nvPosprofActsupl, nvUgstatThresrejs=nvUgstatThresrejs, nvSnmpmgrSndTrap=nvSnmpmgrSndTrap, nvApfclstatCalled=nvApfclstatCalled, nvModemstatEntry=nvModemstatEntry, nvIcmpstatOutTmSts=nvIcmpstatOutTmSts, nvIcmpstatInMsgs=nvIcmpstatInMsgs, nvApacsstatTrmnoack=nvApacsstatTrmnoack, nvL2tpsstatIndex=nvL2tpsstatIndex, nvPosisoField3=nvPosisoField3, nvDrstatNumrsrvd=nvDrstatNumrsrvd, nvL2tpsstatCallSN=nvL2tpsstatCallSN, nvLinkstatTcharrxs=nvLinkstatTcharrxs, nvApacsstatNonuamtch=nvApacsstatNonuamtch, nvLcpconfRsrcpool=nvLcpconfRsrcpool, nvPosnmsmapNumRec=nvPosnmsmapNumRec, nvApfclstatCalling=nvApfclstatCalling, nvIticlassCallingid=nvIticlassCallingid, nvIpstatReasmRqds=nvIpstatReasmRqds, nvNodeconfNodeid=nvNodeconfNodeid, nvIprouteIndex=nvIprouteIndex, nvL2tpstat=nvL2tpstat, nvRadustatDtreset=nvRadustatDtreset, nvAcctstatRxsegs=nvAcctstatRxsegs, nvRaduserRespmsg=nvRaduserRespmsg, nvBillconf2Index=nvBillconf2Index, nvNsockconfNumRec=nvNsockconfNumRec, nvRbpstatToticalatt=nvRbpstatToticalatt, nvPricstatCalldir=nvPricstatCalldir, nvElxstatEntry=nvElxstatEntry, nvMpstatPart2InPkts=nvMpstatPart2InPkts, nvApmdmstatB6calls=nvApmdmstatB6calls, nvIpconfEntry=nvIpconfEntry, nvFrvcstatServiceid=nvFrvcstatServiceid, nvSnmpmgrMaxRec=nvSnmpmgrMaxRec, nvR2sysparAlarmint=nvR2sysparAlarmint, nvSnmpmgrIp=nvSnmpmgrIp, nvRoutemapIndex=nvRoutemapIndex, nvMpstatPart2InOctets=nvMpstatPart2InOctets, nvItiprofP25=nvItiprofP25, nvTnstatMaxRec=nvTnstatMaxRec, nvItiport=nvItiport, nvL2tptstatRemotTnID=nvL2tptstatRemotTnID, nvDlconfNumRec=nvDlconfNumRec, nvSFRMREntry=nvSFRMREntry, nevadaRb=nevadaRb, nvSymuserStatus=nvSymuserStatus, nvTrapN2=nvTrapN2, nvPppstatEntry=nvPppstatEntry, nvFrvcstatTable=nvFrvcstatTable, nvFrvcconfStatus=nvFrvcconfStatus, nvIpwanmapPvcid=nvIpwanmapPvcid, nvTcpcnstatMaxRec=nvTcpcnstatMaxRec, nvR2cstatCallnum=nvR2cstatCallnum, nvSymuserEntry=nvSymuserEntry, nvTnnlstatNumRec=nvTnnlstatNumRec, nvTnconfTable=nvTnconfTable, nvPosisoIndex=nvPosisoIndex, nvIticlassDialout=nvIticlassDialout, nvIpconfMtu=nvIpconfMtu, nvFrstatTxavgfps=nvFrstatTxavgfps, nvL2tptstatRecvData=nvL2tptstatRecvData, nvSDSPNumOutgo=nvSDSPNumOutgo, nvIticonfValserver=nvIticonfValserver, nvSDSPEvent11=nvSDSPEvent11, nvRrstatNumRec=nvRrstatNumRec, nvLinkconfN2=nvLinkconfN2, nvItiportMaxRec=nvItiportMaxRec, NvPoolName=NvPoolName, nvPppstatOutEch=nvPppstatOutEch, nvLcpconfPfc=nvLcpconfPfc, nvIticlassClassname=nvIticlassClassname, nvNodeconfQdlifail=nvNodeconfQdlifail, nvSDLIBlucnts=nvSDLIBlucnts, nvFtpstatCommstat=nvFtpstatCommstat, nvDportstatDowntime=nvDportstatDowntime, nvLcpconfAcfc=nvLcpconfAcfc, nvR2sysparLineway=nvR2sysparLineway, nvAbillstatB3call=nvAbillstatB3call, nvNodeconfRate1=nvNodeconfRate1, nvPristatNtxsetupa=nvPristatNtxsetupa, nvItipstatCug=nvItipstatCug, nvTcpstatSndprobes=nvTcpstatSndprobes, nvItiustatDtreset=nvItiustatDtreset, nvRadconfNumdigits=nvRadconfNumdigits, nvNodeconfIndex=nvNodeconfIndex, nvIticlassStatus=nvIticlassStatus, nvPosmsgmapPattern=nvPosmsgmapPattern, nvIpwanmapIpaddr=nvIpwanmapIpaddr, nvFtpstatTotalerrs=nvFtpstatTotalerrs, nvX25callTxtput=nvX25callTxtput, nvPosisoField29=nvPosisoField29, nvApfclstatFilter=nvApfclstatFilter, nvMpstatPart1Link3=nvMpstatPart1Link3, NvIsoType=NvIsoType, nvTcpstatKeeptimeos=nvTcpstatKeeptimeos, nvItiportEntry=nvItiportEntry, nvUgstatName=nvUgstatName, nvNetrouteEntry=nvNetrouteEntry, nvSFRMRPortIndex=nvSFRMRPortIndex, nvPppstatInOctets=nvPppstatInOctets, nvIpwanmapInactivty=nvIpwanmapInactivty, nvX25statNetname=nvX25statNetname, nvPosisoField24=nvPosisoField24, nvPriconfEstlink=nvPriconfEstlink, nvCDLITable=nvCDLITable, nvDrstatNumavail=nvDrstatNumavail, nvPricuconfThresh3=nvPricuconfThresh3, nvRbconfStatus=nvRbconfStatus, nvCrouteDialmapid=nvCrouteDialmapid, nvFriconfnT3=nvFriconfnT3, nvCrouteDirection=nvCrouteDirection, nvCrcstatL1mode=nvCrcstatL1mode, nvFristatMaxRec=nvFristatMaxRec, nvAbillstatB1call=nvAbillstatB1call, nvAbillstatB7time=nvAbillstatB7time, nvPppstatTable=nvPppstatTable, nvNsockconfTable=nvNsockconfTable, nvTnclassTable=nvTnclassTable, nvItipstatNinputs=nvItipstatNinputs, nvX25statCallcur=nvX25statCallcur, nvXbillstatNumRec=nvXbillstatNumRec, nvApfclstatTxbytes=nvApfclstatTxbytes, nvRaduserMaxRec=nvRaduserMaxRec, nvMpconfEntry=nvMpconfEntry, nvDrstatName=nvDrstatName, nvPosmsgmapDest=nvPosmsgmapDest, nvApfilterMaxRec=nvApfilterMaxRec, nvModemconfEntry=nvModemconfEntry, nvPristatCallrejs=nvPristatCallrejs, nvDuiconfMaxRec=nvDuiconfMaxRec, nvCDLIEntry=nvCDLIEntry, nvIpstatFragOKs=nvIpstatFragOKs, nvPosisoNumRec=nvPosisoNumRec, nvXbillstatRxseg=nvXbillstatRxseg, nvL2tpstatDataSend=nvL2tpstatDataSend, nvItipstatState=nvItipstatState, nvDialmapNumRec=nvDialmapNumRec, nvPricustatCounter2=nvPricustatCounter2, nvPosisoField41=nvPosisoField41, nvLcpconfTxmaxbuf=nvLcpconfTxmaxbuf, nvTncmapMode=nvTncmapMode, nvDrstatIndex=nvDrstatIndex, nvMpstatPart1Index=nvMpstatPart1Index, nvNetconEntry=nvNetconEntry, nvIticonfTable=nvIticonfTable, nvIticstatN28800bd=nvIticstatN28800bd, nvApclstatTxbytes=nvApclstatTxbytes, nvAnuaconfReserve1=nvAnuaconfReserve1, nvL2tpstatCtrlSend=nvL2tpstatCtrlSend, nvNetpvcmapStatus=nvNetpvcmapStatus, nvPristatNcuroutgo=nvPristatNcuroutgo, nvApmdmstatDtreset=nvApmdmstatDtreset, nvCFRMRName=nvCFRMRName, nvApacsstatTrmdsccip=nvApacsstatTrmdsccip, nvFrvcconfEntry=nvFrvcconfEntry, nvTcpstatRcvoopacks=nvTcpstatRcvoopacks, nvRoutemap=nvRoutemap, nvTcpstat=nvTcpstat)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvItipstatDtreset=nvItipstatDtreset, nvItimapTable=nvItimapTable, nvIpconfBcastaddr=nvIpconfBcastaddr, nvTcpstatRcvbadsums=nvTcpstatRcvbadsums, nvModemprofEntry=nvModemprofEntry, nvDlstatFrmrtxs=nvDlstatFrmrtxs, nvElxconfEntry=nvElxconfEntry, nvNetcon=nvNetcon, nvNetrouteService=nvNetrouteService, nvDspmallocWeight=nvDspmallocWeight, nvPristatNrxbusy=nvPristatNrxbusy, nevadaTcp=nevadaTcp, nvBillstatN1200bps=nvBillstatN1200bps, nvCrfstatEntry=nvCrfstatEntry, nvIticlassFastsel=nvIticlassFastsel, nvLcpconfMaxterm=nvLcpconfMaxterm, nvIpconfMask=nvIpconfMask, nvPosstatProtocol=nvPosstatProtocol, nvFtpstatIndex=nvFtpstatIndex, nvX25callNtxpaks=nvX25callNtxpaks, nvRbcstatReason=nvRbcstatReason, nvNetconMaxRec=nvNetconMaxRec, nvApclstatRxbytes=nvApclstatRxbytes, nvRadcstatRadAdminS=nvRadcstatRadAdminS, nvAbillstatP2call=nvAbillstatP2call, nvBillstatTime=nvBillstatTime, nvItiprofStatus=nvItiprofStatus, nvBillstatNumRec=nvBillstatNumRec, nvApfclstatTermtype=nvApfclstatTermtype, nvRadcstatNAcct3=nvRadcstatNAcct3, nvTrapFrDLCIsDown=nvTrapFrDLCIsDown, nvItiustatTable=nvItiustatTable, nvLinkstatTchartxs=nvLinkstatTchartxs, nvItiprofP23=nvItiprofP23, nvTcpstatRcvbadoffs=nvTcpstatRcvbadoffs, nvPosstatNfailcall=nvPosstatNfailcall, nvItiprofP31=nvItiprofP31, nvPricustatEntry=nvPricustatEntry, nvItiprofP32=nvItiprofP32, nvItiportEnable=nvItiportEnable, nvItiuserEntry=nvItiuserEntry, nvPristatNtxconn=nvPristatNtxconn, nvXnuasetMaxRec=nvXnuasetMaxRec, nvAbillstatTbtime=nvAbillstatTbtime, nvPosisoField58=nvPosisoField58, nvItiustatDuration=nvItiustatDuration, nvXbillconfEntry=nvXbillconfEntry, nvL2tpconfRetrans=nvL2tpconfRetrans, nvApacsconfTimerA=nvApacsconfTimerA, nvFrstatRxcurfps=nvFrstatRxcurfps, nvItipstatEntry=nvItipstatEntry, nvApclstatFilter=nvApclstatFilter, nvWriteRoot=nvWriteRoot, nvCrouteStatus=nvCrouteStatus, nvPricstatCallingno=nvPricstatCallingno, nvR2cstat=nvR2cstat, nvTnstatIndex=nvTnstatIndex, nvNetconNumRec=nvNetconNumRec, nvDlstatSstate=nvDlstatSstate, nvLinkstatAbtfrxs=nvLinkstatAbtfrxs, nvFrmrstatNumFailures=nvFrmrstatNumFailures, nvPriconfDchrst=nvPriconfDchrst, nvItimapEntry=nvItimapEntry, nvAcctstatCallid=nvAcctstatCallid, nvMpstatPart1RmtSeqS=nvMpstatPart1RmtSeqS, nvNetpvcmapMaxRec=nvNetpvcmapMaxRec, nvItiprofP14=nvItiprofP14, nvR2dspstatFlavor=nvR2dspstatFlavor, nvTcpcnstatState=nvTcpcnstatState, nvFrmrstatNumTxFrames=nvFrmrstatNumTxFrames, nvMpconfMaxRec=nvMpconfMaxRec, nvTncstatMaxRec=nvTncstatMaxRec, nvBillconfSet1nua2=nvBillconfSet1nua2, nvTcpcnstatDtreset=nvTcpcnstatDtreset, nvIticlassDefpsze=nvIticlassDefpsze, nvBillstatTxseg=nvBillstatTxseg, nvBillstatTxpak=nvBillstatTxpak, nvApclstatPstndur=nvApclstatPstndur, nvPristatCallaceps=nvPristatCallaceps, nvMpstatPart1IpAddress=nvMpstatPart1IpAddress, nvX25confDirection=nvX25confDirection, nvPosstatCommfail=nvPosstatCommfail, nvRadcstatNAcctLost=nvRadcstatNAcctLost, nvAbillstatRxbytes=nvAbillstatRxbytes, nvTslotstatCurrxfrm=nvTslotstatCurrxfrm, nvDuiconfRetryinc=nvDuiconfRetryinc, nvIpconfMaxRec=nvIpconfMaxRec, nvUgstatBwused=nvUgstatBwused, nvApclstatWanport=nvApclstatWanport, nvPriconfNfasdch=nvPriconfNfasdch, nvBillconfSet5nua2=nvBillconfSet5nua2, nvFtpstatClientaddr=nvFtpstatClientaddr, nvPosstatNotpdurt=nvPosstatNotpdurt, nvDuistatState=nvDuistatState, nvR2sysparMinbnmlen=nvR2sysparMinbnmlen, nvPosisoField25=nvPosisoField25, nvNodeconfNumRec=nvNodeconfNumRec, nvApacsstatLoscarsu=nvApacsstatLoscarsu, nvTslotstatEntry=nvTslotstatEntry, nvFrvcconfEnable=nvFrvcconfEnable, nvItimapIndex=nvItimapIndex, nvApacsstatNidle=nvApacsstatNidle, nvApfclstatSpeed=nvApfclstatSpeed, nvDlspcstatNumRec=nvDlspcstatNumRec, nvPppstatMaxRec=nvPppstatMaxRec, nvItipstatRevf=nvItipstatRevf, nvTnconfDefmaxbspace=nvTnconfDefmaxbspace, nvFtpstatCurrkbysds=nvFtpstatCurrkbysds, nvApacsstatIndex=nvApacsstatIndex, nvR2confDliname=nvR2confDliname, nvL2tptstatEntry=nvL2tptstatEntry, nvItiprofP8=nvItiprofP8, nvBillstatClosed=nvBillstatClosed, nvTcpstatRexmttimeos=nvTcpstatRexmttimeos, nvCrfstatCallngnum=nvCrfstatCallngnum, nvPriconfEntry=nvPriconfEntry, nvDspmallocTable=nvDspmallocTable, nvDuistatNinvmsgs=nvDuistatNinvmsgs, nvIticonfEntry=nvIticonfEntry, nvFrvcstatInputrate=nvFrvcstatInputrate, nvFrvcstatTxframes=nvFrvcstatTxframes, nvDlstatRnrrxs=nvDlstatRnrrxs, nvIticlassOchrg=nvIticlassOchrg, nvRbprofIbsigtype=nvRbprofIbsigtype, nvIticstatTrmdsccip=nvIticstatTrmdsccip, nevadaElx=nevadaElx, nvRadconfNumRec=nvRadconfNumRec, nvCDLILineimp=nvCDLILineimp, nvDuistatNretries=nvDuistatNretries, nvIticlassEntry=nvIticlassEntry, nvPosisoField35=nvPosisoField35, nvFrstatMrxcurfps=nvFrstatMrxcurfps, nvXbillstatDate=nvXbillstatDate, NvVisaType=NvVisaType, nvPosniimapDest=nvPosniimapDest, nvPppstatBundleId=nvPppstatBundleId, nvX25callRxwsze=nvX25callRxwsze, nvApclstatAblock=nvApclstatAblock, nvTncconf=nvTncconf, nvFtpconfReqaddr=nvFtpconfReqaddr, nvNodestatCurclk=nvNodestatCurclk, nvIpwanmapEntry=nvIpwanmapEntry, nvIticstatLoscarcip=nvIticstatLoscarcip, nvMpstatPart2InBfrags=nvMpstatPart2InBfrags, nvTcpstatRcvtotals=nvTcpstatRcvtotals, nvTcprstatEntry=nvTcprstatEntry, nvRbprofProfname=nvRbprofProfname, nvAnuaconf=nvAnuaconf, nvStringIndex=nvStringIndex, nvPosvisaName=nvPosvisaName, nvXbillstat15to20=nvXbillstat15to20, nvTncmapMaxRec=nvTncmapMaxRec, nevadaTraps=nevadaTraps, nvBillconfSet3nua3=nvBillconfSet3nua3, nvIticstatNumIncom=nvIticstatNumIncom, nvElxstatUnKnwnPrs=nvElxstatUnKnwnPrs, nvPosniimapStatus=nvPosniimapStatus, nvPosstatNmsbaddst=nvPosstatNmsbaddst, nvXbillstatGrtr20=nvXbillstatGrtr20, nvModemstatState=nvModemstatState, nvPricustatTable=nvPricustatTable, nvX25call=nvX25call, nvSDLIRxfrmslp=nvSDLIRxfrmslp, nvElxstatInErrors=nvElxstatInErrors, nvR2profMfbusy=nvR2profMfbusy, nvFriconfIndex=nvFriconfIndex, nvIticlassSecurity=nvIticlassSecurity, nvItiprofNumRec=nvItiprofNumRec, nvX25callNrxrnrs=nvX25callNrxrnrs, nvRadconfAcct1=nvRadconfAcct1, nvTcpstatRcvwinprobes=nvTcpstatRcvwinprobes, nvXnuasetEntry=nvXnuasetEntry, nvIticstatTcalls=nvIticstatTcalls, nvAcctstat64krxchars=nvAcctstat64krxchars, nvXbillstatRxcallc=nvXbillstatRxcallc, nvCrcstatCalledsub=nvCrcstatCalledsub, nvDialstatLastDiag=nvDialstatLastDiag, nvApacsconfEntry=nvApacsconfEntry, nvPosisoEntry=nvPosisoEntry, nvItiustatUsername=nvItiustatUsername, nvDialstatMaxcall=nvDialstatMaxcall, nvNodestatCurtime=nvNodestatCurtime, nvApfclstatEntry=nvApfclstatEntry, nvPosisoField39=nvPosisoField39, nvIpwanmapMaxRec=nvIpwanmapMaxRec, nvItiprof=nvItiprof, nvRadconfAuth2=nvRadconfAuth2, nvItiprofName=nvItiprofName, nvModemprofNumRec=nvModemprofNumRec, nvIticstatTrmdscsu=nvIticstatTrmdscsu, nvDlstatRejtxs=nvDlstatRejtxs, nevadaIp=nevadaIp, nvApmdmstatRxpkt=nvApmdmstatRxpkt, nvSlotstatCardid=nvSlotstatCardid, nvIticlassXoffin=nvIticlassXoffin, nvIticstat=nvIticstat, nvXbillstatDatarate=nvXbillstatDatarate, tmxNevada=tmxNevada, nvSDLIPortIndex=nvSDLIPortIndex, nvDialmapTable=nvDialmapTable, nvPosprofSkip=nvPosprofSkip, nvSnmpmgr=nvSnmpmgr, nvPosprofPortname=nvPosprofPortname, nvIticlassX28type=nvIticlassX28type, nvSlotstatCardType=nvSlotstatCardType, nvRbdspstatEntry=nvRbdspstatEntry, nvTrapPppLcpUp=nvTrapPppLcpUp, nvR2profMfmode=nvR2profMfmode, nvFristatCurseq=nvFristatCurseq, nvX25callNetname=nvX25callNetname, nvUgstat=nvUgstat, nvRadustatState=nvRadustatState, nvRadcstatNAcct=nvRadcstatNAcct, nvSDSPEvent4=nvSDSPEvent4, nvX25callNtxres=nvX25callNtxres, nvNodestatChgreqid=nvNodestatChgreqid, nvFtpstatTotalfirvs=nvFtpstatTotalfirvs, nvLinkstatIftxs=nvLinkstatIftxs, nvCDLISignaling=nvCDLISignaling, nvTcprstatTable=nvTcprstatTable, nvNsockconfMaxRec=nvNsockconfMaxRec, nvR2profSeizalmsk=nvR2profSeizalmsk, nvAbillstatNua=nvAbillstatNua, nvItiuserNumRec=nvItiuserNumRec, nvIticlassNumRec=nvIticlassNumRec, nvPosnmsmapEntry=nvPosnmsmapEntry, nvItiportTimer2=nvItiportTimer2, nvRadconfN1=nvRadconfN1, nvDlconfMaxRec=nvDlconfMaxRec, nvItiprofP16=nvItiprofP16, nvSDSPEvent10=nvSDSPEvent10, nvAcctstatComponent=nvAcctstatComponent, nvItiprofP18=nvItiprofP18, nvTcpstatRcvdupbytes=nvTcpstatRcvdupbytes, nvTnclassEntry=nvTnclassEntry, nvDialstatNsucceed=nvDialstatNsucceed, nvApacsstatUnxhstclr=nvApacsstatUnxhstclr, nvApclstatEntry=nvApclstatEntry, nvPosisoField59=nvPosisoField59, nvFrvcstatTxcongstatus=nvFrvcstatTxcongstatus, nvTnclassNumRec=nvTnclassNumRec, nvPristatNtxsetup=nvPristatNtxsetup, nvAnuaconfRetries=nvAnuaconfRetries, nvSDSPEntry=nvSDSPEntry, nvApacsstatNxidle=nvApacsstatNxidle, nvAbillstatEntry=nvAbillstatEntry, nvAcctoperComponent=nvAcctoperComponent, nvApacsstatN28800bd=nvApacsstatN28800bd, nvRadustatNumRec=nvRadustatNumRec, nvPosisoField21=nvPosisoField21, nvXnuasetStatus=nvXnuasetStatus, nvItipstatCugtype=nvItipstatCugtype, nvDlspcstatTable=nvDlspcstatTable, nvIprouteMask=nvIprouteMask)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvItimapNumRec=nvItimapNumRec, nvItipstatSrcadr=nvItipstatSrcadr, nvPristatNrxsetup=nvPristatNrxsetup, nvPosisoField22=nvPosisoField22, nvX25callChanstate=nvX25callChanstate, nvXnuasetIndex=nvXnuasetIndex, nvItiportIndex=nvItiportIndex, nvIpcpconfTest=nvIpcpconfTest, nvTnstat=nvTnstat, nvSlotstatName=nvSlotstatName, nvTslotstatTotrxfrm=nvTslotstatTotrxfrm, nvTncstatEntry=nvTncstatEntry, nvIpstatIndex=nvIpstatIndex, nevadaModels=nevadaModels, nvX25confNetvrsion=nvX25confNetvrsion, nvL2tpsstatState=nvL2tpsstatState, nvXbillstatNuaset=nvXbillstatNuaset, nvStringTable=nvStringTable, nvItipstatDstadr=nvItipstatDstadr, nvL2tpconf=nvL2tpconf, nvR2profClearack=nvR2profClearack, nvUgstatBwrejs=nvUgstatBwrejs, nvNsockconfDefport=nvNsockconfDefport, nvItiportIticlass=nvItiportIticlass, nvSDSPEvent8=nvSDSPEvent8, nvIcmpstatOutErrs=nvIcmpstatOutErrs, nvFriconfnP1=nvFriconfnP1, nvDialstatIndex=nvDialstatIndex, nvX25callNrxres=nvX25callNrxres, nvRbprofMaxRec=nvRbprofMaxRec, nvItimap=nvItimap, nvStartScript=nvStartScript, nvIptrunkStatus=nvIptrunkStatus, nvPosprofTranslate=nvPosprofTranslate, nvPridstatPriname=nvPridstatPriname, nvItipstatNcrxresets=nvItipstatNcrxresets, nvTrapconfMaxRec=nvTrapconfMaxRec, nvDlstatRxdds=nvDlstatRxdds, nvIpcpconfEntry=nvIpcpconfEntry, nvXbillstatTable=nvXbillstatTable, nvMpconfTable=nvMpconfTable, nvTncstatCalladdr=nvTncstatCalladdr, nvApacsconfTimerC=nvApacsconfTimerC, nvL2tptstatNumRec=nvL2tptstatNumRec, nvPosisoField53=nvPosisoField53, nvItipstatNtxpaks=nvItipstatNtxpaks, nvItipstatAcct=nvItipstatAcct, nvNodestatFreecpu=nvNodestatFreecpu, nvApfilterAblock=nvApfilterAblock, nvBillstatTable=nvBillstatTable, nvFrstat=nvFrstat, nvPriconfNumRec=nvPriconfNumRec, nvTncstatCalldata=nvTncstatCalldata, nvTrapconfEntry=nvTrapconfEntry, nvFristat=nvFristat, nvDlstatAlarms=nvDlstatAlarms, nvR2confMaxRec=nvR2confMaxRec, nvTrapDSPMFailedModemThresh3=nvTrapDSPMFailedModemThresh3, nvL2tptstatIndex=nvL2tptstatIndex, nvIcmpstatMaxRec=nvIcmpstatMaxRec, nvItiustatIndex=nvItiustatIndex, nvCrcstatEntry=nvCrcstatEntry, nvR2profIdlealmsk=nvR2profIdlealmsk, nvPriconfModemcap=nvPriconfModemcap, nvIticstatNnccs=nvIticstatNnccs, nvIticlassTermtype=nvIticlassTermtype, nvDrstatMaxused=nvDrstatMaxused, nvTncstatDnsidx=nvTncstatDnsidx, nvIticlassProfile=nvIticlassProfile, nvTcpprofProfname=nvTcpprofProfname, nvRbpstatTsstat=nvRbpstatTsstat, nvIticlassBreaksgnl=nvIticlassBreaksgnl, nvPosstatQueued=nvPosstatQueued, nvR2cstatEntry=nvR2cstatEntry, nvIpwanmapWsize=nvIpwanmapWsize, nvTrapDbCrcError=nvTrapDbCrcError, nvIticstatNncr=nvIticstatNncr, nvTcpcnstat=nvTcpcnstat, nvNetmapTable=nvNetmapTable, nvPosvisa=nvPosvisa, nvDportstatResetdate=nvDportstatResetdate, nvNodeconfClksrc2=nvNodeconfClksrc2, nvTnconfNumRec=nvTnconfNumRec, nvPosisoField2=nvPosisoField2, nvTncconfNumSess=nvTncconfNumSess, nvUgconfMaxbw=nvUgconfMaxbw, nvSFRMRDtreset=nvSFRMRDtreset, nvNmsuserIndex=nvNmsuserIndex, nvIcmpstatOutAdMs=nvIcmpstatOutAdMs, nvNetconCallingad=nvNetconCallingad, nvRbpstatNumRec=nvRbpstatNumRec, nvUgstatDtreset=nvUgstatDtreset, nvItimapUserdata=nvItimapUserdata, nvX25callRxpsze=nvX25callRxpsze, nvIcmpstatInTmStRps=nvIcmpstatInTmStRps, nvNodeconfExstat=nvNodeconfExstat, nvX25confApp=nvX25confApp, nvDlspcconfHelpphone=nvDlspcconfHelpphone, nvFrvcstatFri=nvFrvcstatFri, nvItiprofP15=nvItiprofP15, nvIpcpconfProfile=nvIpcpconfProfile, nvIptrunkEntry=nvIptrunkEntry, nvFtpstatConnects=nvFtpstatConnects, nvBillconfSet10nua3=nvBillconfSet10nua3, nvMpstatPart2OutMfrags=nvMpstatPart2OutMfrags, nvItiportRsrcpool=nvItiportRsrcpool, nvDialmapAddprefix=nvDialmapAddprefix, nvPosprofResptim=nvPosprofResptim, nvIpwanmapIndex=nvIpwanmapIndex, nvTnmapEntry=nvTnmapEntry, nvTslotstatMaxRec=nvTslotstatMaxRec, nvIcmpstatDtreset=nvIcmpstatDtreset, nvItipstatMaxRec=nvItipstatMaxRec, nvBillconfEnable=nvBillconfEnable, nvL2tpsstatTable=nvL2tpsstatTable, nvL2tpconfStatus=nvL2tpconfStatus, nvCDSPNumload=nvCDSPNumload, nvR2dspstatNumobchn=nvR2dspstatNumobchn, nvAbillstatP1call=nvAbillstatP1call, nvAcctoperSegsize=nvAcctoperSegsize, nvTcpstatRcvpartdupbytes=nvTcpstatRcvpartdupbytes, nvLinkconfTable=nvLinkconfTable, nvElxstatNumRec=nvElxstatNumRec, nvX25confTx2=nvX25confTx2, nvTslotconfReserve1=nvTslotconfReserve1, nvReboot=nvReboot, nvPricustatThresh2=nvPricustatThresh2, nvTcpcnstatEntry=nvTcpcnstatEntry, nvWriteConfig=nvWriteConfig, nvL2tpsstatLclCallID=nvL2tpsstatLclCallID, nvApacsstatInvadrblk=nvApacsstatInvadrblk, nvBillconf1Table=nvBillconf1Table, nvX25nuimapMaxRec=nvX25nuimapMaxRec, nvRbconfDliname=nvRbconfDliname, nvIticlassMaskstrng=nvIticlassMaskstrng, nvIticstatNcurIncom=nvIticstatNcurIncom, nvNetpvcNumRec=nvNetpvcNumRec, nvIpstatInDlvrs=nvIpstatInDlvrs, nvModemprof=nvModemprof, nvApacsstatX25clrcip=nvApacsstatX25clrcip, nvFtpconf=nvFtpconf, nvCDLIDataInver=nvCDLIDataInver, nvRbsysparMinbnmlen=nvRbsysparMinbnmlen, nvCrfstat=nvCrfstat, nvIticlassIncbar=nvIticlassIncbar, nvDlstatNumRec=nvDlstatNumRec, nvPristatMaxoutgo=nvPristatMaxoutgo, nvNsockmapMaxsessn=nvNsockmapMaxsessn, nvRbdspstatNumRec=nvRbdspstatNumRec, nvL2tpstatNumRec=nvL2tpstatNumRec, nvIproute=nvIproute, nvPppstatComprot=nvPppstatComprot, nvModemprofIndex=nvModemprofIndex, nvLinkstatApp=nvLinkstatApp, nvR2sysparMaxRec=nvR2sysparMaxRec, nvCrfstatCallngsub=nvCrfstatCallngsub, nvTcpstatKeepdrops=nvTcpstatKeepdrops, nvTncconfAyt=nvTncconfAyt, nvL2tpstatSessUnav=nvL2tpstatSessUnav, nvTnconfEntry=nvTnconfEntry, nvX25statNtxclrs=nvX25statNtxclrs, nvTncstatSessnum=nvTncstatSessnum, nvRadustatIndex=nvRadustatIndex, nvItiprofP35=nvItiprofP35, nvTcpprofTable=nvTcpprofTable, nvL2tpconfNumRec=nvL2tpconfNumRec, nvXbillconfBilltime=nvXbillconfBilltime, nvPosvisaMaxRec=nvPosvisaMaxRec, nvSymuser=nvSymuser, nvBillconfSet5=nvBillconfSet5, nvSDSPEvent5=nvSDSPEvent5, nvDialstatNattempt=nvDialstatNattempt, nvDlspcstatIndex=nvDlspcstatIndex, nvPosvisaField12=nvPosvisaField12, nvItipstatNrxresets=nvItipstatNrxresets, nevadaSync=nevadaSync, nvR2dspstatStat=nvR2dspstatStat, nvNetconIndex=nvNetconIndex, nvBillconfSet6nua3=nvBillconfSet6nua3, nvItipstatNrcode=nvItipstatNrcode, nvIticlassPvcid=nvIticlassPvcid, nvPristatNrxsetupa=nvPristatNrxsetupa, nvPosvisaStatus=nvPosvisaStatus, nvTcpstatConnattempts=nvTcpstatConnattempts, nvL2tpsstatDtreset=nvL2tpsstatDtreset, nvApacsconfStatus=nvApacsconfStatus, nvPristatMaxincom=nvPristatMaxincom, nvNmsuserNmsid=nvNmsuserNmsid, nvIpconf=nvIpconf, nvLinkstatFrmrrxs=nvLinkstatFrmrrxs, nvApfclstatNua=nvApfclstatNua, nvNetrouteTable=nvNetrouteTable, nvPosisoField16=nvPosisoField16, nvSnmpmgrTable=nvSnmpmgrTable, nvBillconfSet4nua2=nvBillconfSet4nua2, nvDrstatTable=nvDrstatTable, nvTncstatNumRec=nvTncstatNumRec, nvNetconDstcompid=nvNetconDstcompid, nvFristatDtreset=nvFristatDtreset, nvPosstatNousdest=nvPosstatNousdest, nvApmdmstatFlsess=nvApmdmstatFlsess, nvFrvcconfBc=nvFrvcconfBc, nvItiportName=nvItiportName, nvSnmpconfIndex=nvSnmpconfIndex, nvTcpstatTimeoutdrops=nvTcpstatTimeoutdrops, nvIticonfBroadcast=nvIticonfBroadcast, nvPosniimap=nvPosniimap, nvItiportTimer1=nvItiportTimer1, nvSlotstatStatus=nvSlotstatStatus, nvFrvcconfFri=nvFrvcconfFri, nvItiprofP2=nvItiprofP2, nvBillstatHostclr=nvBillstatHostclr, nvPosconfEntry=nvPosconfEntry, nvNmsuserCalladdr=nvNmsuserCalladdr, nvPosisoField32=nvPosisoField32, nvAbillstatB5call=nvAbillstatB5call, nvR2profClbkalmsk=nvR2profClbkalmsk, nvPosisoField10=nvPosisoField10, nvPosprofTable=nvPosprofTable, nvModemconfTable=nvModemconfTable, nvSFRMRRate=nvSFRMRRate, nvTnclassAobreak=nvTnclassAobreak, nvFriconfMode=nvFriconfMode, nvAbillstatP7time=nvAbillstatP7time, nvCFRMREIAtype=nvCFRMREIAtype, nvFriconfNumRec=nvFriconfNumRec, nvCrouteRcscp2=nvCrouteRcscp2, nvIprtstatDest=nvIprtstatDest, nvRadustatUserId=nvRadustatUserId, nvApmdmstatB4calls=nvApmdmstatB4calls, nevadaSystem=nevadaSystem, nvTrapRateDecreasedBelowL2=nvTrapRateDecreasedBelowL2, nvDlstatLfrmr=nvDlstatLfrmr, nvNmsuserWsiz=nvNmsuserWsiz, nevadaPpp=nevadaPpp, nvCrouteVol1prot=nvCrouteVol1prot, nvMpstatPart1UserName=nvMpstatPart1UserName, nvElxstatOutDiscrds=nvElxstatOutDiscrds, nvIprouteNexthop=nvIprouteNexthop, nvPristatNrxconn=nvPristatNrxconn, nvRbconfRtmethod=nvRbconfRtmethod, nvAcctstatTxchars=nvAcctstatTxchars, nvNsockmapTable=nvNsockmapTable, nvApacsstat=nvApacsstat, nvApfilterTermid=nvApfilterTermid, nvStringMaxRec=nvStringMaxRec, nvX25callExpack=nvX25callExpack, nvL2tpstatDtreset=nvL2tpstatDtreset, nvTcpstatSndbytes=nvTcpstatSndbytes, nvFrmrstatSlotIndex=nvFrmrstatSlotIndex, nvMpstatPart2InRsmErr=nvMpstatPart2InRsmErr, nvRoutemapNumRec=nvRoutemapNumRec, nvTslotstatRemipaddr=nvTslotstatRemipaddr, nvX25confDefwsze=nvX25confDefwsze)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvPridstatEventno=nvPridstatEventno, nvBillconfSegsize=nvBillconfSegsize, nvTnstatClientAddr=nvTnstatClientAddr, nvX25statUp=nvX25statUp, nvPricstat=nvPricstat, nvIticstatN14400bd=nvIticstatN14400bd, nvItipstatRpoa=nvItipstatRpoa, nvItiprofP1=nvItiprofP1, nvFtpconfTable=nvFtpconfTable, nvCrcstat=nvCrcstat, nvPppstatInDiscard=nvPppstatInDiscard, nvR2pstatTotocalatt=nvR2pstatTotocalatt, nvIticonf=nvIticonf, nvRadcstatIndex=nvRadcstatIndex, nvRbprofDisconlen=nvRbprofDisconlen, nvItiustatEntry=nvItiustatEntry, nvX25confAckthresh=nvX25confAckthresh, nvTcprstatService=nvTcprstatService, nvBillconfSet8nua3=nvBillconfSet8nua3, nvPosisoField28=nvPosisoField28, nvItiprofP24=nvItiprofP24, nvR2profStatus=nvR2profStatus, nvRbcstatDirection=nvRbcstatDirection, nvBillconfSet12=nvBillconfSet12, nvX25callNr=nvX25callNr, nvElxconfEnable=nvElxconfEnable, nvApclstatMerchid=nvApclstatMerchid, nvUgstatUnavrejs=nvUgstatUnavrejs, nvIprtstatTable=nvIprtstatTable, nvApacsstatNonuaentr=nvApacsstatNonuaentr, nvX25confAutostart=nvX25confAutostart, nvRbprofTable=nvRbprofTable, nvLinkconfIndex=nvLinkconfIndex, nvTnnlconfTable=nvTnnlconfTable, nvX25confIndex=nvX25confIndex, nvR2pstatToticalatt=nvR2pstatToticalatt, nvPristatDtreset=nvPristatDtreset, nvRoutemapEntry=nvRoutemapEntry, nvCrfstatAddr=nvCrfstatAddr, nvTslotstatCurdrprx=nvTslotstatCurdrprx, nvTslotconfEnable=nvTslotconfEnable, nvDialmapIndex=nvDialmapIndex, nvTcpstatRttupdateds=nvTcpstatRttupdateds, nvTslotstatTcpcn=nvTslotstatTcpcn, nvRbsysparIndex=nvRbsysparIndex, nvIticmdMaxRec=nvIticmdMaxRec, nvItiprofP17=nvItiprofP17, nvElxstatOutErrors=nvElxstatOutErrors, nvNodestatTxcurpps=nvNodestatTxcurpps, nvDlspcstatMaxRec=nvDlspcstatMaxRec, nvDuistatNaccepts=nvDuistatNaccepts, nvIticlassAcctsigl=nvIticlassAcctsigl, nvTnconfMaxRec=nvTnconfMaxRec, nvTrapS0=nvTrapS0, nvMpstatPart2InEfrags=nvMpstatPart2InEfrags, nvApacsstatRxnaks=nvApacsstatRxnaks, nvIticlassIchrg=nvIticlassIchrg, nvIpwanmapFrpvc=nvIpwanmapFrpvc, nvIpcpconfDnsadd2=nvIpcpconfDnsadd2, nvModemstatMaxRec=nvModemstatMaxRec, nvUgconfIndex=nvUgconfIndex, nvCrouteNumRec=nvCrouteNumRec, nvIticstatN1200bd=nvIticstatN1200bd, nvX25confFstacc=nvX25confFstacc, nvTrapPppMpLinkAdded=nvTrapPppMpLinkAdded, nvL2tptstatMaxRec=nvL2tptstatMaxRec, nvNodestatCurmincpu=nvNodestatCurmincpu, nvCrcstatDirection=nvCrcstatDirection, nvPosvisaField6=nvPosvisaField6, nvTrapN1=nvTrapN1, nvBillconfSet11=nvBillconfSet11, nvApfclstatX25clr=nvApfclstatX25clr, nvCrfstatNumRec=nvCrfstatNumRec, nvSlotstatCpu=nvSlotstatCpu, nvModemconfEnable=nvModemconfEnable, nvPosprofMaxRec=nvPosprofMaxRec, nvItiuserClrestrct=nvItiuserClrestrct, nvX25statDiag=nvX25statDiag, nvTcpstatRcvduppacks=nvTcpstatRcvduppacks, nvL2tpsstatDataRecv=nvL2tpsstatDataRecv, nvDlspcconfNumRec=nvDlspcconfNumRec, nvR2confIndex=nvR2confIndex, nvMpstatPart1Table=nvMpstatPart1Table, nvR2sysparMaxperdsp=nvR2sysparMaxperdsp, nvNodestatTxavgpps=nvNodestatTxavgpps, nvItiprofP21=nvItiprofP21, nvFriconfDlci=nvFriconfDlci, nvTcpprofEntry=nvTcpprofEntry, nvX25nuimapStatus=nvX25nuimapStatus, nvRadconfAcct1port=nvRadconfAcct1port, nvUgconfPool=nvUgconfPool, nvItiprofP29=nvItiprofP29, nvAcctoperEntry=nvAcctoperEntry, nvDialstatNumRec=nvDialstatNumRec, nvTcprstatDtreset=nvTcprstatDtreset, nvFtpconfPassword=nvFtpconfPassword, nvDialstatMaxRec=nvDialstatMaxRec, nvItiuserUserclass=nvItiuserUserclass, nvRaduserIndex=nvRaduserIndex, nvAbillstatPtxbytes=nvAbillstatPtxbytes, nvBillstat=nvBillstat, nvAbillstatP6time=nvAbillstatP6time, nvXnuasetNua3=nvXnuasetNua3, nvMpconfComprot2=nvMpconfComprot2, nvXbillstatClosed=nvXbillstatClosed, nvTnclassClassname=nvTnclassClassname, nvTrapLinkReady=nvTrapLinkReady, nvSDLISdlinm=nvSDLISdlinm, nvPosconfNumRec=nvPosconfNumRec, nvApacsstatN300bd=nvApacsstatN300bd, nvR2sysparIndex=nvR2sysparIndex, nvDuistatNrejects=nvDuistatNrejects, nvIprouteNumRec=nvIprouteNumRec, nvFrvcconfMaxRec=nvFrvcconfMaxRec, nvL2tpstatCtrlOofW=nvL2tpstatCtrlOofW, nvNsockmapNbusport=nvNsockmapNbusport, nvApacsstatDleeotsnt=nvApacsstatDleeotsnt, nvIcmpstatOutMsgs=nvIcmpstatOutMsgs, nvPristatCallinrels=nvPristatCallinrels, nvMpstatPart1Link4=nvMpstatPart1Link4, nvRadustatFrmIpMask=nvRadustatFrmIpMask, nvSlotstatEntry=nvSlotstatEntry, nvPosprofNumRec=nvPosprofNumRec, nvR2dspstatMaxRec=nvR2dspstatMaxRec, nvCDLIEnable=nvCDLIEnable, nvIticstatClassname=nvIticstatClassname, nvCrcstatL1prot=nvCrcstatL1prot, nvRoutemapAddrstr=nvRoutemapAddrstr, nvLinkstatRrtxs=nvLinkstatRrtxs, nvAcctoperIndex=nvAcctoperIndex, nvL2tpstatTnlUnav=nvL2tpstatTnlUnav, nvCrfstatRcsc2=nvCrfstatRcsc2, nvX25callNtxsegs=nvX25callNtxsegs, nvMpstatPart1Ipcp=nvMpstatPart1Ipcp, nvR2profProfname=nvR2profProfname, nvRbcstat=nvRbcstat, nvModemprofDc=nvModemprofDc, nvUgconfEntry=nvUgconfEntry, nvPosvisaField3=nvPosvisaField3, nvR2confNumRec=nvR2confNumRec, nvIcmpstatEntry=nvIcmpstatEntry, nvFrstatMrxavgfps=nvFrstatMrxavgfps, nvTrapconf=nvTrapconf, nvIticstatN2400bd=nvIticstatN2400bd, nvRadcstatNSilent=nvRadcstatNSilent, nvDlspcconfAbortmsg=nvDlspcconfAbortmsg, nvMpstatPart1NumRec=nvMpstatPart1NumRec, nvIprtstatMaxRec=nvIprtstatMaxRec, nvApacsconfSitename=nvApacsconfSitename, nvApmdmstatSpeed=nvApmdmstatSpeed, nvApfilterEntry=nvApfilterEntry, nvPricuconfTable=nvPricuconfTable, nvTslotconfStatus=nvTslotconfStatus, nvRbsysparMaxperdsp=nvRbsysparMaxperdsp, nvPosprofRetrytim=nvPosprofRetrytim, nvIticstatCurcalls=nvIticstatCurcalls, nvMpconfComptype=nvMpconfComptype, nvApfilterStatus=nvApfilterStatus, nvX25statNrxcallcs=nvX25statNrxcallcs, nvSnmpconfEntry=nvSnmpconfEntry, nvPosvisaField8=nvPosvisaField8, nvBillconfSet1=nvBillconfSet1, nvItiuserMaxRec=nvItiuserMaxRec, nvTrapDatabaseUpSecondary=nvTrapDatabaseUpSecondary, nvAbillstatP4call=nvAbillstatP4call, nvItipstatNumRec=nvItipstatNumRec, nvTnmapMaxRec=nvTnmapMaxRec, nvR2pstatTsbadcnt=nvR2pstatTsbadcnt, nvNodeconfClksrc1=nvNodeconfClksrc1, nvRoutemapNetaddr=nvRoutemapNetaddr, nvNetmapStatus=nvNetmapStatus, nvItipstatOrg=nvItipstatOrg, nvTnmapNumRec=nvTnmapNumRec, nvNodeconfRate4=nvNodeconfRate4, nvCrcstatReserve1=nvCrcstatReserve1, nvX25nuimapEntry=nvX25nuimapEntry, nvMpstatPart1LocDisc=nvMpstatPart1LocDisc, nvAbillstatB7call=nvAbillstatB7call, nvNetpvcEntry=nvNetpvcEntry, nvPosisoField37=nvPosisoField37, nvDate=nvDate, nvTslotstatDtreset=nvTslotstatDtreset, nvIcmpstatIndex=nvIcmpstatIndex, nvTslotstatTable=nvTslotstatTable, nvRbprofNumRec=nvRbprofNumRec, nvAcctstat64krxpaks=nvAcctstat64krxpaks, nvTnstatLastCmd=nvTnstatLastCmd, nvModemprofName=nvModemprofName, nvPosconfEnable=nvPosconfEnable, nvTnstatTable=nvTnstatTable, nvMpstatPart1Link14=nvMpstatPart1Link14, nvApacsstatDleeotrcv=nvApacsstatDleeotrcv, nvRbconfTable=nvRbconfTable, nvX25statLinkup=nvX25statLinkup, nvX25statNtxints=nvX25statNtxints, nvRadconfStatus=nvRadconfStatus, nvIticstatNumcalls=nvIticstatNumcalls, nvTnconfDefminbspace=nvTnconfDefminbspace, nvR2dspstatNumibchn=nvR2dspstatNumibchn, nvL2tptstatRecvCtrl=nvL2tptstatRecvCtrl, nvNodeconfMaxRec=nvNodeconfMaxRec, nvCrfstatCroute=nvCrfstatCroute, nvItiportMinbspace=nvItiportMinbspace, nvX25confDiagsupr=nvX25confDiagsupr, nvRadcstatNAuth1Acc=nvRadcstatNAuth1Acc, nevadaR2=nevadaR2, nvRbprofLcfo=nvRbprofLcfo, nvModemstatRxparity=nvModemstatRxparity, nvPosprofUserdata=nvPosprofUserdata, nvBillconf2Entry=nvBillconf2Entry, nvFrstatRxavgfps=nvFrstatRxavgfps, nvCrouteType=nvCrouteType, nvCDSPName=nvCDSPName, nvXbillstatTxseg=nvXbillstatTxseg, nvPosstatMaxRec=nvPosstatMaxRec, nvApacsconfNumRec=nvApacsconfNumRec, nvTnstatOptions=nvTnstatOptions, nvIticlassDroptimer=nvIticlassDroptimer, nvX25callNtxints=nvX25callNtxints, nvIprtstatNextHop=nvIprtstatNextHop, nvIticlassX29mskstr=nvIticlassX29mskstr, nvPosstatEftrsps=nvPosstatEftrsps, nvApfilterTable=nvApfilterTable, nvApddmstatNumRec=nvApddmstatNumRec, nvApacsstatMaxRec=nvApacsstatMaxRec, nvSDSPEvent1=nvSDSPEvent1, nvApacsconf=nvApacsconf, nvPosstatIndex=nvPosstatIndex, nvTncconfStatus=nvTncconfStatus, nvItipstatNtconn=nvItipstatNtconn, nvLinkstatRnrrxs=nvLinkstatRnrrxs, nvX25statNtxcalls=nvX25statNtxcalls, nvItiustatMaxRec=nvItiustatMaxRec, nvDialmapNumdelete=nvDialmapNumdelete, nvNetmapNetaddr=nvNetmapNetaddr, nvPppstatInEchRp=nvPppstatInEchRp, nvBillconfSet8nua1=nvBillconfSet8nua1, nvTncconfQuit=nvTncconfQuit, nvTslotconfMaxrxbuf=nvTslotconfMaxrxbuf, nvSnmpconfstatus=nvSnmpconfstatus, nvFristatNumRec=nvFristatNumRec, nvIpcpconfDnsadd1=nvIpcpconfDnsadd1, nvLinkstatLreset=nvLinkstatLreset, nvIcmpstatOutEchs=nvIcmpstatOutEchs, nvR2pstatDliname=nvR2pstatDliname, nvTncstatPortnum=nvTncstatPortnum, nvAcctoperNumRec=nvAcctoperNumRec, nvTnnlconfStatus=nvTnnlconfStatus, nvLcpconfRestartim=nvLcpconfRestartim, nvPosstatNumcalls=nvPosstatNumcalls, nvSFRMRFerrs=nvSFRMRFerrs, nvDialmapEntry=nvDialmapEntry, nvTslotconfPeertsid=nvTslotconfPeertsid, nvX25callNrxpaks=nvX25callNrxpaks)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvCrcstatCroute=nvCrcstatCroute, nvAcctstatNumRec=nvAcctstatNumRec, nvIticlassEscchar=nvIticlassEscchar, nvCrfstatL1mode=nvCrfstatL1mode, nvXbillstatMaxRec=nvXbillstatMaxRec, nvPristatDchanup=nvPristatDchanup, nvXbillstatIndex=nvXbillstatIndex, nvIptrunkIpaddr=nvIptrunkIpaddr, nvPosvisaField7=nvPosvisaField7, nvPosisoField63=nvPosisoField63, nvRrstatTable=nvRrstatTable, nvAcctstatTxpaks=nvAcctstatTxpaks, nvTcpcnstatRemport=nvTcpcnstatRemport, nvXnuasetNua1=nvXnuasetNua1, nvApacsstatRetrnnak=nvApacsstatRetrnnak, nvRbcstatTimeslot=nvRbcstatTimeslot, nvAnuaconfStrippar=nvAnuaconfStrippar, nvTrapRateIncreasedToL1=nvTrapRateIncreasedToL1, nvXbillstat=nvXbillstat, nvCrcstatMaxRec=nvCrcstatMaxRec, nvRrstatNumcalls=nvRrstatNumcalls, nvApmdmstatB7calls=nvApmdmstatB7calls, nvPppstatOutPkts=nvPppstatOutPkts, nvTcpstatRcvoobytes=nvTcpstatRcvoobytes, nvIcmpstatOutSrcQus=nvIcmpstatOutSrcQus, nvUgstatMaxRec=nvUgstatMaxRec, nvX25statNtxsegs=nvX25statNtxsegs, nvDlspcconf=nvDlspcconf, nvMpstatPart2InDiscrd=nvMpstatPart2InDiscrd, nvAbillstat=nvAbillstat, nvTrapFramerfailaction=nvTrapFramerfailaction, nevadaApacs=nevadaApacs, nvTnnlstatIndex=nvTnnlstatIndex, nvItipstat=nvItipstat, nvDrstatNumdev=nvDrstatNumdev, nvDuistatLink=nvDuistatLink, nvDuistatMaxRec=nvDuistatMaxRec, nvPristatNumRec=nvPristatNumRec, nvPosvisaIndex=nvPosvisaIndex, nvDuiconfCalling=nvDuiconfCalling, nvFtpconfStatus=nvFtpconfStatus, nvBillstatNodeid=nvBillstatNodeid, nvTncstatX29err=nvTncstatX29err, nvX25callNrxints=nvX25callNrxints, nvR2dspstatDevname=nvR2dspstatDevname, nvIpconfRoutprot=nvIpconfRoutprot, nvCDSPPortIndex=nvCDSPPortIndex, nvIpstatFragFails=nvIpstatFragFails, nvApmdmstatSuccess=nvApmdmstatSuccess, nvDialstatNbusy=nvDialstatNbusy, nvTcpstatSndpacks=nvTcpstatSndpacks, nvIticstatAvgtime=nvIticstatAvgtime, nvTrapElxUp=nvTrapElxUp, nvLinkstatMaxRec=nvLinkstatMaxRec, nvPricuconfIndex=nvPricuconfIndex, nvModemprofDspname=nvModemprofDspname, nvMpstatPart1Link9=nvMpstatPart1Link9, nvR2confTable=nvR2confTable, nvL2tpsstatRmtCallID=nvL2tpsstatRmtCallID, nvSlotstatHwRevision=nvSlotstatHwRevision, nvDlspcstatNports=nvDlspcstatNports, nvXbillstatHostclr=nvXbillstatHostclr, nvRbpstatToticalest=nvRbpstatToticalest, nvTrapPppIpcpOnLcpUp=nvTrapPppIpcpOnLcpUp, nvAbillstatP7call=nvAbillstatP7call, nvAnuaconfMaxpsze=nvAnuaconfMaxpsze, nvTnstatMode=nvTnstatMode, nvTcpcnstatTable=nvTcpcnstatTable, nvDspmallocIndex=nvDspmallocIndex, nvSFRMRRxoff=nvSFRMRRxoff, nvUgstatNumRec=nvUgstatNumRec, nvMpstatPart2OutDiscRq=nvMpstatPart2OutDiscRq, nvFtpstatCurrfisnds=nvFtpstatCurrfisnds, nvIticmdTable=nvIticmdTable, nvBillconfSet1nua1=nvBillconfSet1nua1, nvLinkstatTable=nvLinkstatTable, nvR2sysparGetcalling=nvR2sysparGetcalling, nvRbpstatTsbadcnt=nvRbpstatTsbadcnt, nvRbcstatTable=nvRbcstatTable, nvCDLICode=nvCDLICode, nvTcpstatSegstimeds=nvTcpstatSegstimeds, nvIcmpstatInTmSts=nvIcmpstatInTmSts, nvPricuconfInterval=nvPricuconfInterval, nvR2profClearback=nvR2profClearback, nvDuiconfTable=nvDuiconfTable, nvX25conf=nvX25conf, nvPosisoField27=nvPosisoField27, nvX25confMaxRec=nvX25confMaxRec, nvAcctstatInfofunc=nvAcctstatInfofunc, nvR2pstatTsstat=nvR2pstatTsstat, nvR2pstatFlavor=nvR2pstatFlavor, nvNodeconfRate3=nvNodeconfRate3, nvIticlassActonloss=nvIticlassActonloss, nvTrapRemovedCard=nvTrapRemovedCard, nvTnnlconfIndex=nvTnnlconfIndex, nvPppstatInCmPcnt=nvPppstatInCmPcnt, nevadaSnmp=nevadaSnmp, nvApacsstatCursimul=nvApacsstatCursimul, nvFrvcstatDrprxdes=nvFrvcstatDrprxdes, nvPosisoField56=nvPosisoField56, nvIticlassClaspaswd=nvIticlassClaspaswd, nvBillconfSet12nua2=nvBillconfSet12nua2, nvTrapPppLcpNetworkPhase=nvTrapPppLcpNetworkPhase, nvIprtstatProto=nvIprtstatProto, nvItiustatNumRec=nvItiustatNumRec, nvIcmpstatInEchs=nvIcmpstatInEchs, nvSDSPState=nvSDSPState, nvDportstatIntfstate=nvDportstatIntfstate, nvPosmsgmapEntry=nvPosmsgmapEntry, nvR2profTable=nvR2profTable, nvRbprofMfdelay=nvRbprofMfdelay, nvMpstatPart1Link15=nvMpstatPart1Link15, nevadaRadius=nevadaRadius, nvModemprofMaxRec=nvModemprofMaxRec, nvL2tpconfAckTimout=nvL2tpconfAckTimout, nvSFRMRTxoff=nvSFRMRTxoff, nvLinkconfWsze=nvLinkconfWsze, nvTnnlstatPortname=nvTnnlstatPortname, nvRrstatEntry=nvRrstatEntry, nvDlstatFrmrrxs=nvDlstatFrmrrxs, nvModemstatType=nvModemstatType, nvBillconf1Entry=nvBillconf1Entry, nvRbconfNumRec=nvRbconfNumRec, nvMpstatPart2InEch=nvMpstatPart2InEch, nvTnmapPortnum=nvTnmapPortnum, nvNsockmapTcpport=nvNsockmapTcpport, nvPppstatOutDiscRq=nvPppstatOutDiscRq, nvApfclstatDspname=nvApfclstatDspname, nvNodestatRxavgpps=nvNodestatRxavgpps, nvPriconfTsshift=nvPriconfTsshift, nvMediastatDebug=nvMediastatDebug, nvAcctstatRecorg=nvAcctstatRecorg, nvFrvcconfT=nvFrvcconfT, nvNetmapEntry=nvNetmapEntry, nvPridstatIndex=nvPridstatIndex, nvSDSPNumfnegs=nvSDSPNumfnegs, nvPristatMaxRec=nvPristatMaxRec, nvRadconfSecret=nvRadconfSecret, nvItirpoa=nvItirpoa, nvCrfstatRouting=nvCrfstatRouting, nvTrapPppLcpDown=nvTrapPppLcpDown, nvAcctstatSecond=nvAcctstatSecond, nvIticlassTable=nvIticlassTable, nvDportstatDuistatus=nvDportstatDuistatus, nvX25statNrxclrcs=nvX25statNrxclrcs, nvIpstat=nvIpstat, nvR2sysparAllocthrs=nvR2sysparAllocthrs, nvX25confDbmod=nvX25confDbmod, nvNodestatDtreset=nvNodestatDtreset, nvIprouteIpaddr=nvIprouteIpaddr, nvIcmpstatInAdMsRps=nvIcmpstatInAdMsRps, nvPricstatCallid=nvPricstatCallid, nvDuistatNmnxtcall=nvDuistatNmnxtcall, nvApacsstatCallrcv=nvApacsstatCallrcv, nvIticonfNumcopy=nvIticonfNumcopy, nvTncconfMaxRec=nvTncconfMaxRec, nvItipstatTxPsze=nvItipstatTxPsze, nvTcpstatSndctrls=nvTcpstatSndctrls, nvNetmapUserdata=nvNetmapUserdata, nvIpwanmapRevcall=nvIpwanmapRevcall, nvTncmapIpaddr=nvTncmapIpaddr, nvPosvisaEntry=nvPosvisaEntry, nvX25callMaxRec=nvX25callMaxRec, nvRaduserUsername=nvRaduserUsername, nvSnmpconf=nvSnmpconf, nvApacsconfIndex=nvApacsconfIndex, nvPosisoField46=nvPosisoField46, nvPppstatIpAddr=nvPppstatIpAddr, nvPosstat=nvPosstat, nvR2sysparStatint=nvR2sysparStatint, nvDspmallocNumRec=nvDspmallocNumRec, nvDialstatNconnfail=nvDialstatNconnfail, nvBillconfSet4nua3=nvBillconfSet4nua3, nvModemconfMaxRec=nvModemconfMaxRec, nvXbillstatNodeid=nvXbillstatNodeid, nvRadustatSTime=nvRadustatSTime, nvX25confNetaddr=nvX25confNetaddr, nvApacsstatRxbytes=nvApacsstatRxbytes, nvTslotconfTable=nvTslotconfTable, nvSDSPEvent12=nvSDSPEvent12, nvIptrunk=nvIptrunk, nvLinkconfT3=nvLinkconfT3, nvFrmrstatFailCause=nvFrmrstatFailCause, nvAbillstatMaxRec=nvAbillstatMaxRec, nvDlconfPuaddr=nvDlconfPuaddr, nvPriconfNumbtype=nvPriconfNumbtype, nvR2pstatToticalest=nvR2pstatToticalest, nvRbpstatLstatinfo=nvRbpstatLstatinfo, nvFtpconfNumRec=nvFtpconfNumRec, nvNodeconfAlarmrec=nvNodeconfAlarmrec, nvTnnlconfProt=nvTnnlconfProt, nvModemstatTable=nvModemstatTable, nvDlstatTable=nvDlstatTable, nvRadconfIndex=nvRadconfIndex, nvAbillstatTable=nvAbillstatTable, nvR2pstatTotisigatt=nvR2pstatTotisigatt, nvModemstatSelftest=nvModemstatSelftest, nvTncconfDnsaddr=nvTncconfDnsaddr, nvRbsysparStatint=nvRbsysparStatint, nvBillstatRxpak=nvBillstatRxpak, nvX25statNrxpaks=nvX25statNrxpaks, nvDlspcconfSitename=nvDlspcconfSitename, nvApmdmstatB2calls=nvApmdmstatB2calls, nvTcpstatKeepprobes=nvTcpstatKeepprobes, nvRadcstatNAuth3Rej=nvRadcstatNAuth3Rej, nvDuistatType=nvDuistatType, nvApacsstatDscnoack=nvApacsstatDscnoack, nvTcpstatRcvpackafterwins=nvTcpstatRcvpackafterwins, nvDrstatDtreset=nvDrstatDtreset, nvNetconDstid=nvNetconDstid, nvIpcpconfLcp=nvIpcpconfLcp, nvIticlassClasmsgid=nvIticlassClasmsgid, nvR2cstatTimeslot=nvR2cstatTimeslot, nvX25callIndex=nvX25callIndex, nvSDSPDtreset=nvSDSPDtreset, nvRadcstatNAuthLost=nvRadcstatNAuthLost, nvApfclstatPstndur=nvApfclstatPstndur, nvPosisoField4=nvPosisoField4, nvTrapconfTable=nvTrapconfTable, nvIprtstatMetric=nvIprtstatMetric, nvDlstatRrtxs=nvDlstatRrtxs, nvTcpstatSndrexmitbytes=nvTcpstatSndrexmitbytes, nvBillconfSet10nua1=nvBillconfSet10nua1, nvCFRMRSlotIndex=nvCFRMRSlotIndex, nvTncconfKill=nvTncconfKill, nvAcctstatMaxRec=nvAcctstatMaxRec, nvIpconfEncap=nvIpconfEncap, nvR2profAnswergrd=nvR2profAnswergrd, nvIfStackInfoRid=nvIfStackInfoRid, nvFrmrstatNumReloads=nvFrmrstatNumReloads, nvApfclstatDialind=nvApfclstatDialind, nvAbillstatTbcalls=nvAbillstatTbcalls, nvMpstatPart2Dtreset=nvMpstatPart2Dtreset, nvTncstatMode=nvTncstatMode, nvTrapDSPMFailedModemThresh1=nvTrapDSPMFailedModemThresh1, nvItiustatNrxpaks=nvItiustatNrxpaks, nevadaPos=nevadaPos, nvNetpvcmapTable=nvNetpvcmapTable, nvX25statNtxrrs=nvX25statNtxrrs, nvRbsysparTable=nvRbsysparTable, nvDuiconf=nvDuiconf, nvIcmpstatInTmExcds=nvIcmpstatInTmExcds, nvX25statEntry=nvX25statEntry, nvDialstatNabredial=nvDialstatNabredial, nvTnconfNumSess=nvTnconfNumSess, nvTslotstatOpstate=nvTslotstatOpstate, nvTcpstatConnects=nvTcpstatConnects, nvAbillstatP6call=nvAbillstatP6call, nvRbconfProfname=nvRbconfProfname, nvL2tpstatDataRecv=nvL2tpstatDataRecv, nvDrstatNumused=nvDrstatNumused, nvBillconfSet3nua2=nvBillconfSet3nua2, nvR2confEntry=nvR2confEntry, nvApacsstatRjadrblks=nvApacsstatRjadrblks)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvDportstatEntry=nvDportstatEntry, nvCrcstatIndex=nvCrcstatIndex, nvTnnlconfLineprot=nvTnnlconfLineprot, nvApacsstatNwadrblks=nvApacsstatNwadrblks, nvApmdmstatHostclr=nvApmdmstatHostclr, nvBillconfSet8=nvBillconfSet8, nvFrvcconfMappedpvc=nvFrvcconfMappedpvc, nvRbsysparNumRec=nvRbsysparNumRec, nvNmsuserPsiz=nvNmsuserPsiz, nvNodestatCurminbufs=nvNodestatCurminbufs, nvPricustatThresh3=nvPricustatThresh3, nvPppstatCallId=nvPppstatCallId, nvSymuserTable=nvSymuserTable, nvFtpstatDtreset=nvFtpstatDtreset, nvBillconfSet7nua1=nvBillconfSet7nua1, nevadaFrameRelay=nevadaFrameRelay, nvSDSPEvent7=nvSDSPEvent7, nvDlspcconfIndex=nvDlspcconfIndex, nvDlstatMaxRec=nvDlstatMaxRec, nvMediastatTable=nvMediastatTable, nvElxstatPhysAddr=nvElxstatPhysAddr, nvXbillconfNumRec=nvXbillconfNumRec, nvSnmpconfauthen=nvSnmpconfauthen, nvLinkconfHostinact=nvLinkconfHostinact, nvItiprofP4=nvItiprofP4, nvX25confTx3=nvX25confTx3, nvL2tpsstatNumRec=nvL2tpsstatNumRec, nvNetmapNumRec=nvNetmapNumRec, nvRadconf=nvRadconf, nvR2cstatNumRec=nvR2cstatNumRec, nvTcpstatRcvbytes=nvTcpstatRcvbytes, nvTnnlstatCallatts=nvTnnlstatCallatts, nvPriconfTable=nvPriconfTable, nvPosisoField43=nvPosisoField43, nvPosstatNodatart=nvPosstatNodatart, nvRbpstatMaxRec=nvRbpstatMaxRec, nvIticlassRpoacode=nvIticlassRpoacode, nvIpwanmapNumRec=nvIpwanmapNumRec, nvFrvcconfRxbufspac=nvFrvcconfRxbufspac, nvModemconfStatus=nvModemconfStatus, nvCrcstatDevice1=nvCrcstatDevice1, nvPristatStatus=nvPristatStatus, nvPppstatName=nvPppstatName, nvDuistatLcn=nvDuistatLcn, nvRadcstatNAcct1=nvRadcstatNAcct1, nvPosprofName=nvPosprofName, nvApfclstatWanport=nvApfclstatWanport, nvR2profMfabnrel=nvR2profMfabnrel, nvTrapReachedStatus=nvTrapReachedStatus, nvDlstatIfrxs=nvDlstatIfrxs, nvRbpstatPstat=nvRbpstatPstat, nvPosprofPermchan=nvPosprofPermchan, nvIcmpstatOutTmStRps=nvIcmpstatOutTmStRps, nvDialstatLastResponse=nvDialstatLastResponse, nvModemprofRsrcpool=nvModemprofRsrcpool, nvX25statMaxRec=nvX25statMaxRec, nvSDSPNumfaicon=nvSDSPNumfaicon, nvFrvcstatDlci=nvFrvcstatDlci, nvPosstatNumRec=nvPosstatNumRec, nvDportstatNumRec=nvDportstatNumRec, nvNetconTable=nvNetconTable, nvPosprofPolladdr=nvPosprofPolladdr, nvTcpstatRcvackpacks=nvTcpstatRcvackpacks, nvNodeconfSwversion=nvNodeconfSwversion, nvMpconfProfile=nvMpconfProfile, nvR2sysparTable=nvR2sysparTable, nvBillconfSet6=nvBillconfSet6, nvCFRMREntry=nvCFRMREntry, nvX25statCode=nvX25statCode, nvItipstatPreparam=nvItipstatPreparam, nvApclstatCalling=nvApclstatCalling, nvSnmpconfNumRec=nvSnmpconfNumRec, nvX25nuimapCalled=nvX25nuimapCalled, nvTnnlconfNetaddr=nvTnnlconfNetaddr, nvUgconfName=nvUgconfName, nvIticlassInactivty=nvIticlassInactivty, nvL2tpstatEntry=nvL2tpstatEntry, nvRrstatMaxcalls=nvRrstatMaxcalls, nvNsockmapTcpmsglen=nvNsockmapTcpmsglen, nvRbcstatEntry=nvRbcstatEntry, nvModemstatAccms=nvModemstatAccms, nvAnuaconfNumRec=nvAnuaconfNumRec, nvRadconfAcct3port=nvRadconfAcct3port, nvFrvcstat=nvFrvcstat, nvPosmsgmapNumRec=nvPosmsgmapNumRec, nvIcmpstatInPrmPrbs=nvIcmpstatInPrmPrbs, nvTncconfX3parms=nvTncconfX3parms, nvTcpstatRcvwinupds=nvTcpstatRcvwinupds, nvR2profForcerel=nvR2profForcerel, nvPricustat=nvPricustat, nvTncconfErase=nvTncconfErase, nvTncstat=nvTncstat, nvApacsstatTcalls=nvApacsstatTcalls, nvIticstatNnfails=nvIticstatNnfails, nvX25callNunakpac=nvX25callNunakpac, nvIpstatOutDiscrds=nvIpstatOutDiscrds, nvLinkstatLfrmr=nvLinkstatLfrmr, nvTncconfSetact=nvTncconfSetact, nvIticmdEntry=nvIticmdEntry, nvPosvisaField10=nvPosvisaField10, nvFtpconfUsername=nvFtpconfUsername, nvX25confCugformat=nvX25confCugformat, nvDportstatCli=nvDportstatCli, nvIticlassDevtype=nvIticlassDevtype, nvIfStackInfoTable=nvIfStackInfoTable, nvDuistat=nvDuistat, nvPristatNcurincom=nvPristatNcurincom, nvSDLIDtreset=nvSDLIDtreset, nvIprtstatNumRec=nvIprtstatNumRec, nvLinkstatTouts=nvLinkstatTouts, nvTslotconfTcpprof=nvTslotconfTcpprof, nvXbillconfMaxRec=nvXbillconfMaxRec, telematics=telematics, nvRbprofRlcf=nvRbprofRlcf, nvNsockmapOrigin=nvNsockmapOrigin, nvTnnlstatInframes=nvTnnlstatInframes, NvNetAddress=NvNetAddress, nvAnuaconfLabel1=nvAnuaconfLabel1, nvSDLIEntry=nvSDLIEntry, nvAnuaconfRsvrReverse=nvAnuaconfRsvrReverse, nvTslotconfVersion=nvTslotconfVersion, nevadaTelnet=nevadaTelnet, nvX25confUpdncmd=nvX25confUpdncmd, nvApfclstatDate=nvApfclstatDate, nvRadconfAttrchk=nvRadconfAttrchk, nvMpstatPart2OutEfrags=nvMpstatPart2OutEfrags, nvPosprofNretry=nvPosprofNretry, nvSDLIYelcnts=nvSDLIYelcnts, nvL2tpstatMaxRec=nvL2tpstatMaxRec, nvCrcstatDevice2=nvCrcstatDevice2, nvTrapPriDataLayerDn=nvTrapPriDataLayerDn, nvDuistatNua=nvDuistatNua, nvCDLIPortIndex=nvCDLIPortIndex, nvTncmapUsdata=nvTncmapUsdata, nvMpconf=nvMpconf, nvCDLIName=nvCDLIName, nvMpstatPart2OutOctets=nvMpstatPart2OutOctets, nvItiprofP10=nvItiprofP10, nvPosisoField57=nvPosisoField57, nvR2profNumRec=nvR2profNumRec, nvCrouteIndex=nvCrouteIndex, nvDportstat=nvDportstat, nvR2profSzakalmsk=nvR2profSzakalmsk, nvNodeconfEntry=nvNodeconfEntry, nvRrstat=nvRrstat, nvApacsconfReserve1=nvApacsconfReserve1, nevadaFtp=nevadaFtp, nvDportstatDtreset=nvDportstatDtreset, nvBillconfSet3nua1=nvBillconfSet3nua1, nvTnclassStatus=nvTnclassStatus, nvMpstatPart1LocSeqS=nvMpstatPart1LocSeqS, nvL2tptstatSendCtrl=nvL2tptstatSendCtrl, nvMpconfNumRec=nvMpconfNumRec, nvIticonfNumRec=nvIticonfNumRec, nvApmdmstatTxbytes=nvApmdmstatTxbytes, nvItiprofP22=nvItiprofP22, nvPricustatCounter4=nvPricustatCounter4, nvMpstatPart2NumRec=nvMpstatPart2NumRec, nvIpconfIpaddr=nvIpconfIpaddr, nvAbillstatP1time=nvAbillstatP1time, nvAcctstat64ktxsegs=nvAcctstat64ktxsegs, nvRbpstatIndex=nvRbpstatIndex, nvFrvcconfBe=nvFrvcconfBe, nvSDSPSlotIndex=nvSDSPSlotIndex, nvPricstatIndex=nvPricstatIndex, nvApfclstatTime=nvApfclstatTime, nvTslotconfName=nvTslotconfName, nvRrstatNumOcalls=nvRrstatNumOcalls, nvApfclstatTermid=nvApfclstatTermid, nvPosisoField31=nvPosisoField31, nvDuistatLastcause=nvDuistatLastcause, nvPppstatCcpOperS=nvPppstatCcpOperS, nvTncconfIdletim=nvTncconfIdletim, nvPosprofEftrspto=nvPosprofEftrspto, nvX25confAcktimer=nvX25confAcktimer, nvX25confNuirtg=nvX25confNuirtg, nvPosstatName=nvPosstatName, nvTcpcnstatNumRec=nvTcpcnstatNumRec, nvR2profFcrlalmsk=nvR2profFcrlalmsk, nvTncstatStatus=nvTncstatStatus, nvRaduser=nvRaduser, nvFrmrstatState=nvFrmrstatState, nvMediastatDump=nvMediastatDump, nvX25confLtc=nvX25confLtc, nvApfclstatX25dur=nvApfclstatX25dur, nvApclstat=nvApclstat, nvPosisoField47=nvPosisoField47, nvLcpconfComprot1=nvLcpconfComprot1, nvModemprofAnstondur=nvModemprofAnstondur, nvItipstatUsername=nvItipstatUsername, nvAcctstat64ktxchars=nvAcctstat64ktxchars, nvModemstatDsp=nvModemstatDsp, nvTcpprofNumRec=nvTcpprofNumRec, nvTncstatIndex=nvTncstatIndex, nvPppstatOutOctets=nvPppstatOutOctets, nvDlstatDtreset=nvDlstatDtreset, nvIticlassPrefixid=nvIticlassPrefixid, nvItiuserTable=nvItiuserTable, nvSDLITable=nvSDLITable, nvR2sysparMaxbnmlen=nvR2sysparMaxbnmlen, nvPppstatOutErrors=nvPppstatOutErrors, nvNodeconfRate2=nvNodeconfRate2, nvRbcstatMaxRec=nvRbcstatMaxRec, nvPriconfX25diags=nvPriconfX25diags, nvDlconfTable=nvDlconfTable, nvDialstatNcircfail=nvDialstatNcircfail, nvElxstatOutOctets=nvElxstatOutOctets, nvPosvisaField9=nvPosvisaField9, nvRadcstatNAuth3Acc=nvRadcstatNAuth3Acc, nvFriconfnN1=nvFriconfnN1, nvR2profMfspchnc=nvR2profMfspchnc, nvItiuser=nvItiuser, nvCrfstatRcsc1=nvCrfstatRcsc1, nvCrouteTable=nvCrouteTable, nvSFRMRCrcerrs=nvSFRMRCrcerrs, nvRadustat=nvRadustat, nvR2cstatCstat=nvR2cstatCstat, nvX25confDeftput=nvX25confDeftput, nvApfclstatMaxRec=nvApfclstatMaxRec, nvIprouteMaxRec=nvIprouteMaxRec, nvTcpstatSndrexmitpacks=nvTcpstatSndrexmitpacks, nvModemstatRenego=nvModemstatRenego, nvTncconfEcho=nvTncconfEcho, nvRbdspstatDevname=nvRbdspstatDevname, nvAnuaconfTable=nvAnuaconfTable, nvRbsysparMaxRec=nvRbsysparMaxRec, nvTcpstatRcvpartduppacks=nvTcpstatRcvpartduppacks, nvPosstatNmsreqs=nvPosstatNmsreqs, nvApacsstatLoscardat=nvApacsstatLoscardat, nvAcctstatCalled=nvAcctstatCalled, nvFrvcstatRxbufdepletion=nvFrvcstatRxbufdepletion, nvNodeconfAcctrec=nvNodeconfAcctrec, nvMpstatPart1Entry=nvMpstatPart1Entry, nvTrapDbsavecount=nvTrapDbsavecount, nvTcpstatRcvdupacks=nvTcpstatRcvdupacks, nvSlotstatProdChkDate=nvSlotstatProdChkDate, nvModemstatFirmver=nvModemstatFirmver, nvAcctoperTable=nvAcctoperTable, nvRadconfAcct3=nvRadconfAcct3, nvSymuserNumRec=nvSymuserNumRec, nvStringData=nvStringData, nvRbsyspar=nvRbsyspar, nvApfclstatFailcause=nvApfclstatFailcause, nvApacsstatNoadrblk=nvApacsstatNoadrblk, nvRbcstatRbport=nvRbcstatRbport, nvPosvisaField20=nvPosvisaField20, nvPriconfStatus=nvPriconfStatus, nvItiprofP6=nvItiprofP6, nvTcpstatSndtotals=nvTcpstatSndtotals, nvX25statTable=nvX25statTable, nvIpstatNumRec=nvIpstatNumRec, nvUgstatIndex=nvUgstatIndex, nvX25confPktbuf=nvX25confPktbuf, nvAbillstatP5time=nvAbillstatP5time)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvSDLITxundrun=nvSDLITxundrun, nvPosniimapIndex=nvPosniimapIndex, nvNetmapNodeid=nvNetmapNodeid, nvAbillstatTfail=nvAbillstatTfail, nvModemconfNumRec=nvModemconfNumRec, nvSlotstatRam=nvSlotstatRam, nvIcmpstatNumRec=nvIcmpstatNumRec, nvSnmpmgrAccPriv=nvSnmpmgrAccPriv, nvItipstatPrio=nvItipstatPrio, nvDportstatPorttype=nvDportstatPorttype, nvLinkconf=nvLinkconf, nvSnmpconflocation=nvSnmpconflocation, nvNetrouteIndex=nvNetrouteIndex, nvCrcstatCallednum=nvCrcstatCallednum, nvSDSPEvent9=nvSDSPEvent9, nvLinkstatFstate=nvLinkstatFstate, nvFristatIndex=nvFristatIndex, nvModemstatDtreset=nvModemstatDtreset, nvTcpcnstatLocalport=nvTcpcnstatLocalport, nvItiprofP11=nvItiprofP11, nvNmsuserPassword=nvNmsuserPassword, nvDportstatMaxRec=nvDportstatMaxRec, nvModemprofTable=nvModemprofTable, nvTncstatTable=nvTncstatTable, nvRadustatTable=nvRadustatTable, nvPppstatIndex=nvPppstatIndex, nvSnmpconfTable=nvSnmpconfTable, nvNetpvcService=nvNetpvcService, nvPosisoField51=nvPosisoField51, nvRbconf=nvRbconf, nvNsockmapNumRec=nvNsockmapNumRec, nvCrouteAddr=nvCrouteAddr, nvIticstatLoscarsu=nvIticstatLoscarsu, nvX25callEntry=nvX25callEntry, nvIticlassXonout=nvIticlassXonout, nvBillconfSet6nua1=nvBillconfSet6nua1, nvX25callNumRec=nvX25callNumRec, nvIcmpstatInEchRps=nvIcmpstatInEchRps, nvElxstatInDiscards=nvElxstatInDiscards, nvLcpconfMultilink=nvLcpconfMultilink, nvTslotstatNumcon=nvTslotstatNumcon, nvBillconfSet2nua1=nvBillconfSet2nua1, nvBillstatRxseg=nvBillstatRxseg, nvL2tpconfAdminStat=nvL2tpconfAdminStat, nvRbpstatEntry=nvRbpstatEntry, nvNodeconfX25call=nvNodeconfX25call, nvElxstatOutUcasts=nvElxstatOutUcasts, nvR2profIndex=nvR2profIndex, nvTcpstatRcvackbytes=nvTcpstatRcvackbytes, nvTcpstatRcvaftercloses=nvTcpstatRcvaftercloses, nvDialstatNnoAnswer=nvDialstatNnoAnswer, nvX25nuimap=nvX25nuimap, nvIpconfIndex=nvIpconfIndex, nvRaduserStatus=nvRaduserStatus, nvL2tpsstatEntry=nvL2tpsstatEntry, nvFtpstat=nvFtpstat, nvPosvisaField11=nvPosvisaField11, nvApacsconfTable=nvApacsconfTable, nvPosisoField20=nvPosisoField20, nvFrvcstatRxframes=nvFrvcstatRxframes, nevadaIti=nevadaIti, nvApacsstatN14400bd=nvApacsstatN14400bd, nvTrapFRAMERFailed=nvTrapFRAMERFailed, nvItirpoaEntry=nvItirpoaEntry, nvApclstatFailcause=nvApclstatFailcause, nvIcmpstatOutTmExcds=nvIcmpstatOutTmExcds, nvPristatNnoanswer=nvPristatNnoanswer, nvElxstatInOctets=nvElxstatInOctets, nvLcpconfTable=nvLcpconfTable, nvRadcstatNAuths=nvRadcstatNAuths, nvApfclstatIsdnclr=nvApfclstatIsdnclr, nvApacsstatHostnodat=nvApacsstatHostnodat, nvNmsuserStatus=nvNmsuserStatus, nvPosconfProfile=nvPosconfProfile, nvAnuaconfIndex=nvAnuaconfIndex, nvPridstatTable=nvPridstatTable, nvApacsconfBillingT5=nvApacsconfBillingT5, nvItiprofTable=nvItiprofTable, nvUgstatTable=nvUgstatTable, nvIticstatN9600bd=nvIticstatN9600bd, nvFrvcstatExcessdatas=nvFrvcstatExcessdatas, nvItiportTable=nvItiportTable, nvXbillconf=nvXbillconf, nvBillconfSet9nua1=nvBillconfSet9nua1, nvFtpconfIndex=nvFtpconfIndex, nvIticlassMaxwsze=nvIticlassMaxwsze, nvMediastatOrigimage=nvMediastatOrigimage, nvRbcstatIndex=nvRbcstatIndex, nvApacsconfBillingT6=nvApacsconfBillingT6, nvPridstatEntry=nvPridstatEntry, nvIpwanmapRpoa=nvIpwanmapRpoa, nvSlotstatSrNumber=nvSlotstatSrNumber, nvItipstatNncr=nvItipstatNncr, nvRbpstatTotisigatt=nvRbpstatTotisigatt, nvIpwanmapStatus=nvIpwanmapStatus, nvNsockmapEntry=nvNsockmapEntry, nvFriconfnT2=nvFriconfnT2, nvTrapAlternateConfig=nvTrapAlternateConfig, nvX25confIsdnaddr=nvX25confIsdnaddr, nvPppstatIpcp=nvPppstatIpcp, nvIpwanmap=nvIpwanmap, nvApclstatTermid=nvApclstatTermid, nvR2sysparNumRec=nvR2sysparNumRec, nvLinkconfPortname=nvLinkconfPortname, nvR2syspar=nvR2syspar, nvDportstatSessions=nvDportstatSessions, nvIticonfConfigstr=nvIticonfConfigstr, nvIticlassIndex=nvIticlassIndex, nvDlstatIftxs=nvDlstatIftxs, nvPosniimapTable=nvPosniimapTable, nvAcctstatEntry=nvAcctstatEntry, nvIticstatN300bd=nvIticstatN300bd, nvMpstatPart2OutDiscrd=nvMpstatPart2OutDiscrd, nvR2dspstatIndex=nvR2dspstatIndex, nvElxconfMaxRec=nvElxconfMaxRec, nvX25statNtxchars=nvX25statNtxchars, nvTnclass=nvTnclass, nvFrmrstatNumRxFrames=nvFrmrstatNumRxFrames, nvXbillconfIndex=nvXbillconfIndex, nvL2tptstatSendData=nvL2tptstatSendData, nvRadustatDFilter=nvRadustatDFilter, nvBillconfSet3=nvBillconfSet3, nvNsockmapUserdata=nvNsockmapUserdata, nvBillstatNetclr=nvBillstatNetclr, nvApacsstatTxbytes=nvApacsstatTxbytes, nvPosstatTable=nvPosstatTable, nvPridstatMaxRec=nvPridstatMaxRec, nvItiportFclevel=nvItiportFclevel, nvTnnlstatTable=nvTnnlstatTable, nvLcpconfComprot2=nvLcpconfComprot2, nvLinkstatIfrxs=nvLinkstatIfrxs, nvPppstatIpcpOperS=nvPppstatIpcpOperS, nvSymuserIndex=nvSymuserIndex, nvAcctstatRxchars=nvAcctstatRxchars, nvDuiconfIndex=nvDuiconfIndex, nvNodestatRxcurpps=nvNodestatRxcurpps, nvApacsstatEntry=nvApacsstatEntry, nvApfilterThreshold=nvApfilterThreshold, nvPricustatResettime=nvPricustatResettime, nvTncconfTable=nvTncconfTable, nvRbsysparPollint=nvRbsysparPollint, nvPosnmsmapNmsid=nvPosnmsmapNmsid, nvTrapISDNFailedCalls=nvTrapISDNFailedCalls, nvPriconfBusyout=nvPriconfBusyout, nvIpwanmapPsize=nvIpwanmapPsize, nvTnnlconfRtmethod=nvTnnlconfRtmethod, nvModemstatRate=nvModemstatRate, nvSFRMRNtxoff=nvSFRMRNtxoff, nvIpwanmapTable=nvIpwanmapTable, nvR2cstatCparty=nvR2cstatCparty, nvNodeconfFrmrfail=nvNodeconfFrmrfail, nvDialstatLastCause=nvDialstatLastCause, nvAbillstatP2time=nvAbillstatP2time, nvPppstatPppAdminS=nvPppstatPppAdminS, nvDialstatAdFailtim=nvDialstatAdFailtim, nvElxstatAdminStat=nvElxstatAdminStat, nevadaL2tp=nevadaL2tp, nvElxconfTable=nvElxconfTable, nvFtpconfEntry=nvFtpconfEntry, nvX25statNrxrrs=nvX25statNrxrrs, nvTcpstatSndurgs=nvTcpstatSndurgs, nvPriconfDsltype=nvPriconfDsltype, nvPosstatNumimsgs=nvPosstatNumimsgs, nvIpstatMaxRec=nvIpstatMaxRec, nvDlstatTretrys=nvDlstatTretrys, nvRadconfNbnsatt2=nvRadconfNbnsatt2, nvDrstat=nvDrstat, nvPosvisaField5=nvPosvisaField5, nvPridstatDate=nvPridstatDate, nvBillconfSet11nua2=nvBillconfSet11nua2, nvLinkconfMaxRec=nvLinkconfMaxRec, nvR2pstatEntry=nvR2pstatEntry, nvXnuasetSetname=nvXnuasetSetname, nvR2profAnswalmsk=nvR2profAnswalmsk, nvLcpconfNumRec=nvLcpconfNumRec, nvFtpstatTotalfals=nvFtpstatTotalfals, nvApacsstatActtmocip=nvApacsstatActtmocip, nvTnmapTnclass=nvTnmapTnclass, nvR2pstatDtreset=nvR2pstatDtreset, nvItipstatNnccs=nvItipstatNnccs, nvFriconfnN3=nvFriconfnN3, nvModemconfName=nvModemconfName, nvCrcstatRouting=nvCrcstatRouting, nvMpstatPart1LocClass=nvMpstatPart1LocClass, nvIpstatReasmFails=nvIpstatReasmFails, nvTnnlstatRsrcpool=nvTnnlstatRsrcpool, nvRadustatNasIpAddr=nvRadustatNasIpAddr, nvAbillstatP5call=nvAbillstatP5call, nvRadconfTable=nvRadconfTable, nvPosisoField60=nvPosisoField60, nvSDSPTable=nvSDSPTable, nvDportstatIncalls=nvDportstatIncalls, nvPricuconfMaxRec=nvPricuconfMaxRec, nvNsockmapMaxRec=nvNsockmapMaxRec, nvDlconfDlnumber=nvDlconfDlnumber, nvFrvcstatEntry=nvFrvcstatEntry, nvApacsconfNodename=nvApacsconfNodename, nvTrapQDLIFailed=nvTrapQDLIFailed, nvFrmrstatResetTime=nvFrmrstatResetTime, nvAcctstatSegsize=nvAcctstatSegsize, nvTslotstatTottxfrm=nvTslotstatTottxfrm, nvItiuserIndex=nvItiuserIndex, nvLinkstatFrmrtxs=nvLinkstatFrmrtxs, nvRbprofSuffix=nvRbprofSuffix, nvIpwanmapBcastcntl=nvIpwanmapBcastcntl, nvAbillstatPbtime=nvAbillstatPbtime, nvPosstatDtreset=nvPosstatDtreset, nvX25callLcn=nvX25callLcn, nvIprtstatType=nvIprtstatType, nvTncmapSecure=nvTncmapSecure, nvR2pstatLstatinfo=nvR2pstatLstatinfo, nvItipstatNtimeout=nvItipstatNtimeout, nvItiprofP7=nvItiprofP7, nvIticlass=nvIticlass, nvNetpvcPvcid=nvNetpvcPvcid, nvRadustatSessionId=nvRadustatSessionId, nvMpstatPart2InEchRp=nvMpstatPart2InEchRp, nvX25confMaxwsze=nvX25confMaxwsze, nvElxconf=nvElxconf, nvRrstatIndex=nvRrstatIndex, nvCrouteRouting=nvCrouteRouting, nvCDSPEntry=nvCDSPEntry, nvDuiconfStatus=nvDuiconfStatus, nvX25confNtc=nvX25confNtc, nvModemstatRxpclear=nvModemstatRxpclear, nvApacsstatLrcerrcip=nvApacsstatLrcerrcip, nvApclstatPriname=nvApclstatPriname, nvApacsstatTrmdscsu=nvApacsstatTrmdscsu, nvBillconfSet12nua1=nvBillconfSet12nua1, nevadaX25=nevadaX25, nvDialstatNmnegfail=nvDialstatNmnegfail, nvCrcstatBw=nvCrcstatBw, nvRbpstatFlavor=nvRbpstatFlavor, nvR2pstatObr2dsp=nvR2pstatObr2dsp, nvTnstatStatus=nvTnstatStatus, nvIpcpconfNbnsadd2=nvIpcpconfNbnsadd2, nvX25statNrxrnrs=nvX25statNrxrnrs, nvFrvcconfN=nvFrvcconfN, nvPppstatMultilink=nvPppstatMultilink, nvRbprofIndex=nvRbprofIndex, nvFtpconfTimeout=nvFtpconfTimeout, nvLcpconfInactivty=nvLcpconfInactivty, nvApmdmstatNwclr=nvApmdmstatNwclr, nvTrapDeviceDisconnected=nvTrapDeviceDisconnected, nvTrapFrLMIError=nvTrapFrLMIError, nvIticstatEntry=nvIticstatEntry, nvBillconfSet7nua2=nvBillconfSet7nua2, nvBillconfSet10=nvBillconfSet10, nvSlotstatMaxRec=nvSlotstatMaxRec, nvItiprofP3=nvItiprofP3, nvRaduserNumRec=nvRaduserNumRec, nvItipstatTxTput=nvItipstatTxTput, nvAbillstatTxbytes=nvAbillstatTxbytes, nvTcpcnstatRemaddr=nvTcpcnstatRemaddr)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvL2tpsstatDeviceNum=nvL2tpsstatDeviceNum, nvModemstatMse=nvModemstatMse, nvTrapFrPortDown=nvTrapFrPortDown, nvSymuserUsername=nvSymuserUsername, nvPosisoField62=nvPosisoField62, nvRbsysparDeallthrs=nvRbsysparDeallthrs, nvRadconfT1=nvRadconfT1, nvNetpvc=nvNetpvc)
