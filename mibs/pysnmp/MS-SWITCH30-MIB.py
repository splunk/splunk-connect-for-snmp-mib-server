#
# PySNMP MIB module MS-SWITCH30-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MS-SWITCH30-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:05:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Counter32, Counter64, iso, Gauge32, IpAddress, MibIdentifier, NotificationType, Unsigned32, Bits, TimeTicks, enterprises, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Counter32", "Counter64", "iso", "Gauge32", "IpAddress", "MibIdentifier", "NotificationType", "Unsigned32", "Bits", "TimeTicks", "enterprises", "ObjectIdentity")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
mib3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 3))
mib3.setRevisions(('2011-04-11 00:00', '2011-03-03 00:00', '2010-12-18 00:00', '2010-08-30 00:00', '2010-06-24 00:00', '2010-05-03 00:00', '2010-01-19 00:00', '2009-12-22 00:00', '2009-11-17 00:00', '2009-06-03 00:00', '2009-04-29 00:00', '2009-01-12 00:00', '2008-09-01 00:00', '2008-06-17 00:00', '2007-07-12 00:00',))
if mibBuilder.loadTexts: mib3.setLastUpdated('201104110000Z')
if mibBuilder.loadTexts: mib3.setOrganization('MICROSENS')
microsens = MibIdentifier((1, 3, 6, 1, 4, 1, 3181))
managedSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1))
deviceArtNo = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceArtNo.setStatus('current')
deviceSerNo = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerNo.setStatus('current')
deviceHardware = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHardware.setStatus('current')
deviceDescription = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescription.setStatus('current')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
deviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceLocation.setStatus('current')
deviceContact = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceContact.setStatus('current')
deviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGroup.setStatus('current')
deviceTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperature.setStatus('current')
deviceTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("criticalLow", 1), ("low", 2), ("normal", 3), ("high", 4), ("criticalHigh", 5), ("shutdown", 6), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureLevel.setStatus('current')
deviceUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUpTime.setStatus('current')
deviceFddActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFddActiveTime.setStatus('current')
deviceFddPassiveTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFddPassiveTime.setStatus('current')
deviceInventory = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceInventory.setStatus('current')
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2))
agentFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFirmware.setStatus('current')
agentMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMacAddress.setStatus('current')
agentIpMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpMode.setStatus('current')
agentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpAddress.setStatus('current')
agentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSubnetMask.setStatus('current')
agentGateway = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGateway.setStatus('current')
agentConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigReset.setStatus('current')
agentConfigFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normalOperation", 0), ("factoryResetTemp", 1), ("factoryResetPerm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigFactoryDefault.setStatus('current')
agentConfigEnableFactoryButton = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigEnableFactoryButton.setStatus('current')
agentSecureAddressFlag = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("useSecure", 1), ("useNormal", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSecureAddressFlag.setStatus('current')
agentStorageMediaCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("noCardInserted", 1), ("invalidCardDetected", 2), ("validCardDetected", 3), ("bootedFromCard", 4), ("bootedFromCardwithMac", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStorageMediaCardStatus.setStatus('current')
agentStorageMediaCardBoot = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("bootSmcTemp", 1), ("bootSmcPerm", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStorageMediaCardBoot.setStatus('current')
agentStorageMediaCardMac = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("useMacFromSMC", 1), ("useOriginalMac", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStorageMediaCardMac.setStatus('current')
agentStoreConfigToStorageMediaCard = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("store", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStoreConfigToStorageMediaCard.setStatus('current')
port = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3))
portCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('current')
portStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10), )
if mibBuilder.loadTexts: portStatusTable.setStatus('current')
portStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: portStatusTableEntry.setStatus('current')
portStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusId.setStatus('current')
portStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254))).clone(namedValues=NamedValues(("port-tx10-100", 1), ("port-t10-100-1000", 2), ("port-fx100", 3), ("port-fx100-1000-sfp", 4), ("port-x1000", 5), ("port-tx10-100-1000-sfp", 6), ("port-tx10-100-1000-1x9", 7), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusType.setStatus('current')
portStatusLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusLink.setStatus('current')
portStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusSpeed.setStatus('current')
portStatusDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusDuplex.setStatus('current')
portStatusFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusFlowControl.setStatus('current')
portStatusPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusPinout.setStatus('current')
portStatusFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("detected", 1), ("undetected", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusFarEndFault.setStatus('current')
portStatusRxNetload = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusRxNetload.setStatus('current')
portStatusTxNetload = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusTxNetload.setStatus('current')
portConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20), )
if mibBuilder.loadTexts: portConfigTable.setStatus('current')
portConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "portConfigId"))
if mibBuilder.loadTexts: portConfigTableEntry.setStatus('current')
portConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigId.setStatus('current')
portConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAlias.setStatus('current')
portConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigEnable.setStatus('current')
portConfigAutonego = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAutonego.setStatus('current')
portConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("force10", 1), ("force100", 2), ("force1000", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSpeed.setStatus('current')
portConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("forcehalf", 1), ("forcefull", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDuplex.setStatus('current')
portConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("advertise", 1), ("avoid", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFlowControl.setStatus('current')
portConfigPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigPinout.setStatus('current')
portConfigFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disalbed", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFarEndFault.setStatus('current')
portConfigAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("advertiseGigabit", 1), ("avoidGigabit", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAdvertise.setStatus('current')
portConfigFibreDownDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disalbed", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFibreDownDetection.setStatus('current')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4))
vlanSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("notsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSupport.setStatus('current')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
vlanForceDefaultVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("perport", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanForceDefaultVID.setStatus('current')
vlanFilterCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterCount.setStatus('current')
vlanVoiceVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceVID.setStatus('current')
vlanRstpVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRstpVID.setStatus('current')
vlanUnauthVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanUnauthVID.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanPortId"))
if mibBuilder.loadTexts: vlanPortTableEntry.setStatus('current')
vlanPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortId.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("hybrid", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
vlanDefaultVID = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultVID.setStatus('current')
vlanDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultPriority.setStatus('current')
vlanPortFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortFlags.setStatus('current')
vlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20), )
if mibBuilder.loadTexts: vlanFilterTable.setStatus('current')
vlanFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanFilterId"))
if mibBuilder.loadTexts: vlanFilterTableEntry.setStatus('current')
vlanFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterId.setStatus('current')
vlanFilterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterVID.setStatus('current')
vlanFilterAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterAlias.setStatus('current')
vlanFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnable.setStatus('current')
vlanMemberManager = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberManager.setStatus('current')
vlanMemberPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort1.setStatus('current')
vlanMemberPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort2.setStatus('current')
vlanMemberPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort3.setStatus('current')
vlanMemberPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort4.setStatus('current')
vlanMemberPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort5.setStatus('current')
vlanMemberPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort6.setStatus('current')
vlanMemberPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort7.setStatus('current')
vlanMemberPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort8.setStatus('current')
vlanMemberPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort9.setStatus('current')
vlanMemberPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort10.setStatus('current')
vlanMemberPort11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort11.setStatus('current')
vlanMemberPort12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort12.setStatus('current')
vlanMemberPort13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort13.setStatus('current')
vlanMemberPort14 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort14.setStatus('current')
vlanMemberPort15 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort15.setStatus('current')
vlanMemberPort16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort16.setStatus('current')
vlanMemberPort17 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort17.setStatus('current')
vlanMemberPort18 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort18.setStatus('current')
vlanMemberPort19 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort19.setStatus('current')
vlanMemberPort20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort20.setStatus('current')
vlanMemberPort21 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort21.setStatus('current')
vlanMemberPort22 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort22.setStatus('current')
vlanMemberPort23 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort23.setStatus('current')
vlanMemberPort24 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort24.setStatus('current')
vlanFilterEnhTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30), )
if mibBuilder.loadTexts: vlanFilterEnhTable.setStatus('current')
vlanFilterEnhTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanFilterEnhId"))
if mibBuilder.loadTexts: vlanFilterEnhTableEntry.setStatus('current')
vlanFilterEnhId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterEnhId.setStatus('current')
vlanFilterEnhFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnhFlags.setStatus('current')
vlanFilterEnhPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnhPriOverride.setStatus('current')
prioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5))
prioSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioSupport.setStatus('current')
prioQueueCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioQueueCount.setStatus('current')
prioQueueScheme = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("weighted", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueScheme.setStatus('current')
prioPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioPortEnable.setStatus('current')
prioIeeeTagEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIeeeTagEnable.setStatus('current')
prioDiffservEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDiffservEnable.setStatus('current')
prioPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10), )
if mibBuilder.loadTexts: prioPortTable.setStatus('current')
prioPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioPortId"))
if mibBuilder.loadTexts: prioPortTableEntry.setStatus('current')
prioPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioPortId.setStatus('current')
prioPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioPortQueue.setStatus('current')
prioIeeeTagTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20), )
if mibBuilder.loadTexts: prioIeeeTagTable.setStatus('current')
prioIeeeTagTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioIeeeTagId"))
if mibBuilder.loadTexts: prioIeeeTagTableEntry.setStatus('current')
prioIeeeTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIeeeTagId.setStatus('current')
prioIeeeTagQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIeeeTagQueue.setStatus('current')
prioDiffservTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30), )
if mibBuilder.loadTexts: prioDiffservTable.setStatus('current')
prioDiffservTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioDiffservId"))
if mibBuilder.loadTexts: prioDiffservTableEntry.setStatus('current')
prioDiffservId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioDiffservId.setStatus('current')
prioDiffservQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDiffservQueue.setStatus('current')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6))
monitorSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSupport.setStatus('current')
monitorMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("txonly", 1), ("both", 2), ("disabled", 3), ("hubmode", 4), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorMode.setStatus('current')
monitorSource = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSource.setStatus('current')
monitorDestination = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDestination.setStatus('current')
ring = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7))
ringSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringSupport.setStatus('current')
ringCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringCount.setStatus('current')
ringTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10), )
if mibBuilder.loadTexts: ringTable.setStatus('current')
ringTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "ringId"))
if mibBuilder.loadTexts: ringTableEntry.setStatus('current')
ringId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringId.setStatus('current')
ringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("disabled", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringMode.setStatus('current')
ringPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortA.setStatus('current')
ringPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortB.setStatus('current')
ringNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringNumber.setStatus('current')
ringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ringOk", 1), ("ringFailure", 2), ("ringDisabled", 3), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStatus.setStatus('current')
ringAlarmDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringAlarmDuration.setStatus('current')
couplingred = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8))
couplingredSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredSupport.setStatus('current')
couplingredPort = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredPort.setStatus('current')
couplingredMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("backup", 1), ("main", 2), ("disabled", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredMode.setStatus('current')
couplingredPartnerIp = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredPartnerIp.setStatus('current')
couplingredStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("disabled", 0), ("blocked", 1), ("link", 2), ("forwarding", 3), ("standby", 4), ("undefined", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredStatus.setStatus('current')
couplingredPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("disabled", 0), ("blocked", 1), ("link", 2), ("forwarding", 3), ("standby", 4), ("undefined", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredPartnerStatus.setStatus('current')
couplingredValidationFlag = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredValidationFlag.setStatus('current')
sfp = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9))
sfpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSupport.setStatus('current')
sfpCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpCount.setStatus('current')
sfpTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10), )
if mibBuilder.loadTexts: sfpTable.setStatus('current')
sfpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "sfpId"))
if mibBuilder.loadTexts: sfpTableEntry.setStatus('current')
sfpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpId.setStatus('current')
sfpPortnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortnumber.setStatus('current')
sfpDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("plugged", 1), ("unplugged", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDetect.setStatus('current')
sfpVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendor.setStatus('current')
sfpVendorPartnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPartnumber.setStatus('current')
sfpVendorSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSerialnumber.setStatus('current')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7, 8, 255))).clone(namedValues=NamedValues(("connSC", 1), ("connLC", 7), ("connMTRJ", 8), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
sfpNominalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpNominalBitrate.setStatus('current')
sfpDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("supportedWithInternalCalibration", 1), ("supportedWithExternalCalibration", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagnostic.setStatus('current')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
sfpTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxBias.setStatus('current')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
sfpWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 15), Bits().clone(namedValues=NamedValues(("tempHighWarn", 0), ("tempLowWarn", 1), ("vccHighWarn", 2), ("vccLowWarn", 3), ("txBiasHighWarn", 4), ("txBiasLowWarn", 5), ("txPowerHighWarn", 6), ("txPowerLowWarn", 7), ("rxPowerHighWarn", 8), ("rxPowerLowWarn", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpWarnings.setStatus('current')
sfpAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 16), Bits().clone(namedValues=NamedValues(("tempHighAlarm", 0), ("tempLowAlarm", 1), ("vccHighAlarm", 2), ("vccLowAlarm", 3), ("txBiasHighAlarm", 4), ("txBiasLowAlarm", 5), ("txPowerHighAlarm", 6), ("txPowerLowAlarm", 7), ("rxPowerHighAlarm", 8), ("rxPowerLowAlarm", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpAlarms.setStatus('current')
relais = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11))
relaisSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisSupport.setStatus('current')
relaisCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisCount.setStatus('current')
relaisTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10), )
if mibBuilder.loadTexts: relaisTable.setStatus('current')
relaisTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "relaisId"))
if mibBuilder.loadTexts: relaisTableEntry.setStatus('current')
relaisId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisId.setStatus('current')
relaisAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisAlias.setStatus('current')
relaisMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openOnEvent", 1), ("closeOnEvent", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisMode.setStatus('current')
relaisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("closed", 1), ("opened", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisStatus.setStatus('current')
portaccessctrl = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12))
pacSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacSupport.setStatus('current')
pacEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacEnable.setStatus('current')
pacUnauthMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("block", 1), ("useDefaultVID", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacUnauthMode.setStatus('current')
pacUnauthVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacUnauthVID.setStatus('current')
pacMaxNumberOfAllowedHostsPerPort = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacMaxNumberOfAllowedHostsPerPort.setStatus('current')
pacFallbackRequestEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRequestEnable.setStatus('current')
pacFallbackRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRequestTimeout.setStatus('current')
pacFallbackRejectsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRejectsEnable.setStatus('current')
pacFallbackMaxRejects = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackMaxRejects.setStatus('current')
pacSupplicantTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacSupplicantTimeout.setStatus('current')
pacReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacReauthEnable.setStatus('current')
pacReauthTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacReauthTime.setStatus('current')
pacStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100), )
if mibBuilder.loadTexts: pacStatusTable.setStatus('current')
pacStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacStatPortId"))
if mibBuilder.loadTexts: pacStatusTableEntry.setStatus('current')
pacStatPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortId.setStatus('current')
pacStatPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("forceAuthorized", 1), ("macLocking", 2), ("radiusMacAuthentication", 3), ("ieee8021xAuthentication", 4), ("forceUnauthorized", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortMode.setStatus('current')
pacStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortStatus.setStatus('current')
pacStatUserStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus1.setStatus('current')
pacStatUserStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus2.setStatus('current')
pacStatUserStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus3.setStatus('current')
pacStatUserStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus4.setStatus('current')
pacStatUserMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac1.setStatus('current')
pacStatUserMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac2.setStatus('current')
pacStatUserMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac3.setStatus('current')
pacStatUserMac4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac4.setStatus('current')
pacStatUserName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName1.setStatus('current')
pacStatUserName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName2.setStatus('current')
pacStatUserName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName3.setStatus('current')
pacStatUserName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName4.setStatus('current')
pacStatUserIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp1.setStatus('current')
pacStatUserIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp2.setStatus('current')
pacStatUserIp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp3.setStatus('current')
pacStatUserIp4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp4.setStatus('current')
pacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110), )
if mibBuilder.loadTexts: pacConfigTable.setStatus('current')
pacConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacConfPortId"))
if mibBuilder.loadTexts: pacConfigTableEntry.setStatus('current')
pacConfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacConfPortId.setStatus('current')
pacConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("forceAuthorized", 1), ("macLocking", 2), ("radiusMacAuthentication", 3), ("ieee8021xAuthentication", 4), ("forceUnauthorized", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacConfMode.setStatus('current')
pacConfMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacConfMaxMacCount.setStatus('current')
pacMacLockingTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120), )
if mibBuilder.loadTexts: pacMacLockingTable.setStatus('current')
pacMacLockTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacMacLockPortId"))
if mibBuilder.loadTexts: pacMacLockTableEntry.setStatus('current')
pacMacLockPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacMacLockPortId.setStatus('current')
pacMacLockEnable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable1.setStatus('current')
pacMacLockEnable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable2.setStatus('current')
pacMacLockEnable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable3.setStatus('current')
pacMacLockEnable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable4.setStatus('current')
pacMacLockLearn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn1.setStatus('current')
pacMacLockLearn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn2.setStatus('current')
pacMacLockLearn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn3.setStatus('current')
pacMacLockLearn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn4.setStatus('current')
pacLockedMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac1.setStatus('current')
pacLockedMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac2.setStatus('current')
pacLockedMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 12), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac3.setStatus('current')
pacLockedMac4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 13), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac4.setStatus('current')
igmps = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13))
igmpsSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsSupport.setStatus('current')
igmpsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsEnable.setStatus('current')
igmpsFastLeave = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsFastLeave.setStatus('current')
igmpsReportAggregation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsReportAggregation.setStatus('current')
igmpsFloodingUnregPack = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsFloodingUnregPack.setStatus('current')
igmpsMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsMaxGroupLimit.setStatus('current')
igmpsGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsGroupLimit.setStatus('current')
igmpsGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupNumber.setStatus('current')
igmpsRouterDetection = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("discovery", 1), ("query", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsRouterDetection.setStatus('current')
igmpsGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsGroupMembershipInterval.setStatus('current')
igmpsMaximumResposeTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsMaximumResposeTime.setStatus('current')
igmpsLastMemeberQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 175))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsLastMemeberQueryTime.setStatus('current')
igmpsNeighborDeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 554))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsNeighborDeadInterval.setStatus('current')
igmpsRouterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsRouterAgingTime.setStatus('current')
igmpsRxMessageGeneralQuery = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageGeneralQuery.setStatus('current')
igmpsRxMessageSpecificQuery = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageSpecificQuery.setStatus('current')
igmpsRxMessageReport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageReport.setStatus('current')
igmpsRxMessageLeave = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageLeave.setStatus('current')
igmpsRxMessageAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageAdvertisement.setStatus('current')
igmpsRxMessageTermination = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageTermination.setStatus('current')
igmpsTxMessageSolicitation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsTxMessageSolicitation.setStatus('current')
igmpsCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("reset", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsCounterReset.setStatus('current')
igmpsPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30), )
if mibBuilder.loadTexts: igmpsPortTable.setStatus('current')
igmpsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "igmpsPortId"))
if mibBuilder.loadTexts: igmpsPortTableEntry.setStatus('current')
igmpsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsPortId.setStatus('current')
igmpsPortSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsPortSnooping.setStatus('current')
igmpsPortStaticRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsPortStaticRouter.setStatus('current')
igmpsPortDynamicRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("detected", 1), ("undetected", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsPortDynamicRouter.setStatus('current')
igmpsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40), )
if mibBuilder.loadTexts: igmpsGroupTable.setStatus('current')
igmpsGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "igmpsGroupId"))
if mibBuilder.loadTexts: igmpsGroupTableEntry.setStatus('current')
igmpsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupId.setStatus('current')
igmpsGroupMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMac.setStatus('current')
igmpsGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupVlanId.setStatus('current')
igmpsGroupTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupTimestamp.setStatus('current')
igmpsGroupLeaveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("set", 1), ("unset", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupLeaveFlag.setStatus('current')
igmpsGroupMemberPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort1.setStatus('current')
igmpsGroupMemberPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort2.setStatus('current')
igmpsGroupMemberPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort3.setStatus('current')
igmpsGroupMemberPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort4.setStatus('current')
igmpsGroupMemberPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort5.setStatus('current')
igmpsGroupMemberPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort6.setStatus('current')
igmpsGroupMemberPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort7.setStatus('current')
igmpsGroupMemberPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort8.setStatus('current')
igmpsGroupMemberPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort9.setStatus('current')
igmpsGroupMemberPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort10.setStatus('current')
igmpsGroupMemberPort11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort11.setStatus('current')
igmpsGroupMemberPort12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort12.setStatus('current')
igmpsGroupMemberPort13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort13.setStatus('current')
igmpsGroupMemberPort14 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort14.setStatus('current')
igmpsGroupMemberPort15 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort15.setStatus('current')
igmpsGroupMemberPort16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort16.setStatus('current')
igmpsGroupMemberPort17 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort17.setStatus('current')
igmpsGroupMemberPort18 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort18.setStatus('current')
igmpsGroupMemberPort19 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort19.setStatus('current')
igmpsGroupMemberPort20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort20.setStatus('current')
igmpsGroupMemberPort21 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort21.setStatus('current')
igmpsGroupMemberPort22 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort22.setStatus('current')
igmpsGroupMemberPort23 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort23.setStatus('current')
igmpsGroupMemberPort24 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort24.setStatus('current')
rtc = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15))
rtcSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSupport.setStatus('current')
rtcFlags = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("sntpenabled", 1), ("dstenabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcFlags.setStatus('current')
rtcLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcLocalTime.setStatus('current')
rtcManualTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcManualTime.setStatus('current')
rtcTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("unset", 1), ("manuallyset", 2), ("synchronized", 3), ("unsynchronized", 4), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcTimeStatus.setStatus('current')
rtcTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcTimezoneOffset.setStatus('current')
rtcDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTOffset.setStatus('current')
rtcDSTbegin = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTbegin.setStatus('current')
rtcDSTend = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTend.setStatus('current')
rtcDSTstatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("isdst", 1), ("isnotdst", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcDSTstatus.setStatus('current')
rtcSNTPsyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPsyncInterval.setStatus('current')
rtcSNTPsyncNow = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("syncNow", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPsyncNow.setStatus('current')
rtcSNTPServerCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerCount.setStatus('current')
rtcSNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20), )
if mibBuilder.loadTexts: rtcSNTPServerTable.setStatus('current')
rtcSNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "rtcSNTPServerId"))
if mibBuilder.loadTexts: rtcSNTPServerTableEntry.setStatus('current')
rtcSNTPServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerId.setStatus('current')
rtcSNTPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 255))).clone(namedValues=NamedValues(("ok", 0), ("busy", 1), ("timeout", 2), ("nomemory", 3), ("portbusy", 4), ("alarm", 5), ("unknown", 7), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerStatus.setStatus('current')
rtcSNTPServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPServerEnable.setStatus('current')
rtcSNTPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPServerIpAddress.setStatus('current')
consoleinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20))
consoleSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleSupport.setStatus('current')
consoleEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleEnable.setStatus('current')
consoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleTimeout.setStatus('current')
consoleApplyMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyAndSaveImmediately", 1), ("saveManually", 2), ("applyAndSaveManually", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleApplyMode.setStatus('current')
consolePrompt = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePrompt.setStatus('current')
webinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21))
webSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webSupport.setStatus('current')
webEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webEnable.setStatus('current')
snmpinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22))
snmpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSupport.setStatus('current')
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
snmpApplyMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyAndSaveImmediately", 1), ("saveManually", 2), ("applyAndSaveManually", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpApplyMode.setStatus('current')
snmpApply = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normalOperation", 0), ("applyNow", 1), ("applyAndSaveNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpApply.setStatus('current')
snmpTrapTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 255))).clone(namedValues=NamedValues(("inactive", 0), ("genColdstart", 1), ("genWarmstart", 2), ("genLinkdown", 3), ("genLinkup", 4), ("genAuthfailure", 5), ("genEgpneighborloss", 6), ("entLinkchange", 7), ("entFactoryreset", 8), ("entTemplevelchange", 9), ("entErrorcounter", 10), ("entOverundervoltage", 11), ("entTempshutdown", 12), ("entPoelimitexceeded", 13), ("entSupplystatuschange", 14), ("entSfpplugchange", 15), ("entLoginfailure", 16), ("entRingbroken", 17), ("entRingalarm", 18), ("entAuthpwfail", 19), ("entPrivpwfail", 20), ("entAccesspermission", 21), ("entSeclevelfail", 22), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapTest.setStatus('current')
snmpTrapDestCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestCount.setStatus('current')
snmpCommunityRead = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityRead.setStatus('current')
snmpCommunityWrite = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityWrite.setStatus('current')
snmpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnable.setStatus('current')
snmpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10), )
if mibBuilder.loadTexts: snmpTrapDestTable.setStatus('current')
snmpTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "snmpTrapDestId"))
if mibBuilder.loadTexts: snmpTrapDestTableEntry.setStatus('current')
snmpTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestId.setStatus('current')
snmpTrapDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestAlias.setStatus('current')
snmpTrapDestEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disabled", 0), ("v1", 1), ("v2C", 2), ("v3", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestEn.setStatus('current')
snmpTrapDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestIP.setStatus('current')
snmpTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestCommunity.setStatus('current')
snmpTrapGenColdstart = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenColdstart.setStatus('current')
snmpTrapGenWarmstart = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapGenWarmstart.setStatus('current')
snmpTrapGenLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenLinkDown.setStatus('current')
snmpTrapGenLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenLinkUp.setStatus('current')
snmpTrapGenAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenAuthFailure.setStatus('current')
snmpTrapGenEgpNeighborLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapGenEgpNeighborLoss.setStatus('current')
snmpTrapEntLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntLinkChange.setStatus('current')
snmpTrapEntFactoryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntFactoryReset.setStatus('current')
snmpTrapEntTemperatureLevelChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntTemperatureLevelChange.setStatus('current')
snmpTrapEntErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntErrorCounter.setStatus('current')
snmpTrapEntUnderOverVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntUnderOverVoltage.setStatus('current')
snmpTrapEntTempShutDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntTempShutDown.setStatus('current')
snmpTrapEntPoeLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntPoeLimitExceeded.setStatus('current')
snmpTrapEntSupplyStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSupplyStatusChange.setStatus('current')
snmpTrapEntSfpPlugChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSfpPlugChange.setStatus('current')
snmpTrapEntLoginFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntLoginFailure.setStatus('current')
snmpTrapEntRingBroken = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntRingBroken.setStatus('current')
snmpTrapEntRingAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntRingAlarm.setStatus('current')
snmpTrapEntAuthPwFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntAuthPwFail.setStatus('current')
snmpTrapEntPrivPwFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntPrivPwFail.setStatus('current')
snmpTrapEntAccessPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntAccessPermission.setStatus('current')
snmpTrapEntSeclevelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSeclevelFail.setStatus('current')
udpinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23))
udpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpSupport.setStatus('current')
udpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpEnable.setStatus('current')
syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24))
syslogSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSupport.setStatus('current')
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogMessageTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("inactive", 0), ("sendmessage", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMessageTest.setStatus('current')
syslogDestCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDestCount.setStatus('current')
syslogDestTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10), )
if mibBuilder.loadTexts: syslogDestTable.setStatus('current')
syslogDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "syslogDestId"))
if mibBuilder.loadTexts: syslogDestTableEntry.setStatus('current')
syslogDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDestId.setStatus('current')
syslogDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestAlias.setStatus('current')
syslogDestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestEnable.setStatus('current')
syslogDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestIpAddress.setStatus('current')
syslogDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestPort.setStatus('current')
syslogDestFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("kernelMessage", 0), ("userLevelMessage", 1), ("mailSystem", 2), ("systemDaemon", 3), ("securityMessage1", 4), ("syslogdMessage", 5), ("linePrinterSubsystem", 6), ("networkNewsSubsystem", 7), ("uucpSubsystem", 8), ("clockDeamon1", 9), ("securityMessage2", 10), ("ftpDeamon", 11), ("ntpSubsystem", 12), ("logAudit", 13), ("logAlert", 14), ("clockDeamon2", 15), ("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestFacility.setStatus('current')
syslogDestEventFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 7), Bits().clone(namedValues=NamedValues(("reset", 0), ("linkchange", 1), ("configchange", 2), ("login", 3), ("firmwareupdate", 4), ("powerredundancy", 5), ("portauth", 6), ("temperature", 7), ("ring", 8), ("sfp", 9), ("poe", 10), ("rtc", 11), ("vct", 12), ("debug", 29), ("statusreport", 30), ("test", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestEventFilter.setStatus('current')
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25))
radiusSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSupport.setStatus('current')
radiusAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccessEnable.setStatus('current')
radiusAccountEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountEnable.setStatus('current')
radiusServerCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerCount.setStatus('current')
radiusMacAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMacAuthPassword.setStatus('current')
radiusUseMacAsPassword = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusUseMacAsPassword.setStatus('current')
radiusMacSeparator = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMacSeparator.setStatus('current')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
radiusServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "radiusServerId"))
if mibBuilder.loadTexts: radiusServerTableEntry.setStatus('current')
radiusServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerId.setStatus('current')
radiusServerAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAlias.setStatus('current')
radiusServerEnableAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnableAccess.setStatus('current')
radiusServerEnableAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnableAccount.setStatus('current')
radiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIpAddress.setStatus('current')
radiusServerAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccessPort.setStatus('current')
radiusServerAccountPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccountPort.setStatus('current')
radiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSecret.setStatus('current')
supply = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30))
supplyCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyCount.setStatus('current')
supplyTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10), )
if mibBuilder.loadTexts: supplyTable.setStatus('current')
supplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "supplyId"))
if mibBuilder.loadTexts: supplyTableEntry.setStatus('current')
supplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyId.setStatus('current')
supplyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("used", 1), ("unused", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supplyUsed.setStatus('current')
supplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyStatus.setStatus('current')
poepse = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31))
poepseSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseSupport.setStatus('current')
poepseEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseEnable.setStatus('current')
poepseTotalInputPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseTotalInputPower.setStatus('current')
poepseMaxInputPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseMaxInputPower.setStatus('current')
poepseDeviceSupplyPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseDeviceSupplyPower.setStatus('current')
pseAvailablePower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseAvailablePower.setStatus('current')
poepseExtendedVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseExtendedVoltage.setStatus('current')
poepsePortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10), )
if mibBuilder.loadTexts: poepsePortTable.setStatus('current')
poepsePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "poepsePortId"))
if mibBuilder.loadTexts: poepsePortTableEntry.setStatus('current')
poepsePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortId.setStatus('current')
poepsePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("poe8023af", 1), ("poeForced", 2), ("poeDisabled", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMode.setStatus('current')
poepsePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("off", 0), ("discovering", 1), ("powered", 2), ("fault", 3), ("disabled", 4), ("overcurrent", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortStatus.setStatus('current')
poepsePortMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMaxPower.setStatus('current')
poepsePortMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortMeasuredPower.setStatus('current')
poepsePortMaxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMaxClass.setStatus('current')
poepsePortDetectedClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortDetectedClass.setStatus('current')
poepsePortMeasuredVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortMeasuredVoltage.setStatus('current')
poepd = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 32))
poepdSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepdSupport.setStatus('current')
hardwarecode = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33))
hardwarecodeSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarecodeSupport.setStatus('current')
hardwarecodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarecodeNumber.setStatus('current')
spanningtree = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34))
stpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpSupport.setStatus('current')
stpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEnable.setStatus('current')
msSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100))
linkChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 1)).setObjects(("MS-SWITCH30-MIB", "portStatusId"), ("MS-SWITCH30-MIB", "portStatusLink"))
if mibBuilder.loadTexts: linkChangeNotification.setStatus('current')
factoryResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 2))
if mibBuilder.loadTexts: factoryResetNotification.setStatus('current')
temperatureLevelChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 3)).setObjects(("MS-SWITCH30-MIB", "deviceTemperatureLevel"))
if mibBuilder.loadTexts: temperatureLevelChangeNotification.setStatus('current')
errorcountNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 4)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: errorcountNotification.setStatus('current')
underOverVoltageNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 5)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: underOverVoltageNotification.setStatus('current')
temperatureShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 6))
if mibBuilder.loadTexts: temperatureShutdownNotification.setStatus('current')
portPoELimitExceededNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 7)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: portPoELimitExceededNotification.setStatus('current')
powerSupplyStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 8)).setObjects(("MS-SWITCH30-MIB", "supplyId"))
if mibBuilder.loadTexts: powerSupplyStatusChangeNotification.setStatus('current')
sfpPlugChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 9)).setObjects(("MS-SWITCH30-MIB", "sfpPortnumber"), ("MS-SWITCH30-MIB", "sfpDetect"))
if mibBuilder.loadTexts: sfpPlugChangeNotification.setStatus('current')
loginFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 10))
if mibBuilder.loadTexts: loginFailureNotification.setStatus('current')
ringBrokenNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 11)).setObjects(("MS-SWITCH30-MIB", "ringNumber"), ("MS-SWITCH30-MIB", "portStatusId"), ("MS-SWITCH30-MIB", "portStatusLink"))
if mibBuilder.loadTexts: ringBrokenNotification.setStatus('current')
ringAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 12)).setObjects(("MS-SWITCH30-MIB", "ringNumber"), ("MS-SWITCH30-MIB", "ringStatus"), ("MS-SWITCH30-MIB", "ringAlarmDuration"))
if mibBuilder.loadTexts: ringAlarmNotification.setStatus('current')
snmpv3AuthenticationPwFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 13))
if mibBuilder.loadTexts: snmpv3AuthenticationPwFailNotification.setStatus('current')
snmpv3PrivacyPwFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 14))
if mibBuilder.loadTexts: snmpv3PrivacyPwFailNotification.setStatus('current')
snmpv3AccessPermissionNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 15))
if mibBuilder.loadTexts: snmpv3AccessPermissionNotification.setStatus('current')
snmpv3SeclevelFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 16))
if mibBuilder.loadTexts: snmpv3SeclevelFailNotification.setStatus('current')
mibBuilder.exportSymbols("MS-SWITCH30-MIB", vlanMemberPort23=vlanMemberPort23, igmpsGroupTimestamp=igmpsGroupTimestamp, vlanPortMode=vlanPortMode, vlanMemberPort7=vlanMemberPort7, pacFallbackRequestEnable=pacFallbackRequestEnable, vlanMemberPort21=vlanMemberPort21, pacSupport=pacSupport, poepsePortMaxPower=poepsePortMaxPower, vlanMemberPort18=vlanMemberPort18, deviceFddActiveTime=deviceFddActiveTime, igmpsGroupMemberPort5=igmpsGroupMemberPort5, radius=radius, vlanMemberPort1=vlanMemberPort1, vlanMemberPort20=vlanMemberPort20, pacStatUserStatus4=pacStatUserStatus4, igmpsGroupMemberPort12=igmpsGroupMemberPort12, igmpsGroupMemberPort19=igmpsGroupMemberPort19, igmpsGroupMemberPort11=igmpsGroupMemberPort11, radiusAccountEnable=radiusAccountEnable, radiusServerAccountPort=radiusServerAccountPort, poepsePortMeasuredVoltage=poepsePortMeasuredVoltage, msSwitchNotifications=msSwitchNotifications, vlanFilterTableEntry=vlanFilterTableEntry, igmpsNeighborDeadInterval=igmpsNeighborDeadInterval, vlanMemberPort14=vlanMemberPort14, snmpTrapEntSfpPlugChange=snmpTrapEntSfpPlugChange, poepseMaxInputPower=poepseMaxInputPower, igmpsGroupMemberPort14=igmpsGroupMemberPort14, ringAlarmDuration=ringAlarmDuration, couplingredPartnerStatus=couplingredPartnerStatus, radiusTimeout=radiusTimeout, agentStoreConfigToStorageMediaCard=agentStoreConfigToStorageMediaCard, syslogDestEventFilter=syslogDestEventFilter, snmpTrapEntRingAlarm=snmpTrapEntRingAlarm, vlanMemberPort19=vlanMemberPort19, rtcSNTPsyncInterval=rtcSNTPsyncInterval, pacSupplicantTimeout=pacSupplicantTimeout, rtcLocalTime=rtcLocalTime, pacConfMode=pacConfMode, syslogDestAlias=syslogDestAlias, pacConfPortId=pacConfPortId, sfpVoltage=sfpVoltage, portStatusSpeed=portStatusSpeed, igmpsMaxGroupLimit=igmpsMaxGroupLimit, igmpsRxMessageGeneralQuery=igmpsRxMessageGeneralQuery, agent=agent, snmpTrapDestTableEntry=snmpTrapDestTableEntry, sfpTable=sfpTable, snmpinterface=snmpinterface, deviceContact=deviceContact, syslogSupport=syslogSupport, poepsePortTable=poepsePortTable, snmpEnable=snmpEnable, couplingredPort=couplingredPort, vlanMemberPort5=vlanMemberPort5, igmpsGroupMemberPort2=igmpsGroupMemberPort2, agentSubnetMask=agentSubnetMask, vlanMemberPort9=vlanMemberPort9, prioDiffservId=prioDiffservId, underOverVoltageNotification=underOverVoltageNotification, syslogDestTable=syslogDestTable, portStatusType=portStatusType, snmpTrapEntErrorCounter=snmpTrapEntErrorCounter, agentStorageMediaCardMac=agentStorageMediaCardMac, igmpsGroupMemberPort23=igmpsGroupMemberPort23, radiusServerTable=radiusServerTable, deviceUpTime=deviceUpTime, pacFallbackMaxRejects=pacFallbackMaxRejects, snmpTrapDestTable=snmpTrapDestTable, hardwarecodeNumber=hardwarecodeNumber, couplingredPartnerIp=couplingredPartnerIp, igmpsGroupMemberPort17=igmpsGroupMemberPort17, pacStatUserIp4=pacStatUserIp4, monitorSource=monitorSource, igmpsRxMessageSpecificQuery=igmpsRxMessageSpecificQuery, radiusServerSecret=radiusServerSecret, vlanUnauthVID=vlanUnauthVID, snmpTrapEntFactoryReset=snmpTrapEntFactoryReset, ringPortA=ringPortA, agentConfigReset=agentConfigReset, webEnable=webEnable, pacStatUserStatus1=pacStatUserStatus1, vlanFilterTable=vlanFilterTable, spanningtree=spanningtree, vlan=vlan, vlanFilterEnable=vlanFilterEnable, sfpAlarms=sfpAlarms, prioQueueCount=prioQueueCount, igmpsGroupMemberPort24=igmpsGroupMemberPort24, pacMacLockLearn3=pacMacLockLearn3, snmpTrapGenColdstart=snmpTrapGenColdstart, igmpsReportAggregation=igmpsReportAggregation, pacMacLockingTable=pacMacLockingTable, snmpTrapEntRingBroken=snmpTrapEntRingBroken, rtcTimezoneOffset=rtcTimezoneOffset, syslogDestTableEntry=syslogDestTableEntry, pacReauthTime=pacReauthTime, relaisMode=relaisMode, monitorMode=monitorMode, supplyTableEntry=supplyTableEntry, pacStatUserMac2=pacStatUserMac2, snmpSupport=snmpSupport, agentFirmware=agentFirmware, deviceHardware=deviceHardware, managedSwitches=managedSwitches, portStatusTableEntry=portStatusTableEntry, radiusAccessEnable=radiusAccessEnable, supplyTable=supplyTable, vlanPortFlags=vlanPortFlags, igmpsTxMessageSolicitation=igmpsTxMessageSolicitation, radiusServerId=radiusServerId, stpSupport=stpSupport, syslogDestId=syslogDestId, igmpsGroupTableEntry=igmpsGroupTableEntry, agentConfigEnableFactoryButton=agentConfigEnableFactoryButton, prioDiffservEnable=prioDiffservEnable, prioIeeeTagQueue=prioIeeeTagQueue, pacLockedMac4=pacLockedMac4, webinterface=webinterface, vlanDefaultPriority=vlanDefaultPriority, ringBrokenNotification=ringBrokenNotification, snmpTrapGenWarmstart=snmpTrapGenWarmstart, radiusUseMacAsPassword=radiusUseMacAsPassword, igmpsFastLeave=igmpsFastLeave, rtcSNTPServerEnable=rtcSNTPServerEnable, snmpCommunityRead=snmpCommunityRead, sfpPlugChangeNotification=sfpPlugChangeNotification, pacMacLockLearn2=pacMacLockLearn2, pacMacLockPortId=pacMacLockPortId, portConfigTableEntry=portConfigTableEntry, igmpsGroupMemberPort18=igmpsGroupMemberPort18, prioPortTable=prioPortTable, vlanForceDefaultVID=vlanForceDefaultVID, prioDiffservTableEntry=prioDiffservTableEntry, pacStatUserMac4=pacStatUserMac4, prioPortEnable=prioPortEnable, pacLockedMac2=pacLockedMac2, snmpTrapTest=snmpTrapTest, loginFailureNotification=loginFailureNotification, igmpsGroupMemberPort1=igmpsGroupMemberPort1, igmpsGroupMemberPort21=igmpsGroupMemberPort21, pacStatPortStatus=pacStatPortStatus, snmpTrapEntAuthPwFail=snmpTrapEntAuthPwFail, sfpPortnumber=sfpPortnumber, igmpsCounterReset=igmpsCounterReset, vlanPortTable=vlanPortTable, ring=ring, device=device, monitorSupport=monitorSupport, igmpsGroupMemberPort22=igmpsGroupMemberPort22, vlanSupport=vlanSupport, poepseDeviceSupplyPower=poepseDeviceSupplyPower, udpEnable=udpEnable, pacStatUserName1=pacStatUserName1, sfpCount=sfpCount, portConfigTable=portConfigTable, sfpTxPower=sfpTxPower, rtcManualTime=rtcManualTime, sfpDetect=sfpDetect, vlanMemberPort22=vlanMemberPort22, agentSecureAddressFlag=agentSecureAddressFlag, ringMode=ringMode, vlanFilterVID=vlanFilterVID, snmpApplyMode=snmpApplyMode, prioPortTableEntry=prioPortTableEntry, microsens=microsens, portConfigFarEndFault=portConfigFarEndFault, poepse=poepse, pacMaxNumberOfAllowedHostsPerPort=pacMaxNumberOfAllowedHostsPerPort, consoleSupport=consoleSupport, snmpv3AccessPermissionNotification=snmpv3AccessPermissionNotification, poepsePortTableEntry=poepsePortTableEntry, igmpsLastMemeberQueryTime=igmpsLastMemeberQueryTime, igmpsGroupMemberPort8=igmpsGroupMemberPort8, snmpTrapEntPoeLimitExceeded=snmpTrapEntPoeLimitExceeded, vlanMemberPort17=vlanMemberPort17, deviceLocation=deviceLocation, igmps=igmps, ringCount=ringCount, deviceFddPassiveTime=deviceFddPassiveTime, pacUnauthVID=pacUnauthVID, consoleTimeout=consoleTimeout, agentIpAddress=agentIpAddress, snmpTrapEntUnderOverVoltage=snmpTrapEntUnderOverVoltage, consoleinterface=consoleinterface, radiusServerAlias=radiusServerAlias, portConfigEnable=portConfigEnable, pacStatUserName3=pacStatUserName3, prioQueueScheme=prioQueueScheme, syslogEnable=syslogEnable, relaisSupport=relaisSupport, portStatusTxNetload=portStatusTxNetload, igmpsMaximumResposeTime=igmpsMaximumResposeTime, webSupport=webSupport, supplyId=supplyId, igmpsSupport=igmpsSupport, syslogDestCount=syslogDestCount, ringNumber=ringNumber, igmpsGroupMac=igmpsGroupMac, vlanFilterEnhId=vlanFilterEnhId, igmpsGroupMemberPort6=igmpsGroupMemberPort6, sfpVendor=sfpVendor, portConfigAdvertise=portConfigAdvertise, sfpTemperature=sfpTemperature, igmpsRxMessageLeave=igmpsRxMessageLeave, portStatusPinout=portStatusPinout, agentGateway=agentGateway, portStatusId=portStatusId, sfpVendorSerialnumber=sfpVendorSerialnumber, snmpTrapEntTemperatureLevelChange=snmpTrapEntTemperatureLevelChange, poepseEnable=poepseEnable, prioSupport=prioSupport, pacMacLockEnable1=pacMacLockEnable1, pacStatPortMode=pacStatPortMode, vlanMemberPort4=vlanMemberPort4, poepsePortDetectedClass=poepsePortDetectedClass, portConfigSpeed=portConfigSpeed, snmpTrapDestAlias=snmpTrapDestAlias, pacEnable=pacEnable, vlanMemberPort12=vlanMemberPort12, igmpsGroupMemberPort15=igmpsGroupMemberPort15, rtcTimeStatus=rtcTimeStatus, poepdSupport=poepdSupport, vlanDefaultVID=vlanDefaultVID, portConfigDuplex=portConfigDuplex, deviceName=deviceName, couplingredMode=couplingredMode, consoleApplyMode=consoleApplyMode, rtcSNTPServerTableEntry=rtcSNTPServerTableEntry, portStatusRxNetload=portStatusRxNetload, poepsePortMeasuredPower=poepsePortMeasuredPower, monitor=monitor, agentStorageMediaCardStatus=agentStorageMediaCardStatus, igmpsGroupId=igmpsGroupId, sfpSupport=sfpSupport, rtcSNTPServerCount=rtcSNTPServerCount, pacStatUserMac1=pacStatUserMac1, stpEnable=stpEnable, pacReauthEnable=pacReauthEnable, relaisCount=relaisCount, powerSupplyStatusChangeNotification=powerSupplyStatusChangeNotification, radiusSupport=radiusSupport, relaisTableEntry=relaisTableEntry, agentMacAddress=agentMacAddress, vlanMemberPort6=vlanMemberPort6, igmpsGroupNumber=igmpsGroupNumber, snmpApply=snmpApply, ringTableEntry=ringTableEntry, syslog=syslog, vlanMemberPort15=vlanMemberPort15, syslogDestEnable=syslogDestEnable, couplingredSupport=couplingredSupport, rtcDSTbegin=rtcDSTbegin, port=port)
mibBuilder.exportSymbols("MS-SWITCH30-MIB", igmpsPortDynamicRouter=igmpsPortDynamicRouter, poepseTotalInputPower=poepseTotalInputPower, supplyStatus=supplyStatus, radiusServerTableEntry=radiusServerTableEntry, snmpv3SeclevelFailNotification=snmpv3SeclevelFailNotification, snmpTrapEnable=snmpTrapEnable, prioPortQueue=prioPortQueue, linkChangeNotification=linkChangeNotification, couplingredValidationFlag=couplingredValidationFlag, rtcDSTend=rtcDSTend, portaccessctrl=portaccessctrl, vlanMemberPort11=vlanMemberPort11, consolePrompt=consolePrompt, agentStorageMediaCardBoot=agentStorageMediaCardBoot, pacStatPortId=pacStatPortId, poepsePortMaxClass=poepsePortMaxClass, portStatusDuplex=portStatusDuplex, igmpsFloodingUnregPack=igmpsFloodingUnregPack, vlanMemberPort24=vlanMemberPort24, sfpVendorPartnumber=sfpVendorPartnumber, radiusServerEnableAccount=radiusServerEnableAccount, deviceInventory=deviceInventory, poepseExtendedVoltage=poepseExtendedVoltage, pacConfigTableEntry=pacConfigTableEntry, pacStatUserName4=pacStatUserName4, portConfigId=portConfigId, igmpsEnable=igmpsEnable, pacLockedMac3=pacLockedMac3, poepseSupport=poepseSupport, igmpsPortTable=igmpsPortTable, igmpsRxMessageAdvertisement=igmpsRxMessageAdvertisement, pacStatUserMac3=pacStatUserMac3, ringSupport=ringSupport, supply=supply, syslogDestPort=syslogDestPort, portStatusFarEndFault=portStatusFarEndFault, igmpsGroupMemberPort4=igmpsGroupMemberPort4, pacFallbackRejectsEnable=pacFallbackRejectsEnable, couplingred=couplingred, temperatureLevelChangeNotification=temperatureLevelChangeNotification, vlanFilterCount=vlanFilterCount, radiusServerCount=radiusServerCount, portConfigFlowControl=portConfigFlowControl, vlanMemberPort13=vlanMemberPort13, snmpTrapGenLinkDown=snmpTrapGenLinkDown, igmpsPortStaticRouter=igmpsPortStaticRouter, igmpsGroupLeaveFlag=igmpsGroupLeaveFlag, rtcSNTPServerStatus=rtcSNTPServerStatus, pacMacLockLearn1=pacMacLockLearn1, igmpsGroupMemberPort3=igmpsGroupMemberPort3, vlanFilterEnhTableEntry=vlanFilterEnhTableEntry, sfpDiagnostic=sfpDiagnostic, PYSNMP_MODULE_ID=mib3, syslogMessageTest=syslogMessageTest, portConfigPinout=portConfigPinout, ringPortB=ringPortB, pacMacLockLearn4=pacMacLockLearn4, syslogDestIpAddress=syslogDestIpAddress, snmpv3AuthenticationPwFailNotification=snmpv3AuthenticationPwFailNotification, pacStatUserStatus2=pacStatUserStatus2, prioIeeeTagTable=prioIeeeTagTable, deviceTemperature=deviceTemperature, rtcSNTPServerIpAddress=rtcSNTPServerIpAddress, pseAvailablePower=pseAvailablePower, pacFallbackRequestTimeout=pacFallbackRequestTimeout, deviceArtNo=deviceArtNo, prioPortId=prioPortId, radiusMacSeparator=radiusMacSeparator, portStatusFlowControl=portStatusFlowControl, prioritization=prioritization, poepsePortStatus=poepsePortStatus, udpSupport=udpSupport, portStatusTable=portStatusTable, relaisStatus=relaisStatus, igmpsGroupMemberPort20=igmpsGroupMemberPort20, pacConfigTable=pacConfigTable, igmpsGroupMemberPort16=igmpsGroupMemberPort16, vlanFilterEnhFlags=vlanFilterEnhFlags, vlanVoiceVID=vlanVoiceVID, igmpsRxMessageReport=igmpsRxMessageReport, rtcSNTPServerTable=rtcSNTPServerTable, igmpsPortTableEntry=igmpsPortTableEntry, snmpCommunityWrite=snmpCommunityWrite, snmpTrapDestCommunity=snmpTrapDestCommunity, igmpsRouterAgingTime=igmpsRouterAgingTime, radiusServerAccessPort=radiusServerAccessPort, radiusServerEnableAccess=radiusServerEnableAccess, radiusMacAuthPassword=radiusMacAuthPassword, snmpv3PrivacyPwFailNotification=snmpv3PrivacyPwFailNotification, igmpsGroupTable=igmpsGroupTable, vlanMemberPort8=vlanMemberPort8, sfpRxPower=sfpRxPower, snmpTrapEntPrivPwFail=snmpTrapEntPrivPwFail, snmpTrapEntTempShutDown=snmpTrapEntTempShutDown, pacStatusTable=pacStatusTable, syslogDestFacility=syslogDestFacility, sfpNominalBitrate=sfpNominalBitrate, igmpsGroupMemberPort7=igmpsGroupMemberPort7, vlanFilterId=vlanFilterId, pacUnauthMode=pacUnauthMode, igmpsPortSnooping=igmpsPortSnooping, igmpsGroupLimit=igmpsGroupLimit, relaisTable=relaisTable, udpinterface=udpinterface, consoleEnable=consoleEnable, sfpWarnings=sfpWarnings, igmpsGroupMemberPort10=igmpsGroupMemberPort10, agentIpMode=agentIpMode, poepd=poepd, portCount=portCount, vlanMemberPort16=vlanMemberPort16, rtcDSTstatus=rtcDSTstatus, temperatureShutdownNotification=temperatureShutdownNotification, portConfigAutonego=portConfigAutonego, poepsePortMode=poepsePortMode, hardwarecode=hardwarecode, vlanMemberPort3=vlanMemberPort3, pacStatUserIp2=pacStatUserIp2, relaisAlias=relaisAlias, prioIeeeTagEnable=prioIeeeTagEnable, snmpTrapDestEn=snmpTrapDestEn, mib3=mib3, deviceSerNo=deviceSerNo, vlanFilterAlias=vlanFilterAlias, sfpTxBias=sfpTxBias, vlanEnable=vlanEnable, snmpTrapDestId=snmpTrapDestId, sfpTableEntry=sfpTableEntry, portConfigAlias=portConfigAlias, snmpTrapGenEgpNeighborLoss=snmpTrapGenEgpNeighborLoss, radiusServerIpAddress=radiusServerIpAddress, relaisId=relaisId, sfpConnector=sfpConnector, vlanFilterEnhTable=vlanFilterEnhTable, rtcDSTOffset=rtcDSTOffset, hardwarecodeSupport=hardwarecodeSupport, supplyUsed=supplyUsed, snmpTrapGenLinkUp=snmpTrapGenLinkUp, agentConfigFactoryDefault=agentConfigFactoryDefault, pacStatusTableEntry=pacStatusTableEntry, snmpTrapEntLinkChange=snmpTrapEntLinkChange, deviceTemperatureLevel=deviceTemperatureLevel, prioDiffservTable=prioDiffservTable, snmpTrapEntSupplyStatusChange=snmpTrapEntSupplyStatusChange, snmpTrapEntLoginFailure=snmpTrapEntLoginFailure, rtc=rtc, pacStatUserName2=pacStatUserName2, errorcountNotification=errorcountNotification, vlanMemberManager=vlanMemberManager, igmpsGroupMemberPort9=igmpsGroupMemberPort9, prioIeeeTagTableEntry=prioIeeeTagTableEntry, poepsePortId=poepsePortId, ringAlarmNotification=ringAlarmNotification, igmpsGroupMembershipInterval=igmpsGroupMembershipInterval, pacConfMaxMacCount=pacConfMaxMacCount, portPoELimitExceededNotification=portPoELimitExceededNotification, couplingredStatus=couplingredStatus, portStatusLink=portStatusLink, deviceGroup=deviceGroup, pacStatUserStatus3=pacStatUserStatus3, igmpsRxMessageTermination=igmpsRxMessageTermination, vlanMemberPort10=vlanMemberPort10, pacMacLockTableEntry=pacMacLockTableEntry, rtcFlags=rtcFlags, igmpsGroupMemberPort13=igmpsGroupMemberPort13, igmpsGroupVlanId=igmpsGroupVlanId, vlanMemberPort2=vlanMemberPort2, vlanRstpVID=vlanRstpVID, portConfigFibreDownDetection=portConfigFibreDownDetection, rtcSNTPServerId=rtcSNTPServerId, snmpTrapEntSeclevelFail=snmpTrapEntSeclevelFail, pacStatUserIp3=pacStatUserIp3, pacMacLockEnable2=pacMacLockEnable2, pacStatUserIp1=pacStatUserIp1, vlanPortId=vlanPortId, supplyCount=supplyCount, vlanFilterEnhPriOverride=vlanFilterEnhPriOverride, pacMacLockEnable3=pacMacLockEnable3, rtcSNTPsyncNow=rtcSNTPsyncNow, ringTable=ringTable, factoryResetNotification=factoryResetNotification, vlanPortTableEntry=vlanPortTableEntry, ringId=ringId, snmpTrapEntAccessPermission=snmpTrapEntAccessPermission, sfpId=sfpId, rtcSupport=rtcSupport, snmpTrapDestCount=snmpTrapDestCount, pacMacLockEnable4=pacMacLockEnable4, ringStatus=ringStatus, igmpsRouterDetection=igmpsRouterDetection, prioDiffservQueue=prioDiffservQueue, sfp=sfp, snmpTrapDestIP=snmpTrapDestIP, relais=relais, deviceDescription=deviceDescription, igmpsPortId=igmpsPortId, snmpTrapGenAuthFailure=snmpTrapGenAuthFailure, pacLockedMac1=pacLockedMac1, prioIeeeTagId=prioIeeeTagId, monitorDestination=monitorDestination)
