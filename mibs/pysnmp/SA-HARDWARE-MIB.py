#
# PySNMP MIB module SA-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SA-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, NotificationType, Gauge32, MibIdentifier, TimeTicks, enterprises, ObjectIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "NotificationType", "Gauge32", "MibIdentifier", "TimeTicks", "enterprises", "ObjectIdentity", "iso", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sa = MibIdentifier((1, 3, 6, 1, 4, 1, 1429))
saVoip = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 78))
saHardware = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 78, 4))
saHardware.setRevisions(('2015-05-11 00:00', '2015-04-13 00:00', '2015-04-03 00:00', '2015-01-14 00:00', '1901-12-15 00:00', '2014-11-20 00:00', '2014-07-31 00:00', '1904-06-14 00:00', '1914-02-11 00:00', '2014-01-13 00:00', '2014-01-10 00:00', '1913-10-17 00:00', '1913-07-04 00:00', '1913-06-07 00:00', '1913-05-30 00:00', '1913-02-06 00:00', '1912-12-05 00:00', '1912-11-28 00:00', '1912-11-07 00:00', '1912-08-23 00:00', '1912-05-08 00:00', '1912-04-10 00:00', '1911-09-02 00:00', '1911-08-19 00:00', '1911-06-13 00:00', '1910-11-16 00:00', '1910-10-26 00:00', '1910-10-18 00:00', '1910-04-27 00:00', '1910-04-07 00:00', '1909-11-05 00:00', '1909-10-05 00:00', '1908-01-17 00:00', '1907-09-20 00:00', '1907-07-16 00:00', '1906-09-11 00:00', '1906-08-07 00:00', '1905-12-02 00:00',))
if mibBuilder.loadTexts: saHardware.setLastUpdated('201505110000Z')
if mibBuilder.loadTexts: saHardware.setOrganization('Cisco Systems Inc.')
saHwDescr = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1))
saHwDescrModel = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrModel.setStatus('current')
saHwDescrHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrHardwareVersion.setStatus('current')
saHwDescrSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrSerialNumber.setStatus('current')
saHwDescrCmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrCmMacAddress.setStatus('current')
saHwDescrManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrManufactureDate.setStatus('current')
saHwDescrPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-switching", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrPowerSupply.setStatus('current')
saHwDescrDiplexer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("north-america-5-42", 1), ("europe-5-65", 2), ("japan", 3), ("korea", 4), ("north-america-85-108", 5), ("europe-5-85", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrDiplexer.setStatus('current')
saHwDescrMainProcessor = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("bcm3349", 1), ("bcm3349kfb", 2), ("bcm3368", 3), ("bcm3381A1", 4), ("bcm3381A2", 5), ("bcm3349ipbg", 6), ("tipuma5", 7), ("bcm3361", 8), ("bcm3378", 9), ("bcm3380", 10), ("tipuma5Tc4800", 11), ("bcm3382", 12), ("bcm3371", 13), ("bcm3379", 14), ("bcm3383", 15), ("puma6", 16), ("puma6MG", 17), ("bcm33843Z", 18), ("puma6-B2", 19), ("puma6MG-B2", 20), ("bcm3384", 21), ("bcm33843E", 22), ("bcm3385", 23), ("puma6-D", 24), ("puma6MG-D", 25), ("bcm3384ZU", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrMainProcessor.setStatus('current')
saHwDescrTuner = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("bcm3419", 1), ("bcm3420", 2), ("bcm3420x3", 3), ("bcm3420iml", 4), ("mt2170", 5), ("bcm3421", 6), ("bcmInternal", 7), ("mxl265", 8), ("mxl265v2", 9), ("mxl267", 10), ("mxl265d", 11), ("mxl267d", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrTuner.setStatus('current')
saHwDescrSlic = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 0), ("le9500b", 1), ("le9500c", 2), ("le9500d", 3), ("le9520ddtc", 4), ("le88276", 5), ("le9530d", 6), ("le9500s", 7), ("le9520s", 8), ("le9540d", 9), ("le9531d", 10), ("zl88702", 11), ("le9541d", 12), ("le9652", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrSlic.setStatus('current')
saHwDescrMemoryMain = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 11), Integer32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrMemoryMain.setStatus('current')
saHwDescrMemoryFlash = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 12), Integer32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrMemoryFlash.setStatus('current')
saHwDescrWirelessType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("ieee80211b", 1), ("ieee80211g", 2), ("ieee80211n", 3), ("ieee80211ac", 4), ("ieee80211n-ieee80211ac", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrWirelessType.setStatus('current')
saHwDescrWirelessChip = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("none", 0), ("bcm4306", 1), ("bcm4318", 2), ("bcm4318E", 3), ("bcm4322", 4), ("bcm43224-dualBand", 5), ("bcm43225-singleBand", 6), ("bcm4313", 7), ("bcm43217", 8), ("bcm43228", 9), ("bcm43217sp-bcm43228sp", 10), ("ath9380", 11), ("ath9580", 12), ("ath9381sp-ath9580sp", 13), ("bcm43228sp-5ghz", 14), ("bcm4331sp", 15), ("bcm43217sp-bcm4331sp", 16), ("bcm4331sp-bcm4331sp", 17), ("bcm43217sp-bcm4360sp", 18), ("bcm4331sp-bcm4360hp", 19), ("bcm43217hp", 20), ("bcm43228hp", 21), ("bcm43217-bcm4360hp", 22), ("bcm43217hp-bcm4331sp", 23), ("bcm43217hp-bcm4360sp", 24), ("bcm4331hp-bcm43217sp", 25), ("bcm4331hp-bcm43228sp", 26), ("bcm4331hp-bcm4331sp", 27), ("bcm4331hp-bcm4331hp", 28), ("bcm4331hp-bcm4360sp", 29), ("bcm4331hp-bcm4360hp", 30), ("ath9381sp-qca9880", 31), ("bcm43228hp-5ghz", 32), ("clr240-cl2330", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrWirelessChip.setStatus('current')
saHwDescrDectType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("north-america", 1), ("europe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrDectType.setStatus('current')
saHwDescrUsbType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("usb11", 1), ("usb20wPLX", 2), ("usb20w3381", 3), ("usb20wPuma5", 4), ("usb203380G", 5), ("usb20wPuma6", 6), ("usb20wPuma6MG", 7), ("usb30wBCM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrUsbType.setStatus('current')
saHwDescrFactoryId = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrFactoryId.setStatus('current')
saHwDescrDmsType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("dms1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrDmsType.setStatus('current')
saHwDescrMocaType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("en2210", 1), ("en2510", 2), ("en2710", 3), ("vxc1030", 4), ("bcm6803", 5), ("ad9965", 6), ("moca20wBCM", 7), ("en2810", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrMocaType.setStatus('current')
saHwDescrEthSwitch = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("bcm5325m", 1), ("marv6095f", 2), ("bcm5325e", 3), ("bcm53115s", 4), ("ar8316", 5), ("bcm53101e", 6), ("bcm53124s", 7), ("marv6172", 8), ("internalBCM", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrEthSwitch.setStatus('current')
saHwDescrIntCount = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101))
saHwDescrIntCountEthernet = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountEthernet.setStatus('current')
saHwDescrIntCountUsb = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountUsb.setStatus('current')
saHwDescrIntCountPhoneLine = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountPhoneLine.setStatus('current')
saHwDescrIntCountMaxBattery = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountMaxBattery.setStatus('current')
saHwDescrIntCountWireless = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountWireless.setStatus('current')
saHwDescrIntCountDect = MibScalar((1, 3, 6, 1, 4, 1, 1429, 78, 4, 1, 101, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saHwDescrIntCountDect.setStatus('current')
mibBuilder.exportSymbols("SA-HARDWARE-MIB", saHwDescrTuner=saHwDescrTuner, saVoip=saVoip, saHwDescrModel=saHwDescrModel, saHwDescrWirelessType=saHwDescrWirelessType, saHwDescrMemoryMain=saHwDescrMemoryMain, saHwDescrSlic=saHwDescrSlic, saHwDescrMocaType=saHwDescrMocaType, saHwDescrIntCountMaxBattery=saHwDescrIntCountMaxBattery, saHwDescr=saHwDescr, saHwDescrIntCountEthernet=saHwDescrIntCountEthernet, saHwDescrPowerSupply=saHwDescrPowerSupply, saHwDescrMemoryFlash=saHwDescrMemoryFlash, saHwDescrIntCountWireless=saHwDescrIntCountWireless, sa=sa, saHwDescrIntCountPhoneLine=saHwDescrIntCountPhoneLine, saHwDescrIntCount=saHwDescrIntCount, saHwDescrMainProcessor=saHwDescrMainProcessor, saHwDescrWirelessChip=saHwDescrWirelessChip, saHwDescrDectType=saHwDescrDectType, PYSNMP_MODULE_ID=saHardware, saHwDescrManufactureDate=saHwDescrManufactureDate, saHwDescrDmsType=saHwDescrDmsType, saHwDescrUsbType=saHwDescrUsbType, saHwDescrHardwareVersion=saHwDescrHardwareVersion, saHwDescrIntCountDect=saHwDescrIntCountDect, saHwDescrEthSwitch=saHwDescrEthSwitch, saHwDescrCmMacAddress=saHwDescrCmMacAddress, saHwDescrDiplexer=saHwDescrDiplexer, saHwDescrFactoryId=saHwDescrFactoryId, saHardware=saHardware, saHwDescrIntCountUsb=saHwDescrIntCountUsb, saHwDescrSerialNumber=saHwDescrSerialNumber)
