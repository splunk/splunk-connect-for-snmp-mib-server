#
# PySNMP MIB module WAG302 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WAG302
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Counter32, TimeTicks, MibIdentifier, Unsigned32, IpAddress, Gauge32, iso, NotificationType, Counter64, ObjectIdentity, Bits, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Counter32", "TimeTicks", "MibIdentifier", "Unsigned32", "IpAddress", "Gauge32", "iso", "NotificationType", "Counter64", "ObjectIdentity", "Bits", "enterprises")
DisplayString, MacAddress, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "RowStatus", "TextualConvention")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
wag302 = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 7))
if mibBuilder.loadTexts: wag302.setLastUpdated('200512131300Z')
if mibBuilder.loadTexts: wag302.setOrganization('NETGEAR Inc.')
lanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1))
apName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apName.setStatus('current')
sysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddress.setStatus('current')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
sysCountryRegion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(784, 8, 51, 32, 40, 36, 31, 56, 100, 48, 96, 68, 76, 112, 84, 124, 756, 152, 156, 170, 188, 196, 203, 276, 208, 214, 12, 218, 233, 818, 724, 246, 250, 826, 268, 300, 320, 344, 340, 191, 348, 360, 372, 376, 356, 364, 352, 380, 400, 392, 408, 410, 414, 398, 422, 438, 440, 442, 428, 504, 492, 807, 446, 470, 484, 458, 528, 578, 554, 512, 591, 604, 608, 586, 616, 630, 620, 634, 642, 643, 682, 752, 702, 703, 705, 222, 760, 764, 788, 792, 780, 158, 804, 840, 858, 860, 862, 704, 887, 710, 716))).clone(namedValues=NamedValues(("unitedArabEmirates", 784), ("albania", 8), ("armenia", 51), ("argentina", 32), ("austria", 40), ("australia", 36), ("azerbaijan", 31), ("belgium", 56), ("bulgaria", 100), ("bahrain", 48), ("brunei", 96), ("bolivia", 68), ("brazil", 76), ("belarus", 112), ("belize", 84), ("canada", 124), ("switzerland", 756), ("chile", 152), ("china", 156), ("colombia", 170), ("costaRica", 188), ("cyprus", 196), ("czechRepublic", 203), ("germany", 276), ("denmark", 208), ("dominicanRepublic", 214), ("algeria", 12), ("ecuador", 218), ("estonia", 233), ("egypt", 818), ("spain", 724), ("finland", 246), ("france", 250), ("unitedKingdom", 826), ("georgia", 268), ("greece", 300), ("guatemala", 320), ("hongkong", 344), ("honduras", 340), ("croatia", 191), ("hungary", 348), ("indonesia", 360), ("ireland", 372), ("israel", 376), ("india", 356), ("iran", 364), ("iceland", 352), ("italy", 380), ("jordan", 400), ("japan", 392), ("northKorea", 408), ("koreaRepublic", 410), ("kuwait", 414), ("kazakhstan", 398), ("lebanon", 422), ("liechtenstein", 438), ("lithuania", 440), ("luxembourg", 442), ("latvia", 428), ("marocco", 504), ("monaco", 492), ("macedonia", 807), ("macau", 446), ("malta", 470), ("mexico", 484), ("malaysia", 458), ("netherlands", 528), ("norway", 578), ("newZealand", 554), ("oman", 512), ("panama", 591), ("peru", 604), ("philippines", 608), ("pakistan", 586), ("poland", 616), ("puertoRico", 630), ("portugal", 620), ("qatar", 634), ("romania", 642), ("russia", 643), ("saudiArabia", 682), ("sweden", 752), ("singapore", 702), ("slovakRepublic", 703), ("slovenia", 705), ("elSalvador", 222), ("syria", 760), ("thailand", 764), ("tunisia", 788), ("turkey", 792), ("trinidadandTobago", 780), ("taiwan", 158), ("ukraine", 804), ("unitedStates", 840), ("uruguay", 858), ("uzbekistan", 860), ("venezuela", 862), ("vietnam", 704), ("yemen", 887), ("southAfrica", 710), ("zimbabwe", 716)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCountryRegion.setStatus('current')
adminName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminName.setStatus('obsolete')
adminPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: adminPasswd.setStatus('obsolete')
dhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcpclient", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatus.setStatus('current')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
netmaskAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmaskAddr.setStatus('current')
gatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayAddr.setStatus('current')
pridnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pridnsipAddr.setStatus('current')
snddnsipAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snddnsipAddr.setStatus('current')
spantree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spantree.setStatus('current')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
managementVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementVlanID.setStatus('current')
untaggedVlanID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: untaggedVlanID.setStatus('current')
wlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2), )
if mibBuilder.loadTexts: wlanSettingTable.setStatus('current')
wlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanSettingEntry.setStatus('current')
operatemode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatemode.setStatus('current')
radioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEnable.setStatus('current')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channel.setStatus('current')
datarate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1000, 2000, 5500, 6000, 9000, 11000, 12000, 18000, 24000, 36000, 48000, 54000))).clone(namedValues=NamedValues(("best", 0), ("rate1Mbps", 1000), ("rate2Mbps", 2000), ("rate5dot5Mbps", 5500), ("rate6Mbps", 6000), ("rate9Mbps", 9000), ("rate11Mbps", 11000), ("rate12Mbps", 12000), ("rate18Mbps", 18000), ("rate24Mbps", 24000), ("rate36Mbps", 36000), ("rate48Mbps", 48000), ("rate54Mbps", 54000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datarate.setStatus('current')
wmmSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmmSupport.setStatus('current')
beaconinterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setUnits('1024 microsecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconinterval.setStatus('current')
rtsthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsthreshold.setStatus('current')
fraglength = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fraglength.setStatus('current')
dtiminterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtiminterval.setStatus('current')
preambletype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: preambletype.setStatus('current')
txpower = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txpower.setStatus('current')
superG = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superG.setStatus('current')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("local", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessControlMode.setStatus('current')
antenna = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antenna.setStatus('obsolete')
vapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3))
vapWepAndGlobalSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1), )
if mibBuilder.loadTexts: vapWepAndGlobalSettingTable.setStatus('current')
vapWepAndGlobalSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "WAG302", "vapIndex"))
if mibBuilder.loadTexts: vapWepAndGlobalSettingEntry.setStatus('current')
wepKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 104, 128))).clone(namedValues=NamedValues(("hex64", 40), ("hex128", 104), ("hex152", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyType.setStatus('current')
key1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key1.setStatus('current')
key2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key2.setStatus('current')
key3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key3.setStatus('current')
key4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key4.setStatus('current')
wepPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepPassPhrase.setStatus('current')
vapSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2), )
if mibBuilder.loadTexts: vapSettingTable.setStatus('current')
vapSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "WAG302", "vapIndex"))
if mibBuilder.loadTexts: vapSettingEntry.setStatus('current')
vapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vapIndex.setStatus('current')
vapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapEnable.setStatus('current')
ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssid.setStatus('current')
hidenetworkname = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hidenetworkname.setStatus('current')
vlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanID.setStatus('current')
securityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileName.setStatus('current')
presharekey = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: presharekey.setStatus('current')
authenticationtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 12, 16, 32, 48))).clone(namedValues=NamedValues(("open", 0), ("shared", 1), ("legacy802dot1x", 2), ("wpa", 4), ("wpa2", 8), ("wpaORwpa2", 12), ("wpapsk", 16), ("wpa2psk", 32), ("wpapskORwpa2psk", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationtype.setStatus('current')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("aes", 4), ("tkipORaes", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
keyno = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyno.setStatus('current')
wlanseparator = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 3, 2, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanseparator.setStatus('current')
remoteSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4))
sshd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshd.setStatus('current')
snmpenable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpenable.setStatus('current')
trapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerIP.setStatus('current')
trapServerCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerCommunity.setStatus('current')
readOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readOnlyCommunity.setStatus('current')
readWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readWriteCommunity.setStatus('current')
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5))
wiredethernetstat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 1))
lanrecvpacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvpacket.setStatus('current')
lantranspacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantranspacket.setStatus('current')
lanrecvbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanrecvbytes.setStatus('current')
lantransbytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lantransbytes.setStatus('current')
wirelessStatTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2), )
if mibBuilder.loadTexts: wirelessStatTable.setStatus('current')
wirelessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wirelessStatEntry.setStatus('current')
wlanrecvunicastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvunicastpacket.setStatus('current')
wlantransunicastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransunicastpacket.setStatus('current')
wlanrecvbroadcastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbroadcastpacket.setStatus('current')
wlantransbroadcastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbroadcastpacket.setStatus('current')
wlanrecvmulticastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvmulticastpacket.setStatus('current')
wlantransmulticastpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransmulticastpacket.setStatus('current')
wlanrecvpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvpacket.setStatus('current')
wlantranspacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantranspacket.setStatus('current')
wlanrecvbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanrecvbytes.setStatus('current')
wlantransbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 5, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlantransbytes.setStatus('current')
stationListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6), )
if mibBuilder.loadTexts: stationListTable.setStatus('current')
stationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "WAG302", "macaddress"))
if mibBuilder.loadTexts: stationListEntry.setStatus('current')
macaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macaddress.setStatus('current')
clientIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIpaddr.setStatus('current')
clientWirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientWirelessMode.setStatus('current')
stationstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("authenticating", 1), ("authenticated", 2), ("associating", 3), ("associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationstatus.setStatus('current')
wlanWdsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7), )
if mibBuilder.loadTexts: wlanWdsTable.setStatus('current')
wlanWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wlanWdsEntry.setStatus('current')
apmode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ap", 0), ("ptp", 2), ("ptp-ap", 3), ("pxp", 4), ("pxp-ap", 5), ("repeater", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmode.setStatus('current')
ptpremotemacaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpremotemacaddress.setStatus('current')
pxpremotemacaddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress1.setStatus('current')
pxpremotemacaddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress2.setStatus('current')
pxpremotemacaddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress3.setStatus('current')
pxpremotemacaddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpremotemacaddress4.setStatus('current')
repremotemacaddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress1.setStatus('current')
repremotemacaddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress2.setStatus('current')
repremotemacaddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress3.setStatus('current')
repremotemacaddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repremotemacaddress4.setStatus('current')
localMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 7, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAddress.setStatus('current')
info802dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8))
authinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1))
priradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradipaddr.setStatus('current')
priradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradport.setStatus('current')
priradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priradsharedsecret.setStatus('current')
sndradipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradipaddr.setStatus('current')
sndradport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradport.setStatus('current')
sndradsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndradsharedsecret.setStatus('current')
accntinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2))
priacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntipaddr.setStatus('current')
priacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntport.setStatus('current')
priacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priacntsharedsecret.setStatus('current')
sndacntipaddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntipaddr.setStatus('current')
sndacntport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntport.setStatus('current')
sndacntsharedsecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 8, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sndacntsharedsecret.setStatus('current')
userCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 9))
resetAP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAP.setStatus('current')
timeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 10))
currenttime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currenttime.setStatus('current')
timezone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279))).clone(namedValues=NamedValues(("afghanistan", 0), ("albania", 1), ("algeria", 2), ("american-samoa", 3), ("andorra", 4), ("angola", 5), ("anguilla", 6), ("antigua-and-barbuda", 7), ("argentina", 8), ("armenia", 9), ("aruba", 10), ("australia-lordHoweIsland", 11), ("australia-new-south-wales-capitol-territory-victoria", 12), ("australia-northern-territory", 13), ("australia-queensland", 14), ("australia-south-australia-and-broken-hill", 15), ("australia-tasmania", 16), ("australia-western", 17), ("austria", 18), ("azerbaijan", 19), ("bahamas", 20), ("bahrain", 21), ("bangladesh", 22), ("barbados", 23), ("belarus", 24), ("belgium", 25), ("belize", 26), ("benin", 27), ("bermuda", 28), ("bhutan", 29), ("bolivia", 30), ("bonaire", 31), ("bosnia-herzegovina", 32), ("botswana", 33), ("brazil-east-including-all-coast-and-brasilia", 34), ("brazil-fernando-de-noronha", 35), ("brazil-trinity-of-acre", 36), ("brazil-west", 37), ("british-virgin-islands", 38), ("brunei", 39), ("bulgaria", 40), ("burkina-faso", 41), ("burma", 42), ("burundi", 43), ("cambodia", 44), ("cameroon", 45), ("canada-atlantic", 46), ("canada-central", 47), ("canada-eastern", 48), ("canada-mountain", 49), ("canada-newfoundland", 50), ("canada-pacific-and-yukon", 51), ("canada-saskatchewan", 52), ("cape-verde", 53), ("cayman-islands", 54), ("central-african-republic", 55), ("chad", 56), ("chile", 57), ("chile-easter-island", 58), ("china", 59), ("christmas-islands", 60), ("cocos-keeling-islands", 61), ("colombia", 62), ("congo", 63), ("cook-islands", 64), ("costa-rica", 65), ("cote-d-ivoire", 66), ("croatia", 67), ("cuba", 68), ("curacao", 69), ("cyprus", 70), ("czech-republic", 71), ("denmark", 72), ("djibouti", 73), ("dominica", 74), ("the-dominican-republic", 75), ("ecuador", 76), ("ecuador-galapagos-islands", 77), ("egypt", 78), ("el-salvador", 79), ("equatorial-guinea", 80), ("eritrea", 81), ("estonia", 82), ("ethiopia", 83), ("faroe-islands", 84), ("fiji", 85), ("finland", 86), ("france", 87), ("french-guiana", 88), ("french-polynesia", 89), ("gabon", 90), ("the-gambia", 91), ("georgia", 92), ("germany", 93), ("ghana", 94), ("gibraltar", 95), ("greece", 96), ("greenland-scorsbysund", 97), ("greenland-thule", 98), ("grenada", 99), ("guadeloupe", 100), ("guam", 101), ("guatemala", 102), ("guinea-bissau", 103), ("guyana", 104), ("haiti", 105), ("hawaii", 106), ("honduras", 107), ("hong-kong", 108), ("hungary", 109), ("iceland", 110), ("india", 111), ("indonesia-central", 112), ("indonesia-east", 113), ("indonesia-west", 114), ("iran", 115), ("iraq", 116), ("ireland", 117), ("israel", 118), ("italy", 119), ("jamaica", 120), ("japan", 121), ("johnston-islands", 122), ("jordan", 123), ("juan-fernandez-islands", 124), ("kazakhstan", 125), ("kenya", 126), ("kiribati", 127), ("kuwait", 128), ("kyrgyzstan", 129), ("laos", 130), ("latvia", 131), ("lebanon", 132), ("leeward-islands", 133), ("lesotho", 134), ("liberia", 135), ("libya", 136), ("liechtenstein", 137), ("lithuania", 138), ("luxembourg", 139), ("macao", 140), ("macedonia", 141), ("madagascar", 142), ("malawi", 143), ("malaysia", 144), ("maldives", 145), ("mali", 146), ("malta", 147), ("mariana-Islands", 148), ("martinique", 149), ("mauritania", 150), ("mauritius", 151), ("mayotte", 152), ("mexico", 153), ("mexico-baj-n", 154), ("mexico-baj-s", 155), ("midway-islands", 156), ("moldova", 157), ("monaco", 158), ("mongolia", 159), ("montenegro", 160), ("montserrat", 161), ("morocco", 162), ("mozambique", 163), ("namibia", 164), ("nauru", 165), ("nepal", 166), ("the-netherlands-antilles", 167), ("the-netherlands", 168), ("new-caledonia", 169), ("new-hebrides", 170), ("new-zealand9", 171), ("new-zealand-chatham-island", 172), ("nicaragua", 173), ("niger", 174), ("nigeria", 175), ("niue-islands", 176), ("norfolk-island", 177), ("north-korea", 178), ("norway", 179), ("oman", 180), ("pakistan", 181), ("palau", 182), ("panama", 183), ("papua-new-guinea", 184), ("paraguay", 185), ("peru", 186), ("philippines", 187), ("pitcairn-island", 188), ("poland", 189), ("portugal-azores", 190), ("portugal-madeira", 191), ("puerto-rico", 192), ("qatar", 193), ("reunion", 194), ("romania", 195), ("russia-moscow", 196), ("russian-fed-zone-1-kaliningrad", 197), ("russian-fed-zone-10-magadan", 198), ("russian-fed-zone-11-petropavlovsk-kamchatsky", 199), ("russian-fed-zone-2-st-petersburg", 200), ("russian-fed-zone-3-izhevsk", 201), ("russian-fed-zone-4-ekaterinburg", 202), ("russian-fed-zone-5-novosibirsk", 203), ("russian-fed-zone-6-krasnojarsk", 204), ("russian-fed-zone-7-irkutsk", 205), ("russian-fed-zone-8-yakatsk", 206), ("russian-fed-zone-9-vladivostok", 207), ("rwanda", 208), ("saint-pierre-and-miquelon", 209), ("san-marino", 210), ("sao-tome-and-principe", 211), ("saudi-arabia", 212), ("senegal", 213), ("serbia", 214), ("the-seychelles", 215), ("sierra-leone", 216), ("singapore", 217), ("slovakia", 218), ("slovenia", 219), ("solomon-islands", 220), ("somalia", 221), ("south-africa", 222), ("south-georgia", 223), ("south-korea", 224), ("spain", 225), ("spain-canary-islands", 226), ("sri-lanka", 227), ("st-helena", 228), ("st-kitts-nevis", 229), ("st-lucia", 230), ("st-vincent-and-the-grenadines", 231), ("sudan", 232), ("suriname", 233), ("swaziland", 234), ("sweden", 235), ("switzerland", 236), ("syria", 237), ("tahiti", 238), ("taiwan", 239), ("tajikistan", 240), ("tanzania", 241), ("thailand", 242), ("togo", 243), ("tonga", 244), ("trinidad-and-tobago", 245), ("tunisia", 246), ("turkey", 247), ("turkmenistan", 248), ("turks-and-caicos-islands", 249), ("tuvalu", 250), ("uganda", 251), ("ukraine", 252), ("ukraine-simferopol", 253), ("united-arab-emirates", 254)) + NamedValues(("united-kingdom", 255), ("uruguay", 256), ("us-virgin-islands", 257), ("usa-alaska", 258), ("usa-aleutian-islands", 259), ("usa-arizona", 260), ("usa-central", 261), ("usa-eastern", 262), ("usa-indiana", 263), ("usa-mountain", 264), ("usa-pacific", 265), ("uzbekistan", 266), ("vanuatu", 267), ("vatican-city", 268), ("venezuela", 269), ("vietnam", 270), ("wake-islands", 271), ("wallis-and-futana-islands", 272), ("western-samoa", 273), ("windward-islands", 274), ("yemen", 275), ("zaire-kasai", 276), ("zaire-kinshasa", 277), ("zambia", 278), ("zimbabwe", 279)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timezone.setStatus('current')
daylightsaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 10, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightsaving.setStatus('current')
dhcpsSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11))
dhcpserver = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpserver.setStatus('current')
dhcpsipstart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipstart.setStatus('current')
dhcpsipend = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsipend.setStatus('current')
dhcpnetmask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpnetmask.setStatus('current')
dhcpsgateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsgateway.setStatus('current')
dhcpspridns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspridns.setStatus('current')
dhcpspsnddns = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsnddns.setStatus('current')
dhcpspriwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspriwins.setStatus('current')
dhcpspsndwins = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpspsndwins.setStatus('current')
dhcpsleasetime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsleasetime.setStatus('current')
logSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 12))
syslog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslog.setStatus('current')
syslogsrvip = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvip.setStatus('current')
syslogsrvport = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogsrvport.setStatus('current')
httpRedirectSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 7, 13))
httpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectEnable.setStatus('current')
httpRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 7, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 119))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectURL.setStatus('current')
detectedApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14), )
if mibBuilder.loadTexts: detectedApTable.setStatus('current')
detectedApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1), ).setIndexNames((0, "WAG302", "apmac"))
if mibBuilder.loadTexts: detectedApEntry.setStatus('current')
apmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmac.setStatus('current')
apssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apssid.setStatus('current')
apprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apprivacy.setStatus('current')
apband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apband.setStatus('current')
apchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apchannel.setStatus('current')
aprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aprate.setStatus('current')
apbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apbeaconInterval.setStatus('current')
apnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnumBeacons.setStatus('current')
aplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aplastBeacon.setStatus('current')
knownApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15), )
if mibBuilder.loadTexts: knownApTable.setStatus('current')
knownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1), ).setIndexNames((0, "WAG302", "knownapmac"))
if mibBuilder.loadTexts: knownApEntry.setStatus('current')
knownapmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapmac.setStatus('current')
knownapssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapssid.setStatus('current')
knownapprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapprivacy.setStatus('current')
knownapband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapband.setStatus('current')
knownapchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapchannel.setStatus('current')
knownaprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownaprate.setStatus('current')
knownapbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapbeaconInterval.setStatus('current')
knownapnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownapnumBeacons.setStatus('current')
knownaplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownaplastBeacon.setStatus('current')
knownapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 15, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: knownapEntryStatus.setStatus('current')
unknownApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16), )
if mibBuilder.loadTexts: unknownApTable.setStatus('current')
unknownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1), ).setIndexNames((0, "WAG302", "unknownapmac"))
if mibBuilder.loadTexts: unknownApEntry.setStatus('current')
unknownapmac = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapmac.setStatus('current')
unknownapssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapssid.setStatus('current')
unknownapprivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapprivacy.setStatus('current')
unknownapband = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapband.setStatus('current')
unknownapchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapchannel.setStatus('current')
unknownaprate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownaprate.setStatus('current')
unknownapbeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapbeaconInterval.setStatus('current')
unknownapnumBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownapnumBeacons.setStatus('current')
unknownaplastBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownaplastBeacon.setStatus('current')
wlanAccessControlLocalTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 7, 17), )
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setStatus('current')
wlanAccessControlLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 7, 17, 1), ).setIndexNames((0, "WAG302", "aclMAC"))
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setStatus('current')
aclMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMAC.setStatus('current')
aclMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 7, 17, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacStatus.setStatus('current')
mibBuilder.exportSymbols("WAG302", dtiminterval=dtiminterval, wlantransunicastpacket=wlantransunicastpacket, dhcpserver=dhcpserver, keyno=keyno, readWriteCommunity=readWriteCommunity, dhcpsgateway=dhcpsgateway, sndacntsharedsecret=sndacntsharedsecret, macaddress=macaddress, knownApEntry=knownApEntry, daylightsaving=daylightsaving, knownapmac=knownapmac, vapWepAndGlobalSettingEntry=vapWepAndGlobalSettingEntry, sysCountryRegion=sysCountryRegion, dhcpspsndwins=dhcpspsndwins, wlanrecvunicastpacket=wlanrecvunicastpacket, syslogsrvip=syslogsrvip, pridnsipAddr=pridnsipAddr, logSettings=logSettings, securityProfileName=securityProfileName, dhcpspsnddns=dhcpspsnddns, vapIndex=vapIndex, pxpremotemacaddress3=pxpremotemacaddress3, priradport=priradport, wlantranspacket=wlantranspacket, sndacntipaddr=sndacntipaddr, vlanID=vlanID, timezone=timezone, apchannel=apchannel, wlanAccessControlLocalEntry=wlanAccessControlLocalEntry, superG=superG, beaconinterval=beaconinterval, antenna=antenna, wlantransmulticastpacket=wlantransmulticastpacket, trapServerCommunity=trapServerCommunity, knownaplastBeacon=knownaplastBeacon, lantranspacket=lantranspacket, unknownApEntry=unknownApEntry, knownapEntryStatus=knownapEntryStatus, snmpenable=snmpenable, knownaprate=knownaprate, readOnlyCommunity=readOnlyCommunity, encryption=encryption, apprivacy=apprivacy, sshd=sshd, key2=key2, priradsharedsecret=priradsharedsecret, knownapssid=knownapssid, lanrecvpacket=lanrecvpacket, wlantransbytes=wlantransbytes, adminName=adminName, wirelessStatEntry=wirelessStatEntry, clientWirelessMode=clientWirelessMode, httpRedirectEnable=httpRedirectEnable, wlantransbroadcastpacket=wlantransbroadcastpacket, unknownapssid=unknownapssid, wlanrecvbytes=wlanrecvbytes, userCommand=userCommand, hidenetworkname=hidenetworkname, PYSNMP_MODULE_ID=wag302, stationstatus=stationstatus, fraglength=fraglength, radioEnable=radioEnable, knownapprivacy=knownapprivacy, snddnsipAddr=snddnsipAddr, httpRedirectURL=httpRedirectURL, unknownApTable=unknownApTable, ssid=ssid, detectedApEntry=detectedApEntry, netgear=netgear, info802dot1x=info802dot1x, sysMacAddress=sysMacAddress, knownapband=knownapband, adminPasswd=adminPasswd, knownapchannel=knownapchannel, sndradsharedsecret=sndradsharedsecret, wepPassPhrase=wepPassPhrase, wlanWdsTable=wlanWdsTable, dhcpnetmask=dhcpnetmask, wag302=wag302, wireless=wireless, vapSettingEntry=vapSettingEntry, repremotemacaddress3=repremotemacaddress3, dhcpsleasetime=dhcpsleasetime, repremotemacaddress2=repremotemacaddress2, lanSettings=lanSettings, apssid=apssid, accessControlMode=accessControlMode, apbeaconInterval=apbeaconInterval, authenticationtype=authenticationtype, ptpremotemacaddress=ptpremotemacaddress, apband=apband, key4=key4, vlanEnable=vlanEnable, stationListTable=stationListTable, presharekey=presharekey, sndacntport=sndacntport, wlanrecvpacket=wlanrecvpacket, apmac=apmac, syslog=syslog, sysVersion=sysVersion, key1=key1, wirelessStatTable=wirelessStatTable, sndradipaddr=sndradipaddr, currenttime=currenttime, wiredethernetstat=wiredethernetstat, authinfo=authinfo, pxpremotemacaddress1=pxpremotemacaddress1, pxpremotemacaddress4=pxpremotemacaddress4, dhcpsipstart=dhcpsipstart, httpRedirectSettings=httpRedirectSettings, key3=key3, unknownaprate=unknownaprate, pxpremotemacaddress2=pxpremotemacaddress2, unknownapnumBeacons=unknownapnumBeacons, channel=channel, gatewayAddr=gatewayAddr, aclMAC=aclMAC, dhcpsSettings=dhcpsSettings, unknownapbeaconInterval=unknownapbeaconInterval, remoteSettings=remoteSettings, repremotemacaddress4=repremotemacaddress4, txpower=txpower, lanrecvbytes=lanrecvbytes, priacntipaddr=priacntipaddr, aprate=aprate, localMacAddress=localMacAddress, unknownapprivacy=unknownapprivacy, apnumBeacons=apnumBeacons, datarate=datarate, wlanAccessControlLocalTable=wlanAccessControlLocalTable, spantree=spantree, wmmSupport=wmmSupport, repremotemacaddress1=repremotemacaddress1, accntinfo=accntinfo, dhcpspriwins=dhcpspriwins, knownApTable=knownApTable, priradipaddr=priradipaddr, syslogsrvport=syslogsrvport, unknownapband=unknownapband, unknownapmac=unknownapmac, rtsthreshold=rtsthreshold, preambletype=preambletype, clientIpaddr=clientIpaddr, priacntport=priacntport, resetAP=resetAP, managementVlanID=managementVlanID, unknownaplastBeacon=unknownaplastBeacon, lantransbytes=lantransbytes, priacntsharedsecret=priacntsharedsecret, timeSettings=timeSettings, wepKeyType=wepKeyType, sndradport=sndradport, wlanrecvbroadcastpacket=wlanrecvbroadcastpacket, wlanSettingTable=wlanSettingTable, wlanrecvmulticastpacket=wlanrecvmulticastpacket, untaggedVlanID=untaggedVlanID, trapServerIP=trapServerIP, aplastBeacon=aplastBeacon, vapSetting=vapSetting, wlanseparator=wlanseparator, statistic=statistic, vapSettingTable=vapSettingTable, wlanWdsEntry=wlanWdsEntry, wlanSettingEntry=wlanSettingEntry, unknownapchannel=unknownapchannel, dhcpStatus=dhcpStatus, operatemode=operatemode, detectedApTable=detectedApTable, apName=apName, vapWepAndGlobalSettingTable=vapWepAndGlobalSettingTable, stationListEntry=stationListEntry, aclMacStatus=aclMacStatus, ipAddr=ipAddr, dhcpsipend=dhcpsipend, apmode=apmode, knownapbeaconInterval=knownapbeaconInterval, dhcpspridns=dhcpspridns, vapEnable=vapEnable, netmaskAddr=netmaskAddr, knownapnumBeacons=knownapnumBeacons)
