#
# PySNMP MIB module SUN-T300-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-T300-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, iso, Counter32, ModuleIdentity, NotificationType, Counter64, IpAddress, enterprises, NotificationType, MibIdentifier, Unsigned32, Gauge32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "iso", "Counter32", "ModuleIdentity", "NotificationType", "Counter64", "IpAddress", "enterprises", "NotificationType", "MibIdentifier", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
t300 = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 28, 2))
if mibBuilder.loadTexts: t300.setLastUpdated('0012140000Z')
if mibBuilder.loadTexts: t300.setOrganization('SUN MICROSYSTEMS INCORPORATED')
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
storage_subsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28)).setLabel("storage-subsystem")
t300Reg = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 1))
t300Purple1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 1, 1))
if mibBuilder.loadTexts: t300Purple1.setStatus('current')
t300Objs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2))
t300SystemObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1))
t300UnitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2))
t300FruObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3))
t300VolumeObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4))
t300PortObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5))
t300AttachObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6))
t300LoopObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7))
t300LogObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8))
t300OndgObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9))
t300Events = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 3))
t300EventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 3, 0))
sysId = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysId.setStatus('mandatory')
sysVendor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVendor.setStatus('mandatory')
sysModel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModel.setStatus('mandatory')
sysRevision = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRevision.setStatus('mandatory')
sysStripeUnitSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStripeUnitSize.setStatus('mandatory')
sysCacheMode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("writeThrough", 2), ("writeBehind", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheMode.setStatus('mandatory')
sysCacheMirror = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheMirror.setStatus('mandatory')
sysAutoDisable = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("disableOnly", 2), ("disableRecon", 3), ("reconOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAutoDisable.setStatus('obsolete')
sysMpSupport = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("readWrite", 2), ("mpxio", 3), ("std", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMpSupport.setStatus('mandatory')
sysReadAhead = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysReadAhead.setStatus('mandatory')
sysReconRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysReconRate.setStatus('mandatory')
sysOndgMode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOndgMode.setStatus('mandatory')
sysOndgTimeslice = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOndgTimeslice.setStatus('mandatory')
sysIdleDiskTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIdleDiskTimeout.setStatus('obsolete')
sysFruRemovalShutdown = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFruRemovalShutdown.setStatus('mandatory')
sysBootMode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("auto", 2), ("tftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootMode.setStatus('mandatory')
sysBootDelay = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootDelay.setStatus('mandatory')
sysSpinDelay = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSpinDelay.setStatus('obsolete')
sysTftpHost = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTftpHost.setStatus('mandatory')
sysTftpFile = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTftpFile.setStatus('mandatory')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpAddr.setStatus('mandatory')
sysSubNet = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSubNet.setStatus('mandatory')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGateway.setStatus('mandatory')
sysWriteRequests = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysWriteRequests.setStatus('mandatory')
sysReadRequests = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysReadRequests.setStatus('mandatory')
sysBlocksWritten = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBlocksWritten.setStatus('mandatory')
sysBlocksRead = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBlocksRead.setStatus('mandatory')
sysCacheWriteHits = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheWriteHits.setStatus('mandatory')
sysCacheWriteMisses = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheWriteMisses.setStatus('mandatory')
sysCacheReadHits = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheReadHits.setStatus('mandatory')
sysCacheReadMisses = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheReadMisses.setStatus('mandatory')
sysCacheRmwFlushes = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheRmwFlushes.setStatus('mandatory')
sysCacheReconFlushes = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheReconFlushes.setStatus('mandatory')
sysCacheStripeFlushes = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCacheStripeFlushes.setStatus('mandatory')
sysTimezone = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTimezone.setStatus('mandatory')
sysDate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDate.setStatus('mandatory')
sysTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTime.setStatus('mandatory')
sysRootSession = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRootSession.setStatus('obsolete')
sysGuestSession = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGuestSession.setStatus('obsolete')
sysLastMessage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastMessage.setStatus('mandatory')
sysRarpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRarpEnabled.setStatus('mandatory')
sysLoop1Split = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoop1Split.setStatus('mandatory')
sysLastRestart = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastRestart.setStatus('mandatory')
sysCtime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCtime.setStatus('mandatory')
sysHasVolumes = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHasVolumes.setStatus('mandatory')
unitCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCount.setStatus('mandatory')
unitTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2), )
if mibBuilder.loadTexts: unitTable.setStatus('mandatory')
unitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"))
if mibBuilder.loadTexts: unitEntry.setStatus('mandatory')
unitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitIndex.setStatus('mandatory')
unitId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitId.setStatus('mandatory')
unitType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("controller", 1), ("expansion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitType.setStatus('mandatory')
unitStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitStandby.setStatus('mandatory')
fruCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCount.setStatus('mandatory')
fruTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2), )
if mibBuilder.loadTexts: fruTable.setStatus('mandatory')
fruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruEntry.setStatus('mandatory')
fruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruIndex.setStatus('mandatory')
fruId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruId.setStatus('mandatory')
fruType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diskDrive", 1), ("controllerCard", 2), ("loopCard", 3), ("powerUnit", 4), ("midplane", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruType.setStatus('mandatory')
fruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notInstalled", 1), ("fault", 2), ("ready", 3), ("offline", 4), ("booting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruStatus.setStatus('mandatory')
fruState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("substituted", 3), ("missing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruState.setStatus('mandatory')
fruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruVendor.setStatus('mandatory')
fruModel = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruModel.setStatus('mandatory')
fruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruRevision.setStatus('mandatory')
fruSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruSerialNo.setStatus('mandatory')
fruErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruErrors.setStatus('mandatory')
fruDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskCount.setStatus('mandatory')
fruDiskTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4), )
if mibBuilder.loadTexts: fruDiskTable.setStatus('mandatory')
fruDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruDiskEntry.setStatus('mandatory')
fruDiskRole = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unassigned", 1), ("dataDisk", 2), ("standbyDisk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskRole.setStatus('mandatory')
fruDiskPort1State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("notReady", 2), ("bypass", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskPort1State.setStatus('mandatory')
fruDiskPort2State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("notReady", 2), ("bypass", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskPort2State.setStatus('mandatory')
fruDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskCapacity.setStatus('mandatory')
fruDiskStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskStatusCode.setStatus('mandatory')
fruDiskVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskVolName.setStatus('mandatory')
fruDiskTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruDiskTemp.setStatus('mandatory')
fruCtlrCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrCount.setStatus('mandatory')
fruCtlrTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6), )
if mibBuilder.loadTexts: fruCtlrTable.setStatus('mandatory')
fruCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruCtlrEntry.setStatus('mandatory')
fruCtlrCpuDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrCpuDesc.setStatus('mandatory')
fruCtlrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("alternateMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrRole.setStatus('mandatory')
fruCtlrPartnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrPartnerId.setStatus('mandatory')
fruCtlrCtState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("expansionUnit", 1), ("booting", 2), ("online", 3), ("disabled", 4), ("disabling", 5), ("reset", 6), ("resetting", 7), ("reconfig", 8), ("hotPlug", 9), ("virtual", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrCtState.setStatus('mandatory')
fruCtlrCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrCacheSize.setStatus('mandatory')
fruCtlrTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrTemp.setStatus('mandatory')
fruCtlrMdate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrMdate.setStatus('mandatory')
fruCtlrConsoleBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruCtlrConsoleBaud.setStatus('mandatory')
fruLoopCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopCount.setStatus('mandatory')
fruLoopTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8), )
if mibBuilder.loadTexts: fruLoopTable.setStatus('mandatory')
fruLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruLoopEntry.setStatus('mandatory')
fruLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopMode.setStatus('mandatory')
fruLoopTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopTemp.setStatus('mandatory')
fruLoopCable1State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopCable1State.setStatus('mandatory')
fruLoopCable2State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopCable2State.setStatus('mandatory')
fruLoopMdate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruLoopMdate.setStatus('mandatory')
fruPowerCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerCount.setStatus('mandatory')
fruPowerTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10), )
if mibBuilder.loadTexts: fruPowerTable.setStatus('mandatory')
fruPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruPowerEntry.setStatus('mandatory')
fruPowerPowOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("normal", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerPowOutput.setStatus('mandatory')
fruPowerPowSource = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("line", 1), ("battery", 2), ("unknown", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerPowSource.setStatus('mandatory')
fruPowerPowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("overTemp", 2), ("unknown", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerPowTemp.setStatus('mandatory')
fruPowerFan1State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("missing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerFan1State.setStatus('mandatory')
fruPowerFan2State = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("missing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerFan2State.setStatus('mandatory')
fruPowerBatState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notInstalled", 1), ("normal", 2), ("fault", 3), ("refreshing", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerBatState.setStatus('mandatory')
fruPowerBatLife = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerBatLife.setStatus('mandatory')
fruPowerBatUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerBatUsed.setStatus('mandatory')
fruPowerPowMdate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerPowMdate.setStatus('mandatory')
fruPowerBatMdate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPowerBatMdate.setStatus('mandatory')
fruMidplaneCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruMidplaneCount.setStatus('mandatory')
fruMidplaneTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 12), )
if mibBuilder.loadTexts: fruMidplaneTable.setStatus('mandatory')
fruMidplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 12, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "fruIndex"))
if mibBuilder.loadTexts: fruMidplaneEntry.setStatus('mandatory')
fruMidplaneMdate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 3, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruMidplaneMdate.setStatus('mandatory')
volCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCount.setStatus('mandatory')
volTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2), )
if mibBuilder.loadTexts: volTable.setStatus('mandatory')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('mandatory')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('mandatory')
volId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volId.setStatus('mandatory')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('mandatory')
volWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volWWN.setStatus('mandatory')
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("uninitialized", 2), ("unmounted", 3), ("mounted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('mandatory')
volCacheMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("writeThrough", 2), ("writeBehind", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheMode.setStatus('mandatory')
volCacheMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheMirror.setStatus('mandatory')
volCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCapacity.setStatus('mandatory')
volArrayWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volArrayWidth.setStatus('mandatory')
volRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raid0", 1), ("raid1", 2), ("raid5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volRaidLevel.setStatus('mandatory')
volWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volWriteRequests.setStatus('mandatory')
volReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volReadRequests.setStatus('mandatory')
volBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volBlocksWritten.setStatus('mandatory')
volBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volBlocksRead.setStatus('mandatory')
volSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSoftErrors.setStatus('mandatory')
volFirmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFirmErrors.setStatus('mandatory')
volHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volHardErrors.setStatus('mandatory')
volCacheWriteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheWriteHits.setStatus('mandatory')
volCacheWriteMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheWriteMisses.setStatus('mandatory')
volCacheReadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheReadHits.setStatus('mandatory')
volCacheReadMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheReadMisses.setStatus('mandatory')
volCacheRmwFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheRmwFlushes.setStatus('mandatory')
volCacheReconFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheReconFlushes.setStatus('mandatory')
volCacheStripeFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCacheStripeFlushes.setStatus('mandatory')
volDisabledDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volDisabledDisk.setStatus('mandatory')
volSubstitutedDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volSubstitutedDisk.setStatus('mandatory')
volOper = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("reconstructing", 2), ("reconstructingToStandby", 3), ("copyingFromStandby", 4), ("copyingToStandby", 5), ("initializing", 6), ("verifying", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOper.setStatus('mandatory')
volOperProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOperProgress.setStatus('mandatory')
volInitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volInitRate.setStatus('mandatory')
volVerifyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volVerifyRate.setStatus('mandatory')
portCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portId.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ultraScsi", 1), ("fibreChannel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFruId.setStatus('mandatory')
portWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portWriteRequests.setStatus('mandatory')
portReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReadRequests.setStatus('mandatory')
portBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlocksWritten.setStatus('mandatory')
portBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBlocksRead.setStatus('mandatory')
portSunHost = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSunHost.setStatus('mandatory')
portWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 136))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portWWN.setStatus('mandatory')
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatus.setStatus('mandatory')
portErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrors.setStatus('mandatory')
portFibreCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFibreCount.setStatus('mandatory')
portFibreTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 4), )
if mibBuilder.loadTexts: portFibreTable.setStatus('mandatory')
portFibreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 4, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "portIndex"))
if mibBuilder.loadTexts: portFibreEntry.setStatus('mandatory')
portFibreAlpaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hard", 1), ("soft", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFibreAlpaMode.setStatus('mandatory')
portFibreAlpa = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFibreAlpa.setStatus('mandatory')
attachCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachCount.setStatus('mandatory')
attachTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2), )
if mibBuilder.loadTexts: attachTable.setStatus('mandatory')
attachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "portIndex"), (0, "SUN-T300-MIB", "attachIndex"))
if mibBuilder.loadTexts: attachEntry.setStatus('mandatory')
attachIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachIndex.setStatus('mandatory')
attachLun = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachLun.setStatus('mandatory')
attachMode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("failover", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachMode.setStatus('mandatory')
attachVolId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachVolId.setStatus('mandatory')
attachVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachVolName.setStatus('mandatory')
attachVolOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attachVolOwner.setStatus('mandatory')
loopCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopCount.setStatus('mandatory')
loopTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2), )
if mibBuilder.loadTexts: loopTable.setStatus('mandatory')
loopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2, 1), ).setIndexNames((0, "SUN-T300-MIB", "unitIndex"), (0, "SUN-T300-MIB", "loopIndex"))
if mibBuilder.loadTexts: loopEntry.setStatus('mandatory')
loopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopIndex.setStatus('mandatory')
loopId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopId.setStatus('mandatory')
loopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("reserved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopStatus.setStatus('mandatory')
loopMux = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isolated", 1), ("top", 2), ("bottom", 3), ("middle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopMux.setStatus('mandatory')
logStatus = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logStatus.setStatus('mandatory')
logTo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTo.setStatus('mandatory')
logFile = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFile.setStatus('mandatory')
logLevel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none-0", 1), ("error-1", 2), ("warning-2", 3), ("notice-3", 4), ("all-4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLevel.setStatus('mandatory')
logPort = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logPort.setStatus('mandatory')
ondgOper = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("test", 1), ("fastTest", 2), ("find", 3), ("fastFind", 4), ("healthCheck", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ondgOper.setStatus('mandatory')
ondgOperPending = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ondgOperPending.setStatus('mandatory')
ondgOperProgress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ondgOperProgress.setStatus('mandatory')
ondgError = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ondgError.setStatus('mandatory')
ondgId = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ondgId.setStatus('mandatory')
sysMessage = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 28, 2, 3) + (0,1)).setObjects(("SUN-T300-MIB", "sysLastMessage"))
mibBuilder.exportSymbols("SUN-T300-MIB", fruPowerPowTemp=fruPowerPowTemp, t300SystemObjs=t300SystemObjs, volRaidLevel=volRaidLevel, portBlocksWritten=portBlocksWritten, fruLoopEntry=fruLoopEntry, fruTable=fruTable, ondgOperProgress=ondgOperProgress, portFruId=portFruId, logFile=logFile, portIndex=portIndex, fruLoopTemp=fruLoopTemp, fruDiskStatusCode=fruDiskStatusCode, fruPowerBatState=fruPowerBatState, sysGateway=sysGateway, sysBlocksWritten=sysBlocksWritten, portCount=portCount, loopIndex=loopIndex, t300LoopObjs=t300LoopObjs, sysStripeUnitSize=sysStripeUnitSize, portTable=portTable, sysOndgTimeslice=sysOndgTimeslice, sysTftpFile=sysTftpFile, portFibreAlpa=portFibreAlpa, sysFruRemovalShutdown=sysFruRemovalShutdown, unitType=unitType, fruDiskPort1State=fruDiskPort1State, products=products, unitCount=unitCount, fruVendor=fruVendor, fruCtlrCpuDesc=fruCtlrCpuDesc, fruPowerFan1State=fruPowerFan1State, t300FruObjs=t300FruObjs, sysGuestSession=sysGuestSession, volArrayWidth=volArrayWidth, portBlocksRead=portBlocksRead, fruId=fruId, portId=portId, t300=t300, volReadRequests=volReadRequests, unitEntry=unitEntry, volCount=volCount, volCacheRmwFlushes=volCacheRmwFlushes, ondgOper=ondgOper, portEntry=portEntry, volCacheStripeFlushes=volCacheStripeFlushes, volCacheMode=volCacheMode, sysReadAhead=sysReadAhead, sysIpAddr=sysIpAddr, fruErrors=fruErrors, volEntry=volEntry, sysDate=sysDate, volCapacity=volCapacity, volBlocksRead=volBlocksRead, sysCacheMode=sysCacheMode, fruCtlrRole=fruCtlrRole, fruMidplaneTable=fruMidplaneTable, fruPowerCount=fruPowerCount, fruMidplaneMdate=fruMidplaneMdate, sysWriteRequests=sysWriteRequests, volCacheWriteHits=volCacheWriteHits, fruDiskCapacity=fruDiskCapacity, attachVolName=attachVolName, volSubstitutedDisk=volSubstitutedDisk, t300EventsV2=t300EventsV2, portErrors=portErrors, sysSpinDelay=sysSpinDelay, fruIndex=fruIndex, fruCount=fruCount, sysAutoDisable=sysAutoDisable, t300Objs=t300Objs, sysLastRestart=sysLastRestart, fruPowerEntry=fruPowerEntry, portReadRequests=portReadRequests, sysBootMode=sysBootMode, fruModel=fruModel, PYSNMP_MODULE_ID=t300, storage_subsystem=storage_subsystem, volFirmErrors=volFirmErrors, unitId=unitId, sysHasVolumes=sysHasVolumes, portStatus=portStatus, fruSerialNo=fruSerialNo, t300UnitObjs=t300UnitObjs, loopStatus=loopStatus, fruLoopCable2State=fruLoopCable2State, fruPowerBatLife=fruPowerBatLife, sysLastMessage=sysLastMessage, fruCtlrTable=fruCtlrTable, fruMidplaneCount=fruMidplaneCount, sysCacheWriteHits=sysCacheWriteHits, fruCtlrConsoleBaud=fruCtlrConsoleBaud, t300Reg=t300Reg, volCacheReadHits=volCacheReadHits, attachIndex=attachIndex, sysSubNet=sysSubNet, fruDiskRole=fruDiskRole, sysModel=sysModel, volStatus=volStatus, volCacheReadMisses=volCacheReadMisses, attachVolId=attachVolId, sysRevision=sysRevision, fruCtlrTemp=fruCtlrTemp, fruPowerBatMdate=fruPowerBatMdate, sysLoop1Split=sysLoop1Split, volOper=volOper, portType=portType, attachMode=attachMode, logPort=logPort, t300LogObjs=t300LogObjs, unitIndex=unitIndex, portFibreCount=portFibreCount, sysReadRequests=sysReadRequests, volId=volId, portFibreEntry=portFibreEntry, sysVendor=sysVendor, volSoftErrors=volSoftErrors, fruPowerFan2State=fruPowerFan2State, sysBlocksRead=sysBlocksRead, volTable=volTable, sysId=sysId, attachEntry=attachEntry, sysRootSession=sysRootSession, ondgId=ondgId, sysCacheWriteMisses=sysCacheWriteMisses, attachLun=attachLun, attachVolOwner=attachVolOwner, sysTimezone=sysTimezone, sysCacheReconFlushes=sysCacheReconFlushes, attachTable=attachTable, t300Events=t300Events, logLevel=logLevel, sysCacheMirror=sysCacheMirror, volWriteRequests=volWriteRequests, t300OndgObjs=t300OndgObjs, sysCacheStripeFlushes=sysCacheStripeFlushes, portFibreAlpaMode=portFibreAlpaMode, logStatus=logStatus, t300AttachObjs=t300AttachObjs, fruCtlrCount=fruCtlrCount, loopTable=loopTable, volDisabledDisk=volDisabledDisk, fruEntry=fruEntry, sysMessage=sysMessage, fruDiskEntry=fruDiskEntry, portWWN=portWWN, volVerifyRate=volVerifyRate, volName=volName, sun=sun, sysReconRate=sysReconRate, fruDiskPort2State=fruDiskPort2State, fruCtlrCtState=fruCtlrCtState, fruPowerPowOutput=fruPowerPowOutput, fruCtlrPartnerId=fruCtlrPartnerId, fruStatus=fruStatus, fruLoopTable=fruLoopTable, fruPowerPowMdate=fruPowerPowMdate, sysCacheReadMisses=sysCacheReadMisses, fruLoopMdate=fruLoopMdate, portFibreTable=portFibreTable, ondgOperPending=ondgOperPending, fruPowerTable=fruPowerTable, sysCacheReadHits=sysCacheReadHits, logTo=logTo, loopEntry=loopEntry, volCacheWriteMisses=volCacheWriteMisses, fruType=fruType, fruDiskTemp=fruDiskTemp, volCacheReconFlushes=volCacheReconFlushes, volInitRate=volInitRate, attachCount=attachCount, fruPowerBatUsed=fruPowerBatUsed, fruCtlrEntry=fruCtlrEntry, ondgError=ondgError, t300VolumeObjs=t300VolumeObjs, sysCtime=sysCtime, loopId=loopId, fruDiskCount=fruDiskCount, sysOndgMode=sysOndgMode, volCacheMirror=volCacheMirror, portWriteRequests=portWriteRequests, sysCacheRmwFlushes=sysCacheRmwFlushes, sysTime=sysTime, fruLoopMode=fruLoopMode, loopMux=loopMux, fruDiskVolName=fruDiskVolName, volIndex=volIndex, sysTftpHost=sysTftpHost, fruState=fruState, fruCtlrCacheSize=fruCtlrCacheSize, loopCount=loopCount, fruPowerPowSource=fruPowerPowSource, sysIdleDiskTimeout=sysIdleDiskTimeout, sysBootDelay=sysBootDelay, volBlocksWritten=volBlocksWritten, fruRevision=fruRevision, unitStandby=unitStandby, fruLoopCount=fruLoopCount, volHardErrors=volHardErrors, fruDiskTable=fruDiskTable, fruLoopCable1State=fruLoopCable1State, fruCtlrMdate=fruCtlrMdate, sysRarpEnabled=sysRarpEnabled, fruMidplaneEntry=fruMidplaneEntry, t300Purple1=t300Purple1, unitTable=unitTable, volWWN=volWWN, sysMpSupport=sysMpSupport, volOperProgress=volOperProgress, t300PortObjs=t300PortObjs, portSunHost=portSunHost)
