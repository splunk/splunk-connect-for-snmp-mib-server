#
# PySNMP MIB module CBS-VAPGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CBS-VAPGROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleState, cbsHwModuleID = mibBuilder.importSymbols("CBS-HARDWARE-MIB", "ModuleState", "cbsHwModuleID")
cbsMgmt, cbsTraps, cbsMIBs = mibBuilder.importSymbols("CROSSBEAM-SYSTEMS-MIB", "cbsMgmt", "cbsTraps", "cbsMIBs")
ProductID, KBytes = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "ProductID", "KBytes")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, Counter32, Gauge32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, NotificationType, MibIdentifier, Counter64, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Counter32", "Gauge32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
cbsVapGroupsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6848, 3, 4))
cbsVapGroupsMIB.setRevisions(('2008-09-02 00:00', '2009-12-08 00:00',))
if mibBuilder.loadTexts: cbsVapGroupsMIB.setLastUpdated('200912080000Z')
if mibBuilder.loadTexts: cbsVapGroupsMIB.setOrganization('Crossbeam Systems, Inc.')
cbsVapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 4))
cbsVapGroupsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 4, 3))
cbsVapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1), )
if mibBuilder.loadTexts: cbsVapGroupTable.setStatus('current')
cbsVapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1), ).setIndexNames((0, "CBS-VAPGROUP-MIB", "cbsVgVapGroupID"))
if mibBuilder.loadTexts: cbsVapGroupEntry.setStatus('current')
cbsVgVapGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgVapGroupID.setStatus('current')
cbsVgVapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgVapGroupName.setStatus('current')
cbsVgLoadPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgLoadPriority.setStatus('current')
cbsVgPreempPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgPreempPriority.setStatus('current')
cbsVgApmList = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgApmList.setStatus('current')
cbsVgVapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgVapCount.setStatus('current')
cbsVgMaxLoadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgMaxLoadCount.setStatus('current')
cbsVgLBList = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgLBList.setStatus('current')
cbsVgBackUpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("pair", 1), ("group", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgBackUpMode.setStatus('current')
cbsVgIpForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgIpForward.setStatus('current')
cbsVgRpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgRpFilter.setStatus('current')
cbsVgLogMartians = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgLogMartians.setStatus('current')
cbsVgReloadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgReloadTimer.setStatus('current')
cbsVgRemoteBoxBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgRemoteBoxBackup.setStatus('obsolete')
cbsVgDelayFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgDelayFlow.setStatus('current')
cbsVgIpv6Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVgIpv6Forward.setStatus('current')
cbsVapMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2), )
if mibBuilder.loadTexts: cbsVapMappingTable.setStatus('current')
cbsVapMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1), ).setIndexNames((0, "CBS-VAPGROUP-MIB", "cbsVmVapGroupID"), (0, "CBS-VAPGROUP-MIB", "cbsVmVapIndex"))
if mibBuilder.loadTexts: cbsVapMappingEntry.setStatus('current')
cbsVmVapGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmVapGroupID.setStatus('current')
cbsVmVapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmVapGroupName.setStatus('current')
cbsVmVapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmVapName.setStatus('current')
cbsVmVapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmVapIndex.setStatus('current')
cbsVmVapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 5), ModuleState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmVapStatus.setStatus('current')
cbsVmSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVmSlotNumber.setStatus('current')
cbsVapStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 3, 1)).setObjects(("CBS-VAPGROUP-MIB", "cbsVmVapStatus"), ("CBS-VAPGROUP-MIB", "cbsVmVapName"))
if mibBuilder.loadTexts: cbsVapStatusChanged.setStatus('current')
mibBuilder.exportSymbols("CBS-VAPGROUP-MIB", cbsVmVapStatus=cbsVmVapStatus, cbsVgRemoteBoxBackup=cbsVgRemoteBoxBackup, cbsVapStatusChanged=cbsVapStatusChanged, cbsVmVapIndex=cbsVmVapIndex, cbsVapGroupsTraps=cbsVapGroupsTraps, cbsVgLBList=cbsVgLBList, cbsVgApmList=cbsVgApmList, cbsVgIpForward=cbsVgIpForward, PYSNMP_MODULE_ID=cbsVapGroupsMIB, cbsVmSlotNumber=cbsVmSlotNumber, cbsVgReloadTimer=cbsVgReloadTimer, cbsVgVapGroupID=cbsVgVapGroupID, cbsVapGroups=cbsVapGroups, cbsVgDelayFlow=cbsVgDelayFlow, cbsVgVapCount=cbsVgVapCount, cbsVgLoadPriority=cbsVgLoadPriority, cbsVgIpv6Forward=cbsVgIpv6Forward, cbsVgLogMartians=cbsVgLogMartians, cbsVgBackUpMode=cbsVgBackUpMode, cbsVapMappingTable=cbsVapMappingTable, cbsVgVapGroupName=cbsVgVapGroupName, cbsVmVapGroupName=cbsVmVapGroupName, cbsVapMappingEntry=cbsVapMappingEntry, cbsVapGroupsMIB=cbsVapGroupsMIB, cbsVmVapGroupID=cbsVmVapGroupID, cbsVgRpFilter=cbsVgRpFilter, cbsVapGroupTable=cbsVapGroupTable, cbsVgMaxLoadCount=cbsVgMaxLoadCount, cbsVgPreempPriority=cbsVgPreempPriority, cbsVapGroupEntry=cbsVapGroupEntry, cbsVmVapName=cbsVmVapName)
