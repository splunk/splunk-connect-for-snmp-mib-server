#
# PySNMP MIB module SHIVA-ETHER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SHIVA-ETHER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:54:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
tEther, = mibBuilder.importSymbols("SHIVA-MIB", "tEther")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Integer32, IpAddress, Counter64, Bits, Counter32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Integer32", "IpAddress", "Counter64", "Bits", "Counter32", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tEtherTable = MibTable((1, 3, 6, 1, 4, 1, 166, 4, 5, 1), )
if mibBuilder.loadTexts: tEtherTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1) + (1000, ), Integer32())
tEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1), ).setIndexNames((0, "SHIVA-ETHER-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: tEtherEntry.setStatus('mandatory')
etherCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherCRCErrors.setStatus('mandatory')
etherAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherAlignErrors.setStatus('mandatory')
etherResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherResourceErrors.setStatus('mandatory')
etherOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOverrunErrors.setStatus('mandatory')
etherInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherInPackets.setStatus('mandatory')
etherOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOutPackets.setStatus('mandatory')
etherBadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherBadTransmits.setStatus('mandatory')
etherOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherOversizeFrames.setStatus('mandatory')
etherSpurRUReadys = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherSpurRUReadys.setStatus('mandatory')
etherSpurCUActives = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherSpurCUActives.setStatus('mandatory')
etherSpurUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherSpurUnknowns.setStatus('mandatory')
etherBcastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherBcastDrops.setStatus('mandatory')
etherReceiverRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherReceiverRestarts.setStatus('mandatory')
etherReinterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherReinterrupts.setStatus('mandatory')
etherBufferReroutes = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherBufferReroutes.setStatus('mandatory')
etherBufferDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherBufferDrops.setStatus('mandatory')
etherCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherCollisions.setStatus('mandatory')
etherDefers = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherDefers.setStatus('mandatory')
etherDMAUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherDMAUnderruns.setStatus('mandatory')
etherMaxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMaxCollisions.setStatus('mandatory')
etherNoCarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherNoCarriers.setStatus('mandatory')
etherNoCTSs = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherNoCTSs.setStatus('mandatory')
etherNoSQEs = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 4, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherNoSQEs.setStatus('mandatory')
mibBuilder.exportSymbols("SHIVA-ETHER-MIB", etherOutPackets=etherOutPackets, etherBufferDrops=etherBufferDrops, etherBadTransmits=etherBadTransmits, etherDefers=etherDefers, etherBcastDrops=etherBcastDrops, tEtherTable=tEtherTable, etherOverrunErrors=etherOverrunErrors, etherAlignErrors=etherAlignErrors, etherDMAUnderruns=etherDMAUnderruns, etherSpurCUActives=etherSpurCUActives, etherNoCarriers=etherNoCarriers, etherMaxCollisions=etherMaxCollisions, etherNoCTSs=etherNoCTSs, etherBufferReroutes=etherBufferReroutes, etherCollisions=etherCollisions, etherReinterrupts=etherReinterrupts, tEtherEntry=tEtherEntry, etherSpurUnknowns=etherSpurUnknowns, etherNoSQEs=etherNoSQEs, etherSpurRUReadys=etherSpurRUReadys, etherInPackets=etherInPackets, etherOversizeFrames=etherOversizeFrames, pysmiFakeCol1000=pysmiFakeCol1000, etherReceiverRestarts=etherReceiverRestarts, etherResourceErrors=etherResourceErrors, etherCRCErrors=etherCRCErrors)
