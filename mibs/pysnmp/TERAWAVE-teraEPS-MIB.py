#
# PySNMP MIB module TERAWAVE-teraEPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraEPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, Integer32, Bits, NotificationType, ModuleIdentity, IpAddress, MibIdentifier, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "Integer32", "Bits", "NotificationType", "ModuleIdentity", "IpAddress", "MibIdentifier", "enterprises", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraEPSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 12))
teraLevel1EPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 12, 1), )
if mibBuilder.loadTexts: teraLevel1EPSConfigTable.setStatus('mandatory')
teraLevel1EPSConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1), ).setIndexNames((0, "TERAWAVE-teraEPS-MIB", "teraLevel1ConfigIndex"))
if mibBuilder.loadTexts: teraLevel1EPSConfigTableEntry.setStatus('mandatory')
teraLevel1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLevel1ConfigIndex.setStatus('mandatory')
teraLevel1ProtectingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLevel1ProtectingUnit.setStatus('mandatory')
teraLevel1AdminProtectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("manual-w2p", 1), ("force-w2p", 2), ("lock", 3), ("release", 4), ("unlock", 5), ("manual-p2w", 6), ("force-p2w", 7), ("not-used", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLevel1AdminProtectSwitch.setStatus('mandatory')
teraLevel1AdminProtectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("working", 1), ("protection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLevel1AdminProtectStatus.setStatus('mandatory')
teraLevel1AdminProtectSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("forced", 1), ("locked", 2), ("manual", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLevel1AdminProtectSwitchReason.setStatus('mandatory')
teraLevel1ProtectSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLevel1ProtectSwitchState.setStatus('mandatory')
teraLevel1OperProtectSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLevel1OperProtectSwitchReason.setStatus('mandatory')
teraLevel1OperProtectSwitchSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLevel1OperProtectSwitchSource.setStatus('mandatory')
teraLinkEPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 12, 2), )
if mibBuilder.loadTexts: teraLinkEPSConfigTable.setStatus('mandatory')
teraLinkEPSConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1), ).setIndexNames((0, "TERAWAVE-teraEPS-MIB", "teraLevel1ConfigIndex"), (0, "TERAWAVE-teraEPS-MIB", "teraPonIndex"))
if mibBuilder.loadTexts: teraLinkEPSConfigTableEntry.setStatus('mandatory')
teraLinkProtectingUnitLevel1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLinkProtectingUnitLevel1Index.setStatus('mandatory')
teraLinkProtectingUnitPonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLinkProtectingUnitPonIndex.setStatus('mandatory')
teraLinkAdminProtectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("manual-w2p", 1), ("force-w2p", 2), ("lock", 3), ("release", 4), ("unlock", 5), ("manual-p2w", 6), ("force-p2w", 7), ("not-used", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLinkAdminProtectSwitch.setStatus('mandatory')
teraLinkAdminProtectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("working", 1), ("protection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLinkAdminProtectStatus.setStatus('mandatory')
teraLinkAdminProtectSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("forced", 1), ("locked", 2), ("manual", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkAdminProtectSwitchReason.setStatus('mandatory')
teraLinkCardEPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 12, 3), )
if mibBuilder.loadTexts: teraLinkCardEPSConfigTable.setStatus('mandatory')
teraLinkCardEPSConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1), ).setIndexNames((0, "TERAWAVE-teraEPS-MIB", "teraLevel1ConfigIndex"), (0, "TERAWAVE-teraEPS-MIB", "teraPonIndex"), (0, "TERAWAVE-teraEPS-MIB", "teraNELevel2Slot"))
if mibBuilder.loadTexts: teraLinkCardEPSConfigTableEntry.setStatus('mandatory')
teraLinkCardProtectingUnitLevel1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardProtectingUnitLevel1Index.setStatus('mandatory')
teraLinkCardProtectingUnitPonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardProtectingUnitPonIndex.setStatus('mandatory')
teraLinkCardProtectingUnitLevel2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardProtectingUnitLevel2Index.setStatus('mandatory')
teraLinkCardAdminProtectSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("manual-w2p", 1), ("force-w2p", 2), ("lock", 3), ("release", 4), ("unlock", 5), ("manual-p2w", 6), ("force-p2w", 7), ("not-used", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLinkCardAdminProtectSwitch.setStatus('mandatory')
teraLinkCardAdminProtectSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("forced", 1), ("locked", 2), ("manual", 3), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardAdminProtectSwitchReason.setStatus('mandatory')
teraLinkCardProtectSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardProtectSwitchState.setStatus('mandatory')
teraLinkCardOperProtectSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardOperProtectSwitchReason.setStatus('mandatory')
teraLinkCardOperProtectSwitchSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardOperProtectSwitchSource.setStatus('mandatory')
teraLinkCardAdminProtectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLinkCardAdminProtectStatus.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teraEPS-MIB", teraLinkCardProtectingUnitLevel1Index=teraLinkCardProtectingUnitLevel1Index, teraLinkProtectingUnitLevel1Index=teraLinkProtectingUnitLevel1Index, teraLinkCardAdminProtectSwitch=teraLinkCardAdminProtectSwitch, teraLinkCardEPSConfigTableEntry=teraLinkCardEPSConfigTableEntry, teraLinkCardAdminProtectSwitchReason=teraLinkCardAdminProtectSwitchReason, teraLinkAdminProtectSwitchReason=teraLinkAdminProtectSwitchReason, teraLinkCardAdminProtectStatus=teraLinkCardAdminProtectStatus, teraLevel1ConfigIndex=teraLevel1ConfigIndex, teraLinkProtectingUnitPonIndex=teraLinkProtectingUnitPonIndex, teraLinkCardProtectingUnitLevel2Index=teraLinkCardProtectingUnitLevel2Index, teraLevel1AdminProtectSwitch=teraLevel1AdminProtectSwitch, teraLinkCardProtectSwitchState=teraLinkCardProtectSwitchState, teraLevel1OperProtectSwitchSource=teraLevel1OperProtectSwitchSource, teraLinkEPSConfigTableEntry=teraLinkEPSConfigTableEntry, teraLinkEPSConfigTable=teraLinkEPSConfigTable, teraLevel1AdminProtectStatus=teraLevel1AdminProtectStatus, teraLevel1OperProtectSwitchReason=teraLevel1OperProtectSwitchReason, teraLinkAdminProtectSwitch=teraLinkAdminProtectSwitch, teraEPSGroup=teraEPSGroup, teraLinkAdminProtectStatus=teraLinkAdminProtectStatus, teraLevel1ProtectingUnit=teraLevel1ProtectingUnit, terawave=terawave, teraLevel1AdminProtectSwitchReason=teraLevel1AdminProtectSwitchReason, teraLevel1EPSConfigTableEntry=teraLevel1EPSConfigTableEntry, teraLevel1ProtectSwitchState=teraLevel1ProtectSwitchState, teraLinkCardOperProtectSwitchReason=teraLinkCardOperProtectSwitchReason, teraLinkCardOperProtectSwitchSource=teraLinkCardOperProtectSwitchSource, teraLinkCardEPSConfigTable=teraLinkCardEPSConfigTable, teraLevel1EPSConfigTable=teraLevel1EPSConfigTable, teraLinkCardProtectingUnitPonIndex=teraLinkCardProtectingUnitPonIndex)
