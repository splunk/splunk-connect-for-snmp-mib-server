#
# PySNMP MIB module ALTEON-ASF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-ASF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:05:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
firewall, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "firewall")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, ModuleIdentity, Counter64, IpAddress, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Gauge32, Integer32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "ModuleIdentity", "Counter64", "IpAddress", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Gauge32", "Integer32", "Unsigned32", "ObjectIdentity")
TextualConvention, TimeStamp, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue", "MacAddress")
alteonAsfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1))
alteonAsfMIB.setRevisions(('1902-03-11 00:00',))
if mibBuilder.loadTexts: alteonAsfMIB.setLastUpdated('0203140000Z')
if mibBuilder.loadTexts: alteonAsfMIB.setOrganization('Alteon WebSystems')
asfStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9))
if mibBuilder.loadTexts: asfStatistics.setStatus('current')
asfNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12))
if mibBuilder.loadTexts: asfNotifications.setStatus('current')
asfEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1))
if mibBuilder.loadTexts: asfEvents.setStatus('current')
asfAlarms = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2))
if mibBuilder.loadTexts: asfAlarms.setStatus('current')
asfNotificationObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13))
if mibBuilder.loadTexts: asfNotificationObjs.setStatus('current')
deviceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceIpAddress.setStatus('current')
deviceTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 2), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceTimeStamp.setStatus('current')
infoString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoString.setStatus('current')
memoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: memoryUsed.setStatus('current')
memoryUsageType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percentage", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: memoryUsageType.setStatus('current')
memoryUsageUnit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kb", 1), ("mb", 2), ("gb", 3), ("none", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: memoryUsageUnit.setStatus('current')
alarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 13, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('current')
asfAcceleratorAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 1)).setObjects(("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfAcceleratorAddedTrap.setStatus('current')
asfAcceleratorRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 2)).setObjects(("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfAcceleratorRemovedTrap.setStatus('current')
asfExtraAcceleratorDetected = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 3)).setObjects(("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfExtraAcceleratorDetected.setStatus('current')
asfAcceleratorConnEstablished = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 4)).setObjects(("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfAcceleratorConnEstablished.setStatus('current')
asfConfigUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 8)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfConfigUpdateSuccess.setStatus('current')
asfConfigUpdateFail = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 9)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "deviceMACAddress"))
if mibBuilder.loadTexts: asfConfigUpdateFail.setStatus('current')
asfFirewallStarted = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 1, 10)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"))
if mibBuilder.loadTexts: asfFirewallStarted.setStatus('current')
asfIsdFirewallFail = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 1)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"))
if mibBuilder.loadTexts: asfIsdFirewallFail.setStatus('current')
asfWebServerFail = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 2)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"))
if mibBuilder.loadTexts: asfWebServerFail.setStatus('current')
asfWebServerStart = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 3)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"))
if mibBuilder.loadTexts: asfWebServerStart.setStatus('current')
asfFileSystemWarning = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 5)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "infoString"), ("ALTEON-ASF-MIB", "memoryUsed"))
if mibBuilder.loadTexts: asfFileSystemWarning.setStatus('current')
asfFileSystemCritical = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 6)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "infoString"), ("ALTEON-ASF-MIB", "memoryUsed"))
if mibBuilder.loadTexts: asfFileSystemCritical.setStatus('current')
asfMemoryWarning = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 7)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "memoryUsed"))
if mibBuilder.loadTexts: asfMemoryWarning.setStatus('current')
asfMemoryCritical = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 8)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"), ("ALTEON-ASF-MIB", "memoryUsed"))
if mibBuilder.loadTexts: asfMemoryCritical.setStatus('current')
asfIsdStateDown = NotificationType((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 12, 2, 9)).setObjects(("ALTEON-ASF-MIB", "deviceIpAddress"))
if mibBuilder.loadTexts: asfIsdStateDown.setStatus('current')
asfPortStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1))
if mibBuilder.loadTexts: asfPortStats.setStatus('current')
asfPortNetStatsTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortNetStatsTime.setStatus('current')
asfPortNetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2), )
if mibBuilder.loadTexts: asfPortNetStatsTable.setStatus('current')
asfPortNetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1), ).setIndexNames((0, "ALTEON-ASF-MIB", "asfPortCountIndex"))
if mibBuilder.loadTexts: asfPortNetStatsEntry.setStatus('current')
asfPortCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortCountIndex.setStatus('current')
asfPortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInBytes.setStatus('current')
asfPortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutBytes.setStatus('current')
asfPortInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInPackets.setStatus('current')
asfPortOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutPackets.setStatus('current')
asfPortInUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInUcastPackets.setStatus('current')
asfPortOutUcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutUcastPackets.setStatus('current')
asfPortInBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInBcastPackets.setStatus('current')
asfPortOutBcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutBcastPackets.setStatus('current')
asfPortInMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInMcastPackets.setStatus('current')
asfPortOutMcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutMcastPackets.setStatus('current')
asfPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInDiscards.setStatus('current')
asfPortOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutDiscards.setStatus('current')
asfPortInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInErrors.setStatus('current')
asfPortOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortOutErrors.setStatus('current')
asfPortInUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfPortInUnknowns.setStatus('current')
asfIsdStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2))
if mibBuilder.loadTexts: asfIsdStats.setStatus('current')
asfIsdSessStatsTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfIsdSessStatsTime.setStatus('current')
asfIsdSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 2), )
if mibBuilder.loadTexts: asfIsdSessStatsTable.setStatus('current')
asfIsdSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 2, 1), ).setIndexNames((0, "ALTEON-ASF-MIB", "asfIsdCountIndex"))
if mibBuilder.loadTexts: asfIsdSessStatsEntry.setStatus('current')
asfIsdCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfIsdCountIndex.setStatus('current')
asfIsdIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfIsdIPAddress.setStatus('current')
asfNoOfSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 3, 3, 1, 9, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asfNoOfSessions.setStatus('current')
mibBuilder.exportSymbols("ALTEON-ASF-MIB", deviceMACAddress=deviceMACAddress, asfAlarms=asfAlarms, asfIsdStats=asfIsdStats, asfAcceleratorRemovedTrap=asfAcceleratorRemovedTrap, asfFirewallStarted=asfFirewallStarted, asfIsdSessStatsTime=asfIsdSessStatsTime, asfPortInErrors=asfPortInErrors, memoryUsed=memoryUsed, asfIsdCountIndex=asfIsdCountIndex, asfWebServerFail=asfWebServerFail, asfIsdSessStatsEntry=asfIsdSessStatsEntry, asfPortCountIndex=asfPortCountIndex, PYSNMP_MODULE_ID=alteonAsfMIB, alteonAsfMIB=alteonAsfMIB, asfPortOutErrors=asfPortOutErrors, asfStatistics=asfStatistics, asfNoOfSessions=asfNoOfSessions, asfIsdSessStatsTable=asfIsdSessStatsTable, asfPortInBcastPackets=asfPortInBcastPackets, asfPortOutBcastPackets=asfPortOutBcastPackets, asfMemoryCritical=asfMemoryCritical, asfAcceleratorConnEstablished=asfAcceleratorConnEstablished, memoryUsageUnit=memoryUsageUnit, asfEvents=asfEvents, asfPortOutBytes=asfPortOutBytes, asfPortStats=asfPortStats, asfPortInUcastPackets=asfPortInUcastPackets, asfPortNetStatsEntry=asfPortNetStatsEntry, asfPortInMcastPackets=asfPortInMcastPackets, asfPortInPackets=asfPortInPackets, asfWebServerStart=asfWebServerStart, asfPortOutMcastPackets=asfPortOutMcastPackets, asfPortNetStatsTable=asfPortNetStatsTable, asfIsdStateDown=asfIsdStateDown, deviceTimeStamp=deviceTimeStamp, asfPortOutPackets=asfPortOutPackets, asfPortInDiscards=asfPortInDiscards, asfIsdFirewallFail=asfIsdFirewallFail, asfFileSystemCritical=asfFileSystemCritical, asfPortInBytes=asfPortInBytes, asfNotificationObjs=asfNotificationObjs, asfIsdIPAddress=asfIsdIPAddress, asfConfigUpdateFail=asfConfigUpdateFail, asfPortNetStatsTime=asfPortNetStatsTime, asfPortInUnknowns=asfPortInUnknowns, asfPortOutUcastPackets=asfPortOutUcastPackets, asfAcceleratorAddedTrap=asfAcceleratorAddedTrap, asfFileSystemWarning=asfFileSystemWarning, deviceIpAddress=deviceIpAddress, asfExtraAcceleratorDetected=asfExtraAcceleratorDetected, asfPortOutDiscards=asfPortOutDiscards, infoString=infoString, asfConfigUpdateSuccess=asfConfigUpdateSuccess, alarmSeverity=alarmSeverity, asfNotifications=asfNotifications, asfMemoryWarning=asfMemoryWarning, memoryUsageType=memoryUsageType)
