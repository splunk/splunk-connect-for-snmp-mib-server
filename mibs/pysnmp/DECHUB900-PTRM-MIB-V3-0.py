#
# PySNMP MIB module DECHUB900-PTRM-MIB-V3-0 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DECHUB900-PTRM-MIB-V3-0
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter32, iso, NotificationType, ModuleIdentity, IpAddress, TimeTicks, MibIdentifier, Bits, Counter64, Unsigned32, Gauge32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter32", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "TimeTicks", "MibIdentifier", "Bits", "Counter64", "Unsigned32", "Gauge32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
decHub900 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11))
ptrm = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3))
ptrmBase = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 1))
ptrmBaseForceSpeed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notForced", 1), ("force-4Mbps", 2), ("force-16Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmBaseForceSpeed.setStatus('mandatory')
ptrmBaseSpeed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoBauding", 1), ("speed-4Mbps", 2), ("speed-16Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmBaseSpeed.setStatus('mandatory')
ptrmBaseNumLobes = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmBaseNumLobes.setStatus('mandatory')
ptrmTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2), )
if mibBuilder.loadTexts: ptrmTrunkTable.setStatus('mandatory')
ptrmTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1), ).setIndexNames((0, "DECHUB900-PTRM-MIB-V3-0", "ptrmTrunkType"))
if mibBuilder.loadTexts: ptrmTrunkEntry.setStatus('mandatory')
ptrmTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("copperRingIn", 1), ("copperRingOut", 2), ("hubA", 3), ("hubB", 4), ("fiberRingIn", 5), ("fiberRingOut", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkType.setStatus('mandatory')
ptrmTrunkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inserted", 1), ("wrapped", 2), ("notPresent", 3), ("badSpeed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkOperStatus.setStatus('mandatory')
ptrmTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmTrunkAdminStatus.setStatus('mandatory')
ptrmTrunkMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("otherMedia", 1), ("utpMedia", 2), ("stpMedia", 3), ("ibmMedia", 4), ("fiberMedia", 5), ("hubDirect", 6), ("hubTCU", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkMedia.setStatus('mandatory')
ptrmTrunkAutoWrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmTrunkAutoWrapEnable.setStatus('mandatory')
ptrmTrunkAutoPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkAutoPartitionStatus.setStatus('mandatory')
ptrmTrunkDetectedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("speed-4Mbps", 2), ("speed-16Mbps", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkDetectedSpeed.setStatus('mandatory')
ptrmTrunkPhantomDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("noDrive", 2), ("driveReceive", 3), ("wireFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkPhantomDrive.setStatus('mandatory')
ptrmTrunkPhantomDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noDetectPhantom", 2), ("detectPhantom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmTrunkPhantomDetect.setStatus('mandatory')
ptrmLobeTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3), )
if mibBuilder.loadTexts: ptrmLobeTable.setStatus('mandatory')
ptrmLobeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1), ).setIndexNames((0, "DECHUB900-PTRM-MIB-V3-0", "ptrmLobeIndex"))
if mibBuilder.loadTexts: ptrmLobeEntry.setStatus('mandatory')
ptrmLobeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobeIndex.setStatus('mandatory')
ptrmLobeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inserted", 1), ("wrapped", 2), ("notPresent", 3), ("badSpeed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobeOperStatus.setStatus('mandatory')
ptrmLobeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmLobeAdminStatus.setStatus('mandatory')
ptrmLobeMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("otherMedia", 1), ("utpMedia", 2), ("stpMedia", 3), ("ibmMedia", 4), ("fiberMedia", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobeMedia.setStatus('mandatory')
ptrmLobeAutoWrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmLobeAutoWrapEnable.setStatus('mandatory')
ptrmLobeAutoPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobeAutoPartitionStatus.setStatus('mandatory')
ptrmLobeDetectedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("speed-4Mbps", 2), ("speed-16Mbps", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobeDetectedSpeed.setStatus('mandatory')
ptrmLobePhantomDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("notApplicable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobePhantomDrive.setStatus('mandatory')
ptrmLobePhantomDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noDetectPhantom", 2), ("detectPhantom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmLobePhantomDetect.setStatus('mandatory')
ptrmMacTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4), )
if mibBuilder.loadTexts: ptrmMacTable.setStatus('mandatory')
ptrmMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4, 1), ).setIndexNames((0, "DECHUB900-PTRM-MIB-V3-0", "ptrmMacIndex"))
if mibBuilder.loadTexts: ptrmMacEntry.setStatus('mandatory')
ptrmMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMacIndex.setStatus('mandatory')
ptrmMacRingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMacRingInterface.setStatus('mandatory')
ptrmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMacAddress.setStatus('mandatory')
ptrmMacPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMacPosition.setStatus('mandatory')
ptrmMultiBp = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5))
ptrmNumBackplanePorts = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmNumBackplanePorts.setStatus('mandatory')
ptrmNumLobePorts = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmNumLobePorts.setStatus('mandatory')
ptrmMultiBpPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 3), )
if mibBuilder.loadTexts: ptrmMultiBpPortTable.setStatus('mandatory')
ptrmMultiBpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 3, 1), ).setIndexNames((0, "DECHUB900-PTRM-MIB-V3-0", "ptrmMultiBpPortIndex"))
if mibBuilder.loadTexts: ptrmMultiBpPortEntry.setStatus('mandatory')
ptrmMultiBpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMultiBpPortIndex.setStatus('mandatory')
ptrmMultiBpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("speed-4Mbps", 2), ("speed-16Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ptrmMultiBpPortSpeed.setStatus('mandatory')
ptrmMultiBpPortForceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 11, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notForced", 1), ("force-4Mbps", 2), ("force-16Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptrmMultiBpPortForceSpeed.setStatus('mandatory')
mibBuilder.exportSymbols("DECHUB900-PTRM-MIB-V3-0", ptrmLobePhantomDetect=ptrmLobePhantomDetect, ptrmLobeOperStatus=ptrmLobeOperStatus, ptrmNumLobePorts=ptrmNumLobePorts, ptrmLobeTable=ptrmLobeTable, ptrmTrunkPhantomDrive=ptrmTrunkPhantomDrive, ptrmNumBackplanePorts=ptrmNumBackplanePorts, ema=ema, ptrmTrunkTable=ptrmTrunkTable, ptrmMacEntry=ptrmMacEntry, ptrmBaseSpeed=ptrmBaseSpeed, ptrmMultiBpPortForceSpeed=ptrmMultiBpPortForceSpeed, ptrmTrunkType=ptrmTrunkType, ptrmMacPosition=ptrmMacPosition, ptrmMultiBpPortSpeed=ptrmMultiBpPortSpeed, ptrmTrunkAutoWrapEnable=ptrmTrunkAutoWrapEnable, ptrmMultiBp=ptrmMultiBp, ptrmBaseForceSpeed=ptrmBaseForceSpeed, ptrmTrunkPhantomDetect=ptrmTrunkPhantomDetect, ptrmLobeAutoWrapEnable=ptrmLobeAutoWrapEnable, ptrmLobeEntry=ptrmLobeEntry, decHub900=decHub900, ptrmMacTable=ptrmMacTable, ptrmMultiBpPortIndex=ptrmMultiBpPortIndex, ptrmMultiBpPortTable=ptrmMultiBpPortTable, ptrmLobePhantomDrive=ptrmLobePhantomDrive, ptrmTrunkEntry=ptrmTrunkEntry, ptrmMacIndex=ptrmMacIndex, ptrmBase=ptrmBase, dec=dec, ptrmBaseNumLobes=ptrmBaseNumLobes, ptrmTrunkOperStatus=ptrmTrunkOperStatus, ptrmLobeMedia=ptrmLobeMedia, ptrmMacAddress=ptrmMacAddress, ptrmTrunkAutoPartitionStatus=ptrmTrunkAutoPartitionStatus, ptrmMacRingInterface=ptrmMacRingInterface, ptrmLobeIndex=ptrmLobeIndex, ptrm=ptrm, ptrmMultiBpPortEntry=ptrmMultiBpPortEntry, ptrmTrunkDetectedSpeed=ptrmTrunkDetectedSpeed, ptrmLobeAutoPartitionStatus=ptrmLobeAutoPartitionStatus, decMIBextension=decMIBextension, ptrmTrunkAdminStatus=ptrmTrunkAdminStatus, ptrmTrunkMedia=ptrmTrunkMedia, ptrmLobeAdminStatus=ptrmLobeAdminStatus, ptrmLobeDetectedSpeed=ptrmLobeDetectedSpeed)
