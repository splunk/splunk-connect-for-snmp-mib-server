#
# PySNMP MIB module ALCATEL-IND1-VLAN-STACKING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-VLAN-STACKING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1VlanStackingMgt, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1VlanStackingMgt")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, NotificationType, iso, TimeTicks, Unsigned32, ModuleIdentity, MibIdentifier, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "iso", "TimeTicks", "Unsigned32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "IpAddress", "Counter64")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1VLANStackingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1))
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIB.setOrganization('Alcatel-Lucent')
alcatelIND1VLANStackingMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1))
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIBObjects.setStatus('current')
alcatelIND1VLANStackingMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2))
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIBConformance.setStatus('current')
alcatelIND1VLANStackingMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIBGroups.setStatus('current')
alcatelIND1VLANStackingMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1VLANStackingMIBCompliances.setStatus('current')
alaVlanStackingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1))
alaVstkPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaVstkPortTable.setStatus('current')
alaVstkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortNumber"))
if mibBuilder.loadTexts: alaVstkPortEntry.setStatus('current')
alaVstkPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVstkPortNumber.setStatus('current')
alaVstkPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userCustomer", 1), ("userProvider", 2), ("network", 3))).clone('userCustomer')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortType.setStatus('current')
alaVstkPortVendorTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 3), Integer32().clone(34984)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortVendorTpid.setStatus('current')
alaVstkPortBpduTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flooded", 1), ("dropped", 2))).clone('flooded')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortBpduTreatment.setStatus('current')
alaVstkPortAcceptFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("all", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortAcceptFrameType.setStatus('current')
alaVstkPortLookupMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortLookupMiss.setStatus('current')
alaVstkPortDefaultSvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortDefaultSvlan.setStatus('current')
alaVstkPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortRowStatus.setStatus('current')
alaVstkPortLegacyStpBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkPortLegacyStpBpdu.setStatus('current')
alaVlanStackingSvlanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2))
alaVstkSvlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaVstkSvlanPortTable.setStatus('current')
alaVstkSvlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortSvlanNumber"), (0, "ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortPortNumber"), (0, "ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortCvlanNumber"))
if mibBuilder.loadTexts: alaVstkSvlanPortEntry.setStatus('current')
alaVstkSvlanPortSvlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVstkSvlanPortSvlanNumber.setStatus('current')
alaVstkSvlanPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVstkSvlanPortPortNumber.setStatus('current')
alaVstkSvlanPortCvlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVstkSvlanPortCvlanNumber.setStatus('current')
alaVstkSvlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doubleTag", 1), ("translate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkSvlanPortMode.setStatus('current')
alaVstkSvlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVstkSvlanPortRowStatus.setStatus('current')
alcatelIND1VLANStackingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VLAN-STACKING-MIB", "vlanStackingPortGroup"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "vlanStackingSvlanPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1VLANStackingMIBCompliance = alcatelIND1VLANStackingMIBCompliance.setStatus('current')
vlanStackingPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortNumber"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortType"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortVendorTpid"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortBpduTreatment"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortAcceptFrameType"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortLookupMiss"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortDefaultSvlan"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanStackingPortGroup = vlanStackingPortGroup.setStatus('current')
vlanStackingSvlanPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 37, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortSvlanNumber"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortPortNumber"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortCvlanNumber"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortMode"), ("ALCATEL-IND1-VLAN-STACKING-MIB", "alaVstkSvlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanStackingSvlanPortGroup = vlanStackingSvlanPortGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-VLAN-STACKING-MIB", alcatelIND1VLANStackingMIBConformance=alcatelIND1VLANStackingMIBConformance, alaVstkPortLegacyStpBpdu=alaVstkPortLegacyStpBpdu, alaVstkSvlanPortMode=alaVstkSvlanPortMode, alcatelIND1VLANStackingMIB=alcatelIND1VLANStackingMIB, alaVstkSvlanPortRowStatus=alaVstkSvlanPortRowStatus, alcatelIND1VLANStackingMIBCompliance=alcatelIND1VLANStackingMIBCompliance, alaVstkPortLookupMiss=alaVstkPortLookupMiss, alaVstkSvlanPortSvlanNumber=alaVstkSvlanPortSvlanNumber, alaVstkSvlanPortPortNumber=alaVstkSvlanPortPortNumber, vlanStackingPortGroup=vlanStackingPortGroup, alcatelIND1VLANStackingMIBCompliances=alcatelIND1VLANStackingMIBCompliances, vlanStackingSvlanPortGroup=vlanStackingSvlanPortGroup, PYSNMP_MODULE_ID=alcatelIND1VLANStackingMIB, alaVstkPortEntry=alaVstkPortEntry, alaVstkSvlanPortTable=alaVstkSvlanPortTable, alaVstkSvlanPortCvlanNumber=alaVstkSvlanPortCvlanNumber, alaVstkPortNumber=alaVstkPortNumber, alaVstkPortAcceptFrameType=alaVstkPortAcceptFrameType, alaVstkPortBpduTreatment=alaVstkPortBpduTreatment, alcatelIND1VLANStackingMIBGroups=alcatelIND1VLANStackingMIBGroups, alcatelIND1VLANStackingMIBObjects=alcatelIND1VLANStackingMIBObjects, alaVlanStackingPort=alaVlanStackingPort, alaVstkPortVendorTpid=alaVstkPortVendorTpid, alaVstkPortTable=alaVstkPortTable, alaVstkPortDefaultSvlan=alaVstkPortDefaultSvlan, alaVstkPortType=alaVstkPortType, alaVstkSvlanPortEntry=alaVstkSvlanPortEntry, alaVlanStackingSvlanPort=alaVlanStackingSvlanPort, alaVstkPortRowStatus=alaVstkPortRowStatus)
