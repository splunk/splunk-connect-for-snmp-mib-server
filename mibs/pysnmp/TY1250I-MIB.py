#
# PySNMP MIB module TY1250I-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TY1250I-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, NotificationType, ObjectIdentity, ModuleIdentity, Bits, Integer32, MibIdentifier, iso, Gauge32, Counter64, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Bits", "Integer32", "MibIdentifier", "iso", "Gauge32", "Counter64", "enterprises", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
dsucsu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 1))
tyview = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 2))
ty1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3))
ty1250SysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 1))
ty1250SysType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysType.setStatus('mandatory')
ty1250SysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysSoftRev.setStatus('mandatory')
ty1250SysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysHardRev.setStatus('mandatory')
ty1250SysNumNetInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumNetInstalled.setStatus('mandatory')
ty1250SysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumDteInstalled.setStatus('mandatory')
ty1250SysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250SysNumMaintInstalled.setStatus('mandatory')
ty1250SysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250SysName.setStatus('mandatory')
ty1250CfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 2))
ty1250CfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgAppClockSource.setStatus('mandatory')
ty1250CfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgAppCircuitId.setStatus('mandatory')
ty1250CfgNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 3))
ty1250CfgNetType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("switch56", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetType.setStatus('mandatory')
ty1250CfgNetGlareType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external-glare", 1), ("internal-glare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetGlareType.setStatus('mandatory')
ty1250CfgNetEchoCan = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore-echo-cancellers", 1), ("disable-echo-cancellers", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetEchoCan.setStatus('mandatory')
ty1250CfgNetAnsMode = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual-answer", 1), ("automatic-answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetAnsMode.setStatus('mandatory')
ty1250CfgNetDialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetDialTimeout.setStatus('mandatory')
ty1250CfgNetNumRedial = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetNumRedial.setStatus('mandatory')
ty1250CfgNetRedialDelay = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetRedialDelay.setStatus('mandatory')
ty1250CfgNetDefNum2Dial = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetDefNum2Dial.setStatus('mandatory')
ty1250CfgNetBPVThresholding = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thresholding-at-10E-4", 1), ("disable-thresholding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgNetBPVThresholding.setStatus('mandatory')
ty1250CfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 4))
ty1250CfgDteType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v35", 2), ("rs449", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CfgDteType.setStatus('mandatory')
ty1250CfgDteClockInvert = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal-dte-clock", 1), ("invert-dte-clock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDteClockInvert.setStatus('mandatory')
ty1250CfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop1-timing", 1), ("loop2-timing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDteTiming.setStatus('mandatory')
ty1250CfgDialTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 5))
ty1250CfgDialButton = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-button", 1), ("disable-button", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialButton.setStatus('mandatory')
ty1250CfgDialDtr = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-dtr", 1), ("disable-dtr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialDtr.setStatus('mandatory')
ty1250CfgDialRtsDisc = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rts", 1), ("disable-rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialRtsDisc.setStatus('mandatory')
ty1250CfgDialRi = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-ri", 1), ("disable-ri", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgDialRi.setStatus('mandatory')
ty1250CfgMaintTable = MibTable((1, 3, 6, 1, 4, 1, 466, 3, 6), )
if mibBuilder.loadTexts: ty1250CfgMaintTable.setStatus('mandatory')
ty1250CfgMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 3, 6, 1), ).setIndexNames((0, "TY1250I-MIB", "ty1250CfgMaintIndex"))
if mibBuilder.loadTexts: ty1250CfgMaintEntry.setStatus('mandatory')
ty1250CfgMaintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CfgMaintIndex.setStatus('mandatory')
ty1250CfgMaintMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 7, 8))).clone(namedValues=NamedValues(("ascii-vt100", 4), ("slip", 7), ("cslip", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintMode.setStatus('mandatory')
ty1250CfgMaintBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintBaud.setStatus('mandatory')
ty1250CfgMaintDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintDataBits.setStatus('mandatory')
ty1250CfgMaintStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintStopBits.setStatus('mandatory')
ty1250CfgMaintParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintParity.setStatus('mandatory')
ty1250CfgMaintFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-flow-control", 1), ("software-flow-control", 2), ("hardware-flow-control", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgMaintFlowCtrl.setStatus('mandatory')
ty1250CfgSlipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 8))
ty1250CfgSlipMyIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMyIP.setStatus('mandatory')
ty1250CfgSlipPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipPeerIP.setStatus('mandatory')
ty1250CfgSlipMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMask.setStatus('mandatory')
ty1250CfgSlipMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSlipMaxMTU.setStatus('mandatory')
ty1250CfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 14))
ty1250CfgSnmpManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 14, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgSnmpManagerIP.setStatus('mandatory')
ty1250CfgTelnetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 17))
ty1250CfgTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgTelnetEnable.setStatus('mandatory')
ty1250CfgTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CfgTelnetAutoLogOut.setStatus('mandatory')
ty1250CallTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 9))
ty1250CallState = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2), ("answer", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250CallState.setStatus('mandatory')
ty1250CallStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 253, 254))).clone(namedValues=NamedValues(("none", 1), ("idle", 2), ("dialing", 3), ("busy", 4), ("waiting-for-redial", 5), ("redialing", 6), ("active", 7), ("incoming-call", 8), ("line-in-maintenance", 253), ("line-down", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CallStatus.setStatus('mandatory')
ty1250CallNumber = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250CallNumber.setStatus('mandatory')
ty1250CallUpTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 9, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250CallUpTime.setStatus('mandatory')
ty1250DiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 10))
ty1250DiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagUnitLocLoop.setStatus('mandatory')
ty1250DiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagUnitReset.setStatus('mandatory')
ty1250DiagNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 11))
ty1250DiagNetLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in-sync", 1), ("out-of-service", 2), ("out-of-frame", 3), ("bpv-threshold-failure", 4), ("loss-of-signal", 5), ("simplex-current-loopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagNetLineStatus.setStatus('mandatory')
ty1250DiagNetLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagNetLclLpbk.setStatus('mandatory')
ty1250DiagNetRmtLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-loop-from-remote", 1), ("simplex-current-loop", 2), ("non-latching-loop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagNetRmtLpbk.setStatus('mandatory')
ty1250DiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 12))
ty1250DiagDteSigRTS = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rts-signal-on", 1), ("rts-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteSigRTS.setStatus('mandatory')
ty1250DiagDteSigDTR = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-signal-on", 1), ("dtr-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteSigDTR.setStatus('mandatory')
ty1250DiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ty1250DiagDteLclLpbk.setStatus('mandatory')
ty1250DiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteV54Lpbk.setStatus('mandatory')
ty1250DiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagDteRmtV54Lpbk.setStatus('mandatory')
ty1250DiagDteBerState = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start-bert-test", 1), ("stop-bert-test", 2), ("inject-error-bert-test", 3), ("clear-error-bert-test", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250DiagDteBerState.setStatus('mandatory')
ty1250DiagDteBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerStatus.setStatus('mandatory')
ty1250DiagDteBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerErrors.setStatus('mandatory')
ty1250DiagDteBerErrSec = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerErrSec.setStatus('mandatory')
ty1250DiagDteBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerTimeElaps.setStatus('mandatory')
ty1250DiagDteBerResyncs = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250DiagDteBerResyncs.setStatus('mandatory')
ty1250StatsDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 15))
ty1250StatsDteTxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsDteTxByteCount.setStatus('mandatory')
ty1250StatsDteRxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsDteRxByteCount.setStatus('mandatory')
ty1250StatsDteClearStats = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250StatsDteClearStats.setStatus('mandatory')
ty1250StatsNetTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 3, 16))
ty1250StatsNetLoopLength = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetLoopLength.setStatus('mandatory')
ty1250StatsNetBpvCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetBpvCount.setStatus('mandatory')
ty1250StatsNetTxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetTxByteCount.setStatus('mandatory')
ty1250StatsNetRxByteCount = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250StatsNetRxByteCount.setStatus('mandatory')
ty1250StatsNetClearStats = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ty1250StatsNetClearStats.setStatus('mandatory')
ty1250AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("line-failure", 1), ("line-in-service", 2), ("connected", 3), ("connect-failure", 4), ("incoming-call", 5), ("disconnected", 6), ("bad-config-in-set", 7), ("config-local-update", 8), ("bpv-threshold-exceeded", 9), ("bpv-threshold-acceptable", 10), ("local-unit-loopback-enabled", 11), ("local-unit-loopback-disabled", 12), ("local-network-loopback-enabled", 13), ("local-network-loopback-disabled", 14), ("remote-network-simplex-loopback-enabled", 15), ("remote-network-simplex-loopback-disabled", 16), ("remote-network-non-latching-loopback-enabled", 17), ("remote-network-non-latching-loopback-disabled", 18), ("v54-loop-up-initiated", 19), ("v54-loop-down-completed", 20), ("v54-loopback-enabled-by-remote", 21), ("v54-loopback-disabled-by-remote", 22), ("bert-test-pattern-initiated", 23), ("bert-test-pattern-completed", 24), ("local-dte-loopback-enabled", 25), ("local-dte-loopback-disabled", 26), ("local-unit-loopback-failure", 27), ("local-network-loopback-failure", 28), ("bert-test-pattern-failure", 29), ("local-dte-loopback-failure", 30), ("v54-loopback-failure", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ty1250AlarmType.setStatus('mandatory')
ty1250Trap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,0)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LineFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,1)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LineInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,2)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250ConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,3)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250ConnectFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,4)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250IncomingCallTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,5)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250DisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,6)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,7)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,8)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BPVThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,9)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BPVThresholdAcceptableTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,10)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,11)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,12)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,13)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,14)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250SimplexCurrentLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,15)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250SimplexCurrentLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,16)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250NonLatchingLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,17)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250NonLatchingLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,18)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250V54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,19)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250V54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,20)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250V54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,21)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250V54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,22)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,23)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,24)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,25)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,26)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,27)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,28)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250BertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,29)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250LocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,30)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
ty1250V54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 3) + (0,31)).setObjects(("TY1250I-MIB", "ty1250AlarmType"))
mibBuilder.exportSymbols("TY1250I-MIB", ty1250CfgDialRtsDisc=ty1250CfgDialRtsDisc, ty1250DiagNetRmtLpbk=ty1250DiagNetRmtLpbk, ty1250CallStatus=ty1250CallStatus, ty1250SysSoftRev=ty1250SysSoftRev, ty1250CfgSnmpManagerIP=ty1250CfgSnmpManagerIP, ty1250IncomingCallTrap=ty1250IncomingCallTrap, ty1250CfgMaintTable=ty1250CfgMaintTable, ty1250LocalDteLoopbackDisabledTrap=ty1250LocalDteLoopbackDisabledTrap, ty1250BertInitiatedTrap=ty1250BertInitiatedTrap, ty1250DiagNetLclLpbk=ty1250DiagNetLclLpbk, ty1250LocalUnitLoopbackEnabledTrap=ty1250LocalUnitLoopbackEnabledTrap, ty1250CfgMaintParity=ty1250CfgMaintParity, ty1250V54LoopDownCompletedTrap=ty1250V54LoopDownCompletedTrap, ty1250CfgSlipPeerIP=ty1250CfgSlipPeerIP, ty1250DisconnectedTrap=ty1250DisconnectedTrap, ty1250StatsDteClearStats=ty1250StatsDteClearStats, ty1250CfgNetDialTimeout=ty1250CfgNetDialTimeout, ty1250V54LoopbackDisabledTrap=ty1250V54LoopbackDisabledTrap, ty1250SysNumMaintInstalled=ty1250SysNumMaintInstalled, ty1250DiagNetLineStatus=ty1250DiagNetLineStatus, ty1250CallTable=ty1250CallTable, ty1250LocalDteLoopbackEnabledTrap=ty1250LocalDteLoopbackEnabledTrap, ty1250CfgDialButton=ty1250CfgDialButton, ty1250StatsDteTxByteCount=ty1250StatsDteTxByteCount, ty1250CallNumber=ty1250CallNumber, ty1250BPVThresholdAcceptableTrap=ty1250BPVThresholdAcceptableTrap, ty1250LineFailureTrap=ty1250LineFailureTrap, ty1250CfgMaintEntry=ty1250CfgMaintEntry, ty1250SysNumDteInstalled=ty1250SysNumDteInstalled, ty1250DiagUnitLocLoop=ty1250DiagUnitLocLoop, ty1250CfgDialTable=ty1250CfgDialTable, ty1250CfgDteType=ty1250CfgDteType, ty1250CfgMaintFlowCtrl=ty1250CfgMaintFlowCtrl, ty1250StatsNetRxByteCount=ty1250StatsNetRxByteCount, ty1250DiagDteBerStatus=ty1250DiagDteBerStatus, ty1250=ty1250, ty1250SysType=ty1250SysType, ty1250V54LoopbackFailedTrap=ty1250V54LoopbackFailedTrap, ty1250CallUpTime=ty1250CallUpTime, tyview=tyview, ty1250CfgDteClockInvert=ty1250CfgDteClockInvert, ty1250StatsDteTable=ty1250StatsDteTable, ty1250ConnectFailureTrap=ty1250ConnectFailureTrap, ty1250CfgNetRedialDelay=ty1250CfgNetRedialDelay, ty1250BertCompletedTrap=ty1250BertCompletedTrap, ty1250CfgMaintIndex=ty1250CfgMaintIndex, ty1250BPVThresholdExceededTrap=ty1250BPVThresholdExceededTrap, ty1250DiagDteBerErrSec=ty1250DiagDteBerErrSec, ty1250SysName=ty1250SysName, ty1250CfgTelnetAutoLogOut=ty1250CfgTelnetAutoLogOut, ty1250NonLatchingLoopbackEnabledTrap=ty1250NonLatchingLoopbackEnabledTrap, ty1250DiagDteBerState=ty1250DiagDteBerState, ty1250DiagDteBerResyncs=ty1250DiagDteBerResyncs, ty1250CfgSnmpTable=ty1250CfgSnmpTable, tylink=tylink, ty1250CfgSlipMyIP=ty1250CfgSlipMyIP, ty1250CfgNetType=ty1250CfgNetType, ty1250CfgNetDefNum2Dial=ty1250CfgNetDefNum2Dial, ty1250AlarmType=ty1250AlarmType, ty1250CfgAppCircuitId=ty1250CfgAppCircuitId, dsucsu=dsucsu, ty1250CfgSlipMask=ty1250CfgSlipMask, ty1250Trap=ty1250Trap, ty1250SysTable=ty1250SysTable, ty1250BadConfigTrap=ty1250BadConfigTrap, ty1250CfgDialRi=ty1250CfgDialRi, ty1250CfgAppClockSource=ty1250CfgAppClockSource, ty1250ConnectedTrap=ty1250ConnectedTrap, ty1250StatsNetTable=ty1250StatsNetTable, ty1250DiagDteTable=ty1250DiagDteTable, ty1250CfgNetGlareType=ty1250CfgNetGlareType, ty1250SimplexCurrentLoopbackEnabledTrap=ty1250SimplexCurrentLoopbackEnabledTrap, ty1250CfgSlipTable=ty1250CfgSlipTable, ty1250StatsDteRxByteCount=ty1250StatsDteRxByteCount, ty1250CfgNetNumRedial=ty1250CfgNetNumRedial, ty1250CfgMaintMode=ty1250CfgMaintMode, ty1250BertFailedTrap=ty1250BertFailedTrap, ty1250CfgSlipMaxMTU=ty1250CfgSlipMaxMTU, ty1250DiagDteLclLpbk=ty1250DiagDteLclLpbk, ty1250LocalNetLoopbackEnabledTrap=ty1250LocalNetLoopbackEnabledTrap, ty1250DiagDteSigDTR=ty1250DiagDteSigDTR, ty1250LocalNetLoopbackDisabledTrap=ty1250LocalNetLoopbackDisabledTrap, ty1250LocalConfigTrap=ty1250LocalConfigTrap, ty1250CfgNetBPVThresholding=ty1250CfgNetBPVThresholding, ty1250DiagNetTable=ty1250DiagNetTable, ty1250LocalNetLoopbackFailedTrap=ty1250LocalNetLoopbackFailedTrap, ty1250CallState=ty1250CallState, ty1250DiagDteV54Lpbk=ty1250DiagDteV54Lpbk, ty1250LineInServiceTrap=ty1250LineInServiceTrap, ty1250CfgTelnetTable=ty1250CfgTelnetTable, ty1250CfgDteTable=ty1250CfgDteTable, ty1250SysNumNetInstalled=ty1250SysNumNetInstalled, ty1250DiagUnitTable=ty1250DiagUnitTable, ty1250DiagDteBerErrors=ty1250DiagDteBerErrors, ty1250DiagDteBerTimeElaps=ty1250DiagDteBerTimeElaps, ty1250LocalUnitLoopbackDisabledTrap=ty1250LocalUnitLoopbackDisabledTrap, ty1250CfgNetEchoCan=ty1250CfgNetEchoCan, ty1250DiagUnitReset=ty1250DiagUnitReset, ty1250V54LoopbackEnabledTrap=ty1250V54LoopbackEnabledTrap, ty1250CfgDteTiming=ty1250CfgDteTiming, ty1250CfgMaintBaud=ty1250CfgMaintBaud, ty1250LocalUnitLoopbackFailedTrap=ty1250LocalUnitLoopbackFailedTrap, ty1250SimplexCurrentLoopbackDisabledTrap=ty1250SimplexCurrentLoopbackDisabledTrap, ty1250CfgMaintDataBits=ty1250CfgMaintDataBits, ty1250DiagDteSigRTS=ty1250DiagDteSigRTS, ty1250CfgNetAnsMode=ty1250CfgNetAnsMode, ty1250SysHardRev=ty1250SysHardRev, ty1250DiagDteRmtV54Lpbk=ty1250DiagDteRmtV54Lpbk, ty1250LocalDteLoopbackFailedTrap=ty1250LocalDteLoopbackFailedTrap, ty1250NonLatchingLoopbackDisabledTrap=ty1250NonLatchingLoopbackDisabledTrap, ty1250CfgAppTable=ty1250CfgAppTable, ty1250StatsNetTxByteCount=ty1250StatsNetTxByteCount, ty1250StatsNetLoopLength=ty1250StatsNetLoopLength, ty1250CfgNetTable=ty1250CfgNetTable, ty1250CfgMaintStopBits=ty1250CfgMaintStopBits, ty1250StatsNetBpvCount=ty1250StatsNetBpvCount, ty1250StatsNetClearStats=ty1250StatsNetClearStats, ty1250V54LoopUpInitiatedTrap=ty1250V54LoopUpInitiatedTrap, ty1250CfgTelnetEnable=ty1250CfgTelnetEnable, ty1250CfgDialDtr=ty1250CfgDialDtr)
