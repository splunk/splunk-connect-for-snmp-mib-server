#
# PySNMP MIB module HPN-ICF-VXLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-VXLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, Gauge32, MibIdentifier, Bits, ModuleIdentity, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, IpAddress, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Gauge32", "MibIdentifier", "Bits", "ModuleIdentity", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "IpAddress", "iso", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
hpnicfVxlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150))
hpnicfVxlan.setRevisions(('2013-11-21 09:00',))
if mibBuilder.loadTexts: hpnicfVxlan.setLastUpdated('201311210900Z')
if mibBuilder.loadTexts: hpnicfVxlan.setOrganization('')
hpnicfVxlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1))
hpnicfVxlanScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 1))
hpnicfVxlanLocalMacNotify = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVxlanLocalMacNotify.setStatus('current')
hpnicfVxlanRemoteMacLearn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVxlanRemoteMacLearn.setStatus('current')
hpnicfVxlanNextVxlanID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanNextVxlanID.setStatus('current')
hpnicfVxlanConfigured = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanConfigured.setStatus('current')
hpnicfVxlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2), )
if mibBuilder.loadTexts: hpnicfVxlanTable.setStatus('current')
hpnicfVxlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanID"))
if mibBuilder.loadTexts: hpnicfVxlanEntry.setStatus('current')
hpnicfVxlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfVxlanID.setStatus('current')
hpnicfVxlanAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanAddrType.setStatus('current')
hpnicfVxlanGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanGroupAddr.setStatus('current')
hpnicfVxlanSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanSourceAddr.setStatus('current')
hpnicfVxlanVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanVsiIndex.setStatus('current')
hpnicfVxlanRemoteMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanRemoteMacCount.setStatus('current')
hpnicfVxlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanRowStatus.setStatus('current')
hpnicfVxlanTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3), )
if mibBuilder.loadTexts: hpnicfVxlanTunnelTable.setStatus('current')
hpnicfVxlanTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanID"), (0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanTunnelID"))
if mibBuilder.loadTexts: hpnicfVxlanTunnelEntry.setStatus('current')
hpnicfVxlanTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfVxlanTunnelID.setStatus('current')
hpnicfVxlanTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanTunnelRowStatus.setStatus('current')
hpnicfVxlanTunnelOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanTunnelOctets.setStatus('current')
hpnicfVxlanTunnelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanTunnelPackets.setStatus('current')
hpnicfVxlanTunnelBoundTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 4), )
if mibBuilder.loadTexts: hpnicfVxlanTunnelBoundTable.setStatus('current')
hpnicfVxlanTunnelBoundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanTunnelID"))
if mibBuilder.loadTexts: hpnicfVxlanTunnelBoundEntry.setStatus('current')
hpnicfVxlanTunnelBoundVxlanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanTunnelBoundVxlanNum.setStatus('current')
hpnicfVxlanMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 5), )
if mibBuilder.loadTexts: hpnicfVxlanMacTable.setStatus('current')
hpnicfVxlanMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanVsiIndex"), (0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanMacAddr"))
if mibBuilder.loadTexts: hpnicfVxlanMacEntry.setStatus('current')
hpnicfVxlanMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfVxlanMacAddr.setStatus('current')
hpnicfVxlanMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanMacTunnelID.setStatus('current')
hpnicfVxlanMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selfLearned", 1), ("staticConfigured", 2), ("protocolLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVxlanMacType.setStatus('current')
hpnicfVxlanStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 6), )
if mibBuilder.loadTexts: hpnicfVxlanStaticMacTable.setStatus('current')
hpnicfVxlanStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanVsiIndex"), (0, "HPN-ICF-VXLAN-MIB", "hpnicfVxlanStaticMacAddr"))
if mibBuilder.loadTexts: hpnicfVxlanStaticMacEntry.setStatus('current')
hpnicfVxlanStaticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfVxlanStaticMacAddr.setStatus('current')
hpnicfVxlanStaticMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanStaticMacTunnelID.setStatus('current')
hpnicfVxlanStaticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 150, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfVxlanStaticMacRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-VXLAN-MIB", PYSNMP_MODULE_ID=hpnicfVxlan, hpnicfVxlanMacTable=hpnicfVxlanMacTable, hpnicfVxlanObjects=hpnicfVxlanObjects, hpnicfVxlanScalarGroup=hpnicfVxlanScalarGroup, hpnicfVxlanGroupAddr=hpnicfVxlanGroupAddr, hpnicfVxlanTunnelTable=hpnicfVxlanTunnelTable, hpnicfVxlanMacTunnelID=hpnicfVxlanMacTunnelID, hpnicfVxlanConfigured=hpnicfVxlanConfigured, hpnicfVxlanRemoteMacLearn=hpnicfVxlanRemoteMacLearn, hpnicfVxlanRowStatus=hpnicfVxlanRowStatus, hpnicfVxlanLocalMacNotify=hpnicfVxlanLocalMacNotify, hpnicfVxlanMacType=hpnicfVxlanMacType, hpnicfVxlanVsiIndex=hpnicfVxlanVsiIndex, hpnicfVxlanTable=hpnicfVxlanTable, hpnicfVxlanRemoteMacCount=hpnicfVxlanRemoteMacCount, hpnicfVxlanID=hpnicfVxlanID, hpnicfVxlanStaticMacAddr=hpnicfVxlanStaticMacAddr, hpnicfVxlanTunnelBoundVxlanNum=hpnicfVxlanTunnelBoundVxlanNum, hpnicfVxlanMacEntry=hpnicfVxlanMacEntry, hpnicfVxlanStaticMacRowStatus=hpnicfVxlanStaticMacRowStatus, hpnicfVxlanEntry=hpnicfVxlanEntry, hpnicfVxlanSourceAddr=hpnicfVxlanSourceAddr, hpnicfVxlanNextVxlanID=hpnicfVxlanNextVxlanID, hpnicfVxlanTunnelOctets=hpnicfVxlanTunnelOctets, hpnicfVxlanTunnelBoundTable=hpnicfVxlanTunnelBoundTable, hpnicfVxlanStaticMacEntry=hpnicfVxlanStaticMacEntry, hpnicfVxlanStaticMacTable=hpnicfVxlanStaticMacTable, hpnicfVxlanAddrType=hpnicfVxlanAddrType, hpnicfVxlanTunnelBoundEntry=hpnicfVxlanTunnelBoundEntry, hpnicfVxlanTunnelRowStatus=hpnicfVxlanTunnelRowStatus, hpnicfVxlanMacAddr=hpnicfVxlanMacAddr, hpnicfVxlanTunnelEntry=hpnicfVxlanTunnelEntry, hpnicfVxlanTunnelID=hpnicfVxlanTunnelID, hpnicfVxlanTunnelPackets=hpnicfVxlanTunnelPackets, hpnicfVxlanStaticMacTunnelID=hpnicfVxlanStaticMacTunnelID, hpnicfVxlan=hpnicfVxlan)
