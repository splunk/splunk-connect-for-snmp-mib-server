#
# PySNMP MIB module NSC-TCP-EXCEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSC-TCP-EXCEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, iso, Integer32, Bits, ObjectIdentity, Gauge32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "iso", "Integer32", "Bits", "ObjectIdentity", "Gauge32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nscDxTcpXcel = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6))
nscDxTcpXcelTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1))
nscDxTcpXcelUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2))
nscDxTcpXcelTcpRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRtoAlgorithm.setStatus('mandatory')
nscDxTcpXcelTcpRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRtoMin.setStatus('mandatory')
nscDxTcpXcelTcpRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRtoMax.setStatus('mandatory')
nscDxTcpXcelTcpMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpMaxConn.setStatus('mandatory')
nscDxTcpXcelTcpActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpActiveOpens.setStatus('mandatory')
nscDxTcpXcelTcpPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpPassiveOpens.setStatus('mandatory')
nscDxTcpXcelTcpAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpAttemptFails.setStatus('mandatory')
nscDxTcpXcelTcpEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpEstabResets.setStatus('mandatory')
nscDxTcpXcelTcpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpCurrEstab.setStatus('mandatory')
nscDxTcpXcelTcpInSegs = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpInSegs.setStatus('mandatory')
nscDxTcpXcelTcpOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpOutSegs.setStatus('mandatory')
nscDxTcpXcelTcpRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRetransSegs.setStatus('mandatory')
nscDxTcpXcelTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13), )
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnTable.setStatus('mandatory')
nscDxTcpXcelTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1), ).setIndexNames((0, "NSC-TCP-EXCEL-MIB", "nscDxTcpXcelTcpSapId"))
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnEntry.setStatus('mandatory')
nscDxTcpXcelTcpSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSapId.setStatus('mandatory')
nscDxTcpXcelTcpHostIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpHostIdx.setStatus('mandatory')
nscDxTcpXcelTcpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpHostName.setStatus('mandatory')
nscDxTcpXcelTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnState.setStatus('mandatory')
nscDxTcpXcelTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnLocalAddress.setStatus('mandatory')
nscDxTcpXcelTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnLocalPort.setStatus('mandatory')
nscDxTcpXcelTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnRemAddress.setStatus('mandatory')
nscDxTcpXcelTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnRemPort.setStatus('mandatory')
nscDxTcpXcelTcpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpInErrs.setStatus('mandatory')
nscDxTcpXcelTcpOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpOutRsts.setStatus('mandatory')
nscDxTcpXcelTcpConnAttempt = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpConnAttempt.setStatus('mandatory')
nscDxTcpXcelTcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpClosed.setStatus('mandatory')
nscDxTcpXcelTcpSegsTimed = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSegsTimed.setStatus('mandatory')
nscDxTcpXcelTcpRttUpdated = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRttUpdated.setStatus('mandatory')
nscDxTcpXcelTcpDelAck = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpDelAck.setStatus('mandatory')
nscDxTcpXcelTcpTimeoutDrop = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpTimeoutDrop.setStatus('mandatory')
nscDxTcpXcelTcpRexmtTimeo = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRexmtTimeo.setStatus('mandatory')
nscDxTcpXcelTcpPersistTimeo = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpPersistTimeo.setStatus('mandatory')
nscDxTcpXcelTcpKeepTimeo = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpKeepTimeo.setStatus('mandatory')
nscDxTcpXcelTcpKeepProbe = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpKeepProbe.setStatus('mandatory')
nscDxTcpXcelTcpKeepDrop = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpKeepDrop.setStatus('mandatory')
nscDxTcpXcelTcpSndPack = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndPack.setStatus('mandatory')
nscDxTcpXcelTcpSndByte = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndByte.setStatus('mandatory')
nscDxTcpXcelTcpSndRexmitPack = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndRexmitPack.setStatus('mandatory')
nscDxTcpXcelTcpSndRexmitByte = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndRexmitByte.setStatus('mandatory')
nscDxTcpXcelTcpSndAcks = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndAcks.setStatus('mandatory')
nscDxTcpXcelTcpSndProbe = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndProbe.setStatus('mandatory')
nscDxTcpXcelTcpSndUrg = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndUrg.setStatus('mandatory')
nscDxTcpXcelTcpSndWinUp = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndWinUp.setStatus('mandatory')
nscDxTcpXcelTcpSndCtrl = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpSndCtrl.setStatus('mandatory')
nscDxTcpXcelTcpPcbCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpPcbCacheMiss.setStatus('mandatory')
nscDxTcpXcelTcpRcvPack = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvPack.setStatus('mandatory')
nscDxTcpXcelTcpRcvBytes = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvBytes.setStatus('mandatory')
nscDxTcpXcelTcpRcvByteAfterWin = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvByteAfterWin.setStatus('mandatory')
nscDxTcpXcelTcpRcvAfterClose = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvAfterClose.setStatus('mandatory')
nscDxTcpXcelTcpRcvWinProbe = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvWinProbe.setStatus('mandatory')
nscDxTcpXcelTcpRcvdUpack = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvdUpack.setStatus('mandatory')
nscDxTcpXcelTcpRcvAckTooMuch = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvAckTooMuch.setStatus('mandatory')
nscDxTcpXcelTcpRcvAckPack = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvAckPack.setStatus('mandatory')
nscDxTcpXcelTcpRcvAckByte = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvAckByte.setStatus('mandatory')
nscDxTcpXcelTcpRcvWinUpd = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelTcpRcvWinUpd.setStatus('mandatory')
nscDxTcpXcelUdpInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpInDatagrams.setStatus('mandatory')
nscDxTcpXcelUdpNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpNoPorts.setStatus('mandatory')
nscDxTcpXcelUdpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpInErrors.setStatus('mandatory')
nscDxTcpXcelUdpOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpOutDatagrams.setStatus('mandatory')
nscDxTcpXcelUdpNoPortBcast = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpNoPortBcast.setStatus('mandatory')
nscDxTcpXcelUdpPcbCacheMissing = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpPcbCacheMissing.setStatus('mandatory')
nscDxTcpXcelUdpTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7), )
if mibBuilder.loadTexts: nscDxTcpXcelUdpTable.setStatus('mandatory')
nscDxTcpXcelUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1), ).setIndexNames((0, "NSC-TCP-EXCEL-MIB", "nscDxTcpXcelUdpSapId"))
if mibBuilder.loadTexts: nscDxTcpXcelUdpEntry.setStatus('mandatory')
nscDxTcpXcelUdpSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpSapId.setStatus('mandatory')
nscDxTcpXcelUdpHostIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpHostIdx.setStatus('mandatory')
nscDxTcpXcelUdpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpHostName.setStatus('mandatory')
nscDxTcpXcelUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpLocalAddress.setStatus('mandatory')
nscDxTcpXcelUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 6, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxTcpXcelUdpLocalPort.setStatus('mandatory')
mibBuilder.exportSymbols("NSC-TCP-EXCEL-MIB", nscDxTcpXcelUdpNoPortBcast=nscDxTcpXcelUdpNoPortBcast, nscDxTcpXcelTcpConnRemPort=nscDxTcpXcelTcpConnRemPort, nscDxTcpXcelTcpSndWinUp=nscDxTcpXcelTcpSndWinUp, nscDxTcpXcelTcpKeepTimeo=nscDxTcpXcelTcpKeepTimeo, nscDxTcpXcelTcpConnTable=nscDxTcpXcelTcpConnTable, nscDxTcpXcelUdpLocalPort=nscDxTcpXcelUdpLocalPort, nscDxTcpXcelTcpInErrs=nscDxTcpXcelTcpInErrs, nscDxTcpXcelTcpRcvAfterClose=nscDxTcpXcelTcpRcvAfterClose, nscDxTcpXcelTcpConnLocalPort=nscDxTcpXcelTcpConnLocalPort, nscDxTcpXcelTcpDelAck=nscDxTcpXcelTcpDelAck, nscDxTcpXcelTcpSndRexmitByte=nscDxTcpXcelTcpSndRexmitByte, nscDxTcpXcelTcpKeepDrop=nscDxTcpXcelTcpKeepDrop, nscDxTcpXcelTcpRcvByteAfterWin=nscDxTcpXcelTcpRcvByteAfterWin, nscDxTcpXcelTcpRcvBytes=nscDxTcpXcelTcpRcvBytes, nscDxTcpXcelUdpInDatagrams=nscDxTcpXcelUdpInDatagrams, nscDxTcpXcelTcpSapId=nscDxTcpXcelTcpSapId, nscDxTcpXcelTcpActiveOpens=nscDxTcpXcelTcpActiveOpens, nscDxTcpXcelUdpLocalAddress=nscDxTcpXcelUdpLocalAddress, nscDxTcpXcelTcpRcvdUpack=nscDxTcpXcelTcpRcvdUpack, nscDxTcpXcelTcpEstabResets=nscDxTcpXcelTcpEstabResets, nscDxTcpXcelTcpInSegs=nscDxTcpXcelTcpInSegs, nscDxTcpXcelUdp=nscDxTcpXcelUdp, nscDxTcpXcelTcpClosed=nscDxTcpXcelTcpClosed, nscDxTcpXcelTcpSegsTimed=nscDxTcpXcelTcpSegsTimed, nscDxTcpXcelTcpSndProbe=nscDxTcpXcelTcpSndProbe, nscDxTcpXcelTcpRcvWinProbe=nscDxTcpXcelTcpRcvWinProbe, nscDxTcpXcelUdpTable=nscDxTcpXcelUdpTable, nscDxTcpXcelTcpSndUrg=nscDxTcpXcelTcpSndUrg, nscDxTcpXcel=nscDxTcpXcel, nscDxTcpXcelTcpSndCtrl=nscDxTcpXcelTcpSndCtrl, nscDxTcpXcelUdpHostName=nscDxTcpXcelUdpHostName, nscDxTcpXcelTcpMaxConn=nscDxTcpXcelTcpMaxConn, nscDxTcpXcelTcpConnEntry=nscDxTcpXcelTcpConnEntry, nscDxTcpXcelTcpPassiveOpens=nscDxTcpXcelTcpPassiveOpens, nscDxTcpXcelTcpSndAcks=nscDxTcpXcelTcpSndAcks, nscDxTcpXcelTcpRcvPack=nscDxTcpXcelTcpRcvPack, nscDxTcpXcelUdpSapId=nscDxTcpXcelUdpSapId, nscDxTcpXcelTcpPersistTimeo=nscDxTcpXcelTcpPersistTimeo, nscDxTcpXcelTcpSndPack=nscDxTcpXcelTcpSndPack, nscDxTcpXcelTcpRexmtTimeo=nscDxTcpXcelTcpRexmtTimeo, nscDxTcpXcelTcpConnAttempt=nscDxTcpXcelTcpConnAttempt, nscDxTcpXcelTcpOutRsts=nscDxTcpXcelTcpOutRsts, nscDxTcpXcelTcpSndRexmitPack=nscDxTcpXcelTcpSndRexmitPack, nscDxTcpXcelTcpConnRemAddress=nscDxTcpXcelTcpConnRemAddress, nscDxTcpXcelTcpRtoAlgorithm=nscDxTcpXcelTcpRtoAlgorithm, nscDxTcpXcelTcpRtoMin=nscDxTcpXcelTcpRtoMin, nscDxTcpXcelUdpHostIdx=nscDxTcpXcelUdpHostIdx, nscDxTcpXcelTcpRttUpdated=nscDxTcpXcelTcpRttUpdated, nscDxTcpXcelTcpRcvAckTooMuch=nscDxTcpXcelTcpRcvAckTooMuch, nscDxTcpXcelTcpHostIdx=nscDxTcpXcelTcpHostIdx, nscDxTcpXcelTcpConnState=nscDxTcpXcelTcpConnState, nscDxTcpXcelUdpInErrors=nscDxTcpXcelUdpInErrors, nscDxTcpXcelTcpCurrEstab=nscDxTcpXcelTcpCurrEstab, nscDxTcpXcelUdpNoPorts=nscDxTcpXcelUdpNoPorts, nscDxTcpXcelTcpRetransSegs=nscDxTcpXcelTcpRetransSegs, nscDxTcpXcelTcpRtoMax=nscDxTcpXcelTcpRtoMax, nscDxTcpXcelTcpTimeoutDrop=nscDxTcpXcelTcpTimeoutDrop, nscDxTcpXcelTcp=nscDxTcpXcelTcp, nscDxTcpXcelUdpPcbCacheMissing=nscDxTcpXcelUdpPcbCacheMissing, nscDxTcpXcelTcpConnLocalAddress=nscDxTcpXcelTcpConnLocalAddress, nscDxTcpXcelTcpRcvAckByte=nscDxTcpXcelTcpRcvAckByte, nscDxTcpXcelTcpOutSegs=nscDxTcpXcelTcpOutSegs, nscDxTcpXcelUdpEntry=nscDxTcpXcelUdpEntry, nscDxTcpXcelUdpOutDatagrams=nscDxTcpXcelUdpOutDatagrams, nscDxTcpXcelTcpPcbCacheMiss=nscDxTcpXcelTcpPcbCacheMiss, nscDxTcpXcelTcpRcvAckPack=nscDxTcpXcelTcpRcvAckPack, nscDxTcpXcelTcpSndByte=nscDxTcpXcelTcpSndByte, nscDxTcpXcelTcpHostName=nscDxTcpXcelTcpHostName, nscDxTcpXcelTcpKeepProbe=nscDxTcpXcelTcpKeepProbe, nscDxTcpXcelTcpAttemptFails=nscDxTcpXcelTcpAttemptFails, nscDxTcpXcelTcpRcvWinUpd=nscDxTcpXcelTcpRcvWinUpd)
