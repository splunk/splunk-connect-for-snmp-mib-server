#
# PySNMP MIB module NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, Counter32, Counter64, iso, Unsigned32, NotificationType, ModuleIdentity, Bits, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Counter32", "Counter64", "iso", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier")
RowStatus, DisplayString, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "MacAddress", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
nnMultipleSpanningTreeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 5))
nnMultipleSpanningTreeMib.setRevisions(('2014-06-24 00:00', '2009-03-25 00:00', '2008-11-05 00:00', '2006-04-10 00:00', '2004-02-24 00:00',))
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setLastUpdated('201406240000Z')
if mibBuilder.loadTexts: nnMultipleSpanningTreeMib.setOrganization('Nortel Networks')
nnMstNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 0))
nnMstObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1))
nnMstScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1))
nnMstNoOfInstancesSupported = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstNoOfInstancesSupported.setStatus('current')
nnMstMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstMaxHopCount.setStatus('current')
nnMstBrgAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBrgAddress.setStatus('current')
nnMstCistRoot = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRoot.setStatus('current')
nnMstCistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRegionalRoot.setStatus('current')
nnMstCistRootCost = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRootCost.setStatus('current')
nnMstCistRegionalRootCost = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRegionalRootCost.setStatus('current')
nnMstCistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistRootPort.setStatus('current')
nnMstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgePriority.setStatus('current')
nnMstCistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 10), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgeMaxAge.setStatus('current')
nnMstCistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistBridgeForwardDelay.setStatus('current')
nnMstCistHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistHoldTime.setStatus('current')
nnMstCistMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistMaxAge.setStatus('current')
nnMstCistForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistForwardDelay.setStatus('current')
nnMstMstpUpCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstMstpUpCount.setStatus('current')
nnMstMstpDownCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstMstpDownCount.setStatus('current')
nnMstPathCostDefaultType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPathCostDefaultType.setStatus('current')
nnMstForceProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstForceProtocolVersion.setStatus('current')
nnMstTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstTxHoldCount.setStatus('current')
nnMstConfigIdSel = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstConfigIdSel.setStatus('current')
nnMstRegionName = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstRegionName.setStatus('current')
nnMstRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstRegionVersion.setStatus('current')
nnMstConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstConfigDigest.setStatus('current')
nnMstRegionConfigChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstRegionConfigChangeCount.setStatus('current')
nnMstCistBridgeRoleSelectionSemState = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistBridgeRoleSelectionSemState.setStatus('current')
nnMstCistTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistTimeSinceTopologyChange.setStatus('current')
nnMstCistTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistTopChanges.setStatus('current')
nnMstCistNewRootBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistNewRootBridgeCount.setStatus('current')
nnMstBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2), )
if mibBuilder.loadTexts: nnMstBridgeTable.setStatus('current')
nnMstBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstance"))
if mibBuilder.loadTexts: nnMstBridgeEntry.setStatus('current')
nnMstBridgeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: nnMstBridgeInstance.setStatus('current')
nnMstBridgeRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRegionalRoot.setStatus('current')
nnMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgePriority.setStatus('current')
nnMstBridgeRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRootCost.setStatus('current')
nnMstBridgeRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRootPort.setStatus('current')
nnMstBridgeTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeTimeSinceTopologyChange.setStatus('current')
nnMstBridgeTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeTopChanges.setStatus('current')
nnMstBridgeNewRootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeNewRootCount.setStatus('current')
nnMstBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeRoleSelectionSemState.setStatus('current')
nnMstBridgeInstanceUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeInstanceUpCount.setStatus('current')
nnMstBridgeInstanceDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeInstanceDownCount.setStatus('current')
nnMstBridgeOldDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstBridgeOldDesignatedRoot.setStatus('current')
nnMstBridgeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgeEnabled.setStatus('current')
nnMstBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nnMstBridgeRowStatus.setStatus('current')
nnMstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3), )
if mibBuilder.loadTexts: nnMstCistPortTable.setStatus('current')
nnMstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstCistPort"))
if mibBuilder.loadTexts: nnMstCistPortEntry.setStatus('current')
nnMstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nnMstCistPort.setStatus('current')
nnMstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortPathCost.setStatus('current')
nnMstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortPriority.setStatus('current')
nnMstCistPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedRoot.setStatus('current')
nnMstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedBridge.setStatus('current')
nnMstCistPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedPort.setStatus('current')
nnMstCistPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortAdminP2P.setStatus('current')
nnMstCistPortOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperP2P.setStatus('current')
nnMstCistPortAdminEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortAdminEdgeStatus.setStatus('current')
nnMstCistPortOperEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperEdgeStatus.setStatus('current')
nnMstCistPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortProtocolMigration.setStatus('current')
nnMstCistPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortState.setStatus('current')
nnMstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistForcePortState.setStatus('current')
nnMstCistPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortForwardTransitions.setStatus('current')
nnMstCistPortRxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxMstBpduCount.setStatus('current')
nnMstCistPortRxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxRstBpduCount.setStatus('current')
nnMstCistPortRxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxConfigBpduCount.setStatus('current')
nnMstCistPortRxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRxTcnBpduCount.setStatus('current')
nnMstCistPortTxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxMstBpduCount.setStatus('current')
nnMstCistPortTxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxRstBpduCount.setStatus('current')
nnMstCistPortTxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxConfigBpduCount.setStatus('current')
nnMstCistPortTxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTxTcnBpduCount.setStatus('current')
nnMstCistPortInvalidMstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidMstBpduRxCount.setStatus('current')
nnMstCistPortInvalidRstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidRstBpduRxCount.setStatus('current')
nnMstCistPortInvalidConfigBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidConfigBpduRxCount.setStatus('current')
nnMstCistPortInvalidTcnBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInvalidTcnBpduRxCount.setStatus('current')
nnMstCistPortTransmitSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transmitinit", 0), ("transmitperiodic", 1), ("transmitconfig", 2), ("transmittcn", 3), ("transmitrstp", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTransmitSemState.setStatus('current')
nnMstCistPortReceiveSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("receive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortReceiveSemState.setStatus('current')
nnMstCistPortProtMigrationSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("sendrstp", 1), ("sendingrstp", 2), ("sendstp", 3), ("sendingstp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortProtMigrationSemState.setStatus('current')
nnMstCistProtocolMigrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistProtocolMigrationCount.setStatus('current')
nnMstCistPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortDesignatedCost.setStatus('current')
nnMstCistPortRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 32), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRegionalRoot.setStatus('current')
nnMstCistPortRegionalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRegionalPathCost.setStatus('current')
nnMstCistSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistSelectedPortRole.setStatus('current')
nnMstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistCurrentPortRole.setStatus('current')
nnMstCistPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortInfoSemState.setStatus('current')
nnMstCistPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortRoleTransitionSemState.setStatus('current')
nnMstCistPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortStateTransitionSemState.setStatus('current')
nnMstCistPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortTopologyChangeSemState.setStatus('current')
nnMstCistPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 40), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstCistPortHelloTime.setStatus('current')
nnMstCistPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortOperVersion.setStatus('current')
nnMstCistPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 3, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstCistPortEffectivePortState.setStatus('current')
nnMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4), )
if mibBuilder.loadTexts: nnMstPortTable.setStatus('current')
nnMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPort"), (0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstance"))
if mibBuilder.loadTexts: nnMstPortEntry.setStatus('current')
nnMstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nnMstPort.setStatus('current')
nnMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortPathCost.setStatus('current')
nnMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortPriority.setStatus('current')
nnMstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedRoot.setStatus('current')
nnMstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedBridge.setStatus('current')
nnMstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedPort.setStatus('current')
nnMstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortState.setStatus('current')
nnMstPortForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstPortForcePortState.setStatus('current')
nnMstPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortForwardTransitions.setStatus('current')
nnMstPortReceivedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortReceivedBPDUs.setStatus('current')
nnMstPortTransmittedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortTransmittedBPDUs.setStatus('current')
nnMstPortInvalidBPDUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortInvalidBPDUsRcvd.setStatus('current')
nnMstPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortDesignatedCost.setStatus('current')
nnMstPortSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortSelectedPortRole.setStatus('current')
nnMstPortCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortCurrentPortRole.setStatus('current')
nnMstPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortInfoSemState.setStatus('current')
nnMstPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortRoleTransitionSemState.setStatus('current')
nnMstPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortStateTransitionSemState.setStatus('current')
nnMstPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortTopologyChangeSemState.setStatus('current')
nnMstPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 4, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortEffectivePortState.setStatus('current')
nnMstNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5))
nnMstNotificationControlScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1))
nnMstSetNotifications = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstSetNotifications.setStatus('current')
nnMstGenNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2), ("instanceUp", 3), ("instanceDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstGenNotificationType.setStatus('current')
nnMstErrNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("memfail", 1), ("bufffail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstErrNotificationType.setStatus('current')
nnMstPortNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2), )
if mibBuilder.loadTexts: nnMstPortNotificationTable.setStatus('current')
nnMstPortNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPortNotificationIndex"))
if mibBuilder.loadTexts: nnMstPortNotificationEntry.setStatus('current')
nnMstPortNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: nnMstPortNotificationIndex.setStatus('current')
nnMstPortNotificationMigrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sendstp", 0), ("sendrstp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationMigrationType.setStatus('current')
nnMstPortNotificationPktErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("protocolIdErr", 0), ("invalidBpdu", 1), ("configLengthErr", 2), ("tcnLengthErr", 3), ("rstpLengthErr", 4), ("maxAgeErr", 5), ("fwdDelayErr", 6), ("helloTimeErr", 7), ("mstpLengthErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationPktErrType.setStatus('current')
nnMstPortNotificationPktErrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnMstPortNotificationPktErrVal.setStatus('current')
nnMstGeneralEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 1)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstGenNotificationType"))
if mibBuilder.loadTexts: nnMstGeneralEvent.setStatus('current')
nnMstErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 2)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstErrNotificationType"))
if mibBuilder.loadTexts: nnMstErrorEvent.setStatus('current')
nnMstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 3)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeOldDesignatedRoot"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeRegionalRoot"))
if mibBuilder.loadTexts: nnMstNewRoot.setStatus('current')
nnMstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 4)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"))
if mibBuilder.loadTexts: nnMstTopologyChange.setStatus('current')
nnMstProtocolMigration = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 5)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstForceProtocolVersion"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstPortNotificationMigrationType"))
if mibBuilder.loadTexts: nnMstProtocolMigration.setStatus('current')
nnMstRegionConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 5, 0, 6)).setObjects(("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBrgAddress"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstConfigIdSel"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstRegionName"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstRegionVersion"), ("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstConfigDigest"))
if mibBuilder.loadTexts: nnMstRegionConfigChange.setStatus('current')
nnMstBridgeVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6), )
if mibBuilder.loadTexts: nnMstBridgeVlanMapTable.setStatus('current')
nnMstBridgeVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1), ).setIndexNames((0, "NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", "nnMstBridgeInstId"))
if mibBuilder.loadTexts: nnMstBridgeVlanMapEntry.setStatus('current')
nnMstBridgeInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)))
if mibBuilder.loadTexts: nnMstBridgeInstId.setStatus('current')
nnMstBridgeVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 5, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnMstBridgeVlanMap.setStatus('current')
mibBuilder.exportSymbols("NORTEL-NETWORKS-MULTIPLE-SPANNING-TREE-MIB", nnMstNewRoot=nnMstNewRoot, nnMultipleSpanningTreeMib=nnMultipleSpanningTreeMib, nnMstCistPortRegionalRoot=nnMstCistPortRegionalRoot, nnMstCistSelectedPortRole=nnMstCistSelectedPortRole, nnMstPortNotificationEntry=nnMstPortNotificationEntry, nnMstGeneralEvent=nnMstGeneralEvent, nnMstCistRootPort=nnMstCistRootPort, nnMstCistBridgeRoleSelectionSemState=nnMstCistBridgeRoleSelectionSemState, nnMstCistPortRegionalPathCost=nnMstCistPortRegionalPathCost, nnMstCistPortTxConfigBpduCount=nnMstCistPortTxConfigBpduCount, nnMstPortPathCost=nnMstPortPathCost, nnMstPortNotificationMigrationType=nnMstPortNotificationMigrationType, nnMstCistRegionalRoot=nnMstCistRegionalRoot, nnMstBridgeEnabled=nnMstBridgeEnabled, nnMstCistPortReceiveSemState=nnMstCistPortReceiveSemState, nnMstPortDesignatedBridge=nnMstPortDesignatedBridge, nnMstMstpUpCount=nnMstMstpUpCount, nnMstCistTopChanges=nnMstCistTopChanges, nnMstCistPortRxMstBpduCount=nnMstCistPortRxMstBpduCount, nnMstPortForcePortState=nnMstPortForcePortState, nnMstBridgeTable=nnMstBridgeTable, nnMstPortForwardTransitions=nnMstPortForwardTransitions, nnMstBridgeTopChanges=nnMstBridgeTopChanges, nnMstCistTimeSinceTopologyChange=nnMstCistTimeSinceTopologyChange, nnMstBridgeInstId=nnMstBridgeInstId, nnMstCistPortDesignatedCost=nnMstCistPortDesignatedCost, nnMstCistRoot=nnMstCistRoot, nnMstCistPortPriority=nnMstCistPortPriority, nnMstCistPortInvalidRstBpduRxCount=nnMstCistPortInvalidRstBpduRxCount, nnMstCistBridgePriority=nnMstCistBridgePriority, nnMstPortState=nnMstPortState, nnMstPortTable=nnMstPortTable, nnMstBridgeOldDesignatedRoot=nnMstBridgeOldDesignatedRoot, nnMstCistPortDesignatedPort=nnMstCistPortDesignatedPort, nnMstCistPortOperP2P=nnMstCistPortOperP2P, nnMstPortInvalidBPDUsRcvd=nnMstPortInvalidBPDUsRcvd, nnMstBrgAddress=nnMstBrgAddress, nnMstCistPort=nnMstCistPort, nnMstObjects=nnMstObjects, nnMstPortInfoSemState=nnMstPortInfoSemState, nnMstCistPortEntry=nnMstCistPortEntry, nnMstCistPortInvalidTcnBpduRxCount=nnMstCistPortInvalidTcnBpduRxCount, nnMstPortNotificationPktErrType=nnMstPortNotificationPktErrType, nnMstPortStateTransitionSemState=nnMstPortStateTransitionSemState, nnMstCistBridgeForwardDelay=nnMstCistBridgeForwardDelay, nnMstCistPortHelloTime=nnMstCistPortHelloTime, nnMstPortNotificationTable=nnMstPortNotificationTable, nnMstBridgeVlanMapTable=nnMstBridgeVlanMapTable, nnMstBridgeRoleSelectionSemState=nnMstBridgeRoleSelectionSemState, nnMstCistBridgeMaxAge=nnMstCistBridgeMaxAge, nnMstTxHoldCount=nnMstTxHoldCount, nnMstBridgeInstanceDownCount=nnMstBridgeInstanceDownCount, nnMstBridgeVlanMapEntry=nnMstBridgeVlanMapEntry, nnMstBridgeInstanceUpCount=nnMstBridgeInstanceUpCount, nnMstRegionVersion=nnMstRegionVersion, nnMstCistCurrentPortRole=nnMstCistCurrentPortRole, nnMstCistPortStateTransitionSemState=nnMstCistPortStateTransitionSemState, nnMstBridgeRowStatus=nnMstBridgeRowStatus, nnMstConfigIdSel=nnMstConfigIdSel, nnMstCistHoldTime=nnMstCistHoldTime, nnMstNotifications=nnMstNotifications, nnMstConfigDigest=nnMstConfigDigest, nnMstRegionName=nnMstRegionName, nnMstBridgePriority=nnMstBridgePriority, nnMstNoOfInstancesSupported=nnMstNoOfInstancesSupported, nnMstCistPortTransmitSemState=nnMstCistPortTransmitSemState, nnMstCistPortInfoSemState=nnMstCistPortInfoSemState, nnMstMaxHopCount=nnMstMaxHopCount, nnMstPortTopologyChangeSemState=nnMstPortTopologyChangeSemState, nnMstCistPortRxConfigBpduCount=nnMstCistPortRxConfigBpduCount, nnMstRegionConfigChangeCount=nnMstRegionConfigChangeCount, nnMstPort=nnMstPort, nnMstPathCostDefaultType=nnMstPathCostDefaultType, nnMstBridgeRootCost=nnMstBridgeRootCost, nnMstCistPortProtocolMigration=nnMstCistPortProtocolMigration, nnMstCistForcePortState=nnMstCistForcePortState, nnMstCistPortPathCost=nnMstCistPortPathCost, nnMstPortDesignatedRoot=nnMstPortDesignatedRoot, nnMstCistPortTxTcnBpduCount=nnMstCistPortTxTcnBpduCount, nnMstPortNotificationPktErrVal=nnMstPortNotificationPktErrVal, nnMstPortDesignatedPort=nnMstPortDesignatedPort, nnMstCistPortInvalidMstBpduRxCount=nnMstCistPortInvalidMstBpduRxCount, nnMstBridgeVlanMap=nnMstBridgeVlanMap, nnMstProtocolMigration=nnMstProtocolMigration, nnMstCistRootCost=nnMstCistRootCost, nnMstErrNotificationType=nnMstErrNotificationType, nnMstCistPortState=nnMstCistPortState, nnMstForceProtocolVersion=nnMstForceProtocolVersion, nnMstCistPortTable=nnMstCistPortTable, nnMstMstpDownCount=nnMstMstpDownCount, nnMstCistPortForwardTransitions=nnMstCistPortForwardTransitions, nnMstPortPriority=nnMstPortPriority, nnMstPortEntry=nnMstPortEntry, nnMstPortSelectedPortRole=nnMstPortSelectedPortRole, nnMstPortCurrentPortRole=nnMstPortCurrentPortRole, nnMstCistPortTxRstBpduCount=nnMstCistPortTxRstBpduCount, nnMstPortRoleTransitionSemState=nnMstPortRoleTransitionSemState, nnMstCistPortOperEdgeStatus=nnMstCistPortOperEdgeStatus, nnMstBridgeNewRootCount=nnMstBridgeNewRootCount, nnMstBridgeRegionalRoot=nnMstBridgeRegionalRoot, nnMstNotificationControlScalars=nnMstNotificationControlScalars, nnMstCistPortEffectivePortState=nnMstCistPortEffectivePortState, nnMstScalars=nnMstScalars, nnMstBridgeInstance=nnMstBridgeInstance, nnMstCistRegionalRootCost=nnMstCistRegionalRootCost, nnMstPortReceivedBPDUs=nnMstPortReceivedBPDUs, nnMstErrorEvent=nnMstErrorEvent, nnMstCistPortDesignatedBridge=nnMstCistPortDesignatedBridge, nnMstBridgeTimeSinceTopologyChange=nnMstBridgeTimeSinceTopologyChange, nnMstPortDesignatedCost=nnMstPortDesignatedCost, nnMstCistPortProtMigrationSemState=nnMstCistPortProtMigrationSemState, nnMstCistPortInvalidConfigBpduRxCount=nnMstCistPortInvalidConfigBpduRxCount, nnMstCistPortOperVersion=nnMstCistPortOperVersion, nnMstCistPortRxRstBpduCount=nnMstCistPortRxRstBpduCount, nnMstPortNotificationIndex=nnMstPortNotificationIndex, nnMstCistProtocolMigrationCount=nnMstCistProtocolMigrationCount, nnMstTopologyChange=nnMstTopologyChange, nnMstCistPortDesignatedRoot=nnMstCistPortDesignatedRoot, nnMstGenNotificationType=nnMstGenNotificationType, nnMstBridgeRootPort=nnMstBridgeRootPort, nnMstCistForwardDelay=nnMstCistForwardDelay, nnMstCistPortTxMstBpduCount=nnMstCistPortTxMstBpduCount, nnMstSetNotifications=nnMstSetNotifications, nnMstCistPortRoleTransitionSemState=nnMstCistPortRoleTransitionSemState, nnMstCistMaxAge=nnMstCistMaxAge, nnMstCistNewRootBridgeCount=nnMstCistNewRootBridgeCount, nnMstCistPortTopologyChangeSemState=nnMstCistPortTopologyChangeSemState, PYSNMP_MODULE_ID=nnMultipleSpanningTreeMib, nnMstCistPortAdminEdgeStatus=nnMstCistPortAdminEdgeStatus, nnMstCistPortRxTcnBpduCount=nnMstCistPortRxTcnBpduCount, nnMstCistPortAdminP2P=nnMstCistPortAdminP2P, nnMstNotificationControl=nnMstNotificationControl, nnMstRegionConfigChange=nnMstRegionConfigChange, nnMstPortEffectivePortState=nnMstPortEffectivePortState, nnMstBridgeEntry=nnMstBridgeEntry, nnMstPortTransmittedBPDUs=nnMstPortTransmittedBPDUs)
