#
# PySNMP MIB module BIANCA-BRICK-BINARY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-BINARY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, MibIdentifier, ObjectIdentity, Unsigned32, IpAddress, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Counter64, Gauge32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Unsigned32", "IpAddress", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Counter64", "Gauge32", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26))
binTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 65), )
if mibBuilder.loadTexts: binTable.setStatus('mandatory')
binEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binEntIndex"))
if mibBuilder.loadTexts: binEntry.setStatus('mandatory')
binEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 1), Integer32())
if mibBuilder.loadTexts: binEntIndex.setStatus('mandatory')
binEntNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 2), Integer32())
if mibBuilder.loadTexts: binEntNextIndex.setStatus('mandatory')
binEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 3), Integer32())
if mibBuilder.loadTexts: binEntSetId.setStatus('mandatory')
binEntData = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 65, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: binEntData.setStatus('mandatory')
binPublicTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 67), )
if mibBuilder.loadTexts: binPublicTable.setStatus('mandatory')
binPublicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binPublicEntIndex"))
if mibBuilder.loadTexts: binPublicEntry.setStatus('mandatory')
binPublicEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntIndex.setStatus('mandatory')
binPublicEntNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntNextIndex.setStatus('mandatory')
binPublicEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntSetId.setStatus('mandatory')
binPublicEntData = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 67, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: binPublicEntData.setStatus('mandatory')
binFileTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 66), )
if mibBuilder.loadTexts: binFileTable.setStatus('mandatory')
binFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1), ).setIndexNames((0, "BIANCA-BRICK-BINARY-MIB", "binFileEntSetId"))
if mibBuilder.loadTexts: binFileEntry.setStatus('mandatory')
binFileEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntName.setStatus('mandatory')
binFileEntSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntSize.setStatus('mandatory')
binFileEntPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntPublic.setStatus('mandatory')
binFileEntSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 66, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: binFileEntSetId.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-BINARY-MIB", bintec=bintec, binEntData=binEntData, binFileEntSetId=binFileEntSetId, binEntSetId=binEntSetId, binPublicTable=binPublicTable, binFileEntry=binFileEntry, binFileEntPublic=binFileEntPublic, binEntNextIndex=binEntNextIndex, binPublicEntIndex=binPublicEntIndex, ipsec=ipsec, bibo=bibo, binFileEntName=binFileEntName, binPublicEntSetId=binPublicEntSetId, binEntry=binEntry, binFileTable=binFileTable, binPublicEntNextIndex=binPublicEntNextIndex, binPublicEntry=binPublicEntry, binFileEntSize=binFileEntSize, binPublicEntData=binPublicEntData, binTable=binTable, binEntIndex=binEntIndex)
