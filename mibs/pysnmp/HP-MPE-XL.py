#
# PySNMP MIB module HP-MPE-XL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-MPE-XL
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
Timeticks, = mibBuilder.importSymbols("RFC1155-SMI", "Timeticks")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, MibIdentifier, TimeTicks, ObjectIdentity, enterprises, Counter64, iso, Unsigned32, ModuleIdentity, Bits, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "MibIdentifier", "TimeTicks", "ObjectIdentity", "enterprises", "Counter64", "iso", "Unsigned32", "ModuleIdentity", "Bits", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1))
mpeXLSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3))
volume = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1))
processor = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 2))
volumeMounted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMounted.setStatus('mandatory')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "HP-MPE-XL", "volumeName"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
volumeLDEV = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLDEV.setStatus('mandatory')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('mandatory')
volumeDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeDriveType.setStatus('mandatory')
volumeSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSectorSize.setStatus('mandatory')
volumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("nonSystem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeType.setStatus('mandatory')
volumeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeCapacity.setStatus('mandatory')
volumeMPEOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMPEOverhead.setStatus('mandatory')
volumeMPETransOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMPETransOverhead.setStatus('mandatory')
volumeMPEConfigMaxTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMPEConfigMaxTrans.setStatus('mandatory')
volumeDirSpaceOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeDirSpaceOverhead.setStatus('mandatory')
volumeFileLabelOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFileLabelOverhead.setStatus('mandatory')
volumeTransactionMgmtOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeTransactionMgmtOverhead.setStatus('mandatory')
volumeSpoolFileDiscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSpoolFileDiscUsage.setStatus('mandatory')
volumePermFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumePermFiles.setStatus('mandatory')
volumeTempFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeTempFiles.setStatus('mandatory')
volumeTotalFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeTotalFreeSpace.setStatus('mandatory')
volumeLargestContigFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLargestContigFree.setStatus('mandatory')
volumePercentUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumePercentUtilized.setStatus('mandatory')
numActive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numActive.setStatus('mandatory')
numPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPresent.setStatus('mandatory')
processorMIstate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processorMIstate.setStatus('mandatory')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('mandatory')
mibBuilder.exportSymbols("HP-MPE-XL", volumeTotalFreeSpace=volumeTotalFreeSpace, volumeMPETransOverhead=volumeMPETransOverhead, volumeLargestContigFree=volumeLargestContigFree, volumeCapacity=volumeCapacity, numPresent=numPresent, hp=hp, volume=volume, volumeMPEConfigMaxTrans=volumeMPEConfigMaxTrans, volumePermFiles=volumePermFiles, volumeTempFiles=volumeTempFiles, system=system, volumeEntry=volumeEntry, volumeDirSpaceOverhead=volumeDirSpaceOverhead, cpuUtilization=cpuUtilization, volumeDriveType=volumeDriveType, volumeTransactionMgmtOverhead=volumeTransactionMgmtOverhead, numActive=numActive, volumeLDEV=volumeLDEV, volumeType=volumeType, volumeFileLabelOverhead=volumeFileLabelOverhead, volumeSectorSize=volumeSectorSize, volumeName=volumeName, mpeXLSystem=mpeXLSystem, nm=nm, processor=processor, volumeSpoolFileDiscUsage=volumeSpoolFileDiscUsage, volumeMounted=volumeMounted, processorMIstate=processorMIstate, general=general, volumePercentUtilized=volumePercentUtilized, volumeTable=volumeTable, volumeMPEOverhead=volumeMPEOverhead)
