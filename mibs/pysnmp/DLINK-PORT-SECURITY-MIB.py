#
# PySNMP MIB module DLINK-PORT-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-PORT-SECURITY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:35:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, iso, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Unsigned32", "TimeTicks")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
swPortSecMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 63))
if mibBuilder.loadTexts: swPortSecMIB.setLastUpdated('1210161030Z')
if mibBuilder.loadTexts: swPortSecMIB.setOrganization('D-Link Corp.')
swPortSecCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 1))
swPortSecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 2))
swPortSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 3))
swPortSecTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecTrapLogState.setStatus('current')
swPortSecSysMaxLernAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecSysMaxLernAddr.setStatus('current')
swPortSecTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecTrapState.setStatus('current')
swPortSecLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecLogState.setStatus('current')
swPortSecMgmtByPort = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1))
swPortSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1), )
if mibBuilder.loadTexts: swPortSecPortTable.setStatus('current')
swPortSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1), ).setIndexNames((0, "DLINK-PORT-SECURITY-MIB", "swPortSecPortIndex"))
if mibBuilder.loadTexts: swPortSecPortEntry.setStatus('current')
swPortSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swPortSecPortIndex.setStatus('current')
swPortSecPortMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecPortMaxLernAddr.setStatus('current')
swPortSecPortLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnTimeout", 2), ("deleteOnReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecPortLockAddrMode.setStatus('current')
swPortSecPortAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecPortAdmState.setStatus('current')
swPortSecPortClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecPortClearCtrl.setStatus('current')
swPortSecPortViolationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecPortViolationAction.setStatus('current')
swPortSecMgmtByVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2))
swPortSecVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2, 1), )
if mibBuilder.loadTexts: swPortSecVLANTable.setStatus('current')
swPortSecVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2, 1, 1), ).setIndexNames((0, "DLINK-PORT-SECURITY-MIB", "swPortSecVLANID"))
if mibBuilder.loadTexts: swPortSecVLANEntry.setStatus('current')
swPortSecVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: swPortSecVLANID.setStatus('current')
swPortSecVLANMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecVLANMaxLernAddr.setStatus('current')
swPortSecVLANClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecVLANClearCtrl.setStatus('current')
swPortSecMgmtByVLANOnPort = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3))
swPortSecVLANOnPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 1), )
if mibBuilder.loadTexts: swPortSecVLANOnPortTable.setStatus('current')
swPortSecVLANOnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 1, 1), ).setIndexNames((0, "DLINK-PORT-SECURITY-MIB", "swPortSecPortIndex"), (0, "DLINK-PORT-SECURITY-MIB", "swPortSecVLANID"))
if mibBuilder.loadTexts: swPortSecVLANOnPortEntry.setStatus('current')
swPortSecVLANOnPortMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecVLANOnPortMaxLernAddr.setStatus('current')
swPortSecVLANOnPortAddCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("add", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPortSecVLANOnPortAddCtrl.setStatus('current')
swPortSecMgmtByVLANOnPortClearCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 2))
swPortSecMgmtByVLANOnPortClearPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecMgmtByVLANOnPortClearPort.setStatus('current')
swPortSecMgmtByVLANOnPortClearVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecMgmtByVLANOnPortClearVID.setStatus('current')
swPortSecMgmtByVLANOnPortClearAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecMgmtByVLANOnPortClearAction.setStatus('current')
swPortSecEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4), )
if mibBuilder.loadTexts: swPortSecEntriesTable.setStatus('current')
swPortSecEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4, 1), ).setIndexNames((0, "DLINK-PORT-SECURITY-MIB", "swPortSecMac"), (0, "DLINK-PORT-SECURITY-MIB", "swPortSecVID"))
if mibBuilder.loadTexts: swPortSecEntriesEntry.setStatus('current')
swPortSecMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortSecMac.setStatus('current')
swPortSecVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortSecVID.setStatus('current')
swPortSecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortSecPort.setStatus('current')
swPortSecDelCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 63, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortSecDelCtrl.setStatus('current')
mibBuilder.exportSymbols("DLINK-PORT-SECURITY-MIB", swPortSecDelCtrl=swPortSecDelCtrl, swPortSecVLANOnPortEntry=swPortSecVLANOnPortEntry, swPortSecVLANEntry=swPortSecVLANEntry, swPortSecPortClearCtrl=swPortSecPortClearCtrl, swPortSecPort=swPortSecPort, swPortSecTrapState=swPortSecTrapState, swPortSecMgmtByVLANOnPortClearPort=swPortSecMgmtByVLANOnPortClearPort, swPortSecMgmtByVLANOnPortClearAction=swPortSecMgmtByVLANOnPortClearAction, swPortSecPortLockAddrMode=swPortSecPortLockAddrMode, swPortSecCtrl=swPortSecCtrl, swPortSecLogState=swPortSecLogState, swPortSecVLANID=swPortSecVLANID, swPortSecVLANOnPortMaxLernAddr=swPortSecVLANOnPortMaxLernAddr, swPortSecMIB=swPortSecMIB, swPortSecPortViolationAction=swPortSecPortViolationAction, swPortSecMgmtByVLANOnPortClearVID=swPortSecMgmtByVLANOnPortClearVID, swPortSecVLANMaxLernAddr=swPortSecVLANMaxLernAddr, swPortSecPortAdmState=swPortSecPortAdmState, swPortSecMgmtByVLAN=swPortSecMgmtByVLAN, swPortSecPortTable=swPortSecPortTable, swPortSecMac=swPortSecMac, swPortSecEntriesTable=swPortSecEntriesTable, swPortSecSysMaxLernAddr=swPortSecSysMaxLernAddr, swPortSecVLANTable=swPortSecVLANTable, swPortSecMgmt=swPortSecMgmt, swPortSecVLANOnPortTable=swPortSecVLANOnPortTable, swPortSecTrapLogState=swPortSecTrapLogState, swPortSecVLANClearCtrl=swPortSecVLANClearCtrl, swPortSecVID=swPortSecVID, swPortSecMgmtByVLANOnPortClearCtrl=swPortSecMgmtByVLANOnPortClearCtrl, swPortSecEntriesEntry=swPortSecEntriesEntry, swPortSecPortMaxLernAddr=swPortSecPortMaxLernAddr, swPortSecPortEntry=swPortSecPortEntry, swPortSecInfo=swPortSecInfo, swPortSecPortIndex=swPortSecPortIndex, swPortSecMgmtByPort=swPortSecMgmtByPort, swPortSecVLANOnPortAddCtrl=swPortSecVLANOnPortAddCtrl, PYSNMP_MODULE_ID=swPortSecMIB, swPortSecMgmtByVLANOnPort=swPortSecMgmtByVLANOnPort)
