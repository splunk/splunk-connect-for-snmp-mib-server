#
# PySNMP MIB module Nortel-Magellan-Passport-ServerAccessRsaMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-ServerAccessRsaMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
RowPointer, DisplayString, Unsigned32, Counter32, StorageType, RowStatus, Integer32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowPointer", "DisplayString", "Unsigned32", "Counter32", "StorageType", "RowStatus", "Integer32")
NonReplicated, EnterpriseDateAndTime, AsciiString, AsciiStringIndex, Hex, Link, DigitString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "EnterpriseDateAndTime", "AsciiString", "AsciiStringIndex", "Hex", "Link", "DigitString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Gauge32, IpAddress, TimeTicks, NotificationType, ModuleIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Gauge32", "IpAddress", "TimeTicks", "NotificationType", "ModuleIdentity", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
serverAccessRsaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116))
rsa = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108))
rsaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1), )
if mibBuilder.loadTexts: rsaRowStatusTable.setStatus('mandatory')
rsaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"))
if mibBuilder.loadTexts: rsaRowStatusEntry.setStatus('mandatory')
rsaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaRowStatus.setStatus('mandatory')
rsaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaComponentName.setStatus('mandatory')
rsaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaStorageType.setStatus('mandatory')
rsaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: rsaIndex.setStatus('mandatory')
rsaOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 10), )
if mibBuilder.loadTexts: rsaOptionsTable.setStatus('mandatory')
rsaOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"))
if mibBuilder.loadTexts: rsaOptionsEntry.setStatus('mandatory')
rsaLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaLogicalProcessor.setStatus('mandatory')
rsaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 11), )
if mibBuilder.loadTexts: rsaStateTable.setStatus('mandatory')
rsaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"))
if mibBuilder.loadTexts: rsaStateEntry.setStatus('mandatory')
rsaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaAdminState.setStatus('mandatory')
rsaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaOperationalState.setStatus('mandatory')
rsaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaUsageState.setStatus('mandatory')
rsaOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 12), )
if mibBuilder.loadTexts: rsaOperationalTable.setStatus('mandatory')
rsaOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"))
if mibBuilder.loadTexts: rsaOperationalEntry.setStatus('mandatory')
rsaMaxRsiConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaMaxRsiConnections.setStatus('mandatory')
rsaRsiConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaRsiConnections.setStatus('mandatory')
rsaDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2))
rsaDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1), )
if mibBuilder.loadTexts: rsaDnaRowStatusTable.setStatus('mandatory')
rsaDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"))
if mibBuilder.loadTexts: rsaDnaRowStatusEntry.setStatus('mandatory')
rsaDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaRowStatus.setStatus('mandatory')
rsaDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaComponentName.setStatus('mandatory')
rsaDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaStorageType.setStatus('mandatory')
rsaDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: rsaDnaIndex.setStatus('mandatory')
rsaDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 10), )
if mibBuilder.loadTexts: rsaDnaAddressTable.setStatus('mandatory')
rsaDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"))
if mibBuilder.loadTexts: rsaDnaAddressEntry.setStatus('mandatory')
rsaDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaNumberingPlanIndicator.setStatus('mandatory')
rsaDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaDataNetworkAddress.setStatus('mandatory')
rsaDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 11), )
if mibBuilder.loadTexts: rsaDnaOutgoingOptionsTable.setStatus('mandatory')
rsaDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"))
if mibBuilder.loadTexts: rsaDnaOutgoingOptionsEntry.setStatus('mandatory')
rsaDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaOutCalls.setStatus('mandatory')
rsaDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 12), )
if mibBuilder.loadTexts: rsaDnaIncomingOptionsTable.setStatus('mandatory')
rsaDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"))
if mibBuilder.loadTexts: rsaDnaIncomingOptionsEntry.setStatus('mandatory')
rsaDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaIncCalls.setStatus('mandatory')
rsaDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaIncAccess.setStatus('mandatory')
rsaDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2))
rsaDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1), )
if mibBuilder.loadTexts: rsaDnaCugRowStatusTable.setStatus('mandatory')
rsaDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaCugIndex"))
if mibBuilder.loadTexts: rsaDnaCugRowStatusEntry.setStatus('mandatory')
rsaDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaCugRowStatus.setStatus('mandatory')
rsaDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugComponentName.setStatus('mandatory')
rsaDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugStorageType.setStatus('mandatory')
rsaDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rsaDnaCugIndex.setStatus('mandatory')
rsaDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10), )
if mibBuilder.loadTexts: rsaDnaCugCugOptionsTable.setStatus('mandatory')
rsaDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaDnaCugIndex"))
if mibBuilder.loadTexts: rsaDnaCugCugOptionsEntry.setStatus('mandatory')
rsaDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaCugType.setStatus('mandatory')
rsaDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaCugDnic.setStatus('mandatory')
rsaDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaDnaCugInterlockCode.setStatus('mandatory')
rsaDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugPreferential.setStatus('mandatory')
rsaDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugOutCalls.setStatus('mandatory')
rsaDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugIncCalls.setStatus('mandatory')
rsaDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaDnaCugPrivileged.setStatus('mandatory')
rsaVncsAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3))
rsaVncsAccessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1), )
if mibBuilder.loadTexts: rsaVncsAccessRowStatusTable.setStatus('mandatory')
rsaVncsAccessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaVncsAccessIndex"))
if mibBuilder.loadTexts: rsaVncsAccessRowStatusEntry.setStatus('mandatory')
rsaVncsAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaVncsAccessRowStatus.setStatus('mandatory')
rsaVncsAccessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessComponentName.setStatus('mandatory')
rsaVncsAccessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessStorageType.setStatus('mandatory')
rsaVncsAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: rsaVncsAccessIndex.setStatus('mandatory')
rsaVncsAccessProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 10), )
if mibBuilder.loadTexts: rsaVncsAccessProvisionedTable.setStatus('mandatory')
rsaVncsAccessProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaVncsAccessIndex"))
if mibBuilder.loadTexts: rsaVncsAccessProvisionedEntry.setStatus('mandatory')
rsaVncsAccessTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsaVncsAccessTimeToLive.setStatus('mandatory')
rsaVncsAccessStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 11), )
if mibBuilder.loadTexts: rsaVncsAccessStateTable.setStatus('mandatory')
rsaVncsAccessStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaVncsAccessIndex"))
if mibBuilder.loadTexts: rsaVncsAccessStateEntry.setStatus('mandatory')
rsaVncsAccessAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessAdminState.setStatus('mandatory')
rsaVncsAccessOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessOperationalState.setStatus('mandatory')
rsaVncsAccessUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessUsageState.setStatus('mandatory')
rsaVncsAccessOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12), )
if mibBuilder.loadTexts: rsaVncsAccessOperationalTable.setStatus('mandatory')
rsaVncsAccessOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaVncsAccessIndex"))
if mibBuilder.loadTexts: rsaVncsAccessOperationalEntry.setStatus('mandatory')
rsaVncsAccessRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessRequestsSent.setStatus('mandatory')
rsaVncsAccessRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessRepliesReceived.setStatus('mandatory')
rsaVncsAccessRequestsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessRequestsQueued.setStatus('mandatory')
rsaVncsAccessRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaVncsAccessRequestsDiscarded.setStatus('mandatory')
rsaConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4))
rsaConnectionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1), )
if mibBuilder.loadTexts: rsaConnectionRowStatusTable.setStatus('mandatory')
rsaConnectionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"))
if mibBuilder.loadTexts: rsaConnectionRowStatusEntry.setStatus('mandatory')
rsaConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionRowStatus.setStatus('mandatory')
rsaConnectionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionComponentName.setStatus('mandatory')
rsaConnectionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionStorageType.setStatus('mandatory')
rsaConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: rsaConnectionIndex.setStatus('mandatory')
rsaConnectionOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 10), )
if mibBuilder.loadTexts: rsaConnectionOperationalTable.setStatus('mandatory')
rsaConnectionOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"))
if mibBuilder.loadTexts: rsaConnectionOperationalEntry.setStatus('mandatory')
rsaConnectionRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionRemoteName.setStatus('mandatory')
rsaConnectionCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 0), ("creatingVc", 1), ("calling", 2), ("acceptingCall", 3), ("registeringFmo", 4), ("establishingLapf", 5), ("dataTransfer", 6), ("clearingCall", 7), ("terminating", 8), ("terminatingVc", 9), ("terminated", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionCallState.setStatus('mandatory')
rsaConnectionServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 11), )
if mibBuilder.loadTexts: rsaConnectionServerStatsTable.setStatus('mandatory')
rsaConnectionServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"))
if mibBuilder.loadTexts: rsaConnectionServerStatsEntry.setStatus('mandatory')
rsaConnectionVncsRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVncsRequests.setStatus('mandatory')
rsaConnectionVncsReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVncsReplies.setStatus('mandatory')
rsaConnectionLapfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 12), )
if mibBuilder.loadTexts: rsaConnectionLapfStatusTable.setStatus('mandatory')
rsaConnectionLapfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"))
if mibBuilder.loadTexts: rsaConnectionLapfStatusEntry.setStatus('mandatory')
rsaConnectionLapfState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfState.setStatus('mandatory')
rsaConnectionLapfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfQueueSize.setStatus('mandatory')
rsaConnectionLapfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13), )
if mibBuilder.loadTexts: rsaConnectionLapfStatsTable.setStatus('mandatory')
rsaConnectionLapfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"))
if mibBuilder.loadTexts: rsaConnectionLapfStatsEntry.setStatus('mandatory')
rsaConnectionLapfStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfStateChanges.setStatus('mandatory')
rsaConnectionLapfRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfRemoteBusy.setStatus('mandatory')
rsaConnectionLapfAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfAckTimeouts.setStatus('mandatory')
rsaConnectionLapfRejectFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfRejectFramesRx.setStatus('mandatory')
rsaConnectionLapfIFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfIFramesTx.setStatus('mandatory')
rsaConnectionLapfIFramesTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfIFramesTxDiscarded.setStatus('mandatory')
rsaConnectionLapfIFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfIFramesRx.setStatus('mandatory')
rsaConnectionLapfIFramesRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionLapfIFramesRxDiscarded.setStatus('mandatory')
rsaConnectionVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2))
rsaConnectionVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1), )
if mibBuilder.loadTexts: rsaConnectionVcRowStatusTable.setStatus('mandatory')
rsaConnectionVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcIndex"))
if mibBuilder.loadTexts: rsaConnectionVcRowStatusEntry.setStatus('mandatory')
rsaConnectionVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcRowStatus.setStatus('mandatory')
rsaConnectionVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcComponentName.setStatus('mandatory')
rsaConnectionVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcStorageType.setStatus('mandatory')
rsaConnectionVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: rsaConnectionVcIndex.setStatus('mandatory')
rsaConnectionVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10), )
if mibBuilder.loadTexts: rsaConnectionVcCadTable.setStatus('mandatory')
rsaConnectionVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcIndex"))
if mibBuilder.loadTexts: rsaConnectionVcCadEntry.setStatus('mandatory')
rsaConnectionVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcType.setStatus('mandatory')
rsaConnectionVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcState.setStatus('mandatory')
rsaConnectionVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPreviousState.setStatus('mandatory')
rsaConnectionVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcDiagnosticCode.setStatus('mandatory')
rsaConnectionVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPreviousDiagnosticCode.setStatus('mandatory')
rsaConnectionVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCalledNpi.setStatus('mandatory')
rsaConnectionVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCalledDna.setStatus('mandatory')
rsaConnectionVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCalledLcn.setStatus('mandatory')
rsaConnectionVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCallingNpi.setStatus('mandatory')
rsaConnectionVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCallingDna.setStatus('mandatory')
rsaConnectionVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCallingLcn.setStatus('mandatory')
rsaConnectionVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcAccountingEnabled.setStatus('mandatory')
rsaConnectionVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcFastSelectCall.setStatus('mandatory')
rsaConnectionVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPathReliability.setStatus('mandatory')
rsaConnectionVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcAccountingEnd.setStatus('mandatory')
rsaConnectionVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPriority.setStatus('mandatory')
rsaConnectionVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcSegmentSize.setStatus('mandatory')
rsaConnectionVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcMaxSubnetPktSize.setStatus('mandatory')
rsaConnectionVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcRcosToNetwork.setStatus('mandatory')
rsaConnectionVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcRcosFromNetwork.setStatus('mandatory')
rsaConnectionVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcEmissionPriorityToNetwork.setStatus('mandatory')
rsaConnectionVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcEmissionPriorityFromNetwork.setStatus('mandatory')
rsaConnectionVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcDataPath.setStatus('mandatory')
rsaConnectionVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11), )
if mibBuilder.loadTexts: rsaConnectionVcIntdTable.setStatus('mandatory')
rsaConnectionVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcIndex"))
if mibBuilder.loadTexts: rsaConnectionVcIntdEntry.setStatus('mandatory')
rsaConnectionVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCallReferenceNumber.setStatus('mandatory')
rsaConnectionVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcElapsedTimeTillNow.setStatus('mandatory')
rsaConnectionVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcSegmentsRx.setStatus('mandatory')
rsaConnectionVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcSegmentsSent.setStatus('mandatory')
rsaConnectionVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcStartTime.setStatus('mandatory')
rsaConnectionVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12), )
if mibBuilder.loadTexts: rsaConnectionVcFrdTable.setStatus('mandatory')
rsaConnectionVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcIndex"))
if mibBuilder.loadTexts: rsaConnectionVcFrdEntry.setStatus('mandatory')
rsaConnectionVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcFrmCongestedToSubnet.setStatus('mandatory')
rsaConnectionVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCannotForwardToSubnet.setStatus('mandatory')
rsaConnectionVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcNotDataXferToSubnet.setStatus('mandatory')
rsaConnectionVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
rsaConnectionVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcCombErrorsFromSubnet.setStatus('mandatory')
rsaConnectionVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcDuplicatesFromSubnet.setStatus('mandatory')
rsaConnectionVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcNotDataXferFromSubnet.setStatus('mandatory')
rsaConnectionVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcFrmLossTimeouts.setStatus('mandatory')
rsaConnectionVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcOoSeqByteCntExceeded.setStatus('mandatory')
rsaConnectionVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPeakOoSeqPktCount.setStatus('mandatory')
rsaConnectionVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPeakOoSeqFrmForwarded.setStatus('mandatory')
rsaConnectionVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcSendSequenceNumber.setStatus('mandatory')
rsaConnectionVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPktRetryTimeouts.setStatus('mandatory')
rsaConnectionVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPeakRetryQueueSize.setStatus('mandatory')
rsaConnectionVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcSubnetRecoveries.setStatus('mandatory')
rsaConnectionVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcOoSeqPktCntExceeded.setStatus('mandatory')
rsaConnectionVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcPeakOoSeqByteCount.setStatus('mandatory')
rsaConnectionVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 417), )
if mibBuilder.loadTexts: rsaConnectionVcDmepTable.setStatus('mandatory')
rsaConnectionVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 417, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcIndex"), (0, "Nortel-Magellan-Passport-ServerAccessRsaMIB", "rsaConnectionVcDmepValue"))
if mibBuilder.loadTexts: rsaConnectionVcDmepEntry.setStatus('mandatory')
rsaConnectionVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 108, 4, 2, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsaConnectionVcDmepValue.setStatus('mandatory')
serverAccessRsaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 1))
serverAccessRsaGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 1, 5))
serverAccessRsaGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 1, 5, 2))
serverAccessRsaGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 1, 5, 2, 2))
serverAccessRsaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 3))
serverAccessRsaCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 3, 5))
serverAccessRsaCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 3, 5, 2))
serverAccessRsaCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 116, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-ServerAccessRsaMIB", rsaConnectionVcPeakRetryQueueSize=rsaConnectionVcPeakRetryQueueSize, rsaConnectionLapfIFramesTx=rsaConnectionLapfIFramesTx, rsaDnaRowStatusTable=rsaDnaRowStatusTable, rsaConnectionOperationalEntry=rsaConnectionOperationalEntry, rsaDnaIncomingOptionsEntry=rsaDnaIncomingOptionsEntry, rsaConnectionVcCalledDna=rsaConnectionVcCalledDna, rsaConnectionVncsRequests=rsaConnectionVncsRequests, rsaConnectionVcFrmLossTimeouts=rsaConnectionVcFrmLossTimeouts, rsaDnaCugRowStatusTable=rsaDnaCugRowStatusTable, rsaOptionsTable=rsaOptionsTable, rsaConnectionVcEmissionPriorityFromNetwork=rsaConnectionVcEmissionPriorityFromNetwork, rsaDnaCugStorageType=rsaDnaCugStorageType, rsaConnectionVcPktRetryTimeouts=rsaConnectionVcPktRetryTimeouts, rsaDnaStorageType=rsaDnaStorageType, rsaConnectionVcCallReferenceNumber=rsaConnectionVcCallReferenceNumber, rsaDnaCugPrivileged=rsaDnaCugPrivileged, rsaOperationalState=rsaOperationalState, rsaVncsAccessOperationalTable=rsaVncsAccessOperationalTable, rsaConnectionVcDiagnosticCode=rsaConnectionVcDiagnosticCode, rsaComponentName=rsaComponentName, rsaConnectionVcDuplicatesFromSubnet=rsaConnectionVcDuplicatesFromSubnet, rsaDnaCugDnic=rsaDnaCugDnic, rsa=rsa, rsaMaxRsiConnections=rsaMaxRsiConnections, rsaConnectionVcCallingDna=rsaConnectionVcCallingDna, rsaConnectionVcPriority=rsaConnectionVcPriority, rsaUsageState=rsaUsageState, rsaRowStatusTable=rsaRowStatusTable, rsaOperationalEntry=rsaOperationalEntry, rsaVncsAccessRequestsDiscarded=rsaVncsAccessRequestsDiscarded, rsaConnectionVcCannotForwardToSubnet=rsaConnectionVcCannotForwardToSubnet, rsaRowStatus=rsaRowStatus, rsaVncsAccessIndex=rsaVncsAccessIndex, rsaConnectionVcPeakOoSeqByteCount=rsaConnectionVcPeakOoSeqByteCount, rsaConnectionVc=rsaConnectionVc, rsaDnaRowStatusEntry=rsaDnaRowStatusEntry, rsaConnectionOperationalTable=rsaConnectionOperationalTable, rsaDnaComponentName=rsaDnaComponentName, rsaConnectionVcCallingLcn=rsaConnectionVcCallingLcn, rsaVncsAccessOperationalState=rsaVncsAccessOperationalState, rsaDnaNumberingPlanIndicator=rsaDnaNumberingPlanIndicator, rsaOptionsEntry=rsaOptionsEntry, rsaConnectionVcNotDataXferToSubnet=rsaConnectionVcNotDataXferToSubnet, rsaConnectionLapfIFramesTxDiscarded=rsaConnectionLapfIFramesTxDiscarded, rsaDnaOutgoingOptionsEntry=rsaDnaOutgoingOptionsEntry, rsaConnectionVcIntdEntry=rsaConnectionVcIntdEntry, rsaConnectionLapfState=rsaConnectionLapfState, rsaConnectionVcRcosFromNetwork=rsaConnectionVcRcosFromNetwork, rsaConnectionVcFrmCongestedToSubnet=rsaConnectionVcFrmCongestedToSubnet, rsaLogicalProcessor=rsaLogicalProcessor, serverAccessRsaGroupBE=serverAccessRsaGroupBE, rsaDnaAddressTable=rsaDnaAddressTable, serverAccessRsaCapabilities=serverAccessRsaCapabilities, rsaVncsAccessStateEntry=rsaVncsAccessStateEntry, rsaConnectionVcPeakOoSeqPktCount=rsaConnectionVcPeakOoSeqPktCount, rsaDnaCugOutCalls=rsaDnaCugOutCalls, rsaDnaCugCugOptionsTable=rsaDnaCugCugOptionsTable, rsaConnectionVcFrdTable=rsaConnectionVcFrdTable, rsaVncsAccessProvisionedTable=rsaVncsAccessProvisionedTable, rsaConnectionLapfAckTimeouts=rsaConnectionLapfAckTimeouts, rsaConnectionVcPeakOoSeqFrmForwarded=rsaConnectionVcPeakOoSeqFrmForwarded, rsaDnaCugPreferential=rsaDnaCugPreferential, rsaConnectionVcCombErrorsFromSubnet=rsaConnectionVcCombErrorsFromSubnet, serverAccessRsaCapabilitiesBE01A=serverAccessRsaCapabilitiesBE01A, rsaConnectionLapfStatusTable=rsaConnectionLapfStatusTable, rsaStateTable=rsaStateTable, rsaConnectionVcStorageType=rsaConnectionVcStorageType, rsaConnectionLapfIFramesRxDiscarded=rsaConnectionLapfIFramesRxDiscarded, rsaDnaCug=rsaDnaCug, rsaConnectionStorageType=rsaConnectionStorageType, rsaConnectionVcCalledLcn=rsaConnectionVcCalledLcn, serverAccessRsaCapabilitiesBE01=serverAccessRsaCapabilitiesBE01, rsaRowStatusEntry=rsaRowStatusEntry, rsaVncsAccessRowStatusEntry=rsaVncsAccessRowStatusEntry, rsaDnaIncCalls=rsaDnaIncCalls, serverAccessRsaGroupBE01A=serverAccessRsaGroupBE01A, rsaDnaCugComponentName=rsaDnaCugComponentName, rsaConnectionLapfStateChanges=rsaConnectionLapfStateChanges, rsaConnectionRowStatus=rsaConnectionRowStatus, rsaDna=rsaDna, rsaConnectionVcDmepValue=rsaConnectionVcDmepValue, rsaDnaCugType=rsaDnaCugType, rsaConnectionVcStartTime=rsaConnectionVcStartTime, rsaDnaRowStatus=rsaDnaRowStatus, rsaDnaIncAccess=rsaDnaIncAccess, rsaVncsAccessTimeToLive=rsaVncsAccessTimeToLive, rsaConnectionVcSubnetRecoveries=rsaConnectionVcSubnetRecoveries, rsaDnaIncomingOptionsTable=rsaDnaIncomingOptionsTable, rsaConnectionVcIntdTable=rsaConnectionVcIntdTable, rsaConnectionIndex=rsaConnectionIndex, rsaConnectionComponentName=rsaConnectionComponentName, rsaConnectionVcRowStatusEntry=rsaConnectionVcRowStatusEntry, rsaConnectionVcSendSequenceNumber=rsaConnectionVcSendSequenceNumber, rsaConnectionVcDmepTable=rsaConnectionVcDmepTable, rsaConnectionVcOoSeqByteCntExceeded=rsaConnectionVcOoSeqByteCntExceeded, rsaConnectionLapfStatusEntry=rsaConnectionLapfStatusEntry, rsaDnaCugRowStatus=rsaDnaCugRowStatus, rsaConnectionVcCadTable=rsaConnectionVcCadTable, rsaVncsAccessRowStatusTable=rsaVncsAccessRowStatusTable, rsaStateEntry=rsaStateEntry, rsaConnectionVcOutOfRangeFrmFromSubnet=rsaConnectionVcOutOfRangeFrmFromSubnet, rsaConnectionRemoteName=rsaConnectionRemoteName, serverAccessRsaGroupBE01=serverAccessRsaGroupBE01, serverAccessRsaGroup=serverAccessRsaGroup, rsaConnectionVcAccountingEnabled=rsaConnectionVcAccountingEnabled, rsaConnectionVcOoSeqPktCntExceeded=rsaConnectionVcOoSeqPktCntExceeded, rsaDnaCugCugOptionsEntry=rsaDnaCugCugOptionsEntry, rsaVncsAccess=rsaVncsAccess, rsaAdminState=rsaAdminState, rsaDnaIndex=rsaDnaIndex, rsaVncsAccessProvisionedEntry=rsaVncsAccessProvisionedEntry, rsaConnectionVcPathReliability=rsaConnectionVcPathReliability, rsaConnectionVcRowStatus=rsaConnectionVcRowStatus, rsaDnaCugInterlockCode=rsaDnaCugInterlockCode, rsaVncsAccessRowStatus=rsaVncsAccessRowStatus, rsaConnectionVcRowStatusTable=rsaConnectionVcRowStatusTable, rsaConnectionVcMaxSubnetPktSize=rsaConnectionVcMaxSubnetPktSize, rsaConnectionVcSegmentsRx=rsaConnectionVcSegmentsRx, rsaVncsAccessAdminState=rsaVncsAccessAdminState, rsaDnaOutCalls=rsaDnaOutCalls, rsaConnection=rsaConnection, rsaConnectionServerStatsTable=rsaConnectionServerStatsTable, rsaConnectionVcType=rsaConnectionVcType, rsaConnectionVcAccountingEnd=rsaConnectionVcAccountingEnd, rsaConnectionVcCalledNpi=rsaConnectionVcCalledNpi, rsaOperationalTable=rsaOperationalTable, rsaConnectionVcFrdEntry=rsaConnectionVcFrdEntry, rsaDnaCugIndex=rsaDnaCugIndex, rsaVncsAccessRequestsSent=rsaVncsAccessRequestsSent, rsaVncsAccessRepliesReceived=rsaVncsAccessRepliesReceived, rsaConnectionVcPreviousState=rsaConnectionVcPreviousState, rsaDnaCugRowStatusEntry=rsaDnaCugRowStatusEntry, serverAccessRsaCapabilitiesBE=serverAccessRsaCapabilitiesBE, rsaConnectionRowStatusEntry=rsaConnectionRowStatusEntry, rsaStorageType=rsaStorageType, rsaConnectionVcComponentName=rsaConnectionVcComponentName, rsaVncsAccessStorageType=rsaVncsAccessStorageType, rsaConnectionVcState=rsaConnectionVcState, rsaConnectionVncsReplies=rsaConnectionVncsReplies, rsaConnectionVcFastSelectCall=rsaConnectionVcFastSelectCall, rsaConnectionVcSegmentSize=rsaConnectionVcSegmentSize, rsaConnectionVcRcosToNetwork=rsaConnectionVcRcosToNetwork, rsaConnectionCallState=rsaConnectionCallState, rsaConnectionVcEmissionPriorityToNetwork=rsaConnectionVcEmissionPriorityToNetwork, rsaDnaAddressEntry=rsaDnaAddressEntry, rsaRsiConnections=rsaRsiConnections, rsaConnectionVcDataPath=rsaConnectionVcDataPath, rsaConnectionVcSegmentsSent=rsaConnectionVcSegmentsSent, rsaVncsAccessComponentName=rsaVncsAccessComponentName, rsaDnaDataNetworkAddress=rsaDnaDataNetworkAddress, rsaConnectionVcPreviousDiagnosticCode=rsaConnectionVcPreviousDiagnosticCode, rsaConnectionVcElapsedTimeTillNow=rsaConnectionVcElapsedTimeTillNow, rsaConnectionLapfStatsEntry=rsaConnectionLapfStatsEntry, rsaConnectionVcDmepEntry=rsaConnectionVcDmepEntry, rsaConnectionLapfQueueSize=rsaConnectionLapfQueueSize, rsaDnaCugIncCalls=rsaDnaCugIncCalls, rsaVncsAccessUsageState=rsaVncsAccessUsageState, rsaIndex=rsaIndex, rsaConnectionVcCadEntry=rsaConnectionVcCadEntry, rsaVncsAccessOperationalEntry=rsaVncsAccessOperationalEntry, rsaConnectionLapfRemoteBusy=rsaConnectionLapfRemoteBusy, rsaDnaOutgoingOptionsTable=rsaDnaOutgoingOptionsTable, rsaConnectionVcCallingNpi=rsaConnectionVcCallingNpi, rsaConnectionLapfRejectFramesRx=rsaConnectionLapfRejectFramesRx, rsaConnectionVcNotDataXferFromSubnet=rsaConnectionVcNotDataXferFromSubnet, rsaConnectionRowStatusTable=rsaConnectionRowStatusTable, rsaConnectionLapfIFramesRx=rsaConnectionLapfIFramesRx, rsaConnectionVcIndex=rsaConnectionVcIndex, serverAccessRsaMIB=serverAccessRsaMIB, rsaConnectionServerStatsEntry=rsaConnectionServerStatsEntry, rsaConnectionLapfStatsTable=rsaConnectionLapfStatsTable, rsaVncsAccessStateTable=rsaVncsAccessStateTable, rsaVncsAccessRequestsQueued=rsaVncsAccessRequestsQueued)
