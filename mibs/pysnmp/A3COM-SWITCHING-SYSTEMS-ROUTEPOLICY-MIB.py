#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, Bits, iso, ObjectIdentity, Unsigned32, IpAddress, TimeTicks, Counter32, ModuleIdentity, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "Bits", "iso", "ObjectIdentity", "Unsigned32", "IpAddress", "TimeTicks", "Counter32", "ModuleIdentity", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComRoutePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 23))
a3ComRoutePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1), )
if mibBuilder.loadTexts: a3ComRoutePolicyTable.setStatus('mandatory')
a3ComRoutePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB", "a3ComRoutePolicyIndex"))
if mibBuilder.loadTexts: a3ComRoutePolicyEntry.setStatus('mandatory')
a3ComRoutePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComRoutePolicyIndex.setStatus('mandatory')
a3ComRoutePolicyProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 1), ("ip-rip", 2), ("ip-ospf", 3), ("ip-bgp4", 4), ("ipx-rip", 5), ("ipx-sap", 6), ("at-rtmp", 7), ("at-kip", 8), ("at-aurp", 9))).clone('undefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyProtocolType.setStatus('mandatory')
a3ComRoutePolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2))).clone('import')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyType.setStatus('mandatory')
a3ComRoutePolicyOriginProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyOriginProtocol.setStatus('mandatory')
a3ComRoutePolicySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicySourceAddress.setStatus('mandatory')
a3ComRoutePolicyRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyRouteAddress.setStatus('mandatory')
a3ComRoutePolicyRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyRouteMask.setStatus('mandatory')
a3ComRoutePolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyAction.setStatus('mandatory')
a3ComRoutePolicyAdjustMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noop", 1), ("add", 2), ("subtract", 3), ("multiply", 4), ("divide", 5), ("module", 6))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyAdjustMetric.setStatus('mandatory')
a3ComRoutePolicyMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyMetric.setStatus('mandatory')
a3ComRoutePolicyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyWeight.setStatus('mandatory')
a3ComRoutePolicyExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-ospf-type1", 1), ("ip-ospf-type2", 2), ("default", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyExportType.setStatus('mandatory')
a3ComRoutePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 1, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyRowStatus.setStatus('mandatory')
a3ComRoutePolicyNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComRoutePolicyNextFreeIndex.setStatus('mandatory')
a3ComRoutePolicyIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 3), )
if mibBuilder.loadTexts: a3ComRoutePolicyIpIfTable.setStatus('mandatory')
a3ComRoutePolicyIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB", "a3ComRoutePolicyIpIfIndex"), (0, "A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB", "a3ComRoutePolicyIpIfAddressIndex"))
if mibBuilder.loadTexts: a3ComRoutePolicyIpIfEntry.setStatus('mandatory')
a3ComRoutePolicyIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComRoutePolicyIpIfIndex.setStatus('mandatory')
a3ComRoutePolicyIpIfAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComRoutePolicyIpIfAddressIndex.setStatus('mandatory')
a3ComRoutePolicyIpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 23, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComRoutePolicyIpIfRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-ROUTEPOLICY-MIB", switchingSystemsMibs=switchingSystemsMibs, a3Com=a3Com, a3ComRoutePolicyAction=a3ComRoutePolicyAction, a3ComRoutePolicyIpIfEntry=a3ComRoutePolicyIpIfEntry, a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComRoutePolicyRouteAddress=a3ComRoutePolicyRouteAddress, a3ComRoutePolicyIpIfAddressIndex=a3ComRoutePolicyIpIfAddressIndex, RowStatus=RowStatus, a3ComRoutePolicyExportType=a3ComRoutePolicyExportType, a3ComRoutePolicyRouteMask=a3ComRoutePolicyRouteMask, a3ComRoutePolicyEntry=a3ComRoutePolicyEntry, a3ComRoutePolicyIndex=a3ComRoutePolicyIndex, a3ComRoutePolicyIpIfRowStatus=a3ComRoutePolicyIpIfRowStatus, a3ComRoutePolicyNextFreeIndex=a3ComRoutePolicyNextFreeIndex, a3ComRoutePolicyTable=a3ComRoutePolicyTable, a3ComRoutePolicyIpIfTable=a3ComRoutePolicyIpIfTable, a3ComRoutePolicyType=a3ComRoutePolicyType, a3ComRoutePolicy=a3ComRoutePolicy, a3ComRoutePolicyAdjustMetric=a3ComRoutePolicyAdjustMetric, a3ComRoutePolicyProtocolType=a3ComRoutePolicyProtocolType, a3ComRoutePolicyRowStatus=a3ComRoutePolicyRowStatus, a3ComRoutePolicyMetric=a3ComRoutePolicyMetric, a3ComRoutePolicyOriginProtocol=a3ComRoutePolicyOriginProtocol, a3ComRoutePolicyIpIfIndex=a3ComRoutePolicyIpIfIndex, a3ComRoutePolicySourceAddress=a3ComRoutePolicySourceAddress, a3ComRoutePolicyWeight=a3ComRoutePolicyWeight)
