#
# PySNMP MIB module RBRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:45:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Unsigned32, Counter64, ObjectIdentity, mib_2, Gauge32, Counter32, TimeTicks, NotificationType, iso, MibIdentifier, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Counter64", "ObjectIdentity", "mib-2", "Gauge32", "Counter32", "TimeTicks", "NotificationType", "iso", "MibIdentifier", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString, TruthValue, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress", "RowStatus")
rbridgeMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 214))
rbridgeMIB.setRevisions(('2013-01-07 00:00',))
if mibBuilder.loadTexts: rbridgeMIB.setLastUpdated('201301070000Z')
if mibBuilder.loadTexts: rbridgeMIB.setOrganization('IETF TRILL Working Group')
rbridgeNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 0))
rbridgeObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1))
rbridgeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2))
rbridgeBase = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 1))
rbridgeFdb = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 2))
rbridgeVlan = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 3))
rbridgeEsadi = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 4))
rbridgeCounter = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 5))
rbridgeSnooping = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 6))
rbridgeDtree = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 7))
rbridgeTrill = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 8))
class RbridgeAddress(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RbridgeNickname(TextualConvention, Unsigned32):
    reference = 'RFC 6325, Section 3.7'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65471)

rbridgeBaseTrillVersion = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseTrillVersion.setStatus('current')
rbridgeBaseNumPorts = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 2), Unsigned32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseNumPorts.setStatus('current')
rbridgeBaseForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseForwardDelay.setStatus('current')
rbridgeBaseUniMultipathEnable = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseUniMultipathEnable.setStatus('current')
rbridgeBaseMultiMultipathEnable = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseMultiMultipathEnable.setStatus('current')
rbridgeBaseAcceptEncapNonadj = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseAcceptEncapNonadj.setStatus('current')
rbridgeBaseNicknameNumber = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseNicknameNumber.setStatus('current')
rbridgeBaseNicknameTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 1, 8), )
if mibBuilder.loadTexts: rbridgeBaseNicknameTable.setStatus('current')
rbridgeBaseNicknameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBaseNicknameName"))
if mibBuilder.loadTexts: rbridgeBaseNicknameEntry.setStatus('current')
rbridgeBaseNicknameName = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeBaseNicknameName.setStatus('current')
rbridgeBaseNicknamePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknamePriority.setStatus('current')
rbridgeBaseNicknameDtrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknameDtrPriority.setStatus('current')
rbridgeBaseNicknameType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseNicknameType.setStatus('current')
rbridgeBaseNicknameRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknameRowStatus.setStatus('current')
rbridgeBasePortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 1, 9), )
if mibBuilder.loadTexts: rbridgeBasePortTable.setStatus('current')
rbridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"))
if mibBuilder.loadTexts: rbridgeBasePortEntry.setStatus('current')
rbridgeBasePort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: rbridgeBasePort.setStatus('current')
rbridgeBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortIfIndex.setStatus('current')
rbridgeBasePortDisable = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDisable.setStatus('current')
rbridgeBasePortTrunkPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortTrunkPort.setStatus('current')
rbridgeBasePortAccessPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortAccessPort.setStatus('current')
rbridgeBasePortP2pHellos = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortP2pHellos.setStatus('current')
rbridgeBasePortState = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uninhibited", 1), ("portInhibited", 2), ("vlanInhibited", 3), ("disabled", 4), ("broken", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortState.setStatus('current')
rbridgeBasePortInhibitionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 8), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortInhibitionTime.setStatus('current')
rbridgeBasePortDisableLearning = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDisableLearning.setStatus('current')
rbridgeBasePortDesiredDesigVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 10), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDesiredDesigVlan.setStatus('current')
rbridgeBasePortDesigVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 11), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortDesigVlan.setStatus('current')
rbridgeBasePortStpRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortStpRoot.setStatus('current')
rbridgeBasePortStpRootChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 13), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortStpRootChanges.setStatus('current')
rbridgeBasePortStpWiringCloset = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 14), BridgeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortStpWiringCloset.setStatus('current')
rbridgeConfidenceNative = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceNative.setStatus('current')
rbridgeConfidenceDecap = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceDecap.setStatus('current')
rbridgeConfidenceStatic = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceStatic.setStatus('current')
rbridgeUniFdbTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 4), )
if mibBuilder.loadTexts: rbridgeUniFdbTable.setStatus('current')
rbridgeUniFdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeFdbId"), (0, "RBRIDGE-MIB", "rbridgeUniFdbAddr"))
if mibBuilder.loadTexts: rbridgeUniFdbEntry.setStatus('current')
rbridgeFdbId = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rbridgeFdbId.setStatus('current')
rbridgeUniFdbAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: rbridgeUniFdbAddr.setStatus('current')
rbridgeUniFdbPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbPort.setStatus('current')
rbridgeUniFdbNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 4), RbridgeNickname()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbNickname.setStatus('current')
rbridgeUniFdbConfidence = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbConfidence.setStatus('current')
rbridgeUniFdbStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5), ("esadi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbStatus.setStatus('current')
rbridgeUniFibTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 5), )
if mibBuilder.loadTexts: rbridgeUniFibTable.setStatus('current')
rbridgeUniFibEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeUniFibNickname"), (0, "RBRIDGE-MIB", "rbridgeUniFibPort"), (0, "RBRIDGE-MIB", "rbridgeUniFibNextHop"))
if mibBuilder.loadTexts: rbridgeUniFibEntry.setStatus('current')
rbridgeUniFibNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeUniFibNickname.setStatus('current')
rbridgeUniFibPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbridgeUniFibPort.setStatus('current')
rbridgeUniFibNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 3), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeUniFibNextHop.setStatus('current')
rbridgeUniFibHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFibHopCount.setStatus('current')
rbridgeMultiFibTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 6), )
if mibBuilder.loadTexts: rbridgeMultiFibTable.setStatus('current')
rbridgeMultiFibEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeMultiFibNickname"))
if mibBuilder.loadTexts: rbridgeMultiFibEntry.setStatus('current')
rbridgeMultiFibNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeMultiFibNickname.setStatus('current')
rbridgeMultiFibPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeMultiFibPorts.setStatus('current')
rbridgeVlanTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 3, 1), )
if mibBuilder.loadTexts: rbridgeVlanTable.setStatus('current')
rbridgeVlanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeVlanEntry.setStatus('current')
rbridgeVlanIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(4096, 4294967295), )))
if mibBuilder.loadTexts: rbridgeVlanIndex.setStatus('current')
rbridgeVlanForwarderLosts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 2), Counter32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanForwarderLosts.setStatus('current')
rbridgeVlanDisableLearning = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeVlanDisableLearning.setStatus('current')
rbridgeVlanSnooping = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("ipv4", 2), ("ipv6", 3), ("ipv4v6", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanSnooping.setStatus('current')
rbridgeVlanPortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 3, 2), )
if mibBuilder.loadTexts: rbridgeVlanPortTable.setStatus('current')
rbridgeVlanPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"), (0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeVlanPortEntry.setStatus('current')
rbridgeVlanPortInhibited = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortInhibited.setStatus('current')
rbridgeVlanPortForwarder = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortForwarder.setStatus('current')
rbridgeVlanPortAnnouncing = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeVlanPortAnnouncing.setStatus('current')
rbridgeVlanPortDetectedVlanMapping = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortDetectedVlanMapping.setStatus('current')
rbridgePortCounterTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 5, 1), )
if mibBuilder.loadTexts: rbridgePortCounterTable.setStatus('current')
rbridgePortCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"))
if mibBuilder.loadTexts: rbridgePortCounterEntry.setStatus('current')
rbridgePortRpfCheckFails = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortRpfCheckFails.setStatus('current')
rbridgePortHopCountExceeds = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortHopCountExceeds.setStatus('current')
rbridgePortOptionDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortOptionDrops.setStatus('current')
rbridgePortTrillInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortTrillInFrames.setStatus('current')
rbridgePortTrillOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortTrillOutFrames.setStatus('current')
rbridgeEsadiTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 4, 1), )
if mibBuilder.loadTexts: rbridgeEsadiTable.setStatus('current')
rbridgeEsadiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeEsadiEntry.setStatus('current')
rbridgeEsadiEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiEnable.setStatus('current')
rbridgeEsadiConfidence = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiConfidence.setStatus('current')
rbridgeEsadiDrbPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiDrbPriority.setStatus('current')
rbridgeEsadiDrb = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 4), RbridgeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeEsadiDrb.setStatus('current')
rbridgeEsadiDrbHoldingTime = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiDrbHoldingTime.setStatus('current')
rbridgeEsadiRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiRowStatus.setStatus('current')
rbridgeSnoopingPortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 6, 1), )
if mibBuilder.loadTexts: rbridgeSnoopingPortTable.setStatus('current')
rbridgeSnoopingPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 6, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"), (0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeSnoopingPortEntry.setStatus('current')
rbridgeSnoopingPortAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4v6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeSnoopingPortAddrType.setStatus('current')
rbridgeSnoopingAddrTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 6, 2), )
if mibBuilder.loadTexts: rbridgeSnoopingAddrTable.setStatus('current')
rbridgeSnoopingAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"), (0, "RBRIDGE-MIB", "rbridgeSnoopingAddrType"), (0, "RBRIDGE-MIB", "rbridgeSnoopingAddr"))
if mibBuilder.loadTexts: rbridgeSnoopingAddrEntry.setStatus('current')
rbridgeSnoopingAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rbridgeSnoopingAddrType.setStatus('current')
rbridgeSnoopingAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: rbridgeSnoopingAddr.setStatus('current')
rbridgeSnoopingAddrPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeSnoopingAddrPorts.setStatus('current')
rbridgeDtreePriority = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeDtreePriority.setStatus('current')
rbridgeDtreeActiveTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeActiveTrees.setStatus('current')
rbridgeDtreeMaxTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeMaxTrees.setStatus('current')
rbridgeDtreeDesiredUseTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeDesiredUseTrees.setStatus('current')
rbridgeDtreeTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 7, 5), )
if mibBuilder.loadTexts: rbridgeDtreeTable.setStatus('current')
rbridgeDtreeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeDtreeNumber"))
if mibBuilder.loadTexts: rbridgeDtreeEntry.setStatus('current')
rbridgeDtreeNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbridgeDtreeNumber.setStatus('current')
rbridgeDtreeNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 2), RbridgeNickname()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeNickname.setStatus('current')
rbridgeDtreeIngress = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeIngress.setStatus('current')
rbridgeTrillMinMtuDesired = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeTrillMinMtuDesired.setStatus('current')
rbridgeTrillSz = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillSz.setStatus('current')
rbridgeTrillMaxMtuProbes = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeTrillMaxMtuProbes.setStatus('current')
rbridgeTrillNbrTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 8, 4), )
if mibBuilder.loadTexts: rbridgeTrillNbrTable.setStatus('current')
rbridgeTrillNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeTrillNbrMacAddr"))
if mibBuilder.loadTexts: rbridgeTrillNbrEntry.setStatus('current')
rbridgeTrillNbrMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: rbridgeTrillNbrMacAddr.setStatus('current')
rbridgeTrillNbrMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillNbrMtu.setStatus('current')
rbridgeTrillNbrFailedMtuTest = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillNbrFailedMtuTest.setStatus('current')
rbridgeBaseNewDrb = NotificationType((1, 3, 6, 1, 2, 1, 214, 0, 1))
if mibBuilder.loadTexts: rbridgeBaseNewDrb.setStatus('current')
rbridgeBaseTopologyChange = NotificationType((1, 3, 6, 1, 2, 1, 214, 0, 2))
if mibBuilder.loadTexts: rbridgeBaseTopologyChange.setStatus('current')
rbridgeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2, 1))
rbridgeGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2, 2))
rbridgeBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 1)).setObjects(("RBRIDGE-MIB", "rbridgeBaseTrillVersion"), ("RBRIDGE-MIB", "rbridgeBaseNumPorts"), ("RBRIDGE-MIB", "rbridgeBaseForwardDelay"), ("RBRIDGE-MIB", "rbridgeBaseUniMultipathEnable"), ("RBRIDGE-MIB", "rbridgeBaseMultiMultipathEnable"), ("RBRIDGE-MIB", "rbridgeBaseAcceptEncapNonadj"), ("RBRIDGE-MIB", "rbridgeBaseNicknameNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBaseGroup = rbridgeBaseGroup.setStatus('current')
rbridgeBaseNicknameGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 2)).setObjects(("RBRIDGE-MIB", "rbridgeBaseNicknamePriority"), ("RBRIDGE-MIB", "rbridgeBaseNicknameDtrPriority"), ("RBRIDGE-MIB", "rbridgeBaseNicknameType"), ("RBRIDGE-MIB", "rbridgeBaseNicknameRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBaseNicknameGroup = rbridgeBaseNicknameGroup.setStatus('current')
rbridgeBasePortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 3)).setObjects(("RBRIDGE-MIB", "rbridgeBasePortIfIndex"), ("RBRIDGE-MIB", "rbridgeBasePortDisable"), ("RBRIDGE-MIB", "rbridgeBasePortTrunkPort"), ("RBRIDGE-MIB", "rbridgeBasePortAccessPort"), ("RBRIDGE-MIB", "rbridgeBasePortP2pHellos"), ("RBRIDGE-MIB", "rbridgeBasePortState"), ("RBRIDGE-MIB", "rbridgeBasePortDesiredDesigVlan"), ("RBRIDGE-MIB", "rbridgeBasePortDesigVlan"), ("RBRIDGE-MIB", "rbridgeBasePortInhibitionTime"), ("RBRIDGE-MIB", "rbridgeBasePortDisableLearning"), ("RBRIDGE-MIB", "rbridgeBasePortStpRoot"), ("RBRIDGE-MIB", "rbridgeBasePortStpRootChanges"), ("RBRIDGE-MIB", "rbridgeBasePortStpWiringCloset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBasePortGroup = rbridgeBasePortGroup.setStatus('current')
rbridgeFdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 4)).setObjects(("RBRIDGE-MIB", "rbridgeConfidenceNative"), ("RBRIDGE-MIB", "rbridgeConfidenceDecap"), ("RBRIDGE-MIB", "rbridgeConfidenceStatic"), ("RBRIDGE-MIB", "rbridgeUniFdbPort"), ("RBRIDGE-MIB", "rbridgeUniFdbNickname"), ("RBRIDGE-MIB", "rbridgeUniFdbConfidence"), ("RBRIDGE-MIB", "rbridgeUniFdbStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeFdbGroup = rbridgeFdbGroup.setStatus('current')
rbridgeFibGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 5)).setObjects(("RBRIDGE-MIB", "rbridgeUniFibHopCount"), ("RBRIDGE-MIB", "rbridgeMultiFibPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeFibGroup = rbridgeFibGroup.setStatus('current')
rbridgeVlanGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 6)).setObjects(("RBRIDGE-MIB", "rbridgeVlanForwarderLosts"), ("RBRIDGE-MIB", "rbridgeVlanDisableLearning"), ("RBRIDGE-MIB", "rbridgeVlanSnooping"), ("RBRIDGE-MIB", "rbridgeVlanPortInhibited"), ("RBRIDGE-MIB", "rbridgeVlanPortForwarder"), ("RBRIDGE-MIB", "rbridgeVlanPortAnnouncing"), ("RBRIDGE-MIB", "rbridgeVlanPortDetectedVlanMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeVlanGroup = rbridgeVlanGroup.setStatus('current')
rbridgePortCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 7)).setObjects(("RBRIDGE-MIB", "rbridgePortRpfCheckFails"), ("RBRIDGE-MIB", "rbridgePortHopCountExceeds"), ("RBRIDGE-MIB", "rbridgePortOptionDrops"), ("RBRIDGE-MIB", "rbridgePortTrillInFrames"), ("RBRIDGE-MIB", "rbridgePortTrillOutFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgePortCounterGroup = rbridgePortCounterGroup.setStatus('current')
rbridgeEsadiGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 8)).setObjects(("RBRIDGE-MIB", "rbridgeEsadiEnable"), ("RBRIDGE-MIB", "rbridgeEsadiConfidence"), ("RBRIDGE-MIB", "rbridgeEsadiDrbPriority"), ("RBRIDGE-MIB", "rbridgeEsadiDrb"), ("RBRIDGE-MIB", "rbridgeEsadiDrbHoldingTime"), ("RBRIDGE-MIB", "rbridgeEsadiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeEsadiGroup = rbridgeEsadiGroup.setStatus('current')
rbridgeSnoopingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 9)).setObjects(("RBRIDGE-MIB", "rbridgeSnoopingPortAddrType"), ("RBRIDGE-MIB", "rbridgeSnoopingAddrPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeSnoopingGroup = rbridgeSnoopingGroup.setStatus('current')
rbridgeDtreeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 10)).setObjects(("RBRIDGE-MIB", "rbridgeDtreePriority"), ("RBRIDGE-MIB", "rbridgeDtreeActiveTrees"), ("RBRIDGE-MIB", "rbridgeDtreeMaxTrees"), ("RBRIDGE-MIB", "rbridgeDtreeDesiredUseTrees"), ("RBRIDGE-MIB", "rbridgeDtreeNickname"), ("RBRIDGE-MIB", "rbridgeDtreeIngress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeDtreeGroup = rbridgeDtreeGroup.setStatus('current')
rbridgeTrillGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 11)).setObjects(("RBRIDGE-MIB", "rbridgeTrillMinMtuDesired"), ("RBRIDGE-MIB", "rbridgeTrillSz"), ("RBRIDGE-MIB", "rbridgeTrillMaxMtuProbes"), ("RBRIDGE-MIB", "rbridgeTrillNbrMtu"), ("RBRIDGE-MIB", "rbridgeTrillNbrFailedMtuTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeTrillGroup = rbridgeTrillGroup.setStatus('current')
rbridgeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 12)).setObjects(("RBRIDGE-MIB", "rbridgeBaseNewDrb"), ("RBRIDGE-MIB", "rbridgeBaseTopologyChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeNotificationGroup = rbridgeNotificationGroup.setStatus('current')
rbridgeCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 214, 2, 1, 1)).setObjects(("RBRIDGE-MIB", "rbridgeBaseGroup"), ("RBRIDGE-MIB", "rbridgeBaseNicknameGroup"), ("RBRIDGE-MIB", "rbridgeBasePortGroup"), ("RBRIDGE-MIB", "rbridgeFdbGroup"), ("RBRIDGE-MIB", "rbridgeFibGroup"), ("RBRIDGE-MIB", "rbridgeVlanGroup"), ("RBRIDGE-MIB", "rbridgeDtreeGroup"), ("RBRIDGE-MIB", "rbridgeTrillGroup"), ("RBRIDGE-MIB", "rbridgeNotificationGroup"), ("RBRIDGE-MIB", "rbridgePortCounterGroup"), ("RBRIDGE-MIB", "rbridgeEsadiGroup"), ("RBRIDGE-MIB", "rbridgeSnoopingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeCompliance = rbridgeCompliance.setStatus('current')
rbridgeReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 214, 2, 1, 2)).setObjects(("RBRIDGE-MIB", "rbridgeBaseGroup"), ("RBRIDGE-MIB", "rbridgeBaseNicknameGroup"), ("RBRIDGE-MIB", "rbridgeBasePortGroup"), ("RBRIDGE-MIB", "rbridgeFdbGroup"), ("RBRIDGE-MIB", "rbridgeFibGroup"), ("RBRIDGE-MIB", "rbridgeVlanGroup"), ("RBRIDGE-MIB", "rbridgeDtreeGroup"), ("RBRIDGE-MIB", "rbridgeTrillGroup"), ("RBRIDGE-MIB", "rbridgeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeReadOnlyCompliance = rbridgeReadOnlyCompliance.setStatus('current')
mibBuilder.exportSymbols("RBRIDGE-MIB", rbridgeNotifications=rbridgeNotifications, rbridgeVlanSnooping=rbridgeVlanSnooping, rbridgeSnoopingAddrType=rbridgeSnoopingAddrType, rbridgeEsadiGroup=rbridgeEsadiGroup, rbridgeSnoopingPortTable=rbridgeSnoopingPortTable, rbridgeEsadiDrbHoldingTime=rbridgeEsadiDrbHoldingTime, rbridgeDtreeMaxTrees=rbridgeDtreeMaxTrees, rbridgeBasePortAccessPort=rbridgeBasePortAccessPort, rbridgeSnooping=rbridgeSnooping, rbridgeBaseNicknameEntry=rbridgeBaseNicknameEntry, rbridgeVlanPortForwarder=rbridgeVlanPortForwarder, rbridgeBasePortTrunkPort=rbridgeBasePortTrunkPort, rbridgeVlanTable=rbridgeVlanTable, rbridgeUniFibEntry=rbridgeUniFibEntry, rbridgeVlanPortEntry=rbridgeVlanPortEntry, rbridgeFdbId=rbridgeFdbId, rbridgeEsadiConfidence=rbridgeEsadiConfidence, rbridgeBaseNumPorts=rbridgeBaseNumPorts, rbridgeTrillNbrMtu=rbridgeTrillNbrMtu, rbridgeVlanEntry=rbridgeVlanEntry, rbridgeConformance=rbridgeConformance, rbridgeBasePortP2pHellos=rbridgeBasePortP2pHellos, rbridgeBase=rbridgeBase, rbridgeTrillNbrFailedMtuTest=rbridgeTrillNbrFailedMtuTest, rbridgeVlanPortDetectedVlanMapping=rbridgeVlanPortDetectedVlanMapping, rbridgePortOptionDrops=rbridgePortOptionDrops, rbridgeConfidenceNative=rbridgeConfidenceNative, rbridgeBasePortDisable=rbridgeBasePortDisable, rbridgeDtreeNumber=rbridgeDtreeNumber, rbridgePortCounterGroup=rbridgePortCounterGroup, rbridgeUniFibTable=rbridgeUniFibTable, rbridgeTrillMaxMtuProbes=rbridgeTrillMaxMtuProbes, rbridgeUniFibNextHop=rbridgeUniFibNextHop, rbridgeDtreeNickname=rbridgeDtreeNickname, rbridgeUniFdbConfidence=rbridgeUniFdbConfidence, rbridgeVlanDisableLearning=rbridgeVlanDisableLearning, rbridgeBasePortDisableLearning=rbridgeBasePortDisableLearning, rbridgeGroup=rbridgeGroup, rbridgeCompliance=rbridgeCompliance, rbridgeEsadiEntry=rbridgeEsadiEntry, rbridgeMultiFibPorts=rbridgeMultiFibPorts, rbridgeDtreeIngress=rbridgeDtreeIngress, rbridgeDtreeActiveTrees=rbridgeDtreeActiveTrees, rbridgeBasePortStpRoot=rbridgeBasePortStpRoot, rbridgeNotificationGroup=rbridgeNotificationGroup, rbridgeBaseAcceptEncapNonadj=rbridgeBaseAcceptEncapNonadj, rbridgePortHopCountExceeds=rbridgePortHopCountExceeds, rbridgeBaseNicknameType=rbridgeBaseNicknameType, rbridgeDtreePriority=rbridgeDtreePriority, rbridgeUniFdbTable=rbridgeUniFdbTable, rbridgeBaseNicknameDtrPriority=rbridgeBaseNicknameDtrPriority, rbridgeSnoopingGroup=rbridgeSnoopingGroup, rbridgeDtree=rbridgeDtree, rbridgeEsadiTable=rbridgeEsadiTable, rbridgeCounter=rbridgeCounter, rbridgePortTrillOutFrames=rbridgePortTrillOutFrames, rbridgeBaseUniMultipathEnable=rbridgeBaseUniMultipathEnable, rbridgeUniFdbPort=rbridgeUniFdbPort, rbridgeUniFdbStatus=rbridgeUniFdbStatus, rbridgeFibGroup=rbridgeFibGroup, rbridgeBaseNicknameName=rbridgeBaseNicknameName, rbridgeSnoopingPortAddrType=rbridgeSnoopingPortAddrType, rbridgeBasePortEntry=rbridgeBasePortEntry, rbridgeObjects=rbridgeObjects, rbridgeFdbGroup=rbridgeFdbGroup, rbridgePortTrillInFrames=rbridgePortTrillInFrames, RbridgeAddress=RbridgeAddress, rbridgeDtreeGroup=rbridgeDtreeGroup, rbridgeConfidenceStatic=rbridgeConfidenceStatic, rbridgeTrillSz=rbridgeTrillSz, rbridgeReadOnlyCompliance=rbridgeReadOnlyCompliance, rbridgeEsadi=rbridgeEsadi, rbridgeVlanForwarderLosts=rbridgeVlanForwarderLosts, rbridgeBaseNicknameGroup=rbridgeBaseNicknameGroup, rbridgeBaseNicknameRowStatus=rbridgeBaseNicknameRowStatus, rbridgeMIB=rbridgeMIB, rbridgeBaseForwardDelay=rbridgeBaseForwardDelay, rbridgeVlanIndex=rbridgeVlanIndex, rbridgeEsadiRowStatus=rbridgeEsadiRowStatus, rbridgeUniFibHopCount=rbridgeUniFibHopCount, rbridgeBaseTrillVersion=rbridgeBaseTrillVersion, rbridgeUniFdbEntry=rbridgeUniFdbEntry, RbridgeNickname=RbridgeNickname, rbridgeBaseMultiMultipathEnable=rbridgeBaseMultiMultipathEnable, rbridgeSnoopingPortEntry=rbridgeSnoopingPortEntry, PYSNMP_MODULE_ID=rbridgeMIB, rbridgeSnoopingAddrPorts=rbridgeSnoopingAddrPorts, rbridgeVlanPortTable=rbridgeVlanPortTable, rbridgeConfidenceDecap=rbridgeConfidenceDecap, rbridgeEsadiDrb=rbridgeEsadiDrb, rbridgeBaseTopologyChange=rbridgeBaseTopologyChange, rbridgeTrillMinMtuDesired=rbridgeTrillMinMtuDesired, rbridgeBaseNicknamePriority=rbridgeBaseNicknamePriority, rbridgeBasePortStpRootChanges=rbridgeBasePortStpRootChanges, rbridgeUniFibNickname=rbridgeUniFibNickname, rbridgeBaseNicknameNumber=rbridgeBaseNicknameNumber, rbridgeBasePortState=rbridgeBasePortState, rbridgeEsadiDrbPriority=rbridgeEsadiDrbPriority, rbridgeBasePort=rbridgeBasePort, rbridgeMultiFibEntry=rbridgeMultiFibEntry, rbridgeSnoopingAddrTable=rbridgeSnoopingAddrTable, rbridgeBasePortInhibitionTime=rbridgeBasePortInhibitionTime, rbridgeSnoopingAddr=rbridgeSnoopingAddr, rbridgeTrillNbrEntry=rbridgeTrillNbrEntry, rbridgeBasePortDesiredDesigVlan=rbridgeBasePortDesiredDesigVlan, rbridgePortCounterEntry=rbridgePortCounterEntry, rbridgeBasePortIfIndex=rbridgeBasePortIfIndex, rbridgeMultiFibNickname=rbridgeMultiFibNickname, rbridgeDtreeTable=rbridgeDtreeTable, rbridgeFdb=rbridgeFdb, rbridgeBaseGroup=rbridgeBaseGroup, rbridgeVlanGroup=rbridgeVlanGroup, rbridgePortCounterTable=rbridgePortCounterTable, rbridgeTrillNbrMacAddr=rbridgeTrillNbrMacAddr, rbridgeBasePortTable=rbridgeBasePortTable, rbridgeBaseNewDrb=rbridgeBaseNewDrb, rbridgeTrillGroup=rbridgeTrillGroup, rbridgeMultiFibTable=rbridgeMultiFibTable, rbridgeBasePortGroup=rbridgeBasePortGroup, rbridgeTrill=rbridgeTrill, rbridgeUniFdbNickname=rbridgeUniFdbNickname, rbridgeVlanPortInhibited=rbridgeVlanPortInhibited, rbridgeUniFdbAddr=rbridgeUniFdbAddr, rbridgeDtreeDesiredUseTrees=rbridgeDtreeDesiredUseTrees, rbridgePortRpfCheckFails=rbridgePortRpfCheckFails, rbridgeTrillNbrTable=rbridgeTrillNbrTable, rbridgeEsadiEnable=rbridgeEsadiEnable, rbridgeDtreeEntry=rbridgeDtreeEntry, rbridgeCompliances=rbridgeCompliances, rbridgeBasePortDesigVlan=rbridgeBasePortDesigVlan, rbridgeBasePortStpWiringCloset=rbridgeBasePortStpWiringCloset, rbridgeVlanPortAnnouncing=rbridgeVlanPortAnnouncing, rbridgeBaseNicknameTable=rbridgeBaseNicknameTable, rbridgeVlan=rbridgeVlan, rbridgeUniFibPort=rbridgeUniFibPort, rbridgeSnoopingAddrEntry=rbridgeSnoopingAddrEntry)
