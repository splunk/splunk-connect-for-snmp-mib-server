#
# PySNMP MIB module TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:07:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
IANAtunnelType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAtunnelType")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
IPv6FlowLabelOrAny, = mibBuilder.importSymbols("IPV6-FLOW-LABEL-MIB", "IPv6FlowLabelOrAny")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, iso, NotificationType, Integer32, Counter32, Gauge32, Counter64, Unsigned32, IpAddress, TimeTicks, ObjectIdentity, MibIdentifier, Bits, transmission, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "Integer32", "Counter32", "Gauge32", "Counter64", "Unsigned32", "IpAddress", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Bits", "transmission", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
tunnelMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 131))
tunnelMIB.setRevisions(('2005-05-16 00:00', '1999-08-24 12:00',))
if mibBuilder.loadTexts: tunnelMIB.setLastUpdated('200505160000Z')
if mibBuilder.loadTexts: tunnelMIB.setOrganization('IETF IP Version 6 (IPv6) Working Group')
tunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 131, 1))
tunnel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 131, 1, 1))
tunnelIfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1), )
if mibBuilder.loadTexts: tunnelIfTable.setStatus('current')
tunnelIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tunnelIfEntry.setStatus('current')
tunnelIfLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelIfLocalAddress.setStatus('deprecated')
tunnelIfRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelIfRemoteAddress.setStatus('deprecated')
tunnelIfEncapsMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 3), IANAtunnelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelIfEncapsMethod.setStatus('current')
tunnelIfHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfHopLimit.setStatus('current')
tunnelIfSecurity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipsec", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelIfSecurity.setStatus('current')
tunnelIfTOS = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfTOS.setStatus('current')
tunnelIfFlowLabel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 7), IPv6FlowLabelOrAny()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfFlowLabel.setStatus('current')
tunnelIfAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfAddressType.setStatus('current')
tunnelIfLocalInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfLocalInetAddress.setStatus('current')
tunnelIfRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfRemoteInetAddress.setStatus('current')
tunnelIfEncapsLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelIfEncapsLimit.setStatus('current')
tunnelConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2), )
if mibBuilder.loadTexts: tunnelConfigTable.setStatus('deprecated')
tunnelConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1), ).setIndexNames((0, "TUNNEL-MIB", "tunnelConfigLocalAddress"), (0, "TUNNEL-MIB", "tunnelConfigRemoteAddress"), (0, "TUNNEL-MIB", "tunnelConfigEncapsMethod"), (0, "TUNNEL-MIB", "tunnelConfigID"))
if mibBuilder.loadTexts: tunnelConfigEntry.setStatus('deprecated')
tunnelConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: tunnelConfigLocalAddress.setStatus('deprecated')
tunnelConfigRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: tunnelConfigRemoteAddress.setStatus('deprecated')
tunnelConfigEncapsMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 3), IANAtunnelType())
if mibBuilder.loadTexts: tunnelConfigEncapsMethod.setStatus('deprecated')
tunnelConfigID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: tunnelConfigID.setStatus('deprecated')
tunnelConfigIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelConfigIfIndex.setStatus('deprecated')
tunnelConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelConfigStatus.setStatus('deprecated')
tunnelInetConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3), )
if mibBuilder.loadTexts: tunnelInetConfigTable.setStatus('current')
tunnelInetConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1), ).setIndexNames((0, "TUNNEL-MIB", "tunnelInetConfigAddressType"), (0, "TUNNEL-MIB", "tunnelInetConfigLocalAddress"), (0, "TUNNEL-MIB", "tunnelInetConfigRemoteAddress"), (0, "TUNNEL-MIB", "tunnelInetConfigEncapsMethod"), (0, "TUNNEL-MIB", "tunnelInetConfigID"))
if mibBuilder.loadTexts: tunnelInetConfigEntry.setStatus('current')
tunnelInetConfigAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tunnelInetConfigAddressType.setStatus('current')
tunnelInetConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: tunnelInetConfigLocalAddress.setStatus('current')
tunnelInetConfigRemoteAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: tunnelInetConfigRemoteAddress.setStatus('current')
tunnelInetConfigEncapsMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 4), IANAtunnelType())
if mibBuilder.loadTexts: tunnelInetConfigEncapsMethod.setStatus('current')
tunnelInetConfigID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: tunnelInetConfigID.setStatus('current')
tunnelInetConfigIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInetConfigIfIndex.setStatus('current')
tunnelInetConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelInetConfigStatus.setStatus('current')
tunnelInetConfigStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelInetConfigStorageType.setStatus('current')
tunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 131, 2))
tunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 131, 2, 1))
tunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 131, 2, 2))
tunnelMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 131, 2, 1, 1)).setObjects(("TUNNEL-MIB", "tunnelMIBBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tunnelMIBCompliance = tunnelMIBCompliance.setStatus('deprecated')
tunnelMIBInetFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 131, 2, 1, 2)).setObjects(("TUNNEL-MIB", "tunnelMIBInetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tunnelMIBInetFullCompliance = tunnelMIBInetFullCompliance.setStatus('current')
tunnelMIBInetReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 131, 2, 1, 3)).setObjects(("TUNNEL-MIB", "tunnelMIBInetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tunnelMIBInetReadOnlyCompliance = tunnelMIBInetReadOnlyCompliance.setStatus('current')
tunnelMIBBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 131, 2, 2, 1)).setObjects(("TUNNEL-MIB", "tunnelIfLocalAddress"), ("TUNNEL-MIB", "tunnelIfRemoteAddress"), ("TUNNEL-MIB", "tunnelIfEncapsMethod"), ("TUNNEL-MIB", "tunnelIfHopLimit"), ("TUNNEL-MIB", "tunnelIfTOS"), ("TUNNEL-MIB", "tunnelIfSecurity"), ("TUNNEL-MIB", "tunnelConfigIfIndex"), ("TUNNEL-MIB", "tunnelConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tunnelMIBBasicGroup = tunnelMIBBasicGroup.setStatus('deprecated')
tunnelMIBInetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 131, 2, 2, 2)).setObjects(("TUNNEL-MIB", "tunnelIfAddressType"), ("TUNNEL-MIB", "tunnelIfLocalInetAddress"), ("TUNNEL-MIB", "tunnelIfRemoteInetAddress"), ("TUNNEL-MIB", "tunnelIfEncapsMethod"), ("TUNNEL-MIB", "tunnelIfEncapsLimit"), ("TUNNEL-MIB", "tunnelIfHopLimit"), ("TUNNEL-MIB", "tunnelIfTOS"), ("TUNNEL-MIB", "tunnelIfFlowLabel"), ("TUNNEL-MIB", "tunnelIfSecurity"), ("TUNNEL-MIB", "tunnelInetConfigIfIndex"), ("TUNNEL-MIB", "tunnelInetConfigStatus"), ("TUNNEL-MIB", "tunnelInetConfigStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tunnelMIBInetGroup = tunnelMIBInetGroup.setStatus('current')
mibBuilder.exportSymbols("TUNNEL-MIB", tunnelInetConfigEncapsMethod=tunnelInetConfigEncapsMethod, tunnelIfAddressType=tunnelIfAddressType, tunnelConfigLocalAddress=tunnelConfigLocalAddress, tunnelMIBInetReadOnlyCompliance=tunnelMIBInetReadOnlyCompliance, tunnelIfHopLimit=tunnelIfHopLimit, tunnelInetConfigStorageType=tunnelInetConfigStorageType, tunnelIfLocalAddress=tunnelIfLocalAddress, tunnelIfLocalInetAddress=tunnelIfLocalInetAddress, tunnelInetConfigLocalAddress=tunnelInetConfigLocalAddress, tunnelInetConfigIfIndex=tunnelInetConfigIfIndex, tunnelInetConfigAddressType=tunnelInetConfigAddressType, tunnelMIBCompliances=tunnelMIBCompliances, tunnelMIB=tunnelMIB, tunnelConfigEncapsMethod=tunnelConfigEncapsMethod, tunnelConfigEntry=tunnelConfigEntry, tunnelIfFlowLabel=tunnelIfFlowLabel, tunnelMIBBasicGroup=tunnelMIBBasicGroup, tunnelMIBObjects=tunnelMIBObjects, tunnel=tunnel, tunnelIfEncapsMethod=tunnelIfEncapsMethod, tunnelConfigRemoteAddress=tunnelConfigRemoteAddress, tunnelInetConfigID=tunnelInetConfigID, tunnelInetConfigTable=tunnelInetConfigTable, tunnelInetConfigEntry=tunnelInetConfigEntry, tunnelInetConfigRemoteAddress=tunnelInetConfigRemoteAddress, tunnelMIBInetGroup=tunnelMIBInetGroup, tunnelConfigStatus=tunnelConfigStatus, tunnelIfSecurity=tunnelIfSecurity, tunnelIfTOS=tunnelIfTOS, tunnelIfRemoteInetAddress=tunnelIfRemoteInetAddress, tunnelMIBCompliance=tunnelMIBCompliance, tunnelConfigTable=tunnelConfigTable, tunnelIfTable=tunnelIfTable, tunnelMIBGroups=tunnelMIBGroups, tunnelIfEncapsLimit=tunnelIfEncapsLimit, tunnelConfigIfIndex=tunnelConfigIfIndex, tunnelMIBConformance=tunnelMIBConformance, tunnelInetConfigStatus=tunnelInetConfigStatus, tunnelIfRemoteAddress=tunnelIfRemoteAddress, tunnelMIBInetFullCompliance=tunnelMIBInetFullCompliance, tunnelConfigID=tunnelConfigID, tunnelIfEntry=tunnelIfEntry, PYSNMP_MODULE_ID=tunnelMIB)
