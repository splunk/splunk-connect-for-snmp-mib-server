#
# PySNMP MIB module INTEL-S500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-S500-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, Counter32, NotificationType, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Counter32", "NotificationType", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s500 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 1))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 2))
statistic = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 3))
adaptiveForwardMode = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 4))
chipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 5))
smu = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 6))
permanentEntries = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 7))
matrix = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 8))
mediamodules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 10, 9))
defaultSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultSwitchMode.setStatus('mandatory')
defaultFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultFlowControlMode.setStatus('mandatory')
smuMaster = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuMaster.setStatus('mandatory')
localManagementTimeout = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localManagementTimeout.setStatus('mandatory')
temperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureLevel.setStatus('mandatory')
redundantPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundantPowerSupplyStatus.setStatus('mandatory')
portMirroring = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMirroring.setStatus('mandatory')
disableRmon = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destroyAll", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: disableRmon.setStatus('mandatory')
isRmonActive = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isRmonActive.setStatus('mandatory')
switchTotalTraffic = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchTotalTraffic.setStatus('mandatory')
bufferPoolUsed = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferPoolUsed.setStatus('mandatory')
featuresBitFlag = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: featuresBitFlag.setStatus('mandatory')
switchBw = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchBw.setStatus('mandatory')
ownMatrixAttachmentPort = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ownMatrixAttachmentPort.setStatus('mandatory')
stackCrc = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackCrc.setStatus('mandatory')
portSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSnmpPort.setStatus('mandatory')
portLastChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChange.setStatus('mandatory')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3), )
if mibBuilder.loadTexts: portInfoTable.setStatus('mandatory')
portInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3, 1), ).setIndexNames((0, "INTEL-S500-MIB", "portInfoChassisIndex"), (0, "INTEL-S500-MIB", "portInfoModuleIndex"), (0, "INTEL-S500-MIB", "portInfoIndex"))
if mibBuilder.loadTexts: portInfoEntry.setStatus('mandatory')
portInfoChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoChassisIndex.setStatus('mandatory')
portInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoModuleIndex.setStatus('mandatory')
portInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndex.setStatus('mandatory')
portInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 10, 11))).clone(namedValues=NamedValues(("hundredbasetx", 1), ("hundredbasefx", 2), ("core", 3), ("internal", 4), ("layer3link", 5), ("gigabasesx", 10), ("gigabaselx", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoType.setStatus('mandatory')
portConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4), )
if mibBuilder.loadTexts: portConfTable.setStatus('mandatory')
portConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1), ).setIndexNames((0, "INTEL-S500-MIB", "portConfChassisIndex"), (0, "INTEL-S500-MIB", "portConfModuleIndex"), (0, "INTEL-S500-MIB", "portConfIndex"))
if mibBuilder.loadTexts: portConfEntry.setStatus('mandatory')
portConfChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfChassisIndex.setStatus('mandatory')
portConfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfModuleIndex.setStatus('mandatory')
portConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfIndex.setStatus('mandatory')
portConfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfDescr.setStatus('mandatory')
portConfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfLocation.setStatus('mandatory')
portConfConfigSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("default", 1), ("cutThrough", 2), ("fragmentFree", 3), ("storeAndForward", 4), ("adaptive", 5), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfConfigSwitchMode.setStatus('mandatory')
portConfFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("default", 1), ("enable", 2), ("disable", 3), ("notAvailable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfFlowControl.setStatus('mandatory')
portConfSpeedSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("speed10Mbit", 1), ("speed100Mbit", 2), ("speed10And100Mbit", 3), ("speed10And100AndAutoMbit", 4), ("speed155Mbit", 5), ("speed1Gbit", 6), ("speed1AndAutoGbit", 7), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfSpeedSupported.setStatus('mandatory')
portConfDuplexSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 99))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("halfAndFull", 3), ("auto", 4), ("autoAndFull", 6), ("autoAndHalfAndFull", 7), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfDuplexSupported.setStatus('mandatory')
portConfConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbit", 1), ("speed100Mbit", 2), ("speed1Gbit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfConfigSpeed.setStatus('mandatory')
portConfConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfConfigDuplex.setStatus('mandatory')
portConfConfigAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfConfigAutoNeg.setStatus('mandatory')
portConfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("speed10Mbit", 1), ("speedAutoDetect10Mbit", 2), ("speed100Mbit", 3), ("speedAutoDetect100Mbit", 4), ("speed1Gbit", 5), ("speedAutoDetect1Gbit", 6), ("speed155Mbit", 7), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfSpeed.setStatus('mandatory')
portConfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("half", 1), ("autoDetectHalf", 2), ("full", 3), ("autoDetectFull", 4), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfDuplex.setStatus('mandatory')
portConfAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("failed", 3), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfAutoNeg.setStatus('mandatory')
portConfSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("cutThrough", 1), ("adaptiveCutThrough", 2), ("fragmentFree", 3), ("adaptiveFragmentFree", 4), ("storeAndForward", 5), ("adaptiveStoreAndForward", 6), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfSwitchMode.setStatus('mandatory')
portConfTrunkSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("trunkWidthTwo", 1), ("trunkWidthFour", 2), ("trunkMaster", 3), ("trunkSlave", 4), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfTrunkSupported.setStatus('mandatory')
portConfTrunkConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("trunkWidthTwo", 1), ("trunkWidthFour", 2), ("disable", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfTrunkConfig.setStatus('mandatory')
portConfTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfTrunkName.setStatus('mandatory')
portConfMirrorSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("mirrorSourceOnly", 1), ("mirrorDestinationOnly", 2), ("mirrorSourceOrDestination", 3), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfMirrorSupported.setStatus('mandatory')
portConfMirrorConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("mirrorSource", 1), ("mirrorDestination", 2), ("disabled", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfMirrorConfig.setStatus('mandatory')
portConfVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 99))).clone(namedValues=NamedValues(("enabled", 1), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfVlanSupported.setStatus('mandatory')
portAllSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allEnabled", 1), ("allDisabled", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAllSpanningTreeMode.setStatus('mandatory')
txStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1), )
if mibBuilder.loadTexts: txStatTable.setStatus('mandatory')
txStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1), ).setIndexNames((0, "INTEL-S500-MIB", "txStatIndex"))
if mibBuilder.loadTexts: txStatEntry.setStatus('mandatory')
txStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txStatIndex.setStatus('mandatory')
txUCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts64Octets.setStatus('mandatory')
txUCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts65To127Octets.setStatus('mandatory')
txUCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts128To255Octets.setStatus('mandatory')
txUCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts256To511Octets.setStatus('mandatory')
txUCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts512To1023Octets.setStatus('mandatory')
txUCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txUCPkts1024To1518Octets.setStatus('mandatory')
txMCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts64Octets.setStatus('mandatory')
txMCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts65To127Octets.setStatus('mandatory')
txMCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts128To255Octets.setStatus('mandatory')
txMCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts256To511Octets.setStatus('mandatory')
txMCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts512To1023Octets.setStatus('mandatory')
txMCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txMCPkts1024To1518Octets.setStatus('mandatory')
txBCPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts64Octets.setStatus('mandatory')
txBCPkts65To127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts65To127Octets.setStatus('mandatory')
txBCPkts128To255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts128To255Octets.setStatus('mandatory')
txBCPkts256To511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts256To511Octets.setStatus('mandatory')
txBCPkts512To1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts512To1023Octets.setStatus('mandatory')
txBCPkts1024To1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBCPkts1024To1518Octets.setStatus('mandatory')
txOctetsIllegalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsIllegalAddrType.setStatus('mandatory')
tx1ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx1ArbitFrameDelay.setStatus('mandatory')
tx2ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx2ArbitFrameDelay.setStatus('mandatory')
tx3ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx3ArbitFrameDelay.setStatus('mandatory')
tx4ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx4ArbitFrameDelay.setStatus('mandatory')
tx5ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx5ArbitFrameDelay.setStatus('mandatory')
tx6ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx6ArbitFrameDelay.setStatus('mandatory')
tx7ArbitFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tx7ArbitFrameDelay.setStatus('mandatory')
txDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDeferreds.setStatus('mandatory')
txOctetsHis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsHis.setStatus('mandatory')
txOctetsLos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsLos.setStatus('mandatory')
txOctetsOutOfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txOctetsOutOfRange.setStatus('mandatory')
txExcessiveDeferralsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveDeferralsErrors.setStatus('mandatory')
txNiaUnderRunAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txNiaUnderRunAborts.setStatus('mandatory')
txExcessiveLengthDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txExcessiveLengthDrops.setStatus('mandatory')
txLinkDownEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txLinkDownEvents.setStatus('mandatory')
txAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterPackets.setStatus('mandatory')
txAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 1, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: txAllCounterOthers.setStatus('mandatory')
rxStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2), )
if mibBuilder.loadTexts: rxStatTable.setStatus('mandatory')
rxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1), ).setIndexNames((0, "INTEL-S500-MIB", "rxStatIndex"))
if mibBuilder.loadTexts: rxStatEntry.setStatus('mandatory')
rxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxStatIndex.setStatus('mandatory')
rxUCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsLocals.setStatus('mandatory')
rxUCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts64OctetsForwardeds.setStatus('mandatory')
rxUCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsLocals.setStatus('mandatory')
rxUCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxUCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsLocals.setStatus('mandatory')
rxUCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxUCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsLocals.setStatus('mandatory')
rxUCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxUCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsLocals.setStatus('mandatory')
rxUCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxUCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxUCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxShortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxShortErrors.setStatus('mandatory')
rxRuntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxRuntErrors.setStatus('mandatory')
rxDataRateMMErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDataRateMMErrors.setStatus('mandatory')
rxMCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsLocals.setStatus('mandatory')
rxMCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts64OctetsForwardeds.setStatus('mandatory')
rxMCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsLocals.setStatus('mandatory')
rxMCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxMCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsLocals.setStatus('mandatory')
rxMCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxMCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsLocals.setStatus('mandatory')
rxMCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxMCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsLocals.setStatus('mandatory')
rxMCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxMCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxMCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxMCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxOctetsLocalHis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalHis.setStatus('mandatory')
rxOctetsLocalLos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsLocalLos.setStatus('mandatory')
rxOctetsForwardedHis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedHis.setStatus('mandatory')
rxOctetsForwardedLos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxOctetsForwardedLos.setStatus('mandatory')
rxBCPkts64OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsLocals.setStatus('mandatory')
rxBCPkts64OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts64OctetsForwardeds.setStatus('mandatory')
rxBCPkts65To127OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsLocals.setStatus('mandatory')
rxBCPkts65To127OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts65To127OctetsForwardeds.setStatus('mandatory')
rxBCPkts128To255OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsLocals.setStatus('mandatory')
rxBCPkts128To255OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts128To255OctetsForwardeds.setStatus('mandatory')
rxBCPkts256To511OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsLocals.setStatus('mandatory')
rxBCPkts256To511OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts256To511OctetsForwardeds.setStatus('mandatory')
rxBCPkts512To1023OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsLocals.setStatus('mandatory')
rxBCPkts512To1023OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts512To1023OctetsForwardeds.setStatus('mandatory')
rxBCPkts1024To1518OctetsLocals = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsLocals.setStatus('mandatory')
rxBCPkts1024To1518OctetsForwardeds = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBCPkts1024To1518OctetsForwardeds.setStatus('mandatory')
rxFilterMACUnexp2ndPortDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterMACUnexp2ndPortDrops.setStatus('mandatory')
rxFilterIllegalMACDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFilterIllegalMACDrops.setStatus('mandatory')
rxFlowCtrlPram = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFlowCtrlPram.setStatus('mandatory')
rxFlowCtrlNimbus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFlowCtrlNimbus.setStatus('mandatory')
rxPramOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPramOverRuns.setStatus('mandatory')
rxNimbusOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxNimbusOverRuns.setStatus('mandatory')
rxVeryLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxVeryLongErrors.setStatus('mandatory')
rxLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxLongErrors.setStatus('mandatory')
rxPauseMacControlReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPauseMacControlReceived.setStatus('mandatory')
rxUnknownMacControlFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxUnknownMacControlFrame.setStatus('mandatory')
rxPiaOutOfPoolDropErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPiaOutOfPoolDropErrors.setStatus('mandatory')
rxCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxCodeViolations.setStatus('mandatory')
rxJabberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxJabberErrors.setStatus('mandatory')
rxNiaOverRunDropErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxNiaOverRunDropErrors.setStatus('mandatory')
rxAllCounterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(164, 164)).setFixedLength(164)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterPackets.setStatus('mandatory')
rxAllCounterOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 2, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxAllCounterOthers.setStatus('mandatory')
totalRxTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRxTxPackets.setStatus('mandatory')
totalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCollisions.setStatus('mandatory')
adaptiveForwardModeSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeSampleTime.setStatus('mandatory')
adaptiveForwardModeRuntsOffset = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsOffset.setStatus('mandatory')
adaptiveForwardModeRuntsRange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeRuntsRange.setStatus('mandatory')
adaptiveForwardModeCrcsOffset = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsOffset.setStatus('mandatory')
adaptiveForwardModeCrcsRange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveForwardModeCrcsRange.setStatus('mandatory')
smuModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 1), )
if mibBuilder.loadTexts: smuModuleTable.setStatus('mandatory')
smuModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 1, 1), ).setIndexNames((0, "INTEL-S500-MIB", "smuModuleChassisIndex"), (0, "INTEL-S500-MIB", "smuModuleIndex"))
if mibBuilder.loadTexts: smuModuleEntry.setStatus('mandatory')
smuModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuModuleChassisIndex.setStatus('mandatory')
smuModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuModuleIndex.setStatus('mandatory')
smuModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuModuleState.setStatus('mandatory')
smuPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2), )
if mibBuilder.loadTexts: smuPortTable.setStatus('mandatory')
smuPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1), ).setIndexNames((0, "INTEL-S500-MIB", "smuPortChassisIndex"), (0, "INTEL-S500-MIB", "smuPortModuleIndex"), (0, "INTEL-S500-MIB", "smuPortIndex"))
if mibBuilder.loadTexts: smuPortEntry.setStatus('mandatory')
smuPortChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortChassisIndex.setStatus('mandatory')
smuPortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortModuleIndex.setStatus('mandatory')
smuPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortIndex.setStatus('mandatory')
smuPortAttachedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortAttachedNumber.setStatus('mandatory')
smuPortAttachedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortAttachedMac.setStatus('mandatory')
smuPortAttachedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 6, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smuPortAttachedIp.setStatus('mandatory')
permanentEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1), )
if mibBuilder.loadTexts: permanentEntriesTable.setStatus('mandatory')
permanentEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1, 1), ).setIndexNames((0, "INTEL-S500-MIB", "permanentEntriesMACAddr"))
if mibBuilder.loadTexts: permanentEntriesEntry.setStatus('mandatory')
permanentEntriesMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentEntriesMACAddr.setStatus('mandatory')
permanentEntriesPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentEntriesPortId.setStatus('mandatory')
permanentEntriesCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentEntriesCreateObj.setStatus('mandatory')
permanentEntriesDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permanentEntriesDeleteObj.setStatus('mandatory')
matrixModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1), )
if mibBuilder.loadTexts: matrixModuleTable.setStatus('mandatory')
matrixModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1, 1), ).setIndexNames((0, "INTEL-S500-MIB", "matrixModuleIndex"))
if mibBuilder.loadTexts: matrixModuleEntry.setStatus('mandatory')
matrixModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixModuleIndex.setStatus('mandatory')
matrixModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("error", 3), ("back", 4), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixModuleState.setStatus('mandatory')
matrixNumberConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixNumberConnected.setStatus('mandatory')
matrixMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixMasterPort.setStatus('mandatory')
matrixPortTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2), )
if mibBuilder.loadTexts: matrixPortTable.setStatus('mandatory')
matrixPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1), ).setIndexNames((0, "INTEL-S500-MIB", "matrixModuleIndex"), (0, "INTEL-S500-MIB", "matrixPortIndex"))
if mibBuilder.loadTexts: matrixPortEntry.setStatus('mandatory')
matrixPortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortModuleIndex.setStatus('mandatory')
matrixPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortIndex.setStatus('mandatory')
matrixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPort.setStatus('mandatory')
matrixPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("es510", 1), ("es520", 2), ("es550T", 3), ("es550F", 4), ("gb2", 5), ("atm", 6), ("notAvailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortType.setStatus('mandatory')
matrixPortMajVer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortMajVer.setStatus('mandatory')
matrixPortMinVer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortMinVer.setStatus('mandatory')
matrixPortMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixPortMac.setStatus('mandatory')
matrixPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matrixPortIp.setStatus('mandatory')
matrixPortSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matrixPortSubnetMask.setStatus('mandatory')
matrixPortGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matrixPortGateway.setStatus('mandatory')
matrixLastChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 8, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixLastChange.setStatus('mandatory')
mediaModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 10, 9, 1), )
if mibBuilder.loadTexts: mediaModuleTable.setStatus('mandatory')
mediaModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 10, 9, 1, 1), ).setIndexNames((0, "INTEL-S500-MIB", "mediaModuleChassisIndex"), (0, "INTEL-S500-MIB", "mediaModuleModuleIndex"), (0, "INTEL-S500-MIB", "mediaModuleIndex"))
if mibBuilder.loadTexts: mediaModuleEntry.setStatus('mandatory')
moduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stackMode", 1), ("standAloneMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleMode.setStatus('mandatory')
matrixAttachmentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 10, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixAttachmentPort.setStatus('mandatory')
mediaModuleChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 10, 9, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleChange.setStatus('mandatory')
s500PermVioEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 10) + (0,1)).setObjects(("INTEL-S500-MIB", "portConfChassisIndex"), ("INTEL-S500-MIB", "portConfModuleIndex"), ("INTEL-S500-MIB", "portConfIndex"))
s500AdaptiveForwEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 10) + (0,2)).setObjects(("INTEL-S500-MIB", "portConfChassisIndex"), ("INTEL-S500-MIB", "portConfModuleIndex"), ("INTEL-S500-MIB", "portConfIndex"), ("INTEL-S500-MIB", "portConfSwitchMode"), ("INTEL-S500-MIB", "portConfSwitchMode"))
s500TemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 10) + (0,3)).setObjects(("INTEL-S500-MIB", "temperatureLevel"))
s500RedundantPowerSupplyEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 10) + (0,4)).setObjects(("INTEL-S500-MIB", "redundantPowerSupplyStatus"))
mibBuilder.exportSymbols("INTEL-S500-MIB", smuPortAttachedNumber=smuPortAttachedNumber, rxJabberErrors=rxJabberErrors, portInfoIndex=portInfoIndex, txAllCounterPackets=txAllCounterPackets, stackCrc=stackCrc, rxLongErrors=rxLongErrors, portConfAutoNeg=portConfAutoNeg, rxBCPkts256To511OctetsForwardeds=rxBCPkts256To511OctetsForwardeds, txBCPkts128To255Octets=txBCPkts128To255Octets, rxBCPkts64OctetsForwardeds=rxBCPkts64OctetsForwardeds, portConfChassisIndex=portConfChassisIndex, rxBCPkts128To255OctetsLocals=rxBCPkts128To255OctetsLocals, matrixAttachmentPort=matrixAttachmentPort, matrixModuleIndex=matrixModuleIndex, rxPramOverRuns=rxPramOverRuns, rxOctetsForwardedLos=rxOctetsForwardedLos, smu=smu, rxMCPkts512To1023OctetsForwardeds=rxMCPkts512To1023OctetsForwardeds, txOctetsLos=txOctetsLos, rxBCPkts256To511OctetsLocals=rxBCPkts256To511OctetsLocals, portConfModuleIndex=portConfModuleIndex, smuModuleChassisIndex=smuModuleChassisIndex, adaptiveForwardModeSampleTime=adaptiveForwardModeSampleTime, txStatEntry=txStatEntry, rxBCPkts512To1023OctetsLocals=rxBCPkts512To1023OctetsLocals, matrixPort=matrixPort, rxMCPkts65To127OctetsForwardeds=rxMCPkts65To127OctetsForwardeds, txMCPkts256To511Octets=txMCPkts256To511Octets, tx1ArbitFrameDelay=tx1ArbitFrameDelay, tx2ArbitFrameDelay=tx2ArbitFrameDelay, permanentEntriesDeleteObj=permanentEntriesDeleteObj, portConfEntry=portConfEntry, portInfoModuleIndex=portInfoModuleIndex, matrixPortSubnetMask=matrixPortSubnetMask, rxUCPkts256To511OctetsLocals=rxUCPkts256To511OctetsLocals, mediaModuleEntry=mediaModuleEntry, rxMCPkts1024To1518OctetsForwardeds=rxMCPkts1024To1518OctetsForwardeds, smuPortModuleIndex=smuPortModuleIndex, portConfVlanSupported=portConfVlanSupported, portMirroring=portMirroring, rxBCPkts512To1023OctetsForwardeds=rxBCPkts512To1023OctetsForwardeds, portConfTrunkName=portConfTrunkName, txUCPkts1024To1518Octets=txUCPkts1024To1518Octets, txOctetsIllegalAddrType=txOctetsIllegalAddrType, txAllCounterOthers=txAllCounterOthers, rxBCPkts128To255OctetsForwardeds=rxBCPkts128To255OctetsForwardeds, s500TemperatureEvent=s500TemperatureEvent, featuresBitFlag=featuresBitFlag, portConfConfigAutoNeg=portConfConfigAutoNeg, smuPortTable=smuPortTable, txDeferreds=txDeferreds, txMCPkts128To255Octets=txMCPkts128To255Octets, portConfSpeedSupported=portConfSpeedSupported, rxStatTable=rxStatTable, portConfTrunkConfig=portConfTrunkConfig, s500AdaptiveForwEvent=s500AdaptiveForwEvent, matrixPortGateway=matrixPortGateway, rxBCPkts1024To1518OctetsForwardeds=rxBCPkts1024To1518OctetsForwardeds, rxVeryLongErrors=rxVeryLongErrors, mediamodules=mediamodules, txOctetsOutOfRange=txOctetsOutOfRange, chipSets=chipSets, switchBw=switchBw, adaptiveForwardModeCrcsRange=adaptiveForwardModeCrcsRange, rxUnknownMacControlFrame=rxUnknownMacControlFrame, rxNiaOverRunDropErrors=rxNiaOverRunDropErrors, isRmonActive=isRmonActive, smuMaster=smuMaster, rxMCPkts128To255OctetsForwardeds=rxMCPkts128To255OctetsForwardeds, smuPortChassisIndex=smuPortChassisIndex, permanentEntriesCreateObj=permanentEntriesCreateObj, totalRxTxPackets=totalRxTxPackets, portConfIndex=portConfIndex, portLastChange=portLastChange, rxMCPkts65To127OctetsLocals=rxMCPkts65To127OctetsLocals, txBCPkts1024To1518Octets=txBCPkts1024To1518Octets, rxOctetsLocalLos=rxOctetsLocalLos, txBCPkts512To1023Octets=txBCPkts512To1023Octets, matrixPortTable=matrixPortTable, adaptiveForwardMode=adaptiveForwardMode, smuModuleEntry=smuModuleEntry, txStatIndex=txStatIndex, rxStatEntry=rxStatEntry, rxUCPkts65To127OctetsLocals=rxUCPkts65To127OctetsLocals, rxMCPkts256To511OctetsForwardeds=rxMCPkts256To511OctetsForwardeds, matrixPortType=matrixPortType, rxUCPkts512To1023OctetsLocals=rxUCPkts512To1023OctetsLocals, bufferPoolUsed=bufferPoolUsed, tx5ArbitFrameDelay=tx5ArbitFrameDelay, txBCPkts256To511Octets=txBCPkts256To511Octets, tx3ArbitFrameDelay=tx3ArbitFrameDelay, matrix=matrix, portConfMirrorSupported=portConfMirrorSupported, rxUCPkts256To511OctetsForwardeds=rxUCPkts256To511OctetsForwardeds, totalCollisions=totalCollisions, rxBCPkts65To127OctetsForwardeds=rxBCPkts65To127OctetsForwardeds, portInfoTable=portInfoTable, matrixPortMinVer=matrixPortMinVer, txStatTable=txStatTable, rxUCPkts512To1023OctetsForwardeds=rxUCPkts512To1023OctetsForwardeds, rxRuntErrors=rxRuntErrors, matrixModuleEntry=matrixModuleEntry, matrixPortIndex=matrixPortIndex, rxPauseMacControlReceived=rxPauseMacControlReceived, rxUCPkts1024To1518OctetsForwardeds=rxUCPkts1024To1518OctetsForwardeds, rxUCPkts128To255OctetsLocals=rxUCPkts128To255OctetsLocals, s500RedundantPowerSupplyEvent=s500RedundantPowerSupplyEvent, smuPortIndex=smuPortIndex, txUCPkts64Octets=txUCPkts64Octets, rxOctetsLocalHis=rxOctetsLocalHis, rxMCPkts128To255OctetsLocals=rxMCPkts128To255OctetsLocals, temperatureLevel=temperatureLevel, portConfTrunkSupported=portConfTrunkSupported, defaultSwitchMode=defaultSwitchMode, portSnmpPort=portSnmpPort, rxAllCounterPackets=rxAllCounterPackets, adaptiveForwardModeRuntsRange=adaptiveForwardModeRuntsRange, rxFlowCtrlPram=rxFlowCtrlPram, matrixLastChange=matrixLastChange, mediaModuleChange=mediaModuleChange, defaultFlowControlMode=defaultFlowControlMode, disableRmon=disableRmon, txMCPkts1024To1518Octets=txMCPkts1024To1518Octets, txUCPkts256To511Octets=txUCPkts256To511Octets, txLinkDownEvents=txLinkDownEvents, rxBCPkts65To127OctetsLocals=rxBCPkts65To127OctetsLocals, rxMCPkts64OctetsLocals=rxMCPkts64OctetsLocals, smuPortEntry=smuPortEntry, rxBCPkts64OctetsLocals=rxBCPkts64OctetsLocals, adaptiveForwardModeCrcsOffset=adaptiveForwardModeCrcsOffset, txExcessiveLengthDrops=txExcessiveLengthDrops, smuPortAttachedIp=smuPortAttachedIp, tx4ArbitFrameDelay=tx4ArbitFrameDelay, rxNimbusOverRuns=rxNimbusOverRuns, module=module, portConfDuplexSupported=portConfDuplexSupported, matrixPortMajVer=matrixPortMajVer, portConfSpeed=portConfSpeed, matrixNumberConnected=matrixNumberConnected, portInfoType=portInfoType, rxMCPkts1024To1518OctetsLocals=rxMCPkts1024To1518OctetsLocals, moduleMode=moduleMode, matrixModuleState=matrixModuleState, rxUCPkts64OctetsForwardeds=rxUCPkts64OctetsForwardeds, rxCodeViolations=rxCodeViolations, txExcessiveDeferralsErrors=txExcessiveDeferralsErrors, rxMCPkts512To1023OctetsLocals=rxMCPkts512To1023OctetsLocals, portConfLocation=portConfLocation, txUCPkts512To1023Octets=txUCPkts512To1023Octets, txNiaUnderRunAborts=txNiaUnderRunAborts, smuPortAttachedMac=smuPortAttachedMac, permanentEntriesMACAddr=permanentEntriesMACAddr, mediaModuleTable=mediaModuleTable, rxFlowCtrlNimbus=rxFlowCtrlNimbus, smuModuleState=smuModuleState, matrixPortModuleIndex=matrixPortModuleIndex, portConfTable=portConfTable, rxOctetsForwardedHis=rxOctetsForwardedHis, portConfFlowControl=portConfFlowControl, rxPiaOutOfPoolDropErrors=rxPiaOutOfPoolDropErrors, redundantPowerSupplyStatus=redundantPowerSupplyStatus, rxUCPkts64OctetsLocals=rxUCPkts64OctetsLocals, rxUCPkts128To255OctetsForwardeds=rxUCPkts128To255OctetsForwardeds, statistic=statistic, s500PermVioEvent=s500PermVioEvent, portConfDescr=portConfDescr, adaptiveForwardModeRuntsOffset=adaptiveForwardModeRuntsOffset, permanentEntriesTable=permanentEntriesTable, rxDataRateMMErrors=rxDataRateMMErrors, txUCPkts128To255Octets=txUCPkts128To255Octets, rxMCPkts64OctetsForwardeds=rxMCPkts64OctetsForwardeds, rxUCPkts65To127OctetsForwardeds=rxUCPkts65To127OctetsForwardeds, rxUCPkts1024To1518OctetsLocals=rxUCPkts1024To1518OctetsLocals, smuModuleTable=smuModuleTable, rxShortErrors=rxShortErrors, rxMCPkts256To511OctetsLocals=rxMCPkts256To511OctetsLocals, smuModuleIndex=smuModuleIndex, permanentEntriesEntry=permanentEntriesEntry, rxBCPkts1024To1518OctetsLocals=rxBCPkts1024To1518OctetsLocals, portConfConfigSpeed=portConfConfigSpeed, matrixPortEntry=matrixPortEntry, portConfMirrorConfig=portConfMirrorConfig, txOctetsHis=txOctetsHis, ports=ports, permanentEntriesPortId=permanentEntriesPortId, s500=s500, rxAllCounterOthers=rxAllCounterOthers, permanentEntries=permanentEntries, portConfDuplex=portConfDuplex, localManagementTimeout=localManagementTimeout, portAllSpanningTreeMode=portAllSpanningTreeMode, switchTotalTraffic=switchTotalTraffic, matrixPortMac=matrixPortMac, matrixModuleTable=matrixModuleTable, txMCPkts64Octets=txMCPkts64Octets, txMCPkts65To127Octets=txMCPkts65To127Octets, txBCPkts65To127Octets=txBCPkts65To127Octets, matrixMasterPort=matrixMasterPort, ownMatrixAttachmentPort=ownMatrixAttachmentPort, portConfSwitchMode=portConfSwitchMode, matrixPortIp=matrixPortIp, txBCPkts64Octets=txBCPkts64Octets, portInfoEntry=portInfoEntry, rxFilterMACUnexp2ndPortDrops=rxFilterMACUnexp2ndPortDrops, tx7ArbitFrameDelay=tx7ArbitFrameDelay, portConfConfigDuplex=portConfConfigDuplex, rxStatIndex=rxStatIndex, portConfConfigSwitchMode=portConfConfigSwitchMode, portInfoChassisIndex=portInfoChassisIndex, rxFilterIllegalMACDrops=rxFilterIllegalMACDrops, tx6ArbitFrameDelay=tx6ArbitFrameDelay, txMCPkts512To1023Octets=txMCPkts512To1023Octets, txUCPkts65To127Octets=txUCPkts65To127Octets)
