#
# PySNMP MIB module MERITAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MERITAGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, IpAddress, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, ObjectIdentity, ModuleIdentity, NotificationType, Bits, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "IpAddress", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
meritage = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32))
meritageBase = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32, 1))
meritageMSPV = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32, 2))
meritageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32, 3))
meritageClock = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32, 4))
meritageClockSource = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 32, 5))
meritageBaseLEDs = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseLEDs.setStatus('mandatory')
meritageBaseTemperatureExceed = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("exceeded", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseTemperatureExceed.setStatus('mandatory')
meritageBaseXswitchConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("separated", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseXswitchConfiguration.setStatus('mandatory')
meritageBaseFaultMask = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseFaultMask.setStatus('mandatory')
meritageBaseFanTable = MibTable((1, 3, 6, 1, 4, 1, 81, 32, 1, 5), )
if mibBuilder.loadTexts: meritageBaseFanTable.setStatus('mandatory')
meritageBaseFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 32, 1, 5, 1), ).setIndexNames((0, "MERITAGE-MIB", "meritageBaseFanId"))
if mibBuilder.loadTexts: meritageBaseFanEntry.setStatus('mandatory')
meritageBaseFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseFanId.setStatus('mandatory')
meritageBaseFanActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("failed", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseFanActivityStatus.setStatus('mandatory')
meritageBasePSUTable = MibTable((1, 3, 6, 1, 4, 1, 81, 32, 1, 6), )
if mibBuilder.loadTexts: meritageBasePSUTable.setStatus('mandatory')
meritageBasePSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1), ).setIndexNames((0, "MERITAGE-MIB", "meritageBasePSUId"))
if mibBuilder.loadTexts: meritageBasePSUEntry.setStatus('mandatory')
meritageBasePSUId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBasePSUId.setStatus('mandatory')
meritageBasePSUType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("m-ps500", 1), ("m-ps1250", 2), ("m-ps800", 3), ("m-ps800-dc", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBasePSUType.setStatus('mandatory')
meritageBasePSUHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBasePSUHWVersion.setStatus('mandatory')
meritageBasePSURatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBasePSURatedPower.setStatus('mandatory')
meritageBasePSUActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("failed", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBasePSUActivityStatus.setStatus('mandatory')
meritageBaseUpBckplnConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("singleDomain", 1), ("dualDomain", 2), ("notInstalled", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseUpBckplnConfiguration.setStatus('mandatory')
meritageBaseUpBckplnConfigurationSymbol = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageBaseUpBckplnConfigurationSymbol.setStatus('mandatory')
meritageMSPVBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dormant", 1), ("failed", 2), ("none", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageMSPVBackupStatus.setStatus('mandatory')
meritageMSPVMainPosition = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("mMSPV1", 1), ("mMSPV2", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageMSPVMainPosition.setStatus('mandatory')
meritageGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 32, 3, 1), )
if mibBuilder.loadTexts: meritageGroupTable.setStatus('mandatory')
meritageGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 32, 3, 1, 1), ).setIndexNames((0, "MERITAGE-MIB", "meritageGroupIndex"))
if mibBuilder.loadTexts: meritageGroupEntry.setStatus('mandatory')
meritageGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageGroupIndex.setStatus('mandatory')
meritageGroupTempExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("exceeded", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageGroupTempExceed.setStatus('mandatory')
meritageGroupLEDsMap = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageGroupLEDsMap.setStatus('mandatory')
meritageClockAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockAdminStatus.setStatus('mandatory')
meritageClockReset = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockReset.setStatus('mandatory')
meritageClockWTR = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockWTR.setStatus('mandatory')
meritageClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("locked", 1), ("holdover", 2), ("freeRunning", 3), ("internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageClockStatus.setStatus('mandatory')
meritageClockCurrentSource = MibScalar((1, 3, 6, 1, 4, 1, 81, 32, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageClockCurrentSource.setStatus('mandatory')
meritageClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 81, 32, 5, 1), )
if mibBuilder.loadTexts: meritageClockSourceTable.setStatus('mandatory')
meritageClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1), ).setIndexNames((0, "MERITAGE-MIB", "meritageClockSourceIndex"))
if mibBuilder.loadTexts: meritageClockSourceEntry.setStatus('mandatory')
meritageClockSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageClockSourceIndex.setStatus('mandatory')
meritageClockSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("los", 2), ("failed", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meritageClockSourceStatus.setStatus('mandatory')
meritageClockSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockSourcePriority.setStatus('mandatory')
meritageClockSourceConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockSourceConfigPort.setStatus('mandatory')
meritageClockSourceFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 32, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("e1-framed", 1), ("e1-unframed", 2), ("ds1-sf", 3), ("ds1-esf", 4), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: meritageClockSourceFraming.setStatus('mandatory')
mibBuilder.exportSymbols("MERITAGE-MIB", meritageBaseTemperatureExceed=meritageBaseTemperatureExceed, meritageBaseUpBckplnConfigurationSymbol=meritageBaseUpBckplnConfigurationSymbol, meritageGroupTable=meritageGroupTable, meritageGroupIndex=meritageGroupIndex, meritageClock=meritageClock, meritageClockCurrentSource=meritageClockCurrentSource, meritageClockSourceFraming=meritageClockSourceFraming, meritageGroupEntry=meritageGroupEntry, meritageClockStatus=meritageClockStatus, meritageMSPVBackupStatus=meritageMSPVBackupStatus, meritageBasePSUHWVersion=meritageBasePSUHWVersion, meritageBasePSUActivityStatus=meritageBasePSUActivityStatus, meritageBasePSUTable=meritageBasePSUTable, meritageGroupTempExceed=meritageGroupTempExceed, meritageClockAdminStatus=meritageClockAdminStatus, meritageClockSourceTable=meritageClockSourceTable, meritage=meritage, meritageClockWTR=meritageClockWTR, meritageClockSourcePriority=meritageClockSourcePriority, meritageBasePSUEntry=meritageBasePSUEntry, meritageClockSourceIndex=meritageClockSourceIndex, meritageClockSource=meritageClockSource, meritageBaseUpBckplnConfiguration=meritageBaseUpBckplnConfiguration, meritageBasePSUId=meritageBasePSUId, meritageBaseLEDs=meritageBaseLEDs, meritageMSPV=meritageMSPV, meritageBaseFanActivityStatus=meritageBaseFanActivityStatus, meritageBasePSUType=meritageBasePSUType, meritageBase=meritageBase, meritageClockSourceStatus=meritageClockSourceStatus, meritageClockSourceConfigPort=meritageClockSourceConfigPort, meritageBaseFanId=meritageBaseFanId, meritageBaseFanTable=meritageBaseFanTable, meritageClockSourceEntry=meritageClockSourceEntry, meritageBasePSURatedPower=meritageBasePSURatedPower, meritageMSPVMainPosition=meritageMSPVMainPosition, meritageGroup=meritageGroup, meritageClockReset=meritageClockReset, meritageBaseFaultMask=meritageBaseFaultMask, meritageBaseFanEntry=meritageBaseFanEntry, meritageBaseXswitchConfiguration=meritageBaseXswitchConfiguration, meritageGroupLEDsMap=meritageGroupLEDsMap)
