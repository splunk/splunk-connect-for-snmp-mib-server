#
# PySNMP MIB module CISCO-SMART-INSTALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SMART-INSTALL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:55:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, CiscoURLStringOrEmpty, TimeIntervalMin = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList", "CiscoURLStringOrEmpty", "TimeIntervalMin")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, NotificationType, Bits, Counter64, ObjectIdentity, iso, TimeTicks, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "Bits", "Counter64", "ObjectIdentity", "iso", "TimeTicks", "Counter32", "Unsigned32")
DateAndTime, TruthValue, TextualConvention, StorageType, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "StorageType", "RowStatus", "DisplayString", "MacAddress")
ciscoSmartInstallMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 725))
ciscoSmartInstallMIB.setRevisions(('2010-04-30 00:00',))
if mibBuilder.loadTexts: ciscoSmartInstallMIB.setLastUpdated('201004300000Z')
if mibBuilder.loadTexts: ciscoSmartInstallMIB.setOrganization('Cisco Systems, Inc.')
ciscoSmartInstallMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 0))
ciscoSmartInstallMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1))
ciscoSmartInstallMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 2))
csiGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1))
csiProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2))
csiDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3))
csiNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 4))
csiOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("basic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiOperationMode.setStatus('current')
csiDirectorIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiDirectorIpAddressType.setStatus('current')
csiDirectorIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiDirectorIpAddress.setStatus('current')
csiManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiManagementVlan.setStatus('current')
csiManagementVlansFirst2K = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 5), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiManagementVlansFirst2K.setStatus('current')
csiManagementVlansSecond2K = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 6), Cisco2KVlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiManagementVlansSecond2K.setStatus('current')
csiBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 7))
csiJoinWindow = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8))
csiBackupHostUrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 7, 1), CiscoURLStringOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiBackupHostUrl.setStatus('current')
csiBackupEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiBackupEnable.setStatus('current')
csiJoinWindowConfigOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closed", 1), ("auto", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiJoinWindowConfigOperationMode.setStatus('current')
csiJoinWindowPeriodNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiJoinWindowPeriodNextFreeIndex.setStatus('current')
csiJoinWindowPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3), )
if mibBuilder.loadTexts: csiJoinWindowPeriodTable.setStatus('current')
csiJoinWindowPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1), ).setIndexNames((0, "CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodIndex"))
if mibBuilder.loadTexts: csiJoinWindowPeriodEntry.setStatus('current')
csiJoinWindowPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csiJoinWindowPeriodIndex.setStatus('current')
csiJoinWindowPeriodStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 2), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodStartTime.setStatus('current')
csiJoinWindowPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 3), TimeIntervalMin()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodInterval.setStatus('current')
csiJoinWindowPeriodRecurrencePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("daily", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodRecurrencePattern.setStatus('current')
csiJoinWindowPeriodExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodExpirationDate.setStatus('current')
csiJoinWindowPeriodStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodStorageType.setStatus('current')
csiJoinWindowPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 1, 8, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiJoinWindowPeriodRowStatus.setStatus('current')
csiImageFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 1), CiscoURLStringOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiImageFileUrl.setStatus('current')
csiConfigFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 2), CiscoURLStringOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiConfigFileUrl.setStatus('current')
csiHostnamePrefix = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiHostnamePrefix.setStatus('current')
csiProfileNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiProfileNextFreeIndex.setStatus('current')
csiProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5), )
if mibBuilder.loadTexts: csiProfileTable.setStatus('current')
csiProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-SMART-INSTALL-MIB", "csiProfileIndex"))
if mibBuilder.loadTexts: csiProfileEntry.setStatus('current')
csiProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csiProfileIndex.setStatus('current')
csiProfileGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileGroupName.setStatus('current')
csiProfileImageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 3), CiscoURLStringOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileImageUrl.setStatus('current')
csiProfileImageTwoUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 4), CiscoURLStringOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileImageTwoUrl.setStatus('current')
csiProfileConfigUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 5), CiscoURLStringOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileConfigUrl.setStatus('current')
csiProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileStorageType.setStatus('current')
csiProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiProfileRowStatus.setStatus('current')
csiMatchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6), )
if mibBuilder.loadTexts: csiMatchTable.setStatus('current')
csiMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-SMART-INSTALL-MIB", "csiProfileIndex"), (0, "CISCO-SMART-INSTALL-MIB", "csiMatchIndex"))
if mibBuilder.loadTexts: csiMatchEntry.setStatus('current')
csiMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csiMatchIndex.setStatus('current')
csiMatchGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("mac", 2), ("connectivity", 3), ("product", 4), ("stack", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchGroupType.setStatus('current')
csiMatchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchMacAddress.setStatus('current')
csiMatchHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchHostAddressType.setStatus('current')
csiMatchHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchHostAddress.setStatus('current')
csiMatchHostInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchHostInterface.setStatus('current')
csiMatchProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchProductId.setStatus('current')
csiMatchSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchSwitchNum.setStatus('current')
csiMatchSwitchProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchSwitchProductId.setStatus('current')
csiMatchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 10), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchStorageType.setStatus('current')
csiMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 2, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiMatchRowStatus.setStatus('current')
csiDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1), )
if mibBuilder.loadTexts: csiDeviceTable.setStatus('current')
csiDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SMART-INSTALL-MIB", "csiDeviceNum"))
if mibBuilder.loadTexts: csiDeviceEntry.setStatus('current')
csiDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csiDeviceNum.setStatus('current')
csiDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceMacAddress.setStatus('current')
csiDeviceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceAddressType.setStatus('current')
csiDeviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceAddress.setStatus('current')
csiDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceName.setStatus('current')
csiDeviceBackupConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceBackupConfigFileName.setStatus('current')
csiDeviceImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceImageVersion.setStatus('current')
csiDevicePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDevicePlatform.setStatus('current')
csiDeviceSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceSerialNum.setStatus('current')
csiDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 3, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiDeviceStatus.setStatus('current')
csiNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 4, 1), Bits().clone(namedValues=NamedValues(("operationModeChange", 0), ("deviceAdded", 1), ("deviceLost", 2), ("fileLoadFailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiNotifEnable.setStatus('current')
csiNotifOperationType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("downloadConfig", 2), ("downloadImage", 3), ("uploadConfig", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNotifOperationType.setStatus('current')
csiNotifOperationResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 725, 1, 4, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNotifOperationResult.setStatus('current')
csiOperationModeChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 725, 0, 1)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiOperationMode"))
if mibBuilder.loadTexts: csiOperationModeChange.setStatus('current')
csiDeviceAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 725, 0, 2)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiDeviceName"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddress"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceMacAddress"))
if mibBuilder.loadTexts: csiDeviceAdded.setStatus('current')
csiDeviceLost = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 725, 0, 3)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiDeviceName"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddress"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceMacAddress"))
if mibBuilder.loadTexts: csiDeviceLost.setStatus('current')
csiFileLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 725, 0, 4)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiDeviceName"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddress"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceMacAddress"), ("CISCO-SMART-INSTALL-MIB", "csiNotifOperationType"), ("CISCO-SMART-INSTALL-MIB", "csiNotifOperationResult"))
if mibBuilder.loadTexts: csiFileLoadFailed.setStatus('current')
ciscoSmartInstallCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 1))
ciscoSmartInstallGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2))
ciscoSmartInstallCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 1, 1)).setObjects(("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallGlobalConfigGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallDeviceInformationGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallConfigBackupGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallJoinWindowGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallProfileGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallNotificationEnableGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallNotificationsGroup"), ("CISCO-SMART-INSTALL-MIB", "ciscoSmartInstallNotifyVarsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallCompliance = ciscoSmartInstallCompliance.setStatus('current')
ciscoSmartInstallGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 1)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiOperationMode"), ("CISCO-SMART-INSTALL-MIB", "csiDirectorIpAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiDirectorIpAddress"), ("CISCO-SMART-INSTALL-MIB", "csiManagementVlan"), ("CISCO-SMART-INSTALL-MIB", "csiManagementVlansFirst2K"), ("CISCO-SMART-INSTALL-MIB", "csiManagementVlansSecond2K"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallGlobalConfigGroup = ciscoSmartInstallGlobalConfigGroup.setStatus('current')
ciscoSmartInstallConfigBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 2)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiBackupEnable"), ("CISCO-SMART-INSTALL-MIB", "csiBackupHostUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallConfigBackupGroup = ciscoSmartInstallConfigBackupGroup.setStatus('current')
ciscoSmartInstallJoinWindowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 3)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiJoinWindowConfigOperationMode"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodNextFreeIndex"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodStartTime"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodInterval"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodRecurrencePattern"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodExpirationDate"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodRowStatus"), ("CISCO-SMART-INSTALL-MIB", "csiJoinWindowPeriodStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallJoinWindowGroup = ciscoSmartInstallJoinWindowGroup.setStatus('current')
ciscoSmartInstallProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 4)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiImageFileUrl"), ("CISCO-SMART-INSTALL-MIB", "csiConfigFileUrl"), ("CISCO-SMART-INSTALL-MIB", "csiHostnamePrefix"), ("CISCO-SMART-INSTALL-MIB", "csiProfileNextFreeIndex"), ("CISCO-SMART-INSTALL-MIB", "csiProfileGroupName"), ("CISCO-SMART-INSTALL-MIB", "csiProfileImageUrl"), ("CISCO-SMART-INSTALL-MIB", "csiProfileImageTwoUrl"), ("CISCO-SMART-INSTALL-MIB", "csiProfileConfigUrl"), ("CISCO-SMART-INSTALL-MIB", "csiProfileStorageType"), ("CISCO-SMART-INSTALL-MIB", "csiProfileRowStatus"), ("CISCO-SMART-INSTALL-MIB", "csiMatchGroupType"), ("CISCO-SMART-INSTALL-MIB", "csiMatchProductId"), ("CISCO-SMART-INSTALL-MIB", "csiMatchSwitchNum"), ("CISCO-SMART-INSTALL-MIB", "csiMatchSwitchProductId"), ("CISCO-SMART-INSTALL-MIB", "csiMatchHostAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiMatchHostAddress"), ("CISCO-SMART-INSTALL-MIB", "csiMatchHostInterface"), ("CISCO-SMART-INSTALL-MIB", "csiMatchMacAddress"), ("CISCO-SMART-INSTALL-MIB", "csiMatchStorageType"), ("CISCO-SMART-INSTALL-MIB", "csiMatchRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallProfileGroup = ciscoSmartInstallProfileGroup.setStatus('current')
ciscoSmartInstallDeviceInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 5)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiDeviceMacAddress"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddressType"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAddress"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceName"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceBackupConfigFileName"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceImageVersion"), ("CISCO-SMART-INSTALL-MIB", "csiDevicePlatform"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceSerialNum"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallDeviceInformationGroup = ciscoSmartInstallDeviceInformationGroup.setStatus('current')
ciscoSmartInstallNotificationEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 6)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallNotificationEnableGroup = ciscoSmartInstallNotificationEnableGroup.setStatus('current')
ciscoSmartInstallNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 7)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiOperationModeChange"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceAdded"), ("CISCO-SMART-INSTALL-MIB", "csiDeviceLost"), ("CISCO-SMART-INSTALL-MIB", "csiFileLoadFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallNotificationsGroup = ciscoSmartInstallNotificationsGroup.setStatus('current')
ciscoSmartInstallNotifyVarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 725, 2, 2, 8)).setObjects(("CISCO-SMART-INSTALL-MIB", "csiNotifOperationType"), ("CISCO-SMART-INSTALL-MIB", "csiNotifOperationResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSmartInstallNotifyVarsGroup = ciscoSmartInstallNotifyVarsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-SMART-INSTALL-MIB", ciscoSmartInstallDeviceInformationGroup=ciscoSmartInstallDeviceInformationGroup, csiMatchHostAddress=csiMatchHostAddress, ciscoSmartInstallMIBNotifs=ciscoSmartInstallMIBNotifs, csiDeviceInfo=csiDeviceInfo, csiGlobalConfig=csiGlobalConfig, csiMatchProductId=csiMatchProductId, csiMatchHostInterface=csiMatchHostInterface, ciscoSmartInstallCompliance=ciscoSmartInstallCompliance, csiMatchMacAddress=csiMatchMacAddress, csiProfileConfigUrl=csiProfileConfigUrl, csiJoinWindowPeriodStorageType=csiJoinWindowPeriodStorageType, csiJoinWindowConfigOperationMode=csiJoinWindowConfigOperationMode, csiProfileTable=csiProfileTable, csiProfileRowStatus=csiProfileRowStatus, csiDeviceMacAddress=csiDeviceMacAddress, csiImageFileUrl=csiImageFileUrl, csiDeviceAddressType=csiDeviceAddressType, csiMatchSwitchProductId=csiMatchSwitchProductId, ciscoSmartInstallNotificationEnableGroup=ciscoSmartInstallNotificationEnableGroup, csiDeviceBackupConfigFileName=csiDeviceBackupConfigFileName, csiNotifOperationType=csiNotifOperationType, csiMatchHostAddressType=csiMatchHostAddressType, csiHostnamePrefix=csiHostnamePrefix, csiOperationModeChange=csiOperationModeChange, csiMatchEntry=csiMatchEntry, csiJoinWindowPeriodInterval=csiJoinWindowPeriodInterval, csiBackupHostUrl=csiBackupHostUrl, csiMatchRowStatus=csiMatchRowStatus, csiJoinWindowPeriodEntry=csiJoinWindowPeriodEntry, ciscoSmartInstallNotificationsGroup=ciscoSmartInstallNotificationsGroup, csiMatchIndex=csiMatchIndex, csiDeviceName=csiDeviceName, csiMatchStorageType=csiMatchStorageType, ciscoSmartInstallMIB=ciscoSmartInstallMIB, PYSNMP_MODULE_ID=ciscoSmartInstallMIB, csiDeviceAddress=csiDeviceAddress, csiNotifOperationResult=csiNotifOperationResult, csiProfileStorageType=csiProfileStorageType, csiProfileImageUrl=csiProfileImageUrl, csiNotifEnable=csiNotifEnable, csiDirectorIpAddress=csiDirectorIpAddress, csiDeviceEntry=csiDeviceEntry, csiJoinWindow=csiJoinWindow, ciscoSmartInstallMIBConform=ciscoSmartInstallMIBConform, ciscoSmartInstallConfigBackupGroup=ciscoSmartInstallConfigBackupGroup, csiDeviceAdded=csiDeviceAdded, ciscoSmartInstallJoinWindowGroup=ciscoSmartInstallJoinWindowGroup, csiProfileNextFreeIndex=csiProfileNextFreeIndex, csiProfileImageTwoUrl=csiProfileImageTwoUrl, csiJoinWindowPeriodRecurrencePattern=csiJoinWindowPeriodRecurrencePattern, csiMatchSwitchNum=csiMatchSwitchNum, csiManagementVlansSecond2K=csiManagementVlansSecond2K, csiProfileIndex=csiProfileIndex, csiNotifObjects=csiNotifObjects, csiBackupEnable=csiBackupEnable, csiJoinWindowPeriodRowStatus=csiJoinWindowPeriodRowStatus, csiJoinWindowPeriodNextFreeIndex=csiJoinWindowPeriodNextFreeIndex, csiJoinWindowPeriodIndex=csiJoinWindowPeriodIndex, csiProfileGroupName=csiProfileGroupName, csiMatchGroupType=csiMatchGroupType, ciscoSmartInstallProfileGroup=ciscoSmartInstallProfileGroup, csiDeviceNum=csiDeviceNum, csiDeviceStatus=csiDeviceStatus, csiJoinWindowPeriodStartTime=csiJoinWindowPeriodStartTime, csiProfile=csiProfile, csiMatchTable=csiMatchTable, csiOperationMode=csiOperationMode, csiDeviceImageVersion=csiDeviceImageVersion, ciscoSmartInstallNotifyVarsGroup=ciscoSmartInstallNotifyVarsGroup, csiManagementVlan=csiManagementVlan, ciscoSmartInstallGlobalConfigGroup=ciscoSmartInstallGlobalConfigGroup, ciscoSmartInstallMIBObjects=ciscoSmartInstallMIBObjects, csiConfigFileUrl=csiConfigFileUrl, csiBackup=csiBackup, csiProfileEntry=csiProfileEntry, csiJoinWindowPeriodExpirationDate=csiJoinWindowPeriodExpirationDate, csiDeviceSerialNum=csiDeviceSerialNum, csiJoinWindowPeriodTable=csiJoinWindowPeriodTable, csiDeviceTable=csiDeviceTable, csiFileLoadFailed=csiFileLoadFailed, ciscoSmartInstallCompliances=ciscoSmartInstallCompliances, csiDirectorIpAddressType=csiDirectorIpAddressType, ciscoSmartInstallGroups=ciscoSmartInstallGroups, csiDevicePlatform=csiDevicePlatform, csiManagementVlansFirst2K=csiManagementVlansFirst2K, csiDeviceLost=csiDeviceLost)
