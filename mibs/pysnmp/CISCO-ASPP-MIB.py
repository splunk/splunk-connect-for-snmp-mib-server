#
# PySNMP MIB module CISCO-ASPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ASPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Bits, Counter32, Gauge32, ObjectIdentity, ModuleIdentity, TimeTicks, IpAddress, Integer32, Counter64, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "IpAddress", "Integer32", "Counter64", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoAsppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 55))
ciscoAsppMIB.setRevisions(('2003-02-10 00:00', '1995-08-21 00:00',))
if mibBuilder.loadTexts: ciscoAsppMIB.setLastUpdated('200302100000Z')
if mibBuilder.loadTexts: ciscoAsppMIB.setOrganization('Cisco Systems, Inc.')
asppObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 55, 1))
asppPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1))
asppPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1), )
if mibBuilder.loadTexts: asppPortTable.setStatus('current')
asppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: asppPortEntry.setStatus('current')
asppPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("adplex", 1), ("adtPollSelect", 2), ("adtVariPoll", 3), ("diebold", 4), ("asyncGeneric", 5), ("mdi", 6), ("mosec", 7), ("gddb", 8), ("apos", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortProtocol.setStatus('current')
asppPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortRole.setStatus('current')
asppPortReceiveInterFrameTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortReceiveInterFrameTimeout.setStatus('current')
asppPortDeviceAddressOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortDeviceAddressOffset.setStatus('current')
asppPortEOFCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortEOFCharacter.setStatus('current')
asppPortSOFCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortSOFCharacter.setStatus('current')
asppPortIgnoreSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortIgnoreSequenceNumber.setStatus('current')
asppPortRspTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortRspTimer.setStatus('current')
asppPortRxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortRxTimer.setStatus('current')
asppPortHostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortHostTimer.setStatus('current')
asppPortConnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortConnectTimer.setStatus('current')
asppPortRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortRetryCount.setStatus('current')
asppPortDelayEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortDelayEnq.setStatus('current')
asppPortDisableEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortDisableEnq.setStatus('current')
asppPortSendAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortSendAck.setStatus('current')
asppPortDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortDirect.setStatus('current')
asppPortDCDAlways = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 55, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: asppPortDCDAlways.setStatus('current')
asppMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 55, 3))
asppMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 1))
asppMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 2))
asppMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 1, 1)).setObjects(("CISCO-ASPP-MIB", "asppPortsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asppMibCompliance = asppMibCompliance.setStatus('deprecated')
asppMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 1, 2)).setObjects(("CISCO-ASPP-MIB", "asppPortsGroup"), ("CISCO-ASPP-MIB", "asppPortsGenericGroup"), ("CISCO-ASPP-MIB", "asppPortsAposGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asppMibComplianceRev1 = asppMibComplianceRev1.setStatus('current')
asppPortsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 2, 1)).setObjects(("CISCO-ASPP-MIB", "asppPortProtocol"), ("CISCO-ASPP-MIB", "asppPortRole"), ("CISCO-ASPP-MIB", "asppPortReceiveInterFrameTimeout"), ("CISCO-ASPP-MIB", "asppPortDeviceAddressOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asppPortsGroup = asppPortsGroup.setStatus('current')
asppPortsGenericGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 2, 2)).setObjects(("CISCO-ASPP-MIB", "asppPortEOFCharacter"), ("CISCO-ASPP-MIB", "asppPortSOFCharacter"), ("CISCO-ASPP-MIB", "asppPortIgnoreSequenceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asppPortsGenericGroup = asppPortsGenericGroup.setStatus('current')
asppPortsAposGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 55, 3, 2, 3)).setObjects(("CISCO-ASPP-MIB", "asppPortRspTimer"), ("CISCO-ASPP-MIB", "asppPortRxTimer"), ("CISCO-ASPP-MIB", "asppPortHostTimer"), ("CISCO-ASPP-MIB", "asppPortConnectTimer"), ("CISCO-ASPP-MIB", "asppPortRetryCount"), ("CISCO-ASPP-MIB", "asppPortDelayEnq"), ("CISCO-ASPP-MIB", "asppPortDisableEnq"), ("CISCO-ASPP-MIB", "asppPortSendAck"), ("CISCO-ASPP-MIB", "asppPortDirect"), ("CISCO-ASPP-MIB", "asppPortDCDAlways"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    asppPortsAposGroup = asppPortsAposGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ASPP-MIB", asppMibCompliance=asppMibCompliance, asppPortTable=asppPortTable, asppPortEntry=asppPortEntry, asppMibCompliances=asppMibCompliances, asppPortRspTimer=asppPortRspTimer, asppPortConnectTimer=asppPortConnectTimer, asppMibComplianceRev1=asppMibComplianceRev1, asppPortProtocol=asppPortProtocol, asppPortDCDAlways=asppPortDCDAlways, asppPortSOFCharacter=asppPortSOFCharacter, asppPortRole=asppPortRole, asppPortsGroup=asppPortsGroup, asppPortHostTimer=asppPortHostTimer, asppPortRxTimer=asppPortRxTimer, asppPortEOFCharacter=asppPortEOFCharacter, ciscoAsppMIB=ciscoAsppMIB, asppPortSendAck=asppPortSendAck, asppPortDeviceAddressOffset=asppPortDeviceAddressOffset, asppPortRetryCount=asppPortRetryCount, asppPortsAposGroup=asppPortsAposGroup, asppPortIgnoreSequenceNumber=asppPortIgnoreSequenceNumber, asppObjects=asppObjects, asppPortDisableEnq=asppPortDisableEnq, PYSNMP_MODULE_ID=ciscoAsppMIB, asppMibConformance=asppMibConformance, asppMibGroups=asppMibGroups, asppPortsGenericGroup=asppPortsGenericGroup, asppPortDelayEnq=asppPortDelayEnq, asppPorts=asppPorts, asppPortDirect=asppPortDirect, asppPortReceiveInterFrameTimeout=asppPortReceiveInterFrameTimeout)
