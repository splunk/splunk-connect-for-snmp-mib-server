#
# PySNMP MIB module PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:31:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, Gauge32, Unsigned32, MibIdentifier, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, NotificationType, Counter64, ObjectIdentity, iso, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Gauge32", "Unsigned32", "MibIdentifier", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "iso", "Integer32", "Bits")
TextualConvention, DisplayString, DateAndTime, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue", "MacAddress")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2016-02-22 00:00', '2016-02-03 00:00', '2015-11-02 00:00', '2015-10-26 00:00', '2015-10-16 00:00', '2015-10-02 00:00', '2015-06-19 00:00', '2015-03-11 00:00', '2014-04-03 00:00', '2012-03-22 00:00', '2012-03-15 00:00', '2012-03-14 00:00', '2011-11-30 00:00', '2011-11-07 00:00', '2011-10-06 00:00', '2011-05-17 00:00', '2011-05-11 00:00', '2011-04-18 00:00', '2011-02-14 00:00', '2011-01-24 00:00', '2010-11-30 00:00', '2010-11-04 00:00', '2010-07-21 00:00', '2010-07-19 00:00', '2010-07-15 00:00', '2010-07-13 00:00', '2010-06-29 00:00', '2010-06-07 00:00', '2010-05-27 00:00', '2010-05-20 00:00', '2010-05-17 00:00', '2009-06-09 00:00', '2009-04-20 00:00', '2009-02-13 00:00', '2009-02-12 00:00', '2008-12-01 00:00', '2008-10-24 00:00', '2008-09-25 00:00', '2008-09-05 00:00', '2008-06-05 00:00', '2007-11-28 00:00', '2007-06-20 00:00',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201602220000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 2))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 3))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3))
lineCurrents = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4))
circuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5))
lineVoltages = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6))
dataLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20))
inletPole = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21))
dataLogOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10))
dataLogCircuitBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15))
dataLogInputLine = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14))
dataLogInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12))
dataLogInletPole = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13))
dataLogExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16))
unitReadings = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 1)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroup"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('deprecated')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 2)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "lineCurrentGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "lineVoltageGroup"), ("PDU-MIB", "dataLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('deprecated')
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 3)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev2 = complianceRev2.setStatus('deprecated')
complianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 4)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalTemperatureGroup"), ("PDU-MIB", "externalHumidityGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev3 = complianceRev3.setStatus('deprecated')
complianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 5)).setObjects(("PDU-MIB", "infoGroup"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalSensorsGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev4 = complianceRev4.setStatus('deprecated')
complianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 4, 9, 1, 6)).setObjects(("PDU-MIB", "infoGroupRev2"), ("PDU-MIB", "inletsGroup"), ("PDU-MIB", "outletsGroup"), ("PDU-MIB", "unitSensorsGroupRev2"), ("PDU-MIB", "externalSensorsGroup"), ("PDU-MIB", "trapsGroup"), ("PDU-MIB", "inletPoleGroup"), ("PDU-MIB", "circuitBreakerGroup"), ("PDU-MIB", "dataLogGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev5 = complianceRev5.setStatus('current')
infoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 1)).setObjects(("PDU-MIB", "dataLoggingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroup = infoGroup.setStatus('deprecated')
infoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 22)).setObjects(("PDU-MIB", "firmwareVersion"), ("PDU-MIB", "serialNumber"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "netmask"), ("PDU-MIB", "gateway"), ("PDU-MIB", "mac"), ("PDU-MIB", "hardwareRev"), ("PDU-MIB", "userName"), ("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "groupName"), ("PDU-MIB", "imageVersion"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"), ("PDU-MIB", "status"), ("PDU-MIB", "slaveIpAddress"), ("PDU-MIB", "inputCurrentRating"), ("PDU-MIB", "ratedVoltage"), ("PDU-MIB", "ratedPower"), ("PDU-MIB", "outletSwitching"), ("PDU-MIB", "dataLogging"), ("PDU-MIB", "dataCollectionInterval"), ("PDU-MIB", "outletEnergySupport"), ("PDU-MIB", "currentUnbalanceSupport"), ("PDU-MIB", "externalSensorsZCoordinateUnits"), ("PDU-MIB", "inlineMeter"), ("PDU-MIB", "oldSensorState"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "sensorIdentificationString"), ("PDU-MIB", "lastUpgradeStatus"), ("PDU-MIB", "lastUpgradeTimestamp"), ("PDU-MIB", "lastUpgradeErrorDescription"), ("PDU-MIB", "powerCIMStatus"), ("PDU-MIB", "measurementsPerLogEntry"), ("PDU-MIB", "psocNumber"), ("PDU-MIB", "altitude"), ("PDU-MIB", "configureAlerts"), ("PDU-MIB", "fipsMode"), ("PDU-MIB", "synchronizeWithNTPServer"), ("PDU-MIB", "useDHCPProvidedNTPServer"), ("PDU-MIB", "primaryNTPServerAddressType"), ("PDU-MIB", "primaryNTPServerAddress"), ("PDU-MIB", "secondaryNTPServerAddressType"), ("PDU-MIB", "secondaryNTPServerAddress"), ("PDU-MIB", "daylightSavingsTime"), ("PDU-MIB", "thresholdValue"), ("PDU-MIB", "sensorValue"), ("PDU-MIB", "ipmiOverLAN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroupRev2 = infoGroupRev2.setStatus('current')
outletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 2)).setObjects(("PDU-MIB", "outletCount"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletCurrentRating"), ("PDU-MIB", "outletOperationalState"), ("PDU-MIB", "outletCurrent"), ("PDU-MIB", "outletMaxCurrent"), ("PDU-MIB", "outletVoltage"), ("PDU-MIB", "outletActivePower"), ("PDU-MIB", "outletApparentPower"), ("PDU-MIB", "outletPowerFactor"), ("PDU-MIB", "outletCurrentUpperWarning"), ("PDU-MIB", "outletCurrentUpperCritical"), ("PDU-MIB", "outletCurrentLowerWarning"), ("PDU-MIB", "outletCurrentLowerCritical"), ("PDU-MIB", "outletCurrentHysteresis"), ("PDU-MIB", "outletWattHours"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outletsGroup = outletsGroup.setStatus('current')
unitSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 4)).setObjects(("PDU-MIB", "unitCurrent"), ("PDU-MIB", "unitVoltage"), ("PDU-MIB", "unitActivePower"), ("PDU-MIB", "unitApparentPower"), ("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitVoltageLowerWarning"), ("PDU-MIB", "unitVoltageUpperWarning"), ("PDU-MIB", "unitVoltageLowerCritical"), ("PDU-MIB", "unitVoltageUpperCritical"), ("PDU-MIB", "unitCurrentUpperWarning"), ("PDU-MIB", "unitCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroup = unitSensorsGroup.setStatus('deprecated')
externalTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 6)).setObjects(("PDU-MIB", "tempSensorCount"), ("PDU-MIB", "tempSensorLabel"), ("PDU-MIB", "temperature"), ("PDU-MIB", "tempLowerWarning"), ("PDU-MIB", "tempUpperWarning"), ("PDU-MIB", "tempLowerCritical"), ("PDU-MIB", "tempUpperCritical"), ("PDU-MIB", "tempXCoordinate"), ("PDU-MIB", "tempYCoordinate"), ("PDU-MIB", "tempZCoordinate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalTemperatureGroup = externalTemperatureGroup.setStatus('deprecated')
externalHumidityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 7)).setObjects(("PDU-MIB", "humiditySensorCount"), ("PDU-MIB", "humiditySensorLabel"), ("PDU-MIB", "humidity"), ("PDU-MIB", "humidityLowerWarning"), ("PDU-MIB", "humidityUpperWarning"), ("PDU-MIB", "humidityLowerCritical"), ("PDU-MIB", "humidityUpperCritical"), ("PDU-MIB", "humidityXCoordinate"), ("PDU-MIB", "humidityYCoordinate"), ("PDU-MIB", "humidityZCoordinate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalHumidityGroup = externalHumidityGroup.setStatus('deprecated')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 9)).setObjects(("PDU-MIB", "rebootStarted"), ("PDU-MIB", "rebootCompleted"), ("PDU-MIB", "userLogin"), ("PDU-MIB", "userLogout"), ("PDU-MIB", "userAuthenticationFailure"), ("PDU-MIB", "userSessionTimeout"), ("PDU-MIB", "userAdded"), ("PDU-MIB", "userModified"), ("PDU-MIB", "userDeleted"), ("PDU-MIB", "groupAdded"), ("PDU-MIB", "groupModified"), ("PDU-MIB", "groupDeleted"), ("PDU-MIB", "deviceUpdateStarted"), ("PDU-MIB", "userBlocked"), ("PDU-MIB", "powerControl"), ("PDU-MIB", "userPasswordChanged"), ("PDU-MIB", "passwordSettingsChanged"), ("PDU-MIB", "firmwareFileDiscarded"), ("PDU-MIB", "firmwareValidationFailed"), ("PDU-MIB", "securityViolation"), ("PDU-MIB", "logFileCleared"), ("PDU-MIB", "thresholdAlarm"), ("PDU-MIB", "outletGroupingConnectivityLost"), ("PDU-MIB", "circuitBreakerTripped"), ("PDU-MIB", "circuitBreakerRecovered"), ("PDU-MIB", "bulkConfigurationSaved"), ("PDU-MIB", "bulkConfigurationCopied"), ("PDU-MIB", "environmentalSensorsConnectivityLost"), ("PDU-MIB", "externalOnOffSensorStateChange"), ("PDU-MIB", "environmentalSensorsConnectivityRestored"), ("PDU-MIB", "voltageMeasurementError"), ("PDU-MIB", "fipsModeEnabled"), ("PDU-MIB", "fipsModeDisabled"), ("PDU-MIB", "managingenvironmentalSensor"), ("PDU-MIB", "unmanagingenvironmentalSensor"), ("PDU-MIB", "ipmiOverLANEnabled"), ("PDU-MIB", "ipmiOverLANDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
lineCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 10)).setObjects(("PDU-MIB", "lineCurrentCount"), ("PDU-MIB", "lineCurrentLabel"), ("PDU-MIB", "lineCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lineCurrentGroup = lineCurrentGroup.setStatus('deprecated')
circuitBreakerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 11)).setObjects(("PDU-MIB", "circuitBreakerCount"), ("PDU-MIB", "circuitBreakerLabel"), ("PDU-MIB", "circuitBreakerCurrentRating"), ("PDU-MIB", "circuitBreakerState"), ("PDU-MIB", "circuitBreakerCurrent"), ("PDU-MIB", "circuitBreakerCurrentUpperWarning"), ("PDU-MIB", "circuitBreakerCurrentUpperCritical"), ("PDU-MIB", "circuitBreakerCurrentHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    circuitBreakerGroup = circuitBreakerGroup.setStatus('current')
lineVoltageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 12)).setObjects(("PDU-MIB", "lineVoltageCount"), ("PDU-MIB", "lineVoltageLabel"), ("PDU-MIB", "lineVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lineVoltageGroup = lineVoltageGroup.setStatus('deprecated')
unitSensorsGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 13)).setObjects(("PDU-MIB", "unitActivePower"), ("PDU-MIB", "unitApparentPower"), ("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitOrLineVoltageLowerWarning"), ("PDU-MIB", "unitOrLineVoltageUpperWarning"), ("PDU-MIB", "unitOrLineVoltageLowerCritical"), ("PDU-MIB", "unitOrLineVoltageUpperCritical"), ("PDU-MIB", "unitOrLineCurrentUpperWarning"), ("PDU-MIB", "unitOrLineCurrentUpperCritical"), ("PDU-MIB", "neutralCurrentUpperWarning"), ("PDU-MIB", "neutralCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"), ("PDU-MIB", "currentUnbalance"), ("PDU-MIB", "currentUnbalanceUpperWarning"), ("PDU-MIB", "currentUnbalanceUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroupRev = unitSensorsGroupRev.setStatus('deprecated')
unitSensorsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 18)).setObjects(("PDU-MIB", "unitCpuTemp"), ("PDU-MIB", "unitOrLineVoltageLowerWarning"), ("PDU-MIB", "unitOrLineVoltageUpperWarning"), ("PDU-MIB", "unitOrLineVoltageLowerCritical"), ("PDU-MIB", "unitOrLineVoltageUpperCritical"), ("PDU-MIB", "unitOrLineCurrentUpperWarning"), ("PDU-MIB", "unitOrLineCurrentUpperCritical"), ("PDU-MIB", "neutralCurrentUpperWarning"), ("PDU-MIB", "neutralCurrentUpperCritical"), ("PDU-MIB", "unitTempLowerWarning"), ("PDU-MIB", "unitTempUpperWarning"), ("PDU-MIB", "unitTempLowerCritical"), ("PDU-MIB", "unitTempUpperCritical"), ("PDU-MIB", "currentUnbalance"), ("PDU-MIB", "currentUnbalanceUpperWarning"), ("PDU-MIB", "currentUnbalanceUpperCritical"), ("PDU-MIB", "unitOrLineVoltageHysteresis"), ("PDU-MIB", "unitOrLineCurrentHysteresis"), ("PDU-MIB", "unitTempHysteresis"), ("PDU-MIB", "currentUnbalanceHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroupRev2 = unitSensorsGroupRev2.setStatus('current')
dataLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 14)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogActivePower"), ("PDU-MIB", "dataLogApparentPower"), ("PDU-MIB", "dataLogOutletCurrent"), ("PDU-MIB", "dataLogOutletVoltage"), ("PDU-MIB", "dataLogOutletPowerFactor"), ("PDU-MIB", "dataLogOutletOnTime"), ("PDU-MIB", "dataLogCircuitBreakerCurrent"), ("PDU-MIB", "dataLogInputLineCurrent"), ("PDU-MIB", "dataLogInputLineVoltage"), ("PDU-MIB", "dataLogOutletWattHours"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroup = dataLogGroup.setStatus('deprecated')
dataLogGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 17)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogActivePower"), ("PDU-MIB", "dataLogApparentPower"), ("PDU-MIB", "dataLogOutletCurrent"), ("PDU-MIB", "dataLogOutletVoltage"), ("PDU-MIB", "dataLogOutletPowerFactor"), ("PDU-MIB", "dataLogOutletOnTime"), ("PDU-MIB", "dataLogCircuitBreakerCurrent"), ("PDU-MIB", "dataLogOutletWattHours"), ("PDU-MIB", "dataLogInletPoleCurrent"), ("PDU-MIB", "dataLogInletPoleVoltage"), ("PDU-MIB", "dataLogInletCurrentUnbalance"), ("PDU-MIB", "dataLogInletActivePower"), ("PDU-MIB", "dataLogInletApparentPower"), ("PDU-MIB", "dataLogInletActiveEnergy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroupRev = dataLogGroupRev.setStatus('deprecated')
dataLogGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 21)).setObjects(("PDU-MIB", "dataLogCount"), ("PDU-MIB", "dataLogLatestIndex"), ("PDU-MIB", "dataLogTimeStamp"), ("PDU-MIB", "dataLogAvgActivePower"), ("PDU-MIB", "dataLogMaxActivePower"), ("PDU-MIB", "dataLogMinActivePower"), ("PDU-MIB", "dataLogAvgApparentPower"), ("PDU-MIB", "dataLogMaxApparentPower"), ("PDU-MIB", "dataLogMinApparentPower"), ("PDU-MIB", "dataLogAvgOutletCurrent"), ("PDU-MIB", "dataLogMaxOutletCurrent"), ("PDU-MIB", "dataLogMinOutletCurrent"), ("PDU-MIB", "dataLogAvgOutletVoltage"), ("PDU-MIB", "dataLogMaxOutletVoltage"), ("PDU-MIB", "dataLogMinOutletVoltage"), ("PDU-MIB", "dataLogAvgOutletPowerFactor"), ("PDU-MIB", "dataLogMaxOutletPowerFactor"), ("PDU-MIB", "dataLogMinOutletPowerFactor"), ("PDU-MIB", "dataLogAvgOutletWattHours"), ("PDU-MIB", "dataLogMaxOutletWattHours"), ("PDU-MIB", "dataLogMinOutletWattHours"), ("PDU-MIB", "dataLogAvgCircuitBreakerCurrent"), ("PDU-MIB", "dataLogMaxCircuitBreakerCurrent"), ("PDU-MIB", "dataLogMinCircuitBreakerCurrent"), ("PDU-MIB", "dataLogAvgInletCurrentUnbalance"), ("PDU-MIB", "dataLogMaxInletCurrentUnbalance"), ("PDU-MIB", "dataLogMinInletCurrentUnbalance"), ("PDU-MIB", "dataLogAvgInletActivePower"), ("PDU-MIB", "dataLogMaxInletActivePower"), ("PDU-MIB", "dataLogMinInletActivePower"), ("PDU-MIB", "dataLogAvgInletApparentPower"), ("PDU-MIB", "dataLogMaxInletApparentPower"), ("PDU-MIB", "dataLogMinInletApparentPower"), ("PDU-MIB", "dataLogAvgInletActiveEnergy"), ("PDU-MIB", "dataLogMaxInletActiveEnergy"), ("PDU-MIB", "dataLogMinInletActiveEnergy"), ("PDU-MIB", "dataLogAvgInletPoleCurrent"), ("PDU-MIB", "dataLogMaxInletPoleCurrent"), ("PDU-MIB", "dataLogMinInletPoleCurrent"), ("PDU-MIB", "dataLogAvgInletPoleVoltage"), ("PDU-MIB", "dataLogMaxInletPoleVoltage"), ("PDU-MIB", "dataLogMinInletPoleVoltage"), ("PDU-MIB", "dataLogAvgInletPoleActivePower"), ("PDU-MIB", "dataLogMaxInletPoleActivePower"), ("PDU-MIB", "dataLogMinInletPoleActivePower"), ("PDU-MIB", "dataLogAvgInletPoleApparentPower"), ("PDU-MIB", "dataLogMaxInletPoleApparentPower"), ("PDU-MIB", "dataLogMinInletPoleApparentPower"), ("PDU-MIB", "dataLogAvgInletPoleActiveEnergy"), ("PDU-MIB", "dataLogMaxInletPoleActiveEnergy"), ("PDU-MIB", "dataLogMinInletPoleActiveEnergy"), ("PDU-MIB", "dataLogExternalSensorChanged"), ("PDU-MIB", "dataLogExternalSensorState"), ("PDU-MIB", "dataLogAvgExternalSensorValue"), ("PDU-MIB", "dataLogMaxExternalSensorValue"), ("PDU-MIB", "dataLogMinExternalSensorValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dataLogGroupRev2 = dataLogGroupRev2.setStatus('current')
inletPoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 15)).setObjects(("PDU-MIB", "inletPoleCount"), ("PDU-MIB", "inletPoleLabel"), ("PDU-MIB", "inletPoleCurrent"), ("PDU-MIB", "inletPoleVoltage"), ("PDU-MIB", "inletPoleMaxCurrent"), ("PDU-MIB", "inletPoleActivePower"), ("PDU-MIB", "inletPoleApparentPower"), ("PDU-MIB", "inletPolePowerFactor"), ("PDU-MIB", "inletPoleActiveEnergy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inletPoleGroup = inletPoleGroup.setStatus('current')
inletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 16)).setObjects(("PDU-MIB", "inletCount"), ("PDU-MIB", "inletCurrentRating"), ("PDU-MIB", "inletCurrentUnbalanceUpperCritical"), ("PDU-MIB", "inletCurrentUnbalanceUpperWarning"), ("PDU-MIB", "inletCurrentUnbalance"), ("PDU-MIB", "inletActivePower"), ("PDU-MIB", "inletApparentPower"), ("PDU-MIB", "inletPoleCount"), ("PDU-MIB", "inletCurrent"), ("PDU-MIB", "inletVoltage"), ("PDU-MIB", "inletPowerFactor"), ("PDU-MIB", "inletActiveEnergy"), ("PDU-MIB", "inletCurrentUpperWarning"), ("PDU-MIB", "inletCurrentUpperCritical"), ("PDU-MIB", "inletCurrentLowerWarning"), ("PDU-MIB", "inletCurrentLowerCritical"), ("PDU-MIB", "inletVoltageUpperWarning"), ("PDU-MIB", "inletVoltageUpperCritical"), ("PDU-MIB", "inletVoltageLowerWarning"), ("PDU-MIB", "inletVoltageLowerCritical"), ("PDU-MIB", "inletCurrentHysteresis"), ("PDU-MIB", "inletVoltageHysteresis"), ("PDU-MIB", "inletCurrentUnbalanceHysteresis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inletsGroup = inletsGroup.setStatus('current')
externalSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 4, 9, 2, 20)).setObjects(("PDU-MIB", "externalSensorCount"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorSerialNumber"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalSensorXCoordinate"), ("PDU-MIB", "externalSensorYCoordinate"), ("PDU-MIB", "externalSensorZCoordinate"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorUnits"), ("PDU-MIB", "externalSensorDecimalDigits"), ("PDU-MIB", "externalSensorLowerCriticalThreshold"), ("PDU-MIB", "externalSensorLowerWarningThreshold"), ("PDU-MIB", "externalSensorUpperCriticalThreshold"), ("PDU-MIB", "externalSensorUpperWarningThreshold"), ("PDU-MIB", "externalSensorState"), ("PDU-MIB", "externalSensorValue"), ("PDU-MIB", "externalSensorHysteresis"), ("PDU-MIB", "reorderexternalSensorTableEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalSensorsGroup = externalSensorsGroup.setStatus('current')
class MilliAmps(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class MilliVolts(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class Watts(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class VoltAmps(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class DegreesCelsius(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class TenthDegreesCelsius(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class Hertz(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class RelativeHumidity(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class PowerFactorPercentage(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class Percentage(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class SensorTypeEnumeration(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 200, 201, 202, 203, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 500, 501, 502, 503, 504, 505, 506, 550, 551, 552, 600, 601, 602))
    namedValues = NamedValues(("outletCurrent", 0), ("outletMaxCurrent", 1), ("outletVoltage", 2), ("outletActivePower", 3), ("outletApparentPower", 4), ("outletMaxActivePower", 5), ("outletAverageActivePower", 6), ("outletPowerFactor", 7), ("powerBranchVoltage", 200), ("powerBranchFrequency", 201), ("powerBranchTemperature", 202), ("powerBranchCurrent", 203), ("environmentalTemp1", 300), ("environmentalTemp2", 301), ("environmentalTemp3", 302), ("environmentalTemp4", 303), ("environmentalTemp5", 304), ("environmentalTemp6", 305), ("environmentalTemp7", 306), ("environmentalTemp8", 307), ("environmentalHumidity1", 400), ("environmentalHumidity2", 401), ("environmentalHumidity3", 402), ("environmentalHumidity4", 403), ("environmentalHumidity5", 404), ("environmentalHumidity6", 405), ("environmentalHumidity7", 406), ("environmentalHumidity8", 407), ("unitRmsCurrent", 500), ("unitMaxRmsCurrent", 501), ("unitVoltage", 502), ("unitCpuTemp", 503), ("unitActivePower", 504), ("unitApparentPower", 505), ("unitFrequency", 506), ("unitCircuitBreak0State", 550), ("unitCircuitBreak1State", 551), ("unitCircuitBreak2State", 552), ("unitCircuitBreak0Current", 600), ("unitCircuitBreak1Current", 601), ("unitCircuitBreak2Current", 602))

class SensorStateEnumeration(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("unavailable", -1), ("ok", 0), ("belowLowerWarning", 1), ("aboveUpperWarning", 2), ("belowLowerCritical", 3), ("aboveUpperCritical", 4))

class StateOfSensorEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11))

class TypeOfSensorEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("other", 30), ("none", 31))

class WattHours(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class SensorUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18))

class PowerCIMStatusEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class EnabledDisabledEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class SensorClassEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("externalTemperature", 0), ("externalHumidity", 1), ("externalAirFlow", 2), ("externalAirPressure", 3))

class EventTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("aboveUpperCritical", 0), ("aboveUpperNonCritical", 1), ("belowLowerNonCritical", 2), ("belowLowerCritical", 3))

class EventDirectionEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("asserted", 0), ("deasserted", 1), ("both", 2))

firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
mac = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
hardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRev.setStatus('current')
userName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectName.setStatus('current')
objectInstance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectInstance.setStatus('current')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: targetUser.setStatus('current')
groupName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupName.setStatus('current')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
sensorDescr = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorDescr.setStatus('current')
thresholdDescr = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdDescr.setStatus('current')
thresholdSeverity = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdSeverity.setStatus('current')
thresholdEventType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdEventType.setStatus('current')
status = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
slaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveIpAddress.setStatus('current')
inputCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 25), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrentRating.setStatus('current')
ratedVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratedVoltage.setStatus('current')
ratedPower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ratedPower.setStatus('current')
outletSwitching = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSwitching.setStatus('current')
dataLogging = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
dataLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingInterval.setStatus('deprecated')
dataCollectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCollectionInterval.setStatus('current')
outletEnergySupport = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletEnergySupport.setStatus('current')
currentUnbalanceSupport = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceSupport.setStatus('current')
externalSensorsZCoordinateUnits = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
inlineMeter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inlineMeter.setStatus('current')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 36), StateOfSensorEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
sensorIdentificationString = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorIdentificationString.setStatus('current')
lastUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 39), Bits().clone(namedValues=NamedValues(("mainController", 0), ("psoc1", 1), ("psoc2", 2), ("psoc3", 3), ("psoc4", 4), ("psoc5", 5), ("psoc6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeStatus.setStatus('current')
lastUpgradeTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeTimestamp.setStatus('current')
lastUpgradeErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpgradeErrorDescription.setStatus('current')
powerCIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 42), PowerCIMStatusEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerCIMStatus.setStatus('current')
measurementsPerLogEntry = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
psocNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 44), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: psocNumber.setStatus('current')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
configureAlerts = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configureAlerts.setStatus('current')
fipsMode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 47), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fipsMode.setStatus('current')
synchronizeWithNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 48), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
useDHCPProvidedNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 49), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('current')
primaryNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 50), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNTPServerAddressType.setStatus('current')
primaryNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 51), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryNTPServerAddress.setStatus('current')
secondaryNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 52), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryNTPServerAddressType.setStatus('current')
secondaryNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 53), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryNTPServerAddress.setStatus('current')
daylightSavingsTime = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 55), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSavingsTime.setStatus('current')
thresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 56), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdValue.setStatus('current')
sensorValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 57), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorValue.setStatus('current')
ipmiOverLAN = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 1, 58), EnabledDisabledEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipmiOverLAN.setStatus('current')
inletCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setStatus('current')
inletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2), )
if mibBuilder.loadTexts: inletTable.setStatus('current')
inletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1), ).setIndexNames((0, "PDU-MIB", "inletIndex"))
if mibBuilder.loadTexts: inletEntry.setStatus('current')
inletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletIndex.setStatus('current')
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setStatus('current')
inletCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrentRating.setStatus('current')
inletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 7), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrent.setStatus('current')
inletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 8), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletVoltage.setStatus('current')
inletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 9), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletActivePower.setStatus('current')
inletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 10), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletApparentPower.setStatus('current')
inletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 11), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPowerFactor.setStatus('current')
inletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 12), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletActiveEnergy.setStatus('current')
inletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCurrentUnbalance.setStatus('current')
inletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 20), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUpperWarning.setStatus('current')
inletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUpperCritical.setStatus('current')
inletCurrentLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 22), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentLowerWarning.setStatus('current')
inletCurrentLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentLowerCritical.setStatus('current')
inletVoltageUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 24), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageUpperWarning.setStatus('current')
inletVoltageUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 25), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageUpperCritical.setStatus('current')
inletVoltageLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 26), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageLowerWarning.setStatus('current')
inletVoltageLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 27), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageLowerCritical.setStatus('current')
inletCurrentUnbalanceUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 28), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperCritical.setStatus('current')
inletCurrentUnbalanceUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 29), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceUpperWarning.setStatus('current')
inletCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentHysteresis.setStatus('current')
inletVoltageHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletVoltageHysteresis.setStatus('current')
inletCurrentUnbalanceHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 20, 2, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletCurrentUnbalanceHysteresis.setStatus('current')
inletPoleTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2), )
if mibBuilder.loadTexts: inletPoleTable.setStatus('current')
inletPoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1), ).setIndexNames((0, "PDU-MIB", "inletIndex"), (0, "PDU-MIB", "inletPoleIndex"))
if mibBuilder.loadTexts: inletPoleEntry.setStatus('current')
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletPoleIndex.setStatus('current')
inletPoleLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleLabel.setStatus('current')
inletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCurrent.setStatus('current')
inletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 4), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleVoltage.setStatus('current')
inletPoleMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleMaxCurrent.setStatus('current')
inletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleActivePower.setStatus('current')
inletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleApparentPower.setStatus('current')
inletPolePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPolePowerFactor.setStatus('current')
inletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 21, 2, 1, 11), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleActiveEnergy.setStatus('current')
outletCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletIndex.setStatus('current')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
outletOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("error", -1), ("off", 0), ("on", 1), ("cycling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOperationalState.setStatus('current')
outletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrent.setStatus('current')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 6), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
outletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletActivePower.setStatus('current')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
outletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 20), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperWarning.setStatus('current')
outletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperCritical.setStatus('current')
outletCurrentLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 22), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentLowerWarning.setStatus('current')
outletCurrentLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentLowerCritical.setStatus('current')
outletCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentHysteresis.setStatus('current')
outletCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 30), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrentRating.setStatus('current')
outletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 2, 2, 1, 31), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletWattHours.setStatus('current')
unitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 1), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrent.setStatus('deprecated')
unitVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 2), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitVoltage.setStatus('deprecated')
unitActivePower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitActivePower.setStatus('deprecated')
unitApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 4), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitApparentPower.setStatus('deprecated')
unitCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 5), TenthDegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCpuTemp.setStatus('current')
unitVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 60), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerWarning.setStatus('deprecated')
unitVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 61), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerCritical.setStatus('deprecated')
unitVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 62), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperWarning.setStatus('deprecated')
unitVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 63), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperCritical.setStatus('deprecated')
unitCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 70), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitCurrentUpperWarning.setStatus('deprecated')
unitCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 71), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrentUpperCritical.setStatus('deprecated')
unitOrLineVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 90), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageLowerWarning.setStatus('current')
unitOrLineVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 91), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageLowerCritical.setStatus('current')
unitOrLineVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 92), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageUpperWarning.setStatus('current')
unitOrLineVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 93), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageUpperCritical.setStatus('current')
unitOrLineCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 94), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentUpperWarning.setStatus('current')
unitOrLineCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 95), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentUpperCritical.setStatus('current')
neutralCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 96), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutralCurrentUpperWarning.setStatus('current')
neutralCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 97), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutralCurrentUpperCritical.setStatus('current')
unitTempLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 80), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerWarning.setStatus('current')
unitTempLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 81), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerCritical.setStatus('current')
unitTempUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 82), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperWarning.setStatus('current')
unitTempUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 83), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperCritical.setStatus('current')
currentUnbalance = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentUnbalance.setStatus('current')
currentUnbalanceUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 85), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceUpperWarning.setStatus('current')
currentUnbalanceUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 86), Percentage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceUpperCritical.setStatus('current')
unitOrLineCurrentHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 98), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineCurrentHysteresis.setStatus('current')
unitOrLineVoltageHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 99), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOrLineVoltageHysteresis.setStatus('current')
unitTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 100), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempHysteresis.setStatus('current')
currentUnbalanceHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 3, 1, 101), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentUnbalanceHysteresis.setStatus('current')
tempSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorCount.setStatus('deprecated')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('deprecated')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1), ).setIndexNames((0, "PDU-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('deprecated')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: tempSensorIndex.setStatus('deprecated')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('deprecated')
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 3), TenthDegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('deprecated')
tempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 4), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarning.setStatus('deprecated')
tempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 5), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarning.setStatus('deprecated')
tempLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 6), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCritical.setStatus('deprecated')
tempUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 7), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCritical.setStatus('deprecated')
tempXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempXCoordinate.setStatus('deprecated')
tempYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempYCoordinate.setStatus('deprecated')
tempZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempZCoordinate.setStatus('deprecated')
humiditySensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorCount.setStatus('deprecated')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('deprecated')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1), ).setIndexNames((0, "PDU-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('deprecated')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('deprecated')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('deprecated')
humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 3), RelativeHumidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('deprecated')
humidityLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 4), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarning.setStatus('deprecated')
humidityUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 5), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarning.setStatus('deprecated')
humidityLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 6), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCritical.setStatus('deprecated')
humidityUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 7), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCritical.setStatus('deprecated')
humidityXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityXCoordinate.setStatus('deprecated')
humidityYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityYCoordinate.setStatus('deprecated')
humidityZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityZCoordinate.setStatus('deprecated')
externalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
reorderexternalSensorTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reorderexternalSensorTableEntries.setStatus('current')
externalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3), )
if mibBuilder.loadTexts: externalSensorTable.setStatus('current')
externalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1), ).setIndexNames((0, "PDU-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorEntry.setStatus('current')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 2), TypeOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
externalBinarySensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 9), TypeOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalBinarySensorSubtype.setStatus('current')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
externalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 40), StateOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorState.setStatus('current')
externalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 3, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorValue.setStatus('current')
lineCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentCount.setStatus('deprecated')
lineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2), )
if mibBuilder.loadTexts: lineCurrentTable.setStatus('deprecated')
lineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1), ).setIndexNames((0, "PDU-MIB", "lineCurrentIndex"))
if mibBuilder.loadTexts: lineCurrentEntry.setStatus('deprecated')
lineCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: lineCurrentIndex.setStatus('deprecated')
lineCurrentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrentLabel.setStatus('deprecated')
lineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 4, 2, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCurrent.setStatus('deprecated')
circuitBreakerCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCount.setStatus('current')
circuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2), )
if mibBuilder.loadTexts: circuitBreakerTable.setStatus('current')
circuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1), ).setIndexNames((0, "PDU-MIB", "circuitBreakerIndex"))
if mibBuilder.loadTexts: circuitBreakerEntry.setStatus('current')
circuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: circuitBreakerIndex.setStatus('current')
circuitBreakerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerLabel.setStatus('current')
circuitBreakerState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerState.setStatus('current')
circuitBreakerCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCurrentRating.setStatus('current')
circuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitBreakerCurrent.setStatus('current')
circuitBreakerCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 7), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentUpperWarning.setStatus('current')
circuitBreakerCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 9), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentUpperCritical.setStatus('current')
circuitBreakerCurrentHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 5, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitBreakerCurrentHysteresis.setStatus('current')
lineVoltageCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltageCount.setStatus('deprecated')
lineVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2), )
if mibBuilder.loadTexts: lineVoltageTable.setStatus('deprecated')
lineVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1), ).setIndexNames((0, "PDU-MIB", "lineVoltageIndex"))
if mibBuilder.loadTexts: lineVoltageEntry.setStatus('deprecated')
lineVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: lineVoltageIndex.setStatus('deprecated')
lineVoltageLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltageLabel.setStatus('deprecated')
lineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 6, 2, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineVoltage.setStatus('deprecated')
dataLogCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogCount.setStatus('current')
dataLogLatestIndex = MibScalar((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogLatestIndex.setStatus('current')
dataLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3), )
if mibBuilder.loadTexts: dataLogTable.setStatus('current')
dataLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"))
if mibBuilder.loadTexts: dataLogEntry.setStatus('current')
dataLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogIndex.setStatus('current')
dataLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogTimeStamp.setStatus('current')
dataLogActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogActivePower.setStatus('deprecated')
dataLogApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 4), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogApparentPower.setStatus('deprecated')
dataLogAvgActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 5), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgActivePower.setStatus('current')
dataLogMaxActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 6), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxActivePower.setStatus('current')
dataLogMinActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinActivePower.setStatus('current')
dataLogAvgApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgApparentPower.setStatus('current')
dataLogMaxApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 9), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxApparentPower.setStatus('current')
dataLogMinApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 7, 3, 1, 10), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinApparentPower.setStatus('current')
dataLogOutletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1), )
if mibBuilder.loadTexts: dataLogOutletTable.setStatus('current')
dataLogOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogOutletIndex"))
if mibBuilder.loadTexts: dataLogOutletEntry.setStatus('current')
dataLogOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogOutletIndex.setStatus('current')
dataLogOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletCurrent.setStatus('deprecated')
dataLogOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletVoltage.setStatus('deprecated')
dataLogOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 4), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletPowerFactor.setStatus('deprecated')
dataLogOutletOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletOnTime.setStatus('current')
dataLogOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 6), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogOutletWattHours.setStatus('deprecated')
dataLogAvgOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 7), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletCurrent.setStatus('current')
dataLogMaxOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 8), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletCurrent.setStatus('current')
dataLogMinOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 9), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletCurrent.setStatus('current')
dataLogAvgOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 10), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletVoltage.setStatus('current')
dataLogMaxOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 11), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletVoltage.setStatus('current')
dataLogMinOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 12), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletVoltage.setStatus('current')
dataLogAvgOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 13), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletPowerFactor.setStatus('current')
dataLogMaxOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 14), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletPowerFactor.setStatus('current')
dataLogMinOutletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 15), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletPowerFactor.setStatus('current')
dataLogAvgOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 16), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgOutletWattHours.setStatus('current')
dataLogMaxOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 17), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxOutletWattHours.setStatus('current')
dataLogMinOutletWattHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 10, 1, 1, 18), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinOutletWattHours.setStatus('current')
dataLogCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1), )
if mibBuilder.loadTexts: dataLogCircuitBreakerTable.setStatus('current')
dataLogCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogCircuitBreakerIndex"))
if mibBuilder.loadTexts: dataLogCircuitBreakerEntry.setStatus('current')
dataLogCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogCircuitBreakerIndex.setStatus('current')
dataLogCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogCircuitBreakerCurrent.setStatus('deprecated')
dataLogAvgCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 3), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgCircuitBreakerCurrent.setStatus('current')
dataLogMaxCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxCircuitBreakerCurrent.setStatus('current')
dataLogMinCircuitBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 15, 1, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinCircuitBreakerCurrent.setStatus('current')
dataLogInputLineTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1), )
if mibBuilder.loadTexts: dataLogInputLineTable.setStatus('deprecated')
dataLogInputLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInputLineIndex"))
if mibBuilder.loadTexts: dataLogInputLineEntry.setStatus('deprecated')
dataLogInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInputLineIndex.setStatus('deprecated')
dataLogInputLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInputLineCurrent.setStatus('deprecated')
dataLogInputLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 14, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInputLineVoltage.setStatus('deprecated')
dataLogInletTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2), )
if mibBuilder.loadTexts: dataLogInletTable.setStatus('current')
dataLogInletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInletIndex"))
if mibBuilder.loadTexts: dataLogInletEntry.setStatus('current')
dataLogInletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInletIndex.setStatus('current')
dataLogInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletCurrentUnbalance.setStatus('deprecated')
dataLogInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 11), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletActivePower.setStatus('deprecated')
dataLogInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 12), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletApparentPower.setStatus('deprecated')
dataLogInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 13), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletActiveEnergy.setStatus('deprecated')
dataLogAvgInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletCurrentUnbalance.setStatus('current')
dataLogMaxInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletCurrentUnbalance.setStatus('current')
dataLogMinInletCurrentUnbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletCurrentUnbalance.setStatus('current')
dataLogAvgInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 17), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletActivePower.setStatus('current')
dataLogMaxInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 18), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletActivePower.setStatus('current')
dataLogMinInletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 19), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletActivePower.setStatus('current')
dataLogAvgInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 20), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletApparentPower.setStatus('current')
dataLogMaxInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 21), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletApparentPower.setStatus('current')
dataLogMinInletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 22), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletApparentPower.setStatus('current')
dataLogAvgInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 23), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletActiveEnergy.setStatus('current')
dataLogMaxInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 24), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletActiveEnergy.setStatus('current')
dataLogMinInletActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 12, 2, 1, 25), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletActiveEnergy.setStatus('current')
dataLogInletPoleTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1), )
if mibBuilder.loadTexts: dataLogInletPoleTable.setStatus('current')
dataLogInletPoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogInletIndex"), (0, "PDU-MIB", "dataLogInletPoleIndex"))
if mibBuilder.loadTexts: dataLogInletPoleEntry.setStatus('current')
dataLogInletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogInletPoleIndex.setStatus('current')
dataLogInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 2), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletPoleCurrent.setStatus('deprecated')
dataLogInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 3), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogInletPoleVoltage.setStatus('deprecated')
dataLogAvgInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleCurrent.setStatus('current')
dataLogMaxInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleCurrent.setStatus('current')
dataLogMinInletPoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 6), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleCurrent.setStatus('current')
dataLogAvgInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 7), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleVoltage.setStatus('current')
dataLogMaxInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 8), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleVoltage.setStatus('current')
dataLogMinInletPoleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 9), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleVoltage.setStatus('current')
dataLogAvgInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 10), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleActivePower.setStatus('current')
dataLogMaxInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 11), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleActivePower.setStatus('current')
dataLogMinInletPoleActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 12), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleActivePower.setStatus('current')
dataLogAvgInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 13), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleApparentPower.setStatus('current')
dataLogMaxInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 14), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleApparentPower.setStatus('current')
dataLogMinInletPoleApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 15), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleApparentPower.setStatus('current')
dataLogAvgInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 16), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgInletPoleActiveEnergy.setStatus('current')
dataLogMaxInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 17), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxInletPoleActiveEnergy.setStatus('current')
dataLogMinInletPoleActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 13, 1, 1, 18), WattHours()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinInletPoleActiveEnergy.setStatus('current')
dataLogExternalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1), )
if mibBuilder.loadTexts: dataLogExternalSensorTable.setStatus('current')
dataLogExternalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1), ).setIndexNames((0, "PDU-MIB", "dataLogIndex"), (0, "PDU-MIB", "dataLogExternalSensorIndex"))
if mibBuilder.loadTexts: dataLogExternalSensorEntry.setStatus('current')
dataLogExternalSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: dataLogExternalSensorIndex.setStatus('current')
dataLogExternalSensorChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogExternalSensorChanged.setStatus('current')
dataLogExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 3), StateOfSensorEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogExternalSensorState.setStatus('current')
dataLogAvgExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogAvgExternalSensorValue.setStatus('current')
dataLogMaxExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMaxExternalSensorValue.setStatus('current')
dataLogMinExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 4, 1, 16, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataLogMinExternalSensorValue.setStatus('current')
rebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 1)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: rebootStarted.setStatus('current')
rebootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 2)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"))
if mibBuilder.loadTexts: rebootCompleted.setStatus('current')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 3)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 4)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 5)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 8)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 11)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 12)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userModified.setStatus('current')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 13)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
groupAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 14)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupAdded.setStatus('current')
groupModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 15)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupModified.setStatus('current')
groupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 16)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "groupName"))
if mibBuilder.loadTexts: groupDeleted.setStatus('current')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 20)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "imageVersion"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 22)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 23)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "outletLabel"), ("PDU-MIB", "outletOperationalState"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 24)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "targetUser"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 28)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "status"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
firmwareFileDiscarded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 36)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareFileDiscarded.setStatus('current')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 38)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 39)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 41)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
thresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 45)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "thresholdDescr"), ("PDU-MIB", "thresholdSeverity"), ("PDU-MIB", "thresholdEventType"), ("PDU-MIB", "sensorIdentificationString"), ("PDU-MIB", "thresholdValue"), ("PDU-MIB", "sensorValue"))
if mibBuilder.loadTexts: thresholdAlarm.setStatus('current')
outletGroupingConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 50)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "slaveIpAddress"))
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setStatus('current')
circuitBreakerTripped = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 51)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "circuitBreakerLabel"))
if mibBuilder.loadTexts: circuitBreakerTripped.setStatus('current')
circuitBreakerRecovered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 52)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "circuitBreakerLabel"))
if mibBuilder.loadTexts: circuitBreakerRecovered.setStatus('current')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 53)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 54)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
environmentalSensorsConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 55)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: environmentalSensorsConnectivityLost.setStatus('current')
externalOnOffSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 56)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorState"), ("PDU-MIB", "oldSensorState"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: externalOnOffSensorStateChange.setStatus('current')
environmentalSensorsConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 57)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: environmentalSensorsConnectivityRestored.setStatus('current')
voltageMeasurementError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 58)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "psocNumber"))
if mibBuilder.loadTexts: voltageMeasurementError.setStatus('current')
fipsModeEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 59)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: fipsModeEnabled.setStatus('current')
fipsModeDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 60)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: fipsModeDisabled.setStatus('current')
managingenvironmentalSensor = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 61)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: managingenvironmentalSensor.setStatus('current')
unmanagingenvironmentalSensor = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 62)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "ipAddress"), ("PDU-MIB", "sensorDescr"), ("PDU-MIB", "externalSensorNumber"), ("PDU-MIB", "externalSensorType"), ("PDU-MIB", "externalSensorName"), ("PDU-MIB", "externalSensorChannelNumber"), ("PDU-MIB", "externalBinarySensorSubtype"), ("PDU-MIB", "externalSensorSerialNumber"))
if mibBuilder.loadTexts: unmanagingenvironmentalSensor.setStatus('current')
ipmiOverLANEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 63)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: ipmiOverLANEnabled.setStatus('current')
ipmiOverLANDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 4, 0, 64)).setObjects(("PDU-MIB", "objectName"), ("PDU-MIB", "objectInstance"), ("PDU-MIB", "userName"))
if mibBuilder.loadTexts: ipmiOverLANDisabled.setStatus('current')
mibBuilder.exportSymbols("PDU-MIB", dataLogCircuitBreaker=dataLogCircuitBreaker, externalSensorState=externalSensorState, thresholdEventType=thresholdEventType, inletCurrentHysteresis=inletCurrentHysteresis, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, externalSensorTable=externalSensorTable, lastUpgradeTimestamp=lastUpgradeTimestamp, humidityZCoordinate=humidityZCoordinate, humidityXCoordinate=humidityXCoordinate, temperature=temperature, complianceRev1=complianceRev1, inletEntry=inletEntry, lineCurrentCount=lineCurrentCount, dataLogInletApparentPower=dataLogInletApparentPower, dataLogInletPoleCurrent=dataLogInletPoleCurrent, dataLogInputLineVoltage=dataLogInputLineVoltage, circuitBreakerTable=circuitBreakerTable, SensorUnitsEnumeration=SensorUnitsEnumeration, dataLogOutletCurrent=dataLogOutletCurrent, dataLogInputLine=dataLogInputLine, outletLabel=outletLabel, SensorClassEnumeration=SensorClassEnumeration, outletEnergySupport=outletEnergySupport, dataLogLatestIndex=dataLogLatestIndex, unitSensorsGroupRev=unitSensorsGroupRev, groups=groups, dataLogApparentPower=dataLogApparentPower, dataLogAvgApparentPower=dataLogAvgApparentPower, dataLogOutletPowerFactor=dataLogOutletPowerFactor, dataLogMinOutletPowerFactor=dataLogMinOutletPowerFactor, sensorID=sensorID, inletsGroup=inletsGroup, circuitBreakerEntry=circuitBreakerEntry, dataLogMinInletPoleCurrent=dataLogMinInletPoleCurrent, dataLogExternalSensorEntry=dataLogExternalSensorEntry, firmwareValidationFailed=firmwareValidationFailed, userName=userName, dataLogAvgOutletVoltage=dataLogAvgOutletVoltage, tempUpperCritical=tempUpperCritical, outletSwitching=outletSwitching, lineVoltageLabel=lineVoltageLabel, circuitBreakerCurrentUpperWarning=circuitBreakerCurrentUpperWarning, powerControl=powerControl, dataLogInletPoleEntry=dataLogInletPoleEntry, unitReadings=unitReadings, inletPoleCurrent=inletPoleCurrent, primaryNTPServerAddress=primaryNTPServerAddress, lineCurrentLabel=lineCurrentLabel, bulkConfigurationSaved=bulkConfigurationSaved, inletPole=inletPole, dataLogOutletIndex=dataLogOutletIndex, inletCurrentUnbalanceUpperWarning=inletCurrentUnbalanceUpperWarning, dataLogInletActivePower=dataLogInletActivePower, dataLogExternalSensorChanged=dataLogExternalSensorChanged, rebootCompleted=rebootCompleted, dataLogInletPoleIndex=dataLogInletPoleIndex, synchronizeWithNTPServer=synchronizeWithNTPServer, psocNumber=psocNumber, circuitBreakerState=circuitBreakerState, dataLogMinInletActivePower=dataLogMinInletActivePower, unitCurrentUpperCritical=unitCurrentUpperCritical, dataLogMinExternalSensorValue=dataLogMinExternalSensorValue, tempLowerWarning=tempLowerWarning, outletCurrent=outletCurrent, outletPowerFactor=outletPowerFactor, dataLogAvgInletPoleActivePower=dataLogAvgInletPoleActivePower, firmwareVersion=firmwareVersion, outletApparentPower=outletApparentPower, externalSensorType=externalSensorType, dataLogAvgInletActiveEnergy=dataLogAvgInletActiveEnergy, inletVoltageUpperCritical=inletVoltageUpperCritical, dataLogGroupRev=dataLogGroupRev, dataLogMaxInletPoleActivePower=dataLogMaxInletPoleActivePower, dataLog=dataLog, lineCurrentTable=lineCurrentTable, ratedVoltage=ratedVoltage, circuitBreakerCurrentHysteresis=circuitBreakerCurrentHysteresis, lineVoltageGroup=lineVoltageGroup, passwordSettingsChanged=passwordSettingsChanged, dataLogMinApparentPower=dataLogMinApparentPower, outletTable=outletTable, circuitBreakerCount=circuitBreakerCount, dataLogOutletOnTime=dataLogOutletOnTime, groupName=groupName, dataLogInputLineTable=dataLogInputLineTable, neutralCurrentUpperWarning=neutralCurrentUpperWarning, unitCurrentUpperWarning=unitCurrentUpperWarning, objectName=objectName, configureAlerts=configureAlerts, ipAddress=ipAddress, ipmiOverLAN=ipmiOverLAN, dataLogMinInletCurrentUnbalance=dataLogMinInletCurrentUnbalance, dataLogMaxOutletCurrent=dataLogMaxOutletCurrent, complianceRev3=complianceRev3, humiditySensorEntry=humiditySensorEntry, EventTypeEnumeration=EventTypeEnumeration, mac=mac, PowerFactorPercentage=PowerFactorPercentage, inlineMeter=inlineMeter, dataLogExternalSensorIndex=dataLogExternalSensorIndex, dataLogAvgInletActivePower=dataLogAvgInletActivePower, Percentage=Percentage, userPasswordChanged=userPasswordChanged, inletVoltageLowerWarning=inletVoltageLowerWarning, dataLogMaxInletCurrentUnbalance=dataLogMaxInletCurrentUnbalance, dataLogExternalSensor=dataLogExternalSensor, userLogin=userLogin, humidity=humidity, altitude=altitude, unitSensorsGroupRev2=unitSensorsGroupRev2, unitActivePower=unitActivePower, dataLogAvgInletPoleApparentPower=dataLogAvgInletPoleApparentPower, firmwareFileDiscarded=firmwareFileDiscarded, complianceRev5=complianceRev5, circuitBreaker=circuitBreaker, dataLogMinInletPoleVoltage=dataLogMinInletPoleVoltage, dataLogCircuitBreakerTable=dataLogCircuitBreakerTable, unitVoltageUpperCritical=unitVoltageUpperCritical, externalSensorsGroup=externalSensorsGroup, ipmiOverLANEnabled=ipmiOverLANEnabled, circuitBreakerGroup=circuitBreakerGroup, lineVoltages=lineVoltages, dataLogCircuitBreakerCurrent=dataLogCircuitBreakerCurrent, humidityUpperCritical=humidityUpperCritical, unitVoltageUpperWarning=unitVoltageUpperWarning, dataLogMinInletApparentPower=dataLogMinInletApparentPower, inletPoleGroup=inletPoleGroup, externalSensors=externalSensors, externalSensorCount=externalSensorCount, TypeOfSensorEnumeration=TypeOfSensorEnumeration, dataLogMinInletPoleApparentPower=dataLogMinInletPoleApparentPower, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, inletVoltageUpperWarning=inletVoltageUpperWarning, inletVoltage=inletVoltage, neutralCurrentUpperCritical=neutralCurrentUpperCritical, managingenvironmentalSensor=managingenvironmentalSensor, dataLogAvgInletCurrentUnbalance=dataLogAvgInletCurrentUnbalance, unmanagingenvironmentalSensor=unmanagingenvironmentalSensor, inletCurrentUnbalanceHysteresis=inletCurrentUnbalanceHysteresis, lineVoltageCount=lineVoltageCount, dataLogMaxActivePower=dataLogMaxActivePower, inlets=inlets, inletPolePowerFactor=inletPolePowerFactor, dataLogMinOutletWattHours=dataLogMinOutletWattHours, externalSensorName=externalSensorName, complianceRev2=complianceRev2, environmental=environmental, securityViolation=securityViolation, dataLogAvgInletApparentPower=dataLogAvgInletApparentPower, lineCurrent=lineCurrent, Hertz=Hertz, dataLogMaxInletPoleVoltage=dataLogMaxInletPoleVoltage, inletCurrentLowerCritical=inletCurrentLowerCritical, humiditySensorLabel=humiditySensorLabel, externalTemperatureGroup=externalTemperatureGroup, unitOrLineCurrentUpperCritical=unitOrLineCurrentUpperCritical, dataLogMaxInletActivePower=dataLogMaxInletActivePower, inputCurrentRating=inputCurrentRating, status=status, thresholdAlarm=thresholdAlarm, raritan=raritan, oldSensorState=oldSensorState, dataLogMaxInletApparentPower=dataLogMaxInletApparentPower, dataLogMaxOutletVoltage=dataLogMaxOutletVoltage, sensorDescr=sensorDescr, outletCurrentRating=outletCurrentRating, daylightSavingsTime=daylightSavingsTime, humiditySensorCount=humiditySensorCount, SensorStateEnumeration=SensorStateEnumeration, inletPoleActivePower=inletPoleActivePower, compliance=compliance, EnabledDisabledEnumeration=EnabledDisabledEnumeration, MilliVolts=MilliVolts, secondaryNTPServerAddress=secondaryNTPServerAddress, externalSensorZCoordinate=externalSensorZCoordinate, fipsModeDisabled=fipsModeDisabled, outletWattHours=outletWattHours, reorderexternalSensorTableEntries=reorderexternalSensorTableEntries, inletTable=inletTable, outletGroupingConnectivityLost=outletGroupingConnectivityLost, dataLogAvgOutletPowerFactor=dataLogAvgOutletPowerFactor, dataLogInputLineEntry=dataLogInputLineEntry, outletIndex=outletIndex, dataLogGroup=dataLogGroup, externalSensorValue=externalSensorValue, dataLoggingInterval=dataLoggingInterval, unitVoltageLowerWarning=unitVoltageLowerWarning, thresholdValue=thresholdValue, dataLogAvgActivePower=dataLogAvgActivePower, outletActivePower=outletActivePower, circuitBreakerCurrent=circuitBreakerCurrent, imageVersion=imageVersion, sensorValue=sensorValue, dataLogAvgInletPoleCurrent=dataLogAvgInletPoleCurrent, MilliAmps=MilliAmps, dataLogTable=dataLogTable, dataLogInletEntry=dataLogInletEntry, unitCpuTemp=unitCpuTemp, dataLogCount=dataLogCount, outletsGroup=outletsGroup, TenthDegreesCelsius=TenthDegreesCelsius, inletPoleVoltage=inletPoleVoltage, inletActivePower=inletActivePower, dataLogInletPole=dataLogInletPole, secondaryNTPServerAddressType=secondaryNTPServerAddressType, userModified=userModified, slaveIpAddress=slaveIpAddress, tempYCoordinate=tempYCoordinate, info=info, unitApparentPower=unitApparentPower, tempSensorTable=tempSensorTable, deviceUpdateStarted=deviceUpdateStarted, dataLogOutletWattHours=dataLogOutletWattHours, dataLogOutlet=dataLogOutlet, humidityYCoordinate=humidityYCoordinate, targetUser=targetUser, outletCurrentUpperWarning=outletCurrentUpperWarning, unitOrLineVoltageLowerWarning=unitOrLineVoltageLowerWarning, inletPoleMaxCurrent=inletPoleMaxCurrent, externalSensorXCoordinate=externalSensorXCoordinate, humiditySensorIndex=humiditySensorIndex, inletActiveEnergy=inletActiveEnergy, dataLogAvgCircuitBreakerCurrent=dataLogAvgCircuitBreakerCurrent, environmentalSensorsConnectivityRestored=environmentalSensorsConnectivityRestored, externalSensorSerialNumber=externalSensorSerialNumber, environmentalSensorsConnectivityLost=environmentalSensorsConnectivityLost, externalSensorNumber=externalSensorNumber, inletCurrentUnbalance=inletCurrentUnbalance, groupModified=groupModified, Watts=Watts, dataCollectionInterval=dataCollectionInterval, dataLogMaxExternalSensorValue=dataLogMaxExternalSensorValue, externalSensorYCoordinate=externalSensorYCoordinate, inletPoleCount=inletPoleCount, rebootStarted=rebootStarted, currentUnbalance=currentUnbalance, dataLogIndex=dataLogIndex, outletCurrentLowerCritical=outletCurrentLowerCritical, hardwareRev=hardwareRev, externalSensorHysteresis=externalSensorHysteresis, inletVoltageHysteresis=inletVoltageHysteresis, lineVoltageTable=lineVoltageTable, groupDeleted=groupDeleted, dataLogInletPoleTable=dataLogInletPoleTable, circuitBreakerRecovered=circuitBreakerRecovered, WattHours=WattHours, ratedPower=ratedPower, infoGroup=infoGroup, EventDirectionEnumeration=EventDirectionEnumeration, netmask=netmask, circuitBreakerLabel=circuitBreakerLabel, dataLogMinInletActiveEnergy=dataLogMinInletActiveEnergy, fipsModeEnabled=fipsModeEnabled, dataLogEntry=dataLogEntry)
mibBuilder.exportSymbols("PDU-MIB", dataLogMinOutletCurrent=dataLogMinOutletCurrent, dataLogMaxOutletWattHours=dataLogMaxOutletWattHours, unitSensorsGroup=unitSensorsGroup, pdu=pdu, inletIndex=inletIndex, logFileCleared=logFileCleared, unitTempHysteresis=unitTempHysteresis, externalSensorEntry=externalSensorEntry, dataLogAvgExternalSensorValue=dataLogAvgExternalSensorValue, unitOrLineCurrentUpperWarning=unitOrLineCurrentUpperWarning, dataLogMinInletPoleActiveEnergy=dataLogMinInletPoleActiveEnergy, bulkConfigurationCopied=bulkConfigurationCopied, lineVoltageIndex=lineVoltageIndex, currentUnbalanceSupport=currentUnbalanceSupport, dataLogTimeStamp=dataLogTimeStamp, dataLogMinOutletVoltage=dataLogMinOutletVoltage, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, powerCIMStatus=powerCIMStatus, compliances=compliances, RelativeHumidity=RelativeHumidity, lineCurrentGroup=lineCurrentGroup, dataLogAvgOutletWattHours=dataLogAvgOutletWattHours, dataLogMaxApparentPower=dataLogMaxApparentPower, inletPoleApparentPower=inletPoleApparentPower, lineVoltageEntry=lineVoltageEntry, dataLogInletActiveEnergy=dataLogInletActiveEnergy, userAdded=userAdded, inletPoleEntry=inletPoleEntry, unitVoltage=unitVoltage, lastUpgradeStatus=lastUpgradeStatus, dataLogMaxCircuitBreakerCurrent=dataLogMaxCircuitBreakerCurrent, dataLogCircuitBreakerIndex=dataLogCircuitBreakerIndex, dataLogMinActivePower=dataLogMinActivePower, outletOperationalState=outletOperationalState, inletPowerFactor=inletPowerFactor, dataLogAvgInletPoleVoltage=dataLogAvgInletPoleVoltage, lineCurrentIndex=lineCurrentIndex, dataLogMinInletPoleActivePower=dataLogMinInletPoleActivePower, outletCount=outletCount, externalSensorChannelNumber=externalSensorChannelNumber, dataLogOutletEntry=dataLogOutletEntry, measurementsPerLogEntry=measurementsPerLogEntry, lastUpgradeErrorDescription=lastUpgradeErrorDescription, complianceRev4=complianceRev4, userAuthenticationFailure=userAuthenticationFailure, circuitBreakerIndex=circuitBreakerIndex, unit=unit, dataLogInletTable=dataLogInletTable, fipsMode=fipsMode, externalBinarySensorSubtype=externalBinarySensorSubtype, dataLogInletIndex=dataLogInletIndex, serialNumber=serialNumber, lineVoltage=lineVoltage, outletCurrentHysteresis=outletCurrentHysteresis, dataLogInputLineIndex=dataLogInputLineIndex, objectInstance=objectInstance, board=board, dataLogExternalSensorState=dataLogExternalSensorState, dataLogMinCircuitBreakerCurrent=dataLogMinCircuitBreakerCurrent, unitOrLineCurrentHysteresis=unitOrLineCurrentHysteresis, externalOnOffSensorStateChange=externalOnOffSensorStateChange, primaryNTPServerAddressType=primaryNTPServerAddressType, inletCount=inletCount, externalSensorUnits=externalSensorUnits, dataLogInletPoleVoltage=dataLogInletPoleVoltage, tempSensorLabel=tempSensorLabel, humiditySensorTable=humiditySensorTable, inletCurrentUnbalanceUpperCritical=inletCurrentUnbalanceUpperCritical, StateOfSensorEnumeration=StateOfSensorEnumeration, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, inletCurrentLowerWarning=inletCurrentLowerWarning, voltageMeasurementError=voltageMeasurementError, tempXCoordinate=tempXCoordinate, thresholdSeverity=thresholdSeverity, humidityLowerWarning=humidityLowerWarning, groupAdded=groupAdded, SensorTypeEnumeration=SensorTypeEnumeration, unitTempLowerWarning=unitTempLowerWarning, inletPoleActiveEnergy=inletPoleActiveEnergy, outletCurrentLowerWarning=outletCurrentLowerWarning, dataLogOutletTable=dataLogOutletTable, tempLowerCritical=tempLowerCritical, lineCurrentEntry=lineCurrentEntry, humidityUpperWarning=humidityUpperWarning, dataLogging=dataLogging, dataLogCircuitBreakerEntry=dataLogCircuitBreakerEntry, outletEntry=outletEntry, unitOrLineVoltageUpperWarning=unitOrLineVoltageUpperWarning, dataLogMaxInletPoleCurrent=dataLogMaxInletPoleCurrent, conformance=conformance, unitVoltageLowerCritical=unitVoltageLowerCritical, inletApparentPower=inletApparentPower, tempUpperWarning=tempUpperWarning, dataLogExternalSensorTable=dataLogExternalSensorTable, userDeleted=userDeleted, dataLogMaxInletPoleApparentPower=dataLogMaxInletPoleApparentPower, inletPoleIndex=inletPoleIndex, inletCurrentUpperWarning=inletCurrentUpperWarning, humidityLowerCritical=humidityLowerCritical, DegreesCelsius=DegreesCelsius, dataLogAvgOutletCurrent=dataLogAvgOutletCurrent, tempSensorEntry=tempSensorEntry, outletVoltage=outletVoltage, circuitBreakerCurrentUpperCritical=circuitBreakerCurrentUpperCritical, externalHumidityGroup=externalHumidityGroup, userBlocked=userBlocked, circuitBreakerTripped=circuitBreakerTripped, inletVoltageLowerCritical=inletVoltageLowerCritical, circuitBreakerCurrentRating=circuitBreakerCurrentRating, gateway=gateway, PowerCIMStatusEnumeration=PowerCIMStatusEnumeration, inletCurrentRating=inletCurrentRating, tempZCoordinate=tempZCoordinate, VoltAmps=VoltAmps, currentUnbalanceUpperCritical=currentUnbalanceUpperCritical, dataLogActivePower=dataLogActivePower, unitCurrent=unitCurrent, inletPoleTable=inletPoleTable, outletMaxCurrent=outletMaxCurrent, dataLogInletCurrentUnbalance=dataLogInletCurrentUnbalance, unitTempUpperWarning=unitTempUpperWarning, userSessionTimeout=userSessionTimeout, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, outletCurrentUpperCritical=outletCurrentUpperCritical, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, outlets=outlets, tempSensorCount=tempSensorCount, dataLogMaxOutletPowerFactor=dataLogMaxOutletPowerFactor, dataLogOutletVoltage=dataLogOutletVoltage, inletPoleLabel=inletPoleLabel, userLogout=userLogout, unitOrLineVoltageHysteresis=unitOrLineVoltageHysteresis, dataLogAvgInletPoleActiveEnergy=dataLogAvgInletPoleActiveEnergy, infoGroupRev2=infoGroupRev2, unitOrLineVoltageUpperCritical=unitOrLineVoltageUpperCritical, traps=traps, unitTempLowerCritical=unitTempLowerCritical, dataLogMaxInletPoleActiveEnergy=dataLogMaxInletPoleActiveEnergy, trapsGroup=trapsGroup, unitTempUpperCritical=unitTempUpperCritical, PYSNMP_MODULE_ID=raritan, ipmiOverLANDisabled=ipmiOverLANDisabled, unitOrLineVoltageLowerCritical=unitOrLineVoltageLowerCritical, dataLogInlet=dataLogInlet, inletCurrent=inletCurrent, currentUnbalanceUpperWarning=currentUnbalanceUpperWarning, dataLogGroupRev2=dataLogGroupRev2, thresholdDescr=thresholdDescr, externalSensorDecimalDigits=externalSensorDecimalDigits, dataLogMaxInletActiveEnergy=dataLogMaxInletActiveEnergy, tempSensorIndex=tempSensorIndex, currentUnbalanceHysteresis=currentUnbalanceHysteresis, sensorIdentificationString=sensorIdentificationString, inletCurrentUpperCritical=inletCurrentUpperCritical, dataLogInputLineCurrent=dataLogInputLineCurrent, lineCurrents=lineCurrents)
