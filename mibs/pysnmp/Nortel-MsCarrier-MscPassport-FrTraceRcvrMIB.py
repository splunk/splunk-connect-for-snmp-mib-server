#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:20:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
RowPointer, RowStatus, DisplayString, Unsigned32, StorageType, Integer32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowPointer", "RowStatus", "DisplayString", "Unsigned32", "StorageType", "Integer32")
HexString, Hex, EnterpriseDateAndTime, NonReplicated, AsciiString, DigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "HexString", "Hex", "EnterpriseDateAndTime", "NonReplicated", "AsciiString", "DigitString")
mscTraceIndex, mscTraceRcvr, mscTraceRcvrIndex, mscTraceSession, mscTraceSessionIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex", "mscTraceRcvr", "mscTraceRcvrIndex", "mscTraceSession", "mscTraceSessionIndex")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, Unsigned32, iso, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, ModuleIdentity, Bits, IpAddress, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "ModuleIdentity", "Bits", "IpAddress", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
frTraceRcvrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139))
mscTraceRcvrFr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3))
mscTraceRcvrFrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1), )
if mibBuilder.loadTexts: mscTraceRcvrFrRowStatusTable.setStatus('mandatory')
mscTraceRcvrFrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrRowStatusEntry.setStatus('mandatory')
mscTraceRcvrFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrRowStatus.setStatus('mandatory')
mscTraceRcvrFrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrComponentName.setStatus('mandatory')
mscTraceRcvrFrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrStorageType.setStatus('mandatory')
mscTraceRcvrFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrFrIndex.setStatus('mandatory')
mscTraceRcvrFrDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2))
mscTraceRcvrFrDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaRowStatusTable.setStatus('mandatory')
mscTraceRcvrFrDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaRowStatusEntry.setStatus('mandatory')
mscTraceRcvrFrDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaRowStatus.setStatus('mandatory')
mscTraceRcvrFrDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaComponentName.setStatus('mandatory')
mscTraceRcvrFrDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaStorageType.setStatus('mandatory')
mscTraceRcvrFrDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrFrDnaIndex.setStatus('mandatory')
mscTraceRcvrFrDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 10), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaAddressTable.setStatus('mandatory')
mscTraceRcvrFrDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaAddressEntry.setStatus('mandatory')
mscTraceRcvrFrDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaNumberingPlanIndicator.setStatus('mandatory')
mscTraceRcvrFrDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaDataNetworkAddress.setStatus('mandatory')
mscTraceRcvrFrDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutgoingOptionsTable.setStatus('mandatory')
mscTraceRcvrFrDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutgoingOptionsEntry.setStatus('mandatory')
mscTraceRcvrFrDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutCalls.setStatus('mandatory')
mscTraceRcvrFrDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutDefaultPriority.setStatus('mandatory')
mscTraceRcvrFrDnaOutIntl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutIntl.setStatus('mandatory')
mscTraceRcvrFrDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('high')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutDefaultPathReliability.setStatus('mandatory')
mscTraceRcvrFrDnaOutPathReliabilityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutPathReliabilityOverRide.setStatus('mandatory')
mscTraceRcvrFrDnaOutPathReliabilitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutPathReliabilitySignal.setStatus('mandatory')
mscTraceRcvrFrDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaOutAccess.setStatus('mandatory')
mscTraceRcvrFrDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 12), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaIncomingOptionsTable.setStatus('mandatory')
mscTraceRcvrFrDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaIncomingOptionsEntry.setStatus('mandatory')
mscTraceRcvrFrDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaIncCalls.setStatus('mandatory')
mscTraceRcvrFrDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCallOptionsTable.setStatus('mandatory')
mscTraceRcvrFrDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCallOptionsEntry.setStatus('mandatory')
mscTraceRcvrFrDnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0100")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaPacketSizes.setStatus('mandatory')
mscTraceRcvrFrDnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
mscTraceRcvrFrDnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
mscTraceRcvrFrDnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugFormat.setStatus('mandatory')
mscTraceRcvrFrDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2))
mscTraceRcvrFrDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugRowStatusTable.setStatus('mandatory')
mscTraceRcvrFrDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaCugIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugRowStatusEntry.setStatus('mandatory')
mscTraceRcvrFrDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugRowStatus.setStatus('mandatory')
mscTraceRcvrFrDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugComponentName.setStatus('mandatory')
mscTraceRcvrFrDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugStorageType.setStatus('mandatory')
mscTraceRcvrFrDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugIndex.setStatus('mandatory')
mscTraceRcvrFrDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10), )
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugCugOptionsTable.setStatus('mandatory')
mscTraceRcvrFrDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDnaCugIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugCugOptionsEntry.setStatus('mandatory')
mscTraceRcvrFrDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugType.setStatus('mandatory')
mscTraceRcvrFrDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugDnic.setStatus('mandatory')
mscTraceRcvrFrDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugInterlockCode.setStatus('mandatory')
mscTraceRcvrFrDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugPreferential.setStatus('mandatory')
mscTraceRcvrFrDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugOutCalls.setStatus('mandatory')
mscTraceRcvrFrDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugIncCalls.setStatus('mandatory')
mscTraceRcvrFrDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDnaCugPrivileged.setStatus('mandatory')
mscTraceRcvrFrDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3))
mscTraceRcvrFrDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1), )
if mibBuilder.loadTexts: mscTraceRcvrFrDcRowStatusTable.setStatus('mandatory')
mscTraceRcvrFrDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDcIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDcRowStatusEntry.setStatus('mandatory')
mscTraceRcvrFrDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDcRowStatus.setStatus('mandatory')
mscTraceRcvrFrDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDcComponentName.setStatus('mandatory')
mscTraceRcvrFrDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDcStorageType.setStatus('mandatory')
mscTraceRcvrFrDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrFrDcIndex.setStatus('mandatory')
mscTraceRcvrFrDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10), )
if mibBuilder.loadTexts: mscTraceRcvrFrDcOptionsTable.setStatus('mandatory')
mscTraceRcvrFrDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceRcvrFrDcIndex"))
if mibBuilder.loadTexts: mscTraceRcvrFrDcOptionsEntry.setStatus('mandatory')
mscTraceRcvrFrDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDcRemoteNpi.setStatus('mandatory')
mscTraceRcvrFrDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDcRemoteDna.setStatus('mandatory')
mscTraceRcvrFrDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("switched", 0), ("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrFrDcType.setStatus('mandatory')
mscTraceRcvrFrDcUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 3, 3, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrFrDcUserData.setStatus('mandatory')
mscTraceSessionFr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3))
mscTraceSessionFrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1), )
if mibBuilder.loadTexts: mscTraceSessionFrRowStatusTable.setStatus('mandatory')
mscTraceSessionFrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"))
if mibBuilder.loadTexts: mscTraceSessionFrRowStatusEntry.setStatus('mandatory')
mscTraceSessionFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrRowStatus.setStatus('mandatory')
mscTraceSessionFrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrComponentName.setStatus('mandatory')
mscTraceSessionFrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrStorageType.setStatus('mandatory')
mscTraceSessionFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceSessionFrIndex.setStatus('mandatory')
mscTraceSessionFrVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2))
mscTraceSessionFrVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1), )
if mibBuilder.loadTexts: mscTraceSessionFrVcRowStatusTable.setStatus('mandatory')
mscTraceSessionFrVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcIndex"))
if mibBuilder.loadTexts: mscTraceSessionFrVcRowStatusEntry.setStatus('mandatory')
mscTraceSessionFrVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcRowStatus.setStatus('mandatory')
mscTraceSessionFrVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcComponentName.setStatus('mandatory')
mscTraceSessionFrVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcStorageType.setStatus('mandatory')
mscTraceSessionFrVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceSessionFrVcIndex.setStatus('mandatory')
mscTraceSessionFrVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10), )
if mibBuilder.loadTexts: mscTraceSessionFrVcCadTable.setStatus('mandatory')
mscTraceSessionFrVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcIndex"))
if mibBuilder.loadTexts: mscTraceSessionFrVcCadEntry.setStatus('mandatory')
mscTraceSessionFrVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2), ("frf10spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcType.setStatus('mandatory')
mscTraceSessionFrVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcState.setStatus('mandatory')
mscTraceSessionFrVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPreviousState.setStatus('mandatory')
mscTraceSessionFrVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcDiagnosticCode.setStatus('mandatory')
mscTraceSessionFrVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPreviousDiagnosticCode.setStatus('mandatory')
mscTraceSessionFrVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCalledNpi.setStatus('mandatory')
mscTraceSessionFrVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCalledDna.setStatus('mandatory')
mscTraceSessionFrVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCalledLcn.setStatus('mandatory')
mscTraceSessionFrVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCallingNpi.setStatus('mandatory')
mscTraceSessionFrVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCallingDna.setStatus('mandatory')
mscTraceSessionFrVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCallingLcn.setStatus('mandatory')
mscTraceSessionFrVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcAccountingEnabled.setStatus('mandatory')
mscTraceSessionFrVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcFastSelectCall.setStatus('mandatory')
mscTraceSessionFrVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPathReliability.setStatus('mandatory')
mscTraceSessionFrVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcAccountingEnd.setStatus('mandatory')
mscTraceSessionFrVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPriority.setStatus('mandatory')
mscTraceSessionFrVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcSegmentSize.setStatus('mandatory')
mscTraceSessionFrVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcMaxSubnetPktSize.setStatus('mandatory')
mscTraceSessionFrVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcRcosToNetwork.setStatus('mandatory')
mscTraceSessionFrVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcRcosFromNetwork.setStatus('mandatory')
mscTraceSessionFrVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcEmissionPriorityToNetwork.setStatus('mandatory')
mscTraceSessionFrVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcEmissionPriorityFromNetwork.setStatus('mandatory')
mscTraceSessionFrVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcDataPath.setStatus('mandatory')
mscTraceSessionFrVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11), )
if mibBuilder.loadTexts: mscTraceSessionFrVcIntdTable.setStatus('mandatory')
mscTraceSessionFrVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcIndex"))
if mibBuilder.loadTexts: mscTraceSessionFrVcIntdEntry.setStatus('mandatory')
mscTraceSessionFrVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCallReferenceNumber.setStatus('obsolete')
mscTraceSessionFrVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcElapsedTimeTillNow.setStatus('mandatory')
mscTraceSessionFrVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcSegmentsRx.setStatus('mandatory')
mscTraceSessionFrVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcSegmentsSent.setStatus('mandatory')
mscTraceSessionFrVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcStartTime.setStatus('mandatory')
mscTraceSessionFrVcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCallReferenceNumberDecimal.setStatus('mandatory')
mscTraceSessionFrVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12), )
if mibBuilder.loadTexts: mscTraceSessionFrVcFrdTable.setStatus('mandatory')
mscTraceSessionFrVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcIndex"))
if mibBuilder.loadTexts: mscTraceSessionFrVcFrdEntry.setStatus('mandatory')
mscTraceSessionFrVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcFrmCongestedToSubnet.setStatus('mandatory')
mscTraceSessionFrVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCannotForwardToSubnet.setStatus('mandatory')
mscTraceSessionFrVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcNotDataXferToSubnet.setStatus('mandatory')
mscTraceSessionFrVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscTraceSessionFrVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcCombErrorsFromSubnet.setStatus('mandatory')
mscTraceSessionFrVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcDuplicatesFromSubnet.setStatus('mandatory')
mscTraceSessionFrVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcNotDataXferFromSubnet.setStatus('mandatory')
mscTraceSessionFrVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcFrmLossTimeouts.setStatus('mandatory')
mscTraceSessionFrVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcOoSeqByteCntExceeded.setStatus('mandatory')
mscTraceSessionFrVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPeakOoSeqPktCount.setStatus('mandatory')
mscTraceSessionFrVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscTraceSessionFrVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcSendSequenceNumber.setStatus('mandatory')
mscTraceSessionFrVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPktRetryTimeouts.setStatus('mandatory')
mscTraceSessionFrVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPeakRetryQueueSize.setStatus('mandatory')
mscTraceSessionFrVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcSubnetRecoveries.setStatus('mandatory')
mscTraceSessionFrVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcOoSeqPktCntExceeded.setStatus('mandatory')
mscTraceSessionFrVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcPeakOoSeqByteCount.setStatus('mandatory')
mscTraceSessionFrVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 417), )
if mibBuilder.loadTexts: mscTraceSessionFrVcDmepTable.setStatus('mandatory')
mscTraceSessionFrVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 417, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcIndex"), (0, "Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", "mscTraceSessionFrVcDmepValue"))
if mibBuilder.loadTexts: mscTraceSessionFrVcDmepEntry.setStatus('mandatory')
mscTraceSessionFrVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 3, 2, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionFrVcDmepValue.setStatus('mandatory')
frTraceRcvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 1))
frTraceRcvrGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 1, 1))
frTraceRcvrGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 1, 1, 3))
frTraceRcvrGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 1, 1, 3, 2))
frTraceRcvrCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 3))
frTraceRcvrCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 3, 1))
frTraceRcvrCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 3, 1, 3))
frTraceRcvrCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 139, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-FrTraceRcvrMIB", mscTraceSessionFrVcSendSequenceNumber=mscTraceSessionFrVcSendSequenceNumber, mscTraceRcvrFrDnaOutgoingOptionsTable=mscTraceRcvrFrDnaOutgoingOptionsTable, mscTraceSessionFrStorageType=mscTraceSessionFrStorageType, mscTraceRcvrFrDnaCallOptionsEntry=mscTraceRcvrFrDnaCallOptionsEntry, mscTraceSessionFrVcOoSeqByteCntExceeded=mscTraceSessionFrVcOoSeqByteCntExceeded, frTraceRcvrMIB=frTraceRcvrMIB, mscTraceSessionFrVcPriority=mscTraceSessionFrVcPriority, mscTraceSessionFrVcDmepEntry=mscTraceSessionFrVcDmepEntry, mscTraceSessionFrVcCallingNpi=mscTraceSessionFrVcCallingNpi, mscTraceRcvrFrDnaStorageType=mscTraceRcvrFrDnaStorageType, mscTraceRcvrFrDnaCugRowStatusEntry=mscTraceRcvrFrDnaCugRowStatusEntry, mscTraceSessionFrVcPeakOoSeqPktCount=mscTraceSessionFrVcPeakOoSeqPktCount, mscTraceSessionFrVcCannotForwardToSubnet=mscTraceSessionFrVcCannotForwardToSubnet, mscTraceSessionFrVcCombErrorsFromSubnet=mscTraceSessionFrVcCombErrorsFromSubnet, mscTraceRcvrFrDnaOutCalls=mscTraceRcvrFrDnaOutCalls, mscTraceSessionFrVcDmepValue=mscTraceSessionFrVcDmepValue, mscTraceRcvrFrDnaCugCugOptionsEntry=mscTraceRcvrFrDnaCugCugOptionsEntry, mscTraceSessionFrVcSegmentsSent=mscTraceSessionFrVcSegmentsSent, mscTraceRcvrFrDnaOutPathReliabilitySignal=mscTraceRcvrFrDnaOutPathReliabilitySignal, frTraceRcvrCapabilitiesCA02A=frTraceRcvrCapabilitiesCA02A, mscTraceSessionFrVcCalledDna=mscTraceSessionFrVcCalledDna, mscTraceRcvrFrDnaIncomingOptionsTable=mscTraceRcvrFrDnaIncomingOptionsTable, mscTraceSessionFrVcNotDataXferToSubnet=mscTraceSessionFrVcNotDataXferToSubnet, mscTraceRcvrFrDnaCugIndex=mscTraceRcvrFrDnaCugIndex, mscTraceSessionFrRowStatusEntry=mscTraceSessionFrRowStatusEntry, mscTraceSessionFrVcSegmentSize=mscTraceSessionFrVcSegmentSize, frTraceRcvrGroup=frTraceRcvrGroup, mscTraceRcvrFrDcOptionsEntry=mscTraceRcvrFrDcOptionsEntry, mscTraceRcvrFrDnaCugPrivileged=mscTraceRcvrFrDnaCugPrivileged, mscTraceSessionFr=mscTraceSessionFr, mscTraceSessionFrVcPktRetryTimeouts=mscTraceSessionFrVcPktRetryTimeouts, mscTraceRcvrFrComponentName=mscTraceRcvrFrComponentName, mscTraceRcvrFrDc=mscTraceRcvrFrDc, mscTraceRcvrFrDnaDefaultSendToNetworkPacketSize=mscTraceRcvrFrDnaDefaultSendToNetworkPacketSize, mscTraceSessionFrVcStartTime=mscTraceSessionFrVcStartTime, frTraceRcvrGroupCA=frTraceRcvrGroupCA, mscTraceRcvrFrDnaOutPathReliabilityOverRide=mscTraceRcvrFrDnaOutPathReliabilityOverRide, mscTraceRcvrFrDnaCugInterlockCode=mscTraceRcvrFrDnaCugInterlockCode, mscTraceRcvrFrRowStatus=mscTraceRcvrFrRowStatus, mscTraceSessionFrVcRowStatusTable=mscTraceSessionFrVcRowStatusTable, mscTraceSessionFrRowStatusTable=mscTraceSessionFrRowStatusTable, mscTraceSessionFrVcPathReliability=mscTraceSessionFrVcPathReliability, mscTraceSessionFrVcAccountingEnd=mscTraceSessionFrVcAccountingEnd, mscTraceSessionFrVcPeakOoSeqFrmForwarded=mscTraceSessionFrVcPeakOoSeqFrmForwarded, frTraceRcvrCapabilitiesCA=frTraceRcvrCapabilitiesCA, mscTraceSessionFrVcDuplicatesFromSubnet=mscTraceSessionFrVcDuplicatesFromSubnet, mscTraceSessionFrVcPreviousState=mscTraceSessionFrVcPreviousState, mscTraceRcvrFrDnaIncCalls=mscTraceRcvrFrDnaIncCalls, mscTraceRcvrFr=mscTraceRcvrFr, mscTraceRcvrFrDcUserData=mscTraceRcvrFrDcUserData, mscTraceRcvrFrRowStatusTable=mscTraceRcvrFrRowStatusTable, mscTraceSessionFrVcRowStatus=mscTraceSessionFrVcRowStatus, mscTraceRcvrFrDnaOutAccess=mscTraceRcvrFrDnaOutAccess, mscTraceRcvrFrDnaCugRowStatus=mscTraceRcvrFrDnaCugRowStatus, mscTraceSessionFrVcCadTable=mscTraceSessionFrVcCadTable, mscTraceRcvrFrDnaCugFormat=mscTraceRcvrFrDnaCugFormat, mscTraceRcvrFrDnaIndex=mscTraceRcvrFrDnaIndex, mscTraceSessionFrVcCalledNpi=mscTraceSessionFrVcCalledNpi, mscTraceRcvrFrDnaCugStorageType=mscTraceRcvrFrDnaCugStorageType, mscTraceSessionFrVcState=mscTraceSessionFrVcState, mscTraceRcvrFrDcRemoteDna=mscTraceRcvrFrDcRemoteDna, frTraceRcvrGroupCA02A=frTraceRcvrGroupCA02A, mscTraceRcvrFrDnaCugComponentName=mscTraceRcvrFrDnaCugComponentName, mscTraceRcvrFrDnaCugPreferential=mscTraceRcvrFrDnaCugPreferential, mscTraceRcvrFrDnaCugRowStatusTable=mscTraceRcvrFrDnaCugRowStatusTable, mscTraceRcvrFrDnaCugType=mscTraceRcvrFrDnaCugType, mscTraceRcvrFrDnaRowStatusTable=mscTraceRcvrFrDnaRowStatusTable, mscTraceRcvrFrDnaAddressEntry=mscTraceRcvrFrDnaAddressEntry, mscTraceSessionFrVcRcosFromNetwork=mscTraceSessionFrVcRcosFromNetwork, mscTraceRcvrFrDna=mscTraceRcvrFrDna, mscTraceSessionFrVcSegmentsRx=mscTraceSessionFrVcSegmentsRx, mscTraceRcvrFrDnaComponentName=mscTraceRcvrFrDnaComponentName, mscTraceSessionFrVcIntdTable=mscTraceSessionFrVcIntdTable, mscTraceRcvrFrDnaNumberingPlanIndicator=mscTraceRcvrFrDnaNumberingPlanIndicator, mscTraceSessionFrVcFrmCongestedToSubnet=mscTraceSessionFrVcFrmCongestedToSubnet, mscTraceSessionFrVcComponentName=mscTraceSessionFrVcComponentName, mscTraceRcvrFrDcIndex=mscTraceRcvrFrDcIndex, mscTraceRcvrFrStorageType=mscTraceRcvrFrStorageType, mscTraceSessionFrVcEmissionPriorityToNetwork=mscTraceSessionFrVcEmissionPriorityToNetwork, mscTraceSessionFrIndex=mscTraceSessionFrIndex, mscTraceRcvrFrDnaRowStatusEntry=mscTraceRcvrFrDnaRowStatusEntry, mscTraceSessionFrVcPeakOoSeqByteCount=mscTraceSessionFrVcPeakOoSeqByteCount, mscTraceSessionFrVcEmissionPriorityFromNetwork=mscTraceSessionFrVcEmissionPriorityFromNetwork, mscTraceRcvrFrDnaOutgoingOptionsEntry=mscTraceRcvrFrDnaOutgoingOptionsEntry, mscTraceRcvrFrDnaOutIntl=mscTraceRcvrFrDnaOutIntl, mscTraceRcvrFrDnaDataNetworkAddress=mscTraceRcvrFrDnaDataNetworkAddress, mscTraceSessionFrVcIntdEntry=mscTraceSessionFrVcIntdEntry, mscTraceSessionFrRowStatus=mscTraceSessionFrRowStatus, mscTraceRcvrFrDcRemoteNpi=mscTraceRcvrFrDcRemoteNpi, frTraceRcvrCapabilities=frTraceRcvrCapabilities, mscTraceRcvrFrDnaRowStatus=mscTraceRcvrFrDnaRowStatus, mscTraceSessionFrVcNotDataXferFromSubnet=mscTraceSessionFrVcNotDataXferFromSubnet, frTraceRcvrGroupCA02=frTraceRcvrGroupCA02, mscTraceSessionFrVcCadEntry=mscTraceSessionFrVcCadEntry, frTraceRcvrCapabilitiesCA02=frTraceRcvrCapabilitiesCA02, mscTraceSessionFrVcStorageType=mscTraceSessionFrVcStorageType, mscTraceRcvrFrDnaCallOptionsTable=mscTraceRcvrFrDnaCallOptionsTable, mscTraceSessionFrVcPreviousDiagnosticCode=mscTraceSessionFrVcPreviousDiagnosticCode, mscTraceSessionFrVc=mscTraceSessionFrVc, mscTraceSessionFrVcAccountingEnabled=mscTraceSessionFrVcAccountingEnabled, mscTraceSessionFrVcDmepTable=mscTraceSessionFrVcDmepTable, mscTraceRcvrFrDcRowStatus=mscTraceRcvrFrDcRowStatus, mscTraceRcvrFrDcRowStatusEntry=mscTraceRcvrFrDcRowStatusEntry, mscTraceSessionFrVcType=mscTraceSessionFrVcType, mscTraceSessionFrVcSubnetRecoveries=mscTraceSessionFrVcSubnetRecoveries, mscTraceSessionFrVcRcosToNetwork=mscTraceSessionFrVcRcosToNetwork, mscTraceRcvrFrDnaOutDefaultPriority=mscTraceRcvrFrDnaOutDefaultPriority, mscTraceSessionFrVcCallingDna=mscTraceSessionFrVcCallingDna, mscTraceRcvrFrDnaAddressTable=mscTraceRcvrFrDnaAddressTable, mscTraceRcvrFrDcRowStatusTable=mscTraceRcvrFrDcRowStatusTable, mscTraceSessionFrVcIndex=mscTraceSessionFrVcIndex, mscTraceRcvrFrDnaOutDefaultPathReliability=mscTraceRcvrFrDnaOutDefaultPathReliability, mscTraceSessionFrVcOoSeqPktCntExceeded=mscTraceSessionFrVcOoSeqPktCntExceeded, mscTraceRcvrFrDcStorageType=mscTraceRcvrFrDcStorageType, mscTraceSessionFrVcFrdTable=mscTraceSessionFrVcFrdTable, mscTraceRcvrFrDcOptionsTable=mscTraceRcvrFrDcOptionsTable, mscTraceRcvrFrDnaCugOutCalls=mscTraceRcvrFrDnaCugOutCalls, mscTraceSessionFrComponentName=mscTraceSessionFrComponentName, mscTraceSessionFrVcFrdEntry=mscTraceSessionFrVcFrdEntry, mscTraceRcvrFrDnaDefaultRecvFrmNetworkPacketSize=mscTraceRcvrFrDnaDefaultRecvFrmNetworkPacketSize, mscTraceRcvrFrDcType=mscTraceRcvrFrDcType, mscTraceSessionFrVcElapsedTimeTillNow=mscTraceSessionFrVcElapsedTimeTillNow, mscTraceRcvrFrDcComponentName=mscTraceRcvrFrDcComponentName, mscTraceRcvrFrDnaCugIncCalls=mscTraceRcvrFrDnaCugIncCalls, mscTraceSessionFrVcDataPath=mscTraceSessionFrVcDataPath, mscTraceSessionFrVcFrmLossTimeouts=mscTraceSessionFrVcFrmLossTimeouts, mscTraceSessionFrVcCallReferenceNumber=mscTraceSessionFrVcCallReferenceNumber, mscTraceSessionFrVcFastSelectCall=mscTraceSessionFrVcFastSelectCall, mscTraceSessionFrVcPeakRetryQueueSize=mscTraceSessionFrVcPeakRetryQueueSize, mscTraceRcvrFrDnaIncomingOptionsEntry=mscTraceRcvrFrDnaIncomingOptionsEntry, mscTraceRcvrFrDnaCugDnic=mscTraceRcvrFrDnaCugDnic, mscTraceSessionFrVcCalledLcn=mscTraceSessionFrVcCalledLcn, mscTraceSessionFrVcOutOfRangeFrmFromSubnet=mscTraceSessionFrVcOutOfRangeFrmFromSubnet, mscTraceRcvrFrDnaPacketSizes=mscTraceRcvrFrDnaPacketSizes, mscTraceSessionFrVcCallReferenceNumberDecimal=mscTraceSessionFrVcCallReferenceNumberDecimal, mscTraceRcvrFrIndex=mscTraceRcvrFrIndex, mscTraceSessionFrVcRowStatusEntry=mscTraceSessionFrVcRowStatusEntry, mscTraceSessionFrVcDiagnosticCode=mscTraceSessionFrVcDiagnosticCode, mscTraceRcvrFrRowStatusEntry=mscTraceRcvrFrRowStatusEntry, mscTraceSessionFrVcMaxSubnetPktSize=mscTraceSessionFrVcMaxSubnetPktSize, mscTraceSessionFrVcCallingLcn=mscTraceSessionFrVcCallingLcn, mscTraceRcvrFrDnaCugCugOptionsTable=mscTraceRcvrFrDnaCugCugOptionsTable, mscTraceRcvrFrDnaCug=mscTraceRcvrFrDnaCug)
