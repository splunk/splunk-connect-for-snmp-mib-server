#
# PySNMP MIB module Wellfleet-NML-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-NML-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, mgmt, TimeTicks, Bits, Unsigned32, enterprises, MibIdentifier, Opaque, IpAddress, Counter64, Integer32, NotificationType, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "mgmt", "TimeTicks", "Bits", "Unsigned32", "enterprises", "MibIdentifier", "Opaque", "IpAddress", "Counter64", "Integer32", "NotificationType", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "mib-2")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfBridgeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBridgeGroup")
wfBrNativeModeLan = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5))
wfNmlBaseTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2), )
if mibBuilder.loadTexts: wfNmlBaseTable.setStatus('mandatory')
wfNmlBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1), ).setIndexNames((0, "Wellfleet-NML-MIB", "wfNmlCircuit"))
if mibBuilder.loadTexts: wfNmlBaseEntry.setStatus('mandatory')
wfNmlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlDelete.setStatus('mandatory')
wfNmlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlDisable.setStatus('mandatory')
wfNmlCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlCircuit.setStatus('mandatory')
wfNmlAddSecurityHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("check", 2), ("drop", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlAddSecurityHeader.setStatus('mandatory')
wfNmlSAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("individual", 1), ("group", 2))).clone('individual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlSAIDType.setStatus('mandatory')
wfNmlSAIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlSAIDValue.setStatus('mandatory')
wfNmlCUGValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlCUGValue.setStatus('mandatory')
wfNmlCUGDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlCUGDrop.setStatus('mandatory')
wfNmlCUGPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlCUGPacketsDropped.setStatus('mandatory')
wfNmlTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3), )
if mibBuilder.loadTexts: wfNmlTrafficFilterTable.setStatus('mandatory')
wfNmlTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1), ).setIndexNames((0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterCircuit"), (0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterRuleNumber"), (0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterFragment"))
if mibBuilder.loadTexts: wfNmlTrafficFilterEntry.setStatus('mandatory')
wfNmlTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterCreate.setStatus('mandatory')
wfNmlTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterEnable.setStatus('mandatory')
wfNmlTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterStatus.setStatus('mandatory')
wfNmlTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterCounter.setStatus('mandatory')
wfNmlTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterDefinition.setStatus('mandatory')
wfNmlTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterReserved.setStatus('mandatory')
wfNmlTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterCircuit.setStatus('mandatory')
wfNmlTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterRuleNumber.setStatus('mandatory')
wfNmlTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterFragment.setStatus('mandatory')
wfNmlTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterName.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-NML-MIB", wfNmlCUGPacketsDropped=wfNmlCUGPacketsDropped, wfNmlTrafficFilterDefinition=wfNmlTrafficFilterDefinition, wfNmlTrafficFilterReserved=wfNmlTrafficFilterReserved, wfNmlSAIDValue=wfNmlSAIDValue, wfNmlDisable=wfNmlDisable, wfNmlCircuit=wfNmlCircuit, wfNmlTrafficFilterEnable=wfNmlTrafficFilterEnable, wfNmlBaseTable=wfNmlBaseTable, wfNmlTrafficFilterName=wfNmlTrafficFilterName, wfNmlTrafficFilterFragment=wfNmlTrafficFilterFragment, wfNmlTrafficFilterTable=wfNmlTrafficFilterTable, wfNmlAddSecurityHeader=wfNmlAddSecurityHeader, wfNmlSAIDType=wfNmlSAIDType, wfNmlCUGValue=wfNmlCUGValue, wfNmlTrafficFilterStatus=wfNmlTrafficFilterStatus, wfNmlTrafficFilterRuleNumber=wfNmlTrafficFilterRuleNumber, wfNmlTrafficFilterCircuit=wfNmlTrafficFilterCircuit, wfNmlTrafficFilterCreate=wfNmlTrafficFilterCreate, wfNmlBaseEntry=wfNmlBaseEntry, wfNmlDelete=wfNmlDelete, wfNmlTrafficFilterEntry=wfNmlTrafficFilterEntry, wfNmlCUGDrop=wfNmlCUGDrop, wfNmlTrafficFilterCounter=wfNmlTrafficFilterCounter, wfBrNativeModeLan=wfBrNativeModeLan)
