#
# PySNMP MIB module JUNIPER-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-VLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
jnxExVlan, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVlan")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, Gauge32, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Counter64, Bits, IpAddress, NotificationType, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Gauge32", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Counter64", "Bits", "IpAddress", "NotificationType", "Counter32", "TimeTicks")
DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
jnxVlanMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1))
jnxVlanMIBObjects.setRevisions(('2009-01-09 00:00', '2009-01-20 00:00', '2010-09-07 00:00',))
if mibBuilder.loadTexts: jnxVlanMIBObjects.setLastUpdated('200901090000Z')
if mibBuilder.loadTexts: jnxVlanMIBObjects.setOrganization('Juniper Networks, Inc.')
jnxVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1), )
if mibBuilder.loadTexts: jnxVlanTable.setStatus('obsolete')
jnxVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1), ).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanEntry.setStatus('obsolete')
jnxVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: jnxVlanName.setStatus('obsolete')
jnxVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanID.setStatus('obsolete')
jnxVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanType.setStatus('obsolete')
jnxVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortGroupInstance.setStatus('obsolete')
jnxVlanMacListInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacListInstance.setStatus('obsolete')
jnxVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2), )
if mibBuilder.loadTexts: jnxVlanInterfaceTable.setStatus('obsolete')
jnxVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1), ).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanInterfaceEntry.setStatus('obsolete')
jnxVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceIpAddress.setStatus('obsolete')
jnxVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceProtocol.setStatus('obsolete')
jnxVlanInterfaceSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceSubNetMask.setStatus('obsolete')
jnxVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceBroadcastAddress.setStatus('obsolete')
jnxVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceDescription.setStatus('obsolete')
jnxVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceAdminStatus.setStatus('obsolete')
jnxVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceOperStatus.setStatus('obsolete')
jnxVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanSnmpIfIndex.setStatus('obsolete')
jnxVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3), )
if mibBuilder.loadTexts: jnxVlanPortGroupTable.setStatus('obsolete')
jnxVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxVlanPort"))
if mibBuilder.loadTexts: jnxVlanPortGroupEntry.setStatus('obsolete')
jnxVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxVlanPortGroupIndex.setStatus('obsolete')
jnxVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: jnxVlanPort.setStatus('obsolete')
jnxVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortStatus.setStatus('obsolete')
jnxVlanMacListTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4), )
if mibBuilder.loadTexts: jnxVlanMacListTable.setStatus('current')
jnxVlanMacListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanMacListIndex"))
if mibBuilder.loadTexts: jnxVlanMacListEntry.setStatus('current')
jnxVlanMacListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxVlanMacListIndex.setStatus('current')
jnxVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacAddress.setStatus('current')
jnxExVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5), )
if mibBuilder.loadTexts: jnxExVlanTable.setStatus('current')
jnxExVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanEntry.setStatus('current')
jnxExVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: jnxExVlanID.setStatus('current')
jnxExVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanName.setStatus('current')
jnxExVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanType.setStatus('current')
jnxExVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortGroupInstance.setStatus('current')
jnxExVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanTag.setStatus('current')
jnxExVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6), )
if mibBuilder.loadTexts: jnxExVlanInterfaceTable.setStatus('current')
jnxExVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanInterfaceEntry.setStatus('current')
jnxExVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceProtocol.setStatus('current')
jnxExVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceIpAddress.setStatus('current')
jnxExVlanInterfacePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfacePrefixLength.setStatus('current')
jnxExVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceBroadcastAddress.setStatus('current')
jnxExVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceDescription.setStatus('current')
jnxExVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceAdminStatus.setStatus('current')
jnxExVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceOperStatus.setStatus('current')
jnxExVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanSnmpIfIndex.setStatus('current')
jnxExVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7), )
if mibBuilder.loadTexts: jnxExVlanPortGroupTable.setStatus('current')
jnxExVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxExVlanPort"))
if mibBuilder.loadTexts: jnxExVlanPortGroupEntry.setStatus('current')
jnxExVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxExVlanPortGroupIndex.setStatus('current')
jnxExVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxExVlanPort.setStatus('current')
jnxExVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortStatus.setStatus('current')
jnxExVlanPortTagness = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortTagness.setStatus('current')
jnxExVlanPortAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortAccessMode.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-VLAN-MIB", jnxVlanEntry=jnxVlanEntry, jnxVlanMIBObjects=jnxVlanMIBObjects, jnxVlanMacListInstance=jnxVlanMacListInstance, jnxVlanInterfaceAdminStatus=jnxVlanInterfaceAdminStatus, jnxExVlanInterfaceEntry=jnxExVlanInterfaceEntry, jnxVlanID=jnxVlanID, jnxVlanPortGroupTable=jnxVlanPortGroupTable, jnxVlanSnmpIfIndex=jnxVlanSnmpIfIndex, jnxExVlanName=jnxExVlanName, jnxExVlanInterfacePrefixLength=jnxExVlanInterfacePrefixLength, jnxVlanInterfaceProtocol=jnxVlanInterfaceProtocol, jnxExVlanPortGroupEntry=jnxExVlanPortGroupEntry, jnxVlanPortGroupIndex=jnxVlanPortGroupIndex, jnxVlanMacListIndex=jnxVlanMacListIndex, jnxVlanName=jnxVlanName, jnxExVlanInterfaceDescription=jnxExVlanInterfaceDescription, jnxExVlanTag=jnxExVlanTag, jnxExVlanInterfaceAdminStatus=jnxExVlanInterfaceAdminStatus, jnxExVlanInterfaceBroadcastAddress=jnxExVlanInterfaceBroadcastAddress, jnxExVlanPortAccessMode=jnxExVlanPortAccessMode, jnxExVlanInterfaceTable=jnxExVlanInterfaceTable, jnxExVlanInterfaceProtocol=jnxExVlanInterfaceProtocol, jnxExVlanID=jnxExVlanID, jnxVlanInterfaceEntry=jnxVlanInterfaceEntry, jnxExVlanType=jnxExVlanType, jnxExVlanTable=jnxExVlanTable, jnxVlanMacAddress=jnxVlanMacAddress, jnxExVlanPort=jnxExVlanPort, jnxVlanInterfaceSubNetMask=jnxVlanInterfaceSubNetMask, jnxExVlanInterfaceIpAddress=jnxExVlanInterfaceIpAddress, jnxVlanMacListTable=jnxVlanMacListTable, jnxVlanInterfaceBroadcastAddress=jnxVlanInterfaceBroadcastAddress, jnxVlanType=jnxVlanType, jnxExVlanSnmpIfIndex=jnxExVlanSnmpIfIndex, jnxVlanInterfaceIpAddress=jnxVlanInterfaceIpAddress, jnxVlanMacListEntry=jnxVlanMacListEntry, jnxExVlanEntry=jnxExVlanEntry, jnxVlanInterfaceDescription=jnxVlanInterfaceDescription, jnxVlanPort=jnxVlanPort, jnxVlanPortGroupEntry=jnxVlanPortGroupEntry, jnxVlanPortStatus=jnxVlanPortStatus, jnxExVlanInterfaceOperStatus=jnxExVlanInterfaceOperStatus, PYSNMP_MODULE_ID=jnxVlanMIBObjects, jnxExVlanPortGroupIndex=jnxExVlanPortGroupIndex, jnxExVlanPortTagness=jnxExVlanPortTagness, jnxVlanInterfaceTable=jnxVlanInterfaceTable, jnxExVlanPortGroupTable=jnxExVlanPortGroupTable, jnxExVlanPortGroupInstance=jnxExVlanPortGroupInstance, jnxExVlanPortStatus=jnxExVlanPortStatus, jnxVlanPortGroupInstance=jnxVlanPortGroupInstance, jnxVlanTable=jnxVlanTable, jnxVlanInterfaceOperStatus=jnxVlanInterfaceOperStatus)
