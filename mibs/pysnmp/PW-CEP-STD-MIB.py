#
# PySNMP MIB module PW-CEP-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PW-CEP-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
HCPerfValidIntervals, HCPerfTimeElapsed, HCPerfIntervalCount, HCPerfCurrentCount = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfValidIntervals", "HCPerfTimeElapsed", "HCPerfIntervalCount", "HCPerfCurrentCount")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
PwCfgIndexOrzero, = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwCfgIndexOrzero")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, mib_2, iso, Counter32, Integer32, Bits, IpAddress, TimeTicks, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "mib-2", "iso", "Counter32", "Integer32", "Bits", "IpAddress", "TimeTicks", "MibIdentifier", "Unsigned32", "ModuleIdentity")
RowStatus, StorageType, TimeStamp, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue")
pwCepStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 200))
pwCepStdMIB.setRevisions(('2011-05-16 00:00',))
if mibBuilder.loadTexts: pwCepStdMIB.setLastUpdated('201105160000Z')
if mibBuilder.loadTexts: pwCepStdMIB.setOrganization('Pseudowire Emulation Edge-to-Edge (PWE3) Working Group')
class PwCepSonetEbm(TextualConvention, Unsigned32):
    status = 'current'

class PwCepSdhVc4Ebm(TextualConvention, Unsigned32):
    status = 'current'

class PwCepSonetVtgMap(TextualConvention, Unsigned32):
    status = 'current'

class PwCepFracAsyncMap(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("ds3", 2), ("e3", 3))

pwCepObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 1))
pwCepConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 2))
pwCepTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 1), )
if mibBuilder.loadTexts: pwCepTable.setStatus('current')
pwCepEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 1, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwCepEntry.setStatus('current')
pwCepType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spe", 1), ("vt", 2), ("fracSpe", 3))).clone('spe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwCepType.setStatus('current')
pwCepSonetIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwCepSonetIfIndex.setStatus('current')
pwCepSonetConfigErrorOrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("timeslotInUse", 1), ("timeslotMisuse", 2), ("peerDbaIncompatible", 3), ("peerEbmIncompatible", 4), ("peerRtpIncompatible", 5), ("peerAsyncIncompatible", 6), ("peerDbaAsymmetric", 7), ("peerEbmAsymmetric", 8), ("peerRtpAsymmetric", 9), ("peerAsyncAsymmetric", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepSonetConfigErrorOrStatus.setStatus('current')
pwCepCfgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 4), PwCfgIndexOrzero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwCepCfgIndex.setStatus('current')
pwCepTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 5), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepTimeElapsed.setStatus('current')
pwCepValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 6), HCPerfValidIntervals()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepValidIntervals.setStatus('current')
pwCepIndications = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("missingPkt", 0), ("ooRngDropped", 1), ("jtrBfrUnder", 2), ("pktMalformed", 3), ("lops", 4), ("cepRdi", 5), ("cepAis", 6), ("badHdrStack", 7), ("cepNeFailure", 8), ("cepFeFailure", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwCepIndications.setStatus('current')
pwCepLastEsTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepLastEsTimeStamp.setStatus('current')
pwCepPeerCepOption = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPeerCepOption.setStatus('current')
pwCepCfgIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 200, 1, 2), PwCfgIndexOrzero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepCfgIndexNext.setStatus('current')
pwCepCfgTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 3), )
if mibBuilder.loadTexts: pwCepCfgTable.setStatus('current')
pwCepCfgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 3, 1), ).setIndexNames((0, "PW-CEP-STD-MIB", "pwCepCfgTableIndex"))
if mibBuilder.loadTexts: pwCepCfgEntry.setStatus('current')
pwCepCfgTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pwCepCfgTableIndex.setStatus('current')
pwCepSonetPayloadLength = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepSonetPayloadLength.setStatus('current')
pwCepCfgMinPktLength = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgMinPktLength.setStatus('current')
pwCepCfgPktReorder = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepCfgPktReorder.setStatus('current')
pwCepCfgEnableDBA = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 5), Bits().clone(namedValues=NamedValues(("ais", 0), ("unequipped", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgEnableDBA.setStatus('current')
pwCepCfgRtpHdrSuppress = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgRtpHdrSuppress.setStatus('current')
pwCepCfgJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 7), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgJtrBfrDepth.setStatus('current')
pwCepCfgConsecPktsInsync = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 8), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgConsecPktsInsync.setStatus('current')
pwCepCfgConsecMissingOutSync = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 9), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgConsecMissingOutSync.setStatus('current')
pwCepCfgPktErrorPlayOutValue = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgPktErrorPlayOutValue.setStatus('current')
pwCepCfgMissingPktsToSes = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 11), Unsigned32().clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgMissingPktsToSes.setStatus('current')
pwCepCfgSesToUas = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 12), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgSesToUas.setStatus('current')
pwCepCfgSecsToExitUas = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 13), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgSecsToExitUas.setStatus('current')
pwCepCfgName = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgName.setStatus('current')
pwCepCfgRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgRowStatus.setStatus('current')
pwCepCfgStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 16), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepCfgStorageType.setStatus('current')
pwCepFracTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 4), )
if mibBuilder.loadTexts: pwCepFracTable.setStatus('current')
pwCepFracEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 4, 1), ).setIndexNames((0, "PW-CEP-STD-MIB", "pwCepFracIndex"))
if mibBuilder.loadTexts: pwCepFracEntry.setStatus('current')
pwCepFracIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pwCepFracIndex.setStatus('current')
pwCepFracMode = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("dynamic", 2), ("static", 3), ("staticWithEbm", 4), ("staticAsync", 5))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracMode.setStatus('current')
pwCepFracConfigError = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("vtgMapEbmConflict", 1), ("vtgMapAsyncConflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepFracConfigError.setStatus('current')
pwCepFracAsync = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 4), PwCepFracAsyncMap().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracAsync.setStatus('current')
pwCepFracVtgMap = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 5), PwCepSonetVtgMap()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracVtgMap.setStatus('current')
pwCepFracEbm = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 6), PwCepSonetEbm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracEbm.setStatus('current')
pwCepFracPeerEbm = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 7), PwCepSonetEbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepFracPeerEbm.setStatus('current')
pwCepFracSdhVc4Mode = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("dynamic", 2), ("static", 3), ("staticWithEbm", 4))).clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Mode.setStatus('current')
pwCepFracSdhVc4Tu3Map1 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 9), PwCepFracAsyncMap().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tu3Map1.setStatus('current')
pwCepFracSdhVc4Tu3Map2 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 10), PwCepFracAsyncMap().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tu3Map2.setStatus('current')
pwCepFracSdhVc4Tu3Map3 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 11), PwCepFracAsyncMap().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tu3Map3.setStatus('current')
pwCepFracSdhVc4Tug2Map1 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 12), PwCepSonetVtgMap()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tug2Map1.setStatus('current')
pwCepFracSdhVc4Tug2Map2 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 13), PwCepSonetVtgMap()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tug2Map2.setStatus('current')
pwCepFracSdhVc4Tug2Map3 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 14), PwCepSonetVtgMap()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Tug2Map3.setStatus('current')
pwCepFracSdhVc4Ebm1 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 15), PwCepSdhVc4Ebm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Ebm1.setStatus('current')
pwCepFracSdhVc4Ebm2 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 16), PwCepSdhVc4Ebm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Ebm2.setStatus('current')
pwCepFracSdhVc4Ebm3 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 17), PwCepSdhVc4Ebm()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracSdhVc4Ebm3.setStatus('current')
pwCepFracSdhVc4PeerEbm1 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 18), PwCepSdhVc4Ebm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepFracSdhVc4PeerEbm1.setStatus('current')
pwCepFracSdhVc4PeerEbm2 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 19), PwCepSdhVc4Ebm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepFracSdhVc4PeerEbm2.setStatus('current')
pwCepFracSdhVc4PeerEbm3 = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 20), PwCepSdhVc4Ebm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepFracSdhVc4PeerEbm3.setStatus('current')
pwCepFracRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracRowStatus.setStatus('current')
pwCepFracStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 22), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepFracStorageType.setStatus('current')
pwCepPerfCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 5), )
if mibBuilder.loadTexts: pwCepPerfCurrentTable.setStatus('current')
pwCepPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 5, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwCepPerfCurrentEntry.setStatus('current')
pwCepPerfCurrentDbaInPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 1), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentDbaInPacketsHC.setStatus('current')
pwCepPerfCurrentDbaOutPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 2), HCPerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentDbaOutPacketsHC.setStatus('current')
pwCepPerfCurrentInNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentInNegPtrAdjust.setStatus('current')
pwCepPerfCurrentInPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentInPosPtrAdjust.setStatus('current')
pwCepPerfCurrentInPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 5), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentInPtrAdjustSecs.setStatus('current')
pwCepPerfCurrentOutNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentOutNegPtrAdjust.setStatus('current')
pwCepPerfCurrentOutPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentOutPosPtrAdjust.setStatus('current')
pwCepPerfCurrentOutPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 8), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentOutPtrAdjustSecs.setStatus('current')
pwCepPerfCurrentAbsPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentAbsPtrAdjust.setStatus('current')
pwCepPerfCurrentMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentMissingPkts.setStatus('current')
pwCepPerfCurrentPktsOoseq = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentPktsOoseq.setStatus('current')
pwCepPerfCurrentPktsOoRngDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentPktsOoRngDropped.setStatus('current')
pwCepPerfCurrentJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentJtrBfrUnderruns.setStatus('current')
pwCepPerfCurrentPktsMalformed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentPktsMalformed.setStatus('current')
pwCepPerfCurrentSummaryErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentSummaryErrors.setStatus('current')
pwCepPerfCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 16), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentESs.setStatus('current')
pwCepPerfCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 17), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentSESs.setStatus('current')
pwCepPerfCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 18), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentUASs.setStatus('current')
pwCepPerfCurrentFC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 5, 1, 19), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfCurrentFC.setStatus('current')
pwCepPerfIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 6), )
if mibBuilder.loadTexts: pwCepPerfIntervalTable.setStatus('current')
pwCepPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 6, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"), (0, "PW-CEP-STD-MIB", "pwCepPerfIntervalNumber"))
if mibBuilder.loadTexts: pwCepPerfIntervalEntry.setStatus('current')
pwCepPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pwCepPerfIntervalNumber.setStatus('current')
pwCepPerfIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalValidData.setStatus('current')
pwCepPerfIntervalReset = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwCepPerfIntervalReset.setStatus('current')
pwCepPerfIntervalTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 4), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalTimeElapsed.setStatus('current')
pwCepPerfIntervalDbaInPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 5), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalDbaInPacketsHC.setStatus('current')
pwCepPerfIntervalDbaOutPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 6), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalDbaOutPacketsHC.setStatus('current')
pwCepPerfIntervalInNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalInNegPtrAdjust.setStatus('current')
pwCepPerfIntervalInPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalInPosPtrAdjust.setStatus('current')
pwCepPerfIntervalInPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 9), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalInPtrAdjustSecs.setStatus('current')
pwCepPerfIntervalOutNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalOutNegPtrAdjust.setStatus('current')
pwCepPerfIntervalOutPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalOutPosPtrAdjust.setStatus('current')
pwCepPerfIntervalOutPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 12), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalOutPtrAdjustSecs.setStatus('current')
pwCepPerfIntervalAbsPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalAbsPtrAdjust.setStatus('current')
pwCepPerfIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalMissingPkts.setStatus('current')
pwCepPerfIntervalPktsOoseq = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalPktsOoseq.setStatus('current')
pwCepPerfIntervalPktsOoRngDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalPktsOoRngDropped.setStatus('current')
pwCepPerfIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalJtrBfrUnderruns.setStatus('current')
pwCepPerfIntervalPktsMalformed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalPktsMalformed.setStatus('current')
pwCepPerfIntervalSummaryErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalSummaryErrors.setStatus('current')
pwCepPerfIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 20), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalESs.setStatus('current')
pwCepPerfIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 21), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalSESs.setStatus('current')
pwCepPerfIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 22), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalUASs.setStatus('current')
pwCepPerfIntervalFC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 6, 1, 23), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerfIntervalFC.setStatus('current')
pwCepPerf1DayIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 7), )
if mibBuilder.loadTexts: pwCepPerf1DayIntervalTable.setStatus('current')
pwCepPerf1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 7, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"), (0, "PW-CEP-STD-MIB", "pwCepPerf1DayIntervalNumber"))
if mibBuilder.loadTexts: pwCepPerf1DayIntervalEntry.setStatus('current')
pwCepPerf1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: pwCepPerf1DayIntervalNumber.setStatus('current')
pwCepPerf1DayIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalValidData.setStatus('current')
pwCepPerf1DayIntervalMoniSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 3), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalMoniSecs.setStatus('current')
pwCepPerf1DayIntervalDbaInPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalDbaInPacketsHC.setStatus('current')
pwCepPerf1DayIntervalDbaOutPacketsHC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalDbaOutPacketsHC.setStatus('current')
pwCepPerf1DayIntervalInNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalInNegPtrAdjust.setStatus('current')
pwCepPerf1DayIntervalInPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalInPosPtrAdjust.setStatus('current')
pwCepPerf1DayIntervalInPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalInPtrAdjustSecs.setStatus('current')
pwCepPerf1DayIntervalOutNegPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalOutNegPtrAdjust.setStatus('current')
pwCepPerf1DayIntervalOutPosPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalOutPosPtrAdjust.setStatus('current')
pwCepPerf1DayIntervalOutPtrAdjustSecs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 11), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalOutPtrAdjustSecs.setStatus('current')
pwCepPerf1DayIntervalAbsPtrAdjust = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalAbsPtrAdjust.setStatus('current')
pwCepPerf1DayIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalMissingPkts.setStatus('current')
pwCepPerf1DayIntervalPktsOoseq = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalPktsOoseq.setStatus('current')
pwCepPerf1DayIntervalPktsOoRngDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalPktsOoRngDropped.setStatus('current')
pwCepPerf1DayIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalJtrBfrUnderruns.setStatus('current')
pwCepPerf1DayIntervalPktsMalformed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalPktsMalformed.setStatus('current')
pwCepPerf1DayIntervalSummaryErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalSummaryErrors.setStatus('current')
pwCepPerf1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 19), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalESs.setStatus('current')
pwCepPerf1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 20), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalSESs.setStatus('current')
pwCepPerf1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 21), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalUASs.setStatus('current')
pwCepPerf1DayIntervalFC = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCepPerf1DayIntervalFC.setStatus('current')
pwCepGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 2, 1))
pwCepCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 2, 2))
pwCepModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 2, 2, 1)).setObjects(("PW-CEP-STD-MIB", "pwCepGroup"), ("PW-CEP-STD-MIB", "pwCepCfgGroup"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentGroup"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalGroup"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalGroup"), ("PW-CEP-STD-MIB", "pwCepFractionalGroup"), ("PW-CEP-STD-MIB", "pwCepFractionalSts1Vc3Group"), ("PW-CEP-STD-MIB", "pwCepFractionalVc4Group"), ("PW-CEP-STD-MIB", "pwCepSignalingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepModuleFullCompliance = pwCepModuleFullCompliance.setStatus('current')
pwCepModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 2, 2, 2)).setObjects(("PW-CEP-STD-MIB", "pwCepGroup"), ("PW-CEP-STD-MIB", "pwCepCfgGroup"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentGroup"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalGroup"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalGroup"), ("PW-CEP-STD-MIB", "pwCepFractionalGroup"), ("PW-CEP-STD-MIB", "pwCepFractionalSts1Vc3Group"), ("PW-CEP-STD-MIB", "pwCepFractionalVc4Group"), ("PW-CEP-STD-MIB", "pwCepSignalingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepModuleReadOnlyCompliance = pwCepModuleReadOnlyCompliance.setStatus('current')
pwCepGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 1)).setObjects(("PW-CEP-STD-MIB", "pwCepType"), ("PW-CEP-STD-MIB", "pwCepSonetIfIndex"), ("PW-CEP-STD-MIB", "pwCepSonetConfigErrorOrStatus"), ("PW-CEP-STD-MIB", "pwCepCfgIndex"), ("PW-CEP-STD-MIB", "pwCepTimeElapsed"), ("PW-CEP-STD-MIB", "pwCepValidIntervals"), ("PW-CEP-STD-MIB", "pwCepIndications"), ("PW-CEP-STD-MIB", "pwCepLastEsTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepGroup = pwCepGroup.setStatus('current')
pwCepSignalingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 2)).setObjects(("PW-CEP-STD-MIB", "pwCepPeerCepOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepSignalingGroup = pwCepSignalingGroup.setStatus('current')
pwCepCfgGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 3)).setObjects(("PW-CEP-STD-MIB", "pwCepCfgIndexNext"), ("PW-CEP-STD-MIB", "pwCepSonetPayloadLength"), ("PW-CEP-STD-MIB", "pwCepCfgMinPktLength"), ("PW-CEP-STD-MIB", "pwCepCfgPktReorder"), ("PW-CEP-STD-MIB", "pwCepCfgEnableDBA"), ("PW-CEP-STD-MIB", "pwCepCfgRtpHdrSuppress"), ("PW-CEP-STD-MIB", "pwCepCfgJtrBfrDepth"), ("PW-CEP-STD-MIB", "pwCepCfgConsecPktsInsync"), ("PW-CEP-STD-MIB", "pwCepCfgConsecMissingOutSync"), ("PW-CEP-STD-MIB", "pwCepCfgPktErrorPlayOutValue"), ("PW-CEP-STD-MIB", "pwCepCfgMissingPktsToSes"), ("PW-CEP-STD-MIB", "pwCepCfgSesToUas"), ("PW-CEP-STD-MIB", "pwCepCfgSecsToExitUas"), ("PW-CEP-STD-MIB", "pwCepCfgName"), ("PW-CEP-STD-MIB", "pwCepCfgRowStatus"), ("PW-CEP-STD-MIB", "pwCepCfgStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepCfgGroup = pwCepCfgGroup.setStatus('current')
pwCepPerfCurrentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 4)).setObjects(("PW-CEP-STD-MIB", "pwCepPerfCurrentDbaInPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentDbaOutPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentInNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentInPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentInPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentOutNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentOutPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentOutPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentAbsPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentMissingPkts"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentPktsOoseq"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentPktsOoRngDropped"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentJtrBfrUnderruns"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentPktsMalformed"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentSummaryErrors"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentESs"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentSESs"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentUASs"), ("PW-CEP-STD-MIB", "pwCepPerfCurrentFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepPerfCurrentGroup = pwCepPerfCurrentGroup.setStatus('current')
pwCepPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 5)).setObjects(("PW-CEP-STD-MIB", "pwCepPerfIntervalValidData"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalReset"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalTimeElapsed"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalDbaInPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalDbaOutPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalInNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalInPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalInPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalOutNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalOutPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalOutPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalAbsPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalMissingPkts"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalPktsOoseq"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalPktsOoRngDropped"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalJtrBfrUnderruns"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalPktsMalformed"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalSummaryErrors"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalESs"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalSESs"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalUASs"), ("PW-CEP-STD-MIB", "pwCepPerfIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepPerfIntervalGroup = pwCepPerfIntervalGroup.setStatus('current')
pwCepPerf1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 6)).setObjects(("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalValidData"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalMoniSecs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalDbaInPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalDbaOutPacketsHC"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalInNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalInPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalInPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalOutNegPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalOutPosPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalOutPtrAdjustSecs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalAbsPtrAdjust"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalMissingPkts"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalPktsOoseq"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalPktsOoRngDropped"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalJtrBfrUnderruns"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalPktsMalformed"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalSummaryErrors"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalESs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalSESs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalUASs"), ("PW-CEP-STD-MIB", "pwCepPerf1DayIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepPerf1DayIntervalGroup = pwCepPerf1DayIntervalGroup.setStatus('current')
pwCepFractionalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 7)).setObjects(("PW-CEP-STD-MIB", "pwCepFracRowStatus"), ("PW-CEP-STD-MIB", "pwCepFracStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepFractionalGroup = pwCepFractionalGroup.setStatus('current')
pwCepFractionalSts1Vc3Group = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 8)).setObjects(("PW-CEP-STD-MIB", "pwCepFracMode"), ("PW-CEP-STD-MIB", "pwCepFracConfigError"), ("PW-CEP-STD-MIB", "pwCepFracAsync"), ("PW-CEP-STD-MIB", "pwCepFracVtgMap"), ("PW-CEP-STD-MIB", "pwCepFracEbm"), ("PW-CEP-STD-MIB", "pwCepFracPeerEbm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepFractionalSts1Vc3Group = pwCepFractionalSts1Vc3Group.setStatus('current')
pwCepFractionalVc4Group = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 2, 1, 9)).setObjects(("PW-CEP-STD-MIB", "pwCepFracSdhVc4Mode"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tu3Map1"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tu3Map2"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tu3Map3"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tug2Map1"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tug2Map2"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Tug2Map3"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Ebm1"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Ebm2"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4Ebm3"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4PeerEbm1"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4PeerEbm2"), ("PW-CEP-STD-MIB", "pwCepFracSdhVc4PeerEbm3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwCepFractionalVc4Group = pwCepFractionalVc4Group.setStatus('current')
mibBuilder.exportSymbols("PW-CEP-STD-MIB", pwCepPerfCurrentInPtrAdjustSecs=pwCepPerfCurrentInPtrAdjustSecs, pwCepPerfCurrentOutNegPtrAdjust=pwCepPerfCurrentOutNegPtrAdjust, pwCepFracVtgMap=pwCepFracVtgMap, pwCepFracStorageType=pwCepFracStorageType, pwCepPerfCurrentUASs=pwCepPerfCurrentUASs, pwCepGroup=pwCepGroup, pwCepEntry=pwCepEntry, pwCepLastEsTimeStamp=pwCepLastEsTimeStamp, pwCepPerfIntervalDbaOutPacketsHC=pwCepPerfIntervalDbaOutPacketsHC, pwCepPerfIntervalNumber=pwCepPerfIntervalNumber, pwCepPerfCurrentOutPosPtrAdjust=pwCepPerfCurrentOutPosPtrAdjust, pwCepCfgSecsToExitUas=pwCepCfgSecsToExitUas, pwCepGroups=pwCepGroups, pwCepFracEbm=pwCepFracEbm, pwCepFracSdhVc4Ebm3=pwCepFracSdhVc4Ebm3, pwCepPerf1DayIntervalInPosPtrAdjust=pwCepPerf1DayIntervalInPosPtrAdjust, pwCepFracSdhVc4Ebm1=pwCepFracSdhVc4Ebm1, pwCepModuleReadOnlyCompliance=pwCepModuleReadOnlyCompliance, pwCepPerf1DayIntervalGroup=pwCepPerf1DayIntervalGroup, pwCepPerfIntervalOutPosPtrAdjust=pwCepPerfIntervalOutPosPtrAdjust, pwCepCfgIndexNext=pwCepCfgIndexNext, pwCepPerfIntervalPktsOoRngDropped=pwCepPerfIntervalPktsOoRngDropped, pwCepPerfCurrentGroup=pwCepPerfCurrentGroup, pwCepFractionalGroup=pwCepFractionalGroup, pwCepPerf1DayIntervalUASs=pwCepPerf1DayIntervalUASs, pwCepPerfIntervalPktsMalformed=pwCepPerfIntervalPktsMalformed, pwCepPerfIntervalUASs=pwCepPerfIntervalUASs, pwCepPerf1DayIntervalInNegPtrAdjust=pwCepPerf1DayIntervalInNegPtrAdjust, pwCepFracSdhVc4Tu3Map2=pwCepFracSdhVc4Tu3Map2, pwCepFractionalSts1Vc3Group=pwCepFractionalSts1Vc3Group, pwCepPerfCurrentESs=pwCepPerfCurrentESs, pwCepPerfIntervalEntry=pwCepPerfIntervalEntry, pwCepFracSdhVc4Ebm2=pwCepFracSdhVc4Ebm2, pwCepPerfCurrentDbaOutPacketsHC=pwCepPerfCurrentDbaOutPacketsHC, pwCepCfgEntry=pwCepCfgEntry, pwCepFracEntry=pwCepFracEntry, PwCepSdhVc4Ebm=PwCepSdhVc4Ebm, PwCepFracAsyncMap=PwCepFracAsyncMap, pwCepFracMode=pwCepFracMode, pwCepTimeElapsed=pwCepTimeElapsed, pwCepFracSdhVc4Tug2Map3=pwCepFracSdhVc4Tug2Map3, pwCepPerf1DayIntervalInPtrAdjustSecs=pwCepPerf1DayIntervalInPtrAdjustSecs, pwCepPerf1DayIntervalPktsMalformed=pwCepPerf1DayIntervalPktsMalformed, pwCepPerf1DayIntervalOutPosPtrAdjust=pwCepPerf1DayIntervalOutPosPtrAdjust, pwCepFracSdhVc4Tug2Map1=pwCepFracSdhVc4Tug2Map1, pwCepPerf1DayIntervalDbaInPacketsHC=pwCepPerf1DayIntervalDbaInPacketsHC, pwCepPerfIntervalOutNegPtrAdjust=pwCepPerfIntervalOutNegPtrAdjust, pwCepPerf1DayIntervalNumber=pwCepPerf1DayIntervalNumber, pwCepModuleFullCompliance=pwCepModuleFullCompliance, pwCepPerfCurrentEntry=pwCepPerfCurrentEntry, pwCepCfgName=pwCepCfgName, pwCepCfgRtpHdrSuppress=pwCepCfgRtpHdrSuppress, pwCepPerfCurrentSESs=pwCepPerfCurrentSESs, PwCepSonetVtgMap=PwCepSonetVtgMap, pwCepFracSdhVc4PeerEbm2=pwCepFracSdhVc4PeerEbm2, pwCepPerfIntervalGroup=pwCepPerfIntervalGroup, pwCepPerfIntervalSummaryErrors=pwCepPerfIntervalSummaryErrors, pwCepPerfCurrentPktsMalformed=pwCepPerfCurrentPktsMalformed, pwCepPerf1DayIntervalSESs=pwCepPerf1DayIntervalSESs, pwCepPerfCurrentJtrBfrUnderruns=pwCepPerfCurrentJtrBfrUnderruns, pwCepPerfIntervalOutPtrAdjustSecs=pwCepPerfIntervalOutPtrAdjustSecs, pwCepPerfCurrentOutPtrAdjustSecs=pwCepPerfCurrentOutPtrAdjustSecs, pwCepFracPeerEbm=pwCepFracPeerEbm, pwCepPerf1DayIntervalESs=pwCepPerf1DayIntervalESs, pwCepCfgConsecPktsInsync=pwCepCfgConsecPktsInsync, pwCepPerfIntervalValidData=pwCepPerfIntervalValidData, pwCepCfgGroup=pwCepCfgGroup, pwCepCfgMinPktLength=pwCepCfgMinPktLength, pwCepCfgSesToUas=pwCepCfgSesToUas, pwCepPerfCurrentAbsPtrAdjust=pwCepPerfCurrentAbsPtrAdjust, pwCepTable=pwCepTable, pwCepFracSdhVc4Tug2Map2=pwCepFracSdhVc4Tug2Map2, pwCepPerfIntervalDbaInPacketsHC=pwCepPerfIntervalDbaInPacketsHC, pwCepCfgMissingPktsToSes=pwCepCfgMissingPktsToSes, pwCepPerfCurrentInNegPtrAdjust=pwCepPerfCurrentInNegPtrAdjust, pwCepPerfIntervalInNegPtrAdjust=pwCepPerfIntervalInNegPtrAdjust, pwCepType=pwCepType, pwCepPerf1DayIntervalPktsOoRngDropped=pwCepPerf1DayIntervalPktsOoRngDropped, pwCepPerfIntervalFC=pwCepPerfIntervalFC, pwCepPerfCurrentPktsOoseq=pwCepPerfCurrentPktsOoseq, pwCepPerf1DayIntervalFC=pwCepPerf1DayIntervalFC, pwCepPerf1DayIntervalJtrBfrUnderruns=pwCepPerf1DayIntervalJtrBfrUnderruns, pwCepPerfIntervalSESs=pwCepPerfIntervalSESs, pwCepPerfIntervalPktsOoseq=pwCepPerfIntervalPktsOoseq, PwCepSonetEbm=PwCepSonetEbm, pwCepSonetConfigErrorOrStatus=pwCepSonetConfigErrorOrStatus, pwCepCfgJtrBfrDepth=pwCepCfgJtrBfrDepth, pwCepPerf1DayIntervalOutNegPtrAdjust=pwCepPerf1DayIntervalOutNegPtrAdjust, pwCepPerf1DayIntervalEntry=pwCepPerf1DayIntervalEntry, pwCepPerf1DayIntervalSummaryErrors=pwCepPerf1DayIntervalSummaryErrors, pwCepConformance=pwCepConformance, pwCepPerfCurrentSummaryErrors=pwCepPerfCurrentSummaryErrors, pwCepPerf1DayIntervalTable=pwCepPerf1DayIntervalTable, pwCepCfgEnableDBA=pwCepCfgEnableDBA, pwCepPerfIntervalTimeElapsed=pwCepPerfIntervalTimeElapsed, pwCepStdMIB=pwCepStdMIB, pwCepPerfCurrentMissingPkts=pwCepPerfCurrentMissingPkts, pwCepPerf1DayIntervalMoniSecs=pwCepPerf1DayIntervalMoniSecs, pwCepSonetPayloadLength=pwCepSonetPayloadLength, pwCepPerfCurrentFC=pwCepPerfCurrentFC, pwCepPerf1DayIntervalMissingPkts=pwCepPerf1DayIntervalMissingPkts, pwCepValidIntervals=pwCepValidIntervals, pwCepFractionalVc4Group=pwCepFractionalVc4Group, pwCepPerfCurrentInPosPtrAdjust=pwCepPerfCurrentInPosPtrAdjust, pwCepPerfIntervalAbsPtrAdjust=pwCepPerfIntervalAbsPtrAdjust, pwCepCompliances=pwCepCompliances, pwCepPerfIntervalMissingPkts=pwCepPerfIntervalMissingPkts, pwCepSignalingGroup=pwCepSignalingGroup, pwCepFracSdhVc4PeerEbm1=pwCepFracSdhVc4PeerEbm1, pwCepCfgConsecMissingOutSync=pwCepCfgConsecMissingOutSync, pwCepCfgTable=pwCepCfgTable, pwCepPerfIntervalInPtrAdjustSecs=pwCepPerfIntervalInPtrAdjustSecs, pwCepPerfIntervalESs=pwCepPerfIntervalESs, pwCepFracSdhVc4Tu3Map1=pwCepFracSdhVc4Tu3Map1, pwCepFracConfigError=pwCepFracConfigError, pwCepPerfIntervalJtrBfrUnderruns=pwCepPerfIntervalJtrBfrUnderruns, PYSNMP_MODULE_ID=pwCepStdMIB, pwCepCfgStorageType=pwCepCfgStorageType, pwCepPerfCurrentDbaInPacketsHC=pwCepPerfCurrentDbaInPacketsHC, pwCepCfgRowStatus=pwCepCfgRowStatus, pwCepPeerCepOption=pwCepPeerCepOption, pwCepPerf1DayIntervalDbaOutPacketsHC=pwCepPerf1DayIntervalDbaOutPacketsHC, pwCepCfgIndex=pwCepCfgIndex, pwCepFracTable=pwCepFracTable, pwCepPerf1DayIntervalOutPtrAdjustSecs=pwCepPerf1DayIntervalOutPtrAdjustSecs, pwCepFracSdhVc4PeerEbm3=pwCepFracSdhVc4PeerEbm3, pwCepFracSdhVc4Mode=pwCepFracSdhVc4Mode, pwCepPerf1DayIntervalValidData=pwCepPerf1DayIntervalValidData, pwCepFracIndex=pwCepFracIndex, pwCepFracSdhVc4Tu3Map3=pwCepFracSdhVc4Tu3Map3, pwCepPerfIntervalInPosPtrAdjust=pwCepPerfIntervalInPosPtrAdjust, pwCepPerf1DayIntervalPktsOoseq=pwCepPerf1DayIntervalPktsOoseq, pwCepFracRowStatus=pwCepFracRowStatus, pwCepPerfIntervalReset=pwCepPerfIntervalReset, pwCepCfgPktErrorPlayOutValue=pwCepCfgPktErrorPlayOutValue, pwCepSonetIfIndex=pwCepSonetIfIndex, pwCepFracAsync=pwCepFracAsync, pwCepPerfIntervalTable=pwCepPerfIntervalTable, pwCepPerf1DayIntervalAbsPtrAdjust=pwCepPerf1DayIntervalAbsPtrAdjust, pwCepObjects=pwCepObjects, pwCepIndications=pwCepIndications, pwCepCfgPktReorder=pwCepCfgPktReorder, pwCepPerfCurrentPktsOoRngDropped=pwCepPerfCurrentPktsOoRngDropped, pwCepPerfCurrentTable=pwCepPerfCurrentTable, pwCepCfgTableIndex=pwCepCfgTableIndex)
