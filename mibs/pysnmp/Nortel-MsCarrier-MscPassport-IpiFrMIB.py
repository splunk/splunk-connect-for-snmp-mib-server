#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-IpiFrMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-IpiFrMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
StorageType, DisplayString, Integer32, Unsigned32, RowPointer, Counter32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "DisplayString", "Integer32", "Unsigned32", "RowPointer", "Counter32", "RowStatus")
NonReplicated, AsciiString, HexString, Hex, DigitString, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiString", "HexString", "Hex", "DigitString", "EnterpriseDateAndTime")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, Integer32, Bits, ObjectIdentity, Unsigned32, iso, Gauge32, Counter64, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Integer32", "Bits", "ObjectIdentity", "Unsigned32", "iso", "Gauge32", "Counter64", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipiFrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35))
mscIpiFr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50))
mscIpiFrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1), )
if mibBuilder.loadTexts: mscIpiFrRowStatusTable.setStatus('mandatory')
mscIpiFrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"))
if mibBuilder.loadTexts: mscIpiFrRowStatusEntry.setStatus('mandatory')
mscIpiFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrRowStatus.setStatus('mandatory')
mscIpiFrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrComponentName.setStatus('mandatory')
mscIpiFrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrStorageType.setStatus('mandatory')
mscIpiFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpiFrIndex.setStatus('mandatory')
mscIpiFrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 10), )
if mibBuilder.loadTexts: mscIpiFrProvTable.setStatus('mandatory')
mscIpiFrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"))
if mibBuilder.loadTexts: mscIpiFrProvEntry.setStatus('mandatory')
mscIpiFrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrIpAddress.setStatus('mandatory')
mscIpiFrMaximumNumberOfLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(24, 24)).clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrMaximumNumberOfLcn.setStatus('mandatory')
mscIpiFrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 10, 1, 3), IpAddress().clone(hexValue="ff000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrSubnetMask.setStatus('mandatory')
mscIpiFrDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2))
mscIpiFrDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1), )
if mibBuilder.loadTexts: mscIpiFrDnaRowStatusTable.setStatus('mandatory')
mscIpiFrDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaRowStatusEntry.setStatus('mandatory')
mscIpiFrDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaRowStatus.setStatus('mandatory')
mscIpiFrDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaComponentName.setStatus('mandatory')
mscIpiFrDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaStorageType.setStatus('mandatory')
mscIpiFrDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpiFrDnaIndex.setStatus('mandatory')
mscIpiFrDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 10), )
if mibBuilder.loadTexts: mscIpiFrDnaAddressTable.setStatus('mandatory')
mscIpiFrDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaAddressEntry.setStatus('mandatory')
mscIpiFrDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaNumberingPlanIndicator.setStatus('mandatory')
mscIpiFrDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaDataNetworkAddress.setStatus('mandatory')
mscIpiFrDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11), )
if mibBuilder.loadTexts: mscIpiFrDnaOutgoingOptionsTable.setStatus('mandatory')
mscIpiFrDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaOutgoingOptionsEntry.setStatus('mandatory')
mscIpiFrDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaOutCalls.setStatus('mandatory')
mscIpiFrDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('high')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaOutDefaultPriority.setStatus('mandatory')
mscIpiFrDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('delay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaOutDefaultPathSensitivity.setStatus('obsolete')
mscIpiFrDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaOutPathSensitivityOverRide.setStatus('obsolete')
mscIpiFrDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaDefaultTransferPriority.setStatus('mandatory')
mscIpiFrDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaTransferPriorityOverRide.setStatus('mandatory')
mscIpiFrDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 12), )
if mibBuilder.loadTexts: mscIpiFrDnaIncomingOptionsTable.setStatus('mandatory')
mscIpiFrDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaIncomingOptionsEntry.setStatus('mandatory')
mscIpiFrDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaIncCalls.setStatus('mandatory')
mscIpiFrDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaIncAccess.setStatus('mandatory')
mscIpiFrDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 13), )
if mibBuilder.loadTexts: mscIpiFrDnaCallOptionsTable.setStatus('mandatory')
mscIpiFrDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaCallOptionsEntry.setStatus('mandatory')
mscIpiFrDnaServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("gsp", 0), ("x25", 1), ("enhancedIti", 2), ("ncs", 3), ("mlti", 4), ("sm", 5), ("ici", 6), ("dsp3270", 7), ("iam", 8), ("mlhi", 9), ("term3270", 10), ("iti", 11), ("bsi", 13), ("hostIti", 14), ("x75", 15), ("hdsp3270", 16), ("api3201", 20), ("sdlc", 21), ("snaMultiHost", 22), ("redirectionServ", 23), ("trSnaTpad", 24), ("offnetNui", 25), ("gasServer", 26), ("vapServer", 28), ("vapAgent", 29), ("frameRelay", 30), ("ipiVc", 31), ("ipiFr", 32))).clone('ipiFr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaServiceCategory.setStatus('mandatory')
mscIpiFrDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaAccountClass.setStatus('mandatory')
mscIpiFrDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaServiceExchange.setStatus('mandatory')
mscIpiFrDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2))
mscIpiFrDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1), )
if mibBuilder.loadTexts: mscIpiFrDnaCugRowStatusTable.setStatus('mandatory')
mscIpiFrDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaCugIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaCugRowStatusEntry.setStatus('mandatory')
mscIpiFrDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaCugRowStatus.setStatus('mandatory')
mscIpiFrDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaCugComponentName.setStatus('mandatory')
mscIpiFrDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrDnaCugStorageType.setStatus('mandatory')
mscIpiFrDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: mscIpiFrDnaCugIndex.setStatus('mandatory')
mscIpiFrDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10), )
if mibBuilder.loadTexts: mscIpiFrDnaCugCugOptionsTable.setStatus('mandatory')
mscIpiFrDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrDnaCugIndex"))
if mibBuilder.loadTexts: mscIpiFrDnaCugCugOptionsEntry.setStatus('mandatory')
mscIpiFrDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaCugType.setStatus('mandatory')
mscIpiFrDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaCugDnic.setStatus('mandatory')
mscIpiFrDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaCugInterlockCode.setStatus('mandatory')
mscIpiFrDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrDnaCugIncCalls.setStatus('mandatory')
mscIpiFrLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4))
mscIpiFrLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1), )
if mibBuilder.loadTexts: mscIpiFrLcnRowStatusTable.setStatus('mandatory')
mscIpiFrLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnRowStatusEntry.setStatus('mandatory')
mscIpiFrLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnRowStatus.setStatus('mandatory')
mscIpiFrLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnComponentName.setStatus('mandatory')
mscIpiFrLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnStorageType.setStatus('mandatory')
mscIpiFrLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 39)))
if mibBuilder.loadTexts: mscIpiFrLcnIndex.setStatus('mandatory')
mscIpiFrLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10), )
if mibBuilder.loadTexts: mscIpiFrLcnStateTable.setStatus('mandatory')
mscIpiFrLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnStateEntry.setStatus('mandatory')
mscIpiFrLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnAdminState.setStatus('mandatory')
mscIpiFrLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnOperationalState.setStatus('mandatory')
mscIpiFrLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnUsageState.setStatus('mandatory')
mscIpiFrLcnAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnAvailabilityStatus.setStatus('mandatory')
mscIpiFrLcnProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnProceduralStatus.setStatus('mandatory')
mscIpiFrLcnControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnControlStatus.setStatus('mandatory')
mscIpiFrLcnAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnAlarmStatus.setStatus('mandatory')
mscIpiFrLcnStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnStandbyStatus.setStatus('mandatory')
mscIpiFrLcnUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnUnknownStatus.setStatus('mandatory')
mscIpiFrLcnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11), )
if mibBuilder.loadTexts: mscIpiFrLcnOperTable.setStatus('mandatory')
mscIpiFrLcnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnOperEntry.setStatus('mandatory')
mscIpiFrLcnIpInterfaceDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnIpInterfaceDevice.setStatus('mandatory')
mscIpiFrLcnOpRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnOpRemoteIpAddress.setStatus('mandatory')
mscIpiFrLcnPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnPacketsSent.setStatus('mandatory')
mscIpiFrLcnPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnPacketsReceived.setStatus('mandatory')
mscIpiFrLcnDiscardTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDiscardTxPackets.setStatus('mandatory')
mscIpiFrLcnDiscardRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDiscardRcvPackets.setStatus('mandatory')
mscIpiFrLcnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 12), )
if mibBuilder.loadTexts: mscIpiFrLcnProvTable.setStatus('mandatory')
mscIpiFrLcnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnProvEntry.setStatus('mandatory')
mscIpiFrLcnRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 12, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnRemoteIpAddress.setStatus('mandatory')
mscIpiFrLcnDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2))
mscIpiFrLcnDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1), )
if mibBuilder.loadTexts: mscIpiFrLcnDcRowStatusTable.setStatus('mandatory')
mscIpiFrLcnDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnDcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnDcRowStatusEntry.setStatus('mandatory')
mscIpiFrLcnDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDcRowStatus.setStatus('mandatory')
mscIpiFrLcnDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDcComponentName.setStatus('mandatory')
mscIpiFrLcnDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDcStorageType.setStatus('mandatory')
mscIpiFrLcnDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpiFrLcnDcIndex.setStatus('mandatory')
mscIpiFrLcnDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10), )
if mibBuilder.loadTexts: mscIpiFrLcnDcOptionsTable.setStatus('mandatory')
mscIpiFrLcnDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnDcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnDcOptionsEntry.setStatus('mandatory')
mscIpiFrLcnDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcRemoteNpi.setStatus('mandatory')
mscIpiFrLcnDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcRemoteDna.setStatus('mandatory')
mscIpiFrLcnDcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcRemoteDlci.setStatus('mandatory')
mscIpiFrLcnDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanentMaster", 1), ("permanentSlave", 2))).clone('permanentSlave')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnDcType.setStatus('mandatory')
mscIpiFrLcnDcTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 255))).clone(namedValues=NamedValues(("normal", 0), ("high", 9), ("useDnaDefTP", 255))).clone('useDnaDefTP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcTransferPriority.setStatus('mandatory')
mscIpiFrLcnDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcDiscardPriority.setStatus('mandatory')
mscIpiFrLcnDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 222), )
if mibBuilder.loadTexts: mscIpiFrLcnDcNfaTable.setStatus('obsolete')
mscIpiFrLcnDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 222, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnDcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnDcNfaIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnDcNfaEntry.setStatus('obsolete')
mscIpiFrLcnDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 222, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mscIpiFrLcnDcNfaIndex.setStatus('obsolete')
mscIpiFrLcnDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 222, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrLcnDcNfaValue.setStatus('obsolete')
mscIpiFrLcnDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 2, 222, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscIpiFrLcnDcNfaRowStatus.setStatus('obsolete')
mscIpiFrLcnVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3))
mscIpiFrLcnVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1), )
if mibBuilder.loadTexts: mscIpiFrLcnVcRowStatusTable.setStatus('mandatory')
mscIpiFrLcnVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnVcRowStatusEntry.setStatus('mandatory')
mscIpiFrLcnVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcRowStatus.setStatus('mandatory')
mscIpiFrLcnVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcComponentName.setStatus('mandatory')
mscIpiFrLcnVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcStorageType.setStatus('mandatory')
mscIpiFrLcnVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscIpiFrLcnVcIndex.setStatus('mandatory')
mscIpiFrLcnVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10), )
if mibBuilder.loadTexts: mscIpiFrLcnVcCadTable.setStatus('mandatory')
mscIpiFrLcnVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnVcCadEntry.setStatus('mandatory')
mscIpiFrLcnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2), ("frf10spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcType.setStatus('mandatory')
mscIpiFrLcnVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcState.setStatus('mandatory')
mscIpiFrLcnVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPreviousState.setStatus('mandatory')
mscIpiFrLcnVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcDiagnosticCode.setStatus('mandatory')
mscIpiFrLcnVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPreviousDiagnosticCode.setStatus('mandatory')
mscIpiFrLcnVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCalledNpi.setStatus('mandatory')
mscIpiFrLcnVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCalledDna.setStatus('mandatory')
mscIpiFrLcnVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCalledLcn.setStatus('mandatory')
mscIpiFrLcnVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCallingNpi.setStatus('mandatory')
mscIpiFrLcnVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCallingDna.setStatus('mandatory')
mscIpiFrLcnVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCallingLcn.setStatus('mandatory')
mscIpiFrLcnVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcAccountingEnabled.setStatus('mandatory')
mscIpiFrLcnVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcFastSelectCall.setStatus('mandatory')
mscIpiFrLcnVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPathReliability.setStatus('mandatory')
mscIpiFrLcnVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcAccountingEnd.setStatus('mandatory')
mscIpiFrLcnVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPriority.setStatus('mandatory')
mscIpiFrLcnVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcSegmentSize.setStatus('mandatory')
mscIpiFrLcnVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcMaxSubnetPktSize.setStatus('mandatory')
mscIpiFrLcnVcRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcRcosToNetwork.setStatus('mandatory')
mscIpiFrLcnVcRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcRcosFromNetwork.setStatus('mandatory')
mscIpiFrLcnVcEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcEmissionPriorityToNetwork.setStatus('mandatory')
mscIpiFrLcnVcEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcEmissionPriorityFromNetwork.setStatus('mandatory')
mscIpiFrLcnVcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcDataPath.setStatus('mandatory')
mscIpiFrLcnVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11), )
if mibBuilder.loadTexts: mscIpiFrLcnVcIntdTable.setStatus('mandatory')
mscIpiFrLcnVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnVcIntdEntry.setStatus('mandatory')
mscIpiFrLcnVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCallReferenceNumber.setStatus('obsolete')
mscIpiFrLcnVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcElapsedTimeTillNow.setStatus('mandatory')
mscIpiFrLcnVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcSegmentsRx.setStatus('mandatory')
mscIpiFrLcnVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcSegmentsSent.setStatus('mandatory')
mscIpiFrLcnVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcStartTime.setStatus('mandatory')
mscIpiFrLcnVcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCallReferenceNumberDecimal.setStatus('mandatory')
mscIpiFrLcnVcFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12), )
if mibBuilder.loadTexts: mscIpiFrLcnVcFrdTable.setStatus('mandatory')
mscIpiFrLcnVcFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcIndex"))
if mibBuilder.loadTexts: mscIpiFrLcnVcFrdEntry.setStatus('mandatory')
mscIpiFrLcnVcFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcFrmCongestedToSubnet.setStatus('mandatory')
mscIpiFrLcnVcCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCannotForwardToSubnet.setStatus('mandatory')
mscIpiFrLcnVcNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcNotDataXferToSubnet.setStatus('mandatory')
mscIpiFrLcnVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscIpiFrLcnVcCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcCombErrorsFromSubnet.setStatus('mandatory')
mscIpiFrLcnVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcDuplicatesFromSubnet.setStatus('mandatory')
mscIpiFrLcnVcNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcNotDataXferFromSubnet.setStatus('mandatory')
mscIpiFrLcnVcFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcFrmLossTimeouts.setStatus('mandatory')
mscIpiFrLcnVcOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcOoSeqByteCntExceeded.setStatus('mandatory')
mscIpiFrLcnVcPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPeakOoSeqPktCount.setStatus('mandatory')
mscIpiFrLcnVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscIpiFrLcnVcSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcSendSequenceNumber.setStatus('mandatory')
mscIpiFrLcnVcPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPktRetryTimeouts.setStatus('mandatory')
mscIpiFrLcnVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPeakRetryQueueSize.setStatus('mandatory')
mscIpiFrLcnVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcSubnetRecoveries.setStatus('mandatory')
mscIpiFrLcnVcOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcOoSeqPktCntExceeded.setStatus('mandatory')
mscIpiFrLcnVcPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcPeakOoSeqByteCount.setStatus('mandatory')
mscIpiFrLcnVcDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 417), )
if mibBuilder.loadTexts: mscIpiFrLcnVcDmepTable.setStatus('mandatory')
mscIpiFrLcnVcDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 417, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrLcnVcDmepValue"))
if mibBuilder.loadTexts: mscIpiFrLcnVcDmepEntry.setStatus('mandatory')
mscIpiFrLcnVcDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 4, 3, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrLcnVcDmepValue.setStatus('mandatory')
mscIpiFrSr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5))
mscIpiFrSrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1), )
if mibBuilder.loadTexts: mscIpiFrSrRowStatusTable.setStatus('mandatory')
mscIpiFrSrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrSrIndex"))
if mibBuilder.loadTexts: mscIpiFrSrRowStatusEntry.setStatus('mandatory')
mscIpiFrSrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrSrRowStatus.setStatus('mandatory')
mscIpiFrSrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrSrComponentName.setStatus('mandatory')
mscIpiFrSrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrSrStorageType.setStatus('mandatory')
mscIpiFrSrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: mscIpiFrSrIndex.setStatus('mandatory')
mscIpiFrSrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 10), )
if mibBuilder.loadTexts: mscIpiFrSrProvTable.setStatus('mandatory')
mscIpiFrSrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrSrIndex"))
if mibBuilder.loadTexts: mscIpiFrSrProvEntry.setStatus('mandatory')
mscIpiFrSrGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrSrGatewayIpAddress.setStatus('mandatory')
mscIpiFrSrBGtyIpaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 327), )
if mibBuilder.loadTexts: mscIpiFrSrBGtyIpaTable.setStatus('mandatory')
mscIpiFrSrBGtyIpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 327, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrSrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrSrBGtyIpaIndex"))
if mibBuilder.loadTexts: mscIpiFrSrBGtyIpaEntry.setStatus('mandatory')
mscIpiFrSrBGtyIpaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 327, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 23)))
if mibBuilder.loadTexts: mscIpiFrSrBGtyIpaIndex.setStatus('mandatory')
mscIpiFrSrBGtyIpaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 327, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscIpiFrSrBGtyIpaValue.setStatus('mandatory')
mscIpiFrSrBGtyIpaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 5, 327, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscIpiFrSrBGtyIpaRowStatus.setStatus('mandatory')
mscIpiFrR = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6))
mscIpiFrRRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1), )
if mibBuilder.loadTexts: mscIpiFrRRowStatusTable.setStatus('mandatory')
mscIpiFrRRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrRIndex"))
if mibBuilder.loadTexts: mscIpiFrRRowStatusEntry.setStatus('mandatory')
mscIpiFrRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRRowStatus.setStatus('mandatory')
mscIpiFrRComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRComponentName.setStatus('mandatory')
mscIpiFrRStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRStorageType.setStatus('mandatory')
mscIpiFrRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: mscIpiFrRIndex.setStatus('mandatory')
mscIpiFrROperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 10), )
if mibBuilder.loadTexts: mscIpiFrROperTable.setStatus('mandatory')
mscIpiFrROperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpiFrMIB", "mscIpiFrRIndex"))
if mibBuilder.loadTexts: mscIpiFrROperEntry.setStatus('mandatory')
mscIpiFrRGtyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRGtyIpAddr.setStatus('mandatory')
mscIpiFrRLcnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRLcnIf.setStatus('mandatory')
mscIpiFrRType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 50, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("subnet", 2), ("network", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscIpiFrRType.setStatus('mandatory')
ipiFrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 1))
ipiFrGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 1, 1))
ipiFrGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 1, 1, 3))
ipiFrGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 1, 1, 3, 2))
ipiFrCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 3))
ipiFrCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 3, 1))
ipiFrCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 3, 1, 3))
ipiFrCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 35, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpiFrMIB", ipiFrGroupCA=ipiFrGroupCA, mscIpiFrLcnVcMaxSubnetPktSize=mscIpiFrLcnVcMaxSubnetPktSize, mscIpiFrLcnVcFrmCongestedToSubnet=mscIpiFrLcnVcFrmCongestedToSubnet, mscIpiFrLcnVcRcosFromNetwork=mscIpiFrLcnVcRcosFromNetwork, mscIpiFrDnaAddressTable=mscIpiFrDnaAddressTable, mscIpiFrLcnVcCallingDna=mscIpiFrLcnVcCallingDna, mscIpiFrRComponentName=mscIpiFrRComponentName, mscIpiFrSrStorageType=mscIpiFrSrStorageType, mscIpiFrRLcnIf=mscIpiFrRLcnIf, ipiFrCapabilitiesCA=ipiFrCapabilitiesCA, mscIpiFrLcnDcNfaIndex=mscIpiFrLcnDcNfaIndex, mscIpiFrSrRowStatusEntry=mscIpiFrSrRowStatusEntry, mscIpiFrRowStatusEntry=mscIpiFrRowStatusEntry, mscIpiFrLcnVcOutOfRangeFrmFromSubnet=mscIpiFrLcnVcOutOfRangeFrmFromSubnet, mscIpiFrDnaCugCugOptionsTable=mscIpiFrDnaCugCugOptionsTable, mscIpiFrLcnVcPeakOoSeqFrmForwarded=mscIpiFrLcnVcPeakOoSeqFrmForwarded, mscIpiFrSrProvTable=mscIpiFrSrProvTable, mscIpiFrLcnStorageType=mscIpiFrLcnStorageType, mscIpiFrLcnDcRemoteNpi=mscIpiFrLcnDcRemoteNpi, mscIpiFrLcnIpInterfaceDevice=mscIpiFrLcnIpInterfaceDevice, mscIpiFrLcnVcFrdTable=mscIpiFrLcnVcFrdTable, mscIpiFrLcnDcOptionsTable=mscIpiFrLcnDcOptionsTable, mscIpiFrLcnVcEmissionPriorityFromNetwork=mscIpiFrLcnVcEmissionPriorityFromNetwork, mscIpiFrLcnVcStartTime=mscIpiFrLcnVcStartTime, mscIpiFrDnaDataNetworkAddress=mscIpiFrDnaDataNetworkAddress, mscIpiFrDnaAddressEntry=mscIpiFrDnaAddressEntry, mscIpiFrLcnDcType=mscIpiFrLcnDcType, mscIpiFrLcnVcSegmentsSent=mscIpiFrLcnVcSegmentsSent, mscIpiFrRGtyIpAddr=mscIpiFrRGtyIpAddr, mscIpiFrProvTable=mscIpiFrProvTable, mscIpiFrROperTable=mscIpiFrROperTable, mscIpiFrStorageType=mscIpiFrStorageType, mscIpiFrLcnVcIntdTable=mscIpiFrLcnVcIntdTable, mscIpiFrLcnVcState=mscIpiFrLcnVcState, mscIpiFrDnaTransferPriorityOverRide=mscIpiFrDnaTransferPriorityOverRide, mscIpiFrLcnVcRowStatusEntry=mscIpiFrLcnVcRowStatusEntry, mscIpiFrLcnVcCombErrorsFromSubnet=mscIpiFrLcnVcCombErrorsFromSubnet, mscIpiFrRIndex=mscIpiFrRIndex, mscIpiFrDnaOutgoingOptionsEntry=mscIpiFrDnaOutgoingOptionsEntry, mscIpiFrDnaIncAccess=mscIpiFrDnaIncAccess, mscIpiFrDnaAccountClass=mscIpiFrDnaAccountClass, mscIpiFrSrBGtyIpaRowStatus=mscIpiFrSrBGtyIpaRowStatus, mscIpiFrLcnVcRowStatusTable=mscIpiFrLcnVcRowStatusTable, mscIpiFrLcnOperTable=mscIpiFrLcnOperTable, mscIpiFrLcnVcRcosToNetwork=mscIpiFrLcnVcRcosToNetwork, mscIpiFrDnaCug=mscIpiFrDnaCug, mscIpiFrLcnIndex=mscIpiFrLcnIndex, ipiFrCapabilitiesCA02=ipiFrCapabilitiesCA02, mscIpiFrLcnDcIndex=mscIpiFrLcnDcIndex, mscIpiFrDnaCugIndex=mscIpiFrDnaCugIndex, mscIpiFrLcnVcCallingLcn=mscIpiFrLcnVcCallingLcn, mscIpiFrLcnVcFrdEntry=mscIpiFrLcnVcFrdEntry, mscIpiFrLcnVcCallReferenceNumber=mscIpiFrLcnVcCallReferenceNumber, mscIpiFrMaximumNumberOfLcn=mscIpiFrMaximumNumberOfLcn, mscIpiFrLcnVcIntdEntry=mscIpiFrLcnVcIntdEntry, ipiFrCapabilities=ipiFrCapabilities, mscIpiFrDnaDefaultTransferPriority=mscIpiFrDnaDefaultTransferPriority, mscIpiFrLcnVcCalledDna=mscIpiFrLcnVcCalledDna, mscIpiFrSr=mscIpiFrSr, mscIpiFrLcnProceduralStatus=mscIpiFrLcnProceduralStatus, mscIpiFrLcnUnknownStatus=mscIpiFrLcnUnknownStatus, mscIpiFrLcnVcSegmentsRx=mscIpiFrLcnVcSegmentsRx, mscIpiFrLcnVcOoSeqByteCntExceeded=mscIpiFrLcnVcOoSeqByteCntExceeded, mscIpiFrRowStatusTable=mscIpiFrRowStatusTable, mscIpiFrLcnRowStatus=mscIpiFrLcnRowStatus, mscIpiFrLcnRowStatusTable=mscIpiFrLcnRowStatusTable, mscIpiFrProvEntry=mscIpiFrProvEntry, mscIpiFrLcnDcRemoteDlci=mscIpiFrLcnDcRemoteDlci, mscIpiFrLcnVcCadTable=mscIpiFrLcnVcCadTable, mscIpiFrDnaCugStorageType=mscIpiFrDnaCugStorageType, mscIpiFrLcnVcStorageType=mscIpiFrLcnVcStorageType, mscIpiFrLcnRowStatusEntry=mscIpiFrLcnRowStatusEntry, mscIpiFrDnaCugComponentName=mscIpiFrDnaCugComponentName, mscIpiFrLcnVcFastSelectCall=mscIpiFrLcnVcFastSelectCall, mscIpiFrLcnDcDiscardPriority=mscIpiFrLcnDcDiscardPriority, mscIpiFrLcnDcComponentName=mscIpiFrLcnDcComponentName, mscIpiFrROperEntry=mscIpiFrROperEntry, mscIpiFrRowStatus=mscIpiFrRowStatus, mscIpiFrR=mscIpiFrR, mscIpiFrLcnDcNfaRowStatus=mscIpiFrLcnDcNfaRowStatus, mscIpiFrLcnStateEntry=mscIpiFrLcnStateEntry, mscIpiFrDnaOutCalls=mscIpiFrDnaOutCalls, mscIpiFrRType=mscIpiFrRType, mscIpiFrLcnVcAccountingEnabled=mscIpiFrLcnVcAccountingEnabled, mscIpiFrLcnVcComponentName=mscIpiFrLcnVcComponentName, mscIpiFrLcnVcPreviousDiagnosticCode=mscIpiFrLcnVcPreviousDiagnosticCode, mscIpiFrLcnVc=mscIpiFrLcnVc, mscIpiFrLcnUsageState=mscIpiFrLcnUsageState, mscIpiFrLcnDiscardTxPackets=mscIpiFrLcnDiscardTxPackets, mscIpiFrLcnDcOptionsEntry=mscIpiFrLcnDcOptionsEntry, mscIpiFrLcnDcRowStatus=mscIpiFrLcnDcRowStatus, mscIpiFrSrRowStatus=mscIpiFrSrRowStatus, mscIpiFrLcnVcAccountingEnd=mscIpiFrLcnVcAccountingEnd, mscIpiFrLcnProvTable=mscIpiFrLcnProvTable, mscIpiFrLcnStateTable=mscIpiFrLcnStateTable, mscIpiFrDnaIncomingOptionsEntry=mscIpiFrDnaIncomingOptionsEntry, mscIpiFrDnaIndex=mscIpiFrDnaIndex, mscIpiFrLcnVcElapsedTimeTillNow=mscIpiFrLcnVcElapsedTimeTillNow, mscIpiFrLcnVcSubnetRecoveries=mscIpiFrLcnVcSubnetRecoveries, mscIpiFrSrBGtyIpaTable=mscIpiFrSrBGtyIpaTable, ipiFrCapabilitiesCA02A=ipiFrCapabilitiesCA02A, mscIpiFrRRowStatus=mscIpiFrRRowStatus, mscIpiFrLcnVcCannotForwardToSubnet=mscIpiFrLcnVcCannotForwardToSubnet, mscIpiFrDnaOutPathSensitivityOverRide=mscIpiFrDnaOutPathSensitivityOverRide, mscIpiFrLcnVcIndex=mscIpiFrLcnVcIndex, mscIpiFrLcnVcDataPath=mscIpiFrLcnVcDataPath, mscIpiFrDnaOutDefaultPriority=mscIpiFrDnaOutDefaultPriority, mscIpiFrDnaIncCalls=mscIpiFrDnaIncCalls, ipiFrMIB=ipiFrMIB, mscIpiFrDnaCugCugOptionsEntry=mscIpiFrDnaCugCugOptionsEntry, mscIpiFrLcnAvailabilityStatus=mscIpiFrLcnAvailabilityStatus, mscIpiFrDnaCallOptionsTable=mscIpiFrDnaCallOptionsTable, mscIpiFrDnaOutDefaultPathSensitivity=mscIpiFrDnaOutDefaultPathSensitivity, mscIpiFrDnaNumberingPlanIndicator=mscIpiFrDnaNumberingPlanIndicator, mscIpiFrDna=mscIpiFrDna, mscIpiFrLcnOperationalState=mscIpiFrLcnOperationalState, mscIpiFrDnaCugInterlockCode=mscIpiFrDnaCugInterlockCode, mscIpiFrLcnVcCadEntry=mscIpiFrLcnVcCadEntry, mscIpiFrSrProvEntry=mscIpiFrSrProvEntry, mscIpiFrRRowStatusEntry=mscIpiFrRRowStatusEntry, mscIpiFrDnaOutgoingOptionsTable=mscIpiFrDnaOutgoingOptionsTable, mscIpiFrLcnVcDmepValue=mscIpiFrLcnVcDmepValue, ipiFrGroupCA02=ipiFrGroupCA02, mscIpiFrLcnVcCalledNpi=mscIpiFrLcnVcCalledNpi, mscIpiFrLcnDcTransferPriority=mscIpiFrLcnDcTransferPriority, mscIpiFrLcnVcNotDataXferToSubnet=mscIpiFrLcnVcNotDataXferToSubnet, mscIpiFrLcnOpRemoteIpAddress=mscIpiFrLcnOpRemoteIpAddress, mscIpiFrLcnVcCallingNpi=mscIpiFrLcnVcCallingNpi, mscIpiFrLcnDcRemoteDna=mscIpiFrLcnDcRemoteDna, mscIpiFrLcnPacketsSent=mscIpiFrLcnPacketsSent, mscIpiFrDnaServiceExchange=mscIpiFrDnaServiceExchange, mscIpiFrLcnVcPriority=mscIpiFrLcnVcPriority, mscIpiFrSrComponentName=mscIpiFrSrComponentName, mscIpiFrLcnVcCalledLcn=mscIpiFrLcnVcCalledLcn, mscIpiFrLcnVcOoSeqPktCntExceeded=mscIpiFrLcnVcOoSeqPktCntExceeded, ipiFrGroup=ipiFrGroup, mscIpiFrLcnVcRowStatus=mscIpiFrLcnVcRowStatus, mscIpiFrLcnVcPeakRetryQueueSize=mscIpiFrLcnVcPeakRetryQueueSize, mscIpiFrLcnVcSendSequenceNumber=mscIpiFrLcnVcSendSequenceNumber, mscIpiFrSrRowStatusTable=mscIpiFrSrRowStatusTable, mscIpiFrDnaRowStatusEntry=mscIpiFrDnaRowStatusEntry, mscIpiFrRStorageType=mscIpiFrRStorageType, mscIpiFrDnaCugDnic=mscIpiFrDnaCugDnic, mscIpiFrDnaCallOptionsEntry=mscIpiFrDnaCallOptionsEntry, mscIpiFrLcnStandbyStatus=mscIpiFrLcnStandbyStatus, mscIpiFrSrIndex=mscIpiFrSrIndex, mscIpiFrIndex=mscIpiFrIndex, ipiFrGroupCA02A=ipiFrGroupCA02A, mscIpiFrLcnVcDmepTable=mscIpiFrLcnVcDmepTable, mscIpiFrSrBGtyIpaValue=mscIpiFrSrBGtyIpaValue, mscIpiFrLcnVcType=mscIpiFrLcnVcType, mscIpiFrLcnDcNfaValue=mscIpiFrLcnDcNfaValue, mscIpiFrLcnDcNfaEntry=mscIpiFrLcnDcNfaEntry, mscIpiFrLcnDcRowStatusTable=mscIpiFrLcnDcRowStatusTable, mscIpiFrLcnDc=mscIpiFrLcnDc, mscIpiFrDnaCugRowStatusTable=mscIpiFrDnaCugRowStatusTable, mscIpiFrLcnVcDmepEntry=mscIpiFrLcnVcDmepEntry, mscIpiFr=mscIpiFr, mscIpiFrLcn=mscIpiFrLcn, mscIpiFrLcnProvEntry=mscIpiFrLcnProvEntry, mscIpiFrLcnVcPeakOoSeqByteCount=mscIpiFrLcnVcPeakOoSeqByteCount, mscIpiFrLcnVcDuplicatesFromSubnet=mscIpiFrLcnVcDuplicatesFromSubnet, mscIpiFrLcnVcDiagnosticCode=mscIpiFrLcnVcDiagnosticCode, mscIpiFrSubnetMask=mscIpiFrSubnetMask, mscIpiFrLcnDcRowStatusEntry=mscIpiFrLcnDcRowStatusEntry, mscIpiFrLcnVcPeakOoSeqPktCount=mscIpiFrLcnVcPeakOoSeqPktCount, mscIpiFrLcnDcStorageType=mscIpiFrLcnDcStorageType, mscIpiFrLcnVcPreviousState=mscIpiFrLcnVcPreviousState, mscIpiFrLcnVcPathReliability=mscIpiFrLcnVcPathReliability, mscIpiFrSrBGtyIpaIndex=mscIpiFrSrBGtyIpaIndex, mscIpiFrSrGatewayIpAddress=mscIpiFrSrGatewayIpAddress, mscIpiFrLcnControlStatus=mscIpiFrLcnControlStatus, mscIpiFrLcnPacketsReceived=mscIpiFrLcnPacketsReceived, mscIpiFrLcnVcNotDataXferFromSubnet=mscIpiFrLcnVcNotDataXferFromSubnet, mscIpiFrDnaRowStatusTable=mscIpiFrDnaRowStatusTable, mscIpiFrDnaCugRowStatusEntry=mscIpiFrDnaCugRowStatusEntry, mscIpiFrLcnDiscardRcvPackets=mscIpiFrLcnDiscardRcvPackets, mscIpiFrRRowStatusTable=mscIpiFrRRowStatusTable, mscIpiFrLcnVcCallReferenceNumberDecimal=mscIpiFrLcnVcCallReferenceNumberDecimal, mscIpiFrDnaCugRowStatus=mscIpiFrDnaCugRowStatus, mscIpiFrLcnAlarmStatus=mscIpiFrLcnAlarmStatus, mscIpiFrLcnOperEntry=mscIpiFrLcnOperEntry, mscIpiFrDnaRowStatus=mscIpiFrDnaRowStatus, mscIpiFrLcnVcEmissionPriorityToNetwork=mscIpiFrLcnVcEmissionPriorityToNetwork, mscIpiFrLcnVcPktRetryTimeouts=mscIpiFrLcnVcPktRetryTimeouts, mscIpiFrDnaIncomingOptionsTable=mscIpiFrDnaIncomingOptionsTable, mscIpiFrLcnAdminState=mscIpiFrLcnAdminState, mscIpiFrLcnVcSegmentSize=mscIpiFrLcnVcSegmentSize, mscIpiFrSrBGtyIpaEntry=mscIpiFrSrBGtyIpaEntry, mscIpiFrLcnDcNfaTable=mscIpiFrLcnDcNfaTable, mscIpiFrDnaServiceCategory=mscIpiFrDnaServiceCategory, mscIpiFrComponentName=mscIpiFrComponentName, mscIpiFrDnaCugIncCalls=mscIpiFrDnaCugIncCalls, mscIpiFrIpAddress=mscIpiFrIpAddress, mscIpiFrLcnVcFrmLossTimeouts=mscIpiFrLcnVcFrmLossTimeouts, mscIpiFrDnaComponentName=mscIpiFrDnaComponentName, mscIpiFrDnaStorageType=mscIpiFrDnaStorageType, mscIpiFrLcnComponentName=mscIpiFrLcnComponentName, mscIpiFrLcnRemoteIpAddress=mscIpiFrLcnRemoteIpAddress, mscIpiFrDnaCugType=mscIpiFrDnaCugType)
