#
# PySNMP MIB module BDCOM-QOS-PIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-QOS-PIB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
bdcomPibToMib, = mibBuilder.importSymbols("BDCOM-SMI", "bdcomPibToMib")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, iso, MibIdentifier, Bits, Counter32, Gauge32, ObjectIdentity, Unsigned32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "iso", "MibIdentifier", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "Unsigned32", "TimeTicks", "IpAddress")
MacAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention")
bdcomQosPIBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1))
bdcomQosPIBMIB.setRevisions(('2003-10-16 00:00',))
if mibBuilder.loadTexts: bdcomQosPIBMIB.setLastUpdated('200310160000Z')
if mibBuilder.loadTexts: bdcomQosPIBMIB.setOrganization('BDCOM, Inc.')
class Dscp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class QosLayer2Cos(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class QueueRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("oneQ", 1), ("twoQ", 2), ("threeQ", 3), ("fourQ", 4), ("eightQ", 8), ("sixteenQ", 16), ("thirtyTwoQ", 32), ("sixtyFourQ", 64))

class ThresholdSetRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))
    namedValues = NamedValues(("zeroT", 0), ("oneT", 1), ("twoT", 2), ("fourT", 4), ("eightT", 8))

class Percent(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class QosInterfaceQueueType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))
    namedValues = NamedValues(("oneQ1t", 1), ("oneQ2t", 2), ("oneQ4t", 3), ("oneQ8t", 4), ("twoQ1t", 5), ("twoQ2t", 6), ("twoQ4t", 7), ("twoQ8t", 8), ("threeQ1t", 9), ("threeQ2t", 10), ("threeQ4t", 11), ("threeQ8t", 12), ("fourQ1t", 13), ("fourQ2t", 14), ("fourQ4t", 15), ("fourQ8t", 16), ("eightQ1t", 17), ("eightQ2t", 18), ("eightQ4t", 19), ("eightQ8t", 20), ("sixteenQ1t", 21), ("sixteenQ2t", 22), ("sixteenQ4t", 23), ("sixtyfourQ1t", 24), ("sixtyfourQ2t", 25), ("sixtyfourQ4t", 26), ("oneP1Q0t", 27), ("oneP1Q4t", 28), ("oneP1Q8t", 29), ("oneP2Q1t", 30), ("oneP2Q2t", 31), ("oneP3Q1t", 32), ("oneP7Q8t", 33))

class QosInterfaceTypeCapabilities(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("unspecified", 0), ("inputL2Classification", 1), ("inputIpClassification", 2), ("outputL2Classification", 3), ("outputIpClassification", 4), ("inputPortClassification", 19), ("outputPortClassification", 20), ("inputUflowPolicing", 5), ("inputAggregatePolicing", 6), ("outputUflowPolicing", 7), ("outputAggregatePolicing", 8), ("policeByMarkingDown", 9), ("policeByDropping", 10), ("inputUflowShaping", 21), ("inputAggregateShaping", 22), ("outputUflowShaping", 23), ("outputAggregateShaping", 24), ("fifo", 11), ("wrr", 12), ("wfq", 13), ("cq", 14), ("pq", 15), ("cbwfq", 16), ("pqWrr", 25), ("pqCbwfq", 26), ("tailDrop", 17), ("wred", 18))

class RoleCombination(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PolicyInstanceId(TextualConvention, Unsigned32):
    status = 'current'

class Unsigned64(TextualConvention, Counter64):
    status = 'current'

qosPIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1))
qosDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2))
qosDevicePibIncarnationTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1), )
if mibBuilder.loadTexts: qosDevicePibIncarnationTable.setStatus('current')
qosDevicePibIncarnationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosDeviceIncarnationId"))
if mibBuilder.loadTexts: qosDevicePibIncarnationEntry.setStatus('current')
qosDeviceIncarnationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosDeviceIncarnationId.setStatus('current')
qosDevicePdpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePdpName.setStatus('current')
qosDevicePibIncarnation = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibIncarnation.setStatus('current')
qosDevicePibTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibTtl.setStatus('current')
qosDeviceAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2), )
if mibBuilder.loadTexts: qosDeviceAttributeTable.setStatus('current')
qosDeviceAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosDeviceAttributeId"))
if mibBuilder.loadTexts: qosDeviceAttributeEntry.setStatus('current')
qosDeviceAttributeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosDeviceAttributeId.setStatus('current')
qosDevicePepDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePepDomain.setStatus('current')
qosDevicePrimaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePrimaryPdp.setStatus('current')
qosDeviceSecondaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceSecondaryPdp.setStatus('current')
qosDeviceMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceMaxMessageSize.setStatus('current')
qosDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 2, 1, 6), Bits().clone(namedValues=NamedValues(("unspecified", 0), ("layer2Cos", 1), ("ipPrecedence", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceCapabilities.setStatus('current')
qosInterfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3), )
if mibBuilder.loadTexts: qosInterfaceTypeTable.setStatus('current')
qosInterfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosInterfaceTypeId"))
if mibBuilder.loadTexts: qosInterfaceTypeEntry.setStatus('current')
qosInterfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosInterfaceTypeId.setStatus('current')
qosInterfaceQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3, 1, 2), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceQueueType.setStatus('current')
qosInterfaceTypeRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeRoles.setStatus('current')
qosInterfaceTypeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 2, 3, 1, 4), QosInterfaceTypeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeCapabilities.setStatus('current')
qosDomainConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3))
qosDiffServMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 1), )
if mibBuilder.loadTexts: qosDiffServMappingTable.setStatus('current')
qosDiffServMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosDscp"))
if mibBuilder.loadTexts: qosDiffServMappingEntry.setStatus('current')
qosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 1, 1, 1), Dscp())
if mibBuilder.loadTexts: qosDscp.setStatus('current')
qosMarkedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 1, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosMarkedDscp.setStatus('current')
qosL2Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 1, 1, 3), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosL2Cos.setStatus('current')
qosCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 2), )
if mibBuilder.loadTexts: qosCosToDscpTable.setStatus('current')
qosCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 2, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosCosToDscpCos"))
if mibBuilder.loadTexts: qosCosToDscpEntry.setStatus('current')
qosCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 2, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: qosCosToDscpCos.setStatus('current')
qosCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 3, 2, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCosToDscpDscp.setStatus('current')
qosUnmatchedPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4))
qosUnmatchedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1), )
if mibBuilder.loadTexts: qosUnmatchedPolicyTable.setStatus('current')
qosUnmatchedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyId"))
if mibBuilder.loadTexts: qosUnmatchedPolicyEntry.setStatus('current')
qosUnmatchedPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosUnmatchedPolicyId.setStatus('current')
qosUnmatchedPolicyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyRole.setStatus('current')
qosUnmatchedPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("in", 0), ("out", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDirection.setStatus('current')
qosUnmatchedPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscp.setStatus('current')
qosUnmatchedPolicyDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscpTrusted.setStatus('current')
qosUnmatchPolMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 6), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchPolMicroFlowPolicerId.setStatus('current')
qosUnmatchedPolicyAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 4, 1, 1, 7), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyAggregateId.setStatus('current')
qosPolicer = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5))
qosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1), )
if mibBuilder.loadTexts: qosPolicerTable.setStatus('current')
qosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosPolicerId"))
if mibBuilder.loadTexts: qosPolicerEntry.setStatus('current')
qosPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosPolicerId.setStatus('current')
qosPolicerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerRate.setStatus('current')
qosPolicerNormalBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerNormalBurst.setStatus('current')
qosPolicerExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerExcessBurst.setStatus('current')
qosPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("drop", 0), ("mark", 1), ("shape", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerAction.setStatus('current')
qosAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 2), )
if mibBuilder.loadTexts: qosAggregateTable.setStatus('current')
qosAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 2, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosAggregateId"))
if mibBuilder.loadTexts: qosAggregateEntry.setStatus('current')
qosAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosAggregateId.setStatus('current')
qosAggregatePolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 5, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosAggregatePolicerId.setStatus('current')
qosMacQos = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6))
qosMacClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1), )
if mibBuilder.loadTexts: qosMacClassificationTable.setStatus('current')
qosMacClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosMacClassificationId"))
if mibBuilder.loadTexts: qosMacClassificationEntry.setStatus('current')
qosMacClassificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosMacClassificationId.setStatus('current')
qosDstMacVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacVlan.setStatus('current')
qosDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacAddress.setStatus('current')
qosDstMacCos = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 6, 1, 1, 4), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacCos.setStatus('current')
qosIpQos = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7))
qosIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1), )
if mibBuilder.loadTexts: qosIpAceTable.setStatus('current')
qosIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIpAceId"))
if mibBuilder.loadTexts: qosIpAceEntry.setStatus('current')
qosIpAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAceId.setStatus('current')
qosIpAceDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddr.setStatus('current')
qosIpAceDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddrMask.setStatus('current')
qosIpAceSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddr.setStatus('current')
qosIpAceSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddrMask.setStatus('current')
qosIpAceDscpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMin.setStatus('current')
qosIpAceDscpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 7), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMax.setStatus('current')
qosIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceProtocol.setStatus('current')
qosIpAceDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMin.setStatus('current')
qosIpAceDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMax.setStatus('current')
qosIpAceSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMin.setStatus('current')
qosIpAceSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMax.setStatus('current')
qosIpAcePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAcePermit.setStatus('current')
qosIpAclDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2), )
if mibBuilder.loadTexts: qosIpAclDefinitionTable.setStatus('current')
qosIpAclDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIpAclDefinitionId"))
if mibBuilder.loadTexts: qosIpAclDefinitionEntry.setStatus('current')
qosIpAclDefinitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAclDefinitionId.setStatus('current')
qosIpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclId.setStatus('current')
qosIpAceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceOrder.setStatus('current')
qosIpAclDefAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 2, 1, 4), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDefAceId.setStatus('current')
qosIpAclActionTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3), )
if mibBuilder.loadTexts: qosIpAclActionTable.setStatus('current')
qosIpAclActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIpAclActionId"))
if mibBuilder.loadTexts: qosIpAclActionEntry.setStatus('current')
qosIpAclActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAclActionId.setStatus('current')
qosIpAclActAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclActAclId.setStatus('current')
qosIpAclInterfaceRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceRoles.setStatus('current')
qosIpAclInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("in", 0), ("out", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceDirection.setStatus('current')
qosIpAclOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclOrder.setStatus('current')
qosIpAclDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscp.setStatus('current')
qosIpAclDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscpTrusted.setStatus('current')
qosIpAclMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 8), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclMicroFlowPolicerId.setStatus('current')
qosIpAclAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 7, 3, 1, 9), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclAggregateId.setStatus('current')
qosIfParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8))
qosIfSchedulingPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1), )
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTable.setStatus('current')
qosIfSchedulingPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfSchedulingPreferenceId"))
if mibBuilder.loadTexts: qosIfSchedulingPreferenceEntry.setStatus('current')
qosIfSchedulingPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfSchedulingPreferenceId.setStatus('current')
qosIfSchedulingRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingRoles.setStatus('current')
qosIfSchedulingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingPreference.setStatus('current')
qosIfSchedulingDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("weightedFairQueueing", 1), ("weightedRoundRobin", 2), ("customQueueing", 3), ("priorityQueueing", 4), ("classBasedWFQ", 5), ("fifo", 6), ("pqWrr", 7), ("pqCbwfq", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingDiscipline.setStatus('current')
qosIfSchedulingQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 1, 1, 5), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingQueueType.setStatus('current')
qosIfDropPreferenceTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2), )
if mibBuilder.loadTexts: qosIfDropPreferenceTable.setStatus('current')
qosIfDropPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfDropPreferenceId"))
if mibBuilder.loadTexts: qosIfDropPreferenceEntry.setStatus('current')
qosIfDropPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfDropPreferenceId.setStatus('current')
qosIfDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropRoles.setStatus('current')
qosIfDropPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropPreference.setStatus('current')
qosIfDropDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qosIfDropWRED", 1), ("qosIfDropTailDrop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropDiscipline.setStatus('current')
qosIfDscpAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3), )
if mibBuilder.loadTexts: qosIfDscpAssignmentTable.setStatus('current')
qosIfDscpAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfDscpAssignmentId"))
if mibBuilder.loadTexts: qosIfDscpAssignmentEntry.setStatus('current')
qosIfDscpAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfDscpAssignmentId.setStatus('current')
qosIfDscpRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscpRoles.setStatus('current')
qosIfQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 3), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueueType.setStatus('current')
qosIfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscp.setStatus('current')
qosIfQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueue.setStatus('current')
qosIfThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfThresholdSet.setStatus('current')
qosIfRedTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4), )
if mibBuilder.loadTexts: qosIfRedTable.setStatus('current')
qosIfRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfRedId"))
if mibBuilder.loadTexts: qosIfRedEntry.setStatus('current')
qosIfRedId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfRedId.setStatus('current')
qosIfRedRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedRoles.setStatus('current')
qosIfRedNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedNumThresholdSets.setStatus('current')
qosIfRedThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSet.setStatus('current')
qosIfRedThresholdSetLower = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetLower.setStatus('current')
qosIfRedThresholdSetUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 4, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetUpper.setStatus('current')
qosIfTailDropTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5), )
if mibBuilder.loadTexts: qosIfTailDropTable.setStatus('current')
qosIfTailDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfTailDropId"))
if mibBuilder.loadTexts: qosIfTailDropEntry.setStatus('current')
qosIfTailDropId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfTailDropId.setStatus('current')
qosIfTailDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropRoles.setStatus('current')
qosIfTailDropNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropNumThresholdSets.setStatus('current')
qosIfTailDropThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSet.setStatus('current')
qosIfTailDropThresholdSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 5, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSetValue.setStatus('current')
qosIfWeightsTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6), )
if mibBuilder.loadTexts: qosIfWeightsTable.setStatus('current')
qosIfWeightsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1), ).setIndexNames((0, "BDCOM-QOS-PIB-MIB", "qosIfWeightsId"))
if mibBuilder.loadTexts: qosIfWeightsEntry.setStatus('current')
qosIfWeightsId = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfWeightsId.setStatus('current')
qosIfWeightsRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsRoles.setStatus('current')
qosIfWeightsNumQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 3), QueueRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsNumQueues.setStatus('current')
qosIfWeightsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueue.setStatus('current')
qosIfWeightsDrainSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsDrainSize.setStatus('current')
qosIfWeightsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 8, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueueSize.setStatus('current')
qosPIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 1))
qosPIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2))
qosPIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 1, 1)).setObjects(("BDCOM-QOS-PIB-MIB", "qosDevicePibIncarnationTableGroup"), ("BDCOM-QOS-PIB-MIB", "qosDeviceAttributeTableGroup"), ("BDCOM-QOS-PIB-MIB", "qosInterfaceTypeTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosPIBCompliance = qosPIBCompliance.setStatus('current')
qosDevicePibIncarnationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 1)).setObjects(("BDCOM-QOS-PIB-MIB", "qosDevicePdpName"), ("BDCOM-QOS-PIB-MIB", "qosDevicePibIncarnation"), ("BDCOM-QOS-PIB-MIB", "qosDevicePibTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDevicePibIncarnationTableGroup = qosDevicePibIncarnationTableGroup.setStatus('current')
qosDeviceAttributeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 2)).setObjects(("BDCOM-QOS-PIB-MIB", "qosDevicePepDomain"), ("BDCOM-QOS-PIB-MIB", "qosDevicePrimaryPdp"), ("BDCOM-QOS-PIB-MIB", "qosDeviceSecondaryPdp"), ("BDCOM-QOS-PIB-MIB", "qosDeviceMaxMessageSize"), ("BDCOM-QOS-PIB-MIB", "qosDeviceCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDeviceAttributeTableGroup = qosDeviceAttributeTableGroup.setStatus('current')
qosInterfaceTypeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 3)).setObjects(("BDCOM-QOS-PIB-MIB", "qosInterfaceQueueType"), ("BDCOM-QOS-PIB-MIB", "qosInterfaceTypeRoles"), ("BDCOM-QOS-PIB-MIB", "qosInterfaceTypeCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosInterfaceTypeTableGroup = qosInterfaceTypeTableGroup.setStatus('current')
qosDiffServMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 4)).setObjects(("BDCOM-QOS-PIB-MIB", "qosMarkedDscp"), ("BDCOM-QOS-PIB-MIB", "qosL2Cos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDiffServMappingTableGroup = qosDiffServMappingTableGroup.setStatus('current')
qosCosToDscpTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 5)).setObjects(("BDCOM-QOS-PIB-MIB", "qosCosToDscpDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosCosToDscpTableGroup = qosCosToDscpTableGroup.setStatus('current')
qosUnmatchedPolicyTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 6)).setObjects(("BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyRole"), ("BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyDirection"), ("BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyDscp"), ("BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyDscpTrusted"), ("BDCOM-QOS-PIB-MIB", "qosUnmatchPolMicroFlowPolicerId"), ("BDCOM-QOS-PIB-MIB", "qosUnmatchedPolicyAggregateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosUnmatchedPolicyTableGroup = qosUnmatchedPolicyTableGroup.setStatus('current')
qosPolicerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 7)).setObjects(("BDCOM-QOS-PIB-MIB", "qosPolicerRate"), ("BDCOM-QOS-PIB-MIB", "qosPolicerNormalBurst"), ("BDCOM-QOS-PIB-MIB", "qosPolicerExcessBurst"), ("BDCOM-QOS-PIB-MIB", "qosPolicerAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosPolicerTableGroup = qosPolicerTableGroup.setStatus('current')
qosAggregateTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 8)).setObjects(("BDCOM-QOS-PIB-MIB", "qosAggregatePolicerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosAggregateTableGroup = qosAggregateTableGroup.setStatus('current')
qosMacClassificationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 9)).setObjects(("BDCOM-QOS-PIB-MIB", "qosDstMacVlan"), ("BDCOM-QOS-PIB-MIB", "qosDstMacAddress"), ("BDCOM-QOS-PIB-MIB", "qosDstMacCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosMacClassificationTableGroup = qosMacClassificationTableGroup.setStatus('current')
qosIpAceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 10)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIpAceDstAddr"), ("BDCOM-QOS-PIB-MIB", "qosIpAceDstAddrMask"), ("BDCOM-QOS-PIB-MIB", "qosIpAceSrcAddr"), ("BDCOM-QOS-PIB-MIB", "qosIpAceSrcAddrMask"), ("BDCOM-QOS-PIB-MIB", "qosIpAceDscpMin"), ("BDCOM-QOS-PIB-MIB", "qosIpAceDscpMax"), ("BDCOM-QOS-PIB-MIB", "qosIpAceProtocol"), ("BDCOM-QOS-PIB-MIB", "qosIpAceDstL4PortMin"), ("BDCOM-QOS-PIB-MIB", "qosIpAceDstL4PortMax"), ("BDCOM-QOS-PIB-MIB", "qosIpAceSrcL4PortMin"), ("BDCOM-QOS-PIB-MIB", "qosIpAceSrcL4PortMax"), ("BDCOM-QOS-PIB-MIB", "qosIpAcePermit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAceTableGroup = qosIpAceTableGroup.setStatus('current')
qosIpAclDefinitionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 11)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIpAclId"), ("BDCOM-QOS-PIB-MIB", "qosIpAceOrder"), ("BDCOM-QOS-PIB-MIB", "qosIpAclDefAceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAclDefinitionTableGroup = qosIpAclDefinitionTableGroup.setStatus('current')
qosIpAclActionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 12)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIpAclActAclId"), ("BDCOM-QOS-PIB-MIB", "qosIpAclInterfaceRoles"), ("BDCOM-QOS-PIB-MIB", "qosIpAclInterfaceDirection"), ("BDCOM-QOS-PIB-MIB", "qosIpAclOrder"), ("BDCOM-QOS-PIB-MIB", "qosIpAclDscp"), ("BDCOM-QOS-PIB-MIB", "qosIpAclDscpTrusted"), ("BDCOM-QOS-PIB-MIB", "qosIpAclMicroFlowPolicerId"), ("BDCOM-QOS-PIB-MIB", "qosIpAclAggregateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAclActionTableGroup = qosIpAclActionTableGroup.setStatus('current')
qosIfSchedulingPreferencesTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 13)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfSchedulingRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfSchedulingPreference"), ("BDCOM-QOS-PIB-MIB", "qosIfSchedulingDiscipline"), ("BDCOM-QOS-PIB-MIB", "qosIfSchedulingQueueType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfSchedulingPreferencesTableGroup = qosIfSchedulingPreferencesTableGroup.setStatus('current')
qosIfDropPreferenceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 14)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfDropRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfDropPreference"), ("BDCOM-QOS-PIB-MIB", "qosIfDropDiscipline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfDropPreferenceTableGroup = qosIfDropPreferenceTableGroup.setStatus('current')
qosIfDscpAssignmentTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 15)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfDscpRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfQueueType"), ("BDCOM-QOS-PIB-MIB", "qosIfDscp"), ("BDCOM-QOS-PIB-MIB", "qosIfQueue"), ("BDCOM-QOS-PIB-MIB", "qosIfThresholdSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfDscpAssignmentTableGroup = qosIfDscpAssignmentTableGroup.setStatus('current')
qosIfRedTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 16)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfRedRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfRedNumThresholdSets"), ("BDCOM-QOS-PIB-MIB", "qosIfRedThresholdSet"), ("BDCOM-QOS-PIB-MIB", "qosIfRedThresholdSetLower"), ("BDCOM-QOS-PIB-MIB", "qosIfRedThresholdSetUpper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfRedTableGroup = qosIfRedTableGroup.setStatus('current')
qosIfTailDropTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 17)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfTailDropRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfTailDropNumThresholdSets"), ("BDCOM-QOS-PIB-MIB", "qosIfTailDropThresholdSet"), ("BDCOM-QOS-PIB-MIB", "qosIfTailDropThresholdSetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfTailDropTableGroup = qosIfTailDropTableGroup.setStatus('current')
qosIfWeightsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 18, 2, 1, 1, 2, 18)).setObjects(("BDCOM-QOS-PIB-MIB", "qosIfWeightsRoles"), ("BDCOM-QOS-PIB-MIB", "qosIfWeightsNumQueues"), ("BDCOM-QOS-PIB-MIB", "qosIfWeightsQueue"), ("BDCOM-QOS-PIB-MIB", "qosIfWeightsDrainSize"), ("BDCOM-QOS-PIB-MIB", "qosIfWeightsQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfWeightsTableGroup = qosIfWeightsTableGroup.setStatus('current')
mibBuilder.exportSymbols("BDCOM-QOS-PIB-MIB", qosDeviceAttributeEntry=qosDeviceAttributeEntry, qosIpAclDefinitionId=qosIpAclDefinitionId, qosIpAceSrcL4PortMax=qosIpAceSrcL4PortMax, qosPolicerNormalBurst=qosPolicerNormalBurst, qosAggregatePolicerId=qosAggregatePolicerId, QosLayer2Cos=QosLayer2Cos, qosPolicerExcessBurst=qosPolicerExcessBurst, qosInterfaceTypeEntry=qosInterfaceTypeEntry, qosIpAclMicroFlowPolicerId=qosIpAclMicroFlowPolicerId, qosIfWeightsQueue=qosIfWeightsQueue, qosDeviceAttributeTableGroup=qosDeviceAttributeTableGroup, qosIfRedRoles=qosIfRedRoles, qosUnmatchedPolicyRole=qosUnmatchedPolicyRole, qosCosToDscpEntry=qosCosToDscpEntry, qosIpAceSrcAddrMask=qosIpAceSrcAddrMask, qosPolicerAction=qosPolicerAction, qosIfWeightsDrainSize=qosIfWeightsDrainSize, qosDstMacVlan=qosDstMacVlan, qosUnmatchedPolicyAggregateId=qosUnmatchedPolicyAggregateId, qosPolicerRate=qosPolicerRate, qosIpAclId=qosIpAclId, qosIfSchedulingPreferencesTable=qosIfSchedulingPreferencesTable, qosIfRedNumThresholdSets=qosIfRedNumThresholdSets, qosDiffServMappingTableGroup=qosDiffServMappingTableGroup, RoleCombination=RoleCombination, qosIfDscpAssignmentTable=qosIfDscpAssignmentTable, qosIfDropPreferenceTable=qosIfDropPreferenceTable, qosUnmatchedPolicyEntry=qosUnmatchedPolicyEntry, qosIfWeightsNumQueues=qosIfWeightsNumQueues, qosDiffServMappingTable=qosDiffServMappingTable, qosIfThresholdSet=qosIfThresholdSet, qosIfQueueType=qosIfQueueType, qosIfTailDropId=qosIfTailDropId, qosDomainConfig=qosDomainConfig, qosDevicePibIncarnation=qosDevicePibIncarnation, qosIfDscpRoles=qosIfDscpRoles, qosDscp=qosDscp, Dscp=Dscp, qosDstMacCos=qosDstMacCos, qosIfParameters=qosIfParameters, qosInterfaceQueueType=qosInterfaceQueueType, qosIpAclAggregateId=qosIpAclAggregateId, qosAggregateId=qosAggregateId, qosPIBGroups=qosPIBGroups, qosCosToDscpDscp=qosCosToDscpDscp, qosUnmatchedPolicyTableGroup=qosUnmatchedPolicyTableGroup, qosPolicerId=qosPolicerId, qosUnmatchedPolicy=qosUnmatchedPolicy, Percent=Percent, qosIpAceTable=qosIpAceTable, qosUnmatchedPolicyDscpTrusted=qosUnmatchedPolicyDscpTrusted, qosIfSchedulingRoles=qosIfSchedulingRoles, qosIfSchedulingPreference=qosIfSchedulingPreference, qosIpAceDstL4PortMax=qosIpAceDstL4PortMax, qosIfDscpAssignmentEntry=qosIfDscpAssignmentEntry, qosDeviceConfig=qosDeviceConfig, qosIfDscpAssignmentId=qosIfDscpAssignmentId, qosIfDropPreferenceId=qosIfDropPreferenceId, qosIfTailDropRoles=qosIfTailDropRoles, qosIfRedEntry=qosIfRedEntry, qosIpAceDstL4PortMin=qosIpAceDstL4PortMin, qosUnmatchPolMicroFlowPolicerId=qosUnmatchPolMicroFlowPolicerId, qosIfTailDropThresholdSet=qosIfTailDropThresholdSet, qosPIBConformance=qosPIBConformance, qosIpAceSrcAddr=qosIpAceSrcAddr, qosInterfaceTypeId=qosInterfaceTypeId, qosDstMacAddress=qosDstMacAddress, qosPolicer=qosPolicer, qosIfDropPreference=qosIfDropPreference, qosInterfaceTypeTableGroup=qosInterfaceTypeTableGroup, qosIfWeightsQueueSize=qosIfWeightsQueueSize, qosIpAclDefAceId=qosIpAclDefAceId, qosMarkedDscp=qosMarkedDscp, qosPIBCompliance=qosPIBCompliance, qosIfTailDropTable=qosIfTailDropTable, qosIfRedThresholdSetLower=qosIfRedThresholdSetLower, qosIpAclActAclId=qosIpAclActAclId, qosIpAclInterfaceDirection=qosIpAclInterfaceDirection, qosUnmatchedPolicyDirection=qosUnmatchedPolicyDirection, qosIpAclActionTableGroup=qosIpAclActionTableGroup, qosIfQueue=qosIfQueue, qosDeviceAttributeTable=qosDeviceAttributeTable, qosCosToDscpCos=qosCosToDscpCos, ThresholdSetRange=ThresholdSetRange, qosDeviceMaxMessageSize=qosDeviceMaxMessageSize, qosIfSchedulingPreferencesTableGroup=qosIfSchedulingPreferencesTableGroup, qosDeviceIncarnationId=qosDeviceIncarnationId, qosDiffServMappingEntry=qosDiffServMappingEntry, qosIfTailDropThresholdSetValue=qosIfTailDropThresholdSetValue, qosIfSchedulingPreferenceId=qosIfSchedulingPreferenceId, QosInterfaceQueueType=QosInterfaceQueueType, qosDeviceAttributeId=qosDeviceAttributeId, bdcomQosPIBMIB=bdcomQosPIBMIB, qosIpAceSrcL4PortMin=qosIpAceSrcL4PortMin, PolicyInstanceId=PolicyInstanceId, qosIfTailDropEntry=qosIfTailDropEntry, qosIfRedTable=qosIfRedTable, qosDeviceSecondaryPdp=qosDeviceSecondaryPdp, qosPIBCompliances=qosPIBCompliances, qosDevicePibTtl=qosDevicePibTtl, qosUnmatchedPolicyId=qosUnmatchedPolicyId, qosCosToDscpTableGroup=qosCosToDscpTableGroup, qosIpAceTableGroup=qosIpAceTableGroup, qosInterfaceTypeTable=qosInterfaceTypeTable, qosIpAclDscpTrusted=qosIpAclDscpTrusted, qosPolicerTableGroup=qosPolicerTableGroup, qosIfRedId=qosIfRedId, qosDevicePrimaryPdp=qosDevicePrimaryPdp, qosCosToDscpTable=qosCosToDscpTable, qosPolicerTable=qosPolicerTable, qosIfWeightsRoles=qosIfWeightsRoles, qosIfDscpAssignmentTableGroup=qosIfDscpAssignmentTableGroup, qosIfDscp=qosIfDscp, QueueRange=QueueRange, PYSNMP_MODULE_ID=bdcomQosPIBMIB, qosIfSchedulingQueueType=qosIfSchedulingQueueType, qosInterfaceTypeCapabilities=qosInterfaceTypeCapabilities, Unsigned64=Unsigned64, qosIpAceId=qosIpAceId, qosIfDropRoles=qosIfDropRoles, qosIpAclActionId=qosIpAclActionId, qosDevicePibIncarnationEntry=qosDevicePibIncarnationEntry, qosIpAceProtocol=qosIpAceProtocol, qosIpAceEntry=qosIpAceEntry, qosIfRedThresholdSet=qosIfRedThresholdSet, qosIfSchedulingDiscipline=qosIfSchedulingDiscipline, qosIpAceDscpMin=qosIpAceDscpMin, qosMacClassificationTableGroup=qosMacClassificationTableGroup, qosMacClassificationEntry=qosMacClassificationEntry, qosIfSchedulingPreferenceEntry=qosIfSchedulingPreferenceEntry, qosIfDropDiscipline=qosIfDropDiscipline, qosIpAclDefinitionTableGroup=qosIpAclDefinitionTableGroup, qosIfWeightsTableGroup=qosIfWeightsTableGroup, qosIfWeightsTable=qosIfWeightsTable, qosIfDropPreferenceTableGroup=qosIfDropPreferenceTableGroup, QosInterfaceTypeCapabilities=QosInterfaceTypeCapabilities, qosIpAcePermit=qosIpAcePermit, qosIfTailDropTableGroup=qosIfTailDropTableGroup, qosIpAclDscp=qosIpAclDscp, qosIfWeightsEntry=qosIfWeightsEntry, qosIpAclOrder=qosIpAclOrder, qosAggregateTable=qosAggregateTable, qosAggregateEntry=qosAggregateEntry, qosIpAceOrder=qosIpAceOrder, qosIpAclDefinitionEntry=qosIpAclDefinitionEntry, qosIfTailDropNumThresholdSets=qosIfTailDropNumThresholdSets, qosAggregateTableGroup=qosAggregateTableGroup, qosDevicePdpName=qosDevicePdpName, qosIpAceDstAddr=qosIpAceDstAddr, qosUnmatchedPolicyDscp=qosUnmatchedPolicyDscp, qosIpQos=qosIpQos, qosIpAclInterfaceRoles=qosIpAclInterfaceRoles, qosMacClassificationId=qosMacClassificationId, qosIpAceDstAddrMask=qosIpAceDstAddrMask, qosDevicePibIncarnationTableGroup=qosDevicePibIncarnationTableGroup, qosIpAclDefinitionTable=qosIpAclDefinitionTable, qosPolicerEntry=qosPolicerEntry, qosIpAclActionTable=qosIpAclActionTable, qosMacClassificationTable=qosMacClassificationTable, qosIpAceDscpMax=qosIpAceDscpMax, qosDevicePibIncarnationTable=qosDevicePibIncarnationTable, qosMacQos=qosMacQos, qosIfWeightsId=qosIfWeightsId, qosIfDropPreferenceEntry=qosIfDropPreferenceEntry, qosIfRedTableGroup=qosIfRedTableGroup, qosIpAclActionEntry=qosIpAclActionEntry, qosUnmatchedPolicyTable=qosUnmatchedPolicyTable, qosIfRedThresholdSetUpper=qosIfRedThresholdSetUpper, qosInterfaceTypeRoles=qosInterfaceTypeRoles, qosL2Cos=qosL2Cos, qosDevicePepDomain=qosDevicePepDomain, qosDeviceCapabilities=qosDeviceCapabilities)
