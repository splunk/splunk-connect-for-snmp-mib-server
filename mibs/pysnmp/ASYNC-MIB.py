#
# PySNMP MIB module ASYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASYNC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:13:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Counter64, Integer32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Gauge32, Unsigned32, IpAddress, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter64", "Integer32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pysmi_async = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 45)).setLabel("async")
asyncConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 45, 1))
asyncMon = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 45, 2))
asyncPcmcia = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 45, 3))
asyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 208, 45, 1, 1), )
if mibBuilder.loadTexts: asyncConfigTable.setStatus('mandatory')
asyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1), ).setIndexNames((0, "ASYNC-MIB", "asyncConfigIndex"))
if mibBuilder.loadTexts: asyncConfigEntry.setStatus('mandatory')
asyncConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncConfigIndex.setStatus('mandatory')
asyncConfigDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tone", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyncConfigDialMode.setStatus('mandatory')
asyncConfigAutoInit = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyncConfigAutoInit.setStatus('mandatory')
asyncConfigDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyncConfigDialString.setStatus('mandatory')
asyncConfigInitString1 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyncConfigInitString1.setStatus('mandatory')
asyncConfigInitString2 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyncConfigInitString2.setStatus('mandatory')
asyncMonTable = MibTable((1, 3, 6, 1, 4, 1, 208, 45, 2, 1), )
if mibBuilder.loadTexts: asyncMonTable.setStatus('mandatory')
asyncMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1), ).setIndexNames((0, "ASYNC-MIB", "asyncMonIndex"))
if mibBuilder.loadTexts: asyncMonEntry.setStatus('mandatory')
asyncMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonIndex.setStatus('mandatory')
asyncMonMode = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("noConfiguration", 1), ("noValidModem", 2), ("initializingModem", 3), ("resettingModem", 4), ("waitingForResetAck", 5), ("hangingUp", 6), ("waitingForHangupAck", 7), ("standBy", 8), ("acceptingCall", 9), ("connected", 10), ("reserved", 11), ("dialing", 12), ("waitingForAnswer", 13), ("other", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonMode.setStatus('mandatory')
asyncMonTransmitFailedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonTransmitFailedErrors.setStatus('mandatory')
asyncMonTransmitCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonTransmitCongestions.setStatus('mandatory')
asyncMonReceiveLostEndMarkers = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveLostEndMarkers.setStatus('mandatory')
asyncMonReceiveOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveOverflows.setStatus('mandatory')
asyncMonReceiveStuffingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveStuffingErrors.setStatus('mandatory')
asyncMonReceiveCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveCRCErrors.setStatus('mandatory')
asyncMonReceiveShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveShortPackets.setStatus('mandatory')
asyncMonReceiveLongPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveLongPackets.setStatus('mandatory')
asyncMonReceiveUartOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveUartOverrunErrors.setStatus('mandatory')
asyncMonReceiveUartParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveUartParityErrors.setStatus('mandatory')
asyncMonReceiveUartFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveUartFramingErrors.setStatus('mandatory')
asyncMonReceiveUartBreakErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonReceiveUartBreakErrors.setStatus('mandatory')
asyncMonCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncMonCallDirection.setStatus('mandatory')
asyncPcmciaTable = MibTable((1, 3, 6, 1, 4, 1, 208, 45, 3, 1), )
if mibBuilder.loadTexts: asyncPcmciaTable.setStatus('mandatory')
asyncPcmciaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1), ).setIndexNames((0, "ASYNC-MIB", "asyncPcmciaIndex"))
if mibBuilder.loadTexts: asyncPcmciaEntry.setStatus('mandatory')
asyncPcmciaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaIndex.setStatus('mandatory')
asyncPcmciaManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaManufacturerName.setStatus('mandatory')
asyncPcmciaProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaProductName.setStatus('mandatory')
asyncPcmciaProductVersionMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaProductVersionMajor.setStatus('mandatory')
asyncPcmciaProductVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaProductVersionMinor.setStatus('mandatory')
asyncPcmciaPcmciaSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 45, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyncPcmciaPcmciaSupported.setStatus('mandatory')
mibBuilder.exportSymbols("ASYNC-MIB", asyncConfigEntry=asyncConfigEntry, asyncPcmciaManufacturerName=asyncPcmciaManufacturerName, asyncConfigDialMode=asyncConfigDialMode, asyncMonTable=asyncMonTable, asyncMon=asyncMon, asyncMonIndex=asyncMonIndex, asyncMonTransmitFailedErrors=asyncMonTransmitFailedErrors, asyncConfigTable=asyncConfigTable, asyncPcmciaPcmciaSupported=asyncPcmciaPcmciaSupported, asyncMonEntry=asyncMonEntry, asyncMonMode=asyncMonMode, asyncPcmciaIndex=asyncPcmciaIndex, asyncMonReceiveUartFramingErrors=asyncMonReceiveUartFramingErrors, asyncMonCallDirection=asyncMonCallDirection, asyncMonTransmitCongestions=asyncMonTransmitCongestions, asyncMonReceiveUartOverrunErrors=asyncMonReceiveUartOverrunErrors, asyncPcmciaTable=asyncPcmciaTable, asyncConfigDialString=asyncConfigDialString, asyncMonReceiveOverflows=asyncMonReceiveOverflows, asyncMonReceiveUartBreakErrors=asyncMonReceiveUartBreakErrors, asyncConfig=asyncConfig, asyncPcmciaEntry=asyncPcmciaEntry, asyncMonReceiveShortPackets=asyncMonReceiveShortPackets, asyncMonReceiveLostEndMarkers=asyncMonReceiveLostEndMarkers, asyncConfigAutoInit=asyncConfigAutoInit, asyncMonReceiveLongPackets=asyncMonReceiveLongPackets, asyncPcmciaProductName=asyncPcmciaProductName, asyncConfigInitString1=asyncConfigInitString1, asyncConfigInitString2=asyncConfigInitString2, pysmi_async=pysmi_async, asyncPcmcia=asyncPcmcia, asyncPcmciaProductVersionMinor=asyncPcmciaProductVersionMinor, asyncMonReceiveCRCErrors=asyncMonReceiveCRCErrors, asyncPcmciaProductVersionMajor=asyncPcmciaProductVersionMajor, asyncMonReceiveStuffingErrors=asyncMonReceiveStuffingErrors, asyncConfigIndex=asyncConfigIndex, asyncMonReceiveUartParityErrors=asyncMonReceiveUartParityErrors)
