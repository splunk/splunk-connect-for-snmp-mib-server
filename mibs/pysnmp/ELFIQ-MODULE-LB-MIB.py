#
# PySNMP MIB module ELFIQ-MODULE-LB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELFIQ-MODULE-LB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
linkBalancerConformance, linkBalancer = mibBuilder.importSymbols("ELFIQ-INC-MIB", "linkBalancerConformance", "linkBalancer")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
Bits, MibIdentifier, iso, ModuleIdentity, Counter32, ObjectIdentity, Gauge32, TimeTicks, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "iso", "ModuleIdentity", "Counter32", "ObjectIdentity", "Gauge32", "TimeTicks", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
linkBalancerComponent = ModuleIdentity((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1))
if mibBuilder.loadTexts: linkBalancerComponent.setLastUpdated('200904190000Z')
if mibBuilder.loadTexts: linkBalancerComponent.setOrganization('Elfiq Inc.')
vfiInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1))
class VfiIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 5)

vfiNumber = MibScalar((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfiNumber.setStatus('current')
vfiTable = MibTable((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vfiTable.setStatus('current')
vfiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "ELFIQ-MODULE-LB-MIB", "vfiIndex"))
if mibBuilder.loadTexts: vfiEntry.setStatus('current')
vfiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 1), VfiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfiIndex.setStatus('current')
vfiDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfiDescr.setStatus('current')
vfiActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("desactivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfiActivated.setStatus('current')
vfiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resume", 1), ("pause", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfiStatus.setStatus('current')
totThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totThroughputIn.setStatus('current')
totThroughputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totThroughputOut.setStatus('current')
topTotThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topTotThroughputIn.setStatus('current')
topTotThroughputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topTotThroughputOut.setStatus('current')
numPackReceivedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPackReceivedOut.setStatus('current')
numBytesReceivedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesReceivedOut.setStatus('current')
numPackReceivedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPackReceivedIn.setStatus('current')
numBytesReceivedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesReceivedIn.setStatus('current')
numL2Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numL2Dropped.setStatus('current')
numIPDroppedShun = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIPDroppedShun.setStatus('current')
numIPDroppedAll = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIPDroppedAll.setStatus('current')
numIPFragNat = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIPFragNat.setStatus('current')
numTCPMSSModif = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTCPMSSModif.setStatus('current')
numTCPCheckError = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTCPCheckError.setStatus('current')
numUDPCheckError = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numUDPCheckError.setStatus('current')
totNumDropProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNumDropProbe.setStatus('current')
totNumDropProbePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totNumDropProbePerSec.setStatus('current')
lastPacketTimeTraver = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastPacketTimeTraver.setStatus('current')
topPacketTimeTraver = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topPacketTimeTraver.setStatus('current')
numLiveSessIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLiveSessIn.setStatus('current')
topNumLiveSessIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topNumLiveSessIn.setStatus('current')
samplingIntervalIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: samplingIntervalIn.setStatus('current')
numNewSessPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numNewSessPerSecIn.setStatus('current')
numEndSessPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEndSessPerSecIn.setStatus('current')
numHandledSessIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numHandledSessIn.setStatus('current')
numLiveSessOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLiveSessOut.setStatus('current')
topNumLiveSessOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topNumLiveSessOut.setStatus('current')
samplingIntervalOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: samplingIntervalOut.setStatus('current')
numNewSessPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numNewSessPerSecOut.setStatus('current')
numEndSessPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEndSessPerSecOut.setStatus('current')
numHandledSessOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numHandledSessOut.setStatus('current')
numDNSReqPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDNSReqPerSecOut.setStatus('current')
topNumDNSReqPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topNumDNSReqPerSecOut.setStatus('current')
numHandledDNSReqOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numHandledDNSReqOut.setStatus('current')
numDNSReqPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDNSReqPerSecIn.setStatus('current')
topNumDNSReqPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topNumDNSReqPerSecIn.setStatus('current')
numHandledDNSReqIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numHandledDNSReqIn.setStatus('current')
gmacInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2))
class GmacIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

gmacNumber = MibScalar((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacNumber.setStatus('current')
gmacTable = MibTable((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: gmacTable.setStatus('current')
gmacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "ELFIQ-MODULE-LB-MIB", "gmacIndex"))
if mibBuilder.loadTexts: gmacEntry.setStatus('current')
gmacVfiNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vfi0", 0), ("vfi1", 1), ("vfi2", 2), ("vfi3", 3), ("vfi4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacVfiNumber.setStatus('current')
gmacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 2), GmacIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacIndex.setStatus('current')
gmacName = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacName.setStatus('current')
gmacDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacDescr.setStatus('current')
gmacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("enable", 1), ("shutdown", 2), ("disable", 3), ("disableLinkFlap", 4), ("failure", 5), ("incomplete", 6), ("up", 7), ("down", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacStatus.setStatus('current')
gmacMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacMessage.setStatus('current')
gmacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacMode.setStatus('current')
gmacType = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacType.setStatus('current')
gmacIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacIPAddress.setStatus('current')
gmacNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacNetmask.setStatus('current')
gmacPrimaryNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacPrimaryNetwork.setStatus('current')
gmacMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacMtu.setStatus('current')
gmacProbeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeSource.setStatus('current')
gmacProbeSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeSourceType.setStatus('current')
gmacProbeDest = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeDest.setStatus('current')
gmacProbeDestInt = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeDestInt.setStatus('current')
gmacProbeFailThres = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeFailThres.setStatus('current')
gmacProbeFailTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeFailTimeout.setStatus('current')
gmacProbeSynSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeSynSeq.setStatus('current')
gmacProbeFail = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacProbeFail.setStatus('current')
gmacRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacRTT.setStatus('current')
gmacWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacWeight.setStatus('current')
gmacInThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacInThreshold.setStatus('current')
gmacOutThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacOutThreshold.setStatus('current')
gmacSpeedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacSpeedIn.setStatus('current')
gmacSpeedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacSpeedOut.setStatus('current')
gmacSampleInter = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacSampleInter.setStatus('current')
gmacSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacSampleCount.setStatus('current')
gmacL2No = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacL2No.setStatus('current')
gmacTotalIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacTotalIn.setStatus('current')
gmacTotalOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacTotalOut.setStatus('current')
gmacAvgIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacAvgIn.setStatus('current')
gmacAvgOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacAvgOut.setStatus('current')
gmacUsageIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacUsageIn.setStatus('current')
gmacUsageOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacUsageOut.setStatus('current')
gmacUsageInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacUsageInPercent.setStatus('current')
gmacUsageOutPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacUsageOutPercent.setStatus('current')
gmacTopSpeedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacTopSpeedIn.setStatus('current')
gmacTopSpeedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacTopSpeedOut.setStatus('current')
gmacQosActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("desactivated", 0), ("activated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacQosActivated.setStatus('current')
gmacBeforeQosUsageIn = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacBeforeQosUsageIn.setStatus('current')
gmacBeforeQosUsageOut = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 2, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmacBeforeQosUsageOut.setStatus('current')
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3))
class ArpIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

arpNumber = MibScalar((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 1), Integer32())
if mibBuilder.loadTexts: arpNumber.setStatus('current')
arpTable = MibTable((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: arpTable.setStatus('current')
arpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "ELFIQ-MODULE-LB-MIB", "arpIndex"))
if mibBuilder.loadTexts: arpEntry.setStatus('current')
arpVfiNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vfi0", 0), ("vfi1", 1), ("vfi2", 2), ("vfi3", 3), ("vfi4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpVfiNumber.setStatus('current')
arpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 2, 1, 2), ArpIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIndex.setStatus('current')
arpMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 19713, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpMessage.setStatus('current')
linkBalancerNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2))
gmacNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 1))
gmacStatusNotInitialiazed = NotificationType((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 1, 1)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacName"), ("ELFIQ-MODULE-LB-MIB", "gmacVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacStatus"), ("ELFIQ-MODULE-LB-MIB", "gmacMessage"))
if mibBuilder.loadTexts: gmacStatusNotInitialiazed.setStatus('current')
gmacStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 1, 2)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacName"), ("ELFIQ-MODULE-LB-MIB", "gmacVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacStatus"), ("ELFIQ-MODULE-LB-MIB", "gmacMessage"))
if mibBuilder.loadTexts: gmacStatusChanged.setStatus('current')
gmacInSaturated = NotificationType((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 1, 3)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacName"), ("ELFIQ-MODULE-LB-MIB", "gmacVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageInPercent"))
if mibBuilder.loadTexts: gmacInSaturated.setStatus('current')
gmacOutSaturated = NotificationType((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 1, 4)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacName"), ("ELFIQ-MODULE-LB-MIB", "gmacVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageOutPercent"))
if mibBuilder.loadTexts: gmacOutSaturated.setStatus('current')
vfiNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 2))
arpNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 3))
arpDeviceNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 19713, 1, 2, 2, 3, 1)).setObjects(("ELFIQ-MODULE-LB-MIB", "arpVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "arpMessage"))
if mibBuilder.loadTexts: arpDeviceNotResponding.setStatus('current')
vfiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 2, 2, 2))
gmacGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 2, 2, 3))
arpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 19713, 2, 2, 4))
vfiStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19713, 2, 2, 2, 1)).setObjects(("ELFIQ-MODULE-LB-MIB", "vfiNumber"), ("ELFIQ-MODULE-LB-MIB", "vfiIndex"), ("ELFIQ-MODULE-LB-MIB", "vfiDescr"), ("ELFIQ-MODULE-LB-MIB", "vfiActivated"), ("ELFIQ-MODULE-LB-MIB", "vfiStatus"), ("ELFIQ-MODULE-LB-MIB", "totThroughputIn"), ("ELFIQ-MODULE-LB-MIB", "totThroughputOut"), ("ELFIQ-MODULE-LB-MIB", "topTotThroughputIn"), ("ELFIQ-MODULE-LB-MIB", "topTotThroughputOut"), ("ELFIQ-MODULE-LB-MIB", "numPackReceivedOut"), ("ELFIQ-MODULE-LB-MIB", "numBytesReceivedOut"), ("ELFIQ-MODULE-LB-MIB", "numPackReceivedIn"), ("ELFIQ-MODULE-LB-MIB", "numBytesReceivedIn"), ("ELFIQ-MODULE-LB-MIB", "numL2Dropped"), ("ELFIQ-MODULE-LB-MIB", "numIPDroppedShun"), ("ELFIQ-MODULE-LB-MIB", "numIPDroppedAll"), ("ELFIQ-MODULE-LB-MIB", "numIPFragNat"), ("ELFIQ-MODULE-LB-MIB", "numTCPMSSModif"), ("ELFIQ-MODULE-LB-MIB", "numTCPCheckError"), ("ELFIQ-MODULE-LB-MIB", "numUDPCheckError"), ("ELFIQ-MODULE-LB-MIB", "totNumDropProbe"), ("ELFIQ-MODULE-LB-MIB", "totNumDropProbePerSec"), ("ELFIQ-MODULE-LB-MIB", "lastPacketTimeTraver"), ("ELFIQ-MODULE-LB-MIB", "topPacketTimeTraver"), ("ELFIQ-MODULE-LB-MIB", "numLiveSessIn"), ("ELFIQ-MODULE-LB-MIB", "topNumLiveSessIn"), ("ELFIQ-MODULE-LB-MIB", "samplingIntervalIn"), ("ELFIQ-MODULE-LB-MIB", "numNewSessPerSecIn"), ("ELFIQ-MODULE-LB-MIB", "numEndSessPerSecIn"), ("ELFIQ-MODULE-LB-MIB", "numHandledSessIn"), ("ELFIQ-MODULE-LB-MIB", "numLiveSessOut"), ("ELFIQ-MODULE-LB-MIB", "topNumLiveSessOut"), ("ELFIQ-MODULE-LB-MIB", "samplingIntervalOut"), ("ELFIQ-MODULE-LB-MIB", "numNewSessPerSecOut"), ("ELFIQ-MODULE-LB-MIB", "numEndSessPerSecOut"), ("ELFIQ-MODULE-LB-MIB", "numHandledSessOut"), ("ELFIQ-MODULE-LB-MIB", "numDNSReqPerSecOut"), ("ELFIQ-MODULE-LB-MIB", "topNumDNSReqPerSecOut"), ("ELFIQ-MODULE-LB-MIB", "numHandledDNSReqOut"), ("ELFIQ-MODULE-LB-MIB", "numDNSReqPerSecIn"), ("ELFIQ-MODULE-LB-MIB", "topNumDNSReqPerSecIn"), ("ELFIQ-MODULE-LB-MIB", "numHandledDNSReqIn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vfiStatsGroup = vfiStatsGroup.setStatus('current')
gmacNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19713, 2, 2, 3, 1)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "gmacIndex"), ("ELFIQ-MODULE-LB-MIB", "gmacName"), ("ELFIQ-MODULE-LB-MIB", "gmacDescr"), ("ELFIQ-MODULE-LB-MIB", "gmacStatus"), ("ELFIQ-MODULE-LB-MIB", "gmacMessage"), ("ELFIQ-MODULE-LB-MIB", "gmacMode"), ("ELFIQ-MODULE-LB-MIB", "gmacIPAddress"), ("ELFIQ-MODULE-LB-MIB", "gmacNetmask"), ("ELFIQ-MODULE-LB-MIB", "gmacType"), ("ELFIQ-MODULE-LB-MIB", "gmacMtu"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeSource"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeSourceType"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeDest"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeDestInt"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeFailThres"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeFailTimeout"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeSynSeq"), ("ELFIQ-MODULE-LB-MIB", "gmacProbeFail"), ("ELFIQ-MODULE-LB-MIB", "gmacRTT"), ("ELFIQ-MODULE-LB-MIB", "gmacWeight"), ("ELFIQ-MODULE-LB-MIB", "gmacInThreshold"), ("ELFIQ-MODULE-LB-MIB", "gmacOutThreshold"), ("ELFIQ-MODULE-LB-MIB", "gmacSpeedIn"), ("ELFIQ-MODULE-LB-MIB", "gmacSpeedOut"), ("ELFIQ-MODULE-LB-MIB", "gmacSampleInter"), ("ELFIQ-MODULE-LB-MIB", "gmacSampleCount"), ("ELFIQ-MODULE-LB-MIB", "gmacL2No"), ("ELFIQ-MODULE-LB-MIB", "gmacTotalIn"), ("ELFIQ-MODULE-LB-MIB", "gmacTotalOut"), ("ELFIQ-MODULE-LB-MIB", "gmacAvgIn"), ("ELFIQ-MODULE-LB-MIB", "gmacAvgOut"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageIn"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageOut"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageInPercent"), ("ELFIQ-MODULE-LB-MIB", "gmacUsageOutPercent"), ("ELFIQ-MODULE-LB-MIB", "gmacTopSpeedIn"), ("ELFIQ-MODULE-LB-MIB", "gmacTopSpeedOut"), ("ELFIQ-MODULE-LB-MIB", "gmacQosActivated"), ("ELFIQ-MODULE-LB-MIB", "gmacBeforeQosUsageIn"), ("ELFIQ-MODULE-LB-MIB", "gmacBeforeQosUsageOut"), ("ELFIQ-MODULE-LB-MIB", "gmacPrimaryNetwork"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmacNetworkGroup = gmacNetworkGroup.setStatus('current')
gmacNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 19713, 2, 2, 3, 2)).setObjects(("ELFIQ-MODULE-LB-MIB", "gmacStatusNotInitialiazed"), ("ELFIQ-MODULE-LB-MIB", "gmacStatusChanged"), ("ELFIQ-MODULE-LB-MIB", "gmacInSaturated"), ("ELFIQ-MODULE-LB-MIB", "gmacOutSaturated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmacNotificationGroup = gmacNotificationGroup.setStatus('current')
arpNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 19713, 2, 2, 4, 1)).setObjects(("ELFIQ-MODULE-LB-MIB", "arpVfiNumber"), ("ELFIQ-MODULE-LB-MIB", "arpIndex"), ("ELFIQ-MODULE-LB-MIB", "arpMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    arpNetworkGroup = arpNetworkGroup.setStatus('current')
arpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 19713, 2, 2, 4, 2)).setObjects(("ELFIQ-MODULE-LB-MIB", "arpDeviceNotResponding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    arpNotificationGroup = arpNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("ELFIQ-MODULE-LB-MIB", gmacNotification=gmacNotification, vfiTable=vfiTable, gmacBeforeQosUsageIn=gmacBeforeQosUsageIn, gmacNetworkGroup=gmacNetworkGroup, gmacUsageInPercent=gmacUsageInPercent, numTCPCheckError=numTCPCheckError, gmacQosActivated=gmacQosActivated, gmacName=gmacName, numDNSReqPerSecOut=numDNSReqPerSecOut, linkBalancerComponent=linkBalancerComponent, totThroughputIn=totThroughputIn, gmacStatus=gmacStatus, gmacUsageOutPercent=gmacUsageOutPercent, topTotThroughputOut=topTotThroughputOut, arpEntry=arpEntry, gmacMessage=gmacMessage, topTotThroughputIn=topTotThroughputIn, topNumDNSReqPerSecOut=topNumDNSReqPerSecOut, vfiInfo=vfiInfo, gmacSpeedIn=gmacSpeedIn, gmacStatusChanged=gmacStatusChanged, gmacInThreshold=gmacInThreshold, gmacProbeDestInt=gmacProbeDestInt, numTCPMSSModif=numTCPMSSModif, topNumDNSReqPerSecIn=topNumDNSReqPerSecIn, numNewSessPerSecOut=numNewSessPerSecOut, gmacProbeFailTimeout=gmacProbeFailTimeout, numPackReceivedOut=numPackReceivedOut, gmacL2No=gmacL2No, arpGroups=arpGroups, gmacIPAddress=gmacIPAddress, gmacTopSpeedIn=gmacTopSpeedIn, gmacBeforeQosUsageOut=gmacBeforeQosUsageOut, gmacMode=gmacMode, gmacEntry=gmacEntry, totNumDropProbe=totNumDropProbe, topNumLiveSessOut=topNumLiveSessOut, gmacIndex=gmacIndex, gmacAvgOut=gmacAvgOut, numHandledSessIn=numHandledSessIn, gmacPrimaryNetwork=gmacPrimaryNetwork, ArpIndex=ArpIndex, gmacGroups=gmacGroups, arpMessage=arpMessage, GmacIndex=GmacIndex, gmacProbeSynSeq=gmacProbeSynSeq, arpDeviceNotResponding=arpDeviceNotResponding, numDNSReqPerSecIn=numDNSReqPerSecIn, gmacSampleCount=gmacSampleCount, numHandledDNSReqIn=numHandledDNSReqIn, gmacOutSaturated=gmacOutSaturated, vfiGroups=vfiGroups, vfiIndex=vfiIndex, gmacType=gmacType, linkBalancerNotification=linkBalancerNotification, numPackReceivedIn=numPackReceivedIn, gmacTable=gmacTable, numL2Dropped=numL2Dropped, arpVfiNumber=arpVfiNumber, totNumDropProbePerSec=totNumDropProbePerSec, gmacUsageOut=gmacUsageOut, gmacMtu=gmacMtu, gmacProbeSource=gmacProbeSource, gmacNotificationGroup=gmacNotificationGroup, numHandledDNSReqOut=numHandledDNSReqOut, vfiEntry=vfiEntry, numIPDroppedShun=numIPDroppedShun, gmacNumber=gmacNumber, vfiNumber=vfiNumber, arpInfo=arpInfo, lastPacketTimeTraver=lastPacketTimeTraver, arpTable=arpTable, numIPDroppedAll=numIPDroppedAll, numEndSessPerSecIn=numEndSessPerSecIn, numBytesReceivedOut=numBytesReceivedOut, numLiveSessIn=numLiveSessIn, gmacProbeDest=gmacProbeDest, gmacWeight=gmacWeight, vfiNotification=vfiNotification, gmacProbeFail=gmacProbeFail, gmacDescr=gmacDescr, gmacProbeFailThres=gmacProbeFailThres, PYSNMP_MODULE_ID=linkBalancerComponent, gmacRTT=gmacRTT, vfiActivated=vfiActivated, gmacInSaturated=gmacInSaturated, numEndSessPerSecOut=numEndSessPerSecOut, samplingIntervalIn=samplingIntervalIn, gmacVfiNumber=gmacVfiNumber, gmacNetmask=gmacNetmask, VfiIndex=VfiIndex, topNumLiveSessIn=topNumLiveSessIn, numLiveSessOut=numLiveSessOut, gmacProbeSourceType=gmacProbeSourceType, numBytesReceivedIn=numBytesReceivedIn, totThroughputOut=totThroughputOut, gmacUsageIn=gmacUsageIn, arpNotification=arpNotification, numIPFragNat=numIPFragNat, numHandledSessOut=numHandledSessOut, gmacInfo=gmacInfo, gmacSampleInter=gmacSampleInter, vfiStatus=vfiStatus, samplingIntervalOut=samplingIntervalOut, arpNetworkGroup=arpNetworkGroup, arpIndex=arpIndex, numNewSessPerSecIn=numNewSessPerSecIn, vfiDescr=vfiDescr, gmacOutThreshold=gmacOutThreshold, gmacTotalOut=gmacTotalOut, gmacSpeedOut=gmacSpeedOut, arpNotificationGroup=arpNotificationGroup, gmacTopSpeedOut=gmacTopSpeedOut, gmacTotalIn=gmacTotalIn, arpNumber=arpNumber, vfiStatsGroup=vfiStatsGroup, numUDPCheckError=numUDPCheckError, gmacStatusNotInitialiazed=gmacStatusNotInitialiazed, gmacAvgIn=gmacAvgIn, topPacketTimeTraver=topPacketTimeTraver)
