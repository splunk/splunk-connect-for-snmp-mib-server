#
# PySNMP MIB module ASCEND-MIBATMATOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMATOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, Counter64, IpAddress, Integer32, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "IpAddress", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibatmVclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 39))
mibatmVplProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 38))
mibatmVclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 39, 1), )
if mibBuilder.loadTexts: mibatmVclProfileTable.setStatus('mandatory')
mibatmVclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Address-PhysicalAddress-Shelf"), (0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Address-PhysicalAddress-Slot"), (0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Address-PhysicalAddress-ItemNumber"), (0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Address-LogicalItem"), (0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Vpi"), (0, "ASCEND-MIBATMATOM-MIB", "atmVclProfile-Id-Vci"))
if mibBuilder.loadTexts: mibatmVclProfileEntry.setStatus('mandatory')
atmVclProfile_Id_Address_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 1), Integer32()).setLabel("atmVclProfile-Id-Address-PhysicalAddress-Shelf").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Address_PhysicalAddress_Shelf.setStatus('mandatory')
atmVclProfile_Id_Address_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 2), Integer32()).setLabel("atmVclProfile-Id-Address-PhysicalAddress-Slot").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Address_PhysicalAddress_Slot.setStatus('mandatory')
atmVclProfile_Id_Address_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 3), Integer32()).setLabel("atmVclProfile-Id-Address-PhysicalAddress-ItemNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Address_PhysicalAddress_ItemNumber.setStatus('mandatory')
atmVclProfile_Id_Address_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 4), Integer32()).setLabel("atmVclProfile-Id-Address-LogicalItem").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Address_LogicalItem.setStatus('mandatory')
atmVclProfile_Id_Vpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 5), Integer32()).setLabel("atmVclProfile-Id-Vpi").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Vpi.setStatus('mandatory')
atmVclProfile_Id_Vci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 6), Integer32()).setLabel("atmVclProfile-Id-Vci").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Id_Vci.setStatus('mandatory')
atmVclProfile_RxTrafficDesc = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 7), Integer32()).setLabel("atmVclProfile-RxTrafficDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_RxTrafficDesc.setStatus('mandatory')
atmVclProfile_TxTrafficDesc = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 8), Integer32()).setLabel("atmVclProfile-TxTrafficDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_TxTrafficDesc.setStatus('mandatory')
atmVclProfile_AalType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notPresent", 1), ("aal1", 2), ("aal34", 3), ("aal5", 4), ("aalOther", 5), ("aalUnknown", 6), ("aal2", 7)))).setLabel("atmVclProfile-AalType").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_AalType.setStatus('mandatory')
atmVclProfile_TxSduSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 10), Integer32()).setLabel("atmVclProfile-TxSduSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_TxSduSize.setStatus('mandatory')
atmVclProfile_RxSduSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 11), Integer32()).setLabel("atmVclProfile-RxSduSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_RxSduSize.setStatus('mandatory')
atmVclProfile_Aal5Encaps = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vcmuxRouted", 2), ("vcmuxBridged8023", 3), ("vcmuxBridged8025", 4), ("vcmuxBridged8026", 5), ("vcmuxLanemul8023", 6), ("vcmuxLanemul8025", 7), ("llcEncapsulation", 8), ("multiFrameRelaySscs", 9), ("otherEncapsulation", 10), ("unknownEncapsulation", 11)))).setLabel("atmVclProfile-Aal5Encaps").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_Aal5Encaps.setStatus('mandatory')
atmVclProfile_McastType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("p2p", 2), ("p2mproot", 3), ("p2mpleaf", 4)))).setLabel("atmVclProfile-McastType").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_McastType.setStatus('mandatory')
atmVclProfile_CallKind = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc", 2), ("svcIncoming", 3), ("svcOutgoing", 4), ("spvcInitiator", 5), ("spvcTarget", 6)))).setLabel("atmVclProfile-CallKind").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVclProfile_CallKind.setStatus('mandatory')
atmVclProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 39, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmVclProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVclProfile_Action_o.setStatus('mandatory')
mibatmVplProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 38, 1), )
if mibBuilder.loadTexts: mibatmVplProfileTable.setStatus('mandatory')
mibatmVplProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMATOM-MIB", "atmVplProfile-Id-Address-PhysicalAddress-Shelf"), (0, "ASCEND-MIBATMATOM-MIB", "atmVplProfile-Id-Address-PhysicalAddress-Slot"), (0, "ASCEND-MIBATMATOM-MIB", "atmVplProfile-Id-Address-PhysicalAddress-ItemNumber"), (0, "ASCEND-MIBATMATOM-MIB", "atmVplProfile-Id-Address-LogicalItem"), (0, "ASCEND-MIBATMATOM-MIB", "atmVplProfile-Id-Vpi"))
if mibBuilder.loadTexts: mibatmVplProfileEntry.setStatus('mandatory')
atmVplProfile_Id_Address_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 1), Integer32()).setLabel("atmVplProfile-Id-Address-PhysicalAddress-Shelf").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_Id_Address_PhysicalAddress_Shelf.setStatus('mandatory')
atmVplProfile_Id_Address_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 2), Integer32()).setLabel("atmVplProfile-Id-Address-PhysicalAddress-Slot").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_Id_Address_PhysicalAddress_Slot.setStatus('mandatory')
atmVplProfile_Id_Address_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 3), Integer32()).setLabel("atmVplProfile-Id-Address-PhysicalAddress-ItemNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_Id_Address_PhysicalAddress_ItemNumber.setStatus('mandatory')
atmVplProfile_Id_Address_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 4), Integer32()).setLabel("atmVplProfile-Id-Address-LogicalItem").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_Id_Address_LogicalItem.setStatus('mandatory')
atmVplProfile_Id_Vpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 5), Integer32()).setLabel("atmVplProfile-Id-Vpi").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_Id_Vpi.setStatus('mandatory')
atmVplProfile_RxTrafficDesc = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 6), Integer32()).setLabel("atmVplProfile-RxTrafficDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_RxTrafficDesc.setStatus('mandatory')
atmVplProfile_TxTrafficDesc = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 7), Integer32()).setLabel("atmVplProfile-TxTrafficDesc").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_TxTrafficDesc.setStatus('mandatory')
atmVplProfile_McastType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("p2p", 2), ("p2mproot", 3), ("p2mpleaf", 4)))).setLabel("atmVplProfile-McastType").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_McastType.setStatus('mandatory')
atmVplProfile_CallKind = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc", 2), ("svcIncoming", 3), ("svcOutgoing", 4), ("spvcInitiator", 5), ("spvcTarget", 6)))).setLabel("atmVplProfile-CallKind").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVplProfile_CallKind.setStatus('mandatory')
atmVplProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmVplProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmVplProfile_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBATMATOM-MIB", atmVplProfile_McastType=atmVplProfile_McastType, atmVclProfile_CallKind=atmVclProfile_CallKind, atmVclProfile_Aal5Encaps=atmVclProfile_Aal5Encaps, atmVplProfile_RxTrafficDesc=atmVplProfile_RxTrafficDesc, atmVclProfile_Id_Vci=atmVclProfile_Id_Vci, atmVplProfile_Id_Vpi=atmVplProfile_Id_Vpi, atmVplProfile_Id_Address_PhysicalAddress_Slot=atmVplProfile_Id_Address_PhysicalAddress_Slot, mibatmVplProfile=mibatmVplProfile, mibatmVclProfileTable=mibatmVclProfileTable, atmVclProfile_Id_Address_LogicalItem=atmVclProfile_Id_Address_LogicalItem, atmVclProfile_Id_Vpi=atmVclProfile_Id_Vpi, atmVclProfile_Id_Address_PhysicalAddress_Slot=atmVclProfile_Id_Address_PhysicalAddress_Slot, atmVplProfile_CallKind=atmVplProfile_CallKind, DisplayString=DisplayString, atmVclProfile_TxTrafficDesc=atmVclProfile_TxTrafficDesc, atmVclProfile_RxSduSize=atmVclProfile_RxSduSize, atmVclProfile_RxTrafficDesc=atmVclProfile_RxTrafficDesc, mibatmVplProfileTable=mibatmVplProfileTable, atmVplProfile_Id_Address_PhysicalAddress_Shelf=atmVplProfile_Id_Address_PhysicalAddress_Shelf, atmVclProfile_AalType=atmVclProfile_AalType, atmVplProfile_TxTrafficDesc=atmVplProfile_TxTrafficDesc, mibatmVclProfile=mibatmVclProfile, mibatmVclProfileEntry=mibatmVclProfileEntry, atmVclProfile_McastType=atmVclProfile_McastType, atmVplProfile_Id_Address_LogicalItem=atmVplProfile_Id_Address_LogicalItem, mibatmVplProfileEntry=mibatmVplProfileEntry, atmVplProfile_Action_o=atmVplProfile_Action_o, atmVplProfile_Id_Address_PhysicalAddress_ItemNumber=atmVplProfile_Id_Address_PhysicalAddress_ItemNumber, atmVclProfile_TxSduSize=atmVclProfile_TxSduSize, atmVclProfile_Action_o=atmVclProfile_Action_o, atmVclProfile_Id_Address_PhysicalAddress_ItemNumber=atmVclProfile_Id_Address_PhysicalAddress_ItemNumber, atmVclProfile_Id_Address_PhysicalAddress_Shelf=atmVclProfile_Id_Address_PhysicalAddress_Shelf)
