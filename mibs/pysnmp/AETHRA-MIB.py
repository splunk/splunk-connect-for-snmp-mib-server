#
# PySNMP MIB module AETHRA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AETHRA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, NotificationType, MibIdentifier, Bits, Unsigned32, TimeTicks, Counter64, ModuleIdentity, ObjectIdentity, Counter32, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "NotificationType", "MibIdentifier", "Bits", "Unsigned32", "TimeTicks", "Counter64", "ModuleIdentity", "ObjectIdentity", "Counter32", "Integer32", "NotificationType")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
aethra = MibIdentifier((1, 3, 6, 1, 4, 1, 7745))
atosnt = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5))
tools = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2))
dsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 5))
ifc = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 6))
fileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1))
fileTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("http", 3), ("file", 4), ("scp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferProtocol.setStatus('mandatory')
fileTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferFileName.setStatus('mandatory')
fileTransferServerName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferServerName.setStatus('mandatory')
fileTransferOption = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("firmware", 1), ("boot", 2), ("userconf", 3), ("logs", 4), ("package", 5), ("localfile", 6), ("welcome", 7), ("license", 8), ("certificate", 9), ("defaultconf", 10), ("bannerPre", 11), ("bannerPost", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferOption.setStatus('mandatory')
fileTransferStorageFileName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferStorageFileName.setStatus('mandatory')
fileTransferExec = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noaction", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferExec.setStatus('mandatory')
fileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransferStatus.setStatus('mandatory')
ping = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2))
pingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1))
pingHost = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingHost.setStatus('mandatory')
pingSize = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSize.setStatus('mandatory')
pingTries = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTries.setStatus('mandatory')
pingTTL = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTTL.setStatus('mandatory')
pingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTimeOut.setStatus('mandatory')
pingSource = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSource.setStatus('mandatory')
pingStart = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingStart.setStatus('mandatory')
pingStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingStatus.setStatus('mandatory')
pingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2))
pingTXpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingTXpacket.setStatus('mandatory')
pingRXpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingRXpacket.setStatus('mandatory')
pingLOSTpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingLOSTpacket.setStatus('mandatory')
pingMinRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMinRTT.setStatus('mandatory')
pingMaxRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMaxRTT.setStatus('mandatory')
pingAvgRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingAvgRTT.setStatus('mandatory')
systemLoglevel = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLoglevel.setStatus('mandatory')
systemDescription = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDescription.setStatus('mandatory')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('mandatory')
systemLocalDomain = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocalDomain.setStatus('mandatory')
systemDefaultTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultTftpServer.setStatus('mandatory')
systemTftpLocalAdd = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTftpLocalAdd.setStatus('mandatory')
systemDefaultFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultFtpServer.setStatus('mandatory')
systemFtpLocalAdd = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpLocalAdd.setStatus('mandatory')
systemFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpUsername.setStatus('mandatory')
systemFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpPassword.setStatus('mandatory')
systemAAAProfile = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAAAProfile.setStatus('mandatory')
systemAAALogTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAAALogTimeout.setStatus('mandatory')
systemBackupAuth = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBackupAuth.setStatus('mandatory')
systemScrollLine = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScrollLine.setStatus('mandatory')
systemKernelLogs = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemKernelLogs.setStatus('mandatory')
systemCryptedPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemCryptedPassword.setStatus('mandatory')
systemSave = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSave.setStatus('mandatory')
systemRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18))
restartOption = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("saveConf", 0), ("notSaveConf", 1), ("restoreDefaultConf", 2), ("restoreFactoryDefault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOption.setStatus('mandatory')
restartDelay = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartDelay.setStatus('mandatory')
restartExec = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartExec.setStatus('mandatory')
restartStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartStatus.setStatus('mandatory')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19))
performanceCpuAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg1min.setStatus('mandatory')
performanceCpuAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg5min.setStatus('mandatory')
performanceCpuAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg15min.setStatus('mandatory')
performanceDynMemLoad = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemLoad.setStatus('mandatory')
performanceDynMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemTotal.setStatus('mandatory')
performanceDynMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemFree.setStatus('mandatory')
systemDefaultScpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultScpServer.setStatus('mandatory')
systemScpUsername = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScpUsername.setStatus('mandatory')
systemScpPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScpPassword.setStatus('mandatory')
systemConsoleEnable = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConsoleEnable.setStatus('mandatory')
systemLogMsgRate = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogMsgRate.setStatus('mandatory')
xdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1))
xdslTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1), )
if mibBuilder.loadTexts: xdslTable.setStatus('mandatory')
xdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "xdslIndex"))
if mibBuilder.loadTexts: xdslEntry.setStatus('mandatory')
xdslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslIndex.setStatus('mandatory')
xdslLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslLinkStatus.setStatus('mandatory')
xdslTc = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslTc.setStatus('mandatory')
xdslUsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsAttenuation.setStatus('mandatory')
xdslDsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsAttenuation.setStatus('mandatory')
xdslUsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsNoiseMargin.setStatus('mandatory')
xdslDsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsNoiseMargin.setStatus('mandatory')
xdslUsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsCurrRate.setStatus('mandatory')
xdslDsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsCurrRate.setStatus('mandatory')
xdslModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslModulationType.setStatus('mandatory')
xdslUsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsMaxTheorRate.setStatus('mandatory')
xdslDsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsMaxTheorRate.setStatus('mandatory')
xdslUsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsTotBytes.setStatus('mandatory')
xdslDsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsTotBytes.setStatus('mandatory')
xdslNeTotCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslNeTotCrcErr.setStatus('mandatory')
xdslNeShowtimeCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslNeShowtimeCrcErr.setStatus('mandatory')
shdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2))
shdslTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1), )
if mibBuilder.loadTexts: shdslTable.setStatus('mandatory')
shdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "shdslIndex"))
if mibBuilder.loadTexts: shdslEntry.setStatus('mandatory')
shdslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslIndex.setStatus('mandatory')
shdslPhyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslPhyStatus.setStatus('mandatory')
shdslTc = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslTc.setStatus('mandatory')
shdslUsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsAttenuation.setStatus('mandatory')
shdslDsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsAttenuation.setStatus('mandatory')
shdslUsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsNoiseMargin.setStatus('mandatory')
shdslDsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsNoiseMargin.setStatus('mandatory')
shdslUsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsCurrRate.setStatus('mandatory')
shdslDsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsCurrRate.setStatus('mandatory')
shdslModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslModulationType.setStatus('mandatory')
shdslUsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsMaxTheorRate.setStatus('mandatory')
shdslDsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsMaxTheorRate.setStatus('mandatory')
shdslUsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsTotBytes.setStatus('mandatory')
shdslDsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsTotBytes.setStatus('mandatory')
shdslNeTotCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslNeTotCrcErr.setStatus('mandatory')
shdslNeShowtimeCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslNeShowtimeCrcErr.setStatus('mandatory')
shdslUsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsPower.setStatus('mandatory')
shdslDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsPower.setStatus('mandatory')
trunk = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1))
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1), )
if mibBuilder.loadTexts: trunkTable.setStatus('mandatory')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('mandatory')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('mandatory')
trunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkName.setStatus('mandatory')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkType.setStatus('mandatory')
trunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("registered", 1), ("unregistered", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkEnable.setStatus('mandatory')
trunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkDescription.setStatus('mandatory')
trunkUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserName.setStatus('mandatory')
trunkRegHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRegHost.setStatus('mandatory')
trunkProxyHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkProxyHost.setStatus('mandatory')
trunkIfcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIfcStatus.setStatus('mandatory')
trunkRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRegStatus.setStatus('mandatory')
trunkMsgWait = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMsgWait.setStatus('mandatory')
trunkIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2), )
if mibBuilder.loadTexts: trunkIsdnTable.setStatus('mandatory')
trunkIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkIsdnIndex"))
if mibBuilder.loadTexts: trunkIsdnEntry.setStatus('mandatory')
trunkIsdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnIndex.setStatus('mandatory')
trunkIsdnName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnName.setStatus('mandatory')
trunkIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnType.setStatus('mandatory')
trunkIsdnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkIsdnEnable.setStatus('mandatory')
trunkIsdnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnDescription.setStatus('mandatory')
trunkIsdnB1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnB1Status.setStatus('mandatory')
trunkIsdnB2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnB2Status.setStatus('mandatory')
trunkFxoTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3), )
if mibBuilder.loadTexts: trunkFxoTable.setStatus('mandatory')
trunkFxoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkFxoIndex"))
if mibBuilder.loadTexts: trunkFxoEntry.setStatus('mandatory')
trunkFxoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoIndex.setStatus('mandatory')
trunkFxoName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoName.setStatus('mandatory')
trunkFxoType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoType.setStatus('mandatory')
trunkFxoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkFxoEnable.setStatus('mandatory')
trunkFxoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoDescription.setStatus('mandatory')
trunkFxoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoStatus.setStatus('mandatory')
userTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2))
usTermPotsTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1), )
if mibBuilder.loadTexts: usTermPotsTable.setStatus('mandatory')
usTermPotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermPotsIndex"))
if mibBuilder.loadTexts: usTermPotsEntry.setStatus('mandatory')
usTermPotsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsIndex.setStatus('mandatory')
usTermPotsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermPotsEnable.setStatus('mandatory')
usTermPotsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsDescription.setStatus('mandatory')
usTermPotsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsStatus.setStatus('mandatory')
usTermPotsDspSlic = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsDspSlic.setStatus('mandatory')
usTermISDNTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2), )
if mibBuilder.loadTexts: usTermISDNTable.setStatus('mandatory')
usTermISDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermISDNIndex"))
if mibBuilder.loadTexts: usTermISDNEntry.setStatus('mandatory')
usTermISDNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermISDNIndex.setStatus('mandatory')
usTermISDNEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermISDNEnable.setStatus('mandatory')
usTermISDNDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermISDNDescription.setStatus('mandatory')
usTermIsdnStatusB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermIsdnStatusB1.setStatus('mandatory')
usTermIsdnStatusB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermIsdnStatusB2.setStatus('mandatory')
usTermDectTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3), )
if mibBuilder.loadTexts: usTermDectTable.setStatus('mandatory')
usTermDectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermDectIndex"))
if mibBuilder.loadTexts: usTermDectEntry.setStatus('mandatory')
usTermDectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectIndex.setStatus('mandatory')
usTermDectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermDectEnable.setStatus('mandatory')
usTermDectDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectDescription.setStatus('mandatory')
usTermDectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectStatus.setStatus('mandatory')
usTermDectDspSlic = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectDspSlic.setStatus('mandatory')
voipMaxConnection = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipMaxConnection.setStatus('mandatory')
genericTrap = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 1)).setObjects(("AETHRA-MIB", "genericError"))
if mibBuilder.loadTexts: genericTrap.setStatus('current')
genericError = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericError.setStatus('mandatory')
interfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 3)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: interfaceUp.setStatus('current')
interfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 4)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: interfaceDown.setStatus('current')
trunkRegistered = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 5)).setObjects(("AETHRA-MIB", "trunkName"))
if mibBuilder.loadTexts: trunkRegistered.setStatus('current')
trunkUnregistered = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 6)).setObjects(("AETHRA-MIB", "trunkName"))
if mibBuilder.loadTexts: trunkUnregistered.setStatus('current')
mgmtAccesses = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7))
mgmtUser = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtUser.setStatus('mandatory')
mgmtPrivilege = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPrivilege.setStatus('mandatory')
mgmtTime = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtTime.setStatus('mandatory')
mgmtType = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("web", 3), ("snmp", 4), ("ssh", 5), ("tr069", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtType.setStatus('mandatory')
mgmtAddress = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtAddress.setStatus('mandatory')
mgmtLogin = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 6)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtPrivilege"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtLogin.setStatus('current')
mgmtLogout = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 7)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtPrivilege"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtLogout.setStatus('current')
mgmtChange = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 8)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtChange.setStatus('current')
ifcTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1), )
if mibBuilder.loadTexts: ifcTable.setStatus('mandatory')
ifcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifcEntry.setStatus('mandatory')
ifcName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcName.setStatus('mandatory')
ifcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcDescr.setStatus('mandatory')
ifcType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcType.setStatus('mandatory')
ifcPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcPhysAddress.setStatus('mandatory')
ifcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcMtu.setStatus('mandatory')
ifcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcSpeed.setStatus('mandatory')
ifcRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcRxRate.setStatus('mandatory')
ifcTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcTxRate.setStatus('mandatory')
mibBuilder.exportSymbols("AETHRA-MIB", xdslUsCurrRate=xdslUsCurrRate, trunkRegHost=trunkRegHost, pingSource=pingSource, xdslUsNoiseMargin=xdslUsNoiseMargin, genericError=genericError, systemLocalDomain=systemLocalDomain, systemName=systemName, trunkEntry=trunkEntry, fileTransferStorageFileName=fileTransferStorageFileName, genericTrap=genericTrap, fileTransferFileName=fileTransferFileName, restartExec=restartExec, trunkIsdnB2Status=trunkIsdnB2Status, shdslDsNoiseMargin=shdslDsNoiseMargin, trunkFxoName=trunkFxoName, xdslDsCurrRate=xdslDsCurrRate, trunkUnregistered=trunkUnregistered, systemFtpPassword=systemFtpPassword, trunkIsdnType=trunkIsdnType, pingLOSTpacket=pingLOSTpacket, atosnt=atosnt, systemScpUsername=systemScpUsername, trunkIsdnTable=trunkIsdnTable, usTermDectDescription=usTermDectDescription, systemKernelLogs=systemKernelLogs, usTermDectDspSlic=usTermDectDspSlic, shdslTc=shdslTc, usTermISDNEnable=usTermISDNEnable, xdslDsAttenuation=xdslDsAttenuation, ifcMtu=ifcMtu, pingMinRTT=pingMinRTT, usTermDectIndex=usTermDectIndex, dsl=dsl, systemDescription=systemDescription, systemDefaultTftpServer=systemDefaultTftpServer, systemCryptedPassword=systemCryptedPassword, usTermPotsDspSlic=usTermPotsDspSlic, systemSave=systemSave, fileTransferStatus=fileTransferStatus, restartOption=restartOption, usTermISDNTable=usTermISDNTable, ifcTable=ifcTable, shdslPhyStatus=shdslPhyStatus, trunkIsdnB1Status=trunkIsdnB1Status, shdslUsNoiseMargin=shdslUsNoiseMargin, usTermDectEnable=usTermDectEnable, xdslUsMaxTheorRate=xdslUsMaxTheorRate, mgmtAddress=mgmtAddress, systemFtpUsername=systemFtpUsername, trunkIsdnEntry=trunkIsdnEntry, xdslNeTotCrcErr=xdslNeTotCrcErr, performanceDynMemFree=performanceDynMemFree, trunkName=trunkName, xdslTc=xdslTc, xdslTable=xdslTable, xdsl=xdsl, ifc=ifc, aethra=aethra, systemRestart=systemRestart, shdslNeTotCrcErr=shdslNeTotCrcErr, trunkType=trunkType, trunkMsgWait=trunkMsgWait, shdslNeShowtimeCrcErr=shdslNeShowtimeCrcErr, usTermPotsDescription=usTermPotsDescription, shdslTable=shdslTable, shdslDsAttenuation=shdslDsAttenuation, mgmtAccesses=mgmtAccesses, system=system, xdslIndex=xdslIndex, shdsl=shdsl, ifcName=ifcName, ifcEntry=ifcEntry, trunkIfcStatus=trunkIfcStatus, performanceDynMemLoad=performanceDynMemLoad, xdslUsAttenuation=xdslUsAttenuation, usTermIsdnStatusB1=usTermIsdnStatusB1, trunkRegStatus=trunkRegStatus, performanceCpuAvg1min=performanceCpuAvg1min, xdslModulationType=xdslModulationType, trunkIsdnDescription=trunkIsdnDescription, trunkFxoEntry=trunkFxoEntry, pingTXpacket=pingTXpacket, usTermISDNDescription=usTermISDNDescription, xdslDsTotBytes=xdslDsTotBytes, tools=tools, shdslUsAttenuation=shdslUsAttenuation, ifcType=ifcType, xdslNeShowtimeCrcErr=xdslNeShowtimeCrcErr, performanceDynMemTotal=performanceDynMemTotal, usTermPotsTable=usTermPotsTable, systemAAALogTimeout=systemAAALogTimeout, xdslUsTotBytes=xdslUsTotBytes, pingParameters=pingParameters, traps=traps, mgmtUser=mgmtUser, pingSize=pingSize, trunkFxoDescription=trunkFxoDescription, usTermPotsEntry=usTermPotsEntry, ifcPhysAddress=ifcPhysAddress, ifcSpeed=ifcSpeed, performanceCpuAvg5min=performanceCpuAvg5min, fileTransferServerName=fileTransferServerName, pingAvgRTT=pingAvgRTT, ifcDescr=ifcDescr, ping=ping, shdslEntry=shdslEntry, performanceCpuAvg15min=performanceCpuAvg15min, trunk=trunk, pingStart=pingStart, systemDefaultScpServer=systemDefaultScpServer, fileTransfer=fileTransfer, xdslDsNoiseMargin=xdslDsNoiseMargin, shdslIndex=shdslIndex, usTermDectStatus=usTermDectStatus, fileTransferOption=fileTransferOption, systemConsoleEnable=systemConsoleEnable, shdslDsPower=shdslDsPower, shdslDsCurrRate=shdslDsCurrRate, shdslUsCurrRate=shdslUsCurrRate, performance=performance, mgmtTime=mgmtTime, usTermDectTable=usTermDectTable, trunkIsdnName=trunkIsdnName, shdslUsTotBytes=shdslUsTotBytes, fileTransferExec=fileTransferExec, trunkFxoType=trunkFxoType, usTermDectEntry=usTermDectEntry, systemLogMsgRate=systemLogMsgRate, interfaceDown=interfaceDown, shdslDsTotBytes=shdslDsTotBytes, ifcTxRate=ifcTxRate, ifcRxRate=ifcRxRate, systemLoglevel=systemLoglevel, shdslUsPower=shdslUsPower, shdslDsMaxTheorRate=shdslDsMaxTheorRate, trunkFxoEnable=trunkFxoEnable, systemAAAProfile=systemAAAProfile, systemDefaultFtpServer=systemDefaultFtpServer, userTerminal=userTerminal, trunkEnable=trunkEnable, restartStatus=restartStatus, systemTftpLocalAdd=systemTftpLocalAdd, pingMaxRTT=pingMaxRTT, mgmtLogin=mgmtLogin, voipMaxConnection=voipMaxConnection, mgmtType=mgmtType, usTermPotsEnable=usTermPotsEnable, shdslModulationType=shdslModulationType, trunkFxoIndex=trunkFxoIndex, pingTimeOut=pingTimeOut, voip=voip, restartDelay=restartDelay, interfaceUp=interfaceUp, xdslLinkStatus=xdslLinkStatus, trunkRegistered=trunkRegistered, systemScpPassword=systemScpPassword, pingTries=pingTries, pingHost=pingHost, fileTransferProtocol=fileTransferProtocol, pingStatistics=pingStatistics, xdslDsMaxTheorRate=xdslDsMaxTheorRate, shdslUsMaxTheorRate=shdslUsMaxTheorRate, trunkIsdnIndex=trunkIsdnIndex, systemScrollLine=systemScrollLine, trunkTable=trunkTable, trunkIndex=trunkIndex, trunkUserName=trunkUserName, trunkIsdnEnable=trunkIsdnEnable, usTermPotsIndex=usTermPotsIndex, usTermIsdnStatusB2=usTermIsdnStatusB2, mgmtChange=mgmtChange, usTermISDNEntry=usTermISDNEntry, pingTTL=pingTTL, systemFtpLocalAdd=systemFtpLocalAdd, pingStatus=pingStatus, xdslEntry=xdslEntry, systemBackupAuth=systemBackupAuth, trunkDescription=trunkDescription, usTermISDNIndex=usTermISDNIndex, trunkFxoStatus=trunkFxoStatus, pingRXpacket=pingRXpacket, mgmtPrivilege=mgmtPrivilege, trunkProxyHost=trunkProxyHost, mgmtLogout=mgmtLogout, usTermPotsStatus=usTermPotsStatus, trunkFxoTable=trunkFxoTable)
