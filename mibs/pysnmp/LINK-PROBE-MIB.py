#
# PySNMP MIB module LINK-PROBE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINK-PROBE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, enterprises, NotificationType, TimeTicks, ObjectIdentity, Integer32, NotificationType, Bits, iso, MibIdentifier, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "enterprises", "NotificationType", "TimeTicks", "ObjectIdentity", "Integer32", "NotificationType", "Bits", "iso", "MibIdentifier", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netQuest = MibIdentifier((1, 3, 6, 1, 4, 1, 568))
link_probe = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8)).setLabel("link-probe")
probeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1))
probeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 2))
probePerform = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 3))
probeTrafficShape = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 4))
probeHistorical = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 5))
probeIntervalStartTime = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 6))
dbuConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 7))
deviceStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 8))
trapAcknowledgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 9))
chan_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 1)).setLabel("chan-config")
lmi_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 2)).setLabel("lmi-config")
pro_fun_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 3)).setLabel("pro-fun-config")
trap_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 4)).setLabel("trap-config")
pvc_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 5)).setLabel("pvc-config")
file_download_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 6)).setLabel("file-download-config")
net_management_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 7)).setLabel("net-management-config")
lmi_Operation = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setLabel("lmi-Operation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_Operation.setStatus('mandatory')
lmi_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc-0", 1), ("pvc-1023", 2)))).setLabel("lmi-DLCI").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_DLCI.setStatus('mandatory')
inband_IP_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("inband-IP-DLCI").setMaxAccess("readwrite")
if mibBuilder.loadTexts: inband_IP_DLCI.setStatus('mandatory')
ip_Encapsu = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw-ip", 1), ("ietf-ip", 2), ("snap-ip", 3)))).setLabel("ip-Encapsu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip_Encapsu.setStatus('mandatory')
interface_Speed = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("n64-kbps", 1), ("n128-kbps", 2), ("n192-kbps", 3), ("n256-kbps", 4), ("n320-kbps", 5), ("n384-kbps", 6), ("n448-kbps", 7), ("n512-kbps", 8), ("n576-kbps", 9), ("n640-kbps", 10), ("n704-kbps", 11), ("n768-kbps", 12), ("n832-kbps", 13), ("n896-kbps", 14), ("n960-kbps", 15), ("n1024-kbps", 16), ("n1088-kbps", 17), ("n1152-kbps", 18), ("n1216-kbps", 19), ("n1280-kbps", 20), ("n1344-kbps", 21), ("n1408-kbps", 22), ("n1472-kbps", 23), ("n1536-kbps", 24), ("n1600-kbps", 25), ("n1664-kbps", 26), ("n1728-kbps", 27), ("n1792-kbps", 28), ("n1856-kbps", 29), ("n1920-kbps", 30), ("n1984-kbps", 31), ("n2048-kbps", 32)))).setLabel("interface-Speed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: interface_Speed.setStatus('mandatory')
nvram_update = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("write-to-nvram", 1), ("restoreParam", 2)))).setLabel("nvram-update").setMaxAccess("writeonly")
if mibBuilder.loadTexts: nvram_update.setStatus('mandatory')
lmi_type = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annex-a", 1), ("annex-d", 2), ("lmi-rev1", 3)))).setLabel("lmi-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_type.setStatus('mandatory')
max_Info_Length = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 4000))).setLabel("max-Info-Length").setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Info_Length.setStatus('mandatory')
n391_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("n391-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n391_Counter.setStatus('mandatory')
n392_Net_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n392-Net-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392_Net_Counter.setStatus('mandatory')
n392_User_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n392-User-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392_User_Counter.setStatus('mandatory')
n393_Net_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n393-Net-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393_Net_Counter.setStatus('mandatory')
n393_User_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n393-User-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393_User_Counter.setStatus('mandatory')
t391_Timer = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setLabel("t391-Timer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: t391_Timer.setStatus('mandatory')
t392_Timer = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setLabel("t392-Timer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: t392_Timer.setStatus('mandatory')
lMI_Controller = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("update-para", 1), ("restoreParam", 2)))).setLabel("lMI-Controller").setMaxAccess("writeonly")
if mibBuilder.loadTexts: lMI_Controller.setStatus('mandatory')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
probe_Mode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generator", 1), ("responder", 2), ("both", 3), ("disabled", 4)))).setLabel("probe-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: probe_Mode.setStatus('mandatory')
poll_Period = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setLabel("poll-Period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: poll_Period.setStatus('mandatory')
sys_current_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("sys-current-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sys_current_time.setStatus('mandatory')
current_intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("current-intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: current_intv_start_time.setStatus('mandatory')
pvc_Count = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setLabel("pvc-Count").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Count.setStatus('mandatory')
probeTokenSize = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(19, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeTokenSize.setStatus('mandatory')
pvc_add = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-add").setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvc_add.setStatus('mandatory')
pvc_delete = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-delete").setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvc_delete.setStatus('mandatory')
pvc_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10), ).setLabel("pvc-Table")
if mibBuilder.loadTexts: pvc_Table.setStatus('mandatory')
pvc_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1), ).setLabel("pvc-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-Table-Index"))
if mibBuilder.loadTexts: pvc_Entry.setStatus('mandatory')
pvc_Table_Index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-Table-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Table_Index.setStatus('mandatory')
pvc_Operation = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc-not-probed", 1), ("pvc-in-waiting", 2), ("pvc-probed", 3)))).setLabel("pvc-Operation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvc_Operation.setStatus('mandatory')
pvc_Remote_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 3), IpAddress()).setLabel("pvc-Remote-IpAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Remote_IpAddress.setStatus('mandatory')
alternateVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateVersion.setStatus('mandatory')
bypassStatus = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bypass-off", 1), ("bypass-on", 2), ("bypass-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bypassStatus.setStatus('mandatory')
trapCtlGlobal = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCtlGlobal.setStatus('mandatory')
trapCtlSpecific = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCtlSpecific.setStatus('mandatory')
pvcNotAvailThreshDCE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNotAvailThreshDCE.setStatus('mandatory')
pvcNotAvailThreshDTE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNotAvailThreshDTE.setStatus('mandatory')
pvcAveRTDThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAveRTDThresh.setStatus('mandatory')
frChanUtilizThreshToDTE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanUtilizThreshToDTE.setStatus('mandatory')
frChanUtilizThreshToDCE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanUtilizThreshToDCE.setStatus('mandatory')
pvcBecnThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBecnThresh.setStatus('mandatory')
pvcFecnThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcFecnThresh.setStatus('mandatory')
pvcUtilToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUtilToDTEThresh.setStatus('mandatory')
pvcUtilToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUtilToDCEThresh.setStatus('mandatory')
chanLoadToDTEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("chanLoadToDTEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadToDTEThresh_realTime.setStatus('mandatory')
chanLoadToDCEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("chanLoadToDCEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadToDCEThresh_realTime.setStatus('mandatory')
chanLoadThreshToDTE_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("chanLoadThreshToDTE-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadThreshToDTE_realTimeRange.setStatus('mandatory')
chanLoadThreshToDCE_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("chanLoadThreshToDCE-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadThreshToDCE_realTimeRange.setStatus('mandatory')
pvcRTDThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcRTDThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRTDThresh_realTime.setStatus('mandatory')
pvcRTDThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcRTDThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRTDThresh_realTimeRange.setStatus('mandatory')
pvcLoadToDTEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcLoadToDTEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTime.setStatus('mandatory')
pvcLoadToDCEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcLoadToDCEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTime.setStatus('mandatory')
pvcLoadToDTEThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcLoadToDTEThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTimeRange.setStatus('mandatory')
pvcLoadToDCEThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcLoadToDCEThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTimeRange.setStatus('mandatory')
pvcTC = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcTC.setStatus('mandatory')
pvcCirEir_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2), ).setLabel("pvcCirEir-Table")
if mibBuilder.loadTexts: pvcCirEir_Table.setStatus('mandatory')
pvcCirEir_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1), ).setLabel("pvcCirEir-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcCirEir-Table-Index"))
if mibBuilder.loadTexts: pvcCirEir_Entry.setStatus('mandatory')
pvcCirEir_Table_Index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcCirEir-Table-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCirEir_Table_Index.setStatus('mandatory')
pvcCirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDTE.setStatus('mandatory')
pvcCirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDCE.setStatus('mandatory')
pvcEirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDTE.setStatus('mandatory')
pvcEirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDCE.setStatus('mandatory')
sourceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpAddress.setStatus('mandatory')
sourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileName.setStatus('mandatory')
sourceFileMode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("netAscii", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileMode.setStatus('mandatory')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("getfile", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tftpAction.setStatus('mandatory')
changeVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameVersion", 1), ("switchVersion", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeVersion.setStatus('mandatory')
softwareReset = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: softwareReset.setStatus('mandatory')
tftpState = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle-ok", 1), ("active", 2), ("idle-failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpState.setStatus('mandatory')
ipInterface = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pppIpInterface", 1), ("ethernetIpInterface", 2), ("privateInbandIpInterface", 3), ("userInbandIpInterface", 4), ("isdnIpInterface", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterface.setStatus('mandatory')
inbandIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbandIpAddress.setStatus('mandatory')
outbandIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outbandIpAddress.setStatus('mandatory')
routerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerIpAddress.setStatus('mandatory')
subnetmaskIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetmaskIpAddress.setStatus('mandatory')
chStCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 2, 1))
dte_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 1), Counter32()).setLabel("dte-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_ch_curr.setStatus('mandatory')
dce_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 2), Counter32()).setLabel("dce-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_ch_curr.setStatus('mandatory')
dte_octets_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 3), Counter32()).setLabel("dte-octets-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_ch_curr.setStatus('mandatory')
dce_octets_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 4), Counter32()).setLabel("dce-octets-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_ch_curr.setStatus('mandatory')
lmi_enq_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 5), Counter32()).setLabel("lmi-enq-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_tx_ch_curr.setStatus('mandatory')
lmi_resp_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 6), Counter32()).setLabel("lmi-resp-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_tx_ch_curr.setStatus('mandatory')
lmi_enq_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 7), Counter32()).setLabel("lmi-enq-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_rx_ch_curr.setStatus('mandatory')
lmi_resp_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 8), Counter32()).setLabel("lmi-resp-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_rx_ch_curr.setStatus('mandatory')
fecn_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 9), Counter32()).setLabel("fecn-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_ch_curr.setStatus('mandatory')
becn_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 10), Counter32()).setLabel("becn-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_ch_curr.setStatus('mandatory')
ip_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 11), Counter32()).setLabel("ip-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_tx_ch_curr.setStatus('mandatory')
ip_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 12), Counter32()).setLabel("ip-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_rx_ch_curr.setStatus('mandatory')
poll_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 13), Counter32()).setLabel("poll-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_ch_curr.setStatus('mandatory')
resp_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 14), Counter32()).setLabel("resp-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_ch_curr.setStatus('mandatory')
poll_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 15), Counter32()).setLabel("poll-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_ch_curr.setStatus('mandatory')
resp_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 16), Counter32()).setLabel("resp-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_ch_curr.setStatus('mandatory')
chStInterval_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 2), ).setLabel("chStInterval-Table")
if mibBuilder.loadTexts: chStInterval_Table.setStatus('mandatory')
chStInterval_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1), ).setLabel("chStInterval-Entry").setIndexNames((0, "LINK-PROBE-MIB", "chStIntv-index"))
if mibBuilder.loadTexts: chStInterval_Entry.setStatus('mandatory')
chStIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("chStIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: chStIntv_index.setStatus('mandatory')
dte_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 2), Counter32()).setLabel("dte-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_ch_intv.setStatus('mandatory')
dce_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 3), Counter32()).setLabel("dce-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_ch_intv.setStatus('mandatory')
dte_octets_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 4), Counter32()).setLabel("dte-octets-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_ch_intv.setStatus('mandatory')
dce_octets_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 5), Counter32()).setLabel("dce-octets-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_ch_intv.setStatus('mandatory')
lmi_enq_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 6), Counter32()).setLabel("lmi-enq-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_tx_ch_intv.setStatus('mandatory')
lmi_resp_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 7), Counter32()).setLabel("lmi-resp-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_tx_ch_intv.setStatus('mandatory')
lmi_enq_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 8), Counter32()).setLabel("lmi-enq-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_rx_ch_intv.setStatus('mandatory')
lmi_resp_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 9), Counter32()).setLabel("lmi-resp-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_rx_ch_intv.setStatus('mandatory')
fecn_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 10), Counter32()).setLabel("fecn-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_ch_intv.setStatus('mandatory')
becn_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 11), Counter32()).setLabel("becn-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_ch_intv.setStatus('mandatory')
ip_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 12), Counter32()).setLabel("ip-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_tx_ch_intv.setStatus('mandatory')
ip_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 13), Counter32()).setLabel("ip-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_rx_ch_intv.setStatus('mandatory')
poll_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 14), Counter32()).setLabel("poll-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_ch_intv.setStatus('mandatory')
resp_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 15), Counter32()).setLabel("resp-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_ch_intv.setStatus('mandatory')
poll_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 16), Counter32()).setLabel("poll-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_ch_intv.setStatus('mandatory')
resp_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 17), Counter32()).setLabel("resp-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_ch_intv.setStatus('mandatory')
pvcStCurrent_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 3), ).setLabel("pvcStCurrent-Table")
if mibBuilder.loadTexts: pvcStCurrent_Table.setStatus('mandatory')
pvcStCurrent_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1), ).setLabel("pvcStCurrent-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-number-index-curr"))
if mibBuilder.loadTexts: pvcStCurrent_Entry.setStatus('mandatory')
pvc_number_index_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-number-index-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_number_index_curr.setStatus('mandatory')
dte_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 2), Counter32()).setLabel("dte-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_pvc_curr.setStatus('mandatory')
dce_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 3), Counter32()).setLabel("dce-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_pvc_curr.setStatus('mandatory')
dte_octets_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 4), Counter32()).setLabel("dte-octets-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_pvc_curr.setStatus('mandatory')
dce_octets_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 5), Counter32()).setLabel("dce-octets-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_pvc_curr.setStatus('mandatory')
dte_frames_with_DE_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 6), Counter32()).setLabel("dte-frames-with-DE-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_curr.setStatus('mandatory')
dce_frames_with_DE_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 7), Counter32()).setLabel("dce-frames-with-DE-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_curr.setStatus('mandatory')
fecn_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 8), Counter32()).setLabel("fecn-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_pvc_curr.setStatus('mandatory')
becn_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 9), Counter32()).setLabel("becn-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_pvc_curr.setStatus('mandatory')
poll_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 10), Counter32()).setLabel("poll-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_pvc_curr.setStatus('mandatory')
resp_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 11), Counter32()).setLabel("resp-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_pvc_curr.setStatus('mandatory')
poll_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 12), Counter32()).setLabel("poll-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_pvc_curr.setStatus('mandatory')
resp_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 13), Counter32()).setLabel("resp-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_pvc_curr.setStatus('mandatory')
pvc_loop_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback", 1), ("no-loopback", 2)))).setLabel("pvc-loop-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loop_curr.setStatus('mandatory')
ip_poll_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 15), Counter32()).setLabel("ip-poll-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_tx_pvc_curr.setStatus('mandatory')
ip_resp_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 16), Counter32()).setLabel("ip-resp-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_tx_pvc_curr.setStatus('mandatory')
ip_poll_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 17), Counter32()).setLabel("ip-poll-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_rx_pvc_curr.setStatus('mandatory')
ip_resp_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 18), Counter32()).setLabel("ip-resp-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_rx_pvc_curr.setStatus('mandatory')
ipRtrRxLatTxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatTxPvcCurr.setStatus('mandatory')
ipRtrRxLatRxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatRxPvcCurr.setStatus('mandatory')
ipRtrTxLatTxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatTxPvcCurr.setStatus('mandatory')
ipRtrTxLatRxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatRxPvcCurr.setStatus('mandatory')
pvcStInterval_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 4), ).setLabel("pvcStInterval-Table")
if mibBuilder.loadTexts: pvcStInterval_Table.setStatus('mandatory')
pvcStInterval_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1), ).setLabel("pvcStInterval-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-number-index-intv"), (0, "LINK-PROBE-MIB", "pvcStIntv-index"))
if mibBuilder.loadTexts: pvcStInterval_Entry.setStatus('mandatory')
pvc_number_index_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-number-index-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_number_index_intv.setStatus('mandatory')
pvcStIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcStIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStIntv_index.setStatus('mandatory')
dte_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 3), Counter32()).setLabel("dte-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_pvc_intv.setStatus('mandatory')
dce_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 4), Counter32()).setLabel("dce-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_pvc_intv.setStatus('mandatory')
dte_octets_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 5), Counter32()).setLabel("dte-octets-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_pvc_intv.setStatus('mandatory')
dce_octets_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 6), Counter32()).setLabel("dce-octets-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_pvc_intv.setStatus('mandatory')
dte_frames_with_DE_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 7), Counter32()).setLabel("dte-frames-with-DE-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_intv.setStatus('mandatory')
dce_frames_with_DE_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 8), Counter32()).setLabel("dce-frames-with-DE-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_intv.setStatus('mandatory')
fecn_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 9), Counter32()).setLabel("fecn-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_pvc_intv.setStatus('mandatory')
becn_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 10), Counter32()).setLabel("becn-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_pvc_intv.setStatus('mandatory')
poll_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 11), Counter32()).setLabel("poll-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_pvc_intv.setStatus('mandatory')
resp_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 12), Counter32()).setLabel("resp-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_pvc_intv.setStatus('mandatory')
poll_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 13), Counter32()).setLabel("poll-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_pvc_intv.setStatus('mandatory')
resp_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 14), Counter32()).setLabel("resp-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_pvc_intv.setStatus('mandatory')
pvc_loop_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 15), Integer32()).setLabel("pvc-loop-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loop_intv.setStatus('mandatory')
ip_poll_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 16), Counter32()).setLabel("ip-poll-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_tx_pvc_intv.setStatus('mandatory')
ip_resp_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 17), Counter32()).setLabel("ip-resp-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_tx_pvc_intv.setStatus('mandatory')
ip_poll_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 18), Counter32()).setLabel("ip-poll-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_rx_pvc_intv.setStatus('mandatory')
ip_resp_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 19), Counter32()).setLabel("ip-resp-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_rx_pvc_intv.setStatus('mandatory')
ipRtrRxLatTxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatTxPvcIntv.setStatus('mandatory')
ipRtrRxLatRxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatRxPvcIntv.setStatus('mandatory')
ipRtrTxLatTxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatTxPvcIntv.setStatus('mandatory')
ipRtrTxLatRxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatRxPvcIntv.setStatus('mandatory')
chanPerfCurr = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 3, 1))
chan_unvail_toDte_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unvail-toDte-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unvail_toDte_curr.setStatus('mandatory')
chan_unavail_toDce_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDce-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDce_curr.setStatus('mandatory')
chan_user_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_tx_curr.setStatus('mandatory')
chan_user_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_rx_curr.setStatus('mandatory')
chan_total_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_tx_curr.setStatus('mandatory')
chan_total_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_rx_curr.setStatus('mandatory')
chanPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 2), ).setLabel("chanPerfIntv-Table")
if mibBuilder.loadTexts: chanPerfIntv_Table.setStatus('mandatory')
chanPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1), ).setLabel("chanPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "chanPerfIntv-index"))
if mibBuilder.loadTexts: chanPerfIntv_Entry.setStatus('mandatory')
chanPerfIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("chanPerfIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: chanPerfIntv_index.setStatus('mandatory')
chan_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDte_intv.setStatus('mandatory')
chan_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDce_intv.setStatus('mandatory')
chan_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_tx_intv.setStatus('mandatory')
chan_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_rx_intv.setStatus('mandatory')
chan_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_tx_intv.setStatus('mandatory')
chan_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_rx_intv.setStatus('mandatory')
chan_min_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_tx_intv.setStatus('mandatory')
chan_min_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_tx_time_intv.setStatus('mandatory')
chan_min_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_rx_intv.setStatus('mandatory')
chan_min_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_rx_time_intv.setStatus('mandatory')
chan_min_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_tx_intv.setStatus('mandatory')
chan_min_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_tx_time_intv.setStatus('mandatory')
chan_min_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_rx_intv.setStatus('mandatory')
chan_min_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_rx_time_intv.setStatus('mandatory')
chan_max_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_tx_intv.setStatus('mandatory')
chan_max_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_tx_time_intv.setStatus('mandatory')
chan_max_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_rx_intv.setStatus('mandatory')
chan_max_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_rx_time_intv.setStatus('mandatory')
chan_max_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_tx_intv.setStatus('mandatory')
chan_max_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_tx_time_intv.setStatus('mandatory')
chan_max_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_rx_intv.setStatus('mandatory')
chan_max_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_rx_time_intv.setStatus('mandatory')
pvcPerfCurr_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 3), ).setLabel("pvcPerfCurr-Table")
if mibBuilder.loadTexts: pvcPerfCurr_Table.setStatus('mandatory')
pvcPerfCurr_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1), ).setLabel("pvcPerfCurr-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcPerfCurr-num-index"))
if mibBuilder.loadTexts: pvcPerfCurr_Entry.setStatus('mandatory')
pvcPerfCurr_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcPerfCurr-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurr_num_index.setStatus('mandatory')
pvc_tx_time_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 2), Integer32()).setLabel("pvc-tx-time-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_tx_time_curr.setStatus('mandatory')
pvc_unavail_toDte = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDte").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDte.setStatus('mandatory')
pvc_unavail_toDce = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDce").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDce.setStatus('mandatory')
pvc_user_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_tx_curr.setStatus('mandatory')
pvc_user_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_rx_curr.setStatus('mandatory')
pvc_total_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_tx_curr.setStatus('mandatory')
pvc_total_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_rx_curr.setStatus('mandatory')
pvc_CIR_toNet_exceed_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 9), Integer32()).setLabel("pvc-CIR-toNet-exceed-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_curr.setStatus('mandatory')
pvc_EIR_toNet_exceed_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 10), Integer32()).setLabel("pvc-EIR-toNet-exceed-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_curr.setStatus('mandatory')
pvc_loss_frame_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 11), Integer32()).setLabel("pvc-loss-frame-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_tx_curr.setStatus('mandatory')
pvc_loss_frame_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 12), Integer32()).setLabel("pvc-loss-frame-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_rx_curr.setStatus('mandatory')
pvc_ip_tx_time_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 13), Integer32()).setLabel("pvc-ip-tx-time-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_ip_tx_time_curr.setStatus('mandatory')
pvcIpRtrRxLatTxTimeCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeCurr.setStatus('mandatory')
pvcIpRtrTxLatTxTimeCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeCurr.setStatus('mandatory')
pvcPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 4), ).setLabel("pvcPerfIntv-Table")
if mibBuilder.loadTexts: pvcPerfIntv_Table.setStatus('mandatory')
pvcPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1), ).setLabel("pvcPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcPerfIntv-num-index"), (0, "LINK-PROBE-MIB", "pvcPerf-intv-index"))
if mibBuilder.loadTexts: pvcPerfIntv_Entry.setStatus('mandatory')
pvcPerfIntv_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcPerfIntv-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntv_num_index.setStatus('mandatory')
pvcPerf_intv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcPerf-intv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerf_intv_index.setStatus('mandatory')
pvc_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 3), Integer32()).setLabel("pvc-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_tx_time_intv.setStatus('mandatory')
pvc_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDte_intv.setStatus('mandatory')
pvc_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDce_intv.setStatus('mandatory')
pvc_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_tx_intv.setStatus('mandatory')
pvc_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_rx_intv.setStatus('mandatory')
pvc_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_tx_intv.setStatus('mandatory')
pvc_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_rx_intv.setStatus('mandatory')
pvc_CIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 10), Integer32()).setLabel("pvc-CIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_intv.setStatus('mandatory')
pvc_EIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 11), Integer32()).setLabel("pvc-EIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_intv.setStatus('mandatory')
pvc_loss_frame_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("not-avail", 255)))).setLabel("pvc-loss-frame-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_tx_intv.setStatus('mandatory')
pvc_loss_frame_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("not-avail", 255)))).setLabel("pvc-loss-frame-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_rx_intv.setStatus('mandatory')
pvc_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 14), Integer32()).setLabel("pvc-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_ip_tx_time_intv.setStatus('mandatory')
pvcIpRtrRxLatTxTimeIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeIntv.setStatus('mandatory')
pvcIpRtrTxLatTxTimeIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeIntv.setStatus('mandatory')
pvc_min_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 17), Integer32()).setLabel("pvc-min-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_tx_time_intv.setStatus('mandatory')
pvc_min_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_tx_time_time_intv.setStatus('mandatory')
pvc_min_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_tx_intv.setStatus('mandatory')
pvc_min_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_tx_time_intv.setStatus('mandatory')
pvc_min_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_rx_intv.setStatus('mandatory')
pvc_min_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_rx_time_intv.setStatus('mandatory')
pvc_min_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_tx_intv.setStatus('mandatory')
pvc_min_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_tx_time_intv.setStatus('mandatory')
pvc_min_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_rx_intv.setStatus('mandatory')
pvc_min_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_rx_time_intv.setStatus('mandatory')
pvc_min_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 27), Integer32()).setLabel("pvc-min-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_ip_tx_time_intv.setStatus('mandatory')
pvc_min_ip_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-ip-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_ip_tx_time_time_intv.setStatus('mandatory')
pvc_max_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 29), Integer32()).setLabel("pvc-max-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_tx_time_intv.setStatus('mandatory')
pvc_max_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_tx_time_time_intv.setStatus('mandatory')
pvc_max_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_tx_intv.setStatus('mandatory')
pvc_max_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_tx_time_intv.setStatus('mandatory')
pvc_max_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_rx_intv.setStatus('mandatory')
pvc_max_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_rx_time_intv.setStatus('mandatory')
pvc_max_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_tx_intv.setStatus('mandatory')
pvc_max_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_tx_time_intv.setStatus('mandatory')
pvc_max_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_rx_intv.setStatus('mandatory')
pvc_max_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_rx_time_intv.setStatus('mandatory')
pvc_max_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 39), Integer32()).setLabel("pvc-max-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_ip_tx_time_intv.setStatus('mandatory')
pvc_max_ip_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-ip-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_ip_tx_time_time_intv.setStatus('mandatory')
pvcShapeThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 4, 1))
pvcShapeThreshLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_1.setStatus('mandatory')
pvcShapeThreshLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_2.setStatus('mandatory')
pvcShapeThreshLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_3.setStatus('mandatory')
pvcShapeThreshLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_4.setStatus('mandatory')
pvcShapeThreshLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_5.setStatus('mandatory')
pvcShapeThreshLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_6.setStatus('mandatory')
pvcShapeThreshLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 7), Integer32()).setLabel("pvcShapeThreshLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_7.setStatus('mandatory')
pvcShapeCurrToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 2), ).setLabel("pvcShapeCurrToDce-Table")
if mibBuilder.loadTexts: pvcShapeCurrToDce_Table.setStatus('mandatory')
pvcShapeCurrToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1), ).setLabel("pvcShapeCurrToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeCurrToDce-index"))
if mibBuilder.loadTexts: pvcShapeCurrToDce_Entry.setStatus('mandatory')
pvcShapeCurrToDce_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeCurrToDce-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDce_index.setStatus('mandatory')
pvcShapeCurrToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_1.setStatus('mandatory')
pvcShapeCurrToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_2.setStatus('mandatory')
pvcShapeCurrToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_3.setStatus('mandatory')
pvcShapeCurrToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_4.setStatus('mandatory')
pvcShapeCurrToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_5.setStatus('mandatory')
pvcShapeCurrToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_6.setStatus('mandatory')
pvcShapeCurrToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_7.setStatus('mandatory')
pvcShapeCurrToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 3), ).setLabel("pvcShapeCurrToDte-Table")
if mibBuilder.loadTexts: pvcShapeCurrToDte_Table.setStatus('mandatory')
pvcShapeCurrToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1), ).setLabel("pvcShapeCurrToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeCurrToDte-index"))
if mibBuilder.loadTexts: pvcShapeCurrToDte_Entry.setStatus('mandatory')
pvcShapeCurrToDte_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeCurrToDte-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDte_index.setStatus('mandatory')
pvcShapeCurrToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_1.setStatus('mandatory')
pvcShapeCurrToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_2.setStatus('mandatory')
pvcShapeCurrToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_3.setStatus('mandatory')
pvcShapeCurrToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_4.setStatus('mandatory')
pvcShapeCurrToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_5.setStatus('mandatory')
pvcShapeCurrToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_6.setStatus('mandatory')
pvcShapeCurrToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_7.setStatus('mandatory')
pvcShapeIntvToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 4), ).setLabel("pvcShapeIntvToDce-Table")
if mibBuilder.loadTexts: pvcShapeIntvToDce_Table.setStatus('mandatory')
pvcShapeIntvToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1), ).setLabel("pvcShapeIntvToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeIntvToDce-pvcIx"), (0, "LINK-PROBE-MIB", "pvcShapeIntvToDce-intvIx"))
if mibBuilder.loadTexts: pvcShapeIntvToDce_Entry.setStatus('mandatory')
pvcShapeIntvToDce_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeIntvToDce-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDce_pvcIx.setStatus('mandatory')
pvcShapeIntvToDce_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcShapeIntvToDce-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDce_intvIx.setStatus('mandatory')
pvcShapeIntvToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_1.setStatus('mandatory')
pvcShapeIntvToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_2.setStatus('mandatory')
pvcShapeIntvToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_3.setStatus('mandatory')
pvcShapeIntvToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_4.setStatus('mandatory')
pvcShapeIntvToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_5.setStatus('mandatory')
pvcShapeIntvToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_6.setStatus('mandatory')
pvcShapeIntvToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_7.setStatus('mandatory')
pvcShapeIntvToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 5), ).setLabel("pvcShapeIntvToDte-Table")
if mibBuilder.loadTexts: pvcShapeIntvToDte_Table.setStatus('mandatory')
pvcShapeIntvToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1), ).setLabel("pvcShapeIntvToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeIntvToDte-pvcIx"), (0, "LINK-PROBE-MIB", "pvcShapeIntvToDte-intvIx"))
if mibBuilder.loadTexts: pvcShapeIntvToDte_Entry.setStatus('mandatory')
pvcShapeIntvToDte_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeIntvToDte-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDte_pvcIx.setStatus('mandatory')
pvcShapeIntvToDte_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcShapeIntvToDte-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDte_intvIx.setStatus('mandatory')
pvcShapeIntvToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_1.setStatus('mandatory')
pvcShapeIntvToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_2.setStatus('mandatory')
pvcShapeIntvToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_3.setStatus('mandatory')
pvcShapeIntvToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_4.setStatus('mandatory')
pvcShapeIntvToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_5.setStatus('mandatory')
pvcShapeIntvToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_6.setStatus('mandatory')
pvcShapeIntvToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_7.setStatus('mandatory')
pvcNotAvailDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_unavail_toDce"), ("LINK-PROBE-MIB", "pvcNotAvailThreshDCE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcNotAvailDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_unavail_toDte"), ("LINK-PROBE-MIB", "pvcNotAvailThreshDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcRTD = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcAveRTDThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilizeToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "frChanUtilizThreshToDTE"), ("LINK-PROBE-MIB", "chan_user_load_rx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilizeToDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "frChanUtilizThreshToDCE"), ("LINK-PROBE-MIB", "chan_user_load_tx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcBecn = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvc_number_index_curr"), ("LINK-PROBE-MIB", "becn_frames_pvc_curr"), ("LINK-PROBE-MIB", "pvcBecnThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcFecn = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,7)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvc_number_index_curr"), ("LINK-PROBE-MIB", "fecn_frames_pvc_curr"), ("LINK-PROBE-MIB", "pvcFecnThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcUtilToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,8)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_user_load_rx_curr"), ("LINK-PROBE-MIB", "pvcUtilToDTEThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcUtilToDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,9)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_user_load_tx_curr"), ("LINK-PROBE-MIB", "pvcUtilToDCEThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcCIRExceedToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_CIR_toNet_exceed_curr"), ("LINK-PROBE-MIB", "pvcCirToDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcEIRExceedToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_EIR_toNet_exceed_curr"), ("LINK-PROBE-MIB", "pvcEirToDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLossFrameTx = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,12)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_loss_frame_tx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLossFrameRx = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,13)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_loss_frame_rx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilToDTE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,14)).setLabel("frChanUtilToDTE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilToDCE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,15)).setLabel("frChanUtilToDCE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilToDTE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,16)).setLabel("frChanUtilToDTE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
frChanUtilToDCE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,17)).setLabel("frChanUtilToDCE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcRTD_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,18)).setLabel("pvcRTD-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcRTDThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcRTD_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,19)).setLabel("pvcRTD-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcRTDThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLoadToDTE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,20)).setLabel("pvcLoadToDTE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLoadToDCE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,21)).setLabel("pvcLoadToDCE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLoadToDTE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,22)).setLabel("pvcLoadToDTE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcLoadToDCE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,23)).setLabel("pvcLoadToDCE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcStatusChangeAvail = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,24)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "current_intv_start_time"))
pvcStatusChangeUnavail = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,25)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "current_intv_start_time"))
dbuPvcStatusChangeBackedUp = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,26)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuPVCTableIndex"), ("LINK-PROBE-MIB", "sys_current_time"))
dbuPvcStatusChangeNotBackedUp = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,27)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuPVCTableIndex"), ("LINK-PROBE-MIB", "sys_current_time"))
dbuBackupCallActivation = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,28)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
dbuBackupCallDeactivation = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,29)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
dbuBackupCallFailed = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,30)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
dcdAlarmDetection = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,31)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "sys_current_time"))
cp3000Event = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,32)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "sys_current_time"), ("LINK-PROBE-MIB", "eventSubject"), ("LINK-PROBE-MIB", "pvcIdentifier"), ("LINK-PROBE-MIB", "cp3000LogCode"), ("LINK-PROBE-MIB", "cp3000LogSpeed"), ("LINK-PROBE-MIB", "cp3000LogDate"), ("LINK-PROBE-MIB", "cp3000LogInfo"))
bypassEnabled = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,33)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "bypassStatus"), ("LINK-PROBE-MIB", "sys_current_time"))
histIntvStartTimeIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 1), ).setLabel("histIntvStartTimeIntv-Table")
if mibBuilder.loadTexts: histIntvStartTimeIntv_Table.setStatus('mandatory')
histIntvStartTimeIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1), ).setLabel("histIntvStartTimeIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histIntvStartTimeIntv-index"))
if mibBuilder.loadTexts: histIntvStartTimeIntv_Entry.setStatus('mandatory')
histIntvStartTimeIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histIntvStartTimeIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histIntvStartTimeIntv_index.setStatus('mandatory')
hist_intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("hist-intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_intv_start_time.setStatus('mandatory')
histChanPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 2), ).setLabel("histChanPerfIntv-Table")
if mibBuilder.loadTexts: histChanPerfIntv_Table.setStatus('mandatory')
histChanPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1), ).setLabel("histChanPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histChanPerfIntv-index"))
if mibBuilder.loadTexts: histChanPerfIntv_Entry.setStatus('mandatory')
histChanPerfIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histChanPerfIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histChanPerfIntv_index.setStatus('mandatory')
hist_chan_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_unavail_toDte_intv.setStatus('mandatory')
hist_chan_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_unavail_toDce_intv.setStatus('mandatory')
hist_chan_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_user_load_tx_intv.setStatus('mandatory')
hist_chan_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_user_load_rx_intv.setStatus('mandatory')
histPvcPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 3), ).setLabel("histPvcPerfIntv-Table")
if mibBuilder.loadTexts: histPvcPerfIntv_Table.setStatus('mandatory')
histPvcPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1), ).setLabel("histPvcPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcPerfIntv-num-index"), (0, "LINK-PROBE-MIB", "histPvcPerf-intv-index"))
if mibBuilder.loadTexts: histPvcPerfIntv_Entry.setStatus('mandatory')
histPvcPerfIntv_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcPerfIntv-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcPerfIntv_num_index.setStatus('mandatory')
histPvcPerf_intv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcPerf-intv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcPerf_intv_index.setStatus('mandatory')
hist_pvc_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 3), Integer32()).setLabel("hist-pvc-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_tx_time_intv.setStatus('mandatory')
hist_pvc_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_unavail_toDte_intv.setStatus('mandatory')
hist_pvc_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_unavail_toDce_intv.setStatus('mandatory')
hist_pvc_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_user_load_tx_intv.setStatus('mandatory')
hist_pvc_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_user_load_rx_intv.setStatus('mandatory')
hist_pvc_CIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 8), Integer32()).setLabel("hist-pvc-CIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_CIR_toNet_exceed_intv.setStatus('mandatory')
hist_pvc_loss_frame_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(254, 255))).clone(namedValues=NamedValues(("no-resp", 254), ("not-avail", 255)))).setLabel("hist-pvc-loss-frame-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_loss_frame_tx_intv.setStatus('mandatory')
hist_pvc_loss_frame_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(254, 255))).clone(namedValues=NamedValues(("no-resp", 254), ("not-avail", 255)))).setLabel("hist-pvc-loss-frame-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_loss_frame_rx_intv.setStatus('mandatory')
histPvcShapeIntvToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 4), ).setLabel("histPvcShapeIntvToDce-Table")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Table.setStatus('mandatory')
histPvcShapeIntvToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1), ).setLabel("histPvcShapeIntvToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcShapeIntvToDce-pvcIx"), (0, "LINK-PROBE-MIB", "histPvcShapeIntvToDce-intvIx"))
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Entry.setStatus('mandatory')
histPvcShapeIntvToDce_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcShapeIntvToDce-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_pvcIx.setStatus('mandatory')
histPvcShapeIntvToDce_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcShapeIntvToDce-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_intvIx.setStatus('mandatory')
histPvcShapeIntvToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_1.setStatus('mandatory')
histPvcShapeIntvToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_2.setStatus('mandatory')
histPvcShapeIntvToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_3.setStatus('mandatory')
histPvcShapeIntvToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_4.setStatus('mandatory')
histPvcShapeIntvToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_5.setStatus('mandatory')
histPvcShapeIntvToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_6.setStatus('mandatory')
histPvcShapeIntvToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_7.setStatus('mandatory')
histPvcShapeIntvToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 5), ).setLabel("histPvcShapeIntvToDte-Table")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Table.setStatus('mandatory')
histPvcShapeIntvToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1), ).setLabel("histPvcShapeIntvToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcShapeIntvToDte-pvcIx"), (0, "LINK-PROBE-MIB", "histPvcShapeIntvToDte-intvIx"))
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Entry.setStatus('mandatory')
histPvcShapeIntvToDte_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcShapeIntvToDte-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_pvcIx.setStatus('mandatory')
histPvcShapeIntvToDte_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcShapeIntvToDte-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_intvIx.setStatus('mandatory')
histPvcShapeIntvToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_1.setStatus('mandatory')
histPvcShapeIntvToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_2.setStatus('mandatory')
histPvcShapeIntvToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_3.setStatus('mandatory')
histPvcShapeIntvToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_4.setStatus('mandatory')
histPvcShapeIntvToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_5.setStatus('mandatory')
histPvcShapeIntvToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_6.setStatus('mandatory')
histPvcShapeIntvToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_7.setStatus('mandatory')
intvStartTimeIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 6, 1), ).setLabel("intvStartTimeIntv-Table")
if mibBuilder.loadTexts: intvStartTimeIntv_Table.setStatus('mandatory')
intvStartTimeIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1), ).setLabel("intvStartTimeIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "intvStartTimeIntv-index"))
if mibBuilder.loadTexts: intvStartTimeIntv_Entry.setStatus('mandatory')
intvStartTimeIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("intvStartTimeIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: intvStartTimeIntv_index.setStatus('mandatory')
intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: intv_start_time.setStatus('mandatory')
dbuPVCTable = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 7, 1), )
if mibBuilder.loadTexts: dbuPVCTable.setStatus('mandatory')
dbuPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1), ).setIndexNames((0, "LINK-PROBE-MIB", "dbuPVCTableIndex"))
if mibBuilder.loadTexts: dbuPVCEntry.setStatus('mandatory')
dbuPVCTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuPVCTableIndex.setStatus('mandatory')
dbuRemotePVCDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRemotePVCDlci.setStatus('mandatory')
dbuIsdnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuIsdnAddress.setStatus('mandatory')
dbuPvcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuPvcCir.setStatus('mandatory')
dbuMasterSlave = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuMasterSlave.setStatus('mandatory')
dbuBackupType = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("linkProbe", 1), ("dte2Dbu1", 2), ("dte2Dbu2", 3), ("channelDbu", 4), ("pvcDbu", 5), ("channelDbu-noProbe", 6), ("pvcDbu-noProbe", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuBackupType.setStatus('mandatory')
dbuPVCAdd = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dbuPVCAdd.setStatus('mandatory')
dbuPVCDelete = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dbuPVCDelete.setStatus('mandatory')
dbuRecoverCount = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRecoverCount.setStatus('mandatory')
dbuDialedIsdnAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuDialedIsdnAddress.setStatus('mandatory')
globalStatus = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("connected", 2), ("test", 3), ("hwFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStatus.setStatus('mandatory')
pvcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 8, 2), )
if mibBuilder.loadTexts: pvcStatusTable.setStatus('mandatory')
pvcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1), ).setIndexNames((0, "LINK-PROBE-MIB", "pvcStatusIndex"))
if mibBuilder.loadTexts: pvcStatusEntry.setStatus('mandatory')
pvcStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatusIndex.setStatus('mandatory')
pvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pvcInactive", 1), ("pvcActive", 2), ("pvcConnected", 3), ("pvcTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatus.setStatus('mandatory')
eventSubject = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("device", 1), ("pvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSubject.setStatus('mandatory')
pvcIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIdentifier.setStatus('mandatory')
cp3000LogCode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogCode.setStatus('mandatory')
cp3000LogSpeed = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogSpeed.setStatus('mandatory')
cp3000LogDate = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogDate.setStatus('mandatory')
cp3000LogInfo = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogInfo.setStatus('mandatory')
trapAckEnable = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckEnable.setStatus('mandatory')
trapAckTimeout = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckTimeout.setStatus('mandatory')
trapAckFromMngr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapNotAcked", 1), ("trapAcked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckFromMngr.setStatus('mandatory')
mibBuilder.exportSymbols("LINK-PROBE-MIB", pvcPerf_intv_index=pvcPerf_intv_index, intv_start_time=intv_start_time, trapAckFromMngr=trapAckFromMngr, outbandIpAddress=outbandIpAddress, alternateVersion=alternateVersion, ipRtrRxLatRxPvcIntv=ipRtrRxLatRxPvcIntv, frChanUtilToDTE_endException=frChanUtilToDTE_endException, pvcLoadToDTEThresh_realTime=pvcLoadToDTEThresh_realTime, pvcShapeIntvToDce_pvcIx=pvcShapeIntvToDce_pvcIx, chStIntv_index=chStIntv_index, histPvcShapeIntvToDce_Table=histPvcShapeIntvToDce_Table, pvc_tx_time_intv=pvc_tx_time_intv, becn_frames_pvc_intv=becn_frames_pvc_intv, pvc_loop_intv=pvc_loop_intv, pvcShapeCurrToDce_index=pvcShapeCurrToDce_index, pvc_max_total_load_rx_intv=pvc_max_total_load_rx_intv, pvcShapeIntvToDce_Table=pvcShapeIntvToDce_Table, cp3000LogDate=cp3000LogDate, pvcShapeIntvToDte_Table=pvcShapeIntvToDte_Table, pvcStCurrent_Table=pvcStCurrent_Table, histChanPerfIntv_Entry=histChanPerfIntv_Entry, pvc_user_load_rx_curr=pvc_user_load_rx_curr, dbuPvcCir=dbuPvcCir, histPvcShapeIntvToDteLevel_1=histPvcShapeIntvToDteLevel_1, pvcUtilToDCEThresh=pvcUtilToDCEThresh, pvcPerfCurr_Entry=pvcPerfCurr_Entry, dte_octets_pvc_intv=dte_octets_pvc_intv, pvcUtilToDCE=pvcUtilToDCE, histPvcShapeIntvToDceLevel_4=histPvcShapeIntvToDceLevel_4, dce_octets_pvc_intv=dce_octets_pvc_intv, pvc_unavail_toDce_intv=pvc_unavail_toDce_intv, pvcShapeCurrToDteLevel_4=pvcShapeCurrToDteLevel_4, pvc_EIR_toNet_exceed_intv=pvc_EIR_toNet_exceed_intv, frChanUtilToDCE_exception=frChanUtilToDCE_exception, pvc_delete=pvc_delete, pvcShapeCurrToDce_Table=pvcShapeCurrToDce_Table, pvcStatusChangeUnavail=pvcStatusChangeUnavail, hist_pvc_tx_time_intv=hist_pvc_tx_time_intv, pvc_min_tx_time_intv=pvc_min_tx_time_intv, pvc_tx_time_curr=pvc_tx_time_curr, pvcShapeIntvToDce_Entry=pvcShapeIntvToDce_Entry, histPvcShapeIntvToDceLevel_1=histPvcShapeIntvToDceLevel_1, lMI_Controller=lMI_Controller, dbuPVCEntry=dbuPVCEntry, dcdAlarmDetection=dcdAlarmDetection, pvc_min_user_load_rx_intv=pvc_min_user_load_rx_intv, histPvcShapeIntvToDte_intvIx=histPvcShapeIntvToDte_intvIx, sys_current_time=sys_current_time, pvc_unavail_toDce=pvc_unavail_toDce, ipRtrRxLatTxPvcIntv=ipRtrRxLatTxPvcIntv, pvcShapeCurrToDteLevel_3=pvcShapeCurrToDteLevel_3, pvcFecn=pvcFecn, histPvcShapeIntvToDce_Entry=histPvcShapeIntvToDce_Entry, changeVersion=changeVersion, pvcCirEir_Entry=pvcCirEir_Entry, pvcPerfIntv_num_index=pvcPerfIntv_num_index, probeConfig=probeConfig, pvc_user_load_tx_intv=pvc_user_load_tx_intv, pvc_max_user_load_rx_intv=pvc_max_user_load_rx_intv, pvcShapeCurrToDte_Table=pvcShapeCurrToDte_Table, histPvcShapeIntvToDte_Entry=histPvcShapeIntvToDte_Entry, pvcShapeIntvToDceLevel_1=pvcShapeIntvToDceLevel_1, pvcLoadToDCE_endException=pvcLoadToDCE_endException, histPvcShapeIntvToDteLevel_2=histPvcShapeIntvToDteLevel_2, pvcShapeCurrToDce_Entry=pvcShapeCurrToDce_Entry, resp_rx_pvc_intv=resp_rx_pvc_intv, poll_tx_pvc_intv=poll_tx_pvc_intv, pvcPerfCurr_num_index=pvcPerfCurr_num_index, pvcShapeIntvToDte_intvIx=pvcShapeIntvToDte_intvIx, fecn_frames_ch_intv=fecn_frames_ch_intv, chan_max_user_load_tx_time_intv=chan_max_user_load_tx_time_intv, lmi_config=lmi_config, dce_frames_ch_curr=dce_frames_ch_curr, dte_frames_ch_curr=dte_frames_ch_curr, ipRtrRxLatRxPvcCurr=ipRtrRxLatRxPvcCurr, pvcShapeThreshLevel_1=pvcShapeThreshLevel_1, pvcShapeCurrToDceLevel_4=pvcShapeCurrToDceLevel_4, chan_max_user_load_rx_intv=chan_max_user_load_rx_intv, ipRtrTxLatTxPvcCurr=ipRtrTxLatTxPvcCurr, lmi_resp_rx_ch_intv=lmi_resp_rx_ch_intv, pvc_config=pvc_config, pvcLossFrameTx=pvcLossFrameTx, chan_max_user_load_tx_intv=chan_max_user_load_tx_intv, fecn_frames_ch_curr=fecn_frames_ch_curr, pvcStInterval_Entry=pvcStInterval_Entry, frChanUtilizThreshToDTE=frChanUtilizThreshToDTE, probeIntervalStartTime=probeIntervalStartTime, pvc_loop_curr=pvc_loop_curr, dbuConfigGroup=dbuConfigGroup, pvcShapeIntvToDteLevel_1=pvcShapeIntvToDteLevel_1, file_download_config=file_download_config, ipRtrTxLatRxPvcIntv=ipRtrTxLatRxPvcIntv, lmi_enq_rx_ch_curr=lmi_enq_rx_ch_curr, fecn_frames_pvc_curr=fecn_frames_pvc_curr, pvc_min_user_load_rx_time_intv=pvc_min_user_load_rx_time_intv, hist_pvc_unavail_toDte_intv=hist_pvc_unavail_toDte_intv, becn_frames_ch_curr=becn_frames_ch_curr, tftpState=tftpState, histIntvStartTimeIntv_index=histIntvStartTimeIntv_index, dbuPVCTableIndex=dbuPVCTableIndex, n392_User_Counter=n392_User_Counter, interface_Speed=interface_Speed, pvc_max_ip_tx_time_time_intv=pvc_max_ip_tx_time_time_intv, ip_tx_ch_curr=ip_tx_ch_curr, pvcRTDThresh_realTime=pvcRTDThresh_realTime, histPvcShapeIntvToDce_intvIx=histPvcShapeIntvToDce_intvIx, pvcNotAvailThreshDTE=pvcNotAvailThreshDTE, pvcStCurrent_Entry=pvcStCurrent_Entry, pvcShapeIntvToDteLevel_5=pvcShapeIntvToDteLevel_5, chan_unavail_toDce_intv=chan_unavail_toDce_intv, ip_resp_tx_pvc_curr=ip_resp_tx_pvc_curr, chan_total_load_tx_intv=chan_total_load_tx_intv, sourceFileMode=sourceFileMode, pvcLoadToDTE_exception=pvcLoadToDTE_exception, trapAckEnable=trapAckEnable, n392_Net_Counter=n392_Net_Counter, pvcShapeIntvToDte_pvcIx=pvcShapeIntvToDte_pvcIx, histPvcPerfIntv_Entry=histPvcPerfIntv_Entry, pvc_loss_frame_tx_intv=pvc_loss_frame_tx_intv, dbuBackupCallFailed=dbuBackupCallFailed, pvcRTD_exception=pvcRTD_exception, pvcLoadToDTE_endException=pvcLoadToDTE_endException, pvcShapeThreshLevel_5=pvcShapeThreshLevel_5, dbuRemotePVCDlci=dbuRemotePVCDlci, pvcBecnThresh=pvcBecnThresh, ip_Encapsu=ip_Encapsu, pvc_min_total_load_rx_intv=pvc_min_total_load_rx_intv, pvcLoadToDCEThresh_realTimeRange=pvcLoadToDCEThresh_realTimeRange, ip_poll_rx_pvc_intv=ip_poll_rx_pvc_intv, chan_min_total_load_rx_intv=chan_min_total_load_rx_intv, net_management_config=net_management_config, pvc_Table=pvc_Table, lmi_resp_tx_ch_intv=lmi_resp_tx_ch_intv, chanPerfIntv_index=chanPerfIntv_index, pvc_max_total_load_tx_time_intv=pvc_max_total_load_tx_time_intv, dbuBackupType=dbuBackupType, dce_frames_with_DE_pvc_curr=dce_frames_with_DE_pvc_curr, dce_frames_ch_intv=dce_frames_ch_intv, pvcShapeIntvToDte_Entry=pvcShapeIntvToDte_Entry, chan_min_total_load_tx_intv=chan_min_total_load_tx_intv, resp_rx_ch_intv=resp_rx_ch_intv, dce_octets_ch_intv=dce_octets_ch_intv, chan_unavail_toDte_intv=chan_unavail_toDte_intv, dbuMasterSlave=dbuMasterSlave, pvc_min_ip_tx_time_intv=pvc_min_ip_tx_time_intv, ipRtrTxLatTxPvcIntv=ipRtrTxLatTxPvcIntv, chan_user_load_tx_curr=chan_user_load_tx_curr, histIntvStartTimeIntv_Entry=histIntvStartTimeIntv_Entry, hist_pvc_loss_frame_tx_intv=hist_pvc_loss_frame_tx_intv, pvcIpRtrRxLatTxTimeIntv=pvcIpRtrRxLatTxTimeIntv, dbuPVCDelete=dbuPVCDelete, dce_frames_with_DE_pvc_intv=dce_frames_with_DE_pvc_intv, probeTrafficShape=probeTrafficShape, pvcShapeCurrToDceLevel_2=pvcShapeCurrToDceLevel_2, pvcShapeCurrToDceLevel_7=pvcShapeCurrToDceLevel_7, t391_Timer=t391_Timer, dce_octets_pvc_curr=dce_octets_pvc_curr, dte_frames_ch_intv=dte_frames_ch_intv, lmi_Operation=lmi_Operation, pvc_loss_frame_rx_curr=pvc_loss_frame_rx_curr, pvc_min_user_load_tx_intv=pvc_min_user_load_tx_intv, pvc_total_load_tx_curr=pvc_total_load_tx_curr, pvc_max_ip_tx_time_intv=pvc_max_ip_tx_time_intv, chan_total_load_rx_curr=chan_total_load_rx_curr, pvcRTD_endException=pvcRTD_endException, pvcShapeCurrToDceLevel_1=pvcShapeCurrToDceLevel_1, resp_tx_pvc_intv=resp_tx_pvc_intv, pvc_max_user_load_tx_intv=pvc_max_user_load_tx_intv, pvcEirToDCE=pvcEirToDCE, intvStartTimeIntv_Table=intvStartTimeIntv_Table, pvc_loss_frame_tx_curr=pvc_loss_frame_tx_curr, dte_octets_ch_curr=dte_octets_ch_curr, ip_resp_tx_pvc_intv=ip_resp_tx_pvc_intv, netQuest=netQuest, becn_frames_pvc_curr=becn_frames_pvc_curr, histIntvStartTimeIntv_Table=histIntvStartTimeIntv_Table, histPvcShapeIntvToDceLevel_2=histPvcShapeIntvToDceLevel_2, poll_rx_ch_intv=poll_rx_ch_intv, dce_frames_pvc_curr=dce_frames_pvc_curr, dte_frames_with_DE_pvc_curr=dte_frames_with_DE_pvc_curr, dbuRecoverCount=dbuRecoverCount, lmi_resp_tx_ch_curr=lmi_resp_tx_ch_curr, poll_rx_ch_curr=poll_rx_ch_curr, pvcStatusIndex=pvcStatusIndex, ip_poll_rx_pvc_curr=ip_poll_rx_pvc_curr, sourceFileName=sourceFileName, pvcShapeCurrToDteLevel_6=pvcShapeCurrToDteLevel_6, pvc_total_load_tx_intv=pvc_total_load_tx_intv, pvc_min_user_load_tx_time_intv=pvc_min_user_load_tx_time_intv, chan_user_load_rx_curr=chan_user_load_rx_curr, resp_tx_pvc_curr=resp_tx_pvc_curr, lmi_type=lmi_type, pvcShapeIntvToDteLevel_3=pvcShapeIntvToDteLevel_3, pvcShapeIntvToDteLevel_6=pvcShapeIntvToDteLevel_6, cp3000LogCode=cp3000LogCode, chan_min_user_load_tx_time_intv=chan_min_user_load_tx_time_intv, inbandIpAddress=inbandIpAddress, frChanUtilizeToDTE=frChanUtilizeToDTE, histChanPerfIntv_index=histChanPerfIntv_index, pvcShapeCurrToDte_index=pvcShapeCurrToDte_index, pvc_Entry=pvc_Entry, chan_user_load_tx_intv=chan_user_load_tx_intv, hist_chan_user_load_rx_intv=hist_chan_user_load_rx_intv, pvcStatus=pvcStatus, pvc_min_total_load_tx_time_intv=pvc_min_total_load_tx_time_intv, cp3000Event=cp3000Event, trap_config=trap_config, bypassStatus=bypassStatus, dbuPVCTable=dbuPVCTable, chan_max_total_load_tx_intv=chan_max_total_load_tx_intv, pvcIpRtrTxLatTxTimeIntv=pvcIpRtrTxLatTxTimeIntv, dte_frames_pvc_curr=dte_frames_pvc_curr, hist_pvc_user_load_rx_intv=hist_pvc_user_load_rx_intv, dte_octets_ch_intv=dte_octets_ch_intv, histPvcShapeIntvToDceLevel_7=histPvcShapeIntvToDceLevel_7, pvcLoadToDCE_exception=pvcLoadToDCE_exception, chan_total_load_tx_curr=chan_total_load_tx_curr, pvcAveRTDThresh=pvcAveRTDThresh, pvcNotAvailThreshDCE=pvcNotAvailThreshDCE, histPvcShapeIntvToDte_pvcIx=histPvcShapeIntvToDte_pvcIx, pvcLossFrameRx=pvcLossFrameRx, link_probe=link_probe, trapCtlSpecific=trapCtlSpecific, pvcStIntv_index=pvcStIntv_index, pvcShapeThreshLevel_3=pvcShapeThreshLevel_3, pvc_Count=pvc_Count, hist_chan_user_load_tx_intv=hist_chan_user_load_tx_intv, frChanUtilToDCE_endException=frChanUtilToDCE_endException, cp3000LogInfo=cp3000LogInfo, n393_User_Counter=n393_User_Counter, ipRtrRxLatTxPvcCurr=ipRtrRxLatTxPvcCurr, chanLoadThreshToDTE_realTimeRange=chanLoadThreshToDTE_realTimeRange, histPvcShapeIntvToDceLevel_6=histPvcShapeIntvToDceLevel_6, pvc_number_index_curr=pvc_number_index_curr, chanPerfIntv_Entry=chanPerfIntv_Entry, pvcShapeIntvToDce_intvIx=pvcShapeIntvToDce_intvIx, dbuBackupCallActivation=dbuBackupCallActivation, pvcShapeCurrToDceLevel_6=pvcShapeCurrToDceLevel_6, chStInterval_Entry=chStInterval_Entry, poll_tx_ch_intv=poll_tx_ch_intv, pvc_max_user_load_tx_time_intv=pvc_max_user_load_tx_time_intv, intvStartTimeIntv_Entry=intvStartTimeIntv_Entry, histPvcShapeIntvToDceLevel_5=histPvcShapeIntvToDceLevel_5, histPvcShapeIntvToDceLevel_3=histPvcShapeIntvToDceLevel_3, probeHistorical=probeHistorical, pvcUtilToDTEThresh=pvcUtilToDTEThresh, pvcShapeThreshLevel_6=pvcShapeThreshLevel_6, n393_Net_Counter=n393_Net_Counter, pvcStatusEntry=pvcStatusEntry, probeTokenSize=probeTokenSize, pvc_unavail_toDte_intv=pvc_unavail_toDte_intv, pvc_min_ip_tx_time_time_intv=pvc_min_ip_tx_time_time_intv, probe_Mode=probe_Mode, pvcShapeIntvToDceLevel_4=pvcShapeIntvToDceLevel_4)
mibBuilder.exportSymbols("LINK-PROBE-MIB", current_intv_start_time=current_intv_start_time, pvcCirToDTE=pvcCirToDTE, pvcShapeCurrToDteLevel_5=pvcShapeCurrToDteLevel_5, chan_min_total_load_rx_time_intv=chan_min_total_load_rx_time_intv, pvcShapeThreshLevel_2=pvcShapeThreshLevel_2, pvcShapeCurrToDte_Entry=pvcShapeCurrToDte_Entry, pvcShapeCurrToDteLevel_1=pvcShapeCurrToDteLevel_1, chanPerfCurr=chanPerfCurr, cp3000LogSpeed=cp3000LogSpeed, pvcCIRExceedToDTE=pvcCIRExceedToDTE, histPvcShapeIntvToDce_pvcIx=histPvcShapeIntvToDce_pvcIx, chan_min_user_load_tx_intv=chan_min_user_load_tx_intv, chanLoadToDTEThresh_realTime=chanLoadToDTEThresh_realTime, poll_tx_pvc_curr=poll_tx_pvc_curr, pvc_user_load_rx_intv=pvc_user_load_rx_intv, pvcShapeIntvToDceLevel_6=pvcShapeIntvToDceLevel_6, pvcPerfIntv_Table=pvcPerfIntv_Table, chan_max_total_load_tx_time_intv=chan_max_total_load_tx_time_intv, pvcShapeIntvToDceLevel_7=pvcShapeIntvToDceLevel_7, poll_rx_pvc_intv=poll_rx_pvc_intv, lmi_resp_rx_ch_curr=lmi_resp_rx_ch_curr, pvc_Table_Index=pvc_Table_Index, trapAckTimeout=trapAckTimeout, n391_Counter=n391_Counter, lmi_DLCI=lmi_DLCI, ip_poll_tx_pvc_curr=ip_poll_tx_pvc_curr, pvcShapeIntvToDceLevel_5=pvcShapeIntvToDceLevel_5, pvcCirEir_Table=pvcCirEir_Table, dce_octets_ch_curr=dce_octets_ch_curr, pvcShapeThreshLevel_4=pvcShapeThreshLevel_4, pvc_total_load_rx_curr=pvc_total_load_rx_curr, poll_Period=poll_Period, chan_config=chan_config, pvcShapeIntvToDteLevel_7=pvcShapeIntvToDteLevel_7, ipInterface=ipInterface, chan_max_total_load_rx_time_intv=chan_max_total_load_rx_time_intv, bypassEnabled=bypassEnabled, softwareVersion=softwareVersion, trapAcknowledgeGroup=trapAcknowledgeGroup, becn_frames_ch_intv=becn_frames_ch_intv, dbuBackupCallDeactivation=dbuBackupCallDeactivation, pvcRTDThresh_realTimeRange=pvcRTDThresh_realTimeRange, pvc_user_load_tx_curr=pvc_user_load_tx_curr, deviceStatusGroup=deviceStatusGroup, sourceIpAddress=sourceIpAddress, routerIpAddress=routerIpAddress, hist_intv_start_time=hist_intv_start_time, dte_frames_pvc_intv=dte_frames_pvc_intv, pvc_CIR_toNet_exceed_curr=pvc_CIR_toNet_exceed_curr, dbuPvcStatusChangeNotBackedUp=dbuPvcStatusChangeNotBackedUp, chStInterval_Table=chStInterval_Table, hist_pvc_loss_frame_rx_intv=hist_pvc_loss_frame_rx_intv, histPvcShapeIntvToDteLevel_5=histPvcShapeIntvToDteLevel_5, pvcShapeCurrToDceLevel_5=pvcShapeCurrToDceLevel_5, histPvcShapeIntvToDteLevel_4=histPvcShapeIntvToDteLevel_4, pro_fun_config=pro_fun_config, pvcFecnThresh=pvcFecnThresh, lmi_enq_tx_ch_intv=lmi_enq_tx_ch_intv, frChanUtilizThreshToDCE=frChanUtilizThreshToDCE, histPvcShapeIntvToDteLevel_7=histPvcShapeIntvToDteLevel_7, chan_min_user_load_rx_intv=chan_min_user_load_rx_intv, pvc_add=pvc_add, pvcPerfIntv_Entry=pvcPerfIntv_Entry, histChanPerfIntv_Table=histChanPerfIntv_Table, pvc_CIR_toNet_exceed_intv=pvc_CIR_toNet_exceed_intv, resp_tx_ch_curr=resp_tx_ch_curr, ip_tx_ch_intv=ip_tx_ch_intv, subnetmaskIpAddress=subnetmaskIpAddress, pvcStatusTable=pvcStatusTable, lmi_enq_tx_ch_curr=lmi_enq_tx_ch_curr, pvcIpRtrRxLatTxTimeCurr=pvcIpRtrRxLatTxTimeCurr, pvcBecn=pvcBecn, chanLoadToDCEThresh_realTime=chanLoadToDCEThresh_realTime, chanPerfIntv_Table=chanPerfIntv_Table, ip_rx_ch_curr=ip_rx_ch_curr, frChanUtilToDTE_exception=frChanUtilToDTE_exception, pvc_max_total_load_tx_intv=pvc_max_total_load_tx_intv, histPvcPerfIntv_Table=histPvcPerfIntv_Table, pvc_loss_frame_rx_intv=pvc_loss_frame_rx_intv, pvc_number_index_intv=pvc_number_index_intv, dbuPvcStatusChangeBackedUp=dbuPvcStatusChangeBackedUp, ip_poll_tx_pvc_intv=ip_poll_tx_pvc_intv, intvStartTimeIntv_index=intvStartTimeIntv_index, pvc_min_total_load_tx_intv=pvc_min_total_load_tx_intv, hist_chan_unavail_toDte_intv=hist_chan_unavail_toDte_intv, dte_frames_with_DE_pvc_intv=dte_frames_with_DE_pvc_intv, chan_max_total_load_rx_intv=chan_max_total_load_rx_intv, fecn_frames_pvc_intv=fecn_frames_pvc_intv, hist_pvc_CIR_toNet_exceed_intv=hist_pvc_CIR_toNet_exceed_intv, t392_Timer=t392_Timer, dbuPVCAdd=dbuPVCAdd, pvcShapeCurrToDteLevel_2=pvcShapeCurrToDteLevel_2, histPvcShapeIntvToDteLevel_3=histPvcShapeIntvToDteLevel_3, pvc_total_load_rx_intv=pvc_total_load_rx_intv, pvcCirToDCE=pvcCirToDCE, pvcRTD=pvcRTD, pvcShapeIntvToDceLevel_2=pvcShapeIntvToDceLevel_2, nvram_update=nvram_update, pvcStInterval_Table=pvcStInterval_Table, pvc_Operation=pvc_Operation, chan_user_load_rx_intv=chan_user_load_rx_intv, eventSubject=eventSubject, hist_chan_unavail_toDce_intv=hist_chan_unavail_toDce_intv, pvcCirEir_Table_Index=pvcCirEir_Table_Index, pvcEIRExceedToDTE=pvcEIRExceedToDTE, ip_resp_rx_pvc_curr=ip_resp_rx_pvc_curr, chan_total_load_rx_intv=chan_total_load_rx_intv, histPvcShapeIntvToDte_Table=histPvcShapeIntvToDte_Table, resp_rx_ch_curr=resp_rx_ch_curr, lmi_enq_rx_ch_intv=lmi_enq_rx_ch_intv, globalStatus=globalStatus, probeStat=probeStat, pvcIpRtrTxLatTxTimeCurr=pvcIpRtrTxLatTxTimeCurr, pvc_max_total_load_rx_time_intv=pvc_max_total_load_rx_time_intv, pvcShapeIntvToDteLevel_4=pvcShapeIntvToDteLevel_4, pvcShapeIntvToDceLevel_3=pvcShapeIntvToDceLevel_3, ip_resp_rx_pvc_intv=ip_resp_rx_pvc_intv, poll_tx_ch_curr=poll_tx_ch_curr, resp_rx_pvc_curr=resp_rx_pvc_curr, chan_min_total_load_tx_time_intv=chan_min_total_load_tx_time_intv, pvcShapeIntvToDteLevel_2=pvcShapeIntvToDteLevel_2, histPvcPerf_intv_index=histPvcPerf_intv_index, hist_pvc_unavail_toDce_intv=hist_pvc_unavail_toDce_intv, pvcNotAvailDCE=pvcNotAvailDCE, pvcTC=pvcTC, pvcShapeThresh=pvcShapeThresh, pvc_Remote_IpAddress=pvc_Remote_IpAddress, chan_unvail_toDte_curr=chan_unvail_toDte_curr, dbuIsdnAddress=dbuIsdnAddress, pvc_EIR_toNet_exceed_curr=pvc_EIR_toNet_exceed_curr, pvc_min_total_load_rx_time_intv=pvc_min_total_load_rx_time_intv, pvcPerfCurr_Table=pvcPerfCurr_Table, ip_rx_ch_intv=ip_rx_ch_intv, dce_frames_pvc_intv=dce_frames_pvc_intv, tftpAction=tftpAction, chan_max_user_load_rx_time_intv=chan_max_user_load_rx_time_intv, pvcNotAvailDTE=pvcNotAvailDTE, pvcShapeCurrToDteLevel_7=pvcShapeCurrToDteLevel_7, pvcLoadToDCEThresh_realTime=pvcLoadToDCEThresh_realTime, pvc_min_tx_time_time_intv=pvc_min_tx_time_time_intv, pvcStatusChangeAvail=pvcStatusChangeAvail, pvcShapeCurrToDceLevel_3=pvcShapeCurrToDceLevel_3, poll_rx_pvc_curr=poll_rx_pvc_curr, inband_IP_DLCI=inband_IP_DLCI, softwareReset=softwareReset, chan_unavail_toDce_curr=chan_unavail_toDce_curr, pvc_ip_tx_time_intv=pvc_ip_tx_time_intv, trapCtlGlobal=trapCtlGlobal, pvc_max_user_load_rx_time_intv=pvc_max_user_load_rx_time_intv, pvc_ip_tx_time_curr=pvc_ip_tx_time_curr, chan_min_user_load_rx_time_intv=chan_min_user_load_rx_time_intv, pvcUtilToDTE=pvcUtilToDTE, dte_octets_pvc_curr=dte_octets_pvc_curr, resp_tx_ch_intv=resp_tx_ch_intv, pvc_max_tx_time_intv=pvc_max_tx_time_intv, ipRtrTxLatRxPvcCurr=ipRtrTxLatRxPvcCurr, pvcEirToDTE=pvcEirToDTE, pvcIdentifier=pvcIdentifier, pvc_max_tx_time_time_intv=pvc_max_tx_time_time_intv, max_Info_Length=max_Info_Length, frChanUtilizeToDCE=frChanUtilizeToDCE, pvc_unavail_toDte=pvc_unavail_toDte, chanLoadThreshToDCE_realTimeRange=chanLoadThreshToDCE_realTimeRange, hist_pvc_user_load_tx_intv=hist_pvc_user_load_tx_intv, pvcLoadToDTEThresh_realTimeRange=pvcLoadToDTEThresh_realTimeRange, histPvcShapeIntvToDteLevel_6=histPvcShapeIntvToDteLevel_6, chStCurrent=chStCurrent, pvcShapeThreshLevel_7=pvcShapeThreshLevel_7, dbuDialedIsdnAddress=dbuDialedIsdnAddress, probePerform=probePerform, histPvcPerfIntv_num_index=histPvcPerfIntv_num_index)
