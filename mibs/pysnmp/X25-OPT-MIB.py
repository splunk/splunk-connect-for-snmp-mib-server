#
# PySNMP MIB module X25-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Bits, NotificationType, Integer32, TimeTicks, iso, Gauge32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Bits", "NotificationType", "Integer32", "TimeTicks", "iso", "Gauge32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "IpAddress", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

cdx6500PPCTX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: cdx6500PPCTX25PortTable.setStatus('mandatory')
cdx6500PPCTX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500X25CfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTX25PortEntry.setStatus('mandatory')
cdx6500X25CfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25CfgPortNumber.setStatus('mandatory')
cdx6500X25CfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 21))).clone(namedValues=NamedValues(("simp", 1), ("dtr", 2), ("dtrd", 3), ("emri", 4), ("emdc", 5), ("dimo", 6), ("dimoa", 7), ("dimob", 8), ("dimov", 11), ("simpv", 12), ("simpb", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgConnType.setStatus('mandatory')
cdx6500X25CfgPortCont = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgPortCont.setStatus('mandatory')
cdx6500X25CfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("int", 1), ("ext", 2), ("extint", 3), ("extlp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgClockSource.setStatus('mandatory')
cdx6500X25CfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 384000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgClockSpeed.setStatus('mandatory')
cdx6500X25CfgAdmnInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("negotiate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnInterfaceMode.setStatus('mandatory')
cdx6500X25CfgAdmnNumberPVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnNumberPVCs.setStatus('mandatory')
cdx6500X25CfgStartPVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgStartPVCChanNum.setStatus('mandatory')
cdx6500X25CfgNumberSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgNumberSVCs.setStatus('mandatory')
cdx6500X25CfgStartSVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgStartSVCChanNum.setStatus('mandatory')
cdx6500X25CfgInitFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sabm", 1), ("disc", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgInitFrame.setStatus('mandatory')
cdx6500X25CfgT1RetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgT1RetryTimer.setStatus('mandatory')
cdx6500X25CfgT4PollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgT4PollTimer.setStatus('mandatory')
cdx6500X25CfgN2TransTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgN2TransTries.setStatus('mandatory')
cdx6500X25CfgFrameSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("ext", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgFrameSeqCounting.setStatus('mandatory')
cdx6500X25CfgKFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgKFrameWindow.setStatus('mandatory')
cdx6500X25CfgAdmnPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("ext", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnPacketSequencing.setStatus('mandatory')
cdx6500X25CfgWPacketWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgWPacketWindow.setStatus('mandatory')
cdx6500X25CfgPPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10))).clone(namedValues=NamedValues(("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgPPacketSize.setStatus('mandatory')
cdx6500X25CfgMaxNegotPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10))).clone(namedValues=NamedValues(("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgMaxNegotPacketSize.setStatus('mandatory')
cdx6500X25CfgDataQueueUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgDataQueueUpper.setStatus('mandatory')
cdx6500X25CfgDataQueueLower = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgDataQueueLower.setStatus('mandatory')
cdx6500X25CfgAdmnRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnRestartTimer.setStatus('mandatory')
cdx6500X25CfgAdmnResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnResetTimer.setStatus('mandatory')
cdx6500X25CfgAdmnCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnCallTimer.setStatus('mandatory')
cdx6500X25CfgAdmnClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAdmnClearTimer.setStatus('mandatory')
cdx6500X25CfgOutDelFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgOutDelFacilities.setStatus('mandatory')
cdx6500X25CfgOutAddFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgOutAddFacilities.setStatus('mandatory')
cdx6500X25CfgOutBarFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgOutBarFacilities.setStatus('mandatory')
cdx6500X25CfgInBarFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgInBarFacilities.setStatus('mandatory')
cdx6500X25CfgOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 107))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgOptions.setStatus('mandatory')
cdx6500X25CfgNumRoutDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgNumRoutDigits.setStatus('mandatory')
cdx6500X25CfgPortDigitsToStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgPortDigitsToStrip.setStatus('mandatory')
cdx6500X25CfgInDigitsToStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgInDigitsToStrip.setStatus('mandatory')
cdx6500X25CfgRestrictConn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgRestrictConn.setStatus('mandatory')
cdx6500X25CfgPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgPortAddress.setStatus('mandatory')
cdx6500X25CfgCUGMember = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgCUGMember.setStatus('mandatory')
cdx6500X25CfgBillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgBillRec.setStatus('mandatory')
cdx6500X25CfgSubAddrSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgSubAddrSize.setStatus('mandatory')
cdx6500X25CfgIdleDiscTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgIdleDiscTimer.setStatus('mandatory')
cdx6500X25CfgCallSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgCallSecurity.setStatus('mandatory')
cdx6500X25CfgProtectLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("cpOnly", 2), ("fullDcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgProtectLevel.setStatus('mandatory')
cdx6500X25CfgReconnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgReconnTimeout.setStatus('mandatory')
cdx6500X25CfgReconnTriesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgReconnTriesLimit.setStatus('mandatory')
cdx6500X25CfgFacilSubscripCont = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25CfgFacilSubscripCont.setStatus('mandatory')
cdx6500X25CfgAlarmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("access", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAlarmPriority.setStatus('mandatory')
cdx6500X25CfgAddrTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 107))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgAddrTrans.setStatus('mandatory')
cdx6500X25CfgNumberInSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgNumberInSVCs.setStatus('mandatory')
cdx6500X25CfgStartInSVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgStartInSVCChanNum.setStatus('mandatory')
cdx6500X25CfgNumberOutSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgNumberOutSVCs.setStatus('mandatory')
cdx6500X25CfgStartOutSVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgStartOutSVCChanNum.setStatus('mandatory')
cdx6500X25CfgChargeInfoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgChargeInfoReq.setStatus('mandatory')
cdx6500X25CfgVerfnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgVerfnTimer.setStatus('mandatory')
cdx6500X25CfgValdFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgValdFailures.setStatus('mandatory')
cdx6500X25CfgActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("disc", 2), ("degr", 3), ("lock", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgActionType.setStatus('mandatory')
cdx6500X25CfgLineIdleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flag", 1), ("mark", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgLineIdleMode.setStatus('mandatory')
cdx6500X25CfgConfOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgConfOption.setStatus('mandatory')
cdx6500X25CfgInvertTxClk = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgInvertTxClk.setStatus('mandatory')
cdx6500X25CfgDimType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("dim-type-none", 1), ("dim-type-not-installed", 2), ("dim-type-eia-232-d", 3), ("dim-type-x21", 4), ("dim-type-v35", 5), ("dim-type-v36", 6), ("dim-type-v11", 7), ("dim-type-eia-530", 8), ("dim-type-dsu", 9), ("dim-type-isdn", 10), ("dim-type-vrdc", 11), ("dim-type-i430", 12), ("dim-type-vrdc-2fxs", 13), ("dim-type-t1e1", 14), ("dim-type-future-use", 15), ("dim-not-supported", 16), ("dim-type-vrdc-2em", 17), ("dim-type-vrdc-bri", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgDimType.setStatus('mandatory')
cdx6500X25CfgMoreOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgMoreOptions.setStatus('mandatory')
cdx6500X25CfgPsfFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psf-disabled", 1), ("psf-enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgPsfFlag.setStatus('mandatory')
cdx6500X25CfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgElectricalInterfaceType.setStatus('mandatory')
cdx6500X25CfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500X25CfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500X25CfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTX25PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: cdx6500PPSTX25PortTable.setStatus('mandatory')
cdx6500PPSTX25PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500X25StatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTX25PortEntry.setStatus('mandatory')
cdx6500X25StatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPortNumber.setStatus('mandatory')
cdx6500X25StatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPortStatus.setStatus('mandatory')
cdx6500X25StatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("discPhase", 1), ("linkDisk", 2), ("linkSetup", 3), ("sabmColl", 4), ("frameReject", 5), ("normal", 6), ("remoteBusy", 7), ("reset", 8), ("sendReject", 9), ("rbSr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPortState.setStatus('mandatory')
cdx6500X25StatActualPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatActualPortSpeed.setStatus('mandatory')
cdx6500X25StatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPortUtilIn.setStatus('mandatory')
cdx6500X25StatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPortUtilOut.setStatus('mandatory')
cdx6500X25StatMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxSVCCount.setStatus('mandatory')
cdx6500X25StatCurrSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatCurrSVCCount.setStatus('mandatory')
cdx6500X25StatInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInChars.setStatus('mandatory')
cdx6500X25StatOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutChars.setStatus('mandatory')
cdx6500X25StatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInPkts.setStatus('mandatory')
cdx6500X25StatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutPkts.setStatus('mandatory')
cdx6500X25StatInDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInDataFrames.setStatus('mandatory')
cdx6500X25StatOutDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutDataFrames.setStatus('mandatory')
cdx6500X25StatNumPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatNumPktsQueued.setStatus('mandatory')
cdx6500X25StatCharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatCharRateIn.setStatus('mandatory')
cdx6500X25StatCharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatCharRateOut.setStatus('mandatory')
cdx6500X25StatPktRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPktRateIn.setStatus('mandatory')
cdx6500X25StatPktRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatPktRateOut.setStatus('mandatory')
cdx6500X25StatFrameRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatFrameRateIn.setStatus('mandatory')
cdx6500X25StatFrameRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatFrameRateOut.setStatus('mandatory')
cdx6500X25StatOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 22), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOverrunErrs.setStatus('mandatory')
cdx6500X25StatUnderrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 23), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatUnderrunErrs.setStatus('mandatory')
cdx6500X25StatCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 24), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatCRCErrs.setStatus('mandatory')
cdx6500X25StatInInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInInfoFrames.setStatus('mandatory')
cdx6500X25StatOutInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutInfoFrames.setStatus('mandatory')
cdx6500X25StatInRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInRNRFrames.setStatus('mandatory')
cdx6500X25StatOutRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutRNRFrames.setStatus('mandatory')
cdx6500X25StatInRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInRRFrames.setStatus('mandatory')
cdx6500X25StatOutRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutRRFrames.setStatus('mandatory')
cdx6500X25StatInREJFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInREJFrames.setStatus('mandatory')
cdx6500X25StatOutREJFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutREJFrames.setStatus('mandatory')
cdx6500X25StatInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatInDataPkts.setStatus('mandatory')
cdx6500X25StatOutDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatOutDataPkts.setStatus('mandatory')
cdx6500X25StatNumRxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatNumRxCallsSinceLastReset.setStatus('mandatory')
cdx6500X25StatNumRxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatNumRxCallsRejected.setStatus('mandatory')
cdx6500X25StatRxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203))).clone(namedValues=NamedValues(("notAvailable", 100), ("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("failureNotSupported", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxLastCallFailureCause.setStatus('mandatory')
cdx6500X25StatRxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxLastCalledNumber.setStatus('mandatory')
cdx6500X25StatRxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxLastCallingNumber.setStatus('mandatory')
cdx6500X25StatRxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxMinCallDuration.setStatus('mandatory')
cdx6500X25StatRxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxMaxCallDuration.setStatus('mandatory')
cdx6500X25StatRxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatRxAvgCallDuration.setStatus('mandatory')
cdx6500X25StatNumTxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatNumTxCallsSinceLastReset.setStatus('mandatory')
cdx6500X25StatNumTxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatNumTxCallsRejected.setStatus('mandatory')
cdx6500X25StatTxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203))).clone(namedValues=NamedValues(("notAvailable", 100), ("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("failureNotSupported", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxLastCallFailureCause.setStatus('mandatory')
cdx6500X25StatTxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxLastCalledNumber.setStatus('mandatory')
cdx6500X25StatTxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxLastCallingNumber.setStatus('mandatory')
cdx6500X25StatTxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxMinCallDuration.setStatus('mandatory')
cdx6500X25StatTxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxMaxCallDuration.setStatus('mandatory')
cdx6500X25StatTxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatTxAvgCallDuration.setStatus('mandatory')
cdx6500X25StatSignalingState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 100))).clone(namedValues=NamedValues(("idle", 1), ("ringing", 2), ("connected", 3), ("congested", 4), ("disabled", 5), ("dChannelDown", 6), ("disabledDChannelDown", 7), ("disconnecting", 8), ("notAvailable", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatSignalingState.setStatus('mandatory')
cdx6500X25StatMaxPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxPortUtilIn.setStatus('mandatory')
cdx6500X25StatMaxPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxPortUtilOut.setStatus('mandatory')
cdx6500X25StatMaxPortUtilInTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxPortUtilInTime.setStatus('mandatory')
cdx6500X25StatMaxPortUtilOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxPortUtilOutTime.setStatus('mandatory')
cdx6500X25StatMaxSVCCountTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 2, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500X25StatMaxSVCCountTime.setStatus('mandatory')
cdx6500CGTInboundCallTranTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: cdx6500CGTInboundCallTranTable.setStatus('mandatory')
cdx6500CGTInboundCallTranEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500InCallTranEntryNum"))
if mibBuilder.loadTexts: cdx6500CGTInboundCallTranEntry.setStatus('mandatory')
cdx6500InCallTranEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500InCallTranEntryNum.setStatus('mandatory')
cdx6500InCallTranInSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500InCallTranInSubAddr.setStatus('mandatory')
cdx6500InCallTranPrivNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500InCallTranPrivNetAddr.setStatus('mandatory')
cdx6500CGTOutboundCallTranTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: cdx6500CGTOutboundCallTranTable.setStatus('mandatory')
cdx6500CGTOutboundCallTranEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500OutCallTranEntryNum"))
if mibBuilder.loadTexts: cdx6500CGTOutboundCallTranEntry.setStatus('mandatory')
cdx6500OutCallTranEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500OutCallTranEntryNum.setStatus('mandatory')
cdx6500OutCallTranPrivNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500OutCallTranPrivNetAddr.setStatus('mandatory')
cdx6500OutCallTranOutNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500OutCallTranOutNetAddr.setStatus('mandatory')
cdx6500OutCallTranOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("none", 0), ("olda", 1), ("newvalNone", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500OutCallTranOptions.setStatus('mandatory')
cdx6500CGTCallingAddrTranTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 13), )
if mibBuilder.loadTexts: cdx6500CGTCallingAddrTranTable.setStatus('mandatory')
cdx6500CGTCallingAddrTranEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 13, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500CalladdrtranEntryNum"))
if mibBuilder.loadTexts: cdx6500CGTCallingAddrTranEntry.setStatus('mandatory')
cdx6500CalladdrtranEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500CalladdrtranEntryNum.setStatus('mandatory')
cdx6500CalladdrtranInCallAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500CalladdrtranInCallAddr.setStatus('mandatory')
cdx6500CalladdrtranPrivNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500CalladdrtranPrivNetAddr.setStatus('mandatory')
cdx6500CGTCudBaseAddrTranTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 23), )
if mibBuilder.loadTexts: cdx6500CGTCudBaseAddrTranTable.setStatus('mandatory')
cdx6500CGTCudBaseAddrTranEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 23, 1), ).setIndexNames((0, "X25-OPT-MIB", "cdx6500CudBaseaddrtranEntryNum"))
if mibBuilder.loadTexts: cdx6500CGTCudBaseAddrTranEntry.setStatus('mandatory')
cdx6500CudBaseaddrtranEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500CudBaseaddrtranEntryNum.setStatus('mandatory')
cdx6500CudBaseStr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 23, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500CudBaseStr.setStatus('mandatory')
cdx6500CudBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500CudBaseAddr.setStatus('mandatory')
mibBuilder.exportSymbols("X25-OPT-MIB", cdx6500X25StatInChars=cdx6500X25StatInChars, cdx6500X25CfgInDigitsToStrip=cdx6500X25CfgInDigitsToStrip, cdx6500X25StatTxMaxCallDuration=cdx6500X25StatTxMaxCallDuration, cdx6500X25StatPktRateIn=cdx6500X25StatPktRateIn, cdx6500X25StatPortState=cdx6500X25StatPortState, cdx6500CudBaseStr=cdx6500CudBaseStr, cdx6500X25CfgPortNumber=cdx6500X25CfgPortNumber, cdx6500X25CfgNumberInSVCs=cdx6500X25CfgNumberInSVCs, cdx6500X25CfgProtectLevel=cdx6500X25CfgProtectLevel, cdx6500X25CfgClockSource=cdx6500X25CfgClockSource, cdx6500X25StatRxMinCallDuration=cdx6500X25StatRxMinCallDuration, cdx6500X25StatInDataFrames=cdx6500X25StatInDataFrames, cdx6500InCallTranInSubAddr=cdx6500InCallTranInSubAddr, cdx6500X25StatMaxPortUtilOut=cdx6500X25StatMaxPortUtilOut, cdx6500X25StatInREJFrames=cdx6500X25StatInREJFrames, cdx6500X25CfgValdFailures=cdx6500X25CfgValdFailures, cdx6500X25StatRxAvgCallDuration=cdx6500X25StatRxAvgCallDuration, cdx6500X25CfgIdleDiscTimer=cdx6500X25CfgIdleDiscTimer, cdx6500X25CfgOutBarFacilities=cdx6500X25CfgOutBarFacilities, cdx6500X25CfgN2TransTries=cdx6500X25CfgN2TransTries, cdx6500X25StatRxLastCalledNumber=cdx6500X25StatRxLastCalledNumber, cdx6500X25StatMaxPortUtilIn=cdx6500X25StatMaxPortUtilIn, cdx6500OutCallTranOptions=cdx6500OutCallTranOptions, cdx6500X25CfgT1RetryTimer=cdx6500X25CfgT1RetryTimer, cdx6500X25CfgRestrictConn=cdx6500X25CfgRestrictConn, cdx6500X25CfgDimType=cdx6500X25CfgDimType, cdx6500X25StatTxMinCallDuration=cdx6500X25StatTxMinCallDuration, cdx6500X25StatInRNRFrames=cdx6500X25StatInRNRFrames, cdx6500PPCTX25PortEntry=cdx6500PPCTX25PortEntry, cdx6500X25StatCharRateOut=cdx6500X25StatCharRateOut, cdx6500X25CfgChargeInfoReq=cdx6500X25CfgChargeInfoReq, cdx6500X25CfgAdmnInterfaceMode=cdx6500X25CfgAdmnInterfaceMode, cdx6500CGTCudBaseAddrTranEntry=cdx6500CGTCudBaseAddrTranEntry, cdx6500X25CfgStartPVCChanNum=cdx6500X25CfgStartPVCChanNum, cdx6500X25CfgLineIdleMode=cdx6500X25CfgLineIdleMode, cdx6500X25CfgNumRoutDigits=cdx6500X25CfgNumRoutDigits, cdx6500X25CfgAdmnResetTimer=cdx6500X25CfgAdmnResetTimer, cdx6500Configuration=cdx6500Configuration, cdx6500X25CfgAdmnClearTimer=cdx6500X25CfgAdmnClearTimer, cdx6500X25StatMaxSVCCountTime=cdx6500X25StatMaxSVCCountTime, cdx6500X25StatNumRxCallsSinceLastReset=cdx6500X25StatNumRxCallsSinceLastReset, cdx6500X25CfgWPacketWindow=cdx6500X25CfgWPacketWindow, cdx6500X25CfgSubAddrSize=cdx6500X25CfgSubAddrSize, cdx6500X25StatActualPortSpeed=cdx6500X25StatActualPortSpeed, cdx6500CalladdrtranInCallAddr=cdx6500CalladdrtranInCallAddr, cdx6500X25StatInDataPkts=cdx6500X25StatInDataPkts, cdx6500X25CfgDataQueueLower=cdx6500X25CfgDataQueueLower, cdx6500X25CfgStartInSVCChanNum=cdx6500X25CfgStartInSVCChanNum, cdx6500X25StatCurrSVCCount=cdx6500X25StatCurrSVCCount, cdx6500X25StatCharRateIn=cdx6500X25StatCharRateIn, cdx6500X25StatNumTxCallsRejected=cdx6500X25StatNumTxCallsRejected, cdx6500CGTCudBaseAddrTranTable=cdx6500CGTCudBaseAddrTranTable, cdx6500X25StatOverrunErrs=cdx6500X25StatOverrunErrs, cdx6500X25CfgReconnTriesLimit=cdx6500X25CfgReconnTriesLimit, cdx6500PPSTX25PortTable=cdx6500PPSTX25PortTable, cdx6500X25StatCRCErrs=cdx6500X25StatCRCErrs, cdx6500X25StatRxLastCallFailureCause=cdx6500X25StatRxLastCallFailureCause, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500X25StatPktRateOut=cdx6500X25StatPktRateOut, cdx6500X25CfgVerfnTimer=cdx6500X25CfgVerfnTimer, cdx6500CudBaseaddrtranEntryNum=cdx6500CudBaseaddrtranEntryNum, cdx6500X25StatInInfoFrames=cdx6500X25StatInInfoFrames, cdxProductSpecific=cdxProductSpecific, cdx6500CudBaseAddr=cdx6500CudBaseAddr, cdx6500X25StatTxLastCallFailureCause=cdx6500X25StatTxLastCallFailureCause, cdx6500X25CfgAddrTrans=cdx6500X25CfgAddrTrans, cdx6500InCallTranEntryNum=cdx6500InCallTranEntryNum, cdx6500=cdx6500, cdx6500X25StatOutRNRFrames=cdx6500X25StatOutRNRFrames, cdx6500X25StatNumTxCallsSinceLastReset=cdx6500X25StatNumTxCallsSinceLastReset, cdx6500X25CfgElectricalInterfaceType=cdx6500X25CfgElectricalInterfaceType, cdx6500X25CfgConfOption=cdx6500X25CfgConfOption, cdx6500X25StatMaxSVCCount=cdx6500X25StatMaxSVCCount, cdx6500X25CfgPortCont=cdx6500X25CfgPortCont, cdx6500X25CfgMoreOptions=cdx6500X25CfgMoreOptions, cdx6500X25StatSignalingState=cdx6500X25StatSignalingState, cdx6500X25StatMaxPortUtilInTime=cdx6500X25StatMaxPortUtilInTime, cdx6500X25CfgFrameSeqCounting=cdx6500X25CfgFrameSeqCounting, cdx6500X25CfgBillRec=cdx6500X25CfgBillRec, cdx6500X25StatNumPktsQueued=cdx6500X25StatNumPktsQueued, cdx6500X25StatRxLastCallingNumber=cdx6500X25StatRxLastCallingNumber, DisplayString=DisplayString, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500OutCallTranPrivNetAddr=cdx6500OutCallTranPrivNetAddr, cdx6500X25StatFrameRateOut=cdx6500X25StatFrameRateOut, cdx6500PPSTX25PortEntry=cdx6500PPSTX25PortEntry, cdx6500X25StatPortNumber=cdx6500X25StatPortNumber, cdx6500Controls=cdx6500Controls, cdx6500CGTCallingAddrTranTable=cdx6500CGTCallingAddrTranTable, cdx6500X25CfgConnType=cdx6500X25CfgConnType, cdx6500CGTOutboundCallTranEntry=cdx6500CGTOutboundCallTranEntry, cdx6500X25StatInPkts=cdx6500X25StatInPkts, cdx6500X25CfgPortDigitsToStrip=cdx6500X25CfgPortDigitsToStrip, cdx6500X25StatOutREJFrames=cdx6500X25StatOutREJFrames, codex=codex, cdx6500X25CfgOptions=cdx6500X25CfgOptions, cdx6500X25StatFrameRateIn=cdx6500X25StatFrameRateIn, cdx6500X25CfgAdmnRestartTimer=cdx6500X25CfgAdmnRestartTimer, cdx6500X25StatTxLastCallingNumber=cdx6500X25StatTxLastCallingNumber, cdx6500X25StatRxMaxCallDuration=cdx6500X25StatRxMaxCallDuration, cdx6500InCallTranPrivNetAddr=cdx6500InCallTranPrivNetAddr, cdx6500X25CfgAdmnPacketSequencing=cdx6500X25CfgAdmnPacketSequencing, cdx6500X25StatOutDataFrames=cdx6500X25StatOutDataFrames, cdx6500X25CfgInBarFacilities=cdx6500X25CfgInBarFacilities, cdx6500X25StatOutPkts=cdx6500X25StatOutPkts, cdx6500X25StatPortStatus=cdx6500X25StatPortStatus, cdx6500X25StatTxAvgCallDuration=cdx6500X25StatTxAvgCallDuration, cdx6500X25StatTxLastCalledNumber=cdx6500X25StatTxLastCalledNumber, cdx6500X25StatNumRxCallsRejected=cdx6500X25StatNumRxCallsRejected, cdx6500CGTInboundCallTranEntry=cdx6500CGTInboundCallTranEntry, cdx6500X25CfgPsfFlag=cdx6500X25CfgPsfFlag, cdx6500X25CfgAdmnNumberPVCs=cdx6500X25CfgAdmnNumberPVCs, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500OutCallTranEntryNum=cdx6500OutCallTranEntryNum, cdx6500CalladdrtranPrivNetAddr=cdx6500CalladdrtranPrivNetAddr, cdx6500X25CfgV24ElectricalInterfaceOption=cdx6500X25CfgV24ElectricalInterfaceOption, cdx6500X25CfgHighSpeedElectricalInterfaceOption=cdx6500X25CfgHighSpeedElectricalInterfaceOption, cdx6500X25CfgPPacketSize=cdx6500X25CfgPPacketSize, cdx6500X25CfgT4PollTimer=cdx6500X25CfgT4PollTimer, cdx6500X25StatPortUtilOut=cdx6500X25StatPortUtilOut, cdx6500Statistics=cdx6500Statistics, cdx6500X25CfgInitFrame=cdx6500X25CfgInitFrame, cdx6500X25CfgDataQueueUpper=cdx6500X25CfgDataQueueUpper, cdx6500X25StatUnderrunErrs=cdx6500X25StatUnderrunErrs, cdx6500X25StatOutInfoFrames=cdx6500X25StatOutInfoFrames, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500CalladdrtranEntryNum=cdx6500CalladdrtranEntryNum, cdx6500X25CfgClockSpeed=cdx6500X25CfgClockSpeed, cdx6500X25CfgReconnTimeout=cdx6500X25CfgReconnTimeout, cdx6500X25CfgNumberOutSVCs=cdx6500X25CfgNumberOutSVCs, cdx6500OutCallTranOutNetAddr=cdx6500OutCallTranOutNetAddr, cdx6500X25CfgStartSVCChanNum=cdx6500X25CfgStartSVCChanNum, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500CGTInboundCallTranTable=cdx6500CGTInboundCallTranTable, cdx6500X25CfgOutDelFacilities=cdx6500X25CfgOutDelFacilities, cdx6500X25StatOutChars=cdx6500X25StatOutChars, cdx6500X25CfgNumberSVCs=cdx6500X25CfgNumberSVCs, cdx6500X25StatPortUtilIn=cdx6500X25StatPortUtilIn, cdx6500X25CfgMaxNegotPacketSize=cdx6500X25CfgMaxNegotPacketSize, cdx6500CGTCallingAddrTranEntry=cdx6500CGTCallingAddrTranEntry, cdx6500X25StatMaxPortUtilOutTime=cdx6500X25StatMaxPortUtilOutTime, cdx6500X25CfgCallSecurity=cdx6500X25CfgCallSecurity, cdx6500X25CfgKFrameWindow=cdx6500X25CfgKFrameWindow, cdx6500X25CfgCUGMember=cdx6500X25CfgCUGMember, cdx6500X25StatOutDataPkts=cdx6500X25StatOutDataPkts, cdx6500X25CfgStartOutSVCChanNum=cdx6500X25CfgStartOutSVCChanNum, cdx6500X25StatOutRRFrames=cdx6500X25StatOutRRFrames, cdx6500X25CfgOutAddFacilities=cdx6500X25CfgOutAddFacilities, cdx6500PPCTX25PortTable=cdx6500PPCTX25PortTable, cdx6500X25CfgAlarmPriority=cdx6500X25CfgAlarmPriority, cdx6500X25CfgAdmnCallTimer=cdx6500X25CfgAdmnCallTimer, cdx6500X25CfgActionType=cdx6500X25CfgActionType, cdx6500CGTOutboundCallTranTable=cdx6500CGTOutboundCallTranTable, cdx6500X25CfgInvertTxClk=cdx6500X25CfgInvertTxClk, Counter16=Counter16, cdx6500X25CfgFacilSubscripCont=cdx6500X25CfgFacilSubscripCont, cdx6500X25StatInRRFrames=cdx6500X25StatInRRFrames, cdx6500X25CfgPortAddress=cdx6500X25CfgPortAddress)
