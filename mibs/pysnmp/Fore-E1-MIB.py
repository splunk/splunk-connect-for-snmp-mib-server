#
# PySNMP MIB module Fore-E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-E1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, Gauge32, Unsigned32, iso, ObjectIdentity, IpAddress, TimeTicks, Counter64, Counter32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "iso", "ObjectIdentity", "IpAddress", "TimeTicks", "Counter64", "Counter32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
foreE1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8))
if mibBuilder.loadTexts: foreE1.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreE1.setOrganization('FORE')
e1ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1))
e1StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2))
e1ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1), )
if mibBuilder.loadTexts: e1ConfTable.setStatus('current')
e1ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1), ).setIndexNames((0, "Fore-E1-MIB", "e1ConfBoard"), (0, "Fore-E1-MIB", "e1ConfModule"), (0, "Fore-E1-MIB", "e1ConfPort"))
if mibBuilder.loadTexts: e1ConfEntry.setStatus('current')
e1ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ConfBoard.setStatus('current')
e1ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ConfModule.setStatus('current')
e1ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ConfPort.setStatus('current')
e1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("e1Other", 1), ("e1NoCRC", 2), ("e1CRC", 3), ("e1MF", 4), ("e1CRCMF", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineType.setStatus('current')
e1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1Other", 1), ("e1HDB3", 2), ("e1AMI", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineCoding.setStatus('current')
e1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("e1SendNoCode", 1), ("e1SendLineCode", 2), ("e1SendPayloadCode", 3), ("e1SendResetCode", 4), ("e1SendQRS", 5), ("e1Send511Pattern", 6), ("e1Send3in24Pattern", 7), ("e1SendOtherTestPattern", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1SendCode.setStatus('current')
e1ReceiveCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("e1ReceiveNoCode", 1), ("e1ReceiveLineCode", 2), ("e1ReceivePayloadCode", 3), ("e1ReceiveResetCode", 4), ("e1SendQRS", 5), ("e1Send511Pattern", 6), ("e1Send3in24Pattern", 7), ("e1SendOtherTestPattern", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ReceiveCode.setStatus('current')
e1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("e1NoLoop", 1), ("e1LineLoop", 2), ("e1PayloadLoop", 3), ("e1DiagLoop", 4), ("e1OtherLoop", 5))).clone('e1NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1LoopbackConfig.setStatus('current')
e1TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxClockSource.setStatus('current')
e1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LineStatus.setStatus('current')
e1IdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1IdleUnassignedCells.setStatus('current')
e1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("e1LineLt110", 1), ("e1Line110-220", 2), ("e1Line220-330", 3), ("e1Line330-440", 4), ("e1Line440-550", 5), ("e1Line550-660", 6), ("e1LineG703-75", 7), ("e1LineG703-120", 8), ("e1LineLt110Alt", 9), ("e1Line110-220Alt", 10), ("e1Line220-330Alt", 11), ("e1Line330-440Alt", 12), ("e1Line440-550Alt", 13), ("e1Line550-660Alt", 14), ("e1LineG703-75Alt", 15), ("e1LineG703-120Alt", 16))).clone('e1LineLt110')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1LineLength.setStatus('current')
e1LineTypeFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("e1Hcs", 2), ("e1Plcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1LineTypeFraming.setStatus('current')
e1RxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descrambling", 1), ("noDescrambling", 2))).clone('descrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1RxScrambling.setStatus('current')
e1TxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambling", 1), ("noScrambling", 2))).clone('scrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1TxScrambling.setStatus('current')
e1FramingTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1), )
if mibBuilder.loadTexts: e1FramingTable.setStatus('current')
e1FramingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1), ).setIndexNames((0, "Fore-E1-MIB", "e1FramingBoard"), (0, "Fore-E1-MIB", "e1FramingModule"), (0, "Fore-E1-MIB", "e1FramingPort"))
if mibBuilder.loadTexts: e1FramingEntry.setStatus('current')
e1FramingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingBoard.setStatus('current')
e1FramingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingModule.setStatus('current')
e1FramingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingPort.setStatus('current')
e1FramingLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingLCVs.setStatus('current')
e1FramingFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingFERRs.setStatus('current')
e1FramingFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingFEBEs.setStatus('current')
e1FramingCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingCRCs.setStatus('current')
e1FramingOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingOOFs.setStatus('current')
e1FramingLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingLOSs.setStatus('current')
e1FramingAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingAISs.setStatus('current')
e1FramingAISDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingAISDs.setStatus('current')
e1FramingRedAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingRedAlarms.setStatus('current')
e1FramingYellowAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1FramingYellowAlarms.setStatus('current')
e1PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2), )
if mibBuilder.loadTexts: e1PlcpTable.setStatus('current')
e1PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1), ).setIndexNames((0, "Fore-E1-MIB", "e1PlcpBoard"), (0, "Fore-E1-MIB", "e1PlcpModule"), (0, "Fore-E1-MIB", "e1PlcpPort"))
if mibBuilder.loadTexts: e1PlcpEntry.setStatus('current')
e1PlcpBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpBoard.setStatus('current')
e1PlcpModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpModule.setStatus('current')
e1PlcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpPort.setStatus('current')
e1PlcpBIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpBIP8s.setStatus('current')
e1PlcpFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpFERRs.setStatus('current')
e1PlcpFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpFEBEs.setStatus('current')
e1PlcpLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpLOFs.setStatus('current')
e1PlcpYellows = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1PlcpYellows.setStatus('current')
e1AtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3), )
if mibBuilder.loadTexts: e1AtmTable.setStatus('current')
e1AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1), ).setIndexNames((0, "Fore-E1-MIB", "e1AtmBoard"), (0, "Fore-E1-MIB", "e1AtmModule"), (0, "Fore-E1-MIB", "e1AtmPort"))
if mibBuilder.loadTexts: e1AtmEntry.setStatus('current')
e1AtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmBoard.setStatus('current')
e1AtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmModule.setStatus('current')
e1AtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmPort.setStatus('current')
e1AtmHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmHCSs.setStatus('current')
e1AtmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmRxCells.setStatus('current')
e1AtmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmTxCells.setStatus('current')
e1AtmUHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmUHCSs.setStatus('current')
e1AtmCHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmCHCSs.setStatus('current')
e1AtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 8, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AtmLCDs.setStatus('current')
mibBuilder.exportSymbols("Fore-E1-MIB", e1PlcpBoard=e1PlcpBoard, e1ReceiveCode=e1ReceiveCode, e1AtmLCDs=e1AtmLCDs, e1FramingModule=e1FramingModule, e1LineStatus=e1LineStatus, e1PlcpBIP8s=e1PlcpBIP8s, e1RxScrambling=e1RxScrambling, e1LineLength=e1LineLength, e1FramingLOSs=e1FramingLOSs, e1LineType=e1LineType, e1AtmHCSs=e1AtmHCSs, e1FramingAISs=e1FramingAISs, e1IdleUnassignedCells=e1IdleUnassignedCells, e1FramingPort=e1FramingPort, e1AtmModule=e1AtmModule, e1TxClockSource=e1TxClockSource, e1FramingFERRs=e1FramingFERRs, e1FramingTable=e1FramingTable, e1FramingYellowAlarms=e1FramingYellowAlarms, e1FramingEntry=e1FramingEntry, e1PlcpPort=e1PlcpPort, e1PlcpYellows=e1PlcpYellows, e1PlcpLOFs=e1PlcpLOFs, PYSNMP_MODULE_ID=foreE1, e1FramingRedAlarms=e1FramingRedAlarms, e1AtmEntry=e1AtmEntry, e1AtmPort=e1AtmPort, e1FramingCRCs=e1FramingCRCs, e1AtmCHCSs=e1AtmCHCSs, e1ConfTable=e1ConfTable, e1AtmTable=e1AtmTable, e1ConfGroup=e1ConfGroup, e1LineCoding=e1LineCoding, e1FramingOOFs=e1FramingOOFs, e1PlcpModule=e1PlcpModule, e1PlcpFEBEs=e1PlcpFEBEs, e1StatsGroup=e1StatsGroup, e1PlcpTable=e1PlcpTable, e1FramingBoard=e1FramingBoard, e1PlcpEntry=e1PlcpEntry, e1AtmUHCSs=e1AtmUHCSs, e1ConfPort=e1ConfPort, e1TxScrambling=e1TxScrambling, e1LoopbackConfig=e1LoopbackConfig, e1FramingLCVs=e1FramingLCVs, e1ConfModule=e1ConfModule, e1ConfBoard=e1ConfBoard, e1LineTypeFraming=e1LineTypeFraming, e1AtmRxCells=e1AtmRxCells, e1ConfEntry=e1ConfEntry, e1AtmBoard=e1AtmBoard, foreE1=foreE1, e1FramingFEBEs=e1FramingFEBEs, e1FramingAISDs=e1FramingAISDs, e1SendCode=e1SendCode, e1PlcpFERRs=e1PlcpFERRs, e1AtmTxCells=e1AtmTxCells)
