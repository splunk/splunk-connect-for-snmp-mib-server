#
# PySNMP MIB module ED-5000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ED-5000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, MibIdentifier, Unsigned32, Counter64, NotificationType, IpAddress, Integer32, NotificationType, iso, Gauge32, ModuleIdentity, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibIdentifier", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "Integer32", "NotificationType", "iso", "Gauge32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
ed_5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1)).setLabel("ed-5000")
class DisplayString(OctetString):
    pass

class Ed5000SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Ed5000SysState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4))

class Ed5000FruCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("fru-bkplane", 1), ("fru-ctp", 2), ("fru-mpc", 3), ("fru-cmm", 4), ("fru-fan", 5), ("fru-power", 6), ("fru-panel", 7), ("fru-gsm", 8), ("fru-gls", 9), ("fru-glx", 10), ("fru-lsm", 11), ("fru-gxx", 12))

class Ed5000FruPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Ed5000FruStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("backup", 2), ("update-busy", 3), ("failed", 4))

class Ed5000PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

class Ed5000PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11))

class Ed5000PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4))

class Ed5000PortAdmStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3))

ed5000Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1))
ed5000Fru = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2))
ed5000Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3))
ed5000SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysCurrentDate.setStatus('mandatory')
ed5000SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysBootDate.setStatus('mandatory')
ed5000SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysFirmwareVersion.setStatus('mandatory')
ed5000SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysTypeNum.setStatus('mandatory')
ed5000SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysModelNum.setStatus('mandatory')
ed5000SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysMfg.setStatus('mandatory')
ed5000SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysPlantOfMfg.setStatus('mandatory')
ed5000SysSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysSeqNum.setStatus('mandatory')
ed5000SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysEcLevel.setStatus('mandatory')
ed5000SysOemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysOemSerialNum.setStatus('mandatory')
ed5000SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 11), Ed5000SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysOperStatus.setStatus('mandatory')
ed5000SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 12), Ed5000SysState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000SysState.setStatus('mandatory')
ed5000SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed5000SysAdmStatus.setStatus('mandatory')
ed5000FruTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ed5000FruTable.setStatus('mandatory')
ed5000FruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "ED-5000-MIB", "ed5000FruCode"), (0, "ED-5000-MIB", "ed5000FruPosition"))
if mibBuilder.loadTexts: ed5000FruEntry.setStatus('mandatory')
ed5000FruCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 1), Ed5000FruCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruCode.setStatus('mandatory')
ed5000FruPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 2), Ed5000FruPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruPosition.setStatus('mandatory')
ed5000FruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 3), Ed5000FruStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruStatus.setStatus('mandatory')
ed5000FruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruPartNumber.setStatus('mandatory')
ed5000FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruSerialNumber.setStatus('mandatory')
ed5000FruPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruPowerOnHours.setStatus('mandatory')
ed5000FruTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000FruTestDate.setStatus('mandatory')
ed5000PortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ed5000PortTable.setStatus('mandatory')
ed5000PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "ED-5000-MIB", "ed5000PortIndex"))
if mibBuilder.loadTexts: ed5000PortEntry.setStatus('mandatory')
ed5000PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 1), Ed5000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortIndex.setStatus('mandatory')
ed5000PortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 2), Ed5000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortPhyState.setStatus('mandatory')
ed5000PortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 3), Ed5000PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortOpStatus.setStatus('mandatory')
ed5000PortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 4), Ed5000PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed5000PortAdmStatus.setStatus('mandatory')
ed5000PortTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortTxWords.setStatus('mandatory')
ed5000PortRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxWords.setStatus('mandatory')
ed5000PortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortTxFrames.setStatus('mandatory')
ed5000PortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxFrames.setStatus('mandatory')
ed5000PortRxC2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxC2Frames.setStatus('mandatory')
ed5000PortRxC3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxC3Frames.setStatus('mandatory')
ed5000PortRxLCs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxLCs.setStatus('mandatory')
ed5000PortRxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxMcasts.setStatus('mandatory')
ed5000PortTooManyRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortTooManyRdys.setStatus('mandatory')
ed5000PortNoTxCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortNoTxCredits.setStatus('mandatory')
ed5000PortRxEncFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxEncFrs.setStatus('mandatory')
ed5000PortRxCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxCrcs.setStatus('mandatory')
ed5000PortRxTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxTruncs.setStatus('mandatory')
ed5000PortRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxTooLongs.setStatus('mandatory')
ed5000PortRxBadEofs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxBadEofs.setStatus('mandatory')
ed5000PortRxBadOs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxBadOs.setStatus('mandatory')
ed5000PortC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortC3Discards.setStatus('mandatory')
ed5000PortMcastTimedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortMcastTimedOuts.setStatus('mandatory')
ed5000PortTxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortTxMcasts.setStatus('mandatory')
ed5000PortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortTxThroughput.setStatus('mandatory')
ed5000PortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed5000PortRxThroughput.setStatus('mandatory')
ed5000PortScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("ED-5000-MIB", "ed5000PortOpStatus"))
ed5000FruScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("ED-5000-MIB", "ed5000FruStatus"))
mibBuilder.exportSymbols("ED-5000-MIB", ed5000FruTestDate=ed5000FruTestDate, ed_5000=ed_5000, Ed5000FruPosition=Ed5000FruPosition, ed5000PortRxMcasts=ed5000PortRxMcasts, ed5000SysState=ed5000SysState, ed5000PortRxCrcs=ed5000PortRxCrcs, ed5000FruStatus=ed5000FruStatus, ed5000PortRxWords=ed5000PortRxWords, Ed5000PortAdmStatus=Ed5000PortAdmStatus, Ed5000FruCode=Ed5000FruCode, ed5000SysOperStatus=ed5000SysOperStatus, ed5000PortRxC3Frames=ed5000PortRxC3Frames, ed5000SysBootDate=ed5000SysBootDate, Ed5000SysState=Ed5000SysState, ed5000FruCode=ed5000FruCode, ed5000PortRxTooLongs=ed5000PortRxTooLongs, ed5000PortScn=ed5000PortScn, Ed5000PortPhyState=Ed5000PortPhyState, Ed5000SysOperStatus=Ed5000SysOperStatus, ed5000PortEntry=ed5000PortEntry, commDev=commDev, ed5000SysTypeNum=ed5000SysTypeNum, Ed5000PortIndex=Ed5000PortIndex, ed5000SysCurrentDate=ed5000SysCurrentDate, ed5000SysAdmStatus=ed5000SysAdmStatus, ed5000PortRxFrames=ed5000PortRxFrames, ed5000PortRxThroughput=ed5000PortRxThroughput, fcSwitch=fcSwitch, ed5000PortAdmStatus=ed5000PortAdmStatus, ed5000FruScn=ed5000FruScn, ed5000FruPosition=ed5000FruPosition, ed5000FruPartNumber=ed5000FruPartNumber, Ed5000FruStatus=Ed5000FruStatus, DisplayString=DisplayString, ed5000FruEntry=ed5000FruEntry, ed5000PortTxWords=ed5000PortTxWords, ed5000PortIndex=ed5000PortIndex, ed5000PortMcastTimedOuts=ed5000PortMcastTimedOuts, ed5000Port=ed5000Port, ed5000PortRxBadEofs=ed5000PortRxBadEofs, mcData=mcData, ed5000PortPhyState=ed5000PortPhyState, ed5000PortTxFrames=ed5000PortTxFrames, ed5000PortRxBadOs=ed5000PortRxBadOs, ed5000PortRxEncFrs=ed5000PortRxEncFrs, fibreChannel=fibreChannel, ed5000SysEcLevel=ed5000SysEcLevel, ed5000PortRxC2Frames=ed5000PortRxC2Frames, ed5000Sys=ed5000Sys, ed5000PortNoTxCredits=ed5000PortNoTxCredits, ed5000PortTxThroughput=ed5000PortTxThroughput, ed5000SysModelNum=ed5000SysModelNum, ed5000PortTable=ed5000PortTable, ed5000SysPlantOfMfg=ed5000SysPlantOfMfg, ed5000FruTable=ed5000FruTable, ed5000PortTooManyRdys=ed5000PortTooManyRdys, ed5000PortTxMcasts=ed5000PortTxMcasts, ed5000FruSerialNumber=ed5000FruSerialNumber, ed5000Fru=ed5000Fru, ed5000SysFirmwareVersion=ed5000SysFirmwareVersion, ed5000SysOemSerialNum=ed5000SysOemSerialNum, ed5000PortRxLCs=ed5000PortRxLCs, ed5000PortOpStatus=ed5000PortOpStatus, ed5000FruPowerOnHours=ed5000FruPowerOnHours, ed5000SysSeqNum=ed5000SysSeqNum, Ed5000PortStatus=Ed5000PortStatus, ed5000PortRxTruncs=ed5000PortRxTruncs, ed5000PortC3Discards=ed5000PortC3Discards, ed5000SysMfg=ed5000SysMfg)
