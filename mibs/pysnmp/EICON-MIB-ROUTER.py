#
# PySNMP MIB module EICON-MIB-ROUTER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-MIB-ROUTER
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Unsigned32, ObjectIdentity, Integer32, Bits, Counter64, NotificationType, MibIdentifier, Gauge32, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Unsigned32", "ObjectIdentity", "Integer32", "Bits", "Counter64", "NotificationType", "MibIdentifier", "Gauge32", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 8))
class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("disabled", 2), ("ready", 3), ("active", 4), ("busy", 5))

class AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("start", 1), ("stop", 2), ("dump", 3), ("test", 4), ("invalid", 5))

class ActionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("done", 1), ("failed", 2), ("in-progress", 3))

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class EntryStatusV2(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4), ("modifyRequest", 5), ("underModification", 6))

class ConnectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("listening", 2), ("calling", 3), ("connected", 4), ("hangingup", 5), ("hungup", 6), ("pending-hungup", 7))

class ControlOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("stop", 1), ("start", 2), ("invalid", 3))

class CardRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 6)

class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

rtName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtName.setStatus('mandatory')
rtProductName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtProductName.setStatus('mandatory')
rtReleaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtReleaseVersion.setStatus('mandatory')
rtReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtReleaseDate.setStatus('mandatory')
rtOperState = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOperState.setStatus('mandatory')
rtAdminStateCtr = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtAdminStateCtr.setStatus('mandatory')
rtType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("typeNetWareRouter", 1), ("typeOS2Router", 2), ("typeUnixRouter", 3), ("typeNTRouter", 4), ("typeSynOpticsRouter", 5), ("typeMadrasRouter", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtType.setStatus('mandatory')
rtTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTimeUp.setStatus('mandatory')
rtNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNumberOfPorts.setStatus('mandatory')
rtMaxCircuits = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxCircuits.setStatus('mandatory')
rtAvailableCircuits = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableCircuits.setStatus('mandatory')
rtAvailableLANMapping = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableLANMapping.setStatus('mandatory')
rtMaxLANMapping = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxLANMapping.setStatus('mandatory')
rtGlobalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxPackets.setStatus('mandatory')
rtGlobalTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxBytesLow.setStatus('mandatory')
rtGlobalTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxBytesHigh.setStatus('mandatory')
rtGlobalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxPackets.setStatus('mandatory')
rtGlobalRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxBytesLow.setStatus('mandatory')
rtGlobalRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxBytesHigh.setStatus('mandatory')
rtGlobalTxDropNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropNoRoute.setStatus('mandatory')
rtGlobalTxDropNoResource = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropNoResource.setStatus('mandatory')
rtGlobalTxDropUnknownProt = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropUnknownProt.setStatus('mandatory')
rtGlobalRxDropNoResource = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxDropNoResource.setStatus('mandatory')
rtGlobalRxDropUnknownProt = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxDropUnknownProt.setStatus('mandatory')
rtGlobalRxError = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxError.setStatus('mandatory')
rtGlobalCountersReset = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 26), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtGlobalCountersReset.setStatus('mandatory')
rtTraceCtrl = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 27), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceCtrl.setStatus('mandatory')
rtTraceFileName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceFileName.setStatus('mandatory')
rtTraceInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceInterfaceType.setStatus('mandatory')
rtPortTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30), )
if mibBuilder.loadTexts: rtPortTable.setStatus('mandatory')
rtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtPortIndex"))
if mibBuilder.loadTexts: rtPortEntry.setStatus('mandatory')
rtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortIndex.setStatus('mandatory')
rtPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortNumber.setStatus('mandatory')
rtPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortProtocol.setStatus('mandatory')
rtPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxThroughput.setStatus('mandatory')
rtPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxThroughput.setStatus('mandatory')
rtPortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxPackets.setStatus('mandatory')
rtPortTxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxBytesLow.setStatus('mandatory')
rtPortTxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxBytesHigh.setStatus('mandatory')
rtPortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxPackets.setStatus('mandatory')
rtPortRxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxBytesLow.setStatus('mandatory')
rtPortRxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxBytesHigh.setStatus('mandatory')
rtPortTxDropNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxDropNoResource.setStatus('mandatory')
rtPortRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxError.setStatus('mandatory')
rtPortCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 14), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtPortCountersReset.setStatus('mandatory')
rtConnFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnFreeIndex.setStatus('mandatory')
rtConnTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32), )
if mibBuilder.loadTexts: rtConnTable.setStatus('mandatory')
rtConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtConnIndex"))
if mibBuilder.loadTexts: rtConnEntry.setStatus('mandatory')
rtConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnIndex.setStatus('mandatory')
rtConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnName.setStatus('mandatory')
rtConnComment = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnComment.setStatus('mandatory')
rtConnEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 4), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnEntryStatus.setStatus('mandatory')
rtConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnOperState.setStatus('mandatory')
rtConnAdminStateCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnAdminStateCtr.setStatus('mandatory')
rtConnAutoStart = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("startYes", 1), ("startNo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnAutoStart.setStatus('mandatory')
rtConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("typeIn", 1), ("typeOut", 2), ("typeTwoWay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnType.setStatus('mandatory')
rtConnInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnInactivityTimeout.setStatus('mandatory')
rtConnPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 10), PortRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPortNumber.setStatus('mandatory')
rtConnCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("comprNo", 1), ("comprStac", 2), ("comprOther", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnCompression.setStatus('mandatory')
rtConnRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRetryNum.setStatus('mandatory')
rtConnRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRetryDelay.setStatus('mandatory')
rtConnPeerRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("peerNetWareV2", 1), ("peerNetWareNLM", 2), ("peerUniversal", 3), ("peerCISCO", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPeerRouter.setStatus('mandatory')
rtConnLanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnLanProtocol.setStatus('mandatory')
rtConnWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connX25Svc", 1), ("connX25Pvc", 2), ("connFr", 3), ("connPpp", 4), ("connSna", 5), ("connHdlc", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnWanProtocol.setStatus('mandatory')
rtConnX25LocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25LocalDTE.setStatus('mandatory')
rtConnX25RemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25RemoteDTE.setStatus('mandatory')
rtConnX25CallingFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25CallingFacilities.setStatus('mandatory')
rtConnX25ListeningFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25ListeningFacilities.setStatus('mandatory')
rtConnX25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25UserData.setStatus('mandatory')
rtConnX25Pvc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25Pvc.setStatus('mandatory')
rtConnFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrDlci.setStatus('mandatory')
rtConnSnaPuName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaPuName.setStatus('mandatory')
rtConnSnaLocalFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaLocalFqName.setStatus('mandatory')
rtConnSnaRemoteFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRemoteFqName.setStatus('mandatory')
rtConnSnaModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaModeName.setStatus('mandatory')
rtConnSnaSendPaceWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaSendPaceWindow.setStatus('mandatory')
rtConnSnaReceivePaceWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaReceivePaceWindow.setStatus('mandatory')
rtConnSnaRuSendLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuSendLow.setStatus('mandatory')
rtConnSnaRuReceiveLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuReceiveLow.setStatus('mandatory')
rtConnSnaRuSendHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuSendHigh.setStatus('mandatory')
rtConnSnaRuReceiveHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuReceiveHigh.setStatus('mandatory')
rtConnUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uSagePrimary", 1), ("uSageBackup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnUsage.setStatus('mandatory')
rtConnFrSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrSegmentation.setStatus('mandatory')
rtConnFrXid = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrXid.setStatus('mandatory')
rtConnPrimOrBackName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPrimOrBackName.setStatus('mandatory')
rtConnRipSapUpdateType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("onchange", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRipSapUpdateType.setStatus('mandatory')
rtConnSAPDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSAPDelay.setStatus('mandatory')
rtConnRIPDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRIPDelay.setStatus('mandatory')
rtIPMapFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPMapFreeIndex.setStatus('mandatory')
rtIPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34), )
if mibBuilder.loadTexts: rtIPMappingTable.setStatus('mandatory')
rtIPMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtIPMapConnIndex"), (0, "EICON-MIB-ROUTER", "rtIPMapIndex"))
if mibBuilder.loadTexts: rtIPMappingEntry.setStatus('mandatory')
rtIPMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPMapIndex.setStatus('mandatory')
rtIPMapConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapConnIndex.setStatus('mandatory')
rtIPMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 3), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapEntryStatus.setStatus('mandatory')
rtIPMapNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapNextHop.setStatus('mandatory')
rtIPMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadNo", 1), ("broadYes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapBroadcast.setStatus('mandatory')
rtIPMapIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapIPMask.setStatus('mandatory')
rtIPMapVJCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vjNo", 1), ("vjYes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapVJCompress.setStatus('mandatory')
rtCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35), )
if mibBuilder.loadTexts: rtCircuitTable.setStatus('mandatory')
rtCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitConnIndex"))
if mibBuilder.loadTexts: rtCircuitEntry.setStatus('mandatory')
rtCircuitConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitConnIndex.setStatus('mandatory')
rtCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("listening", 1), ("calling", 2), ("connected", 3), ("hangingup", 4), ("hungup", 5), ("aborted", 6), ("idle", 7), ("portdisconnected", 8), ("notbound", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitStatus.setStatus('mandatory')
rtCircuitTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitTimeUp.setStatus('mandatory')
rtCircuitErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitErrCode.setStatus('mandatory')
rtCircuitSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitSessionType.setStatus('mandatory')
rtCircuitConnLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitConnLSN.setStatus('mandatory')
rtCircuitDataLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitDataLSN.setStatus('mandatory')
rtCircuitCmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCmSelector.setStatus('mandatory')
rtCircuitCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCompression.setStatus('mandatory')
rtCircuitCompAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCompAlgorithm.setStatus('mandatory')
rtCircuitBeforeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitBeforeComp.setStatus('mandatory')
rtCircuitAfterComp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitAfterComp.setStatus('mandatory')
rtCircuitTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitTxErr.setStatus('mandatory')
rtCircuitBoundLANProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitBoundLANProtocol.setStatus('mandatory')
rtCircuitRemoteRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitRemoteRouter.setStatus('mandatory')
rtCircuitCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 16), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtCircuitCountersReset.setStatus('mandatory')
rtCircuitWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connX25Svc", 1), ("connX25Pvc", 2), ("connFr", 3), ("connPpp", 4), ("connSna", 5), ("connHdlc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitWanProtocol.setStatus('mandatory')
rtCircuitX25LocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25LocalDTE.setStatus('mandatory')
rtCircuitX25RemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25RemoteDTE.setStatus('mandatory')
rtCircuitX25CallingFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25CallingFacilities.setStatus('mandatory')
rtCircuitX25ListeningFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25ListeningFacilities.setStatus('mandatory')
rtCircuitX25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25UserData.setStatus('mandatory')
rtCircuitX25Cause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Cause.setStatus('mandatory')
rtCircuitX25Diag = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Diag.setStatus('mandatory')
rtCircuitX25Pvc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Pvc.setStatus('mandatory')
rtCircuitFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrDlci.setStatus('mandatory')
rtCircuitFrSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrSegmentation.setStatus('mandatory')
rtCircuitFrXIDNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrXIDNegot.setStatus('mandatory')
rtCircuitFrXIDPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrXIDPacketSize.setStatus('mandatory')
rtCircuitFrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noCongestion", 1), ("congested", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrCongestion.setStatus('mandatory')
rtCircuitIPTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36), )
if mibBuilder.loadTexts: rtCircuitIPTable.setStatus('mandatory')
rtCircuitIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitIPConnIndex"))
if mibBuilder.loadTexts: rtCircuitIPEntry.setStatus('mandatory')
rtCircuitIPConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPConnIndex.setStatus('mandatory')
rtCircuitIPRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRemoteAddress.setStatus('mandatory')
rtCircuitIPLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPLocalAddress.setStatus('mandatory')
rtCircuitIPTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPTxPackets.setStatus('mandatory')
rtCircuitIPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPTxBytes.setStatus('mandatory')
rtCircuitIPRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRxPackets.setStatus('mandatory')
rtCircuitIPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRxBytes.setStatus('mandatory')
rtCircuitIPXTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37), )
if mibBuilder.loadTexts: rtCircuitIPXTable.setStatus('mandatory')
rtCircuitIPXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitIPXConnIndex"))
if mibBuilder.loadTexts: rtCircuitIPXEntry.setStatus('mandatory')
rtCircuitIPXConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXConnIndex.setStatus('mandatory')
rtCircuitIPXRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRemoteNode.setStatus('mandatory')
rtCircuitIPXRemoteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRemoteNetwork.setStatus('mandatory')
rtCircuitIPXLocalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXLocalNode.setStatus('mandatory')
rtCircuitIPXLocalNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXLocalNetwork.setStatus('mandatory')
rtCircuitIPXTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXTxPackets.setStatus('mandatory')
rtCircuitIPXTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXTxBytes.setStatus('mandatory')
rtCircuitIPXRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRxPackets.setStatus('mandatory')
rtCircuitIPXRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRxBytes.setStatus('mandatory')
rtCircuitATTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38), )
if mibBuilder.loadTexts: rtCircuitATTable.setStatus('mandatory')
rtCircuitATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitATConnIndex"))
if mibBuilder.loadTexts: rtCircuitATEntry.setStatus('mandatory')
rtCircuitATConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATConnIndex.setStatus('mandatory')
rtCircuitATRemoteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRemoteNet.setStatus('mandatory')
rtCircuitATRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRemoteNode.setStatus('mandatory')
rtCircuitATLocalNet = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATLocalNet.setStatus('mandatory')
rtCircuitATLocalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATLocalNode.setStatus('mandatory')
rtCircuitATTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATTxPackets.setStatus('mandatory')
rtCircuitATTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATTxBytes.setStatus('mandatory')
rtCircuitATRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRxPackets.setStatus('mandatory')
rtCircuitATRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRxBytes.setStatus('mandatory')
rtMaxIPFilter = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxIPFilter.setStatus('mandatory')
rtAvailableIPFilter = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableIPFilter.setStatus('mandatory')
rtIPFilterDropStatsIn = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterDropStatsIn.setStatus('mandatory')
rtIPFilterDropStatsOut = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterDropStatsOut.setStatus('mandatory')
rtIPFilterForwardStatsIn = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterForwardStatsIn.setStatus('mandatory')
rtIPFilterForwardStatsOut = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterForwardStatsOut.setStatus('mandatory')
rtIPFilterFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterFreeIndex.setStatus('mandatory')
rtIPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46), )
if mibBuilder.loadTexts: rtIPFilterTable.setStatus('mandatory')
rtIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtIPFilterConnIndex"), (0, "EICON-MIB-ROUTER", "rtIPFilterIndex"))
if mibBuilder.loadTexts: rtIPFilterEntry.setStatus('mandatory')
rtIPFilterConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterConnIndex.setStatus('mandatory')
rtIPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterIndex.setStatus('mandatory')
rtIPFilterEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 3), EntryStatusV2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterEntryStatus.setStatus('mandatory')
rtIPFilterOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 4), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterOperState.setStatus('mandatory')
rtIPFilterAdminStateCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterAdminStateCtr.setStatus('mandatory')
rtIPFilterPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterPosition.setStatus('mandatory')
rtIPFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterAction.setStatus('mandatory')
rtIPFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterDirection.setStatus('mandatory')
rtIPFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterPortType.setStatus('mandatory')
rtIPFilterLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterLowSrcPort.setStatus('mandatory')
rtIPFilterHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterHighSrcPort.setStatus('mandatory')
rtIPFilterLowDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterLowDestPort.setStatus('mandatory')
rtIPFilterHighDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterHighDestPort.setStatus('mandatory')
rtIPFilterIPAddressSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPAddressSrc.setStatus('mandatory')
rtIPFilterIPMaskSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPMaskSrc.setStatus('mandatory')
rtIPFilterIPAddressDest = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPAddressDest.setStatus('mandatory')
rtIPFilterIPMaskDest = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPMaskDest.setStatus('mandatory')
rtIPFilterStatsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterStatsIn.setStatus('mandatory')
rtIPFilterStatsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterStatsOut.setStatus('mandatory')
rtActionState = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 47), ActionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtActionState.setStatus('mandatory')
rtActionError = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("no-error", 0), ("err-ALREADY-STARTED", 1), ("err-NOT-STARTED", 2), ("err-STACK-NOT-BOUND", 3), ("err-SHUTDOWN-FAILURE", 4), ("err-General", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtActionError.setStatus('mandatory')
mibBuilder.exportSymbols("EICON-MIB-ROUTER", rtCircuitFrSegmentation=rtCircuitFrSegmentation, rtAdminStateCtr=rtAdminStateCtr, rtCircuitIPXRemoteNetwork=rtCircuitIPXRemoteNetwork, rtCircuitIPXTxPackets=rtCircuitIPXTxPackets, rtIPFilterTable=rtIPFilterTable, rtIPMapEntryStatus=rtIPMapEntryStatus, rtIPMapConnIndex=rtIPMapConnIndex, rtPortNumber=rtPortNumber, rtPortProtocol=rtPortProtocol, rtConnX25LocalDTE=rtConnX25LocalDTE, rtGlobalTxBytesHigh=rtGlobalTxBytesHigh, rtCircuitConnIndex=rtCircuitConnIndex, rtConnType=rtConnType, rtConnPortNumber=rtConnPortNumber, rtConnWanProtocol=rtConnWanProtocol, rtConnRipSapUpdateType=rtConnRipSapUpdateType, rtConnEntryStatus=rtConnEntryStatus, rtConnX25UserData=rtConnX25UserData, rtIPFilterDropStatsIn=rtIPFilterDropStatsIn, rtIPFilterHighDestPort=rtIPFilterHighDestPort, rtCircuitTimeUp=rtCircuitTimeUp, rtConnSnaRuReceiveLow=rtConnSnaRuReceiveLow, rtAvailableLANMapping=rtAvailableLANMapping, rtCircuitDataLSN=rtCircuitDataLSN, rtCircuitIPXTable=rtCircuitIPXTable, rtIPFilterFreeIndex=rtIPFilterFreeIndex, rtTraceFileName=rtTraceFileName, rtIPFilterHighSrcPort=rtIPFilterHighSrcPort, rtPortRxPackets=rtPortRxPackets, rtIPMapNextHop=rtIPMapNextHop, rtPortTxPackets=rtPortTxPackets, rtGlobalTxDropNoResource=rtGlobalTxDropNoResource, rtGlobalRxDropUnknownProt=rtGlobalRxDropUnknownProt, rtConnAdminStateCtr=rtConnAdminStateCtr, rtConnSnaRuSendLow=rtConnSnaRuSendLow, management=management, rtPortTxBytesHigh=rtPortTxBytesHigh, rtGlobalTxPackets=rtGlobalTxPackets, rtPortTxThroughput=rtPortTxThroughput, rtIPFilterLowSrcPort=rtIPFilterLowSrcPort, rtCircuitIPEntry=rtCircuitIPEntry, rtGlobalCountersReset=rtGlobalCountersReset, rtPortRxBytesLow=rtPortRxBytesLow, rtCircuitATLocalNode=rtCircuitATLocalNode, rtIPFilterForwardStatsOut=rtIPFilterForwardStatsOut, rtConnPrimOrBackName=rtConnPrimOrBackName, rtTraceInterfaceType=rtTraceInterfaceType, rtCircuitIPTxBytes=rtCircuitIPTxBytes, PositiveInteger=PositiveInteger, rtCircuitATEntry=rtCircuitATEntry, rtConnLanProtocol=rtConnLanProtocol, rtConnRIPDelay=rtConnRIPDelay, rtIPMapIPMask=rtIPMapIPMask, rtIPFilterLowDestPort=rtIPFilterLowDestPort, PortRef=PortRef, rtGlobalTxDropUnknownProt=rtGlobalTxDropUnknownProt, rtConnSnaLocalFqName=rtConnSnaLocalFqName, rtCircuitX25LocalDTE=rtCircuitX25LocalDTE, rtConnSnaRuReceiveHigh=rtConnSnaRuReceiveHigh, rtIPFilterIPAddressDest=rtIPFilterIPAddressDest, rtCircuitBeforeComp=rtCircuitBeforeComp, rtConnSnaModeName=rtConnSnaModeName, rtCircuitIPXLocalNetwork=rtCircuitIPXLocalNetwork, ConnectionStatus=ConnectionStatus, rtProductName=rtProductName, rtCircuitFrXIDNegot=rtCircuitFrXIDNegot, rtReleaseVersion=rtReleaseVersion, rtCircuitX25ListeningFacilities=rtCircuitX25ListeningFacilities, OperState=OperState, rtPortIndex=rtPortIndex, rtCircuitConnLSN=rtCircuitConnLSN, rtIPMapVJCompress=rtIPMapVJCompress, rtNumberOfPorts=rtNumberOfPorts, rtConnEntry=rtConnEntry, rtCircuitTable=rtCircuitTable, rtMaxCircuits=rtMaxCircuits, rtConnX25RemoteDTE=rtConnX25RemoteDTE, rtConnSAPDelay=rtConnSAPDelay, rtGlobalTxDropNoRoute=rtGlobalTxDropNoRoute, rtOperState=rtOperState, rtCircuitIPRxBytes=rtCircuitIPRxBytes, rtCircuitIPTxPackets=rtCircuitIPTxPackets, eicon=eicon, rtConnInactivityTimeout=rtConnInactivityTimeout, rtCircuitIPRxPackets=rtCircuitIPRxPackets, rtMaxLANMapping=rtMaxLANMapping, rtConnFrSegmentation=rtConnFrSegmentation, rtCircuitATTable=rtCircuitATTable, rtCircuitATTxPackets=rtCircuitATTxPackets, rtCircuitSessionType=rtCircuitSessionType, rtPortRxError=rtPortRxError, rtCircuitWanProtocol=rtCircuitWanProtocol, rtGlobalRxPackets=rtGlobalRxPackets, rtCircuitX25CallingFacilities=rtCircuitX25CallingFacilities, AdminState=AdminState, rtCircuitCompression=rtCircuitCompression, rtPortTable=rtPortTable, rtGlobalRxBytesLow=rtGlobalRxBytesLow, rtCircuitFrDlci=rtCircuitFrDlci, rtCircuitFrXIDPacketSize=rtCircuitFrXIDPacketSize, rtIPMapBroadcast=rtIPMapBroadcast, rtCircuitCmSelector=rtCircuitCmSelector, rtIPFilterDropStatsOut=rtIPFilterDropStatsOut, rtIPFilterIndex=rtIPFilterIndex, CardRef=CardRef, rtIPMapIndex=rtIPMapIndex, rtConnX25ListeningFacilities=rtConnX25ListeningFacilities, rtCircuitATLocalNet=rtCircuitATLocalNet, rtCircuitX25Diag=rtCircuitX25Diag, rtConnUsage=rtConnUsage, rtIPFilterForwardStatsIn=rtIPFilterForwardStatsIn, rtIPFilterAction=rtIPFilterAction, rtConnRetryDelay=rtConnRetryDelay, rtConnX25CallingFacilities=rtConnX25CallingFacilities, rtIPFilterDirection=rtIPFilterDirection, rtPortCountersReset=rtPortCountersReset, rtPortEntry=rtPortEntry, rtCircuitCompAlgorithm=rtCircuitCompAlgorithm, rtCircuitIPXTxBytes=rtCircuitIPXTxBytes, rtIPFilterStatsIn=rtIPFilterStatsIn, rtConnSnaReceivePaceWindow=rtConnSnaReceivePaceWindow, rtConnFreeIndex=rtConnFreeIndex, rtCircuitEntry=rtCircuitEntry, rtCircuitATTxBytes=rtCircuitATTxBytes, rtTraceCtrl=rtTraceCtrl, rtCircuitIPXConnIndex=rtCircuitIPXConnIndex, rtIPFilterConnIndex=rtIPFilterConnIndex, rtCircuitATRemoteNet=rtCircuitATRemoteNet, rtCircuitBoundLANProtocol=rtCircuitBoundLANProtocol, rtReleaseDate=rtReleaseDate, rtGlobalTxBytesLow=rtGlobalTxBytesLow, rtCircuitATRemoteNode=rtCircuitATRemoteNode, rtConnSnaSendPaceWindow=rtConnSnaSendPaceWindow, rtConnX25Pvc=rtConnX25Pvc, rtConnIndex=rtConnIndex, rtPortTxDropNoResource=rtPortTxDropNoResource, rtConnSnaRuSendHigh=rtConnSnaRuSendHigh, rtConnComment=rtConnComment, rtCircuitAfterComp=rtCircuitAfterComp, rtCircuitX25Cause=rtCircuitX25Cause, rtAvailableCircuits=rtAvailableCircuits, rtCircuitRemoteRouter=rtCircuitRemoteRouter, rtIPMappingTable=rtIPMappingTable, rtCircuitIPXRemoteNode=rtCircuitIPXRemoteNode, ControlOnOff=ControlOnOff, rtCircuitATConnIndex=rtCircuitATConnIndex, rtCircuitIPRemoteAddress=rtCircuitIPRemoteAddress, rtCircuitCountersReset=rtCircuitCountersReset, rtIPMapFreeIndex=rtIPMapFreeIndex, rtName=rtName, rtCircuitFrCongestion=rtCircuitFrCongestion, rtIPFilterAdminStateCtr=rtIPFilterAdminStateCtr, module=module, rtCircuitATRxBytes=rtCircuitATRxBytes, rtIPFilterOperState=rtIPFilterOperState, rtIPFilterIPMaskSrc=rtIPFilterIPMaskSrc, rtIPFilterIPAddressSrc=rtIPFilterIPAddressSrc, rtIPFilterIPMaskDest=rtIPFilterIPMaskDest, rtIPFilterPosition=rtIPFilterPosition, rtCircuitTxErr=rtCircuitTxErr, rtCircuitX25RemoteDTE=rtCircuitX25RemoteDTE, rtConnSnaPuName=rtConnSnaPuName, rtMaxIPFilter=rtMaxIPFilter, rtCircuitIPLocalAddress=rtCircuitIPLocalAddress, rtConnTable=rtConnTable, rtCircuitATRxPackets=rtCircuitATRxPackets, rtConnName=rtConnName, rtCircuitIPTable=rtCircuitIPTable, rtCircuitErrCode=rtCircuitErrCode, rtIPFilterEntryStatus=rtIPFilterEntryStatus, rtType=rtType, rtTimeUp=rtTimeUp, rtActionState=rtActionState, rtConnFrXid=rtConnFrXid, rtPortTxBytesLow=rtPortTxBytesLow, rtConnFrDlci=rtConnFrDlci, rtConnCompression=rtConnCompression, rtCircuitStatus=rtCircuitStatus, rtAvailableIPFilter=rtAvailableIPFilter, rtConnSnaRemoteFqName=rtConnSnaRemoteFqName, rtGlobalRxError=rtGlobalRxError, ActionState=ActionState, rtPortRxBytesHigh=rtPortRxBytesHigh, rtCircuitIPXRxBytes=rtCircuitIPXRxBytes, rtConnRetryNum=rtConnRetryNum, EntryStatus=EntryStatus, rtCircuitIPXEntry=rtCircuitIPXEntry, rtCircuitIPXRxPackets=rtCircuitIPXRxPackets, rtCircuitX25Pvc=rtCircuitX25Pvc, rtCircuitIPConnIndex=rtCircuitIPConnIndex, rtConnOperState=rtConnOperState, rtGlobalRxBytesHigh=rtGlobalRxBytesHigh, mibv2=mibv2, router=router, rtConnAutoStart=rtConnAutoStart, EntryStatusV2=EntryStatusV2, rtCircuitIPXLocalNode=rtCircuitIPXLocalNode, rtGlobalRxDropNoResource=rtGlobalRxDropNoResource, rtIPFilterPortType=rtIPFilterPortType, rtIPMappingEntry=rtIPMappingEntry, rtPortRxThroughput=rtPortRxThroughput, rtIPFilterStatsOut=rtIPFilterStatsOut, rtIPFilterEntry=rtIPFilterEntry, rtCircuitX25UserData=rtCircuitX25UserData, rtActionError=rtActionError, rtConnPeerRouter=rtConnPeerRouter)
