#
# PySNMP MIB module CBS-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CBS-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
cbsMgmt, cbsTraps, cbsMIBs = mibBuilder.importSymbols("CROSSBEAM-SYSTEMS-MIB", "cbsMgmt", "cbsTraps", "cbsMIBs")
ProductID, KBytes = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "ProductID", "KBytes")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Integer32, iso, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Counter32, Counter64, IpAddress, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Integer32", "iso", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Counter32", "Counter64", "IpAddress", "ModuleIdentity", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
cbsHardwareMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6848, 3, 2))
cbsHardwareMIB.setRevisions(('2002-03-15 00:00', '2002-08-21 00:00', '2003-05-08 00:00', '2003-07-22 00:00',))
if mibBuilder.loadTexts: cbsHardwareMIB.setLastUpdated('200305080000Z')
if mibBuilder.loadTexts: cbsHardwareMIB.setOrganization('Crossbeam Systems, Inc.')
class OperationalState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("up", 1), ("down", 2), ("not-present", 3))

class ExistentialState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("present", 1), ("not-present", 2))

cbsHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 1))
cbsHwTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 4, 1))
cbsHwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 1, 1))
cbsHwSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2))
cbsHwSystemProductID = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 1, 1), ProductID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemProductID.setStatus('current')
cbsHwSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemDescription.setStatus('current')
cbsHwSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemSerialNumber.setStatus('current')
cbsHwSystemBackplaneRevision = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemBackplaneRevision.setStatus('current')
cbsHwSystemRedundentPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 1), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemRedundentPowerSupplyStatus.setStatus('obsolete')
cbsHwSystemRedundentPowerFeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 2), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemRedundentPowerFeedStatus.setStatus('obsolete')
cbsHwSystemChassisTemp = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemChassisTemp.setStatus('current')
cbsHwSystemUpperFanTray = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 4), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemUpperFanTray.setStatus('current')
cbsHwSystemLowerFanTray = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 5), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemLowerFanTray.setStatus('current')
cbsHwSystemAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemAlarm.setStatus('current')
cbsHwSystemPowerType = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemPowerType.setStatus('current')
cbsHwSystemRedundentACPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 8), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemRedundentACPowerSupplyStatus.setStatus('current')
cbsHwSystemRedundentACPowerFeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 9), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemRedundentACPowerFeedStatus.setStatus('current')
cbsHwSystemDCPowerFilterA = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 10), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemDCPowerFilterA.setStatus('current')
cbsHwSystemDCPowerFilterB = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 11), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemDCPowerFilterB.setStatus('current')
cbsHwSystemDCPowerFeedA = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 12), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemDCPowerFeedA.setStatus('current')
cbsHwSystemDCPowerFeedB = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 2, 13), ExistentialState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSystemDCPowerFeedB.setStatus('current')
cbsFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 1, 3), )
if mibBuilder.loadTexts: cbsFanStatusTable.setStatus('current')
cbsFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 1, 3, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsFanGroupIndex"), (0, "CBS-HARDWARE-MIB", "cbsFanIndex"))
if mibBuilder.loadTexts: cbsFanStatusEntry.setStatus('current')
cbsFanGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2))))
if mibBuilder.loadTexts: cbsFanGroupIndex.setStatus('current')
cbsFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: cbsFanIndex.setStatus('current')
cbsFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 3, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFanStatus.setStatus('current')
cbsHwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4), )
if mibBuilder.loadTexts: cbsHwModuleTable.setStatus('current')
cbsHwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsHwModuleEntry.setStatus('current')
cbsHwModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleID.setStatus('current')
cbsHwModuleProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 2), ProductID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleProductID.setStatus('current')
cbsHwModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDescription.setStatus('current')
cbsHwModuleBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleBoardRevision.setStatus('current')
cbsHwModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleSerialNumber.setStatus('current')
cbsHwModuleBootStrapRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleBootStrapRev.setStatus('current')
cbsHwModuleBootloaderRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleBootloaderRev.setStatus('current')
cbsHwModuleDiagnosticsRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDiagnosticsRev.setStatus('current')
cbsHwModuleSDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 9), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleSDRAMSize.setStatus('current')
cbsHwModuleRDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 10), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleRDRAMSize.setStatus('current')
cbsHwModuleDiskAPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDiskAPresent.setStatus('current')
cbsHwModuleDiskBPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDiskBPresent.setStatus('current')
cbsHwModuleDuartAPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDuartAPresent.setStatus('current')
cbsHwModuleDuartBPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleDuartBPresent.setStatus('current')
cbsHwModuleAccelCard1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleAccelCard1Present.setStatus('current')
cbsHwModuleAccelCard2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 4, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleAccelCard2Present.setStatus('current')
cbsHwComponentRevTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 1, 5), )
if mibBuilder.loadTexts: cbsHwComponentRevTable.setStatus('current')
cbsHwComponentRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 1, 5, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"), (0, "CBS-HARDWARE-MIB", "cbsHwComponentIndex"))
if mibBuilder.loadTexts: cbsHwComponentRevEntry.setStatus('current')
cbsHwComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbsHwComponentIndex.setStatus('current')
cbsHwComponentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwComponentDescription.setStatus('current')
cbsHwComponentRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwComponentRevision.setStatus('current')
cbsHwModuleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6), )
if mibBuilder.loadTexts: cbsHwModuleStatusTable.setStatus('current')
cbsHwModuleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1), )
cbsHwModuleEntry.registerAugmentions(("CBS-HARDWARE-MIB", "cbsHwModuleStatusEntry"))
cbsHwModuleStatusEntry.setIndexNames(*cbsHwModuleEntry.getIndexNames())
if mibBuilder.loadTexts: cbsHwModuleStatusEntry.setStatus('current')
cbsHwModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unavailable", 1), ("down", 2), ("initializing", 3), ("up", 4), ("standby", 5), ("bootwait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleStatus.setStatus('current')
cbsHwModuleCpuTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleCpuTemp.setStatus('current')
cbsHwModuleFPGATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 75))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleFPGATemp.setStatus('current')
cbsHwModuleInTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 75))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleInTemp.setStatus('current')
cbsHwModuleInTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleInTempAlarm.setStatus('current')
cbsHwModuleExhaustTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 75))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleExhaustTemp.setStatus('current')
cbsHwModuleExhaustTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleExhaustTempAlarm.setStatus('current')
cbsHwModuleCPUVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleCPUVoltage.setStatus('current')
cbsHwModule1_8Voltage = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 9), Gauge32()).setLabel("cbsHwModule1-8Voltage").setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModule1_8Voltage.setStatus('current')
cbsHwModule3_3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 10), Gauge32()).setLabel("cbsHwModule3-3Voltage").setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModule3_3Voltage.setStatus('current')
cbsHwModule2_5Voltage = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 11), Gauge32()).setLabel("cbsHwModule2-5Voltage").setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModule2_5Voltage.setStatus('current')
cbsHwModuleControlLinkA = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 12), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleControlLinkA.setStatus('current')
cbsHwModuleControlLinkB = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 13), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleControlLinkB.setStatus('current')
cbsHwModuleActiveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleActiveLED.setStatus('current')
cbsHwModuleStandbyLED = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleStandbyLED.setStatus('current')
cbsHwModuleFailedLED = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleFailedLED.setStatus('current')
cbsHwModuleCpu2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleCpu2Temp.setStatus('current')
cbsHwModuleCPU2Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleCPU2Voltage.setStatus('current')
cbsHwModuleFPGA1_8Voltage = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 19), Gauge32()).setLabel("cbsHwModuleFPGA1-8Voltage").setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModuleFPGA1_8Voltage.setStatus('current')
cbsHwModule125Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwModule125Voltage.setStatus('current')
cbsHwSdpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7), )
if mibBuilder.loadTexts: cbsHwSdpStatusTable.setStatus('current')
cbsHwSdpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwSdpNpmSlot"), (0, "CBS-HARDWARE-MIB", "cbsHwSdpRemoteSlot"))
if mibBuilder.loadTexts: cbsHwSdpStatusEntry.setStatus('current')
cbsHwSdpNpmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: cbsHwSdpNpmSlot.setStatus('current')
cbsHwSdpRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: cbsHwSdpRemoteSlot.setStatus('current')
cbsHwSdpNpmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSdpNpmState.setStatus('current')
cbsHwSdpRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 1, 7, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsHwSdpRemoteState.setStatus('current')
cbsHwPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 1))
if mibBuilder.loadTexts: cbsHwPowerSupplyFailed.setStatus('current')
cbsHwPowerSupplyRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 2))
if mibBuilder.loadTexts: cbsHwPowerSupplyRecovered.setStatus('current')
cbsHwPowerFeedFailed = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 3))
if mibBuilder.loadTexts: cbsHwPowerFeedFailed.setStatus('current')
cbsHwPowerFeedRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 4))
if mibBuilder.loadTexts: cbsHwPowerFeedRecovered.setStatus('current')
cbsHwUpperFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 5))
if mibBuilder.loadTexts: cbsHwUpperFanTrayInserted.setStatus('current')
cbsHwUpperFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 6))
if mibBuilder.loadTexts: cbsHwUpperFanTrayRemoved.setStatus('current')
cbsHwLowerFanTrayInserted = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 7))
if mibBuilder.loadTexts: cbsHwLowerFanTrayInserted.setStatus('current')
cbsHwLowerFanTrayRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 8))
if mibBuilder.loadTexts: cbsHwLowerFanTrayRemoved.setStatus('current')
cbsHwFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 9)).setObjects(("CBS-HARDWARE-MIB", "cbsFanStatus"))
if mibBuilder.loadTexts: cbsHwFanFailed.setStatus('current')
cbsHwFanRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 10)).setObjects(("CBS-HARDWARE-MIB", "cbsFanStatus"))
if mibBuilder.loadTexts: cbsHwFanRecovered.setStatus('current')
cbsHwSystemAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 11)).setObjects(("CBS-HARDWARE-MIB", "cbsHwSystemAlarm"))
if mibBuilder.loadTexts: cbsHwSystemAlarmTrap.setStatus('current')
cbsHwChassisTempExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 12)).setObjects(("CBS-HARDWARE-MIB", "cbsHwSystemChassisTemp"))
if mibBuilder.loadTexts: cbsHwChassisTempExceeded.setStatus('current')
cbsHwChassisTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 13)).setObjects(("CBS-HARDWARE-MIB", "cbsHwSystemChassisTemp"))
if mibBuilder.loadTexts: cbsHwChassisTempNormal.setStatus('current')
cbsHwModuleStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 14)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleStatus"))
if mibBuilder.loadTexts: cbsHwModuleStatusChanged.setStatus('current')
cbsHwModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 15)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsHwModuleInserted.setStatus('current')
cbsHwModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 16)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsHwModuleRemoved.setStatus('current')
cbsModuleTempExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 17)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleCpuTemp"))
if mibBuilder.loadTexts: cbsModuleTempExceeded.setStatus('current')
cbsModuleTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 18)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleCpuTemp"))
if mibBuilder.loadTexts: cbsModuleTempNormal.setStatus('current')
cbsDbhaLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 19)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsDbhaLinkUp.setStatus('current')
cbsDbhaLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 1, 20)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsDbhaLinkDown.setStatus('current')
mibBuilder.exportSymbols("CBS-HARDWARE-MIB", cbsHwSystemLowerFanTray=cbsHwSystemLowerFanTray, cbsHwSdpNpmState=cbsHwSdpNpmState, cbsDbhaLinkUp=cbsDbhaLinkUp, cbsHwSystemDCPowerFilterA=cbsHwSystemDCPowerFilterA, cbsHwFanRecovered=cbsHwFanRecovered, cbsHwPowerSupplyRecovered=cbsHwPowerSupplyRecovered, cbsHwModuleSDRAMSize=cbsHwModuleSDRAMSize, cbsFanGroupIndex=cbsFanGroupIndex, cbsHwModuleEntry=cbsHwModuleEntry, cbsHwSystem=cbsHwSystem, cbsHwModuleBoardRevision=cbsHwModuleBoardRevision, cbsHwModule2_5Voltage=cbsHwModule2_5Voltage, cbsHwModuleDuartBPresent=cbsHwModuleDuartBPresent, cbsHwModuleRemoved=cbsHwModuleRemoved, cbsFanIndex=cbsFanIndex, cbsHwSdpStatusTable=cbsHwSdpStatusTable, cbsHwModuleBootStrapRev=cbsHwModuleBootStrapRev, cbsHwUpperFanTrayInserted=cbsHwUpperFanTrayInserted, cbsHwModuleAccelCard1Present=cbsHwModuleAccelCard1Present, cbsHwSystemRedundentACPowerSupplyStatus=cbsHwSystemRedundentACPowerSupplyStatus, cbsHwModule125Voltage=cbsHwModule125Voltage, cbsHwModuleInserted=cbsHwModuleInserted, cbsHwModuleCpuTemp=cbsHwModuleCpuTemp, cbsFanStatusTable=cbsFanStatusTable, cbsHwSystemProductID=cbsHwSystemProductID, cbsHwSystemAlarm=cbsHwSystemAlarm, cbsHwSystemStatus=cbsHwSystemStatus, cbsHardware=cbsHardware, cbsHwPowerFeedRecovered=cbsHwPowerFeedRecovered, cbsHwSystemAlarmTrap=cbsHwSystemAlarmTrap, cbsHwModuleDiskAPresent=cbsHwModuleDiskAPresent, cbsHwModule1_8Voltage=cbsHwModule1_8Voltage, cbsHwModuleCPU2Voltage=cbsHwModuleCPU2Voltage, cbsHwSystemPowerType=cbsHwSystemPowerType, cbsHwModuleExhaustTemp=cbsHwModuleExhaustTemp, cbsHwSystemSerialNumber=cbsHwSystemSerialNumber, cbsHwModuleDiagnosticsRev=cbsHwModuleDiagnosticsRev, cbsHwModuleStatusEntry=cbsHwModuleStatusEntry, cbsHwSystemRedundentPowerSupplyStatus=cbsHwSystemRedundentPowerSupplyStatus, cbsHwLowerFanTrayInserted=cbsHwLowerFanTrayInserted, cbsHwSdpRemoteState=cbsHwSdpRemoteState, cbsHwTraps=cbsHwTraps, cbsHwModuleControlLinkA=cbsHwModuleControlLinkA, cbsHwModuleFPGA1_8Voltage=cbsHwModuleFPGA1_8Voltage, cbsHwSystemDCPowerFeedB=cbsHwSystemDCPowerFeedB, cbsModuleTempExceeded=cbsModuleTempExceeded, cbsModuleTempNormal=cbsModuleTempNormal, cbsHwModuleSerialNumber=cbsHwModuleSerialNumber, cbsHwComponentIndex=cbsHwComponentIndex, cbsHwPowerFeedFailed=cbsHwPowerFeedFailed, cbsHwModuleCpu2Temp=cbsHwModuleCpu2Temp, cbsHwModuleDuartAPresent=cbsHwModuleDuartAPresent, cbsHwSdpNpmSlot=cbsHwSdpNpmSlot, cbsHwSystemChassisTemp=cbsHwSystemChassisTemp, cbsHwComponentRevEntry=cbsHwComponentRevEntry, cbsHwSystemRedundentPowerFeedStatus=cbsHwSystemRedundentPowerFeedStatus, cbsHwModuleControlLinkB=cbsHwModuleControlLinkB, cbsHwFanFailed=cbsHwFanFailed, cbsHwPowerSupplyFailed=cbsHwPowerSupplyFailed, cbsHwModuleAccelCard2Present=cbsHwModuleAccelCard2Present, cbsHwModule3_3Voltage=cbsHwModule3_3Voltage, cbsHwModuleDescription=cbsHwModuleDescription, cbsHwModuleFailedLED=cbsHwModuleFailedLED, cbsHwModuleTable=cbsHwModuleTable, cbsFanStatusEntry=cbsFanStatusEntry, cbsHwSystemUpperFanTray=cbsHwSystemUpperFanTray, cbsHwModuleStandbyLED=cbsHwModuleStandbyLED, cbsHwComponentRevTable=cbsHwComponentRevTable, cbsHwSdpStatusEntry=cbsHwSdpStatusEntry, cbsHwLowerFanTrayRemoved=cbsHwLowerFanTrayRemoved, cbsHwChassisTempExceeded=cbsHwChassisTempExceeded, cbsHwComponentDescription=cbsHwComponentDescription, ExistentialState=ExistentialState, OperationalState=OperationalState, cbsHwModuleActiveLED=cbsHwModuleActiveLED, cbsHwSystemDCPowerFeedA=cbsHwSystemDCPowerFeedA, cbsHwModuleProductID=cbsHwModuleProductID, cbsHwModuleRDRAMSize=cbsHwModuleRDRAMSize, cbsHwComponentRevision=cbsHwComponentRevision, cbsHwSdpRemoteSlot=cbsHwSdpRemoteSlot, cbsHwSystemDCPowerFilterB=cbsHwSystemDCPowerFilterB, cbsHwModuleBootloaderRev=cbsHwModuleBootloaderRev, cbsHwChassisTempNormal=cbsHwChassisTempNormal, PYSNMP_MODULE_ID=cbsHardwareMIB, cbsHardwareMIB=cbsHardwareMIB, cbsHwSystemDescription=cbsHwSystemDescription, cbsHwModuleFPGATemp=cbsHwModuleFPGATemp, cbsHwModuleStatusTable=cbsHwModuleStatusTable, cbsHwModuleID=cbsHwModuleID, cbsHwModuleCPUVoltage=cbsHwModuleCPUVoltage, cbsHwModuleExhaustTempAlarm=cbsHwModuleExhaustTempAlarm, cbsHwModuleStatus=cbsHwModuleStatus, cbsHwUpperFanTrayRemoved=cbsHwUpperFanTrayRemoved, cbsHwSystemRedundentACPowerFeedStatus=cbsHwSystemRedundentACPowerFeedStatus, cbsFanStatus=cbsFanStatus, cbsHwModuleDiskBPresent=cbsHwModuleDiskBPresent, cbsHwModuleInTempAlarm=cbsHwModuleInTempAlarm, cbsDbhaLinkDown=cbsDbhaLinkDown, cbsHwModuleInTemp=cbsHwModuleInTemp, cbsHwSystemBackplaneRevision=cbsHwSystemBackplaneRevision, cbsHwModuleStatusChanged=cbsHwModuleStatusChanged)
