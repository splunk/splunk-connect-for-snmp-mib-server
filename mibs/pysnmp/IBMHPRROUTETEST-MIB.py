#
# PySNMP MIB module IBMHPRROUTETEST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMHPRROUTETEST-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Gauge32, Unsigned32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Counter32, ObjectIdentity, Integer32, iso, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Gauge32", "Unsigned32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Counter32", "ObjectIdentity", "Integer32", "iso", "ModuleIdentity", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
hpr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10))
ibmHprRouteTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4))
ibmHprRtGlobe = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1))
ibmHprRtGlobeConnTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprRtGlobeConnTrigger.setStatus('mandatory')
ibmHprRtGlobeNameTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 26), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprRtGlobeNameTrigger.setStatus('mandatory')
ibmHprRtGenResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2))
ibmHprRtGenTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1), )
if mibBuilder.loadTexts: ibmHprRtGenTable.setStatus('mandatory')
ibmHprRtGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1), ).setIndexNames((0, "IBMHPRROUTETEST-MIB", "ibmHprRtGenTestId"))
if mibBuilder.loadTexts: ibmHprRtGenEntry.setStatus('mandatory')
ibmHprRtGenTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenTestId.setStatus('mandatory')
ibmHprRtGenTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connTrigger", 1), ("nameTrigger", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenTestType.setStatus('mandatory')
ibmHprRtGenConnTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenConnTrigger.setStatus('mandatory')
ibmHprRtGenNameTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 26), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenNameTrigger.setStatus('mandatory')
ibmHprRtGenResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("successful", 1), ("inProgess", 2), ("noResponse", 3), ("nceidInvalid", 4), ("tcidInvalid", 5), ("luInvalid", 6), ("modeInvalid", 7), ("noHprRoute", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenResult.setStatus('mandatory')
ibmHprRtGenSenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenSenseCode.setStatus('mandatory')
ibmHprRtGenCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenCosName.setStatus('mandatory')
ibmHprRtGenRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenRscv.setStatus('mandatory')
ibmHprRtDetResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3))
ibmHprRtDetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1), )
if mibBuilder.loadTexts: ibmHprRtDetTable.setStatus('mandatory')
ibmHprRtDetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1), ).setIndexNames((0, "IBMHPRROUTETEST-MIB", "ibmHprRtDetTestId"), (0, "IBMHPRROUTETEST-MIB", "ibmHprRtDetSubTestId"))
if mibBuilder.loadTexts: ibmHprRtDetEntry.setStatus('mandatory')
ibmHprRtDetTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetTestId.setStatus('mandatory')
ibmHprRtDetSubTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetSubTestId.setStatus('mandatory')
ibmHprRtDetDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetDestNode.setStatus('mandatory')
ibmHprRtDetPriorNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetPriorNode.setStatus('mandatory')
ibmHprRtDetLastTgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetLastTgNumber.setStatus('mandatory')
ibmHprRtDetRtripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetRtripTime.setStatus('mandatory')
ibmHprRtDetResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("noResponse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetResult.setStatus('mandatory')
mibBuilder.exportSymbols("IBMHPRROUTETEST-MIB", ibmHprRtDetDestNode=ibmHprRtDetDestNode, ibmHprRtGlobeNameTrigger=ibmHprRtGlobeNameTrigger, ibmHprRtGenTable=ibmHprRtGenTable, ibmArchitecture=ibmArchitecture, ibmHprRtGlobe=ibmHprRtGlobe, ibmHprRtGenEntry=ibmHprRtGenEntry, ibmHprRtGenTestType=ibmHprRtGenTestType, hpr=hpr, ibmHprRtDetTable=ibmHprRtDetTable, ibmHprRtDetSubTestId=ibmHprRtDetSubTestId, ibmHprRtDetResults=ibmHprRtDetResults, ibm=ibm, ibmHprRtDetTestId=ibmHprRtDetTestId, ibmHprRtDetPriorNode=ibmHprRtDetPriorNode, ibmHprRtGenTestId=ibmHprRtGenTestId, ibmHprRtDetRtripTime=ibmHprRtDetRtripTime, ibmHprRtGenCosName=ibmHprRtGenCosName, ibmHprRtGenRscv=ibmHprRtGenRscv, ibmHprRtDetResult=ibmHprRtDetResult, ibmHprRtGenNameTrigger=ibmHprRtGenNameTrigger, ibmHprRtGenSenseCode=ibmHprRtGenSenseCode, ibmHprRtGenResults=ibmHprRtGenResults, ibmHprRtDetEntry=ibmHprRtDetEntry, ibmHprRtGenConnTrigger=ibmHprRtGenConnTrigger, ibmHprRouteTest=ibmHprRouteTest, ibmHprRtGenResult=ibmHprRtGenResult, ibmHprRtDetLastTgNumber=ibmHprRtDetLastTgNumber, ibmHprRtGlobeConnTrigger=ibmHprRtGlobeConnTrigger)
