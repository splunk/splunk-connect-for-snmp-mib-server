#
# PySNMP MIB module Wellfleet-X25PAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-X25PAD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, Bits, Counter32, IpAddress, NotificationType, Counter64, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Bits", "Counter32", "IpAddress", "NotificationType", "Counter64", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfX25PadGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfX25PadGroup")
wfX25PadDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1), )
if mibBuilder.loadTexts: wfX25PadDefaultCfgTable.setStatus('mandatory')
wfX25PadDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadDefaultCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadDefaultCfgConnector"))
if mibBuilder.loadTexts: wfX25PadDefaultCfgEntry.setStatus('mandatory')
wfX25PadDefaultCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDelete.setStatus('mandatory')
wfX25PadDefaultCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDisable.setStatus('mandatory')
wfX25PadDefaultCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgState.setStatus('mandatory')
wfX25PadDefaultCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgSlot.setStatus('mandatory')
wfX25PadDefaultCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgConnector.setStatus('mandatory')
wfX25PadDefaultCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgCircuit.setStatus('mandatory')
wfX25PadDefaultCfgX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgX121Addr.setStatus('mandatory')
wfX25PadDefaultCfgDNIC = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDNIC.setStatus('mandatory')
wfX25PadDefaultCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLenSubAddress.setStatus('mandatory')
wfX25PadDefaultCfgLCNLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNLow.setStatus('mandatory')
wfX25PadDefaultCfgLCNHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNHigh.setStatus('mandatory')
wfX25PadCurrentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2), )
if mibBuilder.loadTexts: wfX25PadCurrentCfgTable.setStatus('mandatory')
wfX25PadCurrentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadCurrentCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadCurrentCfgConnector"))
if mibBuilder.loadTexts: wfX25PadCurrentCfgEntry.setStatus('mandatory')
wfX25PadCurrentCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgState.setStatus('mandatory')
wfX25PadCurrentCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgSlot.setStatus('mandatory')
wfX25PadCurrentCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgConnector.setStatus('mandatory')
wfX25PadCurrentCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgCircuit.setStatus('mandatory')
wfX25PadCurrentCfgX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgX121Addr.setStatus('mandatory')
wfX25PadCurrentCfgDNIC = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgDNIC.setStatus('mandatory')
wfX25PadCurrentCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLenSubAddress.setStatus('mandatory')
wfX25PadCurrentCfgLCNLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNLow.setStatus('mandatory')
wfX25PadCurrentCfgLCNHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNHigh.setStatus('mandatory')
wfX25PadStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3), )
if mibBuilder.loadTexts: wfX25PadStatTable.setStatus('mandatory')
wfX25PadStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadStatSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadStatConnector"))
if mibBuilder.loadTexts: wfX25PadStatEntry.setStatus('mandatory')
wfX25PadStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatState.setStatus('mandatory')
wfX25PadStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatSlot.setStatus('mandatory')
wfX25PadStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatConnector.setStatus('mandatory')
wfX25PadStatTotalConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTotalConnCount.setStatus('mandatory')
wfX25PadStatRxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRR.setStatus('mandatory')
wfX25PadStatTxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRR.setStatus('mandatory')
wfX25PadStatRxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRNR.setStatus('mandatory')
wfX25PadStatTxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRNR.setStatus('mandatory')
wfX25PadStatRxRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRestart.setStatus('mandatory')
wfX25PadStatTxRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRestart.setStatus('mandatory')
wfX25PadPortDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4), )
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgTable.setStatus('mandatory')
wfX25PadPortDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgNumber"))
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgEntry.setStatus('mandatory')
wfX25PadPortDefaultCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDelete.setStatus('mandatory')
wfX25PadPortDefaultCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDisable.setStatus('mandatory')
wfX25PadPortDefaultCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgState.setStatus('mandatory')
wfX25PadPortDefaultCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSlot.setStatus('mandatory')
wfX25PadPortDefaultCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgConnector.setStatus('mandatory')
wfX25PadPortDefaultCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgNumber.setStatus('mandatory')
wfX25PadPortDefaultCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSubAddress.setStatus('mandatory')
wfX25PadPortDefaultCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenSubAddress.setStatus('mandatory')
wfX25PadPortDefaultCfgX3escape = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3escape.setStatus('mandatory')
wfX25PadPortDefaultCfgX3echo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3echo.setStatus('mandatory')
wfX25PadPortDefaultCfgX3forward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3forward.setStatus('mandatory')
wfX25PadPortDefaultCfgX3idle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3idle.setStatus('mandatory')
wfX25PadPortDefaultCfgX3device = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3device.setStatus('mandatory')
wfX25PadPortDefaultCfgX3signals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3signals.setStatus('mandatory')
wfX25PadPortDefaultCfgX3break = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3break.setStatus('mandatory')
wfX25PadPortDefaultCfgX3discard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3discard.setStatus('mandatory')
wfX25PadPortDefaultCfgX3CRpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3CRpad.setStatus('mandatory')
wfX25PadPortDefaultCfgX3folding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3folding.setStatus('mandatory')
wfX25PadPortDefaultCfgX3speed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3speed.setStatus('mandatory')
wfX25PadPortDefaultCfgX3flow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3flow.setStatus('mandatory')
wfX25PadPortDefaultCfgX3LFinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFinsert.setStatus('mandatory')
wfX25PadPortDefaultCfgX3LFpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFpad.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Edit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Edit.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Cdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Cdelete.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Ldelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldelete.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Ldisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldisplay.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Esignals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Esignals.setStatus('mandatory')
wfX25PadPortDefaultCfgX3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Mask.setStatus('mandatory')
wfX25PadPortDefaultCfgX3parity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3parity.setStatus('mandatory')
wfX25PadPortDefaultCfgX3page = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3page.setStatus('mandatory')
wfX25PadPortDefaultCfgLenUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenUserData.setStatus('mandatory')
wfX25PadPortDefaultCfgUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgUserData.setStatus('mandatory')
wfX25PadPortDefaultCfgLenRawFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenRawFacilities.setStatus('mandatory')
wfX25PadPortDefaultCfgRawFacilitiesData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgRawFacilitiesData.setStatus('mandatory')
wfX25PadPortDefaultCfgReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgReverseCharge.setStatus('mandatory')
wfX25PadPortDefaultCfgThruClassNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgThruClassNegotiation.setStatus('mandatory')
wfX25PadPortDefaultCfgPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgPacketSizeNegotiation.setStatus('mandatory')
wfX25PadPortDefaultCfgWindowSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgWindowSizeNegotiation.setStatus('mandatory')
wfX25PadPortDefaultCfgIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgIntervalTimer.setStatus('mandatory')
wfX25PadPortDefaultCfgFullAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgFullAddressing.setStatus('mandatory')
wfX25PadPortCurrentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5), )
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgTable.setStatus('mandatory')
wfX25PadPortCurrentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgNumber"))
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgEntry.setStatus('mandatory')
wfX25PadPortCurrentCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgState.setStatus('mandatory')
wfX25PadPortCurrentCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSlot.setStatus('mandatory')
wfX25PadPortCurrentCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgConnector.setStatus('mandatory')
wfX25PadPortCurrentCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgNumber.setStatus('mandatory')
wfX25PadPortCurrentCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSubAddress.setStatus('mandatory')
wfX25PadPortCurrentCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenSubAddress.setStatus('mandatory')
wfX25PadPortCurrentCfgX3escape = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3escape.setStatus('mandatory')
wfX25PadPortCurrentCfgX3echo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3echo.setStatus('mandatory')
wfX25PadPortCurrentCfgX3forward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3forward.setStatus('mandatory')
wfX25PadPortCurrentCfgX3idle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3idle.setStatus('mandatory')
wfX25PadPortCurrentCfgX3device = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3device.setStatus('mandatory')
wfX25PadPortCurrentCfgX3signals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3signals.setStatus('mandatory')
wfX25PadPortCurrentCfgX3break = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3break.setStatus('mandatory')
wfX25PadPortCurrentCfgX3discard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3discard.setStatus('mandatory')
wfX25PadPortCurrentCfgX3CRpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3CRpad.setStatus('mandatory')
wfX25PadPortCurrentCfgX3folding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3folding.setStatus('mandatory')
wfX25PadPortCurrentCfgX3speed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3speed.setStatus('mandatory')
wfX25PadPortCurrentCfgX3flow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3flow.setStatus('mandatory')
wfX25PadPortCurrentCfgX3LFinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFinsert.setStatus('mandatory')
wfX25PadPortCurrentCfgX3LFpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFpad.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Edit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Edit.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Cdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Cdelete.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Ldelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldelete.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Ldisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldisplay.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Esignals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Esignals.setStatus('mandatory')
wfX25PadPortCurrentCfgX3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Mask.setStatus('mandatory')
wfX25PadPortCurrentCfgX3parity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3parity.setStatus('mandatory')
wfX25PadPortCurrentCfgX3page = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3page.setStatus('mandatory')
wfX25PadPortCurrentCfgLenUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenUserData.setStatus('mandatory')
wfX25PadPortCurrentCfgUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgUserData.setStatus('mandatory')
wfX25PadPortCurrentCfgLenRawFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenRawFacilities.setStatus('mandatory')
wfX25PadPortCurrentCfgRawFacilitiesData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgRawFacilitiesData.setStatus('mandatory')
wfX25PadPortCurrentCfgReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgReverseCharge.setStatus('mandatory')
wfX25PadPortCurrentCfgThruClassNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgThruClassNegotiation.setStatus('mandatory')
wfX25PadPortCurrentCfgPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgPacketSizeNegotiation.setStatus('mandatory')
wfX25PadPortCurrentCfgWindowSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgWindowSizeNegotiation.setStatus('mandatory')
wfX25PadPortCurrentCfgIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgIntervalTimer.setStatus('mandatory')
wfX25PadPortCurrentCfgFullAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgFullAddressing.setStatus('mandatory')
wfX25PadPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6), )
if mibBuilder.loadTexts: wfX25PadPortStatTable.setStatus('mandatory')
wfX25PadPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatNumber"))
if mibBuilder.loadTexts: wfX25PadPortStatEntry.setStatus('mandatory')
wfX25PadPortStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatState.setStatus('mandatory')
wfX25PadPortStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatSlot.setStatus('mandatory')
wfX25PadPortStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatConnector.setStatus('mandatory')
wfX25PadPortStatNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatNumber.setStatus('mandatory')
wfX25PadPortStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxOctets.setStatus('mandatory')
wfX25PadPortStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxOctets.setStatus('mandatory')
wfX25PadPortStatRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxPackets.setStatus('mandatory')
wfX25PadPortStatTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxPackets.setStatus('mandatory')
wfX25PadPortStatRemoteX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRemoteX121Addr.setStatus('mandatory')
wfX25PadPortStatLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLCN.setStatus('mandatory')
wfX25PadPortStatDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatDuration.setStatus('mandatory')
wfX25PadPortStatRxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxRR.setStatus('mandatory')
wfX25PadPortStatTxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxRR.setStatus('mandatory')
wfX25PadPortStatRxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxRNR.setStatus('mandatory')
wfX25PadPortStatTxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxRNR.setStatus('mandatory')
wfX25PadPortStatRxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxClr.setStatus('mandatory')
wfX25PadPortStatTxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxClr.setStatus('mandatory')
wfX25PadPortStatRxReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxReset.setStatus('mandatory')
wfX25PadPortStatTxReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxReset.setStatus('mandatory')
wfX25PadPortStatRxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxCall.setStatus('mandatory')
wfX25PadPortStatTxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxCall.setStatus('mandatory')
wfX25PadPortStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatConnections.setStatus('mandatory')
wfX25PadPortStatDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatDisconnects.setStatus('mandatory')
wfX25PadPortStatLastCause = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLastCause.setStatus('mandatory')
wfX25PadPortStatLastDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLastDiag.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-X25PAD-MIB", wfX25PadPortDefaultCfgX3Ldelete=wfX25PadPortDefaultCfgX3Ldelete, wfX25PadPortDefaultCfgX3Cdelete=wfX25PadPortDefaultCfgX3Cdelete, wfX25PadPortCurrentCfgX3folding=wfX25PadPortCurrentCfgX3folding, wfX25PadPortCurrentCfgX3discard=wfX25PadPortCurrentCfgX3discard, wfX25PadDefaultCfgEntry=wfX25PadDefaultCfgEntry, wfX25PadPortStatRemoteX121Addr=wfX25PadPortStatRemoteX121Addr, wfX25PadPortDefaultCfgX3break=wfX25PadPortDefaultCfgX3break, wfX25PadPortCurrentCfgThruClassNegotiation=wfX25PadPortCurrentCfgThruClassNegotiation, wfX25PadPortDefaultCfgX3Esignals=wfX25PadPortDefaultCfgX3Esignals, wfX25PadPortStatTxCall=wfX25PadPortStatTxCall, wfX25PadPortStatConnector=wfX25PadPortStatConnector, wfX25PadPortDefaultCfgRawFacilitiesData=wfX25PadPortDefaultCfgRawFacilitiesData, wfX25PadPortCurrentCfgState=wfX25PadPortCurrentCfgState, wfX25PadPortDefaultCfgX3page=wfX25PadPortDefaultCfgX3page, wfX25PadPortCurrentCfgReverseCharge=wfX25PadPortCurrentCfgReverseCharge, wfX25PadStatSlot=wfX25PadStatSlot, wfX25PadPortStatTxRR=wfX25PadPortStatTxRR, wfX25PadPortCurrentCfgX3Edit=wfX25PadPortCurrentCfgX3Edit, wfX25PadPortDefaultCfgX3folding=wfX25PadPortDefaultCfgX3folding, wfX25PadPortStatState=wfX25PadPortStatState, wfX25PadPortDefaultCfgX3CRpad=wfX25PadPortDefaultCfgX3CRpad, wfX25PadPortStatTxPackets=wfX25PadPortStatTxPackets, wfX25PadPortCurrentCfgLenUserData=wfX25PadPortCurrentCfgLenUserData, wfX25PadCurrentCfgSlot=wfX25PadCurrentCfgSlot, wfX25PadPortDefaultCfgDisable=wfX25PadPortDefaultCfgDisable, wfX25PadPortCurrentCfgX3CRpad=wfX25PadPortCurrentCfgX3CRpad, wfX25PadPortCurrentCfgX3flow=wfX25PadPortCurrentCfgX3flow, wfX25PadDefaultCfgCircuit=wfX25PadDefaultCfgCircuit, wfX25PadPortCurrentCfgNumber=wfX25PadPortCurrentCfgNumber, wfX25PadDefaultCfgSlot=wfX25PadDefaultCfgSlot, wfX25PadPortDefaultCfgLenRawFacilities=wfX25PadPortDefaultCfgLenRawFacilities, wfX25PadPortCurrentCfgLenSubAddress=wfX25PadPortCurrentCfgLenSubAddress, wfX25PadPortDefaultCfgX3escape=wfX25PadPortDefaultCfgX3escape, wfX25PadPortCurrentCfgX3Esignals=wfX25PadPortCurrentCfgX3Esignals, wfX25PadDefaultCfgTable=wfX25PadDefaultCfgTable, wfX25PadPortCurrentCfgSubAddress=wfX25PadPortCurrentCfgSubAddress, wfX25PadPortCurrentCfgSlot=wfX25PadPortCurrentCfgSlot, wfX25PadStatConnector=wfX25PadStatConnector, wfX25PadPortCurrentCfgX3speed=wfX25PadPortCurrentCfgX3speed, wfX25PadPortDefaultCfgUserData=wfX25PadPortDefaultCfgUserData, wfX25PadPortDefaultCfgNumber=wfX25PadPortDefaultCfgNumber, wfX25PadPortDefaultCfgX3parity=wfX25PadPortDefaultCfgX3parity, wfX25PadPortCurrentCfgX3escape=wfX25PadPortCurrentCfgX3escape, wfX25PadPortDefaultCfgDelete=wfX25PadPortDefaultCfgDelete, wfX25PadPortStatRxRNR=wfX25PadPortStatRxRNR, wfX25PadStatState=wfX25PadStatState, wfX25PadCurrentCfgLenSubAddress=wfX25PadCurrentCfgLenSubAddress, wfX25PadCurrentCfgLCNLow=wfX25PadCurrentCfgLCNLow, wfX25PadPortStatTxRNR=wfX25PadPortStatTxRNR, wfX25PadPortCurrentCfgFullAddressing=wfX25PadPortCurrentCfgFullAddressing, wfX25PadStatRxRNR=wfX25PadStatRxRNR, wfX25PadPortDefaultCfgX3Mask=wfX25PadPortDefaultCfgX3Mask, wfX25PadPortCurrentCfgUserData=wfX25PadPortCurrentCfgUserData, wfX25PadCurrentCfgX121Addr=wfX25PadCurrentCfgX121Addr, wfX25PadPortStatEntry=wfX25PadPortStatEntry, wfX25PadStatTxRR=wfX25PadStatTxRR, wfX25PadPortStatLCN=wfX25PadPortStatLCN, wfX25PadPortStatRxPackets=wfX25PadPortStatRxPackets, wfX25PadPortStatRxRR=wfX25PadPortStatRxRR, wfX25PadPortCurrentCfgPacketSizeNegotiation=wfX25PadPortCurrentCfgPacketSizeNegotiation, wfX25PadPortDefaultCfgSubAddress=wfX25PadPortDefaultCfgSubAddress, wfX25PadPortStatRxClr=wfX25PadPortStatRxClr, wfX25PadStatRxRestart=wfX25PadStatRxRestart, wfX25PadDefaultCfgX121Addr=wfX25PadDefaultCfgX121Addr, wfX25PadCurrentCfgEntry=wfX25PadCurrentCfgEntry, wfX25PadPortStatTable=wfX25PadPortStatTable, wfX25PadPortCurrentCfgX3idle=wfX25PadPortCurrentCfgX3idle, wfX25PadPortCurrentCfgX3LFinsert=wfX25PadPortCurrentCfgX3LFinsert, wfX25PadPortCurrentCfgX3echo=wfX25PadPortCurrentCfgX3echo, wfX25PadPortCurrentCfgRawFacilitiesData=wfX25PadPortCurrentCfgRawFacilitiesData, wfX25PadCurrentCfgConnector=wfX25PadCurrentCfgConnector, wfX25PadPortDefaultCfgReverseCharge=wfX25PadPortDefaultCfgReverseCharge, wfX25PadPortStatTxClr=wfX25PadPortStatTxClr, wfX25PadPortDefaultCfgSlot=wfX25PadPortDefaultCfgSlot, wfX25PadPortCurrentCfgLenRawFacilities=wfX25PadPortCurrentCfgLenRawFacilities, wfX25PadPortCurrentCfgX3break=wfX25PadPortCurrentCfgX3break, wfX25PadPortDefaultCfgThruClassNegotiation=wfX25PadPortDefaultCfgThruClassNegotiation, wfX25PadPortCurrentCfgX3LFpad=wfX25PadPortCurrentCfgX3LFpad, wfX25PadPortStatDuration=wfX25PadPortStatDuration, wfX25PadPortStatNumber=wfX25PadPortStatNumber, wfX25PadPortStatDisconnects=wfX25PadPortStatDisconnects, wfX25PadPortStatSlot=wfX25PadPortStatSlot, wfX25PadDefaultCfgState=wfX25PadDefaultCfgState, wfX25PadPortStatRxOctets=wfX25PadPortStatRxOctets, wfX25PadPortDefaultCfgState=wfX25PadPortDefaultCfgState, wfX25PadPortDefaultCfgX3signals=wfX25PadPortDefaultCfgX3signals, wfX25PadPortStatConnections=wfX25PadPortStatConnections, wfX25PadStatTxRNR=wfX25PadStatTxRNR, wfX25PadPortStatRxReset=wfX25PadPortStatRxReset, wfX25PadPortCurrentCfgX3page=wfX25PadPortCurrentCfgX3page, wfX25PadPortDefaultCfgTable=wfX25PadPortDefaultCfgTable, wfX25PadPortDefaultCfgX3forward=wfX25PadPortDefaultCfgX3forward, wfX25PadPortCurrentCfgX3Cdelete=wfX25PadPortCurrentCfgX3Cdelete, wfX25PadDefaultCfgLenSubAddress=wfX25PadDefaultCfgLenSubAddress, wfX25PadPortDefaultCfgX3device=wfX25PadPortDefaultCfgX3device, wfX25PadDefaultCfgLCNLow=wfX25PadDefaultCfgLCNLow, wfX25PadDefaultCfgConnector=wfX25PadDefaultCfgConnector, wfX25PadPortDefaultCfgX3idle=wfX25PadPortDefaultCfgX3idle, wfX25PadPortCurrentCfgX3Ldelete=wfX25PadPortCurrentCfgX3Ldelete, wfX25PadCurrentCfgCircuit=wfX25PadCurrentCfgCircuit, wfX25PadStatTable=wfX25PadStatTable, wfX25PadPortStatTxReset=wfX25PadPortStatTxReset, wfX25PadPortStatLastCause=wfX25PadPortStatLastCause, wfX25PadCurrentCfgState=wfX25PadCurrentCfgState, wfX25PadCurrentCfgLCNHigh=wfX25PadCurrentCfgLCNHigh, wfX25PadCurrentCfgDNIC=wfX25PadCurrentCfgDNIC, wfX25PadStatEntry=wfX25PadStatEntry, wfX25PadStatTxRestart=wfX25PadStatTxRestart, wfX25PadPortDefaultCfgX3speed=wfX25PadPortDefaultCfgX3speed, wfX25PadPortCurrentCfgX3Ldisplay=wfX25PadPortCurrentCfgX3Ldisplay, wfX25PadPortStatTxOctets=wfX25PadPortStatTxOctets, wfX25PadPortCurrentCfgTable=wfX25PadPortCurrentCfgTable, wfX25PadPortDefaultCfgLenSubAddress=wfX25PadPortDefaultCfgLenSubAddress, wfX25PadPortDefaultCfgConnector=wfX25PadPortDefaultCfgConnector, wfX25PadPortCurrentCfgX3device=wfX25PadPortCurrentCfgX3device, wfX25PadPortCurrentCfgX3Mask=wfX25PadPortCurrentCfgX3Mask, wfX25PadPortCurrentCfgIntervalTimer=wfX25PadPortCurrentCfgIntervalTimer, wfX25PadPortStatLastDiag=wfX25PadPortStatLastDiag, wfX25PadStatTotalConnCount=wfX25PadStatTotalConnCount, wfX25PadStatRxRR=wfX25PadStatRxRR, wfX25PadPortCurrentCfgWindowSizeNegotiation=wfX25PadPortCurrentCfgWindowSizeNegotiation, wfX25PadPortDefaultCfgX3echo=wfX25PadPortDefaultCfgX3echo, wfX25PadPortDefaultCfgX3LFinsert=wfX25PadPortDefaultCfgX3LFinsert, wfX25PadPortCurrentCfgX3forward=wfX25PadPortCurrentCfgX3forward, wfX25PadDefaultCfgDelete=wfX25PadDefaultCfgDelete, wfX25PadPortDefaultCfgX3flow=wfX25PadPortDefaultCfgX3flow, wfX25PadPortCurrentCfgX3signals=wfX25PadPortCurrentCfgX3signals, wfX25PadPortStatRxCall=wfX25PadPortStatRxCall, wfX25PadPortDefaultCfgLenUserData=wfX25PadPortDefaultCfgLenUserData, wfX25PadPortDefaultCfgX3Edit=wfX25PadPortDefaultCfgX3Edit, wfX25PadPortDefaultCfgPacketSizeNegotiation=wfX25PadPortDefaultCfgPacketSizeNegotiation, wfX25PadPortCurrentCfgConnector=wfX25PadPortCurrentCfgConnector, wfX25PadPortDefaultCfgFullAddressing=wfX25PadPortDefaultCfgFullAddressing, wfX25PadPortDefaultCfgEntry=wfX25PadPortDefaultCfgEntry, wfX25PadDefaultCfgLCNHigh=wfX25PadDefaultCfgLCNHigh, wfX25PadDefaultCfgDisable=wfX25PadDefaultCfgDisable, wfX25PadPortDefaultCfgWindowSizeNegotiation=wfX25PadPortDefaultCfgWindowSizeNegotiation, wfX25PadPortDefaultCfgX3discard=wfX25PadPortDefaultCfgX3discard, wfX25PadPortDefaultCfgX3Ldisplay=wfX25PadPortDefaultCfgX3Ldisplay, wfX25PadPortCurrentCfgEntry=wfX25PadPortCurrentCfgEntry, wfX25PadDefaultCfgDNIC=wfX25PadDefaultCfgDNIC, wfX25PadCurrentCfgTable=wfX25PadCurrentCfgTable, wfX25PadPortDefaultCfgX3LFpad=wfX25PadPortDefaultCfgX3LFpad, wfX25PadPortCurrentCfgX3parity=wfX25PadPortCurrentCfgX3parity, wfX25PadPortDefaultCfgIntervalTimer=wfX25PadPortDefaultCfgIntervalTimer)
