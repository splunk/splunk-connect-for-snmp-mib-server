#
# PySNMP MIB module CODAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CODAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
codanMibs, = mibBuilder.importSymbols("CODAN-SMI", "codanMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Unsigned32, TimeTicks, ModuleIdentity, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter64, NotificationType, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Unsigned32", "TimeTicks", "ModuleIdentity", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter64", "NotificationType", "iso", "Bits")
DateAndTime, TimeInterval, DisplayString, TestAndIncr, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeInterval", "DisplayString", "TestAndIncr", "TextualConvention")
minetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 23304, 1, 1))
minetMIB.setRevisions(('1997-08-26 18:00',))
if mibBuilder.loadTexts: minetMIB.setLastUpdated('0906260645Z')
if mibBuilder.loadTexts: minetMIB.setOrganization('Codan Limited')
class WvAlarmsList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("filler0", 0), ("wvTelemetrynotOperational", 1), ("wvIduOduCableFault", 2), ("wvOperatingSystemFailure", 3), ("iduPowerSupplyLowValue", 4), ("iduTxSynthesizerOutOfLock", 5), ("iduRxSynthesizerOutOfLock", 6), ("iduNotOperational", 7), ("oduPowerSupplyOutOfRange", 8), ("txFailure", 9), ("oduTxSynthesizerOutOfLock", 10), ("oduRxSynthesizerOutOfLock", 11), ("oduRfSynthesizerOutOfLock", 12), ("remoteTerminalNotResponding", 13), ("linkDown", 14), ("filler15", 15), ("filler16", 16), ("filler17", 17), ("filler18", 18), ("filler19", 19), ("selfTestFault", 20), ("rxFailure", 21), ("wvTelemetryFailure", 22), ("oduTemperatureViolation", 23), ("anyOtherOduFault", 24), ("oduNotResponding", 25), ("wvSlipModemFailure", 26), ("linkIdViolation", 27), ("wvTftpDwnlFailure", 28), ("wvLinkESAlarm", 29), ("wvLinkSESAlarm", 30), ("wvLinkUASAlarm", 31), ("wvLinkDMAlarm", 32), ("wvLinkBERFailureAlarm", 33), ("wvLinkBLERAlarm", 34), ("wvLinkBBERAlarm", 35), ("wvLinkNCBLERAlarm", 36), ("dwnlGeneralError", 37), ("dwnlNoResponseFromServer", 38), ("dwnlChecksumError", 39), ("dwnlSwIncompatibleImage", 40), ("dwnlConfigIncompatibleImage", 41), ("dwnlTftpFileNotFound", 42), ("dwnlTftpAccessViolation", 43), ("remoteTerminalFailure", 44), ("filler45", 45), ("filler46", 46), ("filler47", 47), ("filler48", 48), ("filler49", 49), ("txOnMuteState", 50), ("rxOnMuteState", 51), ("remoteTerminalWarning", 52), ("passwordBypass", 53), ("wvLinkBERWarningAlarm", 54), ("rslLow", 55), ("averageRSLLow", 56), ("ds1Line-1-AIS", 57), ("ds1Line-2-AIS", 58), ("ds1Line-3-AIS", 59), ("ds1Line-4-AIS", 60), ("ds1Line-5-AIS", 61), ("ds1Line-6-AIS", 62), ("ds1Line-7-AIS", 63), ("ds1Line-8-AIS", 64), ("ds1Line-9-AIS", 65), ("ds1Line-10-AIS", 66), ("ds1Line-11-AIS", 67), ("ds1Line-12-AIS", 68), ("ds1Line-13-AIS", 69), ("ds1Line-14-AIS", 70), ("ds1Line-15-AIS", 71), ("ds1Line-16-AIS", 72), ("ds3Sts1Line-AIS", 73), ("ds1Line-1-LOS", 74), ("ds1Line-2-LOS", 75), ("ds1Line-3-LOS", 76), ("ds1Line-4-LOS", 77), ("ds1Line-5-LOS", 78), ("ds1Line-6-LOS", 79), ("ds1Line-7-LOS", 80), ("ds1Line-8-LOS", 81), ("ds1Line-9-LOS", 82), ("ds1Line-10-LOS", 83), ("ds1Line-11-LOS", 84), ("ds1Line-12-LOS", 85), ("ds1Line-13-LOS", 86), ("ds1Line-14-LOS", 87), ("ds1Line-15-LOS", 88), ("ds1Line-16-LOS", 89), ("ds3Sts1Line-LOS", 90), ("ds1Line-1-USD", 91), ("ds1Line-2-USD", 92), ("ds1Line-3-USD", 93), ("ds1Line-4-USD", 94), ("ds1Line-5-USD", 95), ("ds1Line-6-USD", 96), ("ds1Line-7-USD", 97), ("ds1Line-8-USD", 98), ("ds1Line-9-USD", 99), ("ds1Line-10-USD", 100), ("ds1Line-11-USD", 101), ("ds1Line-12-USD", 102), ("ds1Line-13-USD", 103), ("ds1Line-14-USD", 104), ("ds1Line-15-USD", 105), ("ds1Line-16-USD", 106), ("ds3Sts1Line-USD", 107), ("ds1Line-1-LOOP", 108), ("ds1Line-2-LOOP", 109), ("ds1Line-3-LOOP", 110), ("ds1Line-4-LOOP", 111), ("ds1Line-5-LOOP", 112), ("ds1Line-6-LOOP", 113), ("ds1Line-7-LOOP", 114), ("ds1Line-8-LOOP", 115), ("ds1Line-9-LOOP", 116), ("ds1Line-10-LOOP", 117), ("ds1Line-11-LOOP", 118), ("ds1Line-12-LOOP", 119), ("ds1Line-13-LOOP", 120), ("ds1Line-14-LOOP", 121), ("ds1Line-15-LOOP", 122), ("ds1Line-16-LOOP", 123), ("ds3Sts1Line-LOOP", 124), ("dwnlStatusUnknown", 125), ("dwnlInProcess", 126), ("dwnlSuccess", 127), ("ifLinkDown", 128), ("wvTelemetryWarning", 129), ("filler130", 130), ("eth10-100Port-1-CSL", 131), ("eth10-100Port-2-CSL", 132), ("eth10-100Port-3-CSL", 133), ("eth10-100Port-4-CSL", 134), ("eth10-100Port-1-EC", 135), ("eth10-100Port-2-EC", 136), ("eth10-100Port-3-EC", 137), ("eth10-100Port-4-EC", 138), ("eth10-100Port-1-IMTE", 139), ("eth10-100Port-2-IMTE", 140), ("eth10-100Port-3-IMTE", 141), ("eth10-100Port-4-IMTE", 142), ("eth10-100Port-1-IMRE", 143), ("eth10-100Port-2-IMRE", 144), ("eth10-100Port-3-IMRE", 145), ("eth10-100Port-4-IMRE", 146), ("filler147", 147), ("externalInput1Active", 148), ("externalInput2Active", 149), ("externalInput3Active", 150), ("externalInput4Active", 151), ("externalInput5Active", 152), ("externalInput6Active", 153), ("externalInput7Active", 154), ("externalInput8Active", 155), ("eth10-100RxLinkUsageLow", 156), ("eth10-100RxLinkUsageHigh", 157), ("eth10-100TxLinkUsageLow", 158), ("eth10-100TxLinkUsageHigh", 159))

class ComponentRevision(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'Vxx.yy'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class FrontPanelPassword(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 5)

class FloatingPoint(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'a.bcdE-n'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class WvLoopbacksList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("filler0", 0), ("localIduInputdsx1-1", 1), ("localIduInputdsx1-2", 2), ("localIduInputdsx1-3", 3), ("localIduInputdsx1-4", 4), ("localIduInputdsx1-5", 5), ("localIduInputdsx1-6", 6), ("localIduInputdsx1-7", 7), ("localIduInputdsx1-8", 8), ("localIduInputdsx1-9", 9), ("localIduInputdsx1-10", 10), ("localIduInputdsx1-11", 11), ("localIduInputdsx1-12", 12), ("localIduInputdsx1-13", 13), ("localIduInputdsx1-14", 14), ("localIduInputdsx1-15", 15), ("localIduInputdsx1-16", 16), ("localIduInputdsx3sts1", 17), ("localIduOutput", 18), ("localOdu", 19), ("localIduInput", 20), ("remoteIdudsx1-1", 21), ("remoteIdudsx1-2", 22), ("remoteIdudsx1-3", 23), ("remoteIdudsx1-4", 24), ("remoteIdudsx1-5", 25), ("remoteIdudsx1-6", 26), ("remoteIdudsx1-7", 27), ("remoteIdudsx1-8", 28), ("remoteIdudsx1-9", 29), ("remoteIdudsx1-10", 30), ("remoteIdudsx1-11", 31), ("remoteIdudsx1-12", 32), ("remoteIdudsx1-13", 33), ("remoteIdudsx1-14", 34), ("remoteIdudsx1-15", 35), ("remoteIdudsx1-16", 36), ("remoteIdudsx3sts1", 37), ("filler38", 38), ("filler39", 39), ("filler40", 40), ("localIduInputEth10-100-1", 41), ("localIduInputEth10-100-2", 42), ("remoteIduEth10-100-1", 43), ("remoteIduEth10-100-2", 44))

wvConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1))
wvStatusAndGauges = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2))
wvPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3))
wvTests = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4))
wvTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10))
wvLinkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1))
wvInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2))
wvManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3))
wvRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4))
wvExternalInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5))
wvAlarmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6))
wvComponentsRevisions = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7))
wvLinkId = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkId.setStatus('current')
wvLinkName = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('Codan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkName.setStatus('current')
wvLinkRouteDescription = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('siteA-siteB')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkRouteDescription.setStatus('current')
wvTxPowerSetting = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 29)).clone(10)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTxPowerSetting.setStatus('current')
wvChannelNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvChannelNo.setStatus('current')
wvLinkCapacity = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("oneE1", 1), ("twoE1", 2), ("fourE1", 3), ("eightE1", 4), ("sixteenE1", 5), ("e3", 6), ("e3PlusOneE1", 7), ("e3PlusTwoE1", 8), ("oneT1", 9), ("twoT1", 10), ("fourT1", 11), ("eightT1", 12), ("sixteenT1", 13), ("t3", 14), ("t3PlusTwoT1", 15), ("t3PlusFourT1", 16), ("sts1", 17), ("eth10-100Only", 18), ("eth10-100PlusOneE1", 19), ("eth10-100PlusTwoE1", 20), ("eth10-100PlusFourE1", 21), ("eth10-100PlusOneT1", 22), ("eth10-100PlusTwoT1", 23), ("eth10-100PlusFourT1", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkCapacity.setStatus('current')
wvTransmitterMute = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTransmitterMute.setStatus('current')
wvReceiverMute = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvReceiverMute.setStatus('current')
wvModulation = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cp4fsk", 2), ("qam4", 3), ("qam8", 4), ("qam16", 5), ("qam32", 6), ("qam64", 7), ("qam128", 8))).clone('cp4fsk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvModulation.setStatus('current')
wvForceAis = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("onBerWarning", 2), ("onBerError", 3), ("always", 4))).clone('never')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvForceAis.setStatus('current')
wvFecEnabled = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFecEnabled.setStatus('deprecated')
wvFecReceiveCorrection = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFecReceiveCorrection.setStatus('current')
wvFecNoOfCorrectableBytes = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFecNoOfCorrectableBytes.setStatus('current')
wvEth10_100ChannelSpacing = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("twoAndAHalf", 1), ("five", 2), ("sevenAndAHalf", 3), ("twelveAndAHalf", 4), ("twentyFive", 5), ("fifty", 6), ("threeAndAHalf", 7), ("seven", 8), ("fourteen", 9), ("twentyEight", 10), ("fiftySix", 11)))).setLabel("wvEth10-100ChannelSpacing").setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ChannelSpacing.setStatus('current')
wvAtpcControl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcControl.setStatus('current')
wvAtpcRslOptimalValue = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -15))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcRslOptimalValue.setStatus('current')
wvAtpcRslUpperThreshold = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -15))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcRslUpperThreshold.setStatus('current')
wvAtpcRslLowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -15))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcRslLowerThreshold.setStatus('current')
wvPauseTransmitterControl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvPauseTransmitterControl.setStatus('current')
wvPauseTransmitterTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 36000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvPauseTransmitterTime.setStatus('current')
wvE1BNC75ohm = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvE1BNC75ohm.setStatus('current')
wvAtpcTimeOutControl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcTimeOutControl.setStatus('current')
wvAtpcTimeOutTimer = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcTimeOutTimer.setStatus('current')
wvAtpcTimeOutAlarm = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcTimeOutAlarm.setStatus('current')
wvAtpcTimeOutAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("message", 1), ("error", 2), ("fatal", 3))).clone('fatal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAtpcTimeOutAlarmLevel.setStatus('current')
wvDisableAtpcInTimeOutAlarm = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvDisableAtpcInTimeOutAlarm.setStatus('current')
wvEnableSpaceDiversity = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEnableSpaceDiversity.setStatus('current')
wvTributaryPortConnectionsMode = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("autoSensing", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTributaryPortConnectionsMode.setStatus('current')
wvTributaryPortTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wvTributaryPortTable.setStatus('current')
wvTributaryPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "CODAN-MIB", "wvTributaryPortIfIndex"))
if mibBuilder.loadTexts: wvTributaryPortEntry.setStatus('current')
wvTributaryPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTributaryPortIfIndex.setStatus('current')
wvTributaryPortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTributaryPortConnection.setStatus('current')
wvTributaryPortInvertedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTributaryPortInvertedAlarm.setStatus('current')
wvTributaryPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTributaryPortName.setStatus('current')
wvDsx3CableLengthRange = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upTo225Feet", 1), ("moreThan225Feet", 2))).clone('upTo225Feet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvDsx3CableLengthRange.setStatus('current')
wvSlipConnection = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("modem", 2))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipConnection.setStatus('current')
wvTelephoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTelephoneNumber.setStatus('current')
wvDialPrefixString = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('ATDT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvDialPrefixString.setStatus('current')
wvInitString = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('ATZ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvInitString.setStatus('current')
wvEth10_100SysCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 20), Bits().clone(namedValues=NamedValues(("aging", 0), ("crcCheck", 1), ("flowCtrl", 2)))).setLabel("wvEth10-100SysCtrl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100SysCtrl.setStatus('current')
wvEth10_100SysAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 524280)).clone(80)).setLabel("wvEth10-100SysAgingTime").setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100SysAgingTime.setStatus('current')
wvEth10_100PortTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22), ).setLabel("wvEth10-100PortTable")
if mibBuilder.loadTexts: wvEth10_100PortTable.setStatus('current')
wvEth10_100PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1), ).setLabel("wvEth10-100PortEntry").setIndexNames((0, "CODAN-MIB", "wvEth10-100PortIfIndex"))
if mibBuilder.loadTexts: wvEth10_100PortEntry.setStatus('current')
wvEth10_100PortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1, 1), Integer32()).setLabel("wvEth10-100PortIfIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100PortIfIndex.setStatus('current')
wvEth10_100PortCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1, 2), Bits().clone(namedValues=NamedValues(("fastSpeed", 0), ("fullDuplex", 1), ("autoNegotiation", 2), ("forceDisconnectOnLinkDown", 3)))).setLabel("wvEth10-100PortCtrl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100PortCtrl.setStatus('current')
wvEth10_100PortStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1, 3), Bits().clone(namedValues=NamedValues(("fastSpeedOn", 0), ("fullDuplexOn", 1), ("cslAlarm", 2), ("ecAlarm", 3), ("imteAlarm", 4), ("imreAlarm", 5)))).setLabel("wvEth10-100PortStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100PortStatus.setStatus('current')
wvEth10_100PortClearStats = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1, 4), Integer32()).setLabel("wvEth10-100PortClearStats").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100PortClearStats.setStatus('current')
wvEth10_100PortThroughputCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unlimited", 1), ("limit128K", 2), ("limit256K", 3), ("limit512K", 4), ("limit1M", 5), ("limit2M", 6), ("limit4M", 7), ("limit8M", 8))).clone('unlimited')).setLabel("wvEth10-100PortThroughputCtrl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100PortThroughputCtrl.setStatus('current')
wvEth10_100AvailCapacity = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 23), Integer32()).setLabel("wvEth10-100AvailCapacity").setUnits('Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100AvailCapacity.setStatus('current')
wvRs232PortTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30), )
if mibBuilder.loadTexts: wvRs232PortTable.setStatus('current')
wvRs232PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1), ).setIndexNames((0, "CODAN-MIB", "wvRs232PortIndex"))
if mibBuilder.loadTexts: wvRs232PortEntry.setStatus('current')
wvRs232PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRs232PortIndex.setStatus('current')
wvRs232PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("rs232", 2), ("rs422", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232PortType.setStatus('current')
wvRs232PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232PortSpeed.setStatus('current')
wvRs232PortFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232PortFlowType.setStatus('current')
wvRs232AsyncPortBits = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232AsyncPortBits.setStatus('current')
wvRs232AsyncPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232AsyncPortStopBits.setStatus('current')
wvRs232AsyncPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 2, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRs232AsyncPortParity.setStatus('current')
wvUpdateTerminalConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUpdateTerminalConfiguration.setStatus('current')
wvActivateTerminalConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvActivateTerminalConfiguration.setStatus('current')
wvResetTerminal = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cold", 1), ("warm", 2), ("coldSwitchOver", 3), ("terminalSwitchOver", 4), ("running", 5), ("oduSwitchOver", 6))).clone('warm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvResetTerminal.setStatus('current')
wvActivateTerminalConfigurationTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvActivateTerminalConfigurationTime.setStatus('current')
wvSavedActiveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("savedConfiguration1", 1), ("savedConfiguration2", 2), ("savedConfiguration3", 3), ("factoryDefault", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSavedActiveConfiguration.setStatus('deprecated')
wvOnePlusOneRequestSwitchOut = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvOnePlusOneRequestSwitchOut.setStatus('current')
wvFrontPanelUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 10), FrontPanelPassword().clone(hexValue="0101010101")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFrontPanelUserPassword.setStatus('current')
wvFrontPanelAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 11), FrontPanelPassword().clone(hexValue="0101020202")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFrontPanelAdminPassword.setStatus('current')
wvFrontPanelSupervisorPassword = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 12), FrontPanelPassword().clone(hexValue="0101030304")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvFrontPanelSupervisorPassword.setStatus('current')
wvResetOdu = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cold", 1), ("coldSwitchOver", 2), ("running", 3))).clone('cold')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvResetOdu.setStatus('current')
wvSlipInIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipInIPAddress.setStatus('current')
wvSlipInIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipInIPSubnetMask.setStatus('current')
wvSlipOutIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipOutIPAddress.setStatus('current')
wvSlipOutIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipOutIPSubnetMask.setStatus('current')
wvLanIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLanIPAddress.setStatus('current')
wvLanIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLanIPSubnetMask.setStatus('current')
wvLinkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkIPAddress.setStatus('current')
wvLinkIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkIPSubnetMask.setStatus('current')
wvEth10_100ManIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 28), IpAddress()).setLabel("wvEth10-100ManIPAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ManIPAddress.setStatus('current')
wvEth10_100ManIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 29), IpAddress()).setLabel("wvEth10-100ManIPSubnetMask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ManIPSubnetMask.setStatus('current')
wvPeerSlipInIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerSlipInIPAddress.setStatus('current')
wvPeerSlipInIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerSlipInIPSubnetMask.setStatus('current')
wvPeerSlipOutIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 32), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerSlipOutIPAddress.setStatus('current')
wvPeerSlipOutIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerSlipOutIPSubnetMask.setStatus('current')
wvPeerLanIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerLanIPAddress.setStatus('current')
wvPeerLanIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 35), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerLanIPSubnetMask.setStatus('current')
wvPeerLinkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerLinkIPAddress.setStatus('current')
wvPeerLinkIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 37), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerLinkIPSubnetMask.setStatus('current')
wvPeerEth10_100ManIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 38), IpAddress()).setLabel("wvPeerEth10-100ManIPAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerEth10_100ManIPAddress.setStatus('current')
wvPeerEth10_100ManIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 39), IpAddress()).setLabel("wvPeerEth10-100ManIPSubnetMask").setMaxAccess("readonly")
if mibBuilder.loadTexts: wvPeerEth10_100ManIPSubnetMask.setStatus('current')
wvSlipInDestIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipInDestIPAddress.setStatus('current')
wvSlipInDestIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 41), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipInDestIPSubnetMask.setStatus('deprecated')
wvSlipOutDestIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 42), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipOutDestIPAddress.setStatus('current')
wvSlipOutDestIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 43), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSlipOutDestIPSubnetMask.setStatus('deprecated')
wvOnePlusOneCompanionLinkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 44), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOnePlusOneCompanionLinkIPAddress.setStatus('current')
wvOnePlusOneCompanionEthIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 45), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvOnePlusOneCompanionEthIPAddress.setStatus('current')
wvUserRoutesManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50))
wvUserRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1), )
if mibBuilder.loadTexts: wvUserRoutesTable.setStatus('current')
wvUserRoutesCount = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvUserRoutesCount.setStatus('current')
wvUserRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1), ).setIndexNames((0, "CODAN-MIB", "wvUserRoutesIndex"))
if mibBuilder.loadTexts: wvUserRoutesEntry.setStatus('current')
wvUserRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvUserRoutesIndex.setStatus('current')
wvUserRoutesDest = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUserRoutesDest.setStatus('current')
wvUserRoutesHop = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUserRoutesHop.setStatus('current')
wvUserRoutesMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUserRoutesMask.setStatus('current')
wvUserRoutesIf = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("eth", 1), ("eth10-100", 2), ("link", 3), ("nms-in", 4), ("nms-out", 5), ("sys-choice", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUserRoutesIf.setStatus('current')
wvUserRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 50, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvUserRoutesType.setStatus('current')
wvSetOperationId = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 100), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSetOperationId.setStatus('current')
wvSetOperationCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setEnabled", 1), ("setDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSetOperationCtrl.setStatus('current')
wvSetOperationOwner = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSetOperationOwner.setStatus('current')
wvConfigurationChangedStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 103), Bits().clone(namedValues=NamedValues(("filler", 0), ("wvLinkSettings", 1), ("wvInterfaces", 2), ("interfaces", 3), ("ifTestTable", 4), ("ipAddrTable", 5), ("dsx1ConfigTable", 6), ("dsx3ConfigTable", 7), ("rs232", 8), ("wvManagement", 9), ("system", 10), ("wvRelayTable", 11), ("wvExternalInputTable", 12), ("wvAlarmControl", 13), ("wvTests", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvConfigurationChangedStatus.setStatus('deprecated')
wvCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 110), )
if mibBuilder.loadTexts: wvCommunityTable.setStatus('current')
wvCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 110, 1), ).setIndexNames((0, "CODAN-MIB", "wvCommunityId"))
if mibBuilder.loadTexts: wvCommunityEntry.setStatus('current')
wvCommunityId = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvCommunityId.setStatus('current')
wvCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 110, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvCommunityName.setStatus('current')
wvCommunityPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 110, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvCommunityPrivilege.setStatus('current')
wvTrapRecipientsTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 111), )
if mibBuilder.loadTexts: wvTrapRecipientsTable.setStatus('current')
wvTrapRecipientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 111, 1), ).setIndexNames((0, "CODAN-MIB", "wvTrapRecipientsId"))
if mibBuilder.loadTexts: wvTrapRecipientsEntry.setStatus('current')
wvTrapRecipientsId = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 111, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTrapRecipientsId.setStatus('current')
wvTrapRecipientsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 111, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTrapRecipientsIp.setStatus('current')
wvTftpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 200), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTftpServerIpAddress.setStatus('current')
wvTftpOperationCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTftpOperationCtrl.setStatus('current')
wvTftpNoOfRetries = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTftpNoOfRetries.setStatus('current')
wvTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 203), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('\\codan.lst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTftpFileName.setStatus('current')
wvTftpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 204), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTftpStartTime.setStatus('current')
wvTftpRemainingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 205), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTftpRemainingStartTime.setStatus('current')
wvSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210), )
if mibBuilder.loadTexts: wvSwModuleTable.setStatus('current')
wvResetPerformance = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvResetPerformance.setStatus('current')
wvSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1), ).setIndexNames((0, "CODAN-MIB", "wvSwModuleIndex"))
if mibBuilder.loadTexts: wvSwModuleEntry.setStatus('current')
wvSwModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleIndex.setStatus('current')
wvSwModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleName.setStatus('current')
wvSwModuleActiveRev = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 3), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleActiveRev.setStatus('current')
wvSwModuleActiveCS = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleActiveCS.setStatus('current')
wvSwModuleStandByRev = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 5), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleStandByRev.setStatus('current')
wvSwModuleStandByCS = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 3, 210, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSwModuleStandByCS.setStatus('current')
wvRelayTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wvRelayTable.setStatus('current')
wvRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "CODAN-MIB", "wvRelayId"))
if mibBuilder.loadTexts: wvRelayEntry.setStatus('current')
wvRelayId = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRelayId.setStatus('current')
wvRelayOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRelayOperation.setStatus('current')
wvRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRelayNormalState.setStatus('current')
wvRelayActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRelayActivate.setStatus('current')
wvRelayToLocalAlarmMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 5), WvAlarmsList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRelayToLocalAlarmMapping.setStatus('current')
wvRelayToRemoteAlarmMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 6), WvAlarmsList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvRelayToRemoteAlarmMapping.setStatus('current')
wvRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRelayStatus.setStatus('current')
wvExternalInputTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wvExternalInputTable.setStatus('current')
wvExternalInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "CODAN-MIB", "wvExternalInputId"))
if mibBuilder.loadTexts: wvExternalInputEntry.setStatus('current')
wvExternalInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvExternalInputId.setStatus('current')
wvExternalInputSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvExternalInputSetting.setStatus('current')
wvExternalInputSense = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("anyChange", 3))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvExternalInputSense.setStatus('current')
wvExternalInputAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("fatal", 3))).clone('error')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvExternalInputAlarmSeverity.setStatus('current')
wvExternalInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvExternalInputStatus.setStatus('current')
wvAlarmsReportToNMSCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("errorAndFatal", 2), ("fatalOnly", 3), ("none", 4))).clone('errorAndFatal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAlarmsReportToNMSCtrl.setStatus('current')
wvAlarmsReportToLCDCtrl = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("errorAndFatal", 2), ("fatalOnly", 3), ("none", 4))).clone('fatalOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvAlarmsReportToLCDCtrl.setStatus('current')
wvNoOfAlertsOnLCD = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvNoOfAlertsOnLCD.setStatus('current')
wvLinkBERWarningThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 4), FloatingPoint().clone(hexValue="03e805")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBERWarningThresholdHigh.setStatus('current')
wvLinkBERWarningThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 5), FloatingPoint().clone(hexValue="03e806")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBERWarningThresholdLow.setStatus('current')
wvLinkBERErrorThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 6), FloatingPoint().clone(hexValue="03e802")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBERErrorThresholdHigh.setStatus('current')
wvLinkBERErrorThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 7), FloatingPoint().clone(hexValue="03e803")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBERErrorThresholdLow.setStatus('current')
wvLinkBLERAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 8), FloatingPoint().clone(hexValue="03e802")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBLERAlarmThresholdHigh.setStatus('current')
wvLinkBLERAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 9), FloatingPoint().clone(hexValue="03e803")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBLERAlarmThresholdLow.setStatus('current')
wvLinkBBERAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 10), FloatingPoint().clone(hexValue="03e802")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBBERAlarmThresholdHigh.setStatus('current')
wvLinkBBERAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 11), FloatingPoint().clone(hexValue="03e803")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkBBERAlarmThresholdLow.setStatus('current')
wvLinkNCBLERAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 12), FloatingPoint().clone(hexValue="03e802")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkNCBLERAlarmThresholdHigh.setStatus('current')
wvLinkNCBLERAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 13), FloatingPoint().clone(hexValue="03e803")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkNCBLERAlarmThresholdLow.setStatus('current')
wvLinkESAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkESAlarmThresholdHigh.setStatus('current')
wvLinkESAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkESAlarmThresholdLow.setStatus('current')
wvLinkSESAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkSESAlarmThresholdHigh.setStatus('current')
wvLinkSESAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkSESAlarmThresholdLow.setStatus('current')
wvLinkDMAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkDMAlarmThresholdHigh.setStatus('current')
wvLinkDMAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkDMAlarmThresholdLow.setStatus('current')
wvLinkUASAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkUASAlarmThresholdHigh.setStatus('current')
wvLinkUASAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkUASAlarmThresholdLow.setStatus('current')
wvlinkRSLLowAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -10))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvlinkRSLLowAlarmThresholdhHigh.setStatus('current')
wvlinkRSLLowAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -10))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvlinkRSLLowAlarmThresholdhLow.setStatus('current')
wvlinkAverageRSLLowAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -10))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvlinkAverageRSLLowAlarmThresholdhHigh.setStatus('current')
wvlinkAverageRSLLowAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -10))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvlinkAverageRSLLowAlarmThresholdhLow.setStatus('current')
wvLinkThresholdMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLinkThresholdMeasurementInterval.setStatus('current')
wvEth10_100CSLAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(5)).setLabel("wvEth10-100CSLAlarmThresholdhHigh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100CSLAlarmThresholdhHigh.setStatus('current')
wvEth10_100CSLAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100CSLAlarmThresholdhLow").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100CSLAlarmThresholdhLow.setStatus('current')
wvEth10_100ECAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(5)).setLabel("wvEth10-100ECAlarmThresholdhHigh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ECAlarmThresholdhHigh.setStatus('current')
wvEth10_100ECAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100ECAlarmThresholdhLow").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ECAlarmThresholdhLow.setStatus('current')
wvEth10_100IMTEAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(20)).setLabel("wvEth10-100IMTEAlarmThresholdhHigh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100IMTEAlarmThresholdhHigh.setStatus('current')
wvEth10_100IMTEAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(5)).setLabel("wvEth10-100IMTEAlarmThresholdhLow").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100IMTEAlarmThresholdhLow.setStatus('current')
wvEth10_100IMREAlarmThresholdhHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(20)).setLabel("wvEth10-100IMREAlarmThresholdhHigh").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100IMREAlarmThresholdhHigh.setStatus('current')
wvEth10_100IMREAlarmThresholdhLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(5)).setLabel("wvEth10-100IMREAlarmThresholdhLow").setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100IMREAlarmThresholdhLow.setStatus('current')
wvEth10_100TxLinkUsageAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100TxLinkUsageAlarmThresholdLow").setUnits('MBits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100TxLinkUsageAlarmThresholdLow.setStatus('current')
wvEth10_100TxLinkUsageAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100TxLinkUsageAlarmThresholdHigh").setUnits('MBits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100TxLinkUsageAlarmThresholdHigh.setStatus('current')
wvEth10_100RxLinkUsageAlarmThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100RxLinkUsageAlarmThresholdLow").setUnits('MBits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100RxLinkUsageAlarmThresholdLow.setStatus('current')
wvEth10_100RxLinkUsageAlarmThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setLabel("wvEth10-100RxLinkUsageAlarmThresholdHigh").setUnits('MBits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100RxLinkUsageAlarmThresholdHigh.setStatus('current')
wvEth10_100ThresholdMeasurementInterval = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900)).clone(30)).setLabel("wvEth10-100ThresholdMeasurementInterval").setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvEth10_100ThresholdMeasurementInterval.setStatus('current')
wvClearAlarmLog = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 6, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvClearAlarmLog.setStatus('current')
wvInstalledPlugInPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvInstalledPlugInPartNo.setStatus('current')
wvInstalledPlugInHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 2), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvInstalledPlugInHwRevision.setStatus('current')
wvIduPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduPartNo.setStatus('current')
wvIduHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 4), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduHwRevision.setStatus('current')
wvIduSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 5), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduSwRevision.setStatus('current')
wvIduLastSwUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduLastSwUpdateTime.setStatus('current')
wvOduPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduPartNo.setStatus('current')
wvOduHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 8), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduHwRevision.setStatus('current')
wvOduSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 9), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduSwRevision.setStatus('current')
wvOduLastSwUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduLastSwUpdateTime.setStatus('current')
wvIpbHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 11), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIpbHwRevision.setStatus('current')
wvBootSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 12), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvBootSwRevision.setStatus('current')
wvIduAlternetSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 13), ComponentRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduAlternetSwRevision.setStatus('current')
wvOemId = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOemId.setStatus('current')
wvOemIduPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOemIduPartNo.setStatus('current')
wvOemOduPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOemOduPartNo.setStatus('current')
wvInstalledOemPlugInPartNo = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 1, 7, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvInstalledOemPlugInPartNo.setStatus('current')
wvTelemetryStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("fault", 3), ("notOperational", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTelemetryStatus.setStatus('current')
wvOperatingSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("systemFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOperatingSystemStatus.setStatus('current')
wvIduOduCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("short", 3), ("open", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduOduCableStatus.setStatus('current')
wvIduStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 4), Bits().clone(namedValues=NamedValues(("filler0", 0), ("iduPowerSupplyLowValue", 1), ("iduTxSynthesizerOutOfLock", 2), ("iduRxSynthesizerOutOfLock", 3), ("externalInputsActive", 4), ("selfTestFault", 5), ("iduNotOperational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduStatus.setStatus('current')
wvOduStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 5), Bits().clone(namedValues=NamedValues(("filler0", 0), ("oduPowerSupplyOutOfRange", 1), ("txOnMuteState", 2), ("rxOnMuteState", 3), ("txFailure", 4), ("rxFailure", 5), ("rslLow", 6), ("averageRSLLow", 7), ("oduTxSynthesizerOutOfLock", 8), ("oduRxSynthesizerOutOfLock", 9), ("oduRfSynthesizerOutOfLock", 10), ("oduTemperatureViolation", 11), ("anyOtherOduFault", 12), ("oduNotResponding", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduStatus.setStatus('current')
wvRemoteTerminalStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 6), Bits().clone(namedValues=NamedValues(("remoteTerminalWarning", 0), ("remoteTerminalFailure", 1), ("remoteTerminalNotResponding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRemoteTerminalStatus.setStatus('current')
wvSlipModemStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 1), ("notResponding", 2), ("noDialTone", 3), ("lineBusy", 4), ("connected", 5), ("anyOtherFault", 6), ("noAnswer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSlipModemStatus.setStatus('current')
wvSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 8), Bits().clone(namedValues=NamedValues(("filler0", 0), ("linkIdViolation", 1), ("passwordBypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSecurityStatus.setStatus('current')
wvTftpDwnlStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("dwnlStatusUnknown", 1), ("dwnlInProcess", 2), ("dwnlSuccess", 3), ("dwnlGeneralError", 4), ("dwnlNoResponseFromServer", 5), ("dwnlChecksumError", 6), ("dwnlSwIncompatibleImage", 7), ("dwnlConfigIncompatibleImage", 8), ("dwnlTftpProtocolError", 9), ("dwnlTftpFilePasswordError", 10), ("dwnlCancelByUser", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTftpDwnlStatus.setStatus('current')
wvLinkPerformanceAlarmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 10), Bits().clone(namedValues=NamedValues(("filler0", 0), ("wvLinkESAlarm", 1), ("wvLinkSESAlarm", 2), ("wvLinkUASAlarm", 3), ("wvLinkDMAlarm", 4), ("wvLinkBERWarningAlarm", 5), ("wvLinkBERFailureAlarm", 6), ("wvLinkBLERAlarm", 7), ("wvLinkBBERAlarm", 8), ("wvLinkNCBLERAlarm", 9), ("eth10-100RxLinkUsageLow", 10), ("eth10-100RxLinkUsageHigh", 11), ("eth10-100TxLinkUsageLow", 12), ("eth10-100TxLinkUsageHigh", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkPerformanceAlarmsStatus.setStatus('current')
wvOperatingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 11), Integer32()).setUnits('MHz*100').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOperatingFrequency.setStatus('current')
wvFrequencyBand = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bandOne", 1), ("bandTwo", 2), ("bandThree", 3), ("bandFour", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvFrequencyBand.setStatus('current')
wvChannelSpacing = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("twoAndAHalf", 1), ("five", 2), ("sevenAndAHalf", 3), ("twelveAndAHalf", 4), ("twentyFive", 5), ("fifty", 6), ("threeAndAHalf", 7), ("seven", 8), ("fourteen", 9), ("twentyEight", 10), ("fiftySix", 11)))).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvChannelSpacing.setStatus('current')
wvTxPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, 30))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTxPowerLevel.setStatus('current')
wvRxSignalLevel = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -10))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRxSignalLevel.setStatus('current')
wvFadeMargin = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvFadeMargin.setStatus('current')
wvOduTemperature = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduTemperature.setStatus('current')
wvLedState = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 18), Bits().clone(namedValues=NamedValues(("filler0", 0), ("powerOn", 1), ("linkOperational", 2), ("relay1On", 3), ("relay2On", 4), ("relay3On", 5), ("relay4On", 6), ("relay5On", 7), ("localCableFault", 8), ("remoteCableFault", 9), ("localIduFault", 10), ("remoteIduFault", 11), ("localOduFault", 12), ("remoteOduFault", 13), ("localFrontPanelDisplay", 14), ("remoteFrontPanelDisplay", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLedState.setStatus('current')
wvModemAfc = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvModemAfc.setStatus('current')
wvRxPllFrequency = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRxPllFrequency.setStatus('current')
wvWorkingFrequency = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 21), Integer32()).setUnits('MHz*100').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvWorkingFrequency.setStatus('current')
wvMaxTxPowerSetting = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 29)).clone(29)).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvMaxTxPowerSetting.setStatus('current')
wvMinTxPowerSetting = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 29)).clone(-10)).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvMinTxPowerSetting.setStatus('current')
wvOduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOduSerialNumber.setStatus('current')
wvIduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvIduSerialNumber.setStatus('current')
wvOnePlusOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 30), Bits().clone(namedValues=NamedValues(("filler0", 0), ("onePlusOneOn", 1), ("primaryUnit", 2), ("manualModeOn", 3), ("alternateIduOk", 4), ("unitActive", 5), ("frequencyDiversityOn", 6), ("swIduFail", 7), ("upperUnit", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOnePlusOneStatus.setStatus('current')
wvSupport2T1and2E1Status = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("support2T1and2E1Enable", 0), ("support2T1and2E1Disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSupport2T1and2E1Status.setStatus('current')
wvLastUpdateConfigurationTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastUpdateConfigurationTimestamp.setStatus('current')
wvOemIduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOemIduSerialNumber.setStatus('current')
wvOemOduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOemOduSerialNumber.setStatus('current')
wvOnePlusOneConnectorType = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("yCable", 0), ("iauDb25", 1), ("iau75", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvOnePlusOneConnectorType.setStatus('current')
wvLog = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40))
wvLogEventsElapsed = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLogEventsElapsed.setStatus('current')
wvLogEventTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2), )
if mibBuilder.loadTexts: wvLogEventTable.setStatus('current')
wvLogEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2, 1), ).setIndexNames((0, "CODAN-MIB", "wvLogEventLock"))
if mibBuilder.loadTexts: wvLogEventEntry.setStatus('current')
wvLogEventLock = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLogEventLock.setStatus('current')
wvLogEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLogEventTime.setStatus('current')
wvLogEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("messageStart", 1), ("warningStart", 2), ("fatalStart", 3), ("messageEnd", 4), ("warningEnd", 5), ("fatalEnd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLogEventStatus.setStatus('current')
wvLogEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 2, 40, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLogEventDescription.setStatus('current')
wvlinkBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 1), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkBER.setStatus('current')
wvlinkBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 2), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkBLER.setStatus('current')
wvlinkBBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 3), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkBBER.setStatus('current')
wvlinkNCBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 4), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkNCBLER.setStatus('current')
wvLinkESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 5), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkESs.setStatus('current')
wvLinkSESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 6), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkSESs.setStatus('current')
wvLinkUAs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 7), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkUAs.setStatus('current')
wvLinkDMs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 8), Gauge32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkDMs.setStatus('current')
wvlinkAverageRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkAverageRSL.setStatus('current')
wvlinkMaximumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkMaximumRSL.setStatus('current')
wvlinkMinimumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkMinimumRSL.setStatus('current')
wvLinkValidIntervals = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkValidIntervals.setStatus('current')
wvLinkCurrentESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 13), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentESs.setStatus('current')
wvLinkCurrentSESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 14), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentSESs.setStatus('current')
wvLinkCurrentUASs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 15), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentUASs.setStatus('current')
wvLinkCurrentDMs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 16), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentDMs.setStatus('current')
wvLinkCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 17), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentBER.setStatus('current')
wvLinkCurrentBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 18), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentBLER.setStatus('current')
wvLinkCurrentBBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 19), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentBBER.setStatus('current')
wvLinkCurrentNCBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 20), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkCurrentNCBLER.setStatus('current')
wvlinkCurrentAverageRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 21), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkCurrentAverageRSL.setStatus('current')
wvlinkCurrentMaximumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 22), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkCurrentMaximumRSL.setStatus('current')
wvlinkCurrentMinimumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 23), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkCurrentMinimumRSL.setStatus('current')
wvlinkCurrentTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkCurrentTimeElapsed.setStatus('current')
wvLinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25), )
if mibBuilder.loadTexts: wvLinkIntervalTable.setStatus('current')
wvLinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1), ).setIndexNames((0, "CODAN-MIB", "wvLinkIntervalNumber"))
if mibBuilder.loadTexts: wvLinkIntervalEntry.setStatus('current')
wvLinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalNumber.setStatus('current')
wvLinkIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalESs.setStatus('current')
wvLinkIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalSESs.setStatus('current')
wvLinkIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalUASs.setStatus('current')
wvLinkIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalDMs.setStatus('current')
wvLinkIntervalBER = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 6), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalBER.setStatus('current')
wvLinkIntervalBLER = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 7), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalBLER.setStatus('current')
wvLinkIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 8), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalBBER.setStatus('current')
wvLinkIntervalNCBLER = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 9), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkIntervalNCBLER.setStatus('current')
wvlinkIntervalAverageRSL = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 10), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkIntervalAverageRSL.setStatus('current')
wvlinkIntervalMaximumRSL = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkIntervalMaximumRSL.setStatus('current')
wvlinkIntervalMinimumRSL = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 25, 1, 12), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkIntervalMinimumRSL.setStatus('current')
wvLinkTotalESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalESs.setStatus('current')
wvLinkTotalSESs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalSESs.setStatus('current')
wvLinkTotalUASs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalUASs.setStatus('current')
wvLinkTotalDMs = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalDMs.setStatus('current')
wvLinkTotalBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 30), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalBER.setStatus('current')
wvLinkTotalBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 31), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalBLER.setStatus('current')
wvLinkTotalBBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 32), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalBBER.setStatus('current')
wvLinkTotalNCBLER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 33), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkTotalNCBLER.setStatus('current')
wvlinkTotalAverageRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 34), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkTotalAverageRSL.setStatus('current')
wvlinkTotalMaximumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 35), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkTotalMaximumRSL.setStatus('current')
wvlinkTotalMinimumRSL = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 36), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkTotalMinimumRSL.setStatus('current')
wvlinkNoOfReceivedKBits = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 40), Counter32()).setUnits('Kilobits').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkNoOfReceivedKBits.setStatus('current')
wvlinkNoOfErrors = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkNoOfErrors.setStatus('current')
wvlinkErroredBlocks = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkErroredBlocks.setStatus('current')
wvlinkNotCorrectedErroredBlocks = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkNotCorrectedErroredBlocks.setStatus('current')
wvLinkPerformanceCountTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 50), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLinkPerformanceCountTime.setStatus('current')
wvlinkInstantaneousBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 60), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvlinkInstantaneousBER.setStatus('current')
wvEth10_100TxLinkUsage = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 100), Integer32()).setLabel("wvEth10-100TxLinkUsage").setUnits('Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100TxLinkUsage.setStatus('current')
wvEth10_100RxLinkUsage = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 101), Integer32()).setLabel("wvEth10-100RxLinkUsage").setUnits('Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100RxLinkUsage.setStatus('current')
wvEth10_100TxLinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 102), Integer32()).setLabel("wvEth10-100TxLinkUtilization").setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100TxLinkUtilization.setStatus('current')
wvEth10_100RxLinkUtilization = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 3, 103), Integer32()).setLabel("wvEth10-100RxLinkUtilization").setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wvEth10_100RxLinkUtilization.setStatus('current')
wvLoopbackType = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 1), WvLoopbacksList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLoopbackType.setStatus('current')
wvLoopbackStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLoopbackStartTime.setStatus('current')
wvLoopbackTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 3), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvLoopbackTimePeriod.setStatus('current')
wvLoopbackRemainingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLoopbackRemainingStartTime.setStatus('current')
wvLoopbackRemainingTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLoopbackRemainingTimePeriod.setStatus('current')
wvSelfTestType = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 100), Bits().clone(namedValues=NamedValues(("noTest", 0), ("ramTest", 1), ("flashTest", 2), ("epromTest", 3), ("fpTest", 4), ("modemTest", 5), ("fecTest", 6), ("muxTest", 7), ("ibTest", 8), ("bertTest", 9), ("sccTest", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSelfTestType.setStatus('deprecated')
wvSelfTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 101), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSelfTestStartTime.setStatus('deprecated')
wvLastSelfTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 102), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastSelfTestStartTime.setStatus('current')
wvLastSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 103), )
if mibBuilder.loadTexts: wvLastSelfTestTable.setStatus('current')
wvLastSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 103, 1), ).setIndexNames((0, "CODAN-MIB", "wvLastSelfTestType"))
if mibBuilder.loadTexts: wvLastSelfTestEntry.setStatus('current')
wvLastSelfTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noTest", 0), ("ramTest", 1), ("flashTest", 2), ("epromTest", 3), ("fpTest", 4), ("modemTest", 5), ("fecTest", 6), ("muxTest", 7), ("ibTest", 8), ("bertTest", 9), ("sccTest", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastSelfTestType.setStatus('current')
wvLastSelfTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastSelfTestStatus.setStatus('current')
wvSelfTestRemainingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 104), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvSelfTestRemainingStartTime.setStatus('deprecated')
wvInsertTestSignalLine = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 200), Bits().clone(namedValues=NamedValues(("filler0", 0), ("dsx1-1", 1), ("dsx1-2", 2), ("dsx1-3", 3), ("dsx1-4", 4), ("dsx1-5", 5), ("dsx1-6", 6), ("dsx1-7", 7), ("dsx1-8", 8), ("dsx1-9", 9), ("dsx1-10", 10), ("dsx1-11", 11), ("dsx1-12", 12), ("dsx1-13", 13), ("dsx1-14", 14), ("dsx1-15", 15), ("dsx1-16", 16), ("dsx3", 17), ("eth10-100", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvInsertTestSignalLine.setStatus('current')
wvInsertTestSignalStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 201), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvInsertTestSignalStartTime.setStatus('current')
wvInsertTestSignalTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 202), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvInsertTestSignalTimePeriod.setStatus('current')
wvLastTestSignalTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 203), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastTestSignalTime.setStatus('current')
wvLastTestSignalBER = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 204), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLastTestSignalBER.setStatus('current')
wvInsertTestSignalRemainingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 205), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvInsertTestSignalRemainingStartTime.setStatus('current')
wvInsertTestSignalRemainingTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 206), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvInsertTestSignalRemainingTimePeriod.setStatus('current')
wvGenericDiagnosticsParameterAddress = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 300), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvGenericDiagnosticsParameterAddress.setStatus('current')
wvGenericDiagnosticsParameterValue = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 4, 301), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvGenericDiagnosticsParameterValue.setStatus('current')
wvTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0))
wvTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1))
wvTrapKeepAlivePeriod = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTrapKeepAlivePeriod.setStatus('current')
wvAisPortTrap = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvAisPortTrap.setStatus('current')
wvLosPortTrap = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvLosPortTrap.setStatus('current')
wvExternalInputTrap = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvExternalInputTrap.setStatus('current')
wvRelayIdTrap = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvRelayIdTrap.setStatus('current')
wvSelectTrapVector = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 6), Bits().clone(namedValues=NamedValues(("wlOduCableFaultStart", 0), ("wlOduCableFaultStop", 1), ("wlIduIntnlFaultStart", 2), ("wlIduIntnlFaultStop", 3), ("wlOduIntnlFaultStart", 4), ("wlOduIntnlFaultStop", 5), ("wlLinkDownStart", 6), ("wlLinkDownStop", 7), ("wlIdViolationtStart", 8), ("wlIdViolationStop", 9), ("wlRmtTermAccsStart", 10), ("wlRmtTermAccsStop", 11), ("wlLoclOduAccsStart", 12), ("wlLoclOduAccsStop", 13), ("wlRcvSignLowLevlStart", 14), ("wlRcvSignLowLevlStop", 15), ("wlRelayStart", 16), ("wlRelayStop", 17), ("wlAisStart", 18), ("wlAisStop", 19), ("wlLosStart", 20), ("wlLosStop", 21), ("wlBerWarnStart", 22), ("wlBerWarnStop", 23), ("wlBerErrStart", 24), ("wlBerErrStop", 25), ("wlExtInputsStart", 26), ("wlExtInputsStop", 27), ("wlUasStart", 28), ("wlUasStop", 29), ("wlTftpFail", 30), ("wlTftpSuss", 31), ("wlOduTempStart", 32), ("wlOduTempStop", 33), ("wlTxMuteStart", 34), ("wlTxMuteStop", 35), ("wlPwrSupplyStart", 36), ("wlPwrSupplyStop", 37), ("wlCfgMismatch", 38), ("wlBankSw", 39), ("wlPortLoopBckStart", 40), ("wlPortLoopBckStop", 41), ("wlPortBertStart", 42), ("wlPortBertStop", 43), ("wlHeartBit", 44), ("wlAisReceiveStart", 45), ("wlAisReceiveStop", 46), ("wlEth10x100RxLinkUsageLowStart", 47), ("wlEth10x100RxLinkUsageLowStop", 48), ("wlEth10x100RxLinkUsageHighStart", 49), ("wlEth10x100RxLinkUsageHighStop", 50), ("wlEth10x100TxLinkUsageLowStart", 51), ("wlEth10x100TxLinkUsageLowStop", 52), ("wlEth10x100TxLinkUsageHighStart", 53), ("wlEth10x100TxLinkUsageHighStop", 54), ("wlEnd", 55)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvSelectTrapVector.setStatus('current')
wvTrapKeepAliveVarsSelect = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 7), Bits().clone(namedValues=NamedValues(("vRSL", 0), ("vBER", 1), ("vUAS", 2), ("vEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wvTrapKeepAliveVarsSelect.setStatus('current')
wvTrapKeepAliveString = MibScalar((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wvTrapKeepAliveString.setStatus('current')
wvIduOduCableFaultStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 1)).setObjects(("CODAN-MIB", "wvIduOduCableStatus"))
if mibBuilder.loadTexts: wvIduOduCableFaultStart.setStatus('current')
wvIduOduCableFaultStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 2)).setObjects(("CODAN-MIB", "wvIduOduCableStatus"))
if mibBuilder.loadTexts: wvIduOduCableFaultStop.setStatus('current')
wvIduInternalFaultStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 3)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduInternalFaultStart.setStatus('current')
wvIduInternalFaultStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 4)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduInternalFaultStop.setStatus('current')
wvOduInternalFaultStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 5)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvOduInternalFaultStart.setStatus('current')
wvOduInternalFaultStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 6)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvOduInternalFaultStop.setStatus('current')
wvLinkDownStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 7)).setObjects(("CODAN-MIB", "wvLinkPerformanceAlarmsStatus"))
if mibBuilder.loadTexts: wvLinkDownStart.setStatus('current')
wvLinkDownStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 8)).setObjects(("CODAN-MIB", "wvLinkPerformanceAlarmsStatus"))
if mibBuilder.loadTexts: wvLinkDownStop.setStatus('current')
wvIdViolationStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 9)).setObjects(("CODAN-MIB", "wvSecurityStatus"))
if mibBuilder.loadTexts: wvIdViolationStart.setStatus('current')
wvIdViolationStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 10)).setObjects(("CODAN-MIB", "wvSecurityStatus"))
if mibBuilder.loadTexts: wvIdViolationStop.setStatus('current')
wvRemoteAccessStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 11)).setObjects(("CODAN-MIB", "wvRemoteTerminalStatus"))
if mibBuilder.loadTexts: wvRemoteAccessStart.setStatus('current')
wvRemoteAccessStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 12)).setObjects(("CODAN-MIB", "wvRemoteTerminalStatus"))
if mibBuilder.loadTexts: wvRemoteAccessStop.setStatus('current')
wvLocalOduAccessStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 13)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvLocalOduAccessStart.setStatus('current')
wvLocalOduAccessStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 14)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvLocalOduAccessStop.setStatus('current')
wvReceiveSignalLowerLevelStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 15)).setObjects(("CODAN-MIB", "wvRxSignalLevel"), ("CODAN-MIB", "wvAtpcRslLowerThreshold"))
if mibBuilder.loadTexts: wvReceiveSignalLowerLevelStart.setStatus('current')
wvReceiveSignalLowerLevelStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 16)).setObjects(("CODAN-MIB", "wvRxSignalLevel"), ("CODAN-MIB", "wvAtpcRslLowerThreshold"))
if mibBuilder.loadTexts: wvReceiveSignalLowerLevelStop.setStatus('current')
wvRelayStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 17)).setObjects(("CODAN-MIB", "wvRelayIdTrap"))
if mibBuilder.loadTexts: wvRelayStart.setStatus('current')
wvRelayStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 18)).setObjects(("CODAN-MIB", "wvRelayIdTrap"))
if mibBuilder.loadTexts: wvRelayStop.setStatus('current')
wvLineAisStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 19)).setObjects(("CODAN-MIB", "wvAisPortTrap"))
if mibBuilder.loadTexts: wvLineAisStart.setStatus('current')
wvLineAisStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 20)).setObjects(("CODAN-MIB", "wvAisPortTrap"))
if mibBuilder.loadTexts: wvLineAisStop.setStatus('current')
wvLineLosStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 21)).setObjects(("CODAN-MIB", "wvLosPortTrap"))
if mibBuilder.loadTexts: wvLineLosStart.setStatus('current')
wvLineLosStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 22)).setObjects(("CODAN-MIB", "wvLosPortTrap"))
if mibBuilder.loadTexts: wvLineLosStop.setStatus('current')
wvBerWarningStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 23)).setObjects(("CODAN-MIB", "wvlinkBER"), ("CODAN-MIB", "wvLinkBERWarningThresholdLow"), ("CODAN-MIB", "wvLinkBERWarningThresholdHigh"))
if mibBuilder.loadTexts: wvBerWarningStart.setStatus('current')
wvBerWarningStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 24)).setObjects(("CODAN-MIB", "wvlinkBER"), ("CODAN-MIB", "wvLinkBERWarningThresholdLow"), ("CODAN-MIB", "wvLinkBERWarningThresholdHigh"))
if mibBuilder.loadTexts: wvBerWarningStop.setStatus('current')
wvBerFatalStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 25)).setObjects(("CODAN-MIB", "wvlinkBER"), ("CODAN-MIB", "wvLinkBERErrorThresholdLow"), ("CODAN-MIB", "wvLinkBERErrorThresholdHigh"))
if mibBuilder.loadTexts: wvBerFatalStart.setStatus('current')
wvBerFatalStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 26)).setObjects(("CODAN-MIB", "wvlinkBER"), ("CODAN-MIB", "wvLinkBERErrorThresholdLow"), ("CODAN-MIB", "wvLinkBERErrorThresholdHigh"))
if mibBuilder.loadTexts: wvBerFatalStop.setStatus('current')
wvExternalInputsStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 27)).setObjects(("CODAN-MIB", "wvExternalInputTrap"))
if mibBuilder.loadTexts: wvExternalInputsStart.setStatus('current')
wvExternalInputsStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 28)).setObjects(("CODAN-MIB", "wvExternalInputTrap"))
if mibBuilder.loadTexts: wvExternalInputsStop.setStatus('current')
wvLinkUasStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 29)).setObjects(("CODAN-MIB", "wvLinkUAs"), ("CODAN-MIB", "wvLinkUASAlarmThresholdLow"), ("CODAN-MIB", "wvLinkUASAlarmThresholdHigh"))
if mibBuilder.loadTexts: wvLinkUasStart.setStatus('current')
wvLinkUasStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 30)).setObjects(("CODAN-MIB", "wvLinkUAs"), ("CODAN-MIB", "wvLinkUASAlarmThresholdLow"), ("CODAN-MIB", "wvLinkUASAlarmThresholdHigh"))
if mibBuilder.loadTexts: wvLinkUasStop.setStatus('current')
wvTftpFail = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 31)).setObjects(("CODAN-MIB", "wvTftpServerIpAddress"), ("CODAN-MIB", "wvTftpOperationCtrl"), ("CODAN-MIB", "wvTftpFileName"), ("CODAN-MIB", "wvTftpDwnlStatus"))
if mibBuilder.loadTexts: wvTftpFail.setStatus('current')
wvTftpSuccess = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 32)).setObjects(("CODAN-MIB", "wvTftpServerIpAddress"), ("CODAN-MIB", "wvTftpOperationCtrl"), ("CODAN-MIB", "wvTftpFileName"), ("CODAN-MIB", "wvTftpDwnlStatus"))
if mibBuilder.loadTexts: wvTftpSuccess.setStatus('current')
wvOduTempViolationStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 33)).setObjects(("CODAN-MIB", "wvOduTemperature"))
if mibBuilder.loadTexts: wvOduTempViolationStart.setStatus('current')
wvOduTempViolationStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 34)).setObjects(("CODAN-MIB", "wvOduTemperature"))
if mibBuilder.loadTexts: wvOduTempViolationStop.setStatus('current')
wvOduTxMuteStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 35)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvOduTxMuteStart.setStatus('current')
wvOduTxMuteStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 36)).setObjects(("CODAN-MIB", "wvOduStatus"))
if mibBuilder.loadTexts: wvOduTxMuteStop.setStatus('current')
wvIduPowerSupplyStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 37)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPowerSupplyStart.setStatus('current')
wvIduPowerSupplyStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 38)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPowerSupplyStop.setStatus('current')
wvIduConfigurationMismatch = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 39))
if mibBuilder.loadTexts: wvIduConfigurationMismatch.setStatus('current')
wvIduBankSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 40))
if mibBuilder.loadTexts: wvIduBankSwitchover.setStatus('current')
wvIduPortLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 41)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPortLoopbackStart.setStatus('current')
wvIduPortLoopbackStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 42)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPortLoopbackStop.setStatus('current')
wvIduPortBertStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 43)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPortBertStart.setStatus('current')
wvIduPortBertStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 44)).setObjects(("CODAN-MIB", "wvIduStatus"))
if mibBuilder.loadTexts: wvIduPortBertStop.setStatus('current')
wvIduHeartBit = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 45)).setObjects(("CODAN-MIB", "wvTrapKeepAliveString"))
if mibBuilder.loadTexts: wvIduHeartBit.setStatus('current')
wvAisReceiveStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 46)).setObjects(("CODAN-MIB", "wvAisPortTrap"))
if mibBuilder.loadTexts: wvAisReceiveStart.setStatus('current')
wvAisReceiveStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 47)).setObjects(("CODAN-MIB", "wvAisPortTrap"))
if mibBuilder.loadTexts: wvAisReceiveStop.setStatus('current')
wlEth10x100RxLinkUsageLowStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 48)).setObjects(("CODAN-MIB", "wvEth10_100RxLinkUsage"), ("CODAN-MIB", "wvEth10_100RxLinkUsageAlarmThresholdLow"))
if mibBuilder.loadTexts: wlEth10x100RxLinkUsageLowStart.setStatus('current')
wlEth10x100RxLinkUsageLowStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 49)).setObjects(("CODAN-MIB", "wvEth10_100RxLinkUsage"), ("CODAN-MIB", "wvEth10_100RxLinkUsageAlarmThresholdLow"))
if mibBuilder.loadTexts: wlEth10x100RxLinkUsageLowStop.setStatus('current')
wlEth10x100RxLinkUsageHighStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 50)).setObjects(("CODAN-MIB", "wvEth10_100RxLinkUsage"), ("CODAN-MIB", "wvEth10_100RxLinkUsageAlarmThresholdHigh"))
if mibBuilder.loadTexts: wlEth10x100RxLinkUsageHighStart.setStatus('current')
wlEth10x100RxLinkUsageHighStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 51)).setObjects(("CODAN-MIB", "wvEth10_100RxLinkUsage"), ("CODAN-MIB", "wvEth10_100RxLinkUsageAlarmThresholdHigh"))
if mibBuilder.loadTexts: wlEth10x100RxLinkUsageHighStop.setStatus('current')
wlEth10x100TxLinkUsageLowStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 52)).setObjects(("CODAN-MIB", "wvEth10_100TxLinkUsage"), ("CODAN-MIB", "wvEth10_100TxLinkUsageAlarmThresholdLow"))
if mibBuilder.loadTexts: wlEth10x100TxLinkUsageLowStart.setStatus('current')
wlEth10x100TxLinkUsageLowStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 53)).setObjects(("CODAN-MIB", "wvEth10_100TxLinkUsage"), ("CODAN-MIB", "wvEth10_100TxLinkUsageAlarmThresholdLow"))
if mibBuilder.loadTexts: wlEth10x100TxLinkUsageLowStop.setStatus('current')
wlEth10x100TxLinkUsageHighStart = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 54)).setObjects(("CODAN-MIB", "wvEth10_100TxLinkUsage"), ("CODAN-MIB", "wvEth10_100TxLinkUsageAlarmThresholdHigh"))
if mibBuilder.loadTexts: wlEth10x100TxLinkUsageHighStart.setStatus('current')
wlEth10x100TxLinkUsageHighStop = NotificationType((1, 3, 6, 1, 4, 1, 23304, 1, 1, 10, 0, 55)).setObjects(("CODAN-MIB", "wvEth10_100TxLinkUsage"), ("CODAN-MIB", "wvEth10_100TxLinkUsageAlarmThresholdHigh"))
if mibBuilder.loadTexts: wlEth10x100TxLinkUsageHighStop.setStatus('current')
mibBuilder.exportSymbols("CODAN-MIB", wvOemOduPartNo=wvOemOduPartNo, wvIduInternalFaultStop=wvIduInternalFaultStop, wvIduBankSwitchover=wvIduBankSwitchover, wvIduPortBertStart=wvIduPortBertStart, wvExternalInputSense=wvExternalInputSense, wvIduPowerSupplyStart=wvIduPowerSupplyStart, wvExternalInputSetting=wvExternalInputSetting, wvUserRoutesCount=wvUserRoutesCount, PYSNMP_MODULE_ID=minetMIB, wvTftpSuccess=wvTftpSuccess, wvCommunityPrivilege=wvCommunityPrivilege, wvInsertTestSignalTimePeriod=wvInsertTestSignalTimePeriod, wvUserRoutesIf=wvUserRoutesIf, wvEth10_100IMTEAlarmThresholdhLow=wvEth10_100IMTEAlarmThresholdhLow, wvlinkNoOfReceivedKBits=wvlinkNoOfReceivedKBits, wvLinkDownStart=wvLinkDownStart, wvEth10_100PortClearStats=wvEth10_100PortClearStats, wvEth10_100ECAlarmThresholdhHigh=wvEth10_100ECAlarmThresholdhHigh, wvlinkCurrentMaximumRSL=wvlinkCurrentMaximumRSL, wvLinkUasStop=wvLinkUasStop, wvRs232AsyncPortParity=wvRs232AsyncPortParity, wvInstalledPlugInHwRevision=wvInstalledPlugInHwRevision, wvAlarmControl=wvAlarmControl, wvAisReceiveStart=wvAisReceiveStart, wvRxSignalLevel=wvRxSignalLevel, wvLastSelfTestType=wvLastSelfTestType, wvAisPortTrap=wvAisPortTrap, wvSetOperationId=wvSetOperationId, wvUserRoutesHop=wvUserRoutesHop, wvLoopbackRemainingStartTime=wvLoopbackRemainingStartTime, wvLogEventLock=wvLogEventLock, wvLinkCurrentDMs=wvLinkCurrentDMs, wvLinkDMAlarmThresholdHigh=wvLinkDMAlarmThresholdHigh, wvUserRoutesTable=wvUserRoutesTable, wvBerWarningStart=wvBerWarningStart, wvLogEventStatus=wvLogEventStatus, wvLinkIntervalBER=wvLinkIntervalBER, wvlinkIntervalMaximumRSL=wvlinkIntervalMaximumRSL, wvTelemetryStatus=wvTelemetryStatus, wlEth10x100RxLinkUsageLowStart=wlEth10x100RxLinkUsageLowStart, wvEth10_100PortThroughputCtrl=wvEth10_100PortThroughputCtrl, wvLastUpdateConfigurationTimestamp=wvLastUpdateConfigurationTimestamp, wvSwModuleActiveCS=wvSwModuleActiveCS, wvSwModuleName=wvSwModuleName, wvLog=wvLog, wvIduStatus=wvIduStatus, wvLinkUasStart=wvLinkUasStart, wvSupport2T1and2E1Status=wvSupport2T1and2E1Status, wvInterfaces=wvInterfaces, wvForceAis=wvForceAis, wvLinkThresholdMeasurementInterval=wvLinkThresholdMeasurementInterval, wvIduLastSwUpdateTime=wvIduLastSwUpdateTime, wvRelays=wvRelays, wvLinkCurrentBBER=wvLinkCurrentBBER, wvLinkNCBLERAlarmThresholdLow=wvLinkNCBLERAlarmThresholdLow, wvRs232PortType=wvRs232PortType, wvLocalOduAccessStop=wvLocalOduAccessStop, wvFrequencyBand=wvFrequencyBand, wvTrapVars=wvTrapVars, wvLinkName=wvLinkName, wvEth10_100PortEntry=wvEth10_100PortEntry, wvTributaryPortIfIndex=wvTributaryPortIfIndex, wvSwModuleActiveRev=wvSwModuleActiveRev, wvExternalInputStatus=wvExternalInputStatus, wvInsertTestSignalRemainingTimePeriod=wvInsertTestSignalRemainingTimePeriod, wvLinkPerformanceAlarmsStatus=wvLinkPerformanceAlarmsStatus, wvLinkSESAlarmThresholdHigh=wvLinkSESAlarmThresholdHigh, wvIduOduCableStatus=wvIduOduCableStatus, wvTxPowerLevel=wvTxPowerLevel, wlEth10x100RxLinkUsageHighStart=wlEth10x100RxLinkUsageHighStart, wvMinTxPowerSetting=wvMinTxPowerSetting, wvLinkCurrentBLER=wvLinkCurrentBLER, wvLinkSESs=wvLinkSESs, wvLinkIntervalNumber=wvLinkIntervalNumber, wvLinkIntervalTable=wvLinkIntervalTable, wvLinkIPAddress=wvLinkIPAddress, wvlinkTotalAverageRSL=wvlinkTotalAverageRSL, wvActivateTerminalConfigurationTime=wvActivateTerminalConfigurationTime, wvGenericDiagnosticsParameterAddress=wvGenericDiagnosticsParameterAddress, wvTrapRecipientsTable=wvTrapRecipientsTable, wvActivateTerminalConfiguration=wvActivateTerminalConfiguration, wvGenericDiagnosticsParameterValue=wvGenericDiagnosticsParameterValue, wvReceiverMute=wvReceiverMute, wvLastSelfTestEntry=wvLastSelfTestEntry, wvAlarmsReportToLCDCtrl=wvAlarmsReportToLCDCtrl, wvTelephoneNumber=wvTelephoneNumber, wvIdViolationStart=wvIdViolationStart, wvEth10_100IMTEAlarmThresholdhHigh=wvEth10_100IMTEAlarmThresholdhHigh, wvLinkSettings=wvLinkSettings, wvCommunityEntry=wvCommunityEntry, wvRelayId=wvRelayId, wvLinkBBERAlarmThresholdHigh=wvLinkBBERAlarmThresholdHigh, wvIpbHwRevision=wvIpbHwRevision, wvAtpcTimeOutAlarm=wvAtpcTimeOutAlarm, wvRxPllFrequency=wvRxPllFrequency, wvTftpStartTime=wvTftpStartTime, wvEth10_100PortTable=wvEth10_100PortTable, wvLinkNCBLERAlarmThresholdHigh=wvLinkNCBLERAlarmThresholdHigh, wvEth10_100SysAgingTime=wvEth10_100SysAgingTime, wvStatusAndGauges=wvStatusAndGauges, wvLinkBERWarningThresholdHigh=wvLinkBERWarningThresholdHigh, wvPeerLanIPSubnetMask=wvPeerLanIPSubnetMask, minetMIB=minetMIB, wvLinkIntervalUASs=wvLinkIntervalUASs, wvRelayToRemoteAlarmMapping=wvRelayToRemoteAlarmMapping, wvRemoteAccessStart=wvRemoteAccessStart, wvLinkCapacity=wvLinkCapacity, wvLinkDMAlarmThresholdLow=wvLinkDMAlarmThresholdLow, wvOduTempViolationStart=wvOduTempViolationStart, wvOnePlusOneStatus=wvOnePlusOneStatus, wvAtpcRslOptimalValue=wvAtpcRslOptimalValue, wvSlipInIPSubnetMask=wvSlipInIPSubnetMask, wvSelectTrapVector=wvSelectTrapVector, wvOemIduPartNo=wvOemIduPartNo, wvOduSerialNumber=wvOduSerialNumber, wvlinkErroredBlocks=wvlinkErroredBlocks, wvLinkUASAlarmThresholdHigh=wvLinkUASAlarmThresholdHigh, wvTftpDwnlStatus=wvTftpDwnlStatus, wvComponentsRevisions=wvComponentsRevisions, wvPeerEth10_100ManIPSubnetMask=wvPeerEth10_100ManIPSubnetMask, wvReceiveSignalLowerLevelStop=wvReceiveSignalLowerLevelStop, wvIduConfigurationMismatch=wvIduConfigurationMismatch, wvBootSwRevision=wvBootSwRevision, wvInstalledPlugInPartNo=wvInstalledPlugInPartNo, wvLinkCurrentESs=wvLinkCurrentESs, wvPeerSlipInIPAddress=wvPeerSlipInIPAddress, wvEth10_100AvailCapacity=wvEth10_100AvailCapacity, wvLinkTotalESs=wvLinkTotalESs, wvOduInternalFaultStop=wvOduInternalFaultStop, wvEth10_100PortStatus=wvEth10_100PortStatus, wvOnePlusOneCompanionEthIPAddress=wvOnePlusOneCompanionEthIPAddress, wvlinkMinimumRSL=wvlinkMinimumRSL, wvLinkBLERAlarmThresholdHigh=wvLinkBLERAlarmThresholdHigh, wvResetOdu=wvResetOdu, wvLinkTotalSESs=wvLinkTotalSESs, wvEth10_100SysCtrl=wvEth10_100SysCtrl, wvExternalInputAlarmSeverity=wvExternalInputAlarmSeverity, wvBerWarningStop=wvBerWarningStop, wvEth10_100RxLinkUsage=wvEth10_100RxLinkUsage, wvlinkMaximumRSL=wvlinkMaximumRSL, wvLinkId=wvLinkId, wvLinkUAs=wvLinkUAs, wvlinkIntervalAverageRSL=wvlinkIntervalAverageRSL, wvlinkBLER=wvlinkBLER, wvWorkingFrequency=wvWorkingFrequency, wvTxPowerSetting=wvTxPowerSetting, wvEth10_100TxLinkUtilization=wvEth10_100TxLinkUtilization, wvEth10_100TxLinkUsageAlarmThresholdLow=wvEth10_100TxLinkUsageAlarmThresholdLow, wvlinkRSLLowAlarmThresholdhHigh=wvlinkRSLLowAlarmThresholdhHigh, wvLinkBERErrorThresholdLow=wvLinkBERErrorThresholdLow, wvOduPartNo=wvOduPartNo, wvSetOperationCtrl=wvSetOperationCtrl, wvSwModuleIndex=wvSwModuleIndex, FloatingPoint=FloatingPoint, wvLinkTotalBBER=wvLinkTotalBBER, wvAlarmsReportToNMSCtrl=wvAlarmsReportToNMSCtrl, wvReceiveSignalLowerLevelStart=wvReceiveSignalLowerLevelStart, wvIduSwRevision=wvIduSwRevision, wvTftpOperationCtrl=wvTftpOperationCtrl, wvMaxTxPowerSetting=wvMaxTxPowerSetting, wvLinkTotalBLER=wvLinkTotalBLER, wvOperatingSystemStatus=wvOperatingSystemStatus, wvRs232PortFlowType=wvRs232PortFlowType, wvFrontPanelUserPassword=wvFrontPanelUserPassword, wvRelayToLocalAlarmMapping=wvRelayToLocalAlarmMapping, wvFecReceiveCorrection=wvFecReceiveCorrection, wvTributaryPortTable=wvTributaryPortTable, wvTributaryPortConnection=wvTributaryPortConnection, wvAisReceiveStop=wvAisReceiveStop, wvLineLosStop=wvLineLosStop, wvLinkESAlarmThresholdLow=wvLinkESAlarmThresholdLow, wvLinkIntervalNCBLER=wvLinkIntervalNCBLER, wvTraps=wvTraps, wvLinkIntervalEntry=wvLinkIntervalEntry, wvDisableAtpcInTimeOutAlarm=wvDisableAtpcInTimeOutAlarm, wvRelayActivate=wvRelayActivate, wvLineAisStop=wvLineAisStop, wvlinkCurrentMinimumRSL=wvlinkCurrentMinimumRSL, wvRs232PortEntry=wvRs232PortEntry, wvPeerEth10_100ManIPAddress=wvPeerEth10_100ManIPAddress, wvIduOduCableFaultStart=wvIduOduCableFaultStart, wvTftpRemainingStartTime=wvTftpRemainingStartTime, wvLinkCurrentUASs=wvLinkCurrentUASs, wvLinkBLERAlarmThresholdLow=wvLinkBLERAlarmThresholdLow, wvSlipOutDestIPSubnetMask=wvSlipOutDestIPSubnetMask, wvPeerLinkIPSubnetMask=wvPeerLinkIPSubnetMask, wvExternalInputTable=wvExternalInputTable, wvEnableSpaceDiversity=wvEnableSpaceDiversity, wvOduTxMuteStop=wvOduTxMuteStop, wvE1BNC75ohm=wvE1BNC75ohm, wvlinkNCBLER=wvlinkNCBLER, wvLinkIntervalSESs=wvLinkIntervalSESs, wvEth10_100ManIPSubnetMask=wvEth10_100ManIPSubnetMask, wlEth10x100RxLinkUsageHighStop=wlEth10x100RxLinkUsageHighStop, wvEth10_100RxLinkUsageAlarmThresholdLow=wvEth10_100RxLinkUsageAlarmThresholdLow, wvLinkESAlarmThresholdHigh=wvLinkESAlarmThresholdHigh, wvPauseTransmitterTime=wvPauseTransmitterTime, wvAtpcControl=wvAtpcControl, wvLoopbackStartTime=wvLoopbackStartTime, wvUserRoutesManagement=wvUserRoutesManagement, wvlinkAverageRSLLowAlarmThresholdhHigh=wvlinkAverageRSLLowAlarmThresholdhHigh, wvConfigurationChangedStatus=wvConfigurationChangedStatus, wvRemoteTerminalStatus=wvRemoteTerminalStatus, wvOemIduSerialNumber=wvOemIduSerialNumber, wvlinkBBER=wvlinkBBER, wvLinkIntervalESs=wvLinkIntervalESs, wvLogEventEntry=wvLogEventEntry, wvlinkTotalMinimumRSL=wvlinkTotalMinimumRSL, wvLinkESs=wvLinkESs, wvTraps0=wvTraps0, wvOnePlusOneRequestSwitchOut=wvOnePlusOneRequestSwitchOut, wvLinkTotalUASs=wvLinkTotalUASs, wvUpdateTerminalConfiguration=wvUpdateTerminalConfiguration, wvExternalInputsStart=wvExternalInputsStart, wvOnePlusOneCompanionLinkIPAddress=wvOnePlusOneCompanionLinkIPAddress, wvUserRoutesDest=wvUserRoutesDest, wvRs232PortIndex=wvRs232PortIndex, wvRs232PortSpeed=wvRs232PortSpeed, wvAtpcTimeOutControl=wvAtpcTimeOutControl, wvSwModuleEntry=wvSwModuleEntry, wvTftpServerIpAddress=wvTftpServerIpAddress, wvLogEventTime=wvLogEventTime, wvOduTempViolationStop=wvOduTempViolationStop, wvResetPerformance=wvResetPerformance, wvTftpFileName=wvTftpFileName, wvResetTerminal=wvResetTerminal, wvlinkAverageRSL=wvlinkAverageRSL, wvEth10_100CSLAlarmThresholdhLow=wvEth10_100CSLAlarmThresholdhLow, wvlinkIntervalMinimumRSL=wvlinkIntervalMinimumRSL, wvlinkBER=wvlinkBER, wvSlipInIPAddress=wvSlipInIPAddress, wvlinkTotalMaximumRSL=wvlinkTotalMaximumRSL, wlEth10x100TxLinkUsageLowStart=wlEth10x100TxLinkUsageLowStart, wvDsx3CableLengthRange=wvDsx3CableLengthRange, wvLastTestSignalBER=wvLastTestSignalBER, wvEth10_100CSLAlarmThresholdhHigh=wvEth10_100CSLAlarmThresholdhHigh, wvEth10_100IMREAlarmThresholdhHigh=wvEth10_100IMREAlarmThresholdhHigh, wvInsertTestSignalRemainingStartTime=wvInsertTestSignalRemainingStartTime, wvUserRoutesType=wvUserRoutesType, wvLinkBERErrorThresholdHigh=wvLinkBERErrorThresholdHigh, wvPeerLanIPAddress=wvPeerLanIPAddress, wvLedState=wvLedState, wvEth10_100IMREAlarmThresholdhLow=wvEth10_100IMREAlarmThresholdhLow, wvCommunityId=wvCommunityId, wvIduPortLoopbackStart=wvIduPortLoopbackStart, wvSlipModemStatus=wvSlipModemStatus, wvExternalInputId=wvExternalInputId, wvSlipOutIPAddress=wvSlipOutIPAddress, wlEth10x100TxLinkUsageHighStop=wlEth10x100TxLinkUsageHighStop, wvUserRoutesMask=wvUserRoutesMask, wvExternalInputs=wvExternalInputs, wvLogEventDescription=wvLogEventDescription, wvLastSelfTestTable=wvLastSelfTestTable, wvRelayIdTrap=wvRelayIdTrap)
mibBuilder.exportSymbols("CODAN-MIB", wvAtpcTimeOutTimer=wvAtpcTimeOutTimer, wvRelayTable=wvRelayTable, wvLinkSESAlarmThresholdLow=wvLinkSESAlarmThresholdLow, wvLinkIntervalDMs=wvLinkIntervalDMs, wvChannelSpacing=wvChannelSpacing, wvEth10_100TxLinkUsage=wvEth10_100TxLinkUsage, wvLinkRouteDescription=wvLinkRouteDescription, wvSelfTestRemainingStartTime=wvSelfTestRemainingStartTime, wvIduPowerSupplyStop=wvIduPowerSupplyStop, wvSavedActiveConfiguration=wvSavedActiveConfiguration, wvExternalInputTrap=wvExternalInputTrap, wvTributaryPortEntry=wvTributaryPortEntry, wvRelayNormalState=wvRelayNormalState, wvTributaryPortInvertedAlarm=wvTributaryPortInvertedAlarm, wvLinkBERWarningThresholdLow=wvLinkBERWarningThresholdLow, wlEth10x100TxLinkUsageLowStop=wlEth10x100TxLinkUsageLowStop, wvSelfTestStartTime=wvSelfTestStartTime, wvOduInternalFaultStart=wvOduInternalFaultStart, wvEth10_100TxLinkUsageAlarmThresholdHigh=wvEth10_100TxLinkUsageAlarmThresholdHigh, wvLogEventsElapsed=wvLogEventsElapsed, wvRs232AsyncPortBits=wvRs232AsyncPortBits, wvManagement=wvManagement, wvUserRoutesIndex=wvUserRoutesIndex, wlEth10x100TxLinkUsageHighStart=wlEth10x100TxLinkUsageHighStart, ComponentRevision=ComponentRevision, wvIduAlternetSwRevision=wvIduAlternetSwRevision, wvInstalledOemPlugInPartNo=wvInstalledOemPlugInPartNo, wvExternalInputsStop=wvExternalInputsStop, wvEth10_100PortCtrl=wvEth10_100PortCtrl, wvlinkRSLLowAlarmThresholdhLow=wvlinkRSLLowAlarmThresholdhLow, wvLoopbackTimePeriod=wvLoopbackTimePeriod, wvChannelNo=wvChannelNo, wvSwModuleStandByRev=wvSwModuleStandByRev, wvExternalInputEntry=wvExternalInputEntry, wvSwModuleStandByCS=wvSwModuleStandByCS, wvClearAlarmLog=wvClearAlarmLog, WvAlarmsList=WvAlarmsList, FrontPanelPassword=FrontPanelPassword, wvInsertTestSignalStartTime=wvInsertTestSignalStartTime, wvBerFatalStop=wvBerFatalStop, wvIduPartNo=wvIduPartNo, wvFadeMargin=wvFadeMargin, wvEth10_100PortIfIndex=wvEth10_100PortIfIndex, wvBerFatalStart=wvBerFatalStart, wvLinkIntervalBBER=wvLinkIntervalBBER, wvTributaryPortName=wvTributaryPortName, wvLinkBBERAlarmThresholdLow=wvLinkBBERAlarmThresholdLow, wvEth10_100ChannelSpacing=wvEth10_100ChannelSpacing, wvLanIPAddress=wvLanIPAddress, wvPeerLinkIPAddress=wvPeerLinkIPAddress, wvOduTemperature=wvOduTemperature, wvLinkCurrentSESs=wvLinkCurrentSESs, wvPeerSlipInIPSubnetMask=wvPeerSlipInIPSubnetMask, WvLoopbacksList=WvLoopbacksList, wvIduPortLoopbackStop=wvIduPortLoopbackStop, wvPerformance=wvPerformance, wvTrapRecipientsIp=wvTrapRecipientsIp, wvAtpcRslLowerThreshold=wvAtpcRslLowerThreshold, wvLinkCurrentBER=wvLinkCurrentBER, wvLosPortTrap=wvLosPortTrap, wvIduPortBertStop=wvIduPortBertStop, wlEth10x100RxLinkUsageLowStop=wlEth10x100RxLinkUsageLowStop, wvlinkCurrentAverageRSL=wvlinkCurrentAverageRSL, wvNoOfAlertsOnLCD=wvNoOfAlertsOnLCD, wvEth10_100ManIPAddress=wvEth10_100ManIPAddress, wvIduHeartBit=wvIduHeartBit, wvTftpNoOfRetries=wvTftpNoOfRetries, wvInsertTestSignalLine=wvInsertTestSignalLine, wvSelfTestType=wvSelfTestType, wvlinkNotCorrectedErroredBlocks=wvlinkNotCorrectedErroredBlocks, wvIdViolationStop=wvIdViolationStop, wvRs232AsyncPortStopBits=wvRs232AsyncPortStopBits, wvlinkCurrentTimeElapsed=wvlinkCurrentTimeElapsed, wvIduOduCableFaultStop=wvIduOduCableFaultStop, wvSetOperationOwner=wvSetOperationOwner, wvFecNoOfCorrectableBytes=wvFecNoOfCorrectableBytes, wvRs232PortTable=wvRs232PortTable, wvPeerSlipOutIPAddress=wvPeerSlipOutIPAddress, wvLinkUASAlarmThresholdLow=wvLinkUASAlarmThresholdLow, wvLinkTotalBER=wvLinkTotalBER, wvLastSelfTestStartTime=wvLastSelfTestStartTime, wvCommunityName=wvCommunityName, wvlinkInstantaneousBER=wvlinkInstantaneousBER, wvIduHwRevision=wvIduHwRevision, wvOemOduSerialNumber=wvOemOduSerialNumber, wvLoopbackType=wvLoopbackType, wvRelayOperation=wvRelayOperation, wvRelayStatus=wvRelayStatus, wvModulation=wvModulation, wvLinkDMs=wvLinkDMs, wvLinkIPSubnetMask=wvLinkIPSubnetMask, wvLoopbackRemainingTimePeriod=wvLoopbackRemainingTimePeriod, wvEth10_100ThresholdMeasurementInterval=wvEth10_100ThresholdMeasurementInterval, wvIduSerialNumber=wvIduSerialNumber, wvFrontPanelAdminPassword=wvFrontPanelAdminPassword, wvLinkTotalNCBLER=wvLinkTotalNCBLER, wvFecEnabled=wvFecEnabled, wvTransmitterMute=wvTransmitterMute, wvOduSwRevision=wvOduSwRevision, wvOduLastSwUpdateTime=wvOduLastSwUpdateTime, wvTests=wvTests, wvEth10_100RxLinkUsageAlarmThresholdHigh=wvEth10_100RxLinkUsageAlarmThresholdHigh, wvTrapKeepAlivePeriod=wvTrapKeepAlivePeriod, wvDialPrefixString=wvDialPrefixString, wvLocalOduAccessStart=wvLocalOduAccessStart, wvLinkPerformanceCountTime=wvLinkPerformanceCountTime, wvTrapKeepAliveString=wvTrapKeepAliveString, wvSlipOutDestIPAddress=wvSlipOutDestIPAddress, wvRelayStop=wvRelayStop, wvAtpcRslUpperThreshold=wvAtpcRslUpperThreshold, wvTftpFail=wvTftpFail, wvOemId=wvOemId, wvLinkDownStop=wvLinkDownStop, wvSlipConnection=wvSlipConnection, wvLinkCurrentNCBLER=wvLinkCurrentNCBLER, wvPauseTransmitterControl=wvPauseTransmitterControl, wvLanIPSubnetMask=wvLanIPSubnetMask, wvAtpcTimeOutAlarmLevel=wvAtpcTimeOutAlarmLevel, wvTrapRecipientsId=wvTrapRecipientsId, wvRelayEntry=wvRelayEntry, wvLinkValidIntervals=wvLinkValidIntervals, wvlinkNoOfErrors=wvlinkNoOfErrors, wvTributaryPortConnectionsMode=wvTributaryPortConnectionsMode, wvSlipInDestIPAddress=wvSlipInDestIPAddress, wvInitString=wvInitString, wvCommunityTable=wvCommunityTable, wvOduStatus=wvOduStatus, wvOduHwRevision=wvOduHwRevision, wvOduTxMuteStart=wvOduTxMuteStart, wvLogEventTable=wvLogEventTable, wvUserRoutesEntry=wvUserRoutesEntry, wvLinkIntervalBLER=wvLinkIntervalBLER, wvRemoteAccessStop=wvRemoteAccessStop, wvOperatingFrequency=wvOperatingFrequency, wvTrapKeepAliveVarsSelect=wvTrapKeepAliveVarsSelect, wvSwModuleTable=wvSwModuleTable, wvConfiguration=wvConfiguration, wvSlipOutIPSubnetMask=wvSlipOutIPSubnetMask, wvOnePlusOneConnectorType=wvOnePlusOneConnectorType, wvSlipInDestIPSubnetMask=wvSlipInDestIPSubnetMask, wvLineLosStart=wvLineLosStart, wvLineAisStart=wvLineAisStart, wvEth10_100RxLinkUtilization=wvEth10_100RxLinkUtilization, wvSecurityStatus=wvSecurityStatus, wvTrapRecipientsEntry=wvTrapRecipientsEntry, wvPeerSlipOutIPSubnetMask=wvPeerSlipOutIPSubnetMask, wvlinkAverageRSLLowAlarmThresholdhLow=wvlinkAverageRSLLowAlarmThresholdhLow, wvIduInternalFaultStart=wvIduInternalFaultStart, wvEth10_100ECAlarmThresholdhLow=wvEth10_100ECAlarmThresholdhLow, wvLinkTotalDMs=wvLinkTotalDMs, wvFrontPanelSupervisorPassword=wvFrontPanelSupervisorPassword, wvLastTestSignalTime=wvLastTestSignalTime, wvModemAfc=wvModemAfc, wvLastSelfTestStatus=wvLastSelfTestStatus, wvRelayStart=wvRelayStart)
