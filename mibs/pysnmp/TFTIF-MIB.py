#
# PySNMP MIB module TFTIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TFTIF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, MibIdentifier, Gauge32, IpAddress, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, TimeTicks, Integer32, Counter64, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Gauge32", "IpAddress", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "TimeTicks", "Integer32", "Counter64", "NotificationType", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MemAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

mcmTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3))
mcmTFTPParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1))
mcmTFTPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPServerIpAddr.setStatus('mandatory')
mcmTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPFileName.setStatus('mandatory')
mcmTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPTimeOut.setStatus('mandatory')
mcmTFTPRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPRetransmissions.setStatus('mandatory')
mcmTFTPDownload = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upldDefault", 1), ("upldSpecific", 2), ("dnldDefault", 3), ("dnldSpecific", 4), ("disabled", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmTFTPDownload.setStatus('deprecated')
mcmTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upldDefault", 1), ("upldSpecific", 2), ("dnldDefault", 3), ("dnldSpecific", 4), ("disabled", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmTFTPStart.setStatus('mandatory')
mcmTFTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPPortNumber.setStatus('mandatory')
mcmTFTPConfigUploadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTFTPConfigUploadBank.setStatus('mandatory')
nvmTFTPParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2))
nvmTFTPServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPServerIpAddr.setStatus('mandatory')
nvmTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPFileName.setStatus('mandatory')
nvmTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPTimeOut.setStatus('mandatory')
nvmTFTPRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPRetransmissions.setStatus('mandatory')
nvmTFTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPPortNumber.setStatus('mandatory')
nvmTFTPConfigUploadBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bank3", 1), ("bank4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmTFTPConfigUploadBank.setStatus('mandatory')
mcmTFTPStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 3))
mcmTFTPCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("retrieving-file", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPCurrentState.setStatus('mandatory')
mcmTFTPErrorStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4))
mcmTFTPLastErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("idle", 1), ("download-success", 2), ("out-of-memory", 4), ("flash-error", 5), ("download-failed", 6), ("upload-failed", 7), ("upload-success", 8), ("chksum-error", 11), ("transferring-file", 13), ("protocol-error", 14), ("server-error", 15), ("timeout", 16), ("connection-error", 17), ("bad-file", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastErrorStatus.setStatus('mandatory')
mcmTFTPLastServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastServerIpAddr.setStatus('mandatory')
mcmTFTPLastFileName = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastFileName.setStatus('mandatory')
mcmTFTPTransferBank = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("toboot", 2), ("toBank1", 3), ("toBank2", 4), ("toBank3", 5), ("toBank4", 6), ("fromBank3", 7), ("fromBank4", 8), ("fromDebug", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPTransferBank.setStatus('mandatory')
mcmTFTPLastPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTFTPLastPortNumber.setStatus('mandatory')
mcmTFTPDownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
mcmTFTPUploadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
mcmTFTPDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
mcmTFTPUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 3) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("TFTIF-MIB", "mcmTFTPServerIpAddr"), ("TFTIF-MIB", "mcmTFTPFileName"))
mibBuilder.exportSymbols("TFTIF-MIB", nvmTFTPRetransmissions=nvmTFTPRetransmissions, mcmTFTPUploadFail=mcmTFTPUploadFail, mcmTFTPStart=mcmTFTPStart, mcmTFTPPortNumber=mcmTFTPPortNumber, mcmTFTPStatusGroup=mcmTFTPStatusGroup, nvmTFTPTimeOut=nvmTFTPTimeOut, mcmTFTPTimeOut=mcmTFTPTimeOut, nvmTFTPParamGroup=nvmTFTPParamGroup, nvmTFTPFileName=nvmTFTPFileName, nvmTFTPConfigUploadBank=nvmTFTPConfigUploadBank, mcmTFTPLastPortNumber=mcmTFTPLastPortNumber, mcmTFTP=mcmTFTP, mcmTFTPDownloadSuccess=mcmTFTPDownloadSuccess, mcmTFTPTransferBank=mcmTFTPTransferBank, mcmTFTPFileName=mcmTFTPFileName, mcmTFTPLastErrorStatus=mcmTFTPLastErrorStatus, mcmTFTPLastServerIpAddr=mcmTFTPLastServerIpAddr, mcmTFTPCurrentState=mcmTFTPCurrentState, nvmTFTPPortNumber=nvmTFTPPortNumber, nvmTFTPServerIpAddr=nvmTFTPServerIpAddr, mcmTFTPParamGroup=mcmTFTPParamGroup, mcmTFTPUploadSuccess=mcmTFTPUploadSuccess, mcmTFTPLastFileName=mcmTFTPLastFileName, mcmTFTPConfigUploadBank=mcmTFTPConfigUploadBank, mcmTFTPDownload=mcmTFTPDownload, mcmTFTPDownloadFail=mcmTFTPDownloadFail, mcmTFTPRetransmissions=mcmTFTPRetransmissions, MemAddress=MemAddress, mcmTFTPServerIpAddr=mcmTFTPServerIpAddr, mcmTFTPErrorStatusGroup=mcmTFTPErrorStatusGroup)
