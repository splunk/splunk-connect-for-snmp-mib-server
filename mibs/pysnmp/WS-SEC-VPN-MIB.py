#
# PySNMP MIB module WS-SEC-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WS-SEC-VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:30:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, IpAddress, Unsigned32, MibIdentifier, Counter64, ObjectIdentity, iso, Bits, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Unsigned32", "MibIdentifier", "Counter64", "ObjectIdentity", "iso", "Bits", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "TimeTicks")
TextualConvention, DateAndTime, DisplayString, PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "PhysAddress", "TruthValue")
wsSec, = mibBuilder.importSymbols("WS-SMI", "wsSec")
wsSecVpnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 14, 6, 1))
wsSecVpnMib.setRevisions(('2006-07-14 18:26',))
if mibBuilder.loadTexts: wsSecVpnMib.setLastUpdated('200607131648Z')
if mibBuilder.loadTexts: wsSecVpnMib.setOrganization('Symbol Technoliges')
class AbbrRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 6))
    namedValues = NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6))

wsSecIKEScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 1))
wsSecIKEKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecIKEKeepAlive.setStatus('current')
wsSecISAKMPLocalIdentity = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAddress", 1), ("distinguishedName", 2), ("domainName", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecISAKMPLocalIdentity.setStatus('current')
wsSecIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2), )
if mibBuilder.loadTexts: wsSecIKEPolicyTable.setStatus('current')
wsSecIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecIKEPolicyPriority"))
if mibBuilder.loadTexts: wsSecIKEPolicyEntry.setStatus('current')
wsSecIKEPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10001))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKEPolicyPriority.setStatus('current')
wsSecIKEPolicyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("des", 1), ("tripleDes", 2), ("aes", 3), ("aes192", 4), ("aes256", 5))).clone('des')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicyEncryption.setStatus('current')
wsSecIKEPolicyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sha1", 1), ("md5", 2))).clone('sha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicyHash.setStatus('current')
wsSecIKEPolicyAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rsaSig", 1), ("preSharedKey", 2))).clone('rsaSig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicyAuthType.setStatus('current')
wsSecIKEPolicyDHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5))).clone('group1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicyDHGroup.setStatus('current')
wsSecIKEPolicySaLifeTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483646))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicySaLifeTimeSec.setStatus('current')
wsSecIKEPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 2, 1, 7), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecIKEPolicyRowStatus.setStatus('current')
wsSecPreSharedKeyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3), )
if mibBuilder.loadTexts: wsSecPreSharedKeyTable.setStatus('current')
wsSecPreSharedKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecPreSharedKeyIKEPeer"))
if mibBuilder.loadTexts: wsSecPreSharedKeyEntry.setStatus('current')
wsSecPreSharedKeyIKEPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecPreSharedKeyIKEPeer.setStatus('current')
wsSecPreSharedKeyIKEPeerIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAddress", 1), ("distinguishedName", 2), ("domainName", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecPreSharedKeyIKEPeerIdentity.setStatus('current')
wsSecPreSharedKeyIKEPeerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecPreSharedKeyIKEPeerKey.setStatus('current')
wsSecPreSharedKeyIKEAggressive = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecPreSharedKeyIKEAggressive.setStatus('current')
wsSecPreSharedKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 3, 1, 5), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecPreSharedKeyRowStatus.setStatus('current')
wsSecTransformSetTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4), )
if mibBuilder.loadTexts: wsSecTransformSetTable.setStatus('current')
wsSecTransformSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecTransformSetName"))
if mibBuilder.loadTexts: wsSecTransformSetEntry.setStatus('current')
wsSecTransformSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecTransformSetName.setStatus('current')
wsSecTransformSetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transport", 1), ("tunnel", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecTransformSetMode.setStatus('current')
wsSecTransformSetAHAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ahMd5Hmac", 1), ("ahShaHmac", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecTransformSetAHAuth.setStatus('current')
wsSecTransformSetEspEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("espDes", 3), ("esp3Des", 4), ("espAes", 5), ("espAes192", 6), ("espAes256", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecTransformSetEspEncr.setStatus('current')
wsSecTransformSetEspAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("espMd5Hmac", 8), ("espShaHmac", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecTransformSetEspAuth.setStatus('current')
wsSecTransformSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 4, 1, 6), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecTransformSetRowStatus.setStatus('current')
wsSecIPSecCfgScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 5))
wsSecVpnSALifeTimeSec = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(90, 2147483646))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecVpnSALifeTimeSec.setStatus('current')
wsSecVpnSALifeTimeKB = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 2147483646))).setUnits('KBytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecVpnSALifeTimeKB.setStatus('current')
wsSecLocalIPAddrPoolTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 6), )
if mibBuilder.loadTexts: wsSecLocalIPAddrPoolTable.setStatus('current')
wsSecLocalIPAddrPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 6, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecLocalIPAddrPoolAddrRangeStart"), (0, "WS-SEC-VPN-MIB", "wsSecLocalIPAddrPoolAddrRangeEnd"))
if mibBuilder.loadTexts: wsSecLocalIPAddrPoolEntry.setStatus('current')
wsSecLocalIPAddrPoolAddrRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecLocalIPAddrPoolAddrRangeStart.setStatus('current')
wsSecLocalIPAddrPoolAddrRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecLocalIPAddrPoolAddrRangeEnd.setStatus('current')
wsSecLocalIPAddrPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 6, 1, 3), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecLocalIPAddrPoolRowStatus.setStatus('current')
wsSecLocalIPAddressPoolScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 7))
wsSecClientDNSServerIP = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecClientDNSServerIP.setStatus('current')
wsSecClientWinServerIP = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecClientWinServerIP.setStatus('current')
wsSecCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8), )
if mibBuilder.loadTexts: wsSecCryptoMapTable.setStatus('current')
wsSecCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecCryptoMapSequenceNum"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapName"))
if mibBuilder.loadTexts: wsSecCryptoMapEntry.setStatus('current')
wsSecCryptoMapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapSequenceNum.setStatus('current')
wsSecCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapName.setStatus('current')
wsSecCryptoMapACLId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapACLId.setStatus('current')
wsSecCryptoMapSALifeTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(90, 2147483646))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapSALifeTimeSec.setStatus('current')
wsSecCryptoMapSALifeTimeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 2147483646))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapSALifeTimeKB.setStatus('current')
wsSecCryptoMapPFS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("none", 0), ("group1", 1), ("group2", 2), ("group5", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapPFS.setStatus('current')
wsSecCryptoMapSAPerHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapSAPerHostEnable.setStatus('current')
wsSecCryptoMapModeCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapModeCfgEnable.setStatus('current')
wsSecCryptoMapLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapLocalId.setStatus('current')
wsSecCryptoMapLocalIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dn", 2), ("hostName", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapLocalIdType.setStatus('current')
wsSecCryptoMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapMode.setStatus('current')
wsSecCryptoMapRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xauth", 1), ("l2tp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapRemoteType.setStatus('current')
wsSecCryptoMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 8, 1, 13), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapRowStatus.setStatus('current')
wsSecCryptoMapPeerTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9), )
if mibBuilder.loadTexts: wsSecCryptoMapPeerTable.setStatus('current')
wsSecCryptoMapPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecCryptoMapPeerSequenceNum"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapPeerName"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapPeerIKEPeer"))
if mibBuilder.loadTexts: wsSecCryptoMapPeerEntry.setStatus('current')
wsSecCryptoMapPeerSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapPeerSequenceNum.setStatus('current')
wsSecCryptoMapPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapPeerName.setStatus('current')
wsSecCryptoMapPeerIKEPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapPeerIKEPeer.setStatus('current')
wsSecCryptoMapPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 9, 1, 4), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapPeerRowStatus.setStatus('current')
wsSecCryptoMapManualSaTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10), )
if mibBuilder.loadTexts: wsSecCryptoMapManualSaTable.setStatus('current')
wsSecCryptoMapManualSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaCryptoMapSeqNum"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaCryptoMapName"))
if mibBuilder.loadTexts: wsSecCryptoMapManualSaEntry.setStatus('current')
wsSecCryptoMapManualSaCryptoMapSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaCryptoMapSeqNum.setStatus('current')
wsSecCryptoMapManualSaCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaCryptoMapName.setStatus('current')
wsSecCryptoMapManualSaIKEPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaIKEPeer.setStatus('current')
wsSecCryptoMapManualSaAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaAclId.setStatus('current')
wsSecCryptoMapManualSaInAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaInAhSpi.setStatus('current')
wsSecCryptoMapManualSaInAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaInAuthKey.setStatus('current')
wsSecCryptoMapManualSaOutAhSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaOutAhSpi.setStatus('current')
wsSecCryptoMapManualSaOutAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaOutAuthKey.setStatus('current')
wsSecCryptoMapManualSaInEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaInEspSpi.setStatus('current')
wsSecCryptoMapManualSaInEspCipherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 10), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaInEspCipherKey.setStatus('current')
wsSecCryptoMapManualSaOutEspSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaOutEspSpi.setStatus('current')
wsSecCryptoMapManualSaOutEspCipherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 12), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaOutEspCipherKey.setStatus('current')
wsSecCryptoMapManualSaTSName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaTSName.setStatus('current')
wsSecCryptoMapManualSaAhOrEsp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("ah", 1), ("esp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaAhOrEsp.setStatus('current')
wsSecCryptoMapManualSaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 10, 1, 15), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapManualSaRowStatus.setStatus('current')
wsSecCryptoMapTransformSetTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11), )
if mibBuilder.loadTexts: wsSecCryptoMapTransformSetTable.setStatus('current')
wsSecCryptoMapTransformSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecCryptoMapTransformCryptoMapSetSeqNum"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapTransformSetCryptoMapName"), (0, "WS-SEC-VPN-MIB", "wsSecCryptoMapTransformSetName"))
if mibBuilder.loadTexts: wsSecCryptoMapTransformSetEntry.setStatus('current')
wsSecCryptoMapTransformCryptoMapSetSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapTransformCryptoMapSetSeqNum.setStatus('current')
wsSecCryptoMapTransformSetCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapTransformSetCryptoMapName.setStatus('current')
wsSecCryptoMapTransformSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapTransformSetName.setStatus('current')
wsSecCryptoMapTransformSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 11, 1, 4), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecCryptoMapTransformSetRowStatus.setStatus('current')
wsSecCryptoMapIfMappingTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 12), )
if mibBuilder.loadTexts: wsSecCryptoMapIfMappingTable.setStatus('current')
wsSecCryptoMapIfMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 12, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecCryptoMapIfMappingCryptoMapName"))
if mibBuilder.loadTexts: wsSecCryptoMapIfMappingEntry.setStatus('current')
wsSecCryptoMapIfMappingCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecCryptoMapIfMappingCryptoMapName.setStatus('current')
wsSecCryptoMapIfMappingIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecCryptoMapIfMappingIfName.setStatus('current')
wsSecRadiusSvrTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13), )
if mibBuilder.loadTexts: wsSecRadiusSvrTable.setStatus('current')
wsSecRadiusSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecRadiusSvrIPAddr"))
if mibBuilder.loadTexts: wsSecRadiusSvrEntry.setStatus('current')
wsSecRadiusSvrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecRadiusSvrIPAddr.setStatus('current')
wsSecRadiusSvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecRadiusSvrType.setStatus('current')
wsSecRadiusSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecRadiusSvrPort.setStatus('current')
wsSecRadiusSvrSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecRadiusSvrSharedSecret.setStatus('current')
wsSecRadiusSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 13, 1, 5), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecRadiusSvrRowStatus.setStatus('current')
wsSecRadiusSvrScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 14))
wsSecRadiusSvrNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecRadiusSvrNasIdentifier.setStatus('current')
wsSecVpnUserTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 15), )
if mibBuilder.loadTexts: wsSecVpnUserTable.setStatus('current')
wsSecVpnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 15, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecVpnUserName"))
if mibBuilder.loadTexts: wsSecVpnUserEntry.setStatus('current')
wsSecVpnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecVpnUserName.setStatus('current')
wsSecVpnUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecVpnUserPassword.setStatus('current')
wsSecVpnUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 15, 1, 3), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsSecVpnUserRowStatus.setStatus('current')
wsSecVpnAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 16))
wsSecVPNAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("localUserTable", 2), ("radiusSvr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecVPNAuthMethod.setStatus('current')
wsSecIKESaStatsClearScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 17))
wsSecIpSecClearPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecIpSecClearPeerIpAddr.setStatus('current')
wsSecClearAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearIPSecSa", 1), ("clearIKESa", 2), ("clearIPSecSaAndIKESa", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsSecClearAction.setStatus('current')
wsSecIPSecSaStatusTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18), )
if mibBuilder.loadTexts: wsSecIPSecSaStatusTable.setStatus('current')
wsSecIPSecSaStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecIPSecSaStatusIndex"))
if mibBuilder.loadTexts: wsSecIPSecSaStatusEntry.setStatus('current')
wsSecIPSecSaStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusIndex.setStatus('current')
wsSecIPSecSaStatusLocalPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusLocalPeer.setStatus('current')
wsSecIPSecSaStatusRemotePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusRemotePeer.setStatus('current')
wsSecIPSecSaStatusEspSpiIn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusEspSpiIn.setStatus('current')
wsSecIPSecSaStatusEspSpiOut = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusEspSpiOut.setStatus('current')
wsSecIPSecSaStatusAhSpiIn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusAhSpiIn.setStatus('current')
wsSecIPSecSaStatusAhSpiOut = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusAhSpiOut.setStatus('current')
wsSecIPSecSaStatusAlgthmCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusAlgthmCipher.setStatus('current')
wsSecIPSecSaStatusAlgthmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 18, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIPSecSaStatusAlgthmMac.setStatus('current')
wsSecIKESaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19), )
if mibBuilder.loadTexts: wsSecIKESaStatsTable.setStatus('current')
wsSecIKESaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1), ).setIndexNames((0, "WS-SEC-VPN-MIB", "wsSecIKESaStatIndex"))
if mibBuilder.loadTexts: wsSecIKESaStatsEntry.setStatus('current')
wsSecIKESaStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatIndex.setStatus('current')
wsSecIKESaStatsPhase1Done = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsPhase1Done.setStatus('current')
wsSecIKESaStatsNumOfNegotions = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsNumOfNegotions.setStatus('current')
wsSecIKESaStatsNumOfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsNumOfBytes.setStatus('current')
wsSecIKESaStatsCreateDate = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsCreateDate.setStatus('current')
wsSecIKESaStatsEncrptAlgthm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsEncrptAlgthm.setStatus('current')
wsSecIKESaStatsHashAlgthm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsHashAlgthm.setStatus('current')
wsSecIKESaStatsPrfAlgthm = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsPrfAlgthm.setStatus('current')
wsSecIKESaStatsLocalIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsLocalIdentity.setStatus('current')
wsSecIKESaStatsRemoteIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 19, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecIKESaStatsRemoteIdentity.setStatus('current')
wsSecVPNScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 20))
wsSecVPNSetError = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 20, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSecVPNSetError.setStatus('current')
wsSecVpnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 21))
wsSecVpnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 21, 1))
wsSecVpnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 21, 1, 1)).setObjects(("WS-SEC-VPN-MIB", "wsSecVpnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsSecVpnCompliance = wsSecVpnCompliance.setStatus('current')
wsSecVpnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 22))
wsSecVpnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 6, 1, 23)).setObjects(("WS-SEC-VPN-MIB", "wsSecIKEPolicyRowStatus"), ("WS-SEC-VPN-MIB", "wsSecIKEKeepAlive"), ("WS-SEC-VPN-MIB", "wsSecTransformSetName"), ("WS-SEC-VPN-MIB", "wsSecTransformSetMode"), ("WS-SEC-VPN-MIB", "wsSecTransformSetEspEncr"), ("WS-SEC-VPN-MIB", "wsSecTransformSetEspAuth"), ("WS-SEC-VPN-MIB", "wsSecTransformSetRowStatus"), ("WS-SEC-VPN-MIB", "wsSecVpnSALifeTimeSec"), ("WS-SEC-VPN-MIB", "wsSecVpnSALifeTimeKB"), ("WS-SEC-VPN-MIB", "wsSecClientDNSServerIP"), ("WS-SEC-VPN-MIB", "wsSecClientWinServerIP"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapSequenceNum"), ("WS-SEC-VPN-MIB", "wsSecPreSharedKeyRowStatus"), ("WS-SEC-VPN-MIB", "wsSecTransformSetAHAuth"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapACLId"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapPFS"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapSAPerHostEnable"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapRowStatus"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapPeerRowStatus"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaCryptoMapSeqNum"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaCryptoMapName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaIKEPeer"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaAclId"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaInAhSpi"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaOutAhSpi"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaInEspSpi"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaOutEspSpi"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaRowStatus"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrIPAddr"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrType"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrPort"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrSharedSecret"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrRowStatus"), ("WS-SEC-VPN-MIB", "wsSecVpnUserName"), ("WS-SEC-VPN-MIB", "wsSecVpnUserPassword"), ("WS-SEC-VPN-MIB", "wsSecVpnUserRowStatus"), ("WS-SEC-VPN-MIB", "wsSecClearAction"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusIndex"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusLocalPeer"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusRemotePeer"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusEspSpiOut"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusAhSpiIn"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusAhSpiOut"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusAlgthmCipher"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusAlgthmMac"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatIndex"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsNumOfNegotions"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsNumOfBytes"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsCreateDate"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsEncrptAlgthm"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsHashAlgthm"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsPrfAlgthm"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsLocalIdentity"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsRemoteIdentity"), ("WS-SEC-VPN-MIB", "wsSecIKESaStatsPhase1Done"), ("WS-SEC-VPN-MIB", "wsSecVPNAuthMethod"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaTSName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapModeCfgEnable"), ("WS-SEC-VPN-MIB", "wsSecVPNSetError"), ("WS-SEC-VPN-MIB", "wsSecRadiusSvrNasIdentifier"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicySaLifeTimeSec"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicyDHGroup"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicyAuthType"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicyHash"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicyEncryption"), ("WS-SEC-VPN-MIB", "wsSecIKEPolicyPriority"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapIfMappingCryptoMapName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapIfMappingIfName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapTransformSetRowStatus"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapTransformSetName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapTransformSetCryptoMapName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapPeerIKEPeer"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapPeerName"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapPeerSequenceNum"), ("WS-SEC-VPN-MIB", "wsSecLocalIPAddrPoolRowStatus"), ("WS-SEC-VPN-MIB", "wsSecLocalIPAddrPoolAddrRangeEnd"), ("WS-SEC-VPN-MIB", "wsSecLocalIPAddrPoolAddrRangeStart"), ("WS-SEC-VPN-MIB", "wsSecPreSharedKeyIKEAggressive"), ("WS-SEC-VPN-MIB", "wsSecPreSharedKeyIKEPeerKey"), ("WS-SEC-VPN-MIB", "wsSecPreSharedKeyIKEPeerIdentity"), ("WS-SEC-VPN-MIB", "wsSecPreSharedKeyIKEPeer"), ("WS-SEC-VPN-MIB", "wsSecISAKMPLocalIdentity"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapTransformCryptoMapSetSeqNum"), ("WS-SEC-VPN-MIB", "wsSecIPSecSaStatusEspSpiIn"), ("WS-SEC-VPN-MIB", "wsSecIpSecClearPeerIpAddr"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaAhOrEsp"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaOutEspCipherKey"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaInEspCipherKey"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaOutAuthKey"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapSALifeTimeSec"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapSALifeTimeKB"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapManualSaInAuthKey"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapMode"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapRemoteType"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapLocalIdType"), ("WS-SEC-VPN-MIB", "wsSecCryptoMapLocalId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsSecVpnGroup = wsSecVpnGroup.setStatus('current')
mibBuilder.exportSymbols("WS-SEC-VPN-MIB", wsSecCryptoMapTable=wsSecCryptoMapTable, wsSecCryptoMapManualSaRowStatus=wsSecCryptoMapManualSaRowStatus, wsSecPreSharedKeyIKEPeerKey=wsSecPreSharedKeyIKEPeerKey, wsSecTransformSetEspAuth=wsSecTransformSetEspAuth, wsSecCryptoMapSequenceNum=wsSecCryptoMapSequenceNum, wsSecVpnUserTable=wsSecVpnUserTable, wsSecVpnMib=wsSecVpnMib, wsSecIKEPolicyAuthType=wsSecIKEPolicyAuthType, wsSecIPSecSaStatusAhSpiIn=wsSecIPSecSaStatusAhSpiIn, wsSecCryptoMapManualSaTable=wsSecCryptoMapManualSaTable, wsSecCryptoMapRowStatus=wsSecCryptoMapRowStatus, wsSecIPSecSaStatusIndex=wsSecIPSecSaStatusIndex, wsSecRadiusSvrRowStatus=wsSecRadiusSvrRowStatus, wsSecRadiusSvrTable=wsSecRadiusSvrTable, wsSecLocalIPAddrPoolEntry=wsSecLocalIPAddrPoolEntry, wsSecCryptoMapManualSaEntry=wsSecCryptoMapManualSaEntry, wsSecRadiusSvrNasIdentifier=wsSecRadiusSvrNasIdentifier, wsSecIKESaStatIndex=wsSecIKESaStatIndex, PYSNMP_MODULE_ID=wsSecVpnMib, wsSecCryptoMapManualSaTSName=wsSecCryptoMapManualSaTSName, wsSecRadiusSvrIPAddr=wsSecRadiusSvrIPAddr, wsSecVPNSetError=wsSecVPNSetError, wsSecIKEPolicySaLifeTimeSec=wsSecIKEPolicySaLifeTimeSec, wsSecPreSharedKeyRowStatus=wsSecPreSharedKeyRowStatus, wsSecIKESaStatsNumOfBytes=wsSecIKESaStatsNumOfBytes, wsSecCryptoMapPeerTable=wsSecCryptoMapPeerTable, wsSecClientWinServerIP=wsSecClientWinServerIP, wsSecCryptoMapTransformSetTable=wsSecCryptoMapTransformSetTable, wsSecVpnCompliances=wsSecVpnCompliances, wsSecLocalIPAddrPoolAddrRangeStart=wsSecLocalIPAddrPoolAddrRangeStart, wsSecIPSecSaStatusRemotePeer=wsSecIPSecSaStatusRemotePeer, wsSecCryptoMapEntry=wsSecCryptoMapEntry, wsSecTransformSetMode=wsSecTransformSetMode, wsSecIPSecSaStatusEspSpiOut=wsSecIPSecSaStatusEspSpiOut, wsSecCryptoMapManualSaAclId=wsSecCryptoMapManualSaAclId, wsSecVpnConformance=wsSecVpnConformance, wsSecCryptoMapPFS=wsSecCryptoMapPFS, wsSecCryptoMapIfMappingEntry=wsSecCryptoMapIfMappingEntry, wsSecCryptoMapPeerName=wsSecCryptoMapPeerName, wsSecPreSharedKeyIKEPeerIdentity=wsSecPreSharedKeyIKEPeerIdentity, wsSecCryptoMapManualSaInAhSpi=wsSecCryptoMapManualSaInAhSpi, wsSecIKESaStatsHashAlgthm=wsSecIKESaStatsHashAlgthm, wsSecIKESaStatsNumOfNegotions=wsSecIKESaStatsNumOfNegotions, wsSecCryptoMapLocalId=wsSecCryptoMapLocalId, wsSecPreSharedKeyIKEAggressive=wsSecPreSharedKeyIKEAggressive, wsSecIPSecCfgScalars=wsSecIPSecCfgScalars, wsSecClearAction=wsSecClearAction, wsSecCryptoMapPeerRowStatus=wsSecCryptoMapPeerRowStatus, wsSecCryptoMapTransformSetName=wsSecCryptoMapTransformSetName, wsSecLocalIPAddrPoolTable=wsSecLocalIPAddrPoolTable, wsSecVpnCompliance=wsSecVpnCompliance, wsSecCryptoMapManualSaOutAuthKey=wsSecCryptoMapManualSaOutAuthKey, wsSecCryptoMapManualSaAhOrEsp=wsSecCryptoMapManualSaAhOrEsp, wsSecIKEPolicyEntry=wsSecIKEPolicyEntry, wsSecLocalIPAddrPoolRowStatus=wsSecLocalIPAddrPoolRowStatus, wsSecCryptoMapManualSaInEspSpi=wsSecCryptoMapManualSaInEspSpi, wsSecCryptoMapManualSaOutAhSpi=wsSecCryptoMapManualSaOutAhSpi, wsSecTransformSetRowStatus=wsSecTransformSetRowStatus, wsSecCryptoMapTransformSetEntry=wsSecCryptoMapTransformSetEntry, wsSecRadiusSvrPort=wsSecRadiusSvrPort, wsSecIPSecSaStatusLocalPeer=wsSecIPSecSaStatusLocalPeer, wsSecCryptoMapTransformCryptoMapSetSeqNum=wsSecCryptoMapTransformCryptoMapSetSeqNum, wsSecIKEKeepAlive=wsSecIKEKeepAlive, wsSecVpnUserPassword=wsSecVpnUserPassword, wsSecCryptoMapTransformSetRowStatus=wsSecCryptoMapTransformSetRowStatus, wsSecCryptoMapIfMappingTable=wsSecCryptoMapIfMappingTable, wsSecIKESaStatsLocalIdentity=wsSecIKESaStatsLocalIdentity, wsSecCryptoMapManualSaOutEspCipherKey=wsSecCryptoMapManualSaOutEspCipherKey, wsSecLocalIPAddressPoolScalars=wsSecLocalIPAddressPoolScalars, wsSecRadiusSvrEntry=wsSecRadiusSvrEntry, wsSecIKESaStatsPrfAlgthm=wsSecIKESaStatsPrfAlgthm, wsSecCryptoMapManualSaIKEPeer=wsSecCryptoMapManualSaIKEPeer, wsSecCryptoMapManualSaCryptoMapName=wsSecCryptoMapManualSaCryptoMapName, wsSecIKEScalars=wsSecIKEScalars, wsSecVpnSALifeTimeKB=wsSecVpnSALifeTimeKB, wsSecIKEPolicyEncryption=wsSecIKEPolicyEncryption, wsSecTransformSetEspEncr=wsSecTransformSetEspEncr, wsSecLocalIPAddrPoolAddrRangeEnd=wsSecLocalIPAddrPoolAddrRangeEnd, wsSecCryptoMapSAPerHostEnable=wsSecCryptoMapSAPerHostEnable, wsSecIKESaStatsEntry=wsSecIKESaStatsEntry, wsSecCryptoMapACLId=wsSecCryptoMapACLId, wsSecIKESaStatsClearScalars=wsSecIKESaStatsClearScalars, wsSecIPSecSaStatusAlgthmCipher=wsSecIPSecSaStatusAlgthmCipher, wsSecCryptoMapModeCfgEnable=wsSecCryptoMapModeCfgEnable, wsSecIKEPolicyDHGroup=wsSecIKEPolicyDHGroup, wsSecTransformSetTable=wsSecTransformSetTable, wsSecVpnUserEntry=wsSecVpnUserEntry, wsSecIKESaStatsRemoteIdentity=wsSecIKESaStatsRemoteIdentity, wsSecVpnAuth=wsSecVpnAuth, wsSecCryptoMapManualSaCryptoMapSeqNum=wsSecCryptoMapManualSaCryptoMapSeqNum, wsSecIKEPolicyPriority=wsSecIKEPolicyPriority, wsSecCryptoMapIfMappingCryptoMapName=wsSecCryptoMapIfMappingCryptoMapName, wsSecVPNAuthMethod=wsSecVPNAuthMethod, AbbrRowStatus=AbbrRowStatus, wsSecIKEPolicyTable=wsSecIKEPolicyTable, wsSecCryptoMapName=wsSecCryptoMapName, wsSecTransformSetName=wsSecTransformSetName, wsSecPreSharedKeyIKEPeer=wsSecPreSharedKeyIKEPeer, wsSecIKEPolicyHash=wsSecIKEPolicyHash, wsSecVpnUserName=wsSecVpnUserName, wsSecIPSecSaStatusEspSpiIn=wsSecIPSecSaStatusEspSpiIn, wsSecIPSecSaStatusEntry=wsSecIPSecSaStatusEntry, wsSecVpnGroup=wsSecVpnGroup, wsSecCryptoMapPeerIKEPeer=wsSecCryptoMapPeerIKEPeer, wsSecCryptoMapPeerEntry=wsSecCryptoMapPeerEntry, wsSecRadiusSvrSharedSecret=wsSecRadiusSvrSharedSecret, wsSecIPSecSaStatusAlgthmMac=wsSecIPSecSaStatusAlgthmMac, wsSecIKEPolicyRowStatus=wsSecIKEPolicyRowStatus, wsSecCryptoMapSALifeTimeSec=wsSecCryptoMapSALifeTimeSec, wsSecPreSharedKeyTable=wsSecPreSharedKeyTable, wsSecCryptoMapManualSaInAuthKey=wsSecCryptoMapManualSaInAuthKey, wsSecISAKMPLocalIdentity=wsSecISAKMPLocalIdentity, wsSecTransformSetAHAuth=wsSecTransformSetAHAuth, wsSecCryptoMapRemoteType=wsSecCryptoMapRemoteType, wsSecCryptoMapIfMappingIfName=wsSecCryptoMapIfMappingIfName, wsSecIKESaStatsTable=wsSecIKESaStatsTable, wsSecCryptoMapPeerSequenceNum=wsSecCryptoMapPeerSequenceNum, wsSecTransformSetEntry=wsSecTransformSetEntry, wsSecVpnSALifeTimeSec=wsSecVpnSALifeTimeSec, wsSecVpnGroups=wsSecVpnGroups, wsSecCryptoMapManualSaInEspCipherKey=wsSecCryptoMapManualSaInEspCipherKey, wsSecVpnUserRowStatus=wsSecVpnUserRowStatus, wsSecIKESaStatsEncrptAlgthm=wsSecIKESaStatsEncrptAlgthm, wsSecCryptoMapManualSaOutEspSpi=wsSecCryptoMapManualSaOutEspSpi, wsSecPreSharedKeyEntry=wsSecPreSharedKeyEntry, wsSecIpSecClearPeerIpAddr=wsSecIpSecClearPeerIpAddr, wsSecIPSecSaStatusAhSpiOut=wsSecIPSecSaStatusAhSpiOut, wsSecVPNScalars=wsSecVPNScalars, wsSecIKESaStatsPhase1Done=wsSecIKESaStatsPhase1Done, wsSecIKESaStatsCreateDate=wsSecIKESaStatsCreateDate, wsSecIPSecSaStatusTable=wsSecIPSecSaStatusTable, wsSecRadiusSvrScalars=wsSecRadiusSvrScalars, wsSecCryptoMapTransformSetCryptoMapName=wsSecCryptoMapTransformSetCryptoMapName, wsSecRadiusSvrType=wsSecRadiusSvrType, wsSecCryptoMapMode=wsSecCryptoMapMode, wsSecClientDNSServerIP=wsSecClientDNSServerIP, wsSecCryptoMapLocalIdType=wsSecCryptoMapLocalIdType, wsSecCryptoMapSALifeTimeKB=wsSecCryptoMapSALifeTimeKB)
