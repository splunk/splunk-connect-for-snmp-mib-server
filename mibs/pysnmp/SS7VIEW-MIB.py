#
# PySNMP MIB module SS7VIEW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SS7VIEW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:02:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, Unsigned32, NotificationType, ModuleIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, Counter32, MibIdentifier, Gauge32, Integer32, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "Counter32", "MibIdentifier", "Gauge32", "Integer32", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nortel = MibIdentifier((1, 3, 6, 1, 4, 1, 562))
dialaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14))
ss7view = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1))
ss7viewTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 1))
ss7viewTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 2))
ss7viewWebUITrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 4))
ss7viewINCTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 5))
ss7viewINCTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 6))
partitionName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
diskCapacity = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: diskCapacity.setStatus('mandatory')
diskThreshold = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 3), DisplayString())
if mibBuilder.loadTexts: diskThreshold.setStatus('mandatory')
trapSource = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 4), DisplayString())
if mibBuilder.loadTexts: trapSource.setStatus('mandatory')
pollSS7ViewHost = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 30), DisplayString())
if mibBuilder.loadTexts: pollSS7ViewHost.setStatus('mandatory')
pollSS7ViewIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 31), IpAddress())
if mibBuilder.loadTexts: pollSS7ViewIP.setStatus('mandatory')
pollServerName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 32), DisplayString())
if mibBuilder.loadTexts: pollServerName.setStatus('mandatory')
pollServerCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 33), DisplayString())
if mibBuilder.loadTexts: pollServerCLLI.setStatus('mandatory')
pollServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 34), IpAddress())
if mibBuilder.loadTexts: pollServerIpAddress.setStatus('mandatory')
pollFailReason = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 35), DisplayString())
if mibBuilder.loadTexts: pollFailReason.setStatus('mandatory')
pollSeverity = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 36), DisplayString())
if mibBuilder.loadTexts: pollSeverity.setStatus('mandatory')
stateChangeServerName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 50), DisplayString())
if mibBuilder.loadTexts: stateChangeServerName.setStatus('mandatory')
stateChangeServerCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 51), DisplayString())
if mibBuilder.loadTexts: stateChangeServerCLLI.setStatus('mandatory')
stateChangeServerOpState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 52), DisplayString())
if mibBuilder.loadTexts: stateChangeServerOpState.setStatus('mandatory')
stateChangeServerStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 53), DisplayString())
if mibBuilder.loadTexts: stateChangeServerStandbyState.setStatus('mandatory')
stateChangeServerAvailState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 54), DisplayString())
if mibBuilder.loadTexts: stateChangeServerAvailState.setStatus('mandatory')
logArchiveName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 80), DisplayString())
if mibBuilder.loadTexts: logArchiveName.setStatus('mandatory')
ss7viewDiskFullRaise = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,2002)).setObjects(("SS7VIEW-MIB", "partitionName"), ("SS7VIEW-MIB", "diskCapacity"), ("SS7VIEW-MIB", "diskThreshold"))
ss7viewDiskFullClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1002)).setObjects(("SS7VIEW-MIB", "partitionName"), ("SS7VIEW-MIB", "diskCapacity"), ("SS7VIEW-MIB", "diskThreshold"))
csgStatusPollClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1031)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "pollServerName"), ("SS7VIEW-MIB", "pollServerCLLI"), ("SS7VIEW-MIB", "pollServerIpAddress"))
csgStatusPollFailed = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1033)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "pollServerName"), ("SS7VIEW-MIB", "pollServerCLLI"), ("SS7VIEW-MIB", "pollServerIpAddress"), ("SS7VIEW-MIB", "pollFailReason"), ("SS7VIEW-MIB", "pollSeverity"))
csgStateChangeWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1052)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
csgStateChangeMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1053)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
csgStateChangeMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1054)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
csgStateChangeCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1055)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
csgStateChangeNormal = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1051)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
ss7viewLogArchive = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1081)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "logArchiveName"))
webServerRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,4010))
privateTrapVars = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3), ObjectIdentifier())
if mibBuilder.loadTexts: privateTrapVars.setStatus('mandatory')
privateTraps = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 4), ObjectIdentifier())
if mibBuilder.loadTexts: privateTraps.setStatus('mandatory')
class AlarmRaiseType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("clear", 0), ("raise", 1), ("state", 2))

alarmRaise = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3, 1), AlarmRaiseType())
if mibBuilder.loadTexts: alarmRaise.setStatus('mandatory')
incSelectionName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3, 2), DisplayString())
if mibBuilder.loadTexts: incSelectionName.setStatus('mandatory')
incComplexAlarmVars = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1), ObjectIdentifier())
if mibBuilder.loadTexts: incComplexAlarmVars.setStatus('mandatory')
incComplexName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: incComplexName.setStatus('mandatory')
incComplexIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: incComplexIpAddress.setStatus('mandatory')
incComplexState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 3), DisplayString())
if mibBuilder.loadTexts: incComplexState.setStatus('mandatory')
incComplexOpState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 4), DisplayString())
if mibBuilder.loadTexts: incComplexOpState.setStatus('mandatory')
incComplexStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 5), DisplayString())
if mibBuilder.loadTexts: incComplexStandbyState.setStatus('mandatory')
incComplexAvailState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 6), DisplayString())
if mibBuilder.loadTexts: incComplexAvailState.setStatus('mandatory')
ss7viewApplyConfigFile = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1000)).setObjects(("SS7VIEW-MIB", "trapSource"))
ss7viewRefreshReadOnlyMap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1001))
privateNotifyMap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,58916871)).setObjects(("SS7VIEW-MIB", "incSelectionName"), ("SS7VIEW-MIB", "alarmRaise"))
privateRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,3000))
incCompStateCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1005)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
incCompStateMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1004)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
incCompStateMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1003)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
incCompStateWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1002)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
incCompStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1001)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
telnetServerRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,4000))
mibBuilder.exportSymbols("SS7VIEW-MIB", incCompStateCritical=incCompStateCritical, ss7viewDiskFullClear=ss7viewDiskFullClear, pollSS7ViewIP=pollSS7ViewIP, stateChangeServerCLLI=stateChangeServerCLLI, ss7viewRefreshReadOnlyMap=ss7viewRefreshReadOnlyMap, privateTrapVars=privateTrapVars, stateChangeServerOpState=stateChangeServerOpState, diskCapacity=diskCapacity, csgStatusPollClear=csgStatusPollClear, pollServerIpAddress=pollServerIpAddress, diskThreshold=diskThreshold, pollSS7ViewHost=pollSS7ViewHost, incComplexStandbyState=incComplexStandbyState, incComplexOpState=incComplexOpState, privateRestarted=privateRestarted, partitionName=partitionName, incComplexIpAddress=incComplexIpAddress, trapSource=trapSource, stateChangeServerStandbyState=stateChangeServerStandbyState, ss7viewINCTraps=ss7viewINCTraps, ss7viewTraps=ss7viewTraps, pollServerName=pollServerName, webServerRestarted=webServerRestarted, stateChangeServerAvailState=stateChangeServerAvailState, incComplexName=incComplexName, incCompStateMajor=incCompStateMajor, incComplexState=incComplexState, logArchiveName=logArchiveName, ss7viewTrapVars=ss7viewTrapVars, ss7viewINCTrapVars=ss7viewINCTrapVars, csgStateChangeNormal=csgStateChangeNormal, privateTraps=privateTraps, pollServerCLLI=pollServerCLLI, ss7viewApplyConfigFile=ss7viewApplyConfigFile, incCompStateWarning=incCompStateWarning, ss7viewWebUITrapVars=ss7viewWebUITrapVars, dialaccess=dialaccess, csgStateChangeMinor=csgStateChangeMinor, privateNotifyMap=privateNotifyMap, ss7viewLogArchive=ss7viewLogArchive, pollFailReason=pollFailReason, incSelectionName=incSelectionName, nortel=nortel, csgStatusPollFailed=csgStatusPollFailed, incCompStateMinor=incCompStateMinor, incCompStateNormal=incCompStateNormal, pollSeverity=pollSeverity, alarmRaise=alarmRaise, csgStateChangeWarning=csgStateChangeWarning, telnetServerRestarted=telnetServerRestarted, csgStateChangeCritical=csgStateChangeCritical, ss7view=ss7view, ss7viewDiskFullRaise=ss7viewDiskFullRaise, stateChangeServerName=stateChangeServerName, AlarmRaiseType=AlarmRaiseType, incComplexAvailState=incComplexAvailState, incComplexAlarmVars=incComplexAlarmVars, csgStateChangeMajor=csgStateChangeMajor)
