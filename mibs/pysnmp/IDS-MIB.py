#
# PySNMP MIB module IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ipAddrEntry, = mibBuilder.importSymbols("IP-MIB", "ipAddrEntry")
rsIDS, = mibBuilder.importSymbols("RADWARE-MIB", "rsIDS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, enterprises, Counter64, TimeTicks, ModuleIdentity, Counter32, Integer32, Unsigned32, NotificationType, MibIdentifier, NotificationType, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "enterprises", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "Integer32", "Unsigned32", "NotificationType", "MibIdentifier", "NotificationType", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rsIDSTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1), )
if mibBuilder.loadTexts: rsIDSTrackingTable.setStatus('mandatory')
rsIDStrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1), ).setIndexNames((0, "IDS-MIB", "rsIDSFilterGroupName"))
if mibBuilder.loadTexts: rsIDStrackingEntry.setStatus('mandatory')
rsIDSFilterGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSFilterGroupName.setStatus('mandatory')
rsIDSTrackingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 2), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTrackingTime.setStatus('mandatory')
rsIDSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 3), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSThreshold.setStatus('mandatory')
rsIDSFilterGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("group", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSFilterGroupType.setStatus('mandatory')
rsIDSTrackingType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("drop", 0), ("reset", 1), ("ncps", 2), ("ncpd", 3), ("ncpsd", 4), ("ncpf", 5), ("winnuke", 6), ("landattack", 7), ("synattackack", 8), ("tcpsyn", 9), ("tcpack", 10), ("tcpsynack", 11), ("tcprst", 12), ("tcpfin", 13), ("tcpelse", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTrackingType.setStatus('mandatory')
rsIDSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatus.setStatus('mandatory')
rsIDSDummy1 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSDummy1.setStatus('mandatory')
rsIDSMechanismStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMechanismStatus.setStatus('mandatory')
rsIDSTCPAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPAgingTimeFreq.setStatus('mandatory')
rsIDSNCPsAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPsAgingTimeFreq.setStatus('mandatory')
rsIDSStatsAgingTimeFreq = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatsAgingTimeFreq.setStatus('mandatory')
rsIDSNCPSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSTableSize.setStatus('mandatory')
rsIDSNCPDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPDTableSize.setStatus('mandatory')
rsIDSNCPSDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSDTableSize.setStatus('mandatory')
rsIDSTCPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPTableSize.setStatus('mandatory')
rsIDSSTATSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSSTATSTableSize.setStatus('mandatory')
rsIDSBasic = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSBasic.setStatus('mandatory')
rsIDSAllServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSAllServers.setStatus('mandatory')
rsIDSUNIXServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSUNIXServers.setStatus('mandatory')
rsIDSLotusServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSLotusServers.setStatus('mandatory')
rsIDSMSIISServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMSIISServers.setStatus('mandatory')
rsIDSMSFrontPageServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSMSFrontPageServers.setStatus('mandatory')
rsIDSApacheServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSApacheServers.setStatus('mandatory')
rsIDSNetscapeWebServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNetscapeWebServers.setStatus('mandatory')
rsIDSNovellServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNovellServers.setStatus('mandatory')
rsIDSOracleServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSOracleServers.setStatus('mandatory')
rsIDSOmniHTTPDServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSOmniHTTPDServers.setStatus('mandatory')
rsIDSWebSiteServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSWebSiteServers.setStatus('mandatory')
rsIDSColdfusionServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSColdfusionServers.setStatus('mandatory')
rsIDSIRIXServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSIRIXServers.setStatus('mandatory')
rsIDSNCSAServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCSAServers.setStatus('mandatory')
rsIDSCompaqServers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSCompaqServers.setStatus('mandatory')
rsIDSbackdoors = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSbackdoors.setStatus('mandatory')
rsIDSTraps = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTraps.setStatus('mandatory')
rsIDSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29), )
if mibBuilder.loadTexts: rsIDSStatsTable.setStatus('mandatory')
rsIDSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1), ).setIndexNames((0, "IDS-MIB", "rsIDSAttackIndex"))
if mibBuilder.loadTexts: rsIDSStatsEntry.setStatus('mandatory')
rsIDSAttackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackIndex.setStatus('mandatory')
rsIDSAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackName.setStatus('mandatory')
rsIDSAttackSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackSrcAddr.setStatus('mandatory')
rsIDSAttackDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackDstAddr.setStatus('mandatory')
rsIDSAttackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttackStatus.setStatus('mandatory')
rsIDSAttacktime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSAttacktime.setStatus('mandatory')
rsIDSStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSStatsStatus.setStatus('mandatory')
rsIDSDummy2 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIDSDummy2.setStatus('mandatory')
rsIDSNCPDTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPDTableSizeAfterReset.setStatus('mandatory')
rsIDSNCPSDTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSNCPSDTableSizeAfterReset.setStatus('mandatory')
rsIDSTCPTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSTCPTableSizeAfterReset.setStatus('mandatory')
rsIDSSTATSTableSizeAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 65, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsIDSSTATSTableSizeAfterReset.setStatus('mandatory')
mibBuilder.exportSymbols("IDS-MIB", rsIDSAttackIndex=rsIDSAttackIndex, rsIDSColdfusionServers=rsIDSColdfusionServers, rsIDSTCPTableSizeAfterReset=rsIDSTCPTableSizeAfterReset, rsIDSAttackName=rsIDSAttackName, rsIDSTrackingTable=rsIDSTrackingTable, rsIDSMechanismStatus=rsIDSMechanismStatus, rsIDSAttackStatus=rsIDSAttackStatus, rsIDSStatus=rsIDSStatus, TruthValue=TruthValue, rsIDSDummy2=rsIDSDummy2, rsIDSUNIXServers=rsIDSUNIXServers, rsIDSNetscapeWebServers=rsIDSNetscapeWebServers, rsIDSTraps=rsIDSTraps, rsIDSLotusServers=rsIDSLotusServers, rsIDSOmniHTTPDServers=rsIDSOmniHTTPDServers, rsIDSStatsTable=rsIDSStatsTable, rsIDSNCPsAgingTimeFreq=rsIDSNCPsAgingTimeFreq, rsIDSAttacktime=rsIDSAttacktime, rsIDSNovellServers=rsIDSNovellServers, rsIDSNCPSDTableSize=rsIDSNCPSDTableSize, rsIDSNCPSDTableSizeAfterReset=rsIDSNCPSDTableSizeAfterReset, rsIDSApacheServers=rsIDSApacheServers, rsIDSNCPSTableSize=rsIDSNCPSTableSize, rsIDSBasic=rsIDSBasic, rsIDSMSFrontPageServers=rsIDSMSFrontPageServers, rsIDSNCPDTableSize=rsIDSNCPDTableSize, rsIDSAttackDstAddr=rsIDSAttackDstAddr, rsIDSAttackSrcAddr=rsIDSAttackSrcAddr, rsIDStrackingEntry=rsIDStrackingEntry, rsIDSCompaqServers=rsIDSCompaqServers, rsIDSTrackingType=rsIDSTrackingType, rsIDSStatsAgingTimeFreq=rsIDSStatsAgingTimeFreq, rsIDSSTATSTableSize=rsIDSSTATSTableSize, rsIDSNCPDTableSizeAfterReset=rsIDSNCPDTableSizeAfterReset, rsIDSDummy1=rsIDSDummy1, rsIDSStatsStatus=rsIDSStatsStatus, RowStatus=RowStatus, rsIDSStatsEntry=rsIDSStatsEntry, rsIDSOracleServers=rsIDSOracleServers, rsIDSTrackingTime=rsIDSTrackingTime, rsIDSSTATSTableSizeAfterReset=rsIDSSTATSTableSizeAfterReset, rsIDSFilterGroupName=rsIDSFilterGroupName, rsIDSThreshold=rsIDSThreshold, rsIDSAllServers=rsIDSAllServers, rsIDSWebSiteServers=rsIDSWebSiteServers, rsIDSMSIISServers=rsIDSMSIISServers, rsIDSIRIXServers=rsIDSIRIXServers, NetNumber=NetNumber, rsIDSNCSAServers=rsIDSNCSAServers, rsIDSbackdoors=rsIDSbackdoors, rsIDSFilterGroupType=rsIDSFilterGroupType, rsIDSTCPAgingTimeFreq=rsIDSTCPAgingTimeFreq, rsIDSTCPTableSize=rsIDSTCPTableSize)
