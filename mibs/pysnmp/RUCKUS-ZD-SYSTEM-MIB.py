#
# PySNMP MIB module RUCKUS-ZD-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ZD-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ruckusZDSystemModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusZDSystemModule")
RuckusSSID, RuckusdB, RuckusNameString, RuckusCountryCode, RuckusRadioMode, RuckusAdminStatus = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusSSID", "RuckusdB", "RuckusNameString", "RuckusCountryCode", "RuckusRadioMode", "RuckusAdminStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, Counter32, MibIdentifier, Bits, Unsigned32, ModuleIdentity, iso, TimeTicks, Integer32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Counter32", "MibIdentifier", "Bits", "Unsigned32", "ModuleIdentity", "iso", "TimeTicks", "Integer32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue", "RowStatus")
ruckusZDSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1))
if mibBuilder.loadTexts: ruckusZDSystemMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusZDSystemMIB.setOrganization('Ruckus Wireless, Inc.')
ruckusZDSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1))
ruckusZDSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1))
ruckusZDSystemName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemName.setStatus('current')
ruckusZDSystemIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddr.setStatus('current')
ruckusZDSystemMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMacAddr.setStatus('current')
ruckusZDSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemUptime.setStatus('current')
ruckusZDSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemModel.setStatus('current')
ruckusZDSystemLicensedAPs = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemLicensedAPs.setStatus('current')
ruckusZDSystemMaxSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMaxSta.setStatus('current')
ruckusZDSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemSerialNumber.setStatus('current')
ruckusZDSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemVersion.setStatus('current')
ruckusZDSystemCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 20), RuckusCountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemCountryCode.setStatus('current')
ruckusZDSystemAdminName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 25), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ruckusZDSystemAdminName.setStatus('current')
ruckusZDSystemAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 26), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ruckusZDSystemAdminPassword.setStatus('current')
ruckusZDSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("standby", 2), ("noredundancy", 3))).clone('noredundancy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatus.setStatus('current')
ruckusZDSystemPeerConnectedStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemPeerConnectedStatus.setStatus('current')
ruckusZDSystemExpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5))
ruckusZDSystemNEId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 50), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemNEId.setStatus('current')
ruckusZDSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemManufacturer.setStatus('current')
ruckusZDSystemSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemSoftwareName.setStatus('current')
ruckusZDSystemCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemCPUUtil.setStatus('current')
ruckusZDSystemMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMemoryUtil.setStatus('current')
ruckusZDSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 60), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMemorySize.setStatus('current')
ruckusZDSystemFlashFreeSize = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 65), Unsigned32()).setUnits('KByte').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemFlashFreeSize.setStatus('current')
ruckusZDSystemMgmtVlanID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemMgmtVlanID.setStatus('current')
ruckusZDSystemtCPUSpeed = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 71), Unsigned32()).setUnits('BogoMIPS').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtCPUSpeed.setStatus('current')
ruckusZDSystemtFlashModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtFlashModel.setStatus('current')
ruckusZDSystemtMemModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemtMemModel.setStatus('current')
ruckusZDSystemStartTime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 74), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStartTime.setStatus('current')
ruckusZDSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemCurrentTime.setStatus('current')
ruckusZDSystemAPFirmwareServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 81), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemAPFirmwareServer.setStatus('current')
ruckusZDSystemAPConfigServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 82), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemAPConfigServer.setStatus('current')
ruckusZDSystemIDSAllowedESSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowedESSID.setStatus('current')
ruckusZDSystemIDSAllowBSSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 86), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowBSSID.setStatus('current')
ruckusZDSystemIDSAllowOUI = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 87), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemIDSAllowOUI.setStatus('current')
ruckusZDSystemBandwidthUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 90), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemBandwidthUtilValve.setStatus('current')
ruckusZDSystemDropPacketRateValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemDropPacketRateValve.setStatus('current')
ruckusZDSystemCPUUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 92), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemCPUUtilValve.setStatus('current')
ruckusZDSystemMemUtilValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 95), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemMemUtilValve.setStatus('current')
ruckusZDSystemOnlineStaValve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 96), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemOnlineStaValve.setStatus('current')
ruckusZDSystemACLocationLongitude = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemACLocationLongitude.setStatus('current')
ruckusZDSystemACLocationLatitude = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemACLocationLatitude.setStatus('current')
ruckusZDSystemDHCPServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemDHCPServer.setStatus('current')
ruckusZDAPCPUvalve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 120), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAPCPUvalve.setStatus('current')
ruckusZDAPMemoryvalve = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 121), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAPMemoryvalve.setStatus('current')
ruckusZDHeartBeatStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 122), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDHeartBeatStatus.setStatus('current')
ruckusZDHeartBeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 5, 123), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDHeartBeatPeriod.setStatus('current')
ruckusZDSystemIPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: ruckusZDSystemIPTable.setStatus('current')
ruckusZDSystemIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemIPEntry.setStatus('current')
ruckusZDSystemIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dualstack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPVersion.setStatus('current')
ruckusZDSystemIPAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddrMode.setStatus('current')
ruckusZDSystemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddress.setStatus('current')
ruckusZDSystemIPAddrNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPAddrNetmask.setStatus('current')
ruckusZDSystemIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPGateway.setStatus('current')
ruckusZDSystemIPPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPPrimaryDNS.setStatus('current')
ruckusZDSystemIPSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPSecondaryDNS.setStatus('current')
ruckusZDSystemIPV6AddressModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-configuration", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6AddressModel.setStatus('current')
ruckusZDSystemIPV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6Address.setStatus('current')
ruckusZDSystemIPV6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrefixLen.setStatus('current')
ruckusZDSystemIPV6Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6Gateway.setStatus('current')
ruckusZDSystemIPV6PrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6PrimaryDNS.setStatus('current')
ruckusZDSystemIPV6SecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 8, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemIPV6SecondaryDNS.setStatus('current')
ruckusZDSystemServices = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12))
ruckusZDSystemNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3))
ruckusZDSystemTimeWithNTP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemTimeWithNTP.setStatus('current')
ruckusZDSystemTimeNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemTimeNTPServer.setStatus('current')
ruckusZDSystemSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5))
ruckusZDSystemEmailTriggerEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemEmailTriggerEnable.setStatus('current')
ruckusZDSystemEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemEmailAddress.setStatus('current')
ruckusZDSystemSMTPServerName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerName.setStatus('current')
ruckusZDSystemSMTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPServerPort.setStatus('current')
ruckusZDSystemSMTPAuthUsername = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthUsername.setStatus('current')
ruckusZDSystemSMTPAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPAuthPassword.setStatus('current')
ruckusZDSystemFromEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFromEmailAddress.setStatus('current')
ruckusZDSystemSMTPEncryptionOptions = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tls", 2), ("starttls", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSMTPEncryptionOptions.setStatus('current')
ruckusZDSystemSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8))
ruckusZDSystemLogWithSysLog = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLogWithSysLog.setStatus('current')
ruckusZDSystemSysLogServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSysLogServer.setStatus('current')
ruckusZDSystemFlexMaster = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9))
ruckusZDSystemFlexMasterEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterEnable.setStatus('current')
ruckusZDSystemFlexMasterServer = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterServer.setStatus('current')
ruckusZDSystemFlexMasterInterval = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemFlexMasterInterval.setStatus('current')
ruckusZDSystemStpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 12))
ruckusZDSystemStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 12, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemStpStatus.setStatus('current')
ruckusZDSystemSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15))
ruckusZDSystemSNMPTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3))
ruckusZDSystemSNMPTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapEnable.setStatus('current')
ruckusZDSystemSNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv2", 1), ("snmpv3", 2))).clone('snmpv2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPTrapVersion.setStatus('current')
ruckusZDSystemSNMPV2TrapSvrTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrTable.setStatus('current')
ruckusZDSystemSNMPV2TrapSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDSystemSNMPV2TrapSvrIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrEntry.setStatus('current')
ruckusZDSystemSNMPV2TrapSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrIndex.setStatus('current')
ruckusZDSystemSNMPV2TrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapServer.setStatus('current')
ruckusZDSystemSNMPV2TrapSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 35, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2TrapSvrRowStatus.setStatus('current')
ruckusZDSystemSNMPV3TrapSvrTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrTable.setStatus('current')
ruckusZDSystemSNMPV3TrapSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDSystemSNMPV3TrapSvrIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrEntry.setStatus('current')
ruckusZDSystemSNMPV3TrapSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrIndex.setStatus('current')
ruckusZDSystemSNMPV3TrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapServer.setStatus('current')
ruckusZDSystemSNMPV3TrapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapUser.setStatus('current')
ruckusZDSystemSNMPV3TrapAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuth.setStatus('current')
ruckusZDSystemSNMPV3TrapAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapAuthKey.setStatus('current')
ruckusZDSystemSNMPV3TrapPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacy.setStatus('current')
ruckusZDSystemSNMPV3TrapPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapPrivacyKey.setStatus('current')
ruckusZDSystemSNMPV3TrapSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 3, 36, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3TrapSvrRowStatus.setStatus('current')
ruckusZDSystemSNMPV2Table = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Table.setStatus('current')
ruckusZDSystemSNMPV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV2Entry.setStatus('current')
ruckusZDSystemSNMPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPEnable.setStatus('current')
ruckusZDSystemSNMPROCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPROCommunity.setStatus('current')
ruckusZDSystemSNMPRWCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPRWCommunity.setStatus('current')
ruckusZDSystemSNMPSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysContact.setStatus('current')
ruckusZDSystemSNMPSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPSysLocation.setStatus('current')
ruckusZDSystemSNMPV3Table = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8), )
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Table.setStatus('current')
ruckusZDSystemSNMPV3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Entry.setStatus('current')
ruckusZDSystemSNMPV3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3Enable.setStatus('current')
ruckusZDSystemSNMPV3RoUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoUser.setStatus('current')
ruckusZDSystemSNMPV3RoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuth.setStatus('current')
ruckusZDSystemSNMPV3RoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoAuthKey.setStatus('current')
ruckusZDSystemSNMPV3RoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacy.setStatus('current')
ruckusZDSystemSNMPV3RoPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RoPrivacyKey.setStatus('current')
ruckusZDSystemSNMPV3RwUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwUser.setStatus('current')
ruckusZDSystemSNMPV3RwAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuth.setStatus('current')
ruckusZDSystemSNMPV3RwAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwAuthKey.setStatus('current')
ruckusZDSystemSNMPV3RwPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("des", 1), ("aes", 2), ("none", 3))).clone('des')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacy.setStatus('current')
ruckusZDSystemSNMPV3RwPrivacyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 15, 8, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemSNMPV3RwPrivacyKey.setStatus('current')
ruckusZDSystemLoadBalanceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20))
ruckusZDSystemLoadBalanceStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceStatus.setStatus('current')
ruckusZDSystemLoadBalanceUserThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserThreshold.setStatus('current')
ruckusZDSystemLoadBalanceUserDifference = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceUserDifference.setStatus('current')
ruckusZDSystemLoadBalanceTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficThreshold.setStatus('current')
ruckusZDSystemLoadBalanceTrafficDifference = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 5), Unsigned32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceTrafficDifference.setStatus('current')
ruckusZDSystemLoadBalanceType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 12, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("traffic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDSystemLoadBalanceType.setStatus('current')
ruckusZDSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15))
ruckusZDSystemStatsNumAP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumAP.setStatus('current')
ruckusZDSystemStatsNumSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumSta.setStatus('current')
ruckusZDSystemStatsNumRogue = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogue.setStatus('current')
ruckusZDSystemStatsNumRogueKnown = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRogueKnown.setStatus('current')
ruckusZDSystemStatsWLANTotalRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxPkts.setStatus('current')
ruckusZDSystemStatsWLANTotalRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxBytes.setStatus('current')
ruckusZDSystemStatsWLANTotalRxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxMulticast.setStatus('current')
ruckusZDSystemStatsWLANTotalTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxPkts.setStatus('current')
ruckusZDSystemStatsWLANTotalTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxBytes.setStatus('current')
ruckusZDSystemStatsWLANTotalTxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxMulticast.setStatus('current')
ruckusZDSystemStatsWLANTotalTxFail = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxFail.setStatus('current')
ruckusZDSystemStatsWLANTotalTxRetry = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxRetry.setStatus('current')
ruckusZDSystemStatsCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsCPUUtil.setStatus('current')
ruckusZDSystemStatsMemoryUtil = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsMemoryUtil.setStatus('current')
ruckusZDSystemStatsNumRegisteredAP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsNumRegisteredAP.setStatus('current')
ruckusZDSystemStatsWLANTotalAssocFail = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalAssocFail.setStatus('current')
ruckusZDSystemStatsWLANTotalRxErrFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalRxErrFrm.setStatus('current')
ruckusZDSystemStatsWLANTotalTxDroppedPkt = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedPkt.setStatus('current')
ruckusZDSystemStatsWLANTotalTxErrFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxErrFrm.setStatus('current')
ruckusZDSystemStatsWLANTotalTxDroppedFrm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsWLANTotalTxDroppedFrm.setStatus('current')
ruckusZDSystemStatsLanTxRate = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsLanTxRate.setStatus('current')
ruckusZDSystemStatsLanRxRate = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsLanRxRate.setStatus('current')
ruckusZDSystemStatsAllNumSta = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 15, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDSystemStatsAllNumSta.setStatus('current')
ruckusZDEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18))
ruckusZDEthNum = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthNum.setStatus('current')
ruckusZDEthTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2), )
if mibBuilder.loadTexts: ruckusZDEthTable.setStatus('current')
ruckusZDEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1), ).setIndexNames((0, "RUCKUS-ZD-SYSTEM-MIB", "ruckusZDEthIfIndex"))
if mibBuilder.loadTexts: ruckusZDEthEntry.setStatus('current')
ruckusZDEthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthIfIndex.setStatus('current')
ruckusZDEthName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDEthName.setStatus('current')
ruckusZDEthDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDesc.setStatus('current')
ruckusZDEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthType.setStatus('current')
ruckusZDEthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthStatus.setStatus('current')
ruckusZDEthPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthPhysAddr.setStatus('current')
ruckusZDEthMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDEthMtu.setStatus('current')
ruckusZDEthIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 8), Unsigned32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthIfSpeed.setStatus('current')
ruckusZDEthUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthUtil.setStatus('current')
ruckusZDEthTxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxBcastPkts.setStatus('current')
ruckusZDEthTxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxMcastPkts.setStatus('current')
ruckusZDEthRxBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxBcastPkts.setStatus('current')
ruckusZDEthRxMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxMcastPkts.setStatus('current')
ruckusZDEthTxUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxUniPkts.setStatus('current')
ruckusZDEthRxUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxUniPkts.setStatus('current')
ruckusZDEthTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxPkts.setStatus('current')
ruckusZDEthRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxPkts.setStatus('current')
ruckusZDEthDropTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDropTxPkts.setStatus('current')
ruckusZDEthDropRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthDropRxPkts.setStatus('current')
ruckusZDEthTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthTxBytes.setStatus('current')
ruckusZDEthRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 1, 1, 1, 18, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDEthRxBytes.setStatus('current')
mibBuilder.exportSymbols("RUCKUS-ZD-SYSTEM-MIB", ruckusZDSystemLoadBalanceType=ruckusZDSystemLoadBalanceType, ruckusZDSystemSyslog=ruckusZDSystemSyslog, ruckusZDEthRxMcastPkts=ruckusZDEthRxMcastPkts, ruckusZDSystemManufacturer=ruckusZDSystemManufacturer, ruckusZDEthPhysAddr=ruckusZDEthPhysAddr, ruckusZDSystemSNMPV3TrapUser=ruckusZDSystemSNMPV3TrapUser, PYSNMP_MODULE_ID=ruckusZDSystemMIB, ruckusZDSystemIPTable=ruckusZDSystemIPTable, ruckusZDSystemSMTPServerName=ruckusZDSystemSMTPServerName, ruckusZDEthIfIndex=ruckusZDEthIfIndex, ruckusZDSystemSNMPEnable=ruckusZDSystemSNMPEnable, ruckusZDSystemEmailAddress=ruckusZDSystemEmailAddress, ruckusZDSystemStatsMemoryUtil=ruckusZDSystemStatsMemoryUtil, ruckusZDSystemStatsNumRogue=ruckusZDSystemStatsNumRogue, ruckusZDSystemNEId=ruckusZDSystemNEId, ruckusZDSystemSNMPV3RoPrivacyKey=ruckusZDSystemSNMPV3RoPrivacyKey, ruckusZDSystemtFlashModel=ruckusZDSystemtFlashModel, ruckusZDSystemSysLogServer=ruckusZDSystemSysLogServer, ruckusZDSystemMIB=ruckusZDSystemMIB, ruckusZDSystemSMTPAuthPassword=ruckusZDSystemSMTPAuthPassword, ruckusZDSystemStatsWLANTotalRxPkts=ruckusZDSystemStatsWLANTotalRxPkts, ruckusZDSystemIPPrimaryDNS=ruckusZDSystemIPPrimaryDNS, ruckusZDSystemStatus=ruckusZDSystemStatus, ruckusZDSystemIDSAllowedESSID=ruckusZDSystemIDSAllowedESSID, ruckusZDSystemAPFirmwareServer=ruckusZDSystemAPFirmwareServer, ruckusZDSystemMemoryUtil=ruckusZDSystemMemoryUtil, ruckusZDSystemSNMPV3TrapSvrRowStatus=ruckusZDSystemSNMPV3TrapSvrRowStatus, ruckusZDSystemSNMPV3Entry=ruckusZDSystemSNMPV3Entry, ruckusZDSystemFromEmailAddress=ruckusZDSystemFromEmailAddress, ruckusZDSystemBandwidthUtilValve=ruckusZDSystemBandwidthUtilValve, ruckusZDSystemCPUUtil=ruckusZDSystemCPUUtil, ruckusZDSystemName=ruckusZDSystemName, ruckusZDSystemSoftwareName=ruckusZDSystemSoftwareName, ruckusZDSystemFlexMasterInterval=ruckusZDSystemFlexMasterInterval, ruckusZDAPMemoryvalve=ruckusZDAPMemoryvalve, ruckusZDSystemStatsLanRxRate=ruckusZDSystemStatsLanRxRate, ruckusZDSystemSNMPV2TrapSvrTable=ruckusZDSystemSNMPV2TrapSvrTable, ruckusZDEthInfo=ruckusZDEthInfo, ruckusZDSystemIPV6Address=ruckusZDSystemIPV6Address, ruckusZDHeartBeatPeriod=ruckusZDHeartBeatPeriod, ruckusZDSystemSNMPV2TrapSvrEntry=ruckusZDSystemSNMPV2TrapSvrEntry, ruckusZDSystemLoadBalanceStatus=ruckusZDSystemLoadBalanceStatus, ruckusZDEthIfSpeed=ruckusZDEthIfSpeed, ruckusZDSystemIPAddr=ruckusZDSystemIPAddr, ruckusZDSystemNTP=ruckusZDSystemNTP, ruckusZDSystemStatsCPUUtil=ruckusZDSystemStatsCPUUtil, ruckusZDSystemExpInfo=ruckusZDSystemExpInfo, ruckusZDSystemServices=ruckusZDSystemServices, ruckusZDSystemIPGateway=ruckusZDSystemIPGateway, ruckusZDSystemSNMPSysLocation=ruckusZDSystemSNMPSysLocation, ruckusZDEthStatus=ruckusZDEthStatus, ruckusZDSystemSerialNumber=ruckusZDSystemSerialNumber, ruckusZDEthMtu=ruckusZDEthMtu, ruckusZDSystemSNMPROCommunity=ruckusZDSystemSNMPROCommunity, ruckusZDSystemStatsAllNumSta=ruckusZDSystemStatsAllNumSta, ruckusZDSystemStatsWLANTotalRxBytes=ruckusZDSystemStatsWLANTotalRxBytes, ruckusZDSystemIPV6AddressModel=ruckusZDSystemIPV6AddressModel, ruckusZDEthRxBytes=ruckusZDEthRxBytes, ruckusZDSystemSNMPV3TrapPrivacyKey=ruckusZDSystemSNMPV3TrapPrivacyKey, ruckusZDEthTxUniPkts=ruckusZDEthTxUniPkts, ruckusZDSystemSNMPV3TrapSvrIndex=ruckusZDSystemSNMPV3TrapSvrIndex, ruckusZDSystemObjects=ruckusZDSystemObjects, ruckusZDSystemtMemModel=ruckusZDSystemtMemModel, ruckusZDSystemMemUtilValve=ruckusZDSystemMemUtilValve, ruckusZDSystemSNMPV3RwPrivacyKey=ruckusZDSystemSNMPV3RwPrivacyKey, ruckusZDEthTxMcastPkts=ruckusZDEthTxMcastPkts, ruckusZDSystemStatsNumSta=ruckusZDSystemStatsNumSta, ruckusZDSystemSNMP=ruckusZDSystemSNMP, ruckusZDSystemLoadBalanceUserDifference=ruckusZDSystemLoadBalanceUserDifference, ruckusZDSystemModel=ruckusZDSystemModel, ruckusZDSystemSNMPV3RwUser=ruckusZDSystemSNMPV3RwUser, ruckusZDEthName=ruckusZDEthName, ruckusZDSystemSNMPV3RwAuth=ruckusZDSystemSNMPV3RwAuth, ruckusZDEthNum=ruckusZDEthNum, ruckusZDSystemLoadBalanceTrafficDifference=ruckusZDSystemLoadBalanceTrafficDifference, ruckusZDSystemAPConfigServer=ruckusZDSystemAPConfigServer, ruckusZDSystemSNMPV3TrapAuth=ruckusZDSystemSNMPV3TrapAuth, ruckusZDSystemUptime=ruckusZDSystemUptime, ruckusZDSystemStatsWLANTotalTxErrFrm=ruckusZDSystemStatsWLANTotalTxErrFrm, ruckusZDSystemIPV6SecondaryDNS=ruckusZDSystemIPV6SecondaryDNS, ruckusZDSystemSMTPServerPort=ruckusZDSystemSMTPServerPort, ruckusZDSystemCountryCode=ruckusZDSystemCountryCode, ruckusZDSystemSNMPV2TrapSvrRowStatus=ruckusZDSystemSNMPV2TrapSvrRowStatus, ruckusZDSystemFlexMasterEnable=ruckusZDSystemFlexMasterEnable, ruckusZDEthType=ruckusZDEthType, ruckusZDEthDesc=ruckusZDEthDesc, ruckusZDSystemSNMPV3Table=ruckusZDSystemSNMPV3Table, ruckusZDSystemMemorySize=ruckusZDSystemMemorySize, ruckusZDSystemStatsWLANTotalAssocFail=ruckusZDSystemStatsWLANTotalAssocFail, ruckusZDSystemSMTPAuthUsername=ruckusZDSystemSMTPAuthUsername, ruckusZDEthUtil=ruckusZDEthUtil, ruckusZDSystemStatsWLANTotalTxBytes=ruckusZDSystemStatsWLANTotalTxBytes, ruckusZDSystemtCPUSpeed=ruckusZDSystemtCPUSpeed, ruckusZDEthDropTxPkts=ruckusZDEthDropTxPkts, ruckusZDSystemFlashFreeSize=ruckusZDSystemFlashFreeSize, ruckusZDSystemSNMPV3TrapPrivacy=ruckusZDSystemSNMPV3TrapPrivacy, ruckusZDSystemInfo=ruckusZDSystemInfo, ruckusZDSystemCurrentTime=ruckusZDSystemCurrentTime, ruckusZDSystemMaxSta=ruckusZDSystemMaxSta, ruckusZDSystemSNMPTrapEnable=ruckusZDSystemSNMPTrapEnable, ruckusZDSystemLoadBalanceUserThreshold=ruckusZDSystemLoadBalanceUserThreshold, ruckusZDSystemIPAddrMode=ruckusZDSystemIPAddrMode, ruckusZDSystemSNMPRWCommunity=ruckusZDSystemSNMPRWCommunity, ruckusZDSystemStartTime=ruckusZDSystemStartTime, ruckusZDSystemSNMPTrapVersion=ruckusZDSystemSNMPTrapVersion, ruckusZDSystemStatsNumRegisteredAP=ruckusZDSystemStatsNumRegisteredAP, ruckusZDSystemPeerConnectedStatus=ruckusZDSystemPeerConnectedStatus, ruckusZDEthRxPkts=ruckusZDEthRxPkts, ruckusZDSystemLoadBalanceInfo=ruckusZDSystemLoadBalanceInfo, ruckusZDSystemMgmtVlanID=ruckusZDSystemMgmtVlanID, ruckusZDSystemStatsWLANTotalTxMulticast=ruckusZDSystemStatsWLANTotalTxMulticast, ruckusZDSystemIPVersion=ruckusZDSystemIPVersion, ruckusZDEthTxBytes=ruckusZDEthTxBytes, ruckusZDSystemStatsWLANTotalTxPkts=ruckusZDSystemStatsWLANTotalTxPkts, ruckusZDSystemTimeWithNTP=ruckusZDSystemTimeWithNTP, ruckusZDSystemStpInfo=ruckusZDSystemStpInfo, ruckusZDSystemAdminName=ruckusZDSystemAdminName, ruckusZDSystemFlexMasterServer=ruckusZDSystemFlexMasterServer, ruckusZDSystemSNMPV3RoUser=ruckusZDSystemSNMPV3RoUser, ruckusZDSystemACLocationLatitude=ruckusZDSystemACLocationLatitude, ruckusZDSystemDropPacketRateValve=ruckusZDSystemDropPacketRateValve, ruckusZDSystemCPUUtilValve=ruckusZDSystemCPUUtilValve, ruckusZDSystemStatsWLANTotalRxErrFrm=ruckusZDSystemStatsWLANTotalRxErrFrm, ruckusZDSystemSNMPV3RwAuthKey=ruckusZDSystemSNMPV3RwAuthKey, ruckusZDSystemSNMPV2Entry=ruckusZDSystemSNMPV2Entry, ruckusZDSystemSMTPEncryptionOptions=ruckusZDSystemSMTPEncryptionOptions, ruckusZDSystemEmailTriggerEnable=ruckusZDSystemEmailTriggerEnable, ruckusZDSystemSNMPV3TrapSvrEntry=ruckusZDSystemSNMPV3TrapSvrEntry, ruckusZDSystemStatsWLANTotalTxRetry=ruckusZDSystemStatsWLANTotalTxRetry, ruckusZDSystemIPEntry=ruckusZDSystemIPEntry, ruckusZDSystemStats=ruckusZDSystemStats, ruckusZDSystemSNMPV3RoAuthKey=ruckusZDSystemSNMPV3RoAuthKey, ruckusZDSystemStatsNumAP=ruckusZDSystemStatsNumAP, ruckusZDSystemStatsWLANTotalTxFail=ruckusZDSystemStatsWLANTotalTxFail, ruckusZDEthRxUniPkts=ruckusZDEthRxUniPkts, ruckusZDSystemOnlineStaValve=ruckusZDSystemOnlineStaValve, ruckusZDSystemACLocationLongitude=ruckusZDSystemACLocationLongitude, ruckusZDSystemSNMPV3Enable=ruckusZDSystemSNMPV3Enable, ruckusZDSystemStpStatus=ruckusZDSystemStpStatus, ruckusZDEthTable=ruckusZDEthTable, ruckusZDEthEntry=ruckusZDEthEntry, ruckusZDSystemVersion=ruckusZDSystemVersion, ruckusZDSystemIDSAllowOUI=ruckusZDSystemIDSAllowOUI, ruckusZDAPCPUvalve=ruckusZDAPCPUvalve, ruckusZDHeartBeatStatus=ruckusZDHeartBeatStatus, ruckusZDSystemIPV6PrimaryDNS=ruckusZDSystemIPV6PrimaryDNS, ruckusZDSystemLoadBalanceTrafficThreshold=ruckusZDSystemLoadBalanceTrafficThreshold, ruckusZDSystemSNMPV2TrapServer=ruckusZDSystemSNMPV2TrapServer, ruckusZDSystemMacAddr=ruckusZDSystemMacAddr, ruckusZDSystemSNMPV3TrapSvrTable=ruckusZDSystemSNMPV3TrapSvrTable, ruckusZDSystemStatsNumRogueKnown=ruckusZDSystemStatsNumRogueKnown, ruckusZDEthTxPkts=ruckusZDEthTxPkts, ruckusZDSystemIDSAllowBSSID=ruckusZDSystemIDSAllowBSSID, ruckusZDSystemIPV6Gateway=ruckusZDSystemIPV6Gateway, ruckusZDSystemSNMPV2TrapSvrIndex=ruckusZDSystemSNMPV2TrapSvrIndex, ruckusZDSystemIPAddress=ruckusZDSystemIPAddress, ruckusZDSystemSNMPV3TrapServer=ruckusZDSystemSNMPV3TrapServer, ruckusZDSystemSMTP=ruckusZDSystemSMTP, ruckusZDSystemTimeNTPServer=ruckusZDSystemTimeNTPServer, ruckusZDSystemSNMPV2Table=ruckusZDSystemSNMPV2Table, ruckusZDSystemLicensedAPs=ruckusZDSystemLicensedAPs, ruckusZDSystemSNMPSysContact=ruckusZDSystemSNMPSysContact, ruckusZDEthTxBcastPkts=ruckusZDEthTxBcastPkts, ruckusZDSystemIPAddrNetmask=ruckusZDSystemIPAddrNetmask, ruckusZDSystemSNMPTrapInfo=ruckusZDSystemSNMPTrapInfo, ruckusZDSystemSNMPV3TrapAuthKey=ruckusZDSystemSNMPV3TrapAuthKey, ruckusZDSystemLogWithSysLog=ruckusZDSystemLogWithSysLog, ruckusZDSystemSNMPV3RoPrivacy=ruckusZDSystemSNMPV3RoPrivacy, ruckusZDSystemFlexMaster=ruckusZDSystemFlexMaster, ruckusZDSystemSNMPV3RwPrivacy=ruckusZDSystemSNMPV3RwPrivacy, ruckusZDEthDropRxPkts=ruckusZDEthDropRxPkts, ruckusZDSystemDHCPServer=ruckusZDSystemDHCPServer, ruckusZDSystemSNMPV3RoAuth=ruckusZDSystemSNMPV3RoAuth, ruckusZDSystemIPV6PrefixLen=ruckusZDSystemIPV6PrefixLen, ruckusZDSystemStatsWLANTotalRxMulticast=ruckusZDSystemStatsWLANTotalRxMulticast, ruckusZDSystemStatsWLANTotalTxDroppedFrm=ruckusZDSystemStatsWLANTotalTxDroppedFrm, ruckusZDSystemStatsLanTxRate=ruckusZDSystemStatsLanTxRate, ruckusZDSystemStatsWLANTotalTxDroppedPkt=ruckusZDSystemStatsWLANTotalTxDroppedPkt, ruckusZDEthRxBcastPkts=ruckusZDEthRxBcastPkts, ruckusZDSystemIPSecondaryDNS=ruckusZDSystemIPSecondaryDNS, ruckusZDSystemAdminPassword=ruckusZDSystemAdminPassword)
