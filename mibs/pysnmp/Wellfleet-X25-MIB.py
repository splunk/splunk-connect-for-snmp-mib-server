#
# PySNMP MIB module Wellfleet-X25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-X25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Unsigned32, Integer32, ModuleIdentity, Counter32, MibIdentifier, TimeTicks, Bits, NotificationType, IpAddress, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Unsigned32", "Integer32", "ModuleIdentity", "Counter32", "MibIdentifier", "TimeTicks", "Bits", "NotificationType", "IpAddress", "Counter64", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfX25Group, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfX25Group")
wfX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 1))
wfX25Delete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25Delete.setStatus('mandatory')
wfX25Disable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25Disable.setStatus('mandatory')
wfX25State = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25State.setStatus('mandatory')
wfX25ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2), )
if mibBuilder.loadTexts: wfX25ServiceTable.setStatus('mandatory')
wfX25ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfX25ServiceSlot"), (0, "Wellfleet-X25-MIB", "wfX25ServiceConnector"), (0, "Wellfleet-X25-MIB", "wfX25ServiceLineNumber"), (0, "Wellfleet-X25-MIB", "wfX25ServiceLLIndex"), (0, "Wellfleet-X25-MIB", "wfX25ServiceCct"), (0, "Wellfleet-X25-MIB", "wfX25ServiceIndex"))
if mibBuilder.loadTexts: wfX25ServiceEntry.setStatus('mandatory')
wfX25ServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceDelete.setStatus('mandatory')
wfX25ServiceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceDisable.setStatus('mandatory')
wfX25ServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceSlot.setStatus('mandatory')
wfX25ServiceConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceConnector.setStatus('mandatory')
wfX25ServiceLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceLineNumber.setStatus('mandatory')
wfX25ServiceLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceLLIndex.setStatus('mandatory')
wfX25ServiceCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceCct.setStatus('mandatory')
wfX25ServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceIndex.setStatus('mandatory')
wfX25ServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("pdntype", 1), ("ddntype", 2), ("ptoptype", 4), ("npttype", 8), ("ipextype", 16), ("qllctype", 32), ("defaulttype", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceType.setStatus('mandatory')
wfX25ServiceConnRef = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceConnRef.setStatus('mandatory')
wfX25ServiceConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceConnId.setStatus('mandatory')
wfX25ServiceRemoteX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceRemoteX121Addr.setStatus('mandatory')
wfX25ServiceRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceRemoteIpAddr.setStatus('mandatory')
wfX25ServiceBCast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceBCast.setStatus('mandatory')
wfX25ServiceMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceMaxConn.setStatus('mandatory')
wfX25ServicePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("negot", 1), ("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServicePrecedence.setStatus('mandatory')
wfX25ServiceMaxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceMaxIdle.setStatus('mandatory')
wfX25ServiceCallRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceCallRetry.setStatus('mandatory')
wfX25ServiceFlowFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("negot", 1), ("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceFlowFacility.setStatus('mandatory')
wfX25ServiceWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceWinSize.setStatus('mandatory')
wfX25ServicePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("size16", 4), ("size32", 5), ("size64", 6), ("size128", 7), ("size256", 8), ("size512", 9), ("size1024", 10), ("size2048", 11), ("size4096", 12))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServicePktSize.setStatus('mandatory')
wfX25ServiceFastSelRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceFastSelRequest.setStatus('mandatory')
wfX25ServiceFastSelAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceFastSelAccept.setStatus('mandatory')
wfX25ServiceRevChRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceRevChRequest.setStatus('mandatory')
wfX25ServiceRevChAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceRevChAccept.setStatus('mandatory')
wfX25ServiceCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("basic", 2), ("ext", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceCugFormat.setStatus('mandatory')
wfX25ServiceCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("oa", 2), ("bilat", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceCugType.setStatus('mandatory')
wfX25ServiceCugNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceCugNum.setStatus('mandatory')
wfX25ServiceUserFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceUserFacility.setStatus('mandatory')
wfX25ServiceValid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceValid.setStatus('mandatory')
wfX25ServiceBFE = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceBFE.setStatus('mandatory')
wfX25ServiceForceCugZero = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceForceCugZero.setStatus('mandatory')
wfX25ServiceWcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceWcpEnable.setStatus('mandatory')
wfX25ServiceMUX = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceMUX.setStatus('mandatory')
wfX25ServicePtopCallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("local", 2), ("remote", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServicePtopCallRequest.setStatus('mandatory')
wfX25ServiceVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2))).clone('svc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceVcType.setStatus('mandatory')
wfX25ServicePvcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServicePvcLcn.setStatus('mandatory')
wfX25ServiceMacPoolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceMacPoolStart.setStatus('mandatory')
wfX25ServiceMacPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceMacPoolSize.setStatus('mandatory')
wfX25ServiceWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceWindowTimeout.setStatus('mandatory')
wfX25ServiceVcBurstThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceVcBurstThroughput.setStatus('mandatory')
wfX25ServiceVcBurstQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceVcBurstQDepth.setStatus('mandatory')
wfX25ServiceVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceVcPriority.setStatus('mandatory')
wfX25ServiceVcBurstQClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceVcBurstQClippedPkts.setStatus('mandatory')
wfX25ServiceVcBurstQPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceVcBurstQPktCnt.setStatus('mandatory')
wfX25ServiceVcBurstQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceVcBurstQHighWaterPkts.setStatus('mandatory')
wfX25ServiceVcPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceVcPktDrops.setStatus('mandatory')
wfX25ServicePlpPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServicePlpPktDrops.setStatus('mandatory')
wfX25ServiceBurstThrPerVc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25ServiceBurstThrPerVc.setStatus('mandatory')
wfX25ServiceBackupRecoveryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceBackupRecoveryDelay.setStatus('mandatory')
wfX25ServiceSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 51), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceSetupTime.setStatus('mandatory')
wfX25ServiceRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 52), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceRetryNumber.setStatus('mandatory')
wfX25BackupInitiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("last", 2))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25BackupInitiation.setStatus('mandatory')
wfX25ServiceEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 2, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25ServiceEntryName.setStatus('mandatory')
wfX25VcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4), )
if mibBuilder.loadTexts: wfX25VcTable.setStatus('mandatory')
wfX25VcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfX25VcSlotNum"), (0, "Wellfleet-X25-MIB", "wfX25VcConnector"), (0, "Wellfleet-X25-MIB", "wfX25VcLineNumber"), (0, "Wellfleet-X25-MIB", "wfX25VcLLIndex"), (0, "Wellfleet-X25-MIB", "wfX25VcCct"), (0, "Wellfleet-X25-MIB", "wfX25VcNumber"))
if mibBuilder.loadTexts: wfX25VcEntry.setStatus('mandatory')
wfX25VcSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcSlotNum.setStatus('mandatory')
wfX25VcConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcConnector.setStatus('mandatory')
wfX25VcLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcLineNumber.setStatus('mandatory')
wfX25VcLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcLLIndex.setStatus('mandatory')
wfX25VcCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcCct.setStatus('mandatory')
wfX25VcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcNumber.setStatus('mandatory')
wfX25VcDataTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcDataTxs.setStatus('mandatory')
wfX25VcInterruptTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcInterruptTxs.setStatus('mandatory')
wfX25VcResetTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcResetTxs.setStatus('mandatory')
wfX25VcRrTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRrTxs.setStatus('mandatory')
wfX25VcRnrTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRnrTxs.setStatus('mandatory')
wfX25VcRejectTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRejectTxs.setStatus('mandatory')
wfX25VcSegmentTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcSegmentTxs.setStatus('mandatory')
wfX25VcBytesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcBytesTxs.setStatus('mandatory')
wfX25VcIntBytesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcIntBytesTxs.setStatus('mandatory')
wfX25VcDataRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcDataRxs.setStatus('mandatory')
wfX25VcInterruptRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcInterruptRxs.setStatus('mandatory')
wfX25VcResetRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcResetRxs.setStatus('mandatory')
wfX25VcRrRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRrRxs.setStatus('mandatory')
wfX25VcRnrRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRnrRxs.setStatus('mandatory')
wfX25VcRejectRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRejectRxs.setStatus('mandatory')
wfX25VcSegmentRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcSegmentRxs.setStatus('mandatory')
wfX25VcBytesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcBytesRxs.setStatus('mandatory')
wfX25VcIntBytesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcIntBytesRxs.setStatus('mandatory')
wfX25VcApPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcApPktsDropped.setStatus('mandatory')
wfX25VcRemoteX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcRemoteX121Addr.setStatus('mandatory')
wfX25VcBurstQClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcBurstQClippedPkts.setStatus('mandatory')
wfX25VcBurstQPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcBurstQPktCnt.setStatus('mandatory')
wfX25VcBurstQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcBurstQHighWaterPkts.setStatus('mandatory')
wfX25VcPktsLargerThanBurstThrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcPktsLargerThanBurstThrCnt.setStatus('mandatory')
wfX25VcPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcPktDrops.setStatus('mandatory')
wfX25VcPlpPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcPlpPktDrops.setStatus('mandatory')
wfX25VcMbsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcMbsOutstanding.setStatus('mandatory')
wfX25VcMbsOutstandingPostTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcMbsOutstandingPostTx.setStatus('mandatory')
wfX25VcMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcMaxTx.setStatus('mandatory')
wfX25VcMbsQueueCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcMbsQueueCnt.setStatus('mandatory')
wfX25VcMbsQueueCntPostTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcMbsQueueCntPostTx.setStatus('mandatory')
wfX25VcTxQueueCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcTxQueueCnt.setStatus('mandatory')
wfX25VcTxQueueCntPostTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25VcTxQueueCntPostTx.setStatus('mandatory')
wfLapbPktTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5), )
if mibBuilder.loadTexts: wfLapbPktTable.setStatus('mandatory')
wfLapbPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfLapbPktSlotNum"), (0, "Wellfleet-X25-MIB", "wfLapbPktConnector"), (0, "Wellfleet-X25-MIB", "wfLapbPktLineNumber"), (0, "Wellfleet-X25-MIB", "wfLapbPktLLIndex"))
if mibBuilder.loadTexts: wfLapbPktEntry.setStatus('mandatory')
wfLapbPktDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDelete.setStatus('mandatory')
wfLapbPktDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDisable.setStatus('mandatory')
wfLapbPktSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktSlotNum.setStatus('mandatory')
wfLapbPktConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktConnector.setStatus('mandatory')
wfLapbPktLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktLineNumber.setStatus('mandatory')
wfLapbPktLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktLLIndex.setStatus('mandatory')
wfLapbPktLapbCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktLapbCct.setStatus('mandatory')
wfLapbPktLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktLinkId.setStatus('mandatory')
wfLapbPktLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktLineState.setStatus('mandatory')
wfLapbPktSeqSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("mod8", 8), ("mod128", 128))).clone('mod8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktSeqSize.setStatus('mandatory')
wfLapbPktMaxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktMaxWindow.setStatus('mandatory')
wfLapbPktMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("size16", 4), ("size32", 5), ("size64", 6), ("size128", 7), ("size256", 8), ("size512", 9), ("size1024", 10), ("size2048", 11), ("size4096", 12))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktMaxLength.setStatus('mandatory')
wfLapbPktMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("thrclass75", 3), ("thrclass150", 4), ("thrclass300", 5), ("thrclass600", 6), ("thrclass1200", 7), ("thrclass2400", 8), ("thrclass4800", 9), ("thrclass9600", 10), ("thrclass19200", 11), ("thrclass48k", 12), ("thrclass64k", 13))).clone('thrclass19200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktMaxThroughput.setStatus('mandatory')
wfLapbPktFlowCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktFlowCtl.setStatus('mandatory')
wfLapbPktThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktThroughput.setStatus('mandatory')
wfLapbPktUserIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktUserIdentity.setStatus('mandatory')
wfLapbPktInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktInCalls.setStatus('mandatory')
wfLapbPktOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktOutCalls.setStatus('mandatory')
wfLapbPktFastAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktFastAccept.setStatus('mandatory')
wfLapbPktReverseAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktReverseAccept.setStatus('mandatory')
wfLapbPktFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktFastSelect.setStatus('mandatory')
wfLapbPktReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktReverseCharging.setStatus('mandatory')
wfLapbPktCugSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 16, 32))).clone(namedValues=NamedValues(("off", 2), ("basic", 16), ("extended", 32))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktCugSelection.setStatus('mandatory')
wfLapbPktCugOA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 64))).clone(namedValues=NamedValues(("off", 2), ("cugoa", 64))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktCugOA.setStatus('mandatory')
wfLapbPktCugBilateral = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 128))).clone(namedValues=NamedValues(("off", 2), ("bilat", 128))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktCugBilateral.setStatus('mandatory')
wfLapbPktRpoaSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktRpoaSelection.setStatus('mandatory')
wfLapbPktChargeInform = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktChargeInform.setStatus('mandatory')
wfLapbPktTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktTransitDelay.setStatus('mandatory')
wfLapbPktFullAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktFullAddressing.setStatus('mandatory')
wfLapbPktAccFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 255, 103))).clone(namedValues=NamedValues(("basic", 2), ("allext", 255), ("defbas", 103))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktAccFormat.setStatus('mandatory')
wfLapbPktRelFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 255, 103))).clone(namedValues=NamedValues(("basic", 2), ("allext", 255), ("defext", 103))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktRelFormat.setStatus('mandatory')
wfLapbPktT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktT1.setStatus('mandatory')
wfLapbPktT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktT2.setStatus('mandatory')
wfLapbPktT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktT3.setStatus('mandatory')
wfLapbPktT4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktT4.setStatus('mandatory')
wfLapbPktIwcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktIwcCnt.setStatus('mandatory')
wfLapbPktIwcId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktIwcId.setStatus('mandatory')
wfLapbPktBwcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktBwcCnt.setStatus('mandatory')
wfLapbPktBwcId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktBwcId.setStatus('mandatory')
wfLapbPktOwcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktOwcCnt.setStatus('mandatory')
wfLapbPktOwcId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktOwcId.setStatus('mandatory')
wfLapbPktDefWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDefWindow.setStatus('mandatory')
wfLapbPktDefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("size16", 4), ("size32", 5), ("size64", 6), ("size128", 7), ("size256", 8), ("size512", 9), ("size1024", 10), ("size2048", 11), ("size4096", 12))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDefLength.setStatus('mandatory')
wfLapbPktDefClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 13)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDefClass.setStatus('mandatory')
wfLapbPktDxe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x25dtersta", 1), ("x25dte", 2), ("x25dce", 3), ("x25dtedxe", 4))).clone('x25dtersta')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDxe.setStatus('mandatory')
wfLapbPktConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(257, 258, 513, 514, 1025, 1026))).clone(namedValues=NamedValues(("dxe1980", 257), ("fsel1980", 258), ("dxe1984", 513), ("fsel1984", 514), ("dxe1988", 1025), ("fsel1988", 1026))).clone('dxe1988')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktConformance.setStatus('mandatory')
wfLapbPktStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 1))).clone(namedValues=NamedValues(("stdiso", 16), ("stddod", 32), ("stdnone", 1))).clone('stdnone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktStandard.setStatus('mandatory')
wfLapbPktNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktNetaddr.setStatus('mandatory')
wfLapbPktStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statson", 1), ("statsoff", 2))).clone('statsoff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktStatistics.setStatus('mandatory')
wfLapbPktNetaddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pdntype", 1), ("ddntype", 2), ("bfetype", 3))).clone('pdntype')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktNetaddrType.setStatus('mandatory')
wfLapbPktDDNIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktDDNIpAddr.setStatus('mandatory')
wfLapbPktPDNX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktPDNX121Addr.setStatus('mandatory')
wfLapbPktTxT5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktTxT5.setStatus('mandatory')
wfLapbPktUseDfltService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktUseDfltService.setStatus('mandatory')
wfLapbPktPVCCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktPVCCnt.setStatus('mandatory')
wfLapbPktPVCLowLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktPVCLowLcn.setStatus('mandatory')
wfLapbPktClientTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktClientTimer.setStatus('mandatory')
wfLapbPktPduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1600, 4096)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktPduSize.setStatus('mandatory')
wfLapbPktTranspacCauseCodeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktTranspacCauseCodeEnable.setStatus('mandatory')
wfLapbPktTxMbsQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktTxMbsQueueThreshold.setStatus('mandatory')
wfLapbPktBackupDebugLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("one", 1), ("debug", 4))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktBackupDebugLvl.setStatus('mandatory')
wfLapbPktBackupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 5, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbPktBackupEnable.setStatus('mandatory')
wfLapbPktStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6), )
if mibBuilder.loadTexts: wfLapbPktStatsTable.setStatus('mandatory')
wfLapbPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfLapbPktStatsSlotNum"), (0, "Wellfleet-X25-MIB", "wfLapbPktStatsConnector"), (0, "Wellfleet-X25-MIB", "wfLapbPktStatsLineNumber"), (0, "Wellfleet-X25-MIB", "wfLapbPktStatsLLIndex"))
if mibBuilder.loadTexts: wfLapbPktStatsEntry.setStatus('mandatory')
wfLapbPktStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsSlotNum.setStatus('mandatory')
wfLapbPktStatsConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsConnector.setStatus('mandatory')
wfLapbPktStatsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsLineNumber.setStatus('mandatory')
wfLapbPktStatsLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsLLIndex.setStatus('mandatory')
wfLapbPktStatsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsCct.setStatus('mandatory')
wfLapbPktStatsLineAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsLineAddress.setStatus('mandatory')
wfLapbPktStatsMaxVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsMaxVcs.setStatus('mandatory')
wfLapbPktStatsActiveVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsActiveVcs.setStatus('mandatory')
wfLapbPktStatsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsActiveMax.setStatus('mandatory')
wfLapbPktStatsTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsTotalConnections.setStatus('mandatory')
wfLapbPktStatsFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsFailedConnections.setStatus('mandatory')
wfLapbPktStatsNormalDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsNormalDisconnects.setStatus('mandatory')
wfLapbPktStatsAbnormalDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsAbnormalDisconnects.setStatus('mandatory')
wfLapbPktStatsDataTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsDataTxs.setStatus('mandatory')
wfLapbPktStatsInterruptTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsInterruptTxs.setStatus('mandatory')
wfLapbPktStatsResetTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsResetTxs.setStatus('mandatory')
wfLapbPktStatsRrTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRrTxs.setStatus('mandatory')
wfLapbPktStatsRnrTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRnrTxs.setStatus('mandatory')
wfLapbPktStatsRejectTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRejectTxs.setStatus('mandatory')
wfLapbPktStatsRestartTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRestartTxs.setStatus('mandatory')
wfLapbPktStatsDiagTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsDiagTxs.setStatus('mandatory')
wfLapbPktStatsSegmentTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsSegmentTxs.setStatus('mandatory')
wfLapbPktStatsBytesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsBytesTxs.setStatus('mandatory')
wfLapbPktStatsIntBytesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsIntBytesTxs.setStatus('mandatory')
wfLapbPktStatsDataRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsDataRxs.setStatus('mandatory')
wfLapbPktStatsInterruptRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsInterruptRxs.setStatus('mandatory')
wfLapbPktStatsResetRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsResetRxs.setStatus('mandatory')
wfLapbPktStatsRrRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRrRxs.setStatus('mandatory')
wfLapbPktStatsRnrRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRnrRxs.setStatus('mandatory')
wfLapbPktStatsRejectRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRejectRxs.setStatus('mandatory')
wfLapbPktStatsRestartRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsRestartRxs.setStatus('mandatory')
wfLapbPktStatsDiagRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsDiagRxs.setStatus('mandatory')
wfLapbPktStatsSegmentRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsSegmentRxs.setStatus('mandatory')
wfLapbPktStatsBytesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsBytesRxs.setStatus('mandatory')
wfLapbPktStatsIntBytesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsIntBytesRxs.setStatus('mandatory')
wfLapbPktStatsOnOffSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbPktStatsOnOffSwitch.setStatus('mandatory')
wfX25PvcServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7), )
if mibBuilder.loadTexts: wfX25PvcServiceTable.setStatus('mandatory')
wfX25PvcServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfX25SlotNum"), (0, "Wellfleet-X25-MIB", "wfX25Connector"), (0, "Wellfleet-X25-MIB", "wfX25LineNumber"), (0, "Wellfleet-X25-MIB", "wfX25LLIndex"), (0, "Wellfleet-X25-MIB", "wfX25PvcServiceCct"), (0, "Wellfleet-X25-MIB", "wfX25PvcServiceIndex"))
if mibBuilder.loadTexts: wfX25PvcServiceEntry.setStatus('mandatory')
wfX25PvcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcDelete.setStatus('mandatory')
wfX25PvcDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcDisable.setStatus('mandatory')
wfX25SlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25SlotNum.setStatus('mandatory')
wfX25Connector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25Connector.setStatus('mandatory')
wfX25LineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25LineNumber.setStatus('mandatory')
wfX25LLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25LLIndex.setStatus('mandatory')
wfX25PvcServiceCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PvcServiceCct.setStatus('mandatory')
wfX25PvcServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PvcServiceIndex.setStatus('mandatory')
wfX25PvcServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("pdntype", 1), ("ddntype", 2), ("ptoptype", 4), ("npttype", 8), ("ipextype", 16), ("qllctype", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcServiceType.setStatus('mandatory')
wfX25PvcRxDefWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcRxDefWindow.setStatus('mandatory')
wfX25PvcTxDefWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcTxDefWindow.setStatus('mandatory')
wfX25PvcRxDefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("size16", 4), ("size32", 5), ("size64", 6), ("size128", 7), ("size256", 8), ("size512", 9), ("size1024", 10), ("size2048", 11), ("size4096", 12))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcRxDefLength.setStatus('mandatory')
wfX25PvcTxDefLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("size16", 4), ("size32", 5), ("size64", 6), ("size128", 7), ("size256", 8), ("size512", 9), ("size1024", 10), ("size2048", 11), ("size4096", 12))).clone('size128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcTxDefLength.setStatus('mandatory')
wfX25PvcRxDefClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("thrclass75", 3), ("thrclass150", 4), ("thrclass300", 5), ("thrclass600", 6), ("thrclass1200", 7), ("thrclass2400", 8), ("thrclass4800", 9), ("thrclass9600", 10), ("thrclass19200", 11), ("thrclass48k", 12), ("thrclass64k", 13))).clone('thrclass19200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcRxDefClass.setStatus('mandatory')
wfX25PvcTxDefClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("thrclass75", 3), ("thrclass150", 4), ("thrclass300", 5), ("thrclass600", 6), ("thrclass1200", 7), ("thrclass2400", 8), ("thrclass4800", 9), ("thrclass9600", 10), ("thrclass19200", 11), ("thrclass48k", 12), ("thrclass64k", 13))).clone('thrclass19200')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PvcTxDefClass.setStatus('mandatory')
wfX25QllcAddrMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8), )
if mibBuilder.loadTexts: wfX25QllcAddrMapTable.setStatus('mandatory')
wfX25QllcAddrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1), ).setIndexNames((0, "Wellfleet-X25-MIB", "wfX25QllcAddrMapCct"), (0, "Wellfleet-X25-MIB", "wfX25QllcAddrMapIndex"))
if mibBuilder.loadTexts: wfX25QllcAddrMapEntry.setStatus('mandatory')
wfX25QllcAddrMapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapDelete.setStatus('mandatory')
wfX25QllcAddrMapDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapDisable.setStatus('mandatory')
wfX25QllcAddrMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("notactive", 2), ("notpresent", 3))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25QllcAddrMapState.setStatus('mandatory')
wfX25QllcAddrMapCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25QllcAddrMapCct.setStatus('mandatory')
wfX25QllcAddrMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25QllcAddrMapIndex.setStatus('mandatory')
wfX25QllcAddrMapPartnerX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapPartnerX121.setStatus('mandatory')
wfX25QllcAddrMapAdjacentX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapAdjacentX121.setStatus('mandatory')
wfX25QllcAddrMapPid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(195)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapPid.setStatus('mandatory')
wfX25QllcAddrMapPartnerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapPartnerMac.setStatus('mandatory')
wfX25QllcAddrMapPartnerSap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapPartnerSap.setStatus('mandatory')
wfX25QllcAddrMapAdjacentMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapAdjacentMac.setStatus('mandatory')
wfX25QllcAddrMapAdjacentSap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapAdjacentSap.setStatus('mandatory')
wfX25QllcAddrMapOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapOptions.setStatus('mandatory')
wfX25QllcAddrMapTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapTrace.setStatus('mandatory')
wfX25QllcAddrMapPuType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pu21", 1), ("pu20", 2))).clone('pu20')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapPuType.setStatus('obsolete')
wfX25QllcAddrMapGenXid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapGenXid.setStatus('mandatory')
wfX25QllcAddrMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapNodeId.setStatus('obsolete')
wfX25QllcAddrMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 4, 8, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25QllcAddrMapName.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-X25-MIB", wfX25VcMaxTx=wfX25VcMaxTx, wfLapbPktStatsIntBytesTxs=wfLapbPktStatsIntBytesTxs, wfX25ServiceVcBurstQClippedPkts=wfX25ServiceVcBurstQClippedPkts, wfX25QllcAddrMapPid=wfX25QllcAddrMapPid, wfX25VcTable=wfX25VcTable, wfLapbPktCugOA=wfLapbPktCugOA, wfX25ServiceVcBurstQHighWaterPkts=wfX25ServiceVcBurstQHighWaterPkts, wfX25ServiceFlowFacility=wfX25ServiceFlowFacility, wfX25=wfX25, wfX25VcMbsOutstandingPostTx=wfX25VcMbsOutstandingPostTx, wfLapbPktClientTimer=wfLapbPktClientTimer, wfLapbPktReverseCharging=wfLapbPktReverseCharging, wfX25State=wfX25State, wfX25ServiceCugNum=wfX25ServiceCugNum, wfX25ServiceWinSize=wfX25ServiceWinSize, wfX25PvcServiceCct=wfX25PvcServiceCct, wfLapbPktMaxThroughput=wfLapbPktMaxThroughput, wfLapbPktBwcCnt=wfLapbPktBwcCnt, wfX25ServiceRevChRequest=wfX25ServiceRevChRequest, wfX25QllcAddrMapDelete=wfX25QllcAddrMapDelete, wfX25ServiceRetryNumber=wfX25ServiceRetryNumber, wfX25ServiceForceCugZero=wfX25ServiceForceCugZero, wfX25VcLineNumber=wfX25VcLineNumber, wfX25ServicePrecedence=wfX25ServicePrecedence, wfLapbPktDDNIpAddr=wfLapbPktDDNIpAddr, wfX25BackupInitiation=wfX25BackupInitiation, wfLapbPktConformance=wfLapbPktConformance, wfX25Disable=wfX25Disable, wfLapbPktStatsEntry=wfLapbPktStatsEntry, wfX25ServiceCugType=wfX25ServiceCugType, wfX25ServiceVcType=wfX25ServiceVcType, wfX25QllcAddrMapTable=wfX25QllcAddrMapTable, wfX25PvcRxDefClass=wfX25PvcRxDefClass, wfX25ServiceVcPktDrops=wfX25ServiceVcPktDrops, wfLapbPktTxMbsQueueThreshold=wfLapbPktTxMbsQueueThreshold, wfLapbPktInCalls=wfLapbPktInCalls, wfLapbPktStatsSegmentTxs=wfLapbPktStatsSegmentTxs, wfX25ServiceBurstThrPerVc=wfX25ServiceBurstThrPerVc, wfX25ServiceLineNumber=wfX25ServiceLineNumber, wfX25ServiceVcBurstQDepth=wfX25ServiceVcBurstQDepth, wfLapbPktStatsInterruptRxs=wfLapbPktStatsInterruptRxs, wfX25QllcAddrMapAdjacentX121=wfX25QllcAddrMapAdjacentX121, wfX25ServicePvcLcn=wfX25ServicePvcLcn, wfX25VcRnrTxs=wfX25VcRnrTxs, wfX25VcApPktsDropped=wfX25VcApPktsDropped, wfX25VcLLIndex=wfX25VcLLIndex, wfLapbPktNetaddrType=wfLapbPktNetaddrType, wfLapbPktStatistics=wfLapbPktStatistics, wfLapbPktStatsAbnormalDisconnects=wfLapbPktStatsAbnormalDisconnects, wfLapbPktStatsRejectRxs=wfLapbPktStatsRejectRxs, wfX25QllcAddrMapCct=wfX25QllcAddrMapCct, wfX25VcInterruptTxs=wfX25VcInterruptTxs, wfX25VcSegmentRxs=wfX25VcSegmentRxs, wfX25QllcAddrMapDisable=wfX25QllcAddrMapDisable, wfX25ServiceCallRetry=wfX25ServiceCallRetry, wfX25ServiceUserFacility=wfX25ServiceUserFacility, wfX25QllcAddrMapTrace=wfX25QllcAddrMapTrace, wfX25VcIntBytesRxs=wfX25VcIntBytesRxs, wfLapbPktRelFormat=wfLapbPktRelFormat, wfX25PvcServiceType=wfX25PvcServiceType, wfLapbPktLineState=wfLapbPktLineState, wfX25PvcServiceTable=wfX25PvcServiceTable, wfLapbPktFastSelect=wfLapbPktFastSelect, wfX25VcRejectRxs=wfX25VcRejectRxs, wfLapbPktStatsSlotNum=wfLapbPktStatsSlotNum, wfX25Delete=wfX25Delete, wfX25ServiceWindowTimeout=wfX25ServiceWindowTimeout, wfLapbPktStatsNormalDisconnects=wfLapbPktStatsNormalDisconnects, wfX25QllcAddrMapState=wfX25QllcAddrMapState, wfX25ServiceRevChAccept=wfX25ServiceRevChAccept, wfX25ServicePktSize=wfX25ServicePktSize, wfX25VcEntry=wfX25VcEntry, wfLapbPktMaxWindow=wfLapbPktMaxWindow, wfX25VcBurstQHighWaterPkts=wfX25VcBurstQHighWaterPkts, wfLapbPktT1=wfLapbPktT1, wfLapbPktLinkId=wfLapbPktLinkId, wfLapbPktDefClass=wfLapbPktDefClass, wfLapbPktSlotNum=wfLapbPktSlotNum, wfX25VcPktsLargerThanBurstThrCnt=wfX25VcPktsLargerThanBurstThrCnt, wfLapbPktBackupDebugLvl=wfLapbPktBackupDebugLvl, wfLapbPktStatsIntBytesRxs=wfLapbPktStatsIntBytesRxs, wfX25ServiceDisable=wfX25ServiceDisable, wfLapbPktFullAddressing=wfLapbPktFullAddressing, wfX25ServiceVcBurstQPktCnt=wfX25ServiceVcBurstQPktCnt, wfX25PvcServiceEntry=wfX25PvcServiceEntry, wfLapbPktIwcCnt=wfLapbPktIwcCnt, wfX25VcDataTxs=wfX25VcDataTxs, wfLapbPktEntry=wfLapbPktEntry, wfLapbPktDefWindow=wfLapbPktDefWindow, wfLapbPktDefLength=wfLapbPktDefLength, wfLapbPktPVCCnt=wfLapbPktPVCCnt, wfLapbPktFastAccept=wfLapbPktFastAccept, wfX25ServicePlpPktDrops=wfX25ServicePlpPktDrops, wfX25VcCct=wfX25VcCct, wfLapbPktDxe=wfLapbPktDxe, wfX25QllcAddrMapNodeId=wfX25QllcAddrMapNodeId, wfX25VcMbsOutstanding=wfX25VcMbsOutstanding, wfLapbPktStatsResetTxs=wfLapbPktStatsResetTxs, wfX25ServiceConnector=wfX25ServiceConnector, wfLapbPktStatsLineAddress=wfLapbPktStatsLineAddress, wfX25QllcAddrMapPartnerX121=wfX25QllcAddrMapPartnerX121, wfX25VcRrRxs=wfX25VcRrRxs, wfX25QllcAddrMapEntry=wfX25QllcAddrMapEntry, wfX25VcBurstQClippedPkts=wfX25VcBurstQClippedPkts, wfX25VcMbsQueueCnt=wfX25VcMbsQueueCnt, wfLapbPktFlowCtl=wfLapbPktFlowCtl, wfX25QllcAddrMapPartnerSap=wfX25QllcAddrMapPartnerSap, wfX25ServiceEntry=wfX25ServiceEntry, wfX25QllcAddrMapGenXid=wfX25QllcAddrMapGenXid, wfLapbPktStatsRestartRxs=wfLapbPktStatsRestartRxs, wfX25ServiceFastSelRequest=wfX25ServiceFastSelRequest, wfX25VcResetRxs=wfX25VcResetRxs, wfX25QllcAddrMapPartnerMac=wfX25QllcAddrMapPartnerMac, wfLapbPktChargeInform=wfLapbPktChargeInform, wfLapbPktStatsBytesRxs=wfLapbPktStatsBytesRxs, wfX25VcDataRxs=wfX25VcDataRxs, wfX25VcNumber=wfX25VcNumber, wfX25VcResetTxs=wfX25VcResetTxs, wfLapbPktDisable=wfLapbPktDisable, wfLapbPktUserIdentity=wfLapbPktUserIdentity, wfLapbPktLapbCct=wfLapbPktLapbCct, wfLapbPktReverseAccept=wfLapbPktReverseAccept, wfX25ServiceMaxConn=wfX25ServiceMaxConn, wfLapbPktStatsRestartTxs=wfLapbPktStatsRestartTxs, wfX25VcTxQueueCntPostTx=wfX25VcTxQueueCntPostTx, wfX25ServiceVcBurstThroughput=wfX25ServiceVcBurstThroughput, wfX25VcRemoteX121Addr=wfX25VcRemoteX121Addr, wfX25ServiceBackupRecoveryDelay=wfX25ServiceBackupRecoveryDelay, wfLapbPktStandard=wfLapbPktStandard, wfLapbPktConnector=wfLapbPktConnector, wfX25VcSegmentTxs=wfX25VcSegmentTxs, wfLapbPktStatsRrTxs=wfLapbPktStatsRrTxs, wfLapbPktStatsOnOffSwitch=wfLapbPktStatsOnOffSwitch, wfLapbPktT3=wfLapbPktT3, wfX25PvcTxDefWindow=wfX25PvcTxDefWindow, wfX25ServiceBCast=wfX25ServiceBCast, wfLapbPktCugBilateral=wfLapbPktCugBilateral, wfX25ServiceEntryName=wfX25ServiceEntryName, wfX25ServiceVcPriority=wfX25ServiceVcPriority, wfLapbPktStatsDataRxs=wfLapbPktStatsDataRxs, wfX25PvcDisable=wfX25PvcDisable, wfLapbPktPDNX121Addr=wfLapbPktPDNX121Addr, wfLapbPktBwcId=wfLapbPktBwcId, wfLapbPktStatsBytesTxs=wfLapbPktStatsBytesTxs, wfLapbPktStatsActiveMax=wfLapbPktStatsActiveMax, wfLapbPktStatsTable=wfLapbPktStatsTable, wfX25ServiceWcpEnable=wfX25ServiceWcpEnable, wfLapbPktStatsDiagRxs=wfLapbPktStatsDiagRxs, wfX25ServiceFastSelAccept=wfX25ServiceFastSelAccept, wfX25SlotNum=wfX25SlotNum, wfLapbPktStatsCct=wfLapbPktStatsCct, wfX25QllcAddrMapAdjacentMac=wfX25QllcAddrMapAdjacentMac, wfLapbPktStatsLLIndex=wfLapbPktStatsLLIndex, wfX25ServiceDelete=wfX25ServiceDelete, wfLapbPktTranspacCauseCodeEnable=wfLapbPktTranspacCauseCodeEnable, wfLapbPktStatsTotalConnections=wfLapbPktStatsTotalConnections, wfX25PvcTxDefClass=wfX25PvcTxDefClass, wfX25PvcDelete=wfX25PvcDelete, wfX25VcSlotNum=wfX25VcSlotNum, wfX25VcBytesRxs=wfX25VcBytesRxs, wfLapbPktStatsRejectTxs=wfLapbPktStatsRejectTxs, wfLapbPktDelete=wfLapbPktDelete, wfLapbPktTable=wfLapbPktTable, wfLapbPktTxT5=wfLapbPktTxT5, wfX25VcBytesTxs=wfX25VcBytesTxs, wfX25QllcAddrMapPuType=wfX25QllcAddrMapPuType, wfX25ServicePtopCallRequest=wfX25ServicePtopCallRequest, wfLapbPktTransitDelay=wfLapbPktTransitDelay, wfLapbPktStatsResetRxs=wfLapbPktStatsResetRxs, wfLapbPktPduSize=wfLapbPktPduSize, wfX25ServiceCugFormat=wfX25ServiceCugFormat, wfX25ServiceSlot=wfX25ServiceSlot, wfX25VcIntBytesTxs=wfX25VcIntBytesTxs, wfLapbPktUseDfltService=wfLapbPktUseDfltService, wfLapbPktLLIndex=wfLapbPktLLIndex, wfLapbPktStatsDiagTxs=wfLapbPktStatsDiagTxs, wfLapbPktStatsSegmentRxs=wfLapbPktStatsSegmentRxs, wfLapbPktCugSelection=wfLapbPktCugSelection, wfX25VcPlpPktDrops=wfX25VcPlpPktDrops, wfLapbPktSeqSize=wfLapbPktSeqSize, wfLapbPktThroughput=wfLapbPktThroughput, wfX25LineNumber=wfX25LineNumber, wfLapbPktStatsConnector=wfLapbPktStatsConnector, wfLapbPktStatsRnrTxs=wfLapbPktStatsRnrTxs, wfX25ServiceCct=wfX25ServiceCct, wfLapbPktRpoaSelection=wfLapbPktRpoaSelection, wfX25QllcAddrMapIndex=wfX25QllcAddrMapIndex, wfLapbPktStatsFailedConnections=wfLapbPktStatsFailedConnections, wfX25Connector=wfX25Connector, wfX25ServiceType=wfX25ServiceType, wfX25ServiceConnRef=wfX25ServiceConnRef, wfX25PvcRxDefWindow=wfX25PvcRxDefWindow, wfX25VcBurstQPktCnt=wfX25VcBurstQPktCnt, wfLapbPktAccFormat=wfLapbPktAccFormat, wfLapbPktStatsActiveVcs=wfLapbPktStatsActiveVcs, wfX25ServiceIndex=wfX25ServiceIndex, wfX25VcTxQueueCnt=wfX25VcTxQueueCnt, wfX25ServiceLLIndex=wfX25ServiceLLIndex, wfLapbPktStatsRrRxs=wfLapbPktStatsRrRxs, wfLapbPktT4=wfLapbPktT4, wfLapbPktOwcId=wfLapbPktOwcId, wfX25VcInterruptRxs=wfX25VcInterruptRxs, wfX25QllcAddrMapName=wfX25QllcAddrMapName, wfX25VcPktDrops=wfX25VcPktDrops, wfLapbPktStatsLineNumber=wfLapbPktStatsLineNumber, wfLapbPktStatsDataTxs=wfLapbPktStatsDataTxs, wfX25ServiceMUX=wfX25ServiceMUX, wfX25VcMbsQueueCntPostTx=wfX25VcMbsQueueCntPostTx, wfLapbPktStatsRnrRxs=wfLapbPktStatsRnrRxs, wfX25LLIndex=wfX25LLIndex, wfLapbPktOutCalls=wfLapbPktOutCalls, wfX25ServiceRemoteX121Addr=wfX25ServiceRemoteX121Addr, wfX25QllcAddrMapOptions=wfX25QllcAddrMapOptions, wfLapbPktPVCLowLcn=wfLapbPktPVCLowLcn, wfX25VcRnrRxs=wfX25VcRnrRxs, wfX25VcConnector=wfX25VcConnector, wfLapbPktBackupEnable=wfLapbPktBackupEnable, wfX25PvcTxDefLength=wfX25PvcTxDefLength, wfLapbPktStatsInterruptTxs=wfLapbPktStatsInterruptTxs, wfX25ServiceValid=wfX25ServiceValid, wfLapbPktOwcCnt=wfLapbPktOwcCnt, wfX25VcRrTxs=wfX25VcRrTxs, wfX25ServiceMaxIdle=wfX25ServiceMaxIdle, wfX25PvcRxDefLength=wfX25PvcRxDefLength, wfX25ServiceTable=wfX25ServiceTable, wfX25ServiceMacPoolStart=wfX25ServiceMacPoolStart, wfLapbPktIwcId=wfLapbPktIwcId, wfX25ServiceConnId=wfX25ServiceConnId, wfX25VcRejectTxs=wfX25VcRejectTxs, wfLapbPktLineNumber=wfLapbPktLineNumber, wfX25QllcAddrMapAdjacentSap=wfX25QllcAddrMapAdjacentSap, wfX25ServiceSetupTime=wfX25ServiceSetupTime, wfX25ServiceMacPoolSize=wfX25ServiceMacPoolSize, wfX25ServiceBFE=wfX25ServiceBFE, wfX25PvcServiceIndex=wfX25PvcServiceIndex, wfLapbPktT2=wfLapbPktT2, wfX25ServiceRemoteIpAddr=wfX25ServiceRemoteIpAddr, wfLapbPktStatsMaxVcs=wfLapbPktStatsMaxVcs, wfLapbPktMaxLength=wfLapbPktMaxLength, wfLapbPktNetaddr=wfLapbPktNetaddr)
