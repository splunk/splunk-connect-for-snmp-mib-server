#
# PySNMP MIB module APPIAN-PPORT-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, AcPortNumber, AcSlotNumber, AcOpStatus, AcAdminStatus, acPport = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "AcPortNumber", "AcSlotNumber", "AcOpStatus", "AcAdminStatus", "acPport")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, Bits, TimeTicks, NotificationType, Counter64, iso, Counter32, Integer32, IpAddress, MibIdentifier, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Bits", "TimeTicks", "NotificationType", "Counter64", "iso", "Counter32", "Integer32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "PhysAddress", "DisplayString")
acEnet = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3))
acEnet.setRevisions(('1900-02-23 16:00',))
if mibBuilder.loadTexts: acEnet.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acEnet.setOrganization('Appian Communications, Inc.')
class AcEnetSpeed(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mb10", 1), ("mb100", 2), ("gb1", 3))

class AcEnetDuplexity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("full", 1), ("half", 2))

class AcEnetLinkState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("link", 1), ("nolink", 2))

acEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1), )
if mibBuilder.loadTexts: acEnetStatsTable.setStatus('current')
acEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsNodeId"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsSlot"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsPort"))
if mibBuilder.loadTexts: acEnetStatsEntry.setStatus('current')
acEnetStatsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsNodeId.setStatus('current')
acEnetStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsSlot.setStatus('current')
acEnetStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsPort.setStatus('current')
acEnetStatsPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPktsRx.setStatus('current')
acEnetStatsPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPktsTx.setStatus('current')
acEnetStatsOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOctetsRx.setStatus('current')
acEnetStatsOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOctetsTx.setStatus('current')
acEnetStatsBcastPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsBcastPktsRx.setStatus('current')
acEnetStatsBcastPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsBcastPktsTx.setStatus('current')
acEnetStatsMcastPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsMcastPktsRx.setStatus('current')
acEnetStatsMcastPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsMcastPktsTx.setStatus('current')
acEnetStatsCrcAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCrcAlignErrors.setStatus('current')
acEnetStatsUndersizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsUndersizedPkts.setStatus('current')
acEnetStatsOversizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOversizedPkts.setStatus('current')
acEnetStatsFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsFragmentedPkts.setStatus('current')
acEnetStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsJabbers.setStatus('current')
acEnetStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCollisions.setStatus('current')
acEnetStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts64Octets.setStatus('current')
acEnetStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts65to127Octets.setStatus('current')
acEnetStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts128to255Octets.setStatus('current')
acEnetStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts256to511Octets.setStatus('current')
acEnetStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts512to1023Octets.setStatus('current')
acEnetStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts1024to1518Octets.setStatus('current')
acEnetStatsCurrentRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCurrentRxBandwidth.setStatus('current')
acEnetStatsCurrentTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCurrentTxBandwidth.setStatus('current')
acEnetStatsPausePktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPausePktsRx.setStatus('current')
acEnetStatsPausePktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPausePktsTx.setStatus('current')
acEnetStatsPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts1519to1522Octets.setStatus('current')
acEnetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2), )
if mibBuilder.loadTexts: acEnetCfgTable.setStatus('current')
acEnetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetCfgEntry.setStatus('current')
acEnetCfgNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgNodeId.setStatus('current')
acEnetCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgSlot.setStatus('current')
acEnetCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgPort.setStatus('current')
acEnetCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgAdminStatus.setStatus('current')
acEnetCfgOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgOpStatus.setStatus('current')
acEnetCfgOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgOpCode.setStatus('current')
acEnetCfgStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgStatsReset.setStatus('current')
acEnetCfgMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("mbe", 1), ("gbe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgMediaType.setStatus('current')
acEnetCfgPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 9), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgPhysicalAddress.setStatus('current')
acEnetCfgActiveMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 10), AcSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgActiveMediaSlot.setStatus('current')
acEnetCfgStandbyMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 11), AcSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgStandbyMediaSlot.setStatus('current')
acEnetCfgMultiServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgMultiServiceEnable.setStatus('current')
acEnetCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 13), AcEnetSpeed().clone('mb100')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgSpeed.setStatus('current')
acEnetCfgDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 14), AcEnetDuplexity().clone('full')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgDuplexity.setStatus('current')
acEnetCfgCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 15), AcEnetSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgCurrentSpeed.setStatus('current')
acEnetCfgCurrentDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 16), AcEnetDuplexity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgCurrentDuplexity.setStatus('current')
acEnetCfgInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Ethernet Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgInterfaceName.setStatus('current')
acEnetCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 18), AcEnetLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgLinkState.setStatus('current')
acEnetCfgAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 19), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgAutoNegotiate.setStatus('current')
acEnetCfgPauseAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEnetCfgPauseAdminMode.setStatus('current')
acEnetCfgPauseOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgPauseOperMode.setStatus('current')
acEnetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0))
acEnetLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetLinkDownTrap.setStatus('current')
acEnetLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetLinkUpTrap.setStatus('current')
acEnetStatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetStatsResetTrap.setStatus('current')
acEnetFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgOpCode"))
if mibBuilder.loadTexts: acEnetFailoverTrap.setStatus('current')
acEnetCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgOpCode"))
if mibBuilder.loadTexts: acEnetCfgErrorTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-PPORT-ETHERNET-MIB", acEnetStatsMcastPktsRx=acEnetStatsMcastPktsRx, acEnetCfgMultiServiceEnable=acEnetCfgMultiServiceEnable, acEnet=acEnet, acEnetStatsBcastPktsRx=acEnetStatsBcastPktsRx, acEnetStatsPausePktsRx=acEnetStatsPausePktsRx, acEnetStatsOctetsTx=acEnetStatsOctetsTx, acEnetStatsPausePktsTx=acEnetStatsPausePktsTx, acEnetStatsPkts128to255Octets=acEnetStatsPkts128to255Octets, acEnetCfgPhysicalAddress=acEnetCfgPhysicalAddress, acEnetStatsEntry=acEnetStatsEntry, acEnetCfgAdminStatus=acEnetCfgAdminStatus, acEnetCfgStatsReset=acEnetCfgStatsReset, acEnetStatsTable=acEnetStatsTable, acEnetStatsPktsTx=acEnetStatsPktsTx, acEnetCfgStandbyMediaSlot=acEnetCfgStandbyMediaSlot, acEnetStatsFragmentedPkts=acEnetStatsFragmentedPkts, acEnetStatsPktsRx=acEnetStatsPktsRx, acEnetCfgSpeed=acEnetCfgSpeed, acEnetStatsResetTrap=acEnetStatsResetTrap, acEnetStatsBcastPktsTx=acEnetStatsBcastPktsTx, acEnetCfgMediaType=acEnetCfgMediaType, acEnetCfgCurrentSpeed=acEnetCfgCurrentSpeed, acEnetLinkDownTrap=acEnetLinkDownTrap, acEnetStatsNodeId=acEnetStatsNodeId, acEnetStatsPkts256to511Octets=acEnetStatsPkts256to511Octets, acEnetCfgLinkState=acEnetCfgLinkState, acEnetLinkUpTrap=acEnetLinkUpTrap, acEnetStatsCollisions=acEnetStatsCollisions, acEnetStatsOctetsRx=acEnetStatsOctetsRx, acEnetCfgPort=acEnetCfgPort, acEnetCfgDuplexity=acEnetCfgDuplexity, AcEnetLinkState=AcEnetLinkState, acEnetStatsPkts64Octets=acEnetStatsPkts64Octets, acEnetStatsCurrentRxBandwidth=acEnetStatsCurrentRxBandwidth, acEnetStatsUndersizedPkts=acEnetStatsUndersizedPkts, acEnetFailoverTrap=acEnetFailoverTrap, acEnetStatsJabbers=acEnetStatsJabbers, acEnetCfgOpCode=acEnetCfgOpCode, acEnetStatsCrcAlignErrors=acEnetStatsCrcAlignErrors, acEnetCfgEntry=acEnetCfgEntry, acEnetStatsPkts1024to1518Octets=acEnetStatsPkts1024to1518Octets, acEnetStatsOversizedPkts=acEnetStatsOversizedPkts, acEnetStatsCurrentTxBandwidth=acEnetStatsCurrentTxBandwidth, acEnetCfgCurrentDuplexity=acEnetCfgCurrentDuplexity, acEnetCfgSlot=acEnetCfgSlot, acEnetCfgOpStatus=acEnetCfgOpStatus, acEnetCfgPauseOperMode=acEnetCfgPauseOperMode, AcEnetSpeed=AcEnetSpeed, acEnetStatsPkts1519to1522Octets=acEnetStatsPkts1519to1522Octets, acEnetCfgPauseAdminMode=acEnetCfgPauseAdminMode, acEnetCfgTable=acEnetCfgTable, acEnetCfgInterfaceName=acEnetCfgInterfaceName, acEnetTraps=acEnetTraps, acEnetStatsMcastPktsTx=acEnetStatsMcastPktsTx, acEnetStatsPkts512to1023Octets=acEnetStatsPkts512to1023Octets, acEnetStatsPort=acEnetStatsPort, acEnetCfgAutoNegotiate=acEnetCfgAutoNegotiate, acEnetStatsSlot=acEnetStatsSlot, acEnetCfgNodeId=acEnetCfgNodeId, acEnetStatsPkts65to127Octets=acEnetStatsPkts65to127Octets, acEnetCfgActiveMediaSlot=acEnetCfgActiveMediaSlot, PYSNMP_MODULE_ID=acEnet, AcEnetDuplexity=AcEnetDuplexity, acEnetCfgErrorTrap=acEnetCfgErrorTrap)
