#
# PySNMP MIB module PANDATEL-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-MODEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Bits, ObjectIdentity, NotificationType, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, enterprises, Counter64, Integer32, TimeTicks, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Bits", "ObjectIdentity", "NotificationType", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "enterprises", "Counter64", "Integer32", "TimeTicks", "Gauge32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pandatel = MibIdentifier((1, 3, 6, 1, 4, 1, 760))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1))
wan_products = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2)).setLabel("wan-products")
mdm_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1)).setLabel("mdm-mgmt")
mdmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1))
mdmInstalledRacks = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInstalledRacks.setStatus('mandatory')
mdmInstalledModems = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInstalledModems.setStatus('mandatory')
mdmLoopModeTraps = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLoopModeTraps.setStatus('mandatory')
mdmCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCurrentDate.setStatus('mandatory')
mdmCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCurrentTime.setStatus('mandatory')
mdmRackTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: mdmRackTable.setStatus('mandatory')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rackRack"))
if mibBuilder.loadTexts: rackEntry.setStatus('mandatory')
rackRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackRack.setStatus('mandatory')
rackType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("rack-10s-3hu", 2), ("rack-12s-3hu", 3), ("rack-10s-6hu", 4), ("rack-6s-9s-6hu", 5), ("device-stack-15s", 6), ("rack-8s-4hu", 7), ("rack-10s-2c-6hu", 8), ("hs-rack-10s-3hu", 9), ("rack-8s-2c-6hu", 10), ("hs-rack-3s-1c-3hu", 11), ("rack-1s-1c-1hu", 12), ("rack-3s-1c-1hu", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackType.setStatus('mandatory')
rackDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackDescription.setStatus('mandatory')
rackModemSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackModemSlots.setStatus('mandatory')
rackModems = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackModems.setStatus('mandatory')
rackPowerSupplySlots = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(999))).clone(namedValues=NamedValues(("unknown", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackPowerSupplySlots.setStatus('mandatory')
rackPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(999))).clone(namedValues=NamedValues(("unknown", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rackPowerSupplies.setStatus('mandatory')
mdmModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: mdmModemTable.setStatus('mandatory')
modemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "mdmRack"), (0, "PANDATEL-MODEM-MIB", "mdmModem"))
if mibBuilder.loadTexts: modemEntry.setStatus('mandatory')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
mdmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDescription.setStatus('mandatory')
mdmUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmUserName.setStatus('mandatory')
mdmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSelfTest.setStatus('mandatory')
mdmSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 97, 98, 99, 100))).clone(namedValues=NamedValues(("started", 3), ("running", 4), ("ram-error", 5), ("rom-error", 6), ("eeprom-error", 7), ("line-if-error", 8), ("other-error", 97), ("never-started", 98), ("cancelled", 99), ("ok", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSelfTestResult.setStatus('mandatory')
mdmRemoteAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("access", 2), ("no-access", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRemoteAccessStatus.setStatus('mandatory')
mdmInterfacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfacePorts.setStatus('mandatory')
mdmLinePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLinePorts.setStatus('mandatory')
mdmVerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: mdmVerInfoTable.setStatus('mandatory')
verInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "viRack"), (0, "PANDATEL-MODEM-MIB", "viModem"))
if mibBuilder.loadTexts: verInfoEntry.setStatus('mandatory')
viRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viRack.setStatus('mandatory')
viModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viModem.setStatus('mandatory')
viType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 102, 103, 201, 202, 203, 204, 205, 206, 301, 302, 401, 501, 502, 503, 504, 505, 506, 507, 601, 701, 801, 802, 901))).clone(namedValues=NamedValues(("not-present", 0), ("other", 1), ("fhfl", 101), ("fhfl-f", 102), ("fhfl-s", 103), ("gm-h", 201), ("gm-f", 202), ("gm-d", 203), ("gm-s", 204), ("gm-s-f", 205), ("gm-d-f", 206), ("bm-p", 301), ("bm-z", 302), ("gx", 401), ("fobus", 501), ("fx", 502), ("fx-i", 503), ("fx-ig", 504), ("os", 505), ("fx-g", 506), ("fx-ih", 507), ("fme", 601), ("inax", 701), ("emx", 801), ("cmx-ie", 802), ("etc", 901)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viType.setStatus('mandatory')
viFirmwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viFirmwVer.setStatus('mandatory')
viUnitRel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viUnitRel.setStatus('mandatory')
viArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viArtNo.setStatus('mandatory')
viFrontVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viFrontVer.setStatus('mandatory')
viSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viSerialNumber.setStatus('mandatory')
mdmPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5), )
if mibBuilder.loadTexts: mdmPortTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "portRack"), (0, "PANDATEL-MODEM-MIB", "portModem"), (0, "PANDATEL-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRack.setStatus('mandatory')
portModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModem.setStatus('mandatory')
portPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPort.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("interface-port", 2), ("line-port", 3), ("vt100-mgmt-port", 4), ("outband-mgmt-port", 5), ("backup-port", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 34, 39, 40, 48, 55, 56, 66, 67, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 3), ("v36", 4), ("x21", 5), ("rs485", 6), ("g703-e1t1", 7), ("g703-e2t2", 8), ("g703-64k", 9), ("i430", 10), ("store-loop", 11), ("intercom", 12), ("fo-e1t1", 13), ("s0", 14), ("hdsl", 15), ("no-module", 17), ("atm-26mb", 18), ("g703-e3", 19), ("g703-t3", 20), ("sts-1", 21), ("hssi", 22), ("bm", 34), ("g703-t1", 39), ("g703-t2", 40), ("eth-bridge", 48), ("g703-e1", 55), ("g703-e2", 56), ("sts-3", 66), ("stm-1", 67), ("sm-fiber-820nm", 130), ("sm-fiber-1300nm", 131), ("sm-fiber-1550nm", 132), ("mm-fiber-820nm", 133), ("mm-fiber-1300nm", 134), ("mm-fiber-1550nm", 135), ("sm-fiber-1530-33nm", 136), ("sm-fiber-1531-12nm", 137), ("sm-fiber-1531-90nm", 138), ("sm-fiber-1532-68nm", 139), ("sm-fiber-1533-47nm", 140), ("sm-fiber-1534-25nm", 141), ("sm-fiber-1535-04nm", 142), ("sm-fiber-1535-82nm", 143), ("sm-fiber-1536-61nm", 144), ("sm-fiber-1537-40nm", 145), ("sm-fiber-1538-19nm", 146), ("sm-fiber-1538-98nm", 147), ("sm-fiber-1539-77nm", 148), ("sm-fiber-1540-56nm", 149), ("sm-fiber-1541-35nm", 150), ("sm-fiber-1542-14nm", 151), ("sm-fiber-1542-94nm", 152), ("sm-fiber-1543-73nm", 153), ("sm-fiber-1544-53nm", 154), ("sm-fiber-1545-32nm", 155), ("sm-fiber-1546-12nm", 156), ("sm-fiber-1546-92nm", 157), ("sm-fiber-1547-72nm", 158), ("sm-fiber-1548-51nm", 159), ("sm-fiber-1549-32nm", 160), ("sm-fiber-1550-12nm", 161), ("sm-fiber-1550-92nm", 162), ("sm-fiber-1551-72nm", 163), ("sm-fiber-1552-52nm", 164), ("sm-fiber-1553-33nm", 165), ("sm-fiber-1554-13nm", 166), ("sm-fiber-1554-94nm", 167), ("sm-fiber-1555-75nm", 168), ("sm-fiber-1556-55nm", 169), ("sm-fiber-1557-36nm", 170), ("sm-fiber-1558-17nm", 171), ("sm-fiber-1558-98nm", 172), ("sm-fiber-1559-79nm", 173), ("sm-fiber-1560-61nm", 174), ("sm-fiber-1561-42nm", 175), ("sm-fiber-1562-23nm", 176), ("sm-fiber-1563-05nm", 177), ("sm-fiber-1563-86nm", 178), ("sm-fiber-1564-68nm", 179), ("sm-fiber-1565-50nm", 180), ("sm-1300-1550nm", 181), ("sm-1550-1300nm", 182), ("mm-820-1300nm", 183), ("mm-1300-820nm", 184), ("sm-fiber-1480nm", 185), ("sm-fiber-1510nm", 186), ("sm-fiber-1538nm", 187), ("sm-fiber-1553nm", 188), ("sm-mm-fiber-1310nm", 189), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterfaceType.setStatus('mandatory')
portConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 997, 998, 999))).clone(namedValues=NamedValues(("other", 1), ("single-fiber", 2), ("dual-fiber", 3), ("bnc", 4), ("dpc", 5), ("rj45", 7), ("ics", 8), ("mic", 9), ("db-9-f", 10), ("db-9-m", 11), ("db-15-f", 12), ("db-15-m", 13), ("db-25-f", 14), ("db-25-m", 15), ("db-37-f", 16), ("db-37-m", 17), ("winch-f", 18), ("winch-m", 19), ("mini-c", 20), ("minimicro", 21), ("escon", 22), ("e2000", 23), ("single-sc", 24), ("single-fc", 25), ("single-st", 26), ("dual-sc", 27), ("dual-fc", 28), ("dual-st", 29), ("single-sc-apc", 30), ("single-fc-apc", 31), ("dual-sc-apc", 32), ("dual-fc-apc", 33), ("single-lc", 34), ("single-lc-apc", 35), ("dual-lc", 36), ("dual-lc-apc", 37), ("mt-rj", 38), ("single-sc-45", 39), ("dual-sc-45", 40), ("unknown", 997), ("virtual", 998), ("not-installed", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnector.setStatus('mandatory')
portLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("digital", 3), ("line", 4), ("off", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLoopMode.setStatus('mandatory')
mdmPortSignalTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6), )
if mibBuilder.loadTexts: mdmPortSignalTable.setStatus('mandatory')
portSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "psignalRack"), (0, "PANDATEL-MODEM-MIB", "psignalModem"), (0, "PANDATEL-MODEM-MIB", "psignalPort"), (0, "PANDATEL-MODEM-MIB", "psignalType"))
if mibBuilder.loadTexts: portSignalEntry.setStatus('mandatory')
psignalRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalRack.setStatus('mandatory')
psignalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalModem.setStatus('mandatory')
psignalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalPort.setStatus('mandatory')
psignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("link", 2), ("rts", 3), ("dcd", 4), ("dtr", 5), ("dsr", 6), ("c", 7), ("i", 8), ("fsync", 9), ("ais", 10), ("lay1", 11), ("bond", 12), ("laser-status", 13), ("ta", 14), ("ca", 15), ("eclk", 16), ("laser-tx", 17), ("laser-temp", 18), ("cr", 20), ("rd", 26), ("td", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalType.setStatus('mandatory')
psignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("on", 4), ("off", 5), ("yes", 6), ("no", 7), ("ok", 8), ("fail", 9), ("active", 10), ("traffic", 11), ("space", 12), ("mark", 13), ("high", 14), ("low", 15), ("sync", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psignalStatus.setStatus('mandatory')
psignalTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psignalTrap.setStatus('mandatory')
mdmBERTTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7), )
if mibBuilder.loadTexts: mdmBERTTable.setStatus('mandatory')
bertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "bertRack"), (0, "PANDATEL-MODEM-MIB", "bertModem"))
if mibBuilder.loadTexts: bertEntry.setStatus('mandatory')
bertRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertRack.setStatus('mandatory')
bertModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertModem.setStatus('mandatory')
bertPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPort.setStatus('mandatory')
bertBERTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5))).clone(namedValues=NamedValues(("start", 3), ("stop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertBERTest.setStatus('mandatory')
bertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("start", 3), ("running", 4), ("stopped", 6), ("start-failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertStatus.setStatus('mandatory')
bertRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertRunTime.setStatus('mandatory')
bertInErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInErrorTime.setStatus('mandatory')
bertErrorFreeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErrorFreeTime.setStatus('mandatory')
bertKbitsRecWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertKbitsRecWrapped.setStatus('mandatory')
bertKbitsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertKbitsReceived.setStatus('mandatory')
bertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErrors.setStatus('mandatory')
bertSyncLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSyncLosts.setStatus('mandatory')
bertSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-sync", 2), ("no-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSyncStatus.setStatus('mandatory')
bertBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 7, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitErrorRate.setStatus('mandatory')
mdmRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9))
remModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3), )
if mibBuilder.loadTexts: remModemTable.setStatus('mandatory')
rmodemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rmdmRack"), (0, "PANDATEL-MODEM-MIB", "rmdmModem"))
if mibBuilder.loadTexts: rmodemEntry.setStatus('mandatory')
rmdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmRack.setStatus('mandatory')
rmdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmModem.setStatus('mandatory')
rmdmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmDescription.setStatus('mandatory')
rmdmUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmdmUserName.setStatus('mandatory')
rmdmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmdmSelfTest.setStatus('mandatory')
rmdmSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 97, 98, 99, 100))).clone(namedValues=NamedValues(("started", 3), ("running", 4), ("ram-error", 5), ("rom-error", 6), ("eeprom-error", 7), ("line-if-error", 8), ("other-error", 97), ("never-started", 98), ("cancelled", 99), ("ok", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmSelfTestResult.setStatus('mandatory')
rmdmRemoteAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("access", 2), ("no-access", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmRemoteAccessStatus.setStatus('mandatory')
rmdmInterfacePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmInterfacePorts.setStatus('mandatory')
rmdmLinePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmdmLinePorts.setStatus('mandatory')
remVerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4), )
if mibBuilder.loadTexts: remVerInfoTable.setStatus('mandatory')
remVerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rviRack"), (0, "PANDATEL-MODEM-MIB", "rviModem"))
if mibBuilder.loadTexts: remVerInfoEntry.setStatus('mandatory')
rviRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviRack.setStatus('mandatory')
rviModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviModem.setStatus('mandatory')
rviType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 102, 103, 201, 202, 203, 204, 205, 206, 301, 302, 401, 501, 502, 503, 504, 506, 507, 601, 701, 801, 802, 901))).clone(namedValues=NamedValues(("not-present", 0), ("other", 1), ("fhfl", 101), ("fhfl-f", 102), ("fhfl-s", 103), ("gm-h", 201), ("gm-f", 202), ("gm-d", 203), ("gm-s", 204), ("gm-s-f", 205), ("gm-d-f", 206), ("bm-p", 301), ("bm-z", 302), ("gx", 401), ("fobus", 501), ("fx", 502), ("fx-i", 503), ("fx-ig", 504), ("fx-g", 506), ("fx-ih", 507), ("fme", 601), ("inax", 701), ("emx", 801), ("cmx-ie", 802), ("etc", 901)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviType.setStatus('mandatory')
rviFirmwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviFirmwVer.setStatus('mandatory')
rviUnitRel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviUnitRel.setStatus('mandatory')
rviArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviArtNo.setStatus('mandatory')
rviFrontVer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviFrontVer.setStatus('mandatory')
rviSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rviSerialNumber.setStatus('mandatory')
remPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5), )
if mibBuilder.loadTexts: remPortTable.setStatus('mandatory')
remPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rportRack"), (0, "PANDATEL-MODEM-MIB", "rportModem"), (0, "PANDATEL-MODEM-MIB", "rportPort"))
if mibBuilder.loadTexts: remPortEntry.setStatus('mandatory')
rportRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportRack.setStatus('mandatory')
rportModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportModem.setStatus('mandatory')
rportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportPort.setStatus('mandatory')
rportType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("interface-port", 2), ("line-port", 3), ("vt100-mgmt-port", 4), ("outband-mgmt-port", 5), ("backup-port", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportType.setStatus('mandatory')
rportInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 34, 39, 40, 48, 55, 56, 66, 67, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 3), ("v36", 4), ("x21", 5), ("rs485", 6), ("g703-e1t1", 7), ("g703-e2t2", 8), ("g703-64k", 9), ("i430", 10), ("store-loop", 11), ("intercom", 12), ("fo-e1t1", 13), ("s0", 14), ("hdsl", 15), ("no-module", 17), ("atm-26mb", 18), ("g703-e3", 19), ("g703-t3", 20), ("sts-1", 21), ("hssi", 22), ("bm", 34), ("g703-t1", 39), ("g703-t2", 40), ("eth-bridge", 48), ("g703-e1", 55), ("g703-e2", 56), ("sts-3", 66), ("stm-1", 67), ("sm-fiber-820nm", 130), ("sm-fiber-1300nm", 131), ("sm-fiber-1550nm", 132), ("mm-fiber-820nm", 133), ("mm-fiber-1300nm", 134), ("mm-fiber-1550nm", 135), ("sm-fiber-1530-33nm", 136), ("sm-fiber-1531-12nm", 137), ("sm-fiber-1531-90nm", 138), ("sm-fiber-1532-68nm", 139), ("sm-fiber-1533-47nm", 140), ("sm-fiber-1534-25nm", 141), ("sm-fiber-1535-04nm", 142), ("sm-fiber-1535-82nm", 143), ("sm-fiber-1536-61nm", 144), ("sm-fiber-1537-40nm", 145), ("sm-fiber-1538-19nm", 146), ("sm-fiber-1538-98nm", 147), ("sm-fiber-1539-77nm", 148), ("sm-fiber-1540-56nm", 149), ("sm-fiber-1541-35nm", 150), ("sm-fiber-1542-14nm", 151), ("sm-fiber-1542-94nm", 152), ("sm-fiber-1543-73nm", 153), ("sm-fiber-1544-53nm", 154), ("sm-fiber-1545-32nm", 155), ("sm-fiber-1546-12nm", 156), ("sm-fiber-1546-92nm", 157), ("sm-fiber-1547-72nm", 158), ("sm-fiber-1548-51nm", 159), ("sm-fiber-1549-32nm", 160), ("sm-fiber-1550-12nm", 161), ("sm-fiber-1550-92nm", 162), ("sm-fiber-1551-72nm", 163), ("sm-fiber-1552-52nm", 164), ("sm-fiber-1553-33nm", 165), ("sm-fiber-1554-13nm", 166), ("sm-fiber-1554-94nm", 167), ("sm-fiber-1555-75nm", 168), ("sm-fiber-1556-55nm", 169), ("sm-fiber-1557-36nm", 170), ("sm-fiber-1558-17nm", 171), ("sm-fiber-1558-98nm", 172), ("sm-fiber-1559-79nm", 173), ("sm-fiber-1560-61nm", 174), ("sm-fiber-1561-42nm", 175), ("sm-fiber-1562-23nm", 176), ("sm-fiber-1563-05nm", 177), ("sm-fiber-1563-86nm", 178), ("sm-fiber-1564-68nm", 179), ("sm-fiber-1565-50nm", 180), ("sm-1300-1550nm", 181), ("sm-1550-1300nm", 182), ("mm-820-1300nm", 183), ("mm-1300-820nm", 184), ("sm-fiber-1480nm", 185), ("sm-fiber-1510nm", 186), ("sm-fiber-1538nm", 187), ("sm-fiber-1553nm", 188), ("sm-mm-fiber-1310nm", 189), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportInterfaceType.setStatus('mandatory')
rportConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 997, 998, 999))).clone(namedValues=NamedValues(("other", 1), ("single-fiber", 2), ("dual-fiber", 3), ("bnc", 4), ("dpc", 5), ("rj45", 7), ("ics", 8), ("mic", 9), ("db-9-f", 10), ("db-9-m", 11), ("db-15-f", 12), ("db-15-m", 13), ("db-25-f", 14), ("db-25-m", 15), ("db-37-f", 16), ("db-37-m", 17), ("winch-f", 18), ("winch-m", 19), ("mini-c", 20), ("minimicro", 21), ("escon", 22), ("e2000", 23), ("single-sc", 24), ("single-fc", 25), ("single-st", 26), ("dual-sc", 27), ("dual-fc", 28), ("dual-st", 29), ("single-sc-apc", 30), ("single-fc-apc", 31), ("dual-sc-apc", 32), ("dual-fc-apc", 33), ("single-lc", 34), ("single-lc-apc", 35), ("dual-lc", 36), ("dual-lc-apc", 37), ("mt-rj", 38), ("single-sc-45", 39), ("dual-sc-45", 40), ("unknown", 997), ("virtual", 998), ("not-installed", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rportConnector.setStatus('mandatory')
rportLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("other", 1), ("remote", 2), ("digital", 3), ("line", 4), ("off", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rportLoopMode.setStatus('mandatory')
remPortSignalTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6), )
if mibBuilder.loadTexts: remPortSignalTable.setStatus('mandatory')
remPortSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1), ).setIndexNames((0, "PANDATEL-MODEM-MIB", "rpsignalRack"), (0, "PANDATEL-MODEM-MIB", "rpsignalModem"), (0, "PANDATEL-MODEM-MIB", "rpsignalPort"), (0, "PANDATEL-MODEM-MIB", "rpsignalType"))
if mibBuilder.loadTexts: remPortSignalEntry.setStatus('mandatory')
rpsignalRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalRack.setStatus('mandatory')
rpsignalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalModem.setStatus('mandatory')
rpsignalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalPort.setStatus('mandatory')
rpsignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("link", 2), ("rts", 3), ("dcd", 4), ("dtr", 5), ("dsr", 6), ("c", 7), ("i", 8), ("fsync", 9), ("ais", 10), ("lay1", 11), ("bond", 12), ("laser-status", 13), ("ta", 14), ("ca", 15), ("eclk", 16), ("laser-tx", 17), ("laser-temp", 18), ("cr", 20), ("rd", 26), ("td", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalType.setStatus('mandatory')
rpsignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("on", 4), ("off", 5), ("yes", 6), ("no", 7), ("ok", 8), ("fail", 9), ("active", 10), ("traffic", 11), ("space", 12), ("mark", 13), ("high", 14), ("low", 15), ("sync", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpsignalStatus.setStatus('mandatory')
mdmSpecifics = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10))
mdmMgmtIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20))
mdmIfType = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 999))).clone(namedValues=NamedValues(("other", 1), ("v24", 2), ("v35", 4), ("x21", 5), ("ethernet", 6), ("missing", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfType.setStatus('mandatory')
mdmIfProtocol = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("slip", 2), ("ppp-async", 3), ("ppp-sync", 4), ("ethernetII", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfProtocol.setStatus('mandatory')
mdmIfDataRate = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIfDataRate.setStatus('mandatory')
mdmIfDialEnable = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialEnable.setStatus('mandatory')
mdmIfInitString = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfInitString.setStatus('mandatory')
mdmIfDialString = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialString.setStatus('mandatory')
mdmIfSendTTL = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfSendTTL.setStatus('mandatory')
mdmIfDialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfDialTimeout.setStatus('mandatory')
mdmIfRedialPause = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfRedialPause.setStatus('mandatory')
mdmIfIdlePeriodBeforeDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmIfIdlePeriodBeforeDisconnect.setStatus('mandatory')
rackAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,1)).setObjects(("PANDATEL-MODEM-MIB", "rackType"))
rackRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,2)).setObjects(("PANDATEL-MODEM-MIB", "rackType"))
modemAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,3)).setObjects(("PANDATEL-MODEM-MIB", "viType"))
modemRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,4)).setObjects(("PANDATEL-MODEM-MIB", "viType"))
portLoopEnabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,5)).setObjects(("PANDATEL-MODEM-MIB", "portLoopMode"))
portLoopDisabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,6)).setObjects(("PANDATEL-MODEM-MIB", "portLoopMode"))
portSignalStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,7)).setObjects(("PANDATEL-MODEM-MIB", "psignalType"))
portSignalStatusBad = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,8)).setObjects(("PANDATEL-MODEM-MIB", "psignalType"))
portBackupEnabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,9)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
portBackupDisabled = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,10)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
portBackupAvailable = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,11)).setObjects(("PANDATEL-MODEM-MIB", "portPort"))
portBackupNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,12)).setObjects(("PANDATEL-MODEM-MIB", "portPort"))
portDataPortChanged = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1) + (0,13)).setObjects(("PANDATEL-MODEM-MIB", "portPort"), ("PANDATEL-MODEM-MIB", "portPort"))
mdm_oid = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000)).setLabel("mdm-oid")
comp_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1)).setLabel("comp-id")
device_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2)).setLabel("device-id")
slot_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3)).setLabel("slot-id")
port_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4)).setLabel("port-id")
psupply_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5)).setLabel("psupply-id")
psonoff_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6)).setLabel("psonoff-id")
fanonoff_id = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7)).setLabel("fanonoff-id")
rack_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 1)).setLabel("rack-other")
rack_10s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 2)).setLabel("rack-10s-3hu")
rack_12s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 3)).setLabel("rack-12s-3hu")
rack_10s_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 4)).setLabel("rack-10s-6hu")
rack_6s_9s_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 5)).setLabel("rack-6s-9s-6hu")
device_stack_15s = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 6)).setLabel("device-stack-15s")
rack_8s_4hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 7)).setLabel("rack-8s-4hu")
rack_10s_2c_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 8)).setLabel("rack-10s-2c-6hu")
hs_rack_10s_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 9)).setLabel("hs-rack-10s-3hu")
rack_8s_2c_6hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 10)).setLabel("rack-8s-2c-6hu")
hs_rack_3s_1c_3hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 11)).setLabel("hs-rack-3s-1c-3hu")
rack_1s_1c_1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 12)).setLabel("rack-1s-1c-1hu")
rack_3s_1c_1hu = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 1, 13)).setLabel("rack-3s-1c-1hu")
otherModem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 1))
cms_snmp_master = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10001)).setLabel("cms-snmp-master")
cms_slave = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10002)).setLabel("cms-slave")
cms_intelligent_slave = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10003)).setLabel("cms-intelligent-slave")
rc_control = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 10004)).setLabel("rc-control")
modemSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 1))
mgmtSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 2))
modemAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 3))
mgmtAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 4))
wdmSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 5))
controlSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 6))
psupplySlot = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 3, 10))
otherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 1))
interfacePort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 2))
linePort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 3))
vt100mgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 4))
outbandmgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 5))
backupPort = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 6))
rs485Port = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 4, 7))
ps_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 1)).setLabel("ps-other")
p_ac_x_5v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 2)).setLabel("p-ac-x-5v-20a")
p_ac_x_5v_30a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 3)).setLabel("p-ac-x-5v-30a")
p_dc_48v_5v_18a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 4)).setLabel("p-dc-48v-5v-18a")
p_dc_24v_5v_15a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 5)).setLabel("p-dc-24v-5v-15a")
p_dc_48v_5v_30a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 6)).setLabel("p-dc-48v-5v-30a")
b_ac_x_5v_6a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 7)).setLabel("b-ac-x-5v-6a")
b_dc_48v_5v_lc = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 8)).setLabel("b-dc-48v-5v-lc")
b_dc_48v_5v_hc = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 9)).setLabel("b-dc-48v-5v-hc")
b_dc_24v_5v_su = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 10)).setLabel("b-dc-24v-5v-su")
p_ac_x_3v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 11)).setLabel("p-ac-x-3v-20a")
p_dc_48v_5v_20a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 12)).setLabel("p-dc-48v-5v-20a")
p_dc_5v_3v_4a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 13)).setLabel("p-dc-5v-3v-4a")
p_dc_5v_5v_5a = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 5, 14)).setLabel("p-dc-5v-5v-5a")
pS1_PS2_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 1)).setLabel("pS1-PS2-other")
pS1_on_PS2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 2)).setLabel("pS1-on-PS2-off")
pS1_on_PS2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 6, 3)).setLabel("pS1-on-PS2-on")
fAN1_FAN2_other = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 1)).setLabel("fAN1-FAN2-other")
fAN1_off_FAN2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 2)).setLabel("fAN1-off-FAN2-off")
fAN1_on_FAN2_off = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 3)).setLabel("fAN1-on-FAN2-off")
fAN1_off_FAN2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 4)).setLabel("fAN1-off-FAN2-on")
fAN1_on_FAN2_on = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 7, 5)).setLabel("fAN1-on-FAN2-on")
mibBuilder.exportSymbols("PANDATEL-MODEM-MIB", mibs=mibs, p_dc_48v_5v_18a=p_dc_48v_5v_18a, mdmIfSendTTL=mdmIfSendTTL, mdmPortSignalTable=mdmPortSignalTable, cms_intelligent_slave=cms_intelligent_slave, portPort=portPort, mdmMgmtIfGroup=mdmMgmtIfGroup, rportPort=rportPort, remVerInfoTable=remVerInfoTable, slot_id=slot_id, pS1_on_PS2_on=pS1_on_PS2_on, rack_12s_3hu=rack_12s_3hu, mdm_oid=mdm_oid, products=products, mdmIfDialEnable=mdmIfDialEnable, mdm_mgmt=mdm_mgmt, fAN1_off_FAN2_on=fAN1_off_FAN2_on, portDataPortChanged=portDataPortChanged, rack_8s_2c_6hu=rack_8s_2c_6hu, psignalRack=psignalRack, rviArtNo=rviArtNo, mdmPortTable=mdmPortTable, remModemTable=remModemTable, portBackupDisabled=portBackupDisabled, rmdmDescription=rmdmDescription, portLoopEnabled=portLoopEnabled, p_ac_x_5v_20a=p_ac_x_5v_20a, fAN1_FAN2_other=fAN1_FAN2_other, mdmVerInfoTable=mdmVerInfoTable, viArtNo=viArtNo, bertBitErrorRate=bertBitErrorRate, rmdmRemoteAccessStatus=rmdmRemoteAccessStatus, rviModem=rviModem, interfacePort=interfacePort, mdmCurrentTime=mdmCurrentTime, rackDescription=rackDescription, mdmSpecifics=mdmSpecifics, portBackupAvailable=portBackupAvailable, device_stack_15s=device_stack_15s, fAN1_on_FAN2_on=fAN1_on_FAN2_on, mdmInterfacePorts=mdmInterfacePorts, mdmRackTable=mdmRackTable, portBackupNotAvailable=portBackupNotAvailable, rviType=rviType, rc_control=rc_control, rackPowerSupplies=rackPowerSupplies, p_dc_5v_3v_4a=p_dc_5v_3v_4a, viFrontVer=viFrontVer, portSignalStatusBad=portSignalStatusBad, mdmSelfTest=mdmSelfTest, modemSlot=modemSlot, mdmModemTable=mdmModemTable, rack_10s_6hu=rack_10s_6hu, rackPowerSupplySlots=rackPowerSupplySlots, psignalType=psignalType, pS1_PS2_other=pS1_PS2_other, remVerInfoEntry=remVerInfoEntry, rportModem=rportModem, bertRunTime=bertRunTime, portBackupEnabled=portBackupEnabled, mgmtSlot=mgmtSlot, modemAdded=modemAdded, p_dc_5v_5v_5a=p_dc_5v_5v_5a, pandatel=pandatel, modemAddr=modemAddr, viFirmwVer=viFirmwVer, verInfoEntry=verInfoEntry, device_id=device_id, mdmLinePorts=mdmLinePorts, rpsignalType=rpsignalType, rmdmSelfTestResult=rmdmSelfTestResult, remPortSignalTable=remPortSignalTable, mdmIfDialTimeout=mdmIfDialTimeout, portConnector=portConnector, rack_6s_9s_6hu=rack_6s_9s_6hu, rviSerialNumber=rviSerialNumber, outbandmgmtPort=outbandmgmtPort, b_ac_x_5v_6a=b_ac_x_5v_6a, rmdmRack=rmdmRack, pS1_on_PS2_off=pS1_on_PS2_off, p_ac_x_5v_30a=p_ac_x_5v_30a, fAN1_off_FAN2_off=fAN1_off_FAN2_off, otherModem=otherModem, mdmIfDataRate=mdmIfDataRate, rviFrontVer=rviFrontVer, rack_other=rack_other, fanonoff_id=fanonoff_id, mdmGroup=mdmGroup, mdmBERTTable=mdmBERTTable, p_dc_48v_5v_30a=p_dc_48v_5v_30a, p_ac_x_3v_20a=p_ac_x_3v_20a, psignalTrap=psignalTrap, remPortSignalEntry=remPortSignalEntry, psonoff_id=psonoff_id, rackModemSlots=rackModemSlots, rackModems=rackModems, rackType=rackType, rackEntry=rackEntry, rmodemEntry=rmodemEntry, portLoopDisabled=portLoopDisabled, modemEntry=modemEntry, bertKbitsReceived=bertKbitsReceived, portRack=portRack, bertKbitsRecWrapped=bertKbitsRecWrapped, portSignalStatusGood=portSignalStatusGood, mdmRemoteAccess=mdmRemoteAccess, cms_slave=cms_slave, mdmSelfTestResult=mdmSelfTestResult, mdmIfInitString=mdmIfInitString, port_id=port_id, b_dc_48v_5v_hc=b_dc_48v_5v_hc, portInterfaceType=portInterfaceType, rpsignalModem=rpsignalModem, hs_rack_3s_1c_3hu=hs_rack_3s_1c_3hu, mdmIfProtocol=mdmIfProtocol, mdmIfRedialPause=mdmIfRedialPause, b_dc_24v_5v_su=b_dc_24v_5v_su, mdmUserName=mdmUserName, psignalPort=psignalPort, rviUnitRel=rviUnitRel, backupPort=backupPort, mdmIfType=mdmIfType, mdmIfDialString=mdmIfDialString, rs485Port=rs485Port, viModem=viModem, remPortEntry=remPortEntry, bertSyncStatus=bertSyncStatus, wan_products=wan_products, portLoopMode=portLoopMode, mdmCurrentDate=mdmCurrentDate, bertStatus=bertStatus, linePort=linePort, bertSyncLosts=bertSyncLosts, portType=portType, psupplySlot=psupplySlot, ps_other=ps_other, rportType=rportType, otherPort=otherPort, rmdmLinePorts=rmdmLinePorts, bertEntry=bertEntry, bertInErrorTime=bertInErrorTime, rmdmModem=rmdmModem, mdmModem=mdmModem, rmdmUserName=rmdmUserName, rack_10s_3hu=rack_10s_3hu, mdmIfIdlePeriodBeforeDisconnect=mdmIfIdlePeriodBeforeDisconnect, mgmtAddr=mgmtAddr, rpsignalStatus=rpsignalStatus, portEntry=portEntry, mdmInstalledModems=mdmInstalledModems, bertErrors=bertErrors, psignalModem=psignalModem, rportLoopMode=rportLoopMode, mdmRemoteAccessStatus=mdmRemoteAccessStatus, rack_8s_4hu=rack_8s_4hu, psignalStatus=psignalStatus, rviRack=rviRack, rpsignalPort=rpsignalPort, bertModem=bertModem, rmdmInterfacePorts=rmdmInterfacePorts, rportRack=rportRack, psupply_id=psupply_id, mdmInstalledRacks=mdmInstalledRacks, rportInterfaceType=rportInterfaceType, viRack=viRack, rackRack=rackRack, rportConnector=rportConnector, mdmDescription=mdmDescription, p_dc_48v_5v_20a=p_dc_48v_5v_20a, rackRemoved=rackRemoved, cms_snmp_master=cms_snmp_master, mdmRack=mdmRack, hs_rack_10s_3hu=hs_rack_10s_3hu, portModem=portModem, viType=viType, rmdmSelfTest=rmdmSelfTest, bertErrorFreeTime=bertErrorFreeTime, viUnitRel=viUnitRel, bertRack=bertRack, p_dc_24v_5v_15a=p_dc_24v_5v_15a, mdmLoopModeTraps=mdmLoopModeTraps, comp_id=comp_id, bertPort=bertPort, wdmSlot=wdmSlot, rack_1s_1c_1hu=rack_1s_1c_1hu, rviFirmwVer=rviFirmwVer, controlSlot=controlSlot, rackAdded=rackAdded, rpsignalRack=rpsignalRack, fAN1_on_FAN2_off=fAN1_on_FAN2_off, viSerialNumber=viSerialNumber, modemRemoved=modemRemoved, vt100mgmtPort=vt100mgmtPort, rack_10s_2c_6hu=rack_10s_2c_6hu, remPortTable=remPortTable, portSignalEntry=portSignalEntry, rack_3s_1c_1hu=rack_3s_1c_1hu, bertBERTest=bertBERTest, b_dc_48v_5v_lc=b_dc_48v_5v_lc)
