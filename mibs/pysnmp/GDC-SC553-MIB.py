#
# PySNMP MIB module GDC-SC553-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDC-SC553-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Integer32, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Counter32, ModuleIdentity, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Integer32", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Counter32", "ModuleIdentity", "Counter64", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
sc553 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11))
sc553Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 1))
sc553Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 2))
sc553Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 3))
sc553Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 4))
sc553Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5))
sc553Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 6))
sc553MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553MIBversion.setStatus('mandatory')
sc553VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2), )
if mibBuilder.loadTexts: sc553VersionTable.setStatus('mandatory')
sc553VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553VersionIndex"))
if mibBuilder.loadTexts: sc553VersionEntry.setStatus('mandatory')
sc553VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553VersionIndex.setStatus('mandatory')
sc553ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ActiveFirmwareRev.setStatus('mandatory')
sc553StoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553StoredFirmwareRev.setStatus('mandatory')
sc553BootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553BootRev.setStatus('mandatory')
sc553StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553StoredFirmwareStatus.setStatus('mandatory')
sc553SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553SwitchActiveFirmware.setStatus('mandatory')
sc553DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DownloadingMode.setStatus('mandatory')
sc553ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1), )
if mibBuilder.loadTexts: sc553ChannelConfigTable.setStatus('mandatory')
sc553ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553ChannelConfigIndex"))
if mibBuilder.loadTexts: sc553ChannelConfigEntry.setStatus('mandatory')
sc553ChannelConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ChannelConfigIndex.setStatus('mandatory')
sc553ChannelDS0AllocationScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consecutive", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelDS0AllocationScheme.setStatus('mandatory')
sc553ChannelBaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nx56k", 1), ("nx64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelBaseRate.setStatus('mandatory')
sc553ChannelStartingDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelStartingDS0.setStatus('mandatory')
sc553ChannelNumberOfDS0s = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelNumberOfDS0s.setStatus('mandatory')
sc553ChannelInbandDccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("embedded", 2), ("dccDs0", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelInbandDccMode.setStatus('mandatory')
sc553ChannelSplitTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelSplitTiming.setStatus('mandatory')
sc553ChannelChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("v35", 2), ("eia530", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ChannelChannelType.setStatus('mandatory')
sc553ChannelAdminClkInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("invertRx", 2), ("invertTx", 3), ("both", 4), ("autoTxnormRx", 5), ("autoTxinvertRx", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelAdminClkInvert.setStatus('mandatory')
sc553ChannelOperClkInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("invertRx", 2), ("invertTx", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ChannelOperClkInvert.setStatus('mandatory')
sc553ChannelDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("invertRx", 2), ("invertTx", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelDataInvert.setStatus('mandatory')
sc553ChannelLocalDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsSignal", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelLocalDCD.setStatus('mandatory')
sc553ChannelLocalDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsSignal", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelLocalDSR.setStatus('mandatory')
sc553ChannelRTSCTSControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctrl", 1), ("ctsForcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelRTSCTSControl.setStatus('mandatory')
sc553ChannelEIAtestLeads = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelEIAtestLeads.setStatus('mandatory')
sc553ChannelInbandLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelInbandLoop.setStatus('mandatory')
sc553ChannelInbandLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelInbandLoopdown.setStatus('mandatory')
sc553channelRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553channelRedundancy.setStatus('mandatory')
sc553ChannelActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("cascade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelActivePort.setStatus('mandatory')
sc553ChannelNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("networkOne", 1), ("networkTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelNetworkNumber.setStatus('obsolete')
sc553ChannelNetworkPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("cascade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelNetworkPosition.setStatus('obsolete')
sc553WakeUpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553WakeUpRemote.setStatus('mandatory')
sc553ChannelInService = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ChannelInService.setStatus('mandatory')
sc553NetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2), )
if mibBuilder.loadTexts: sc553NetworkConfigTable.setStatus('mandatory')
sc553NetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553NetworkConfigIndex"))
if mibBuilder.loadTexts: sc553NetworkConfigEntry.setStatus('mandatory')
sc553NetworkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkConfigIndex.setStatus('mandatory')
sc553NetworkAdminLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("manEsf", 2), ("manD4", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkAdminLineType.setStatus('mandatory')
sc553NetworkOperLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unframed", 1), ("esf", 2), ("d4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkOperLineType.setStatus('mandatory')
sc553NetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkInterfaceType.setStatus('mandatory')
sc553NetworkPreequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preeq130", 1), ("preeq260", 2), ("preeq390", 3), ("preeq530", 4), ("preeq655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkPreequalization.setStatus('mandatory')
sc553NetworkAdminLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 13, 16))).clone(namedValues=NamedValues(("man00dB", 10), ("man75dB", 11), ("man150dB", 12), ("man225dB", 13), ("auto", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkAdminLineBuildout.setStatus('mandatory')
sc553NetworkOperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("tx00dB", 2), ("tx75dB", 3), ("tx150dB", 4), ("tx225dB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkOperLineBuildout.setStatus('mandatory')
sc553NetworkOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("inhibit", 1), ("restrict8XNplus1", 4), ("min1in8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkOnesDensity.setStatus('mandatory')
sc553NetworkTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("receive", 1), ("cascade", 2), ("internal", 4), ("station", 5), ("extChannelClkPPL", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkTransmitClockSource.setStatus('mandatory')
sc553NetworkFallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("receive", 1), ("cascade", 2), ("internal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkFallbackClockSource.setStatus('mandatory')
sc553NetworkFDLdcc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkFDLdcc.setStatus('mandatory')
sc553NetworkAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkAISLoopdown.setStatus('mandatory')
sc553NetworkLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkLoopbackConfig.setStatus('mandatory')
sc553NetworkLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sc553B8ZS", 1), ("sc553AMI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkLineCoding.setStatus('mandatory')
sc553NetworkFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sc553Fdl-none", 1), ("sc553Ansi-T1-403", 2), ("sc553Att-54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553NetworkFdl.setStatus('mandatory')
sc553CascadeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4), )
if mibBuilder.loadTexts: sc553CascadeConfigTable.setStatus('mandatory')
sc553CascadeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553CascadeConfigIndex"))
if mibBuilder.loadTexts: sc553CascadeConfigEntry.setStatus('mandatory')
sc553CascadeConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CascadeConfigIndex.setStatus('mandatory')
sc553CascadeAdminLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("manEsf", 2), ("manD4", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeAdminLineType.setStatus('mandatory')
sc553CascadeOperLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unframed", 1), ("esf", 2), ("d4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CascadeOperLineType.setStatus('mandatory')
sc553CascadeInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeInterfaceType.setStatus('mandatory')
sc553CascadePreequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preeq130", 1), ("preeq260", 2), ("preeq390", 3), ("preeq530", 4), ("preeq655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadePreequalization.setStatus('mandatory')
sc553CascadeAdminLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 13, 16))).clone(namedValues=NamedValues(("man00dB", 10), ("man75dB", 11), ("man150dB", 12), ("man225dB", 13), ("auto", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeAdminLineBuildout.setStatus('mandatory')
sc553CascadeOperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("tx00dB", 2), ("tx75dB", 3), ("tx150dB", 4), ("tx225dB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CascadeOperLineBuildout.setStatus('mandatory')
sc553CascadeFDLdcc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeFDLdcc.setStatus('mandatory')
sc553CascadeLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sc553B8ZS", 1), ("sc553AMI", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeLineCoding.setStatus('mandatory')
sc553CascadeFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sc553Fdl-none", 1), ("sc553Ansi-T1-403", 2), ("sc553Att-54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeFdl.setStatus('mandatory')
sc553CascadeInService = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeInService.setStatus('mandatory')
sc553CascadeAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeAISLoopdown.setStatus('mandatory')
sc553CascadeLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553CascadeLoopbackConfig.setStatus('mandatory')
sc553ConfigurationSave = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("saveall", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ConfigurationSave.setStatus('mandatory')
sc553DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1), )
if mibBuilder.loadTexts: sc553DiagTable.setStatus('mandatory')
sc553DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553DiagIndex"))
if mibBuilder.loadTexts: sc553DiagEntry.setStatus('mandatory')
sc553DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553DiagIndex.setStatus('mandatory')
sc553DiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("testTime30Secs", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTimeInfinite", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagTestDuration.setStatus('mandatory')
sc553DiagProgPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagProgPattern.setStatus('mandatory')
sc553InsertBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insertBitErrorNorm", 1), ("insertOneBitError", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553InsertBitError.setStatus('mandatory')
sc553DiagDS0Number = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagDS0Number.setStatus('mandatory')
sc553DiagT1SelfTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1511Pattern", 1), ("t12047Pattern", 2), ("t1QRSPattern", 3), ("t1ProgPattern", 4), ("t13in24", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagT1SelfTestPattern.setStatus('mandatory')
sc553DiagT1Test = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("t1SelfTest", 1), ("t1LocalSelfTest", 2), ("t1RemoteSelfTest", 3), ("t1LocalTest", 4), ("t1RemoteTest", 5), ("t1NetworkInterface", 6), ("t1LineLoopback", 7), ("t1PayLoadLoopback", 8), ("t1NoTest", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagT1Test.setStatus('mandatory')
sc553DiagDS0SelfTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0511Pattern", 1), ("ds02047Pattern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagDS0SelfTestPattern.setStatus('mandatory')
sc553DiagDS0Test = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds0SelfTest", 1), ("ds0CircuitDelay", 2), ("ds0Loopback", 3), ("ds0NoDS0Test", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagDS0Test.setStatus('mandatory')
sc553DiagChannelSelfTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chan511Pattern", 1), ("chan2047Pattern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagChannelSelfTestPattern.setStatus('mandatory')
sc553DiagChannelTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("chanSelfTest", 1), ("chanLocalSelfTest", 2), ("chanRemoteSelfTest", 3), ("chandigitalLoop", 4), ("chanLocalLoop", 5), ("chanRemoteDataLoop", 6), ("chanNoTest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagChannelTest.setStatus('mandatory')
sc553DiagTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553DiagTestResults.setStatus('mandatory')
sc553DiagTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("statNoTestinProgress", 1), ("statT1SelfTest", 2), ("statT1LocalSelfTest", 3), ("statT1RemoteSelfTest", 4), ("statT1LocalTest", 5), ("statT1RemoteTest", 6), ("statT1NetworkInterface", 7), ("statT1LineLoopback", 8), ("statT1PayLoadLoopback", 9), ("statChanSelfTest", 10), ("statChanLocalSelfTest", 11), ("statChanRemoteSelfTest", 12), ("statChandigitalLoop", 13), ("statChanLocalLoop", 14), ("statChanRemoteDataLoop", 15), ("statDS0SelfTest", 16), ("statDS0CircuitDelay", 17), ("statDS0Loopback", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553DiagTestStatus.setStatus('mandatory')
sc553DiagResetTestToNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagResetTestToNormal.setStatus('mandatory')
sc553DiagResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetTestResult", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagResetTestResults.setStatus('mandatory')
sc553DiagT1TestDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("toNetwork", 1), ("toCascade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagT1TestDirection.setStatus('mandatory')
sc553DiagDS0TestDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("toNetwork", 1), ("toCascade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DiagDS0TestDirection.setStatus('mandatory')
sc553MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1), )
if mibBuilder.loadTexts: sc553MaintenanceTable.setStatus('mandatory')
sc553MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553MaintenanceIndex"))
if mibBuilder.loadTexts: sc553MaintenanceEntry.setStatus('mandatory')
sc553MaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553MaintenanceIndex.setStatus('mandatory')
sc553LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553LedStatus.setStatus('mandatory')
sc553SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553SoftReset.setStatus('mandatory')
sc553DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553DefaultInit.setStatus('mandatory')
sc553FrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553FrontPanel.setStatus('mandatory')
sc553ProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sc553", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ProductType.setStatus('mandatory')
sc553ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553ResetStatistics.setStatus('mandatory')
sc553ValidUserIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ValidUserIntervals.setStatus('mandatory')
sc553ValidNetworkIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ValidNetworkIntervals.setStatus('mandatory')
sc553ValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ValidFarEndIntervals.setStatus('mandatory')
sc553CascadePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CascadePresent.setStatus('mandatory')
sc553ReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalidNiDSX1", 1), ("noSignal", 2), ("pos2toNeg7andOneHalf", 3), ("neg7andOneHalftoNeg15", 4), ("neg15toNeg22andOneHalf", 5), ("lessThanNeg22andOneHalf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ReceiveLevel.setStatus('mandatory')
sc553DteStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553DteStat.setStatus('mandatory')
sc553CasReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalidNiDSX1", 1), ("noSignal", 2), ("pos2toNeg7andOneHalf", 3), ("neg7andOneHalftoNeg15", 4), ("neg15toNeg22andOneHalf", 5), ("lessThanNeg22andOneHalf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CasReceiveLevel.setStatus('mandatory')
sc553ShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spectracomm", 1), ("twinPack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ShelfType.setStatus('mandatory')
sc553TwinPackPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("bottomOnly", 2), ("topOnly", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TwinPackPowerSupply.setStatus('mandatory')
sc553TestAllLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allLedsON", 1), ("allLedsOFF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553TestAllLeds.setStatus('mandatory')
sc553AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1))
sc553NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 1))
sc553DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 2))
sc553PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 3))
sc553NvRamCorruptAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 4))
sc553UnitFailureAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 5))
sc553StatusChangeAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 6))
sc553UnsolicitedTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 7))
sc553FrontPanelTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 8))
sc553ConfigChangeAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 9))
sc553TimingLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 10))
sc553LossOfSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 11))
sc553LossOfFrameAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 12))
sc553AlarmIndicationSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 13))
sc553ReceivedYellowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 14))
sc553UnavailableSignalStateAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 15))
sc553CrcErrorsAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 16))
sc553BipolarViolationsAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 17))
sc553LowAverageDensityAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 18))
sc553ExternalTXClockLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 19))
sc553DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 20))
sc553DSRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 21))
sc553DTRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 22))
sc553RXDNoTransitionsAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 23))
sc553TXDNoTransitionsAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 24))
sc553RedundancyOn = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 25))
sc553RemoteNotResponding = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 26))
sc553TopPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 27))
sc553BottomPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 1, 28))
sc553AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2), )
if mibBuilder.loadTexts: sc553AlarmConfigTable.setStatus('mandatory')
sc553AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553AlarmConfigIndex"), (0, "GDC-SC553-MIB", "sc553AlarmConfigIdentifier"))
if mibBuilder.loadTexts: sc553AlarmConfigEntry.setStatus('mandatory')
sc553AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553AlarmConfigIndex.setStatus('mandatory')
sc553AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553AlarmConfigIdentifier.setStatus('mandatory')
sc553AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reportAll", 1), ("last1sec", 2), ("last1min", 3), ("last1hr", 4), ("reportWhen", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553AlarmCountWindow.setStatus('mandatory')
sc553AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("thresGT10", 1), ("thresGT100", 2), ("thresGT1000", 3), ("thresGT10000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553AlarmCountThreshold.setStatus('mandatory')
sc553CurrentUserTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 1), )
if mibBuilder.loadTexts: sc553CurrentUserTable.setStatus('mandatory')
sc553CurrentUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 1, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553CurrentUserIndex"))
if mibBuilder.loadTexts: sc553CurrentUserEntry.setStatus('mandatory')
sc553CurrentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentUserIndex.setStatus('mandatory')
sc553CurrentUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentUserStat.setStatus('mandatory')
sc553CurrentNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 2), )
if mibBuilder.loadTexts: sc553CurrentNetworkTable.setStatus('mandatory')
sc553CurrentNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 2, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553CurrentNetworkIndex"))
if mibBuilder.loadTexts: sc553CurrentNetworkEntry.setStatus('mandatory')
sc553CurrentNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentNetworkIndex.setStatus('mandatory')
sc553CurrentNetworkStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentNetworkStat.setStatus('mandatory')
sc553CurrentFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 3), )
if mibBuilder.loadTexts: sc553CurrentFarEndTable.setStatus('mandatory')
sc553CurrentFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 3, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553CurrentFarEndIndex"))
if mibBuilder.loadTexts: sc553CurrentFarEndEntry.setStatus('mandatory')
sc553CurrentFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentFarEndIndex.setStatus('mandatory')
sc553CurrentFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553CurrentFarEndStat.setStatus('mandatory')
sc553TotalUserTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 4), )
if mibBuilder.loadTexts: sc553TotalUserTable.setStatus('mandatory')
sc553TotalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 4, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553TotalUserIndex"))
if mibBuilder.loadTexts: sc553TotalUserEntry.setStatus('mandatory')
sc553TotalUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalUserIndex.setStatus('mandatory')
sc553TotalUserStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalUserStat.setStatus('mandatory')
sc553TotalNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 5), )
if mibBuilder.loadTexts: sc553TotalNetworkTable.setStatus('mandatory')
sc553TotalNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 5, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553TotalNetworkIndex"))
if mibBuilder.loadTexts: sc553TotalNetworkEntry.setStatus('mandatory')
sc553TotalNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalNetworkIndex.setStatus('mandatory')
sc553TotalNetworkStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalNetworkStat.setStatus('mandatory')
sc553TotalFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 6), )
if mibBuilder.loadTexts: sc553TotalFarEndTable.setStatus('mandatory')
sc553TotalFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 6, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553TotalFarEndIndex"))
if mibBuilder.loadTexts: sc553TotalFarEndEntry.setStatus('mandatory')
sc553TotalFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalFarEndIndex.setStatus('mandatory')
sc553TotalFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553TotalFarEndStat.setStatus('mandatory')
sc553UserIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 7), )
if mibBuilder.loadTexts: sc553UserIntervalTable.setStatus('mandatory')
sc553UserIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 7, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553UserIntervalIndex"), (0, "GDC-SC553-MIB", "sc553UserIntervalNumber"))
if mibBuilder.loadTexts: sc553UserIntervalEntry.setStatus('mandatory')
sc553UserIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553UserIntervalIndex.setStatus('mandatory')
sc553UserIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553UserIntervalNumber.setStatus('mandatory')
sc553UserIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553UserIntervalStats.setStatus('mandatory')
sc553NetworkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 8), )
if mibBuilder.loadTexts: sc553NetworkIntervalTable.setStatus('mandatory')
sc553NetworkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 8, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553NetworkIntervalIndex"), (0, "GDC-SC553-MIB", "sc553NetworkIntervalNumber"))
if mibBuilder.loadTexts: sc553NetworkIntervalEntry.setStatus('mandatory')
sc553NetworkIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkIntervalIndex.setStatus('mandatory')
sc553NetworkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkIntervalNumber.setStatus('mandatory')
sc553NetworkIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553NetworkIntervalStats.setStatus('mandatory')
sc553FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 9), )
if mibBuilder.loadTexts: sc553FarEndIntervalTable.setStatus('mandatory')
sc553FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 9, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553FarEndIntervalIndex"), (0, "GDC-SC553-MIB", "sc553FarEndIntervalNumber"))
if mibBuilder.loadTexts: sc553FarEndIntervalEntry.setStatus('mandatory')
sc553FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553FarEndIntervalIndex.setStatus('mandatory')
sc553FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553FarEndIntervalNumber.setStatus('mandatory')
sc553FarEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553FarEndIntervalStats.setStatus('mandatory')
sc553StoreUserTotals = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("store", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553StoreUserTotals.setStatus('mandatory')
sc553StoreUserIntervals = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("store", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc553StoreUserIntervals.setStatus('mandatory')
sc553ShelfUserTotals = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 465))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ShelfUserTotals.setStatus('mandatory')
sc553ShelfUserIntvlsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 13), )
if mibBuilder.loadTexts: sc553ShelfUserIntvlsTable.setStatus('mandatory')
sc553ShelfUserIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 13, 1), ).setIndexNames((0, "GDC-SC553-MIB", "sc553ShelfUserIntvlsIndex"))
if mibBuilder.loadTexts: sc553ShelfUserIntervalsEntry.setStatus('mandatory')
sc553ShelfUserIntvlsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ShelfUserIntvlsIndex.setStatus('mandatory')
sc553ShelfUserIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 11, 6, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 465))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc553ShelfUserIntervals.setStatus('mandatory')
mibBuilder.exportSymbols("GDC-SC553-MIB", sc553TwinPackPowerSupply=sc553TwinPackPowerSupply, sc553ChannelNetworkPosition=sc553ChannelNetworkPosition, sc553NoResponseAlm=sc553NoResponseAlm, sc553CurrentNetworkEntry=sc553CurrentNetworkEntry, sc553FarEndIntervalTable=sc553FarEndIntervalTable, sc553CurrentFarEndStat=sc553CurrentFarEndStat, sc553NetworkAdminLineType=sc553NetworkAdminLineType, sc553ProductType=sc553ProductType, sc553TotalFarEndEntry=sc553TotalFarEndEntry, sc553AlarmConfigIndex=sc553AlarmConfigIndex, sc553CasReceiveLevel=sc553CasReceiveLevel, sc553Diagnostics=sc553Diagnostics, sc553Alarms=sc553Alarms, sc553NetworkConfigIndex=sc553NetworkConfigIndex, sc553DiagT1Test=sc553DiagT1Test, sc553ChannelDS0AllocationScheme=sc553ChannelDS0AllocationScheme, sc553DiagT1SelfTestPattern=sc553DiagT1SelfTestPattern, sc553AlarmIndicationSignalAlm=sc553AlarmIndicationSignalAlm, sc553TXDNoTransitionsAlm=sc553TXDNoTransitionsAlm, sc553NetworkFallbackClockSource=sc553NetworkFallbackClockSource, sc553ValidNetworkIntervals=sc553ValidNetworkIntervals, sc553NetworkIntervalStats=sc553NetworkIntervalStats, sc553FarEndIntervalNumber=sc553FarEndIntervalNumber, sc553CascadeConfigIndex=sc553CascadeConfigIndex, sc553ShelfUserIntvlsIndex=sc553ShelfUserIntvlsIndex, sc553ShelfUserIntervals=sc553ShelfUserIntervals, sc553CrcErrorsAlm=sc553CrcErrorsAlm, sc553CascadeAISLoopdown=sc553CascadeAISLoopdown, sc553NetworkOperLineType=sc553NetworkOperLineType, sc553LowAverageDensityAlm=sc553LowAverageDensityAlm, sc553NetworkIntervalIndex=sc553NetworkIntervalIndex, sc553ReceivedYellowAlm=sc553ReceivedYellowAlm, sc553NetworkIntervalNumber=sc553NetworkIntervalNumber, sc553FrontPanelTestAlm=sc553FrontPanelTestAlm, sc553UserIntervalTable=sc553UserIntervalTable, sc553CascadeLineCoding=sc553CascadeLineCoding, sc553DiagT1TestDirection=sc553DiagT1TestDirection, sc553MaintenanceTable=sc553MaintenanceTable, sc553ValidFarEndIntervals=sc553ValidFarEndIntervals, sc553StoreUserTotals=sc553StoreUserTotals, sc553DefaultInit=sc553DefaultInit, sc553AlarmData=sc553AlarmData, sc553LedStatus=sc553LedStatus, sc553CascadeInterfaceType=sc553CascadeInterfaceType, sc553TimingLossAlm=sc553TimingLossAlm, sc553CurrentUserIndex=sc553CurrentUserIndex, sc553AlarmCountWindow=sc553AlarmCountWindow, sc553Version=sc553Version, sc553MaintenanceIndex=sc553MaintenanceIndex, sc553TotalFarEndIndex=sc553TotalFarEndIndex, sc553CascadeOperLineBuildout=sc553CascadeOperLineBuildout, sc553SoftReset=sc553SoftReset, sc553TotalUserEntry=sc553TotalUserEntry, sc553NetworkIntervalTable=sc553NetworkIntervalTable, sc553StoredFirmwareStatus=sc553StoredFirmwareStatus, sc553TotalNetworkEntry=sc553TotalNetworkEntry, sc553DiagTestStatus=sc553DiagTestStatus, sc553ResetStatistics=sc553ResetStatistics, sc553PowerUpAlm=sc553PowerUpAlm, sc553ChannelActivePort=sc553ChannelActivePort, sc553CascadeAdminLineType=sc553CascadeAdminLineType, sc553FarEndIntervalIndex=sc553FarEndIntervalIndex, sc553NetworkOperLineBuildout=sc553NetworkOperLineBuildout, sc553DiagProgPattern=sc553DiagProgPattern, sc553ChannelRTSCTSControl=sc553ChannelRTSCTSControl, sc553ValidUserIntervals=sc553ValidUserIntervals, sc553TotalFarEndStat=sc553TotalFarEndStat, sc553NetworkIntervalEntry=sc553NetworkIntervalEntry, sc553NetworkLineCoding=sc553NetworkLineCoding, sc553TotalNetworkStat=sc553TotalNetworkStat, sc553ActiveFirmwareRev=sc553ActiveFirmwareRev, sc553ChannelLocalDCD=sc553ChannelLocalDCD, sc553AlarmConfigEntry=sc553AlarmConfigEntry, sc553Performance=sc553Performance, sc553ChannelNetworkNumber=sc553ChannelNetworkNumber, sc553ConfigChangeAlm=sc553ConfigChangeAlm, sc553=sc553, sc553DiagTable=sc553DiagTable, sc553DiagIndex=sc553DiagIndex, sc553ChannelConfigEntry=sc553ChannelConfigEntry, sc553ChannelOperClkInvert=sc553ChannelOperClkInvert, sc553TotalUserTable=sc553TotalUserTable, sc553DTRLossAlm=sc553DTRLossAlm, sc553UserIntervalEntry=sc553UserIntervalEntry, sc553NetworkAdminLineBuildout=sc553NetworkAdminLineBuildout, sc553FarEndIntervalEntry=sc553FarEndIntervalEntry, sc553WakeUpRemote=sc553WakeUpRemote, sc553VersionTable=sc553VersionTable, sc553VersionEntry=sc553VersionEntry, sc553DiagTestDuration=sc553DiagTestDuration, sc553ChannelConfigIndex=sc553ChannelConfigIndex, sc553CurrentFarEndIndex=sc553CurrentFarEndIndex, sc553CascadePresent=sc553CascadePresent, sc553ExternalTXClockLossAlm=sc553ExternalTXClockLossAlm, sc553CurrentUserStat=sc553CurrentUserStat, sc553CascadePreequalization=sc553CascadePreequalization, sc553ShelfUserIntvlsTable=sc553ShelfUserIntvlsTable, sc553Maintenance=sc553Maintenance, sc553ChannelStartingDS0=sc553ChannelStartingDS0, sc553TotalUserIndex=sc553TotalUserIndex, sc553CascadeConfigEntry=sc553CascadeConfigEntry, sc553BootRev=sc553BootRev, sc553AlarmConfigIdentifier=sc553AlarmConfigIdentifier, sc553UserIntervalIndex=sc553UserIntervalIndex, sc553NvRamCorruptAlm=sc553NvRamCorruptAlm, sc553DiagEntry=sc553DiagEntry, sc553DiagRxErrAlm=sc553DiagRxErrAlm, sc553NetworkFDLdcc=sc553NetworkFDLdcc, sc553DiagChannelTest=sc553DiagChannelTest, sc553NetworkOnesDensity=sc553NetworkOnesDensity, sc553DiagTestResults=sc553DiagTestResults, sc553UnsolicitedTestAlm=sc553UnsolicitedTestAlm, sc553ChannelChannelType=sc553ChannelChannelType, sc553NetworkConfigTable=sc553NetworkConfigTable, sc553InsertBitError=sc553InsertBitError, sc553UserIntervalNumber=sc553UserIntervalNumber, sc553ChannelConfigTable=sc553ChannelConfigTable, sc553CascadeFDLdcc=sc553CascadeFDLdcc, sc553CurrentNetworkStat=sc553CurrentNetworkStat, sc553LossOfSignalAlm=sc553LossOfSignalAlm, sc553NetworkPreequalization=sc553NetworkPreequalization, sc553UnavailableSignalStateAlm=sc553UnavailableSignalStateAlm, sc553FarEndIntervalStats=sc553FarEndIntervalStats, sc553ShelfUserIntervalsEntry=sc553ShelfUserIntervalsEntry, sc553CurrentFarEndTable=sc553CurrentFarEndTable, sc553BipolarViolationsAlm=sc553BipolarViolationsAlm, sc553TotalNetworkTable=sc553TotalNetworkTable, sc553UserIntervalStats=sc553UserIntervalStats, sc553TopPowerSupplyFail=sc553TopPowerSupplyFail, sc553ShelfType=sc553ShelfType, sc553VersionIndex=sc553VersionIndex, sc553FrontPanel=sc553FrontPanel, sc553AlarmConfigTable=sc553AlarmConfigTable, sc553ChannelDataInvert=sc553ChannelDataInvert, sc553NetworkTransmitClockSource=sc553NetworkTransmitClockSource, sc553DiagChannelSelfTestPattern=sc553DiagChannelSelfTestPattern, sc553CurrentUserTable=sc553CurrentUserTable, dsx1=dsx1, sc553NetworkFdl=sc553NetworkFdl, sc553NetworkConfigEntry=sc553NetworkConfigEntry, sc553ReceiveLevel=sc553ReceiveLevel, sc553CascadeAdminLineBuildout=sc553CascadeAdminLineBuildout, sc553channelRedundancy=sc553channelRedundancy, sc553RXDNoTransitionsAlm=sc553RXDNoTransitionsAlm, sc553CurrentFarEndEntry=sc553CurrentFarEndEntry, sc553CascadeFdl=sc553CascadeFdl, sc553CascadeLoopbackConfig=sc553CascadeLoopbackConfig, sc553TotalNetworkIndex=sc553TotalNetworkIndex, sc553DteStat=sc553DteStat, sc553DiagDS0SelfTestPattern=sc553DiagDS0SelfTestPattern, sc553CurrentNetworkIndex=sc553CurrentNetworkIndex, sc553CascadeConfigTable=sc553CascadeConfigTable, sc553BottomPowerSupplyFail=sc553BottomPowerSupplyFail, sc553ChannelAdminClkInvert=sc553ChannelAdminClkInvert, sc553DSRLossAlm=sc553DSRLossAlm, sc553UnitFailureAlm=sc553UnitFailureAlm, sc553ChannelInbandLoopdown=sc553ChannelInbandLoopdown, sc553DiagDS0TestDirection=sc553DiagDS0TestDirection, sc553CascadeOperLineType=sc553CascadeOperLineType, sc553NetworkAISLoopdown=sc553NetworkAISLoopdown, sc553CascadeInService=sc553CascadeInService, sc553DiagResetTestToNormal=sc553DiagResetTestToNormal, sc553MIBversion=sc553MIBversion, sc553TotalFarEndTable=sc553TotalFarEndTable, sc553StoredFirmwareRev=sc553StoredFirmwareRev, sc553DiagDS0Number=sc553DiagDS0Number, sc553StatusChangeAlm=sc553StatusChangeAlm, sc553CurrentNetworkTable=sc553CurrentNetworkTable, sc553ChannelBaseRate=sc553ChannelBaseRate, sc553ConfigurationSave=sc553ConfigurationSave, sc553SwitchActiveFirmware=sc553SwitchActiveFirmware, sc553RemoteNotResponding=sc553RemoteNotResponding, sc553ChannelInService=sc553ChannelInService, sc553ChannelEIAtestLeads=sc553ChannelEIAtestLeads, sc553ShelfUserTotals=sc553ShelfUserTotals, sc553ChannelInbandDccMode=sc553ChannelInbandDccMode, sc553DCDLossAlm=sc553DCDLossAlm, sc553NetworkInterfaceType=sc553NetworkInterfaceType, sc553MaintenanceEntry=sc553MaintenanceEntry, sc553ChannelSplitTiming=sc553ChannelSplitTiming, sc553RedundancyOn=sc553RedundancyOn, sc553CurrentUserEntry=sc553CurrentUserEntry, sc553ChannelLocalDSR=sc553ChannelLocalDSR, sc553NetworkLoopbackConfig=sc553NetworkLoopbackConfig, sc553LossOfFrameAlm=sc553LossOfFrameAlm, sc553ChannelNumberOfDS0s=sc553ChannelNumberOfDS0s, sc553DiagDS0Test=sc553DiagDS0Test, sc553Configuration=sc553Configuration, sc553TotalUserStat=sc553TotalUserStat, sc553StoreUserIntervals=sc553StoreUserIntervals, sc553DiagResetTestResults=sc553DiagResetTestResults, sc553AlarmCountThreshold=sc553AlarmCountThreshold, sc553DownloadingMode=sc553DownloadingMode, sc553ChannelInbandLoop=sc553ChannelInbandLoop, sc553TestAllLeds=sc553TestAllLeds)
