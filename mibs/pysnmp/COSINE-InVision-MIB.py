#
# PySNMP MIB module COSINE-InVision-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COSINE-InVision-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
csOrionMIB, csModules, csInVisionMIB = mibBuilder.importSymbols("COSINE-GLOBAL-REG", "csOrionMIB", "csModules", "csInVisionMIB")
csOrionSystemIpAddress, csOrionRestoreSlotIndex, csOrionBladeType, csOrionRestoreNumVRs = mibBuilder.importSymbols("COSINE-ORION-MIB", "csOrionSystemIpAddress", "csOrionRestoreSlotIndex", "csOrionBladeType", "csOrionRestoreNumVRs")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
enterprises, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Counter64, NotificationType, ModuleIdentity, Integer32, mib_2, Gauge32, MibIdentifier, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Counter64", "NotificationType", "ModuleIdentity", "Integer32", "mib-2", "Gauge32", "MibIdentifier", "Bits", "Unsigned32")
TimeStamp, DisplayString, DateAndTime, PhysAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "DateAndTime", "PhysAddress", "RowStatus", "TextualConvention")
cosineInVisionMod = ModuleIdentity((1, 3, 6, 1, 4, 1, 3085, 1, 1, 3))
cosineInVisionMod.setRevisions(('1970-01-01 00:00',))
if mibBuilder.loadTexts: cosineInVisionMod.setLastUpdated('9911231355Z')
if mibBuilder.loadTexts: cosineInVisionMod.setOrganization('Cosine Communication Co.')
csInVisionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1))
csInVisionBladeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2))
csInVisionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 2, 3))
csInVisionServerName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csInVisionServerName.setStatus('current')
csInVisionBladeTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1), )
if mibBuilder.loadTexts: csInVisionBladeTable.setStatus('current')
csInVisionBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-InVision-MIB", "csInVisionBladeSlotLocation"))
if mibBuilder.loadTexts: csInVisionBladeEntry.setStatus('current')
csInVisionBladeSlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: csInVisionBladeSlotLocation.setStatus('current')
csInVisionBladeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeDescr.setStatus('current')
csInVisionBladeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("process", 1), ("control", 2), ("ethernet", 3), ("ds3Unchannelized", 4), ("ds3channelized", 5), ("oc3Atm", 6), ("oc3Pos", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeType.setStatus('current')
csInVisionBladeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notPresent", 1), ("inactive", 2), ("active", 3), ("softwareLoading", 4), ("operational", 5), ("nonOperational", 6), ("failedWithBackup", 7), ("failedWithOutBackup", 8), ("backup", 9), ("standby", 10), ("reboot", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeState.setStatus('current')
csInVisionBladeEnginesNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeEnginesNumb.setStatus('current')
csInVisionBladePortNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladePortNumb.setStatus('current')
csInVisionBladeSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeSerialNumb.setStatus('current')
csInVisionBladeHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeHwVer.setStatus('current')
csInVisionBladeSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csInVisionBladeSwVer.setStatus('current')
csInVisionBladeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csInVisionBladeReset.setStatus('current')
csInVisionEventsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1))
csInVisionBladeResyncedInInVision = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 1)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreSlotIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csInVisionBladeResyncedInInVision.setStatus('current')
csInVisionBladeInconsistentInInVision = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 2)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreSlotIndex"), ("COSINE-InVision-MIB", "csInVisionBladeType"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csInVisionBladeInconsistentInInVision.setStatus('current')
csInVisionBladeRestoreOnDevice = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 3)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreSlotIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csInVisionBladeRestoreOnDevice.setStatus('current')
csInVisionVRRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 4)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreNumVRs"))
if mibBuilder.loadTexts: csInVisionVRRestoreSuccess.setStatus('current')
csInVisionVRRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 5)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreNumVRs"))
if mibBuilder.loadTexts: csInVisionVRRestoreFail.setStatus('current')
csInVisionDeviceVRRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 6)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreNumVRs"))
if mibBuilder.loadTexts: csInVisionDeviceVRRestoreFail.setStatus('current')
csInVisionFailToRegisterForTrap = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 7)).setObjects(("COSINE-ORION-MIB", "csOrionSystemIpAddress"))
if mibBuilder.loadTexts: csInVisionFailToRegisterForTrap.setStatus('current')
csInVisionServerDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 8)).setObjects(("COSINE-InVision-MIB", "csInVisionServerName"))
if mibBuilder.loadTexts: csInVisionServerDown.setStatus('current')
csInVisionFailToUnRegisterForTrap = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 2, 1, 1, 9)).setObjects(("COSINE-ORION-MIB", "csOrionSystemIpAddress"))
if mibBuilder.loadTexts: csInVisionFailToUnRegisterForTrap.setStatus('current')
mibBuilder.exportSymbols("COSINE-InVision-MIB", csInVisionBladePortNumb=csInVisionBladePortNumb, csInVisionBladeTable=csInVisionBladeTable, csInVisionObjects=csInVisionObjects, csInVisionBladeState=csInVisionBladeState, csInVisionVRRestoreFail=csInVisionVRRestoreFail, csInVisionBladeType=csInVisionBladeType, csInVisionBladeInfo=csInVisionBladeInfo, csInVisionBladeRestoreOnDevice=csInVisionBladeRestoreOnDevice, csInVisionBladeSerialNumb=csInVisionBladeSerialNumb, csInVisionEvents=csInVisionEvents, csInVisionServerName=csInVisionServerName, csInVisionBladeInconsistentInInVision=csInVisionBladeInconsistentInInVision, csInVisionEventsInfo=csInVisionEventsInfo, PYSNMP_MODULE_ID=cosineInVisionMod, csInVisionServerDown=csInVisionServerDown, csInVisionBladeEnginesNumb=csInVisionBladeEnginesNumb, csInVisionBladeEntry=csInVisionBladeEntry, csInVisionBladeReset=csInVisionBladeReset, csInVisionDeviceVRRestoreFail=csInVisionDeviceVRRestoreFail, csInVisionFailToRegisterForTrap=csInVisionFailToRegisterForTrap, csInVisionFailToUnRegisterForTrap=csInVisionFailToUnRegisterForTrap, csInVisionVRRestoreSuccess=csInVisionVRRestoreSuccess, csInVisionBladeDescr=csInVisionBladeDescr, csInVisionBladeSlotLocation=csInVisionBladeSlotLocation, csInVisionBladeHwVer=csInVisionBladeHwVer, cosineInVisionMod=cosineInVisionMod, csInVisionBladeSwVer=csInVisionBladeSwVer, csInVisionBladeResyncedInInVision=csInVisionBladeResyncedInInVision)
