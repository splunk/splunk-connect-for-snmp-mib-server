#
# PySNMP MIB module Vsm-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Vsm-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
dv2, = mibBuilder.importSymbols("DV2-MIB", "dv2")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Bits, TimeTicks, Counter32, MibIdentifier, ModuleIdentity, NotificationType, Gauge32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "MibIdentifier", "ModuleIdentity", "NotificationType", "Gauge32", "IpAddress", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dv2Vsm = MibIdentifier((1, 3, 6, 1, 4, 1, 251, 1, 1, 47))
class VciInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class VpiInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class VsmBundle(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 127)

vsmCardCfgTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 1), )
if mibBuilder.loadTexts: vsmCardCfgTable.setStatus('mandatory')
vsmCardCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 1, 1), ).setIndexNames((0, "Vsm-MIB", "vsmCardCfgIndex"))
if mibBuilder.loadTexts: vsmCardCfgTableEntry.setStatus('mandatory')
vsmCardCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardCfgIndex.setStatus('mandatory')
vsmCardCfgBndlTslotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardCfgBndlTslotStatus.setStatus('mandatory')
vsmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2), )
if mibBuilder.loadTexts: vsmLinkTable.setStatus('mandatory')
vsmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2, 1), ).setIndexNames((0, "Vsm-MIB", "vsmLinkLink"))
if mibBuilder.loadTexts: vsmLinkEntry.setStatus('mandatory')
vsmLinkLink = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmLinkLink.setStatus('mandatory')
vsmLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmLinkEnable.setStatus('mandatory')
vsmLinkEnableStat = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1), ("wait-for-valid-lim", 3), ("link-not-used", 4), ("error", 5), ("wait-signaling-lim", 6), ("wait-lim-framing", 7), ("wait-frame-bit", 8))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmLinkEnableStat.setStatus('mandatory')
vsmLinkSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("cas", 2), ("none", 1))).clone('cas')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmLinkSigType.setStatus('mandatory')
vsmTsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3), )
if mibBuilder.loadTexts: vsmTsCfgTable.setStatus('mandatory')
vsmTsCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1), ).setIndexNames((0, "Vsm-MIB", "vsmTsCfgLinkNo"), (0, "Vsm-MIB", "vsmTsCfgTsNo"))
if mibBuilder.loadTexts: vsmTsCfgTableEntry.setStatus('mandatory')
vsmTsCfgLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgLinkNo.setStatus('mandatory')
vsmTsCfgTsNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgTsNo.setStatus('mandatory')
vsmTsCfgBundleNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 3), VsmBundle().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgBundleNo.setStatus('mandatory')
vsmTsCfgAALTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("aal2", 2), ("aal1", 1))).clone('aal2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgAALTyp.setStatus('mandatory')
vsmTsCfgChanID = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgChanID.setStatus('mandatory')
vsmTsCfgCmprssionTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("adpcmG726-32k", 2), ("none", 1))).clone('adpcmG726-32k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgCmprssionTyp.setStatus('mandatory')
vsmTsCfgFaxMdmHndlng = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("auto-disable", 2), ("always-compress", 1))).clone('auto-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgFaxMdmHndlng.setStatus('mandatory')
vsmTsCfgEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("auto-disable", 3), ("enable", 1), ("disable", 2))).clone('auto-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgEchoCancel.setStatus('mandatory')
vsmTsCfgSilenceRmvl = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("auto-disable", 3), ("enable", 1), ("disable", 2))).clone('auto-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgSilenceRmvl.setStatus('mandatory')
vsmTsCfgIdleDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgIdleDetect.setStatus('mandatory')
vsmTsCfgRmtLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("auto", 3), ("u-law", 1), ("a-law", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgRmtLaw.setStatus('mandatory')
vsmTsCfgSignalTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 2, 3, 4, 5, 7, 8, 1))).clone(namedValues=NamedValues(("e-and-m", 6), ("gs-fxo-fxs", 2), ("gs-fxs-fxo", 3), ("ls-fxo-fxs", 4), ("ls-fxs-fxo", 5), ("ssr2", 7), ("plar", 8), ("none", 1))).clone('e-and-m')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgSignalTyp.setStatus('mandatory')
vsmTsCfgSigCndTypNB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("onhook-A0B0", 1), ("onhook-A0B1", 2), ("offhook-A01B01", 3), ("failure-A1B1", 5), ("failure-A10B1", 6), ("failure-A1B1C1D1", 7))).clone('onhook-A0B0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgSigCndTypNB.setStatus('mandatory')
vsmTsCfgSigCndTypATM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("onhook-A0B0", 1), ("onhook-A0B1", 2), ("offhook-A01B01", 3), ("failure-A1B1", 5), ("failure-A10B1", 6), ("failure-A1B1C1D1", 7))).clone('onhook-A0B0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgSigCndTypATM.setStatus('mandatory')
vsmTsCfgDataCndTypNB = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 1))).clone(namedValues=NamedValues(("muLaw-0V-7F", 2), ("muLaw-0V-FF", 3), ("aLaw-0V-D5", 4), ("aLaw-0V-54", 5), ("dacs-trbl-E4", 6), ("ctrl-mode-FE", 7), ("cir-oos-36", 8), ("mux-oos-1A", 9), ("user-data-FF", 10), ("none", 1))).clone('muLaw-0V-7F')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgDataCndTypNB.setStatus('mandatory')
vsmTsCfgDataCndTypATM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 1))).clone(namedValues=NamedValues(("muLaw-0V-7F", 2), ("muLaw-0V-FF", 3), ("aLaw-0V-D5", 4), ("aLaw-0V-54", 5), ("dacs-trbl-E4", 6), ("ctrl-mode-FE", 7), ("cir-oos-36", 8), ("mux-oos-1A", 9), ("user-data-FF", 10), ("none", 1))).clone('muLaw-0V-7F')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgDataCndTypATM.setStatus('mandatory')
vsmTsCfgMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgMulticast.setStatus('mandatory')
vsmTsCfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("down", 2), ("up", 1), ("configured", 3), ("inv-cfg", 4), ("aal-mismatch", 5), ("no-more-DSPs", 6), ("inv-CID", 7), ("inv-Lk-no", 9), ("inv-Sil-Det", 10), ("inv-CmpTyp", 11), ("unknown-Lim", 12), ("inv-MCast", 13), ("inv-maxtslot", 14), ("aal1-max-TS", 15), ("inv-MCast-BN", 16), ("non-CAS-link", 17))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsCfgOperStatus.setStatus('mandatory')
vsmTsCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("down", 2), ("up", 1), ("reconfig", 3))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgAdminStatus.setStatus('mandatory')
vsmTsCfgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsCfgValidity.setStatus('mandatory')
vsmBundleCfgTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4), )
if mibBuilder.loadTexts: vsmBundleCfgTable.setStatus('mandatory')
vsmBundleCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1), ).setIndexNames((0, "Vsm-MIB", "vsmBundleCfgNo"))
if mibBuilder.loadTexts: vsmBundleCfgTableEntry.setStatus('mandatory')
vsmBundleCfgNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 1), VsmBundle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgNo.setStatus('mandatory')
vsmBundleCfgVcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 2), VpiInteger().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgVcVpi.setStatus('mandatory')
vsmBundleCfgVcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 3), VciInteger().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleCfgVcVci.setStatus('mandatory')
vsmBundleCfgVcAALTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("aal2", 2), ("aal1", 1))).clone('aal2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgVcAALTyp.setStatus('mandatory')
vsmBundleCfgMaxTslot = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgMaxTslot.setStatus('mandatory')
vsmBundleCfgVcCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgVcCDV.setStatus('mandatory')
vsmBundleCfgTimerCU = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgTimerCU.setStatus('mandatory')
vsmBundleCfgCESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgCESPartialFill.setStatus('mandatory')
vsmBundleCfgVcTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("spvc", 2), ("svc", 3))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgVcTyp.setStatus('mandatory')
vsmBundleCfgTrapCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-trap", 1), ("state-change", 2))).clone('no-trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgTrapCfg.setStatus('mandatory')
vsmBundleCfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4, 5, 7, 9, 10, 11))).clone(namedValues=NamedValues(("down", 2), ("up", 1), ("configured", 3), ("inv-cfg", 4), ("aal-mismatch", 5), ("inv-VPI", 7), ("bndl-novc", 9), ("inv-maxtslot", 10), ("inv-VPI-15", 11))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleCfgOperStatus.setStatus('mandatory')
vsmBundleCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("down", 2), ("up", 1), ("reconfig", 3))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgAdminStatus.setStatus('mandatory')
vsmBundleCfgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleCfgValidity.setStatus('mandatory')
vsmCardStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5), )
if mibBuilder.loadTexts: vsmCardStatTable.setStatus('mandatory')
vsmCardStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1), ).setIndexNames((0, "Vsm-MIB", "vsmCardStatIndex"))
if mibBuilder.loadTexts: vsmCardStatTableEntry.setStatus('mandatory')
vsmCardStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatIndex.setStatus('mandatory')
vsmCardStatBdType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatBdType.setStatus('mandatory')
vsmCardStatHWSWCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatHWSWCompatibility.setStatus('mandatory')
vsmCardStatBinPres = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bin-not-present", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatBinPres.setStatus('mandatory')
vsmCardStatBinRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatBinRev.setStatus('mandatory')
vsmCardStatBdRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatBdRev.setStatus('mandatory')
vsmCardStatDoc1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-doc-type", 1), ("type-48-channel", 2), ("type-60-channel", 3), ("doc-not-present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatDoc1Type.setStatus('mandatory')
vsmCardStatDoc1TypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatDoc1TypeRev.setStatus('mandatory')
vsmCardStatDoc2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-doc-type", 1), ("type-48-channel", 2), ("type-60-channel", 3), ("doc-not-present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatDoc2Type.setStatus('mandatory')
vsmCardStatDoc2TypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatDoc2TypeRev.setStatus('mandatory')
vsmCardStatLimType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid-or-no-lim", 1), ("ds1-dual-signaling-lim", 2), ("ds1-quad-signaling-lim", 3), ("e1-dual-signaling-lim", 4), ("e1-quad-signaling-lim", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardStatLimType.setStatus('mandatory')
vsmTsStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6), )
if mibBuilder.loadTexts: vsmTsStatTable.setStatus('mandatory')
vsmTsStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1), ).setIndexNames((0, "Vsm-MIB", "vsmTsStatLinkNo"), (0, "Vsm-MIB", "vsmTsStatTSNo"))
if mibBuilder.loadTexts: vsmTsStatTableEntry.setStatus('mandatory')
vsmTsStatLinkNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatLinkNo.setStatus('mandatory')
vsmTsStatTSNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatTSNo.setStatus('mandatory')
vsmTsStatBundleNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 3), VsmBundle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatBundleNo.setStatus('mandatory')
vsmTsStatXmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatXmitBytes.setStatus('mandatory')
vsmTsStatRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatRecvBytes.setStatus('mandatory')
vsmTsStatUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatUnderflows.setStatus('mandatory')
vsmTsStatLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatLostPackets.setStatus('mandatory')
vsmTsStatAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("aal2", 2), ("aal1", 1))).clone('aal2')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatAALType.setStatus('mandatory')
vsmTsStatVCID = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatVCID.setStatus('mandatory')
vsmTsStatCID = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatCID.setStatus('mandatory')
vsmTsStatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatActive.setStatus('mandatory')
vsmTsStatDataLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsp", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatDataLnk.setStatus('mandatory')
vsmTsStatBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatBlocked.setStatus('mandatory')
vsmTsStatIdleIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatIdleIdle.setStatus('mandatory')
vsmTsStatHold = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatHold.setStatus('mandatory')
vsmTsStatRemoteCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatRemoteCompressed.setStatus('mandatory')
vsmTsStatRemoteSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatRemoteSilent.setStatus('mandatory')
vsmTsStatCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatCompressed.setStatus('mandatory')
vsmTsStatSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatSilent.setStatus('mandatory')
vsmTsStatConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatConditioning.setStatus('mandatory')
vsmTsStatRemoteConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatRemoteConditioning.setStatus('mandatory')
vsmTsStatRIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatRIWF.setStatus('mandatory')
vsmTsStatLossofRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatLossofRefresh.setStatus('mandatory')
vsmTsStatCasValuesPDH = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 1), ("a0-b0-c0-d1", 2), ("a0-b0-c1-d0", 3), ("a0-b0-c1-d1", 4), ("a0-b1-c0-d0", 5), ("a0-b1-c0-d1", 6), ("a0-b1-c1-d0", 7), ("a0-b1-c1-d1", 8), ("a1-b0-c0-d0", 9), ("a1-b0-c0-d1", 10), ("a1-b0-c1-d0", 11), ("a1-b0-c1-d1", 12), ("a1-b1-c0-d0", 13), ("a1-b1-c0-d1", 14), ("a1-b1-c1-d0", 15), ("a1-b1-c1-d1", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatCasValuesPDH.setStatus('mandatory')
vsmTsStatCasValuesATM = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 1), ("a0-b0-c0-d1", 2), ("a0-b0-c1-d0", 3), ("a0-b0-c1-d1", 4), ("a0-b1-c0-d0", 5), ("a0-b1-c0-d1", 6), ("a0-b1-c1-d0", 7), ("a0-b1-c1-d1", 8), ("a1-b0-c0-d0", 9), ("a1-b0-c0-d1", 10), ("a1-b0-c1-d0", 11), ("a1-b0-c1-d1", 12), ("a1-b1-c0-d0", 13), ("a1-b1-c0-d1", 14), ("a1-b1-c1-d0", 15), ("a1-b1-c1-d1", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTsStatCasValuesATM.setStatus('mandatory')
vsmTsStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmTsStatReset.setStatus('mandatory')
vsmBundleStatTable = MibTable((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7), )
if mibBuilder.loadTexts: vsmBundleStatTable.setStatus('mandatory')
vsmBundleStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1), ).setIndexNames((0, "Vsm-MIB", "vsmBundleStatBundleNo"))
if mibBuilder.loadTexts: vsmBundleStatTableEntry.setStatus('mandatory')
vsmBundleStatBundleNo = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 1), VsmBundle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatBundleNo.setStatus('mandatory')
vsmBundleStatXmitCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatXmitCells.setStatus('mandatory')
vsmBundleStatRecvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatRecvCells.setStatus('mandatory')
vsmBundleStatPvcActive = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("not-active", 2), ("active", 1))).clone('not-active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatPvcActive.setStatus('mandatory')
vsmBundleStatAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("aal2", 2), ("aal1", 1))).clone('aal2')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatAALType.setStatus('mandatory')
vsmBundleStatBufUndrflws = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatBufUndrflws.setStatus('mandatory')
vsmBundleStatBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatBufOverflows.setStatus('mandatory')
vsmBundleStatPtrReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatPtrReframes.setStatus('mandatory')
vsmBundleStatLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatLostCells.setStatus('mandatory')
vsmBundleStatHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatHdrErrors.setStatus('mandatory')
vsmBundleStatBadCID = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatBadCID.setStatus('mandatory')
vsmBundleStatAAL2LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatAAL2LostCells.setStatus('mandatory')
vsmBundleStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmBundleStatReset.setStatus('mandatory')
vsmBundleStatConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 251, 1, 1, 47, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmBundleStatConditioning.setStatus('mandatory')
mibBuilder.exportSymbols("Vsm-MIB", vsmBundleStatPtrReframes=vsmBundleStatPtrReframes, vsmCardStatTableEntry=vsmCardStatTableEntry, vsmTsCfgTableEntry=vsmTsCfgTableEntry, vsmCardCfgTableEntry=vsmCardCfgTableEntry, vsmBundleStatBadCID=vsmBundleStatBadCID, vsmBundleStatXmitCells=vsmBundleStatXmitCells, vsmCardStatDoc2Type=vsmCardStatDoc2Type, vsmCardStatDoc1TypeRev=vsmCardStatDoc1TypeRev, vsmTsStatCID=vsmTsStatCID, vsmCardCfgIndex=vsmCardCfgIndex, vsmTsCfgTsNo=vsmTsCfgTsNo, vsmLinkTable=vsmLinkTable, vsmTsCfgValidity=vsmTsCfgValidity, vsmTsCfgMulticast=vsmTsCfgMulticast, vsmCardStatHWSWCompatibility=vsmCardStatHWSWCompatibility, vsmTsCfgSignalTyp=vsmTsCfgSignalTyp, vsmBundleStatLostCells=vsmBundleStatLostCells, vsmTsStatLostPackets=vsmTsStatLostPackets, vsmBundleStatAALType=vsmBundleStatAALType, vsmTsStatDataLnk=vsmTsStatDataLnk, vsmLinkEnableStat=vsmLinkEnableStat, vsmTsCfgCmprssionTyp=vsmTsCfgCmprssionTyp, vsmTsStatBundleNo=vsmTsStatBundleNo, vsmTsCfgAALTyp=vsmTsCfgAALTyp, vsmTsCfgSigCndTypNB=vsmTsCfgSigCndTypNB, vsmBundleCfgVcVpi=vsmBundleCfgVcVpi, vsmTsStatLinkNo=vsmTsStatLinkNo, vsmTsStatSilent=vsmTsStatSilent, vsmTsCfgOperStatus=vsmTsCfgOperStatus, vsmBundleCfgMaxTslot=vsmBundleCfgMaxTslot, vsmCardStatBinRev=vsmCardStatBinRev, vsmTsCfgSigCndTypATM=vsmTsCfgSigCndTypATM, vsmCardStatTable=vsmCardStatTable, vsmTsCfgBundleNo=vsmTsCfgBundleNo, vsmTsStatRIWF=vsmTsStatRIWF, vsmBundleStatTableEntry=vsmBundleStatTableEntry, vsmTsCfgDataCndTypATM=vsmTsCfgDataCndTypATM, vsmTsStatBlocked=vsmTsStatBlocked, vsmBundleCfgVcCDV=vsmBundleCfgVcCDV, vsmCardStatDoc1Type=vsmCardStatDoc1Type, vsmBundleStatBufOverflows=vsmBundleStatBufOverflows, vsmCardStatLimType=vsmCardStatLimType, vsmLinkSigType=vsmLinkSigType, vsmBundleStatReset=vsmBundleStatReset, vsmTsStatRemoteConditioning=vsmTsStatRemoteConditioning, vsmTsStatCasValuesATM=vsmTsStatCasValuesATM, vsmTsStatRemoteCompressed=vsmTsStatRemoteCompressed, vsmTsStatConditioning=vsmTsStatConditioning, vsmTsStatVCID=vsmTsStatVCID, vsmLinkEntry=vsmLinkEntry, vsmTsCfgTable=vsmTsCfgTable, vsmTsStatXmitBytes=vsmTsStatXmitBytes, VpiInteger=VpiInteger, vsmBundleCfgTimerCU=vsmBundleCfgTimerCU, vsmTsStatActive=vsmTsStatActive, vsmTsStatLossofRefresh=vsmTsStatLossofRefresh, vsmTsStatCasValuesPDH=vsmTsStatCasValuesPDH, vsmCardCfgTable=vsmCardCfgTable, vsmTsStatTableEntry=vsmTsStatTableEntry, vsmBundleStatBundleNo=vsmBundleStatBundleNo, vsmCardStatBdRev=vsmCardStatBdRev, vsmBundleCfgCESPartialFill=vsmBundleCfgCESPartialFill, vsmBundleCfgNo=vsmBundleCfgNo, vsmTsStatRemoteSilent=vsmTsStatRemoteSilent, vsmTsStatReset=vsmTsStatReset, vsmTsStatIdleIdle=vsmTsStatIdleIdle, vsmBundleStatBufUndrflws=vsmBundleStatBufUndrflws, vsmTsStatTSNo=vsmTsStatTSNo, vsmLinkLink=vsmLinkLink, vsmTsStatAALType=vsmTsStatAALType, vsmTsCfgSilenceRmvl=vsmTsCfgSilenceRmvl, vsmBundleCfgOperStatus=vsmBundleCfgOperStatus, vsmCardStatBdType=vsmCardStatBdType, vsmCardStatBinPres=vsmCardStatBinPres, vsmTsCfgFaxMdmHndlng=vsmTsCfgFaxMdmHndlng, vsmBundleCfgTrapCfg=vsmBundleCfgTrapCfg, vsmCardStatIndex=vsmCardStatIndex, vsmBundleCfgValidity=vsmBundleCfgValidity, vsmBundleStatTable=vsmBundleStatTable, VsmBundle=VsmBundle, vsmTsStatTable=vsmTsStatTable, vsmTsStatHold=vsmTsStatHold, vsmBundleCfgVcAALTyp=vsmBundleCfgVcAALTyp, vsmTsCfgAdminStatus=vsmTsCfgAdminStatus, vsmTsStatUnderflows=vsmTsStatUnderflows, vsmTsCfgChanID=vsmTsCfgChanID, vsmBundleCfgVcTyp=vsmBundleCfgVcTyp, vsmBundleCfgAdminStatus=vsmBundleCfgAdminStatus, vsmLinkEnable=vsmLinkEnable, vsmTsCfgDataCndTypNB=vsmTsCfgDataCndTypNB, vsmTsCfgIdleDetect=vsmTsCfgIdleDetect, dv2Vsm=dv2Vsm, vsmBundleStatAAL2LostCells=vsmBundleStatAAL2LostCells, vsmTsCfgRmtLaw=vsmTsCfgRmtLaw, vsmCardCfgBndlTslotStatus=vsmCardCfgBndlTslotStatus, vsmTsCfgLinkNo=vsmTsCfgLinkNo, vsmTsStatCompressed=vsmTsStatCompressed, vsmTsStatRecvBytes=vsmTsStatRecvBytes, vsmBundleStatHdrErrors=vsmBundleStatHdrErrors, vsmBundleCfgTable=vsmBundleCfgTable, vsmTsCfgEchoCancel=vsmTsCfgEchoCancel, vsmBundleStatRecvCells=vsmBundleStatRecvCells, vsmBundleStatPvcActive=vsmBundleStatPvcActive, VciInteger=VciInteger, vsmCardStatDoc2TypeRev=vsmCardStatDoc2TypeRev, vsmBundleCfgVcVci=vsmBundleCfgVcVci, vsmBundleCfgTableEntry=vsmBundleCfgTableEntry, vsmBundleStatConditioning=vsmBundleStatConditioning)
