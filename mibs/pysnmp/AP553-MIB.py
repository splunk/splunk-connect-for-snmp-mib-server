#
# PySNMP MIB module AP553-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AP553-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
linkProbe, = mibBuilder.importSymbols("INNOVX-CORE-MIB", "linkProbe")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, ObjectIdentity, NotificationType, Integer32, Unsigned32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, TimeTicks, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "ObjectIdentity", "NotificationType", "Integer32", "Unsigned32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "TimeTicks", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
probeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1))
probeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2))
probePerform = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3))
trapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4))
chanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1))
lmiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2))
proFunConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3))
trapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4))
pvcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5))
probeVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 6))
alarmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1))
frProbeMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frProbeMIBversion.setStatus('mandatory')
lmiOperation = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiOperation.setStatus('mandatory')
lmiDLCI = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("dlci-0", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiDLCI.setStatus('mandatory')
ipDLCI = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDLCI.setStatus('mandatory')
ipEncapp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rawIP", 1), ("ietf-IP", 2), ("snap-IP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipEncapp.setStatus('mandatory')
chanAggregateRate = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(56000, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanAggregateRate.setStatus('mandatory')
lmiType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexA", 1), ("annexD", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiType.setStatus('mandatory')
lmiN391 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiN391.setStatus('mandatory')
lmiNet392 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiNet392.setStatus('mandatory')
lmiUser392 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiUser392.setStatus('mandatory')
lmiNet393 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiNet393.setStatus('mandatory')
lmiUser393 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmiUser393.setStatus('mandatory')
t391Timer = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t391Timer.setStatus('mandatory')
t392Timer = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t392Timer.setStatus('mandatory')
maxInfoLength = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxInfoLength.setStatus('mandatory')
unitType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitType.setStatus('mandatory')
probeMode = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generator", 1), ("responder", 2), ("both", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeMode.setStatus('mandatory')
pollPeriod = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollPeriod.setStatus('mandatory')
globalTC = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTC.setStatus('mandatory')
pvcCount = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCount.setStatus('mandatory')
probeTokenSize = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(19, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeTokenSize.setStatus('mandatory')
pvcAdd = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvcAdd.setStatus('mandatory')
pvcDelete = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvcDelete.setStatus('mandatory')
pvcDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initiate", 1), ("inProgress", 2), ("complete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcDiscovery.setStatus('mandatory')
pvcOperStateChangeTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOperStateChangeTrapSeverity.setStatus('mandatory')
realTimeTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimeTrapSeverity.setStatus('mandatory')
realTimeChanLoadToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimeChanLoadToDCEThresh.setStatus('mandatory')
realTimeChanLoadToDCEThreshVar = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimeChanLoadToDCEThreshVar.setStatus('mandatory')
avgChanLoadToDCETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgChanLoadToDCETrapSeverity.setStatus('mandatory')
avgChanLoadToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgChanLoadToDCEThresh.setStatus('mandatory')
realTimeChanLoadToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimeChanLoadToDTEThresh.setStatus('mandatory')
realTimeChanLoadToDTEThreshVar = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimeChanLoadToDTEThreshVar.setStatus('mandatory')
avgChanLoadToDTETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgChanLoadToDTETrapSeverity.setStatus('mandatory')
avgChanLoadToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgChanLoadToDTEThresh.setStatus('mandatory')
realTimePvcLoadToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcLoadToDCEThresh.setStatus('mandatory')
realTimePvcLoadToDCEThreshVar = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcLoadToDCEThreshVar.setStatus('mandatory')
avgPvcLoadToDCETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLoadToDCETrapSeverity.setStatus('mandatory')
avgPvcLoadToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLoadToDCEThresh.setStatus('mandatory')
realTimePvcLoadToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcLoadToDTEThresh.setStatus('mandatory')
realTimePvcLoadToDTEThreshVar = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcLoadToDTEThreshVar.setStatus('mandatory')
avgPvcLoadToDTETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLoadToDTETrapSeverity.setStatus('mandatory')
avgPvcLoadToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLoadToDTEThresh.setStatus('mandatory')
realTimePvcRoundTripDelayThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcRoundTripDelayThresh.setStatus('mandatory')
realTimePvcRoundTripDelayThreshVar = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: realTimePvcRoundTripDelayThreshVar.setStatus('mandatory')
avgPvcRoundTripDelayTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcRoundTripDelayTrapSeverity.setStatus('mandatory')
avgPvcRoundTripDelayThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcRoundTripDelayThresh.setStatus('mandatory')
avgPvcNotAvailToDCETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcNotAvailToDCETrapSeverity.setStatus('mandatory')
avgPvcNotAvailToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcNotAvailToDCEThresh.setStatus('mandatory')
avgPvcNotAvailToDTETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcNotAvailToDTETrapSeverity.setStatus('mandatory')
avgPvcNotAvailToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcNotAvailToDTEThresh.setStatus('mandatory')
avgPvcFecnFramesTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcFecnFramesTrapSeverity.setStatus('mandatory')
avgPvcFecnFramesThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcFecnFramesThresh.setStatus('mandatory')
avgPvcBecnFramesTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcBecnFramesTrapSeverity.setStatus('mandatory')
avgPvcBecnFramesThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcBecnFramesThresh.setStatus('mandatory')
avgPvcCIRExceedToDTETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcCIRExceedToDTETrapSeverity.setStatus('mandatory')
avgPvcEIRExceedToDTETrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcEIRExceedToDTETrapSeverity.setStatus('mandatory')
avgPvcLossFrameTxTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLossFrameTxTrapSeverity.setStatus('mandatory')
avgPvcLossFrameRxTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avgPvcLossFrameRxTrapSeverity.setStatus('mandatory')
networkLmiInterfaceDownTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLmiInterfaceDownTrapSeverity.setStatus('mandatory')
userLmiInterfaceDownTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLmiInterfaceDownTrapSeverity.setStatus('mandatory')
pvcCirEirTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: pvcCirEirTable.setStatus('mandatory')
pvcCirEirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1), ).setIndexNames((0, "AP553-MIB", "pvcCirEirTableIndex"))
if mibBuilder.loadTexts: pvcCirEirEntry.setStatus('mandatory')
pvcCirEirTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCirEirTableIndex.setStatus('mandatory')
pvcCirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDTE.setStatus('mandatory')
pvcCirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDCE.setStatus('mandatory')
pvcEirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDTE.setStatus('mandatory')
pvcEirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDCE.setStatus('mandatory')
pvcOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvcNotProbed", 1), ("pvcWaitForProbe", 2), ("pvcProbed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcOperation.setStatus('mandatory')
pvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcState.setStatus('mandatory')
pvcIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 1, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcIdentifier.setStatus('mandatory')
chStCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1))
chCurrDteFrames = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDteFrames.setStatus('mandatory')
chCurrDceFrames = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDceFrames.setStatus('mandatory')
chCurrDteOctets = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDteOctets.setStatus('mandatory')
chCurrDceOctets = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDceOctets.setStatus('mandatory')
chCurrLmiTxEnq = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrLmiTxEnq.setStatus('mandatory')
chCurrLmiTxResp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrLmiTxResp.setStatus('mandatory')
chCurrLmiRxEnq = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrLmiRxEnq.setStatus('mandatory')
chCurrLmiRxResp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrLmiRxResp.setStatus('mandatory')
chCurrDTELmiTimeout = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDTELmiTimeout.setStatus('mandatory')
chCurrDCELmiTimeout = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrDCELmiTimeout.setStatus('mandatory')
chCurrFecnFrames = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrFecnFrames.setStatus('mandatory')
chCurrBecnFrames = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrBecnFrames.setStatus('mandatory')
chCurrTxIp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrTxIp.setStatus('mandatory')
chCurrRxIp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrRxIp.setStatus('mandatory')
chCurrTxPoll = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrTxPoll.setStatus('mandatory')
chCurrTxResp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrTxResp.setStatus('mandatory')
chCurrRxPoll = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrRxPoll.setStatus('mandatory')
chCurrRxResp = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCurrRxResp.setStatus('mandatory')
intervalComplete = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalComplete.setStatus('mandatory')
chStIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2), )
if mibBuilder.loadTexts: chStIntervalTable.setStatus('mandatory')
chStIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1), ).setIndexNames((0, "AP553-MIB", "chIntvIndex"))
if mibBuilder.loadTexts: chStIntervalEntry.setStatus('mandatory')
chIntvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvIndex.setStatus('mandatory')
chIntvDteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDteFrames.setStatus('mandatory')
chIntvDceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDceFrames.setStatus('mandatory')
chIntvDteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDteOctets.setStatus('mandatory')
chIntvDceOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDceOctets.setStatus('mandatory')
chIntvLmiTxEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvLmiTxEnq.setStatus('mandatory')
chIntvLmiTxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvLmiTxResp.setStatus('mandatory')
chIntvLmiRxEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvLmiRxEnq.setStatus('mandatory')
chIntvLmiRxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvLmiRxResp.setStatus('mandatory')
chIntvDTELmiTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDTELmiTimeout.setStatus('mandatory')
chIntvDCELmiTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvDCELmiTimeout.setStatus('mandatory')
chIntvFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvFecnFrames.setStatus('mandatory')
chIntvBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvBecnFrames.setStatus('mandatory')
chIntvTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvTxIp.setStatus('mandatory')
chIntvRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvRxIp.setStatus('mandatory')
chIntvTxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvTxPoll.setStatus('mandatory')
chIntvTxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvTxResp.setStatus('mandatory')
chIntvRxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvRxPoll.setStatus('mandatory')
chIntvRxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chIntvRxResp.setStatus('mandatory')
pvcStCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3), )
if mibBuilder.loadTexts: pvcStCurrentTable.setStatus('mandatory')
pvcStCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1), ).setIndexNames((0, "AP553-MIB", "pvcCurrDlciIndex"))
if mibBuilder.loadTexts: pvcStCurrentEntry.setStatus('mandatory')
pvcCurrDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDlciIndex.setStatus('mandatory')
pvcCurrDteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDteFrames.setStatus('mandatory')
pvcCurrDceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDceFrames.setStatus('mandatory')
pvcCurrDteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDteOctets.setStatus('mandatory')
pvcCurrDceOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDceOctets.setStatus('mandatory')
pvcCurrDteFramesWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDteFramesWithDE.setStatus('mandatory')
pvcCurrDceFramesWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrDceFramesWithDE.setStatus('mandatory')
pvcCurrFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrFecnFrames.setStatus('mandatory')
pvcCurrBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrBecnFrames.setStatus('mandatory')
pvcCurrTxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrTxPoll.setStatus('mandatory')
pvcCurrTxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrTxResp.setStatus('mandatory')
pvcCurrRxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrRxPoll.setStatus('mandatory')
pvcCurrRxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrRxResp.setStatus('mandatory')
pvcCurrLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback", 1), ("noLoopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCurrLoopback.setStatus('mandatory')
pvcStIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4), )
if mibBuilder.loadTexts: pvcStIntervalTable.setStatus('mandatory')
pvcStIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1), ).setIndexNames((0, "AP553-MIB", "pvcIntvDlciIndex"), (0, "AP553-MIB", "pvcIntvIndex"))
if mibBuilder.loadTexts: pvcStIntervalEntry.setStatus('mandatory')
pvcIntvDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDlciIndex.setStatus('mandatory')
pvcIntvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvIndex.setStatus('mandatory')
pvcIntvDteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDteFrames.setStatus('mandatory')
pvcIntvDceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDceFrames.setStatus('mandatory')
pvcIntvDteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDteOctets.setStatus('mandatory')
pvcIntvDceOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDceOctets.setStatus('mandatory')
pvcIntvDteFramesWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDteFramesWithDE.setStatus('mandatory')
pvcIntvDceFramesWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvDceFramesWithDE.setStatus('mandatory')
pvcIntvFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvFecnFrames.setStatus('mandatory')
pvcIntvBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvBecnFrames.setStatus('mandatory')
pvcIntvTxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvTxPoll.setStatus('mandatory')
pvcIntvTxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvTxResp.setStatus('mandatory')
pvcIntvRxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvRxPoll.setStatus('mandatory')
pvcIntvRxResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvRxResp.setStatus('mandatory')
pvcIntvLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback", 1), ("noLoopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIntvLoopback.setStatus('mandatory')
chanPerfCurr = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1))
chPerfCurrUnavailToDte = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrUnavailToDte.setStatus('mandatory')
chPerfCurrUnavailToDce = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrUnavailToDce.setStatus('mandatory')
chPerfCurrTxLoad = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrTxLoad.setStatus('mandatory')
chPerfCurrRxLoad = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrRxLoad.setStatus('mandatory')
chPerfCurrTotalTxLoad = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrTotalTxLoad.setStatus('mandatory')
chPerfCurrTotalRxLoad = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrTotalRxLoad.setStatus('mandatory')
chPerfCurrLoadToDceRealTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrLoadToDceRealTime.setStatus('mandatory')
chPerfCurrLoadToDteRealTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfCurrLoadToDteRealTime.setStatus('mandatory')
chanPerfIntvTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2), )
if mibBuilder.loadTexts: chanPerfIntvTable.setStatus('mandatory')
chanPerfIntvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1), ).setIndexNames((0, "AP553-MIB", "chPerfIntvIndex"))
if mibBuilder.loadTexts: chanPerfIntvEntry.setStatus('mandatory')
chPerfIntvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvIndex.setStatus('mandatory')
chPerfIntvUnavailToDte = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvUnavailToDte.setStatus('mandatory')
chPerfIntvUnavailToDce = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvUnavailToDce.setStatus('mandatory')
chPerfIntvTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvTxLoad.setStatus('mandatory')
chPerfIntvRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvRxLoad.setStatus('mandatory')
chPerfIntvTotalTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvTotalTxLoad.setStatus('mandatory')
chPerfIntvTotalRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPerfIntvTotalRxLoad.setStatus('mandatory')
pvcPerfCurrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3), )
if mibBuilder.loadTexts: pvcPerfCurrTable.setStatus('mandatory')
pvcPerfCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1), ).setIndexNames((0, "AP553-MIB", "pvcPerfCurrDlciIndex"))
if mibBuilder.loadTexts: pvcPerfCurrEntry.setStatus('mandatory')
pvcPerfCurrDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrDlciIndex.setStatus('mandatory')
pvcPerfCurrRtd = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrRtd.setStatus('mandatory')
pvcPerfCurrUnavailToDte = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrUnavailToDte.setStatus('mandatory')
pvcPerfCurrUnavailToDce = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrUnavailToDce.setStatus('mandatory')
pvcPerfCurrTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrTxLoad.setStatus('mandatory')
pvcPerfCurrRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrRxLoad.setStatus('mandatory')
pvcPerfCurrTotalTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrTotalTxLoad.setStatus('mandatory')
pvcPerfCurrTotalRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrTotalRxLoad.setStatus('mandatory')
pvcPerfCurrCirToNetExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrCirToNetExceed.setStatus('mandatory')
pvcPerfCurrEirToNetExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrEirToNetExceed.setStatus('mandatory')
pvcPerfCurrTxFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("notAvail", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrTxFrameLoss.setStatus('mandatory')
pvcPerfCurrRxFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("notAvail", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurrRxFrameLoss.setStatus('mandatory')
pvcPerfIntvTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4), )
if mibBuilder.loadTexts: pvcPerfIntvTable.setStatus('mandatory')
pvcPerfIntvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1), ).setIndexNames((0, "AP553-MIB", "pvcPerfIntvDlciIndex"), (0, "AP553-MIB", "pvcPerfIntvIndex"))
if mibBuilder.loadTexts: pvcPerfIntvEntry.setStatus('mandatory')
pvcPerfIntvDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvDlciIndex.setStatus('mandatory')
pvcPerfIntvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvIndex.setStatus('mandatory')
pvcPerfIntvRtd = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvRtd.setStatus('mandatory')
pvcPerfIntvUnavailToDte = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvUnavailToDte.setStatus('mandatory')
pvcPerfIntvUnavailToDce = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvUnavailToDce.setStatus('mandatory')
pvcPerfIntvTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvTxLoad.setStatus('mandatory')
pvcPerfIntvRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvRxLoad.setStatus('mandatory')
pvcPerfIntvTotalTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvTotalTxLoad.setStatus('mandatory')
pvcPerfIntvTotalRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvTotalRxLoad.setStatus('mandatory')
pvcPerfIntvCirToNetExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvCirToNetExceed.setStatus('mandatory')
pvcPerfIntvEirToNetExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvEirToNetExceed.setStatus('mandatory')
pvcPerfIntvTxFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("notAvail", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvTxFrameLoss.setStatus('mandatory')
pvcPerfIntvRxFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("notAvail", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntvRxFrameLoss.setStatus('mandatory')
pvcPerfRealTimeTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5), )
if mibBuilder.loadTexts: pvcPerfRealTimeTable.setStatus('mandatory')
pvcPerfRealTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5, 1), ).setIndexNames((0, "AP553-MIB", "pvcPerfRealTimeDlciIndex"))
if mibBuilder.loadTexts: pvcPerfRealTimeEntry.setStatus('mandatory')
pvcPerfRealTimeDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfRealTimeDlciIndex.setStatus('mandatory')
pvcPerfRealTimeRtd = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfRealTimeRtd.setStatus('mandatory')
pvcPerfRealTimeLoadToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfRealTimeLoadToDCE.setStatus('mandatory')
pvcPerfRealTimeLoadToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfRealTimeLoadToDTE.setStatus('mandatory')
alarmCurrentStatusBitsMap = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrentStatusBitsMap.setStatus('mandatory')
alarmCurrentStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1, 2), )
if mibBuilder.loadTexts: alarmCurrentStatusTable.setStatus('mandatory')
alarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1, 2, 1), ).setIndexNames((0, "AP553-MIB", "alarmStatusTableIndex"))
if mibBuilder.loadTexts: alarmStatusEntry.setStatus('mandatory')
alarmStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatusTableIndex.setStatus('mandatory')
currentStatusBitsMap = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 2, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStatusBitsMap.setStatus('mandatory')
mibBuilder.exportSymbols("AP553-MIB", chanConfig=chanConfig, chCurrRxPoll=chCurrRxPoll, pvcStIntervalTable=pvcStIntervalTable, probeTokenSize=probeTokenSize, chStIntervalEntry=chStIntervalEntry, pvcPerfCurrEirToNetExceed=pvcPerfCurrEirToNetExceed, realTimePvcLoadToDTEThreshVar=realTimePvcLoadToDTEThreshVar, realTimeChanLoadToDTEThreshVar=realTimeChanLoadToDTEThreshVar, pvcEirToDCE=pvcEirToDCE, pvcIntvBecnFrames=pvcIntvBecnFrames, pvcPerfCurrTotalRxLoad=pvcPerfCurrTotalRxLoad, pvcPerfIntvDlciIndex=pvcPerfIntvDlciIndex, pvcPerfRealTimeLoadToDTE=pvcPerfRealTimeLoadToDTE, pvcIdentifier=pvcIdentifier, pvcPerfIntvTable=pvcPerfIntvTable, chPerfCurrLoadToDceRealTime=chPerfCurrLoadToDceRealTime, alarmCurrentStatusBitsMap=alarmCurrentStatusBitsMap, avgChanLoadToDCETrapSeverity=avgChanLoadToDCETrapSeverity, pvcState=pvcState, pvcCirEirTable=pvcCirEirTable, pvcPerfIntvTxFrameLoss=pvcPerfIntvTxFrameLoss, chIntvLmiTxEnq=chIntvLmiTxEnq, probeStat=probeStat, lmiDLCI=lmiDLCI, pvcPerfIntvTxLoad=pvcPerfIntvTxLoad, chIntvLmiRxResp=chIntvLmiRxResp, pvcDelete=pvcDelete, pvcIntvLoopback=pvcIntvLoopback, currentStatusBitsMap=currentStatusBitsMap, pvcEirToDTE=pvcEirToDTE, intervalComplete=intervalComplete, alarmStatus=alarmStatus, chIntvDCELmiTimeout=chIntvDCELmiTimeout, pvcPerfCurrUnavailToDte=pvcPerfCurrUnavailToDte, pvcCurrDceOctets=pvcCurrDceOctets, realTimePvcRoundTripDelayThreshVar=realTimePvcRoundTripDelayThreshVar, pvcCirToDCE=pvcCirToDCE, avgPvcLoadToDTETrapSeverity=avgPvcLoadToDTETrapSeverity, chPerfIntvUnavailToDce=chPerfIntvUnavailToDce, pvcCurrRxResp=pvcCurrRxResp, pvcPerfIntvEntry=pvcPerfIntvEntry, unitType=unitType, pvcPerfCurrTable=pvcPerfCurrTable, alarmStatusEntry=alarmStatusEntry, pvcOperation=pvcOperation, realTimeChanLoadToDCEThreshVar=realTimeChanLoadToDCEThreshVar, globalTC=globalTC, pvcCirToDTE=pvcCirToDTE, alarmCurrentStatusTable=alarmCurrentStatusTable, chCurrFecnFrames=chCurrFecnFrames, chCurrLmiRxResp=chCurrLmiRxResp, chanPerfIntvEntry=chanPerfIntvEntry, lmiUser392=lmiUser392, realTimePvcLoadToDCEThresh=realTimePvcLoadToDCEThresh, avgPvcRoundTripDelayTrapSeverity=avgPvcRoundTripDelayTrapSeverity, chStCurrent=chStCurrent, avgChanLoadToDTEThresh=avgChanLoadToDTEThresh, lmiConfig=lmiConfig, chCurrBecnFrames=chCurrBecnFrames, pvcCurrRxPoll=pvcCurrRxPoll, chCurrTxPoll=chCurrTxPoll, pvcPerfIntvUnavailToDce=pvcPerfIntvUnavailToDce, probeConfig=probeConfig, pvcIntvDceFramesWithDE=pvcIntvDceFramesWithDE, pvcCurrDteOctets=pvcCurrDteOctets, pvcIntvTxResp=pvcIntvTxResp, avgPvcNotAvailToDCEThresh=avgPvcNotAvailToDCEThresh, chCurrDceOctets=chCurrDceOctets, lmiNet392=lmiNet392, chPerfIntvTxLoad=chPerfIntvTxLoad, chCurrDteOctets=chCurrDteOctets, chIntvDceOctets=chIntvDceOctets, chIntvLmiRxEnq=chIntvLmiRxEnq, pvcIntvDceOctets=pvcIntvDceOctets, pvcIntvFecnFrames=pvcIntvFecnFrames, trapConfig=trapConfig, chanPerfCurr=chanPerfCurr, realTimeChanLoadToDTEThresh=realTimeChanLoadToDTEThresh, pvcCurrTxResp=pvcCurrTxResp, pvcPerfRealTimeEntry=pvcPerfRealTimeEntry, realTimePvcRoundTripDelayThresh=realTimePvcRoundTripDelayThresh, pvcIntvDteOctets=pvcIntvDteOctets, probeMode=probeMode, pvcPerfIntvRxLoad=pvcPerfIntvRxLoad, chCurrLmiTxResp=chCurrLmiTxResp, chPerfIntvUnavailToDte=chPerfIntvUnavailToDte, avgPvcNotAvailToDTETrapSeverity=avgPvcNotAvailToDTETrapSeverity, pvcPerfRealTimeLoadToDCE=pvcPerfRealTimeLoadToDCE, chPerfCurrLoadToDteRealTime=chPerfCurrLoadToDteRealTime, pvcCurrLoopback=pvcCurrLoopback, pvcPerfCurrRxFrameLoss=pvcPerfCurrRxFrameLoss, pvcPerfCurrRtd=pvcPerfCurrRtd, pvcConfig=pvcConfig, chanAggregateRate=chanAggregateRate, pvcCurrFecnFrames=pvcCurrFecnFrames, chStIntervalTable=chStIntervalTable, pvcIntvDteFramesWithDE=pvcIntvDteFramesWithDE, pvcPerfCurrDlciIndex=pvcPerfCurrDlciIndex, avgPvcLoadToDTEThresh=avgPvcLoadToDTEThresh, avgPvcBecnFramesThresh=avgPvcBecnFramesThresh, pvcCurrDlciIndex=pvcCurrDlciIndex, realTimePvcLoadToDTEThresh=realTimePvcLoadToDTEThresh, chCurrTxIp=chCurrTxIp, chPerfIntvIndex=chPerfIntvIndex, chIntvDteOctets=chIntvDteOctets, chIntvLmiTxResp=chIntvLmiTxResp, chPerfIntvRxLoad=chPerfIntvRxLoad, probePerform=probePerform, pvcPerfRealTimeTable=pvcPerfRealTimeTable, avgPvcLossFrameTxTrapSeverity=avgPvcLossFrameTxTrapSeverity, chIntvDteFrames=chIntvDteFrames, chCurrDteFrames=chCurrDteFrames, chIntvBecnFrames=chIntvBecnFrames, pvcDiscovery=pvcDiscovery, userLmiInterfaceDownTrapSeverity=userLmiInterfaceDownTrapSeverity, pollPeriod=pollPeriod, chCurrDceFrames=chCurrDceFrames, chIntvTxPoll=chIntvTxPoll, pvcPerfCurrRxLoad=pvcPerfCurrRxLoad, lmiOperation=lmiOperation, pvcPerfIntvRtd=pvcPerfIntvRtd, trapStatus=trapStatus, pvcStCurrentTable=pvcStCurrentTable, chCurrDTELmiTimeout=chCurrDTELmiTimeout, avgPvcRoundTripDelayThresh=avgPvcRoundTripDelayThresh, chCurrTxResp=chCurrTxResp, chIntvRxResp=chIntvRxResp, pvcCount=pvcCount, pvcCirEirEntry=pvcCirEirEntry, realTimePvcLoadToDCEThreshVar=realTimePvcLoadToDCEThreshVar, lmiUser393=lmiUser393, pvcIntvTxPoll=pvcIntvTxPoll, chCurrLmiTxEnq=chCurrLmiTxEnq, chIntvTxIp=chIntvTxIp, lmiType=lmiType, pvcPerfRealTimeDlciIndex=pvcPerfRealTimeDlciIndex, pvcOperStateChangeTrapSeverity=pvcOperStateChangeTrapSeverity, avgPvcNotAvailToDTEThresh=avgPvcNotAvailToDTEThresh, realTimeChanLoadToDCEThresh=realTimeChanLoadToDCEThresh, chPerfCurrTotalRxLoad=chPerfCurrTotalRxLoad, chPerfCurrRxLoad=chPerfCurrRxLoad, ipEncapp=ipEncapp, t392Timer=t392Timer, avgPvcFecnFramesTrapSeverity=avgPvcFecnFramesTrapSeverity, pvcCurrDteFrames=pvcCurrDteFrames, chIntvRxIp=chIntvRxIp, avgPvcBecnFramesTrapSeverity=avgPvcBecnFramesTrapSeverity, networkLmiInterfaceDownTrapSeverity=networkLmiInterfaceDownTrapSeverity, t391Timer=t391Timer, chCurrRxIp=chCurrRxIp, avgPvcNotAvailToDCETrapSeverity=avgPvcNotAvailToDCETrapSeverity, pvcStIntervalEntry=pvcStIntervalEntry, chPerfCurrTxLoad=chPerfCurrTxLoad, pvcIntvDlciIndex=pvcIntvDlciIndex, pvcPerfIntvRxFrameLoss=pvcPerfIntvRxFrameLoss, chCurrLmiRxEnq=chCurrLmiRxEnq, chIntvDTELmiTimeout=chIntvDTELmiTimeout, pvcPerfCurrUnavailToDce=pvcPerfCurrUnavailToDce, avgPvcLossFrameRxTrapSeverity=avgPvcLossFrameRxTrapSeverity, pvcPerfIntvEirToNetExceed=pvcPerfIntvEirToNetExceed, pvcCurrDceFrames=pvcCurrDceFrames, chIntvFecnFrames=chIntvFecnFrames, lmiNet393=lmiNet393, avgPvcEIRExceedToDTETrapSeverity=avgPvcEIRExceedToDTETrapSeverity, pvcIntvDceFrames=pvcIntvDceFrames, pvcPerfCurrCirToNetExceed=pvcPerfCurrCirToNetExceed, chanPerfIntvTable=chanPerfIntvTable, pvcIntvDteFrames=pvcIntvDteFrames, proFunConfig=proFunConfig, avgPvcLoadToDCEThresh=avgPvcLoadToDCEThresh, probeVersion=probeVersion, pvcIntvRxPoll=pvcIntvRxPoll, pvcPerfIntvUnavailToDte=pvcPerfIntvUnavailToDte, pvcCurrBecnFrames=pvcCurrBecnFrames, avgPvcFecnFramesThresh=avgPvcFecnFramesThresh, chIntvTxResp=chIntvTxResp, pvcAdd=pvcAdd, pvcPerfCurrTxLoad=pvcPerfCurrTxLoad, realTimeTrapSeverity=realTimeTrapSeverity, avgPvcCIRExceedToDTETrapSeverity=avgPvcCIRExceedToDTETrapSeverity, pvcPerfIntvTotalTxLoad=pvcPerfIntvTotalTxLoad, avgChanLoadToDCEThresh=avgChanLoadToDCEThresh, pvcPerfCurrTotalTxLoad=pvcPerfCurrTotalTxLoad, pvcCurrTxPoll=pvcCurrTxPoll, avgPvcLoadToDCETrapSeverity=avgPvcLoadToDCETrapSeverity, ipDLCI=ipDLCI, pvcPerfCurrTxFrameLoss=pvcPerfCurrTxFrameLoss, lmiN391=lmiN391, maxInfoLength=maxInfoLength, chPerfCurrTotalTxLoad=chPerfCurrTotalTxLoad, chPerfIntvTotalRxLoad=chPerfIntvTotalRxLoad, pvcIntvIndex=pvcIntvIndex, pvcIntvRxResp=pvcIntvRxResp, chCurrDCELmiTimeout=chCurrDCELmiTimeout, chIntvIndex=chIntvIndex, pvcPerfIntvCirToNetExceed=pvcPerfIntvCirToNetExceed, pvcStCurrentEntry=pvcStCurrentEntry, pvcPerfRealTimeRtd=pvcPerfRealTimeRtd, pvcPerfIntvTotalRxLoad=pvcPerfIntvTotalRxLoad, chPerfIntvTotalTxLoad=chPerfIntvTotalTxLoad, pvcPerfIntvIndex=pvcPerfIntvIndex, chIntvDceFrames=chIntvDceFrames, chIntvRxPoll=chIntvRxPoll, pvcCirEirTableIndex=pvcCirEirTableIndex, pvcCurrDceFramesWithDE=pvcCurrDceFramesWithDE, avgChanLoadToDTETrapSeverity=avgChanLoadToDTETrapSeverity, chPerfCurrUnavailToDce=chPerfCurrUnavailToDce, frProbeMIBversion=frProbeMIBversion, chPerfCurrUnavailToDte=chPerfCurrUnavailToDte, pvcPerfCurrEntry=pvcPerfCurrEntry, alarmStatusTableIndex=alarmStatusTableIndex, pvcCurrDteFramesWithDE=pvcCurrDteFramesWithDE, chCurrRxResp=chCurrRxResp)
