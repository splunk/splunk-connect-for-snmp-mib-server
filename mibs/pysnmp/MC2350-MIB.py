#
# PySNMP MIB module MC2350-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MC2350-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hrDeviceIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDeviceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Counter64, Bits, IpAddress, Integer32, TimeTicks, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Counter64", "Bits", "IpAddress", "Integer32", "TimeTicks", "NotificationType", "Gauge32", "ModuleIdentity")
TextualConvention, DateAndTime, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "PhysAddress")
minolta = MibIdentifier((1, 3, 6, 1, 4, 1, 2590))
mltMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1))
mltDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 2))
mltMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1))
mltSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1))
mltInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2))
mltDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 3))
mltJob = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4))
mltPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1))
mltSysMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5))
mltNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1))
mltNetworkMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5))
mltJobManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1))
class CodedCharSet(TextualConvention, Integer32):
    status = 'mandatory'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("other", 1))

mltPrinterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6))
mltPrtMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 1))
mltPrtCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4))
mltPrtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5))
mltPrtFont = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6))
mltPrtPaper = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7))
mltPrtRemotePanel = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10))
mltPrtMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtMibVersion.setStatus('mandatory')
mltPrtCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1), )
if mibBuilder.loadTexts: mltPrtCommandTable.setStatus('mandatory')
mltPrtCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtCommandEntry.setStatus('mandatory')
mltPrtCommandOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("onLine", 1), ("offLine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandOnline.setStatus('mandatory')
mltPrtCommandJobCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notCancel", 1), ("jobCancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandJobCancel.setStatus('mandatory')
mltPrtCommandJobProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notProceed", 1), ("jobProceed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCommandJobProceed.setStatus('mandatory')
mltPrtPrintPageTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2), )
if mibBuilder.loadTexts: mltPrtPrintPageTable.setStatus('mandatory')
mltPrtPrintPageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPrintPageIndex"))
if mibBuilder.loadTexts: mltPrtPrintPageEntry.setStatus('mandatory')
mltPrtPrintPageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPrintPageIndex.setStatus('mandatory')
mltPrtPrintPageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPrintPageName.setStatus('mandatory')
mltPrtPrintCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("print", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPrintCommand.setStatus('mandatory')
mltPrtSysConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1), )
if mibBuilder.loadTexts: mltPrtSysConfigTable.setStatus('mandatory')
mltPrtSysConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtSysConfigEntry.setStatus('mandatory')
mltPrtJobLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("auto", 0), ("pcl", 1), ("ps", 2), ("gdi", 3), ("linePrinter", 4), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtJobLanguage.setStatus('mandatory')
mltPrtPowerSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPowerSave.setStatus('mandatory')
mltPrtAutoContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("ac0Sec", 2), ("ac10Sec", 3), ("ac20Sec", 4), ("ac30Sec", 5), ("ac60Sec", 6), ("ac90Sec", 7), ("ac120Sec", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtAutoContinue.setStatus('mandatory')
mltPrtPaperTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("proceedJob", 2), ("cancelJob", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperTimeOut.setStatus('mandatory')
mltPrtPsErrorPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPsErrorPrint.setStatus('mandatory')
mltPrtPrintConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2), )
if mibBuilder.loadTexts: mltPrtPrintConfigTable.setStatus('mandatory')
mltPrtPrintConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: mltPrtPrintConfigEntry.setStatus('mandatory')
mltPrtCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtCopies.setStatus('mandatory')
mltPrtPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperSize.setStatus('mandatory')
mltPrtPaperSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPaperSource.setStatus('mandatory')
mltPrtFineArt = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("offSwitch", 2), ("dark", 3), ("medium", 4), ("light", 5), ("offStep", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtFineArt.setStatus('mandatory')
mltPrtTonerSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtTonerSave.setStatus('mandatory')
mltPrtPclFontTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1), )
if mibBuilder.loadTexts: mltPrtPclFontTable.setStatus('mandatory')
mltPrtPclFontEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPclFontIndex"))
if mibBuilder.loadTexts: mltPrtPclFontEntry.setStatus('mandatory')
mltPrtPclFontIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontIndex.setStatus('mandatory')
mltPrtPclFontName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontName.setStatus('mandatory')
mltPrtPclFontNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontNumber.setStatus('mandatory')
mltPrtPclFontSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("internalRom", 1), ("internalHd", 2), ("downLoadRam", 3), ("downLoadHd", 4), ("downLoadFlashRom", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPclFontSource.setStatus('mandatory')
mltPrtPsFontTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2), )
if mibBuilder.loadTexts: mltPrtPsFontTable.setStatus('mandatory')
mltPrtPsFontEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPsFontIndex"))
if mibBuilder.loadTexts: mltPrtPsFontEntry.setStatus('mandatory')
mltPrtPsFontIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontIndex.setStatus('mandatory')
mltPrtPsFontName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontName.setStatus('mandatory')
mltPrtPsFontNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontNumber.setStatus('mandatory')
mltPrtPsFontSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("internalRom", 1), ("internalHd", 2), ("downLoadRam", 3), ("downLoadHd", 4), ("downLoadFlashRom", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPsFontSource.setStatus('mandatory')
mltPrtSymbolSetTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3), )
if mibBuilder.loadTexts: mltPrtSymbolSetTable.setStatus('mandatory')
mltPrtSymbolSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtSymbolSetIndex"))
if mibBuilder.loadTexts: mltPrtSymbolSetEntry.setStatus('mandatory')
mltPrtSymbolSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtSymbolSetIndex.setStatus('mandatory')
mltPrtSymbolSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtSymbolSetName.setStatus('mandatory')
mltPrtCharSetID = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtCharSetID.setStatus('mandatory')
mltPrtPaperSizeTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1), )
if mibBuilder.loadTexts: mltPrtPaperSizeTable.setStatus('mandatory')
mltPrtPaperSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPaperSizeIndex"))
if mibBuilder.loadTexts: mltPrtPaperSizeEntry.setStatus('mandatory')
mltPaperSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperSizeIndex.setStatus('mandatory')
mltPaperSizeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperSizeName.setStatus('mandatory')
mltPaperFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("sef", 1), ("lef", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPaperFeedDir.setStatus('mandatory')
mltPrtRemotePanelButtonTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1), )
if mibBuilder.loadTexts: mltPrtRemotePanelButtonTable.setStatus('optional')
mltPrtRemotePanelButtonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "MC2350-MIB", "mltPrtPanelButtonIndex"))
if mibBuilder.loadTexts: mltPrtRemotePanelButtonEntry.setStatus('optional')
mltPrtPanelButtonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonIndex.setStatus('optional')
mltPrtPanelButtonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonName.setStatus('optional')
mltPrtPanelButtonPush = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noAction", 0), ("push", 1), ("longPush", 2), ("shiftPush", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltPrtPanelButtonPush.setStatus('optional')
mltPrtPanelButtonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 1, 6, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrtPanelButtonDescr.setStatus('optional')
mltSysMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysMibVersion.setStatus('mandatory')
mltSysGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2))
mltSysContact = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3))
mltSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5))
mltSysComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6))
mltSysCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7))
mltSysPriorityDevice = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysPriorityDevice.setStatus('mandatory')
mltSysCurrentDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 2, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysCurrentDateTime.setStatus('mandatory')
mltSysContactSiteName = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysContactSiteName.setStatus('mandatory')
mltSysContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysContactInfo.setStatus('mandatory')
mltSysProductHelpURL = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysProductHelpURL.setStatus('mandatory')
mltSysCorpURL = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysCorpURL.setStatus('mandatory')
mltSysSuppliesInfo = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysSuppliesInfo.setStatus('mandatory')
mltSysVersionTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: mltSysVersionTable.setStatus('mandatory')
mltSysVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysVersionIndex"))
if mibBuilder.loadTexts: mltSysVersionEntry.setStatus('mandatory')
mltSysVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVersionIndex.setStatus('mandatory')
mltSysVerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVerName.setStatus('mandatory')
mltSysVersionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVersionCode.setStatus('mandatory')
mltSysVerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysVerDescr.setStatus('mandatory')
mltSysCompConfigID = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysCompConfigID.setStatus('mandatory')
mltSysInputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2), )
if mibBuilder.loadTexts: mltSysInputTrayTable.setStatus('mandatory')
mltSysInputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysInputTrayIndex"))
if mibBuilder.loadTexts: mltSysInputTrayEntry.setStatus('mandatory')
mltSysInputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayIndex.setStatus('mandatory')
mltSysInputTrayRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayRefIndex.setStatus('mandatory')
mltSysInputTrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTrayName.setStatus('mandatory')
mltSysInputTrayCapacitySence = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noSensor", 0), ("emptyOnly", 1), ("nearEmpty", 2), ("linearSense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysInputTrayCapacitySence.setStatus('mandatory')
mltSysInputTraySpecialPaper = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10, 11, 12, 14, 16, 20, 22, 23, 24, 25, 26, 27, 30, 36, 40, 41, 42, 44, 46, 48))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("plainPaper", 10), ("plainPaper-NotFor2Sided", 11), ("plainPaper-Recycled", 12), ("plainPaper-Exclusive", 14), ("plainPaper-Color", 16), ("thick", 20), ("thick1", 22), ("thick1-2side", 23), ("thick2", 24), ("thick2-2side", 25), ("thick3", 26), ("thick3-2side", 27), ("ohp", 30), ("thin", 36), ("envelope", 40), ("envelope-2side", 41), ("label", 42), ("postCard", 44), ("letterHead", 46), ("tab", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTraySpecialPaper.setStatus('mandatory')
mltSysInputTrayPaperAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 0), ("s0-normalPaper", 1), ("s1-recyclePaper", 2), ("s2-specialPaper", 3), ("s3-reusePaper", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysInputTrayPaperAttribute.setStatus('optional')
mltSysOutputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3), )
if mibBuilder.loadTexts: mltSysOutputTrayTable.setStatus('mandatory')
mltSysOutputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysOutputTrayIndex"))
if mibBuilder.loadTexts: mltSysOutputTrayEntry.setStatus('mandatory')
mltSysOutputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayIndex.setStatus('mandatory')
mltSysOutputTrayRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayRefIndex.setStatus('mandatory')
mltSysOutputTrayDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayDefaultName.setStatus('mandatory')
mltSysOutputTrayNickName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysOutputTrayNickName.setStatus('mandatory')
mltSysOutputTrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("standardBin", 1), ("sortBin", 3), ("mailBox", 4), ("fixedMailBin", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysOutputTrayType.setStatus('mandatory')
mltSysCounterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1))
mltSysSystemCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2))
mltSysSupportedCounterType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSupportedCounterType.setStatus('mandatory')
mltSysDuplexCountMode = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("singleCount", 1), ("doubleCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysDuplexCountMode.setStatus('mandatory')
mltSysLargeSizeCountMode = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("singleCount", 1), ("doubleCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysLargeSizeCountMode.setStatus('mandatory')
mltSysLargeSizeType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noLargeSize", 0), ("typeA", 1), ("typeB", 2), ("typeC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltSysLargeSizeType.setStatus('mandatory')
mltSysColorCountSupportType = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysColorCountSupportType.setStatus('mandatory')
mltSysGeneralCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1))
mltSysTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalCount.setStatus('mandatory')
mltSysLargeSizeCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysLargeSizeCount.setStatus('mandatory')
mltSysDuplexCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysDuplexCount.setStatus('mandatory')
mltSysLargeDuplexCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysLargeDuplexCount.setStatus('mandatory')
mltSysSendTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSendTotalCount.setStatus('mandatory')
mltSysTotalJamCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalJamCount.setStatus('mandatory')
mltSysTotalTroubleCount = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTotalTroubleCount.setStatus('mandatory')
mltSysPrintFunctionCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2), )
if mibBuilder.loadTexts: mltSysPrintFunctionCounterTable.setStatus('optional')
mltSysPrintFunctionCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysPrintFunctionColorIndex"), (0, "MC2350-MIB", "mltSysPrintFunctionIndex"))
if mibBuilder.loadTexts: mltSysPrintFunctionCounterEntry.setStatus('optional')
mltSysPrintFunctionColorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionColorIndex.setStatus('optional')
mltSysPrintFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionIndex.setStatus('optional')
mltSysPrintFunctionColorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bw", 1), ("fourColor", 2), ("threeColor", 3), ("cmy", 4), ("rgb", 5), ("monoColor", 6), ("paperPath", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionColorType.setStatus('optional')
mltSysPrintFunctionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("copyFunction", 1), ("printFunction", 2), ("receiveFunction", 3), ("faxReceiveFunction", 4), ("reportPrint", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionType.setStatus('optional')
mltSysPrintFunctionTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionTotalCount.setStatus('optional')
mltSysPrintFunctionDuplexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionDuplexCount.setStatus('optional')
mltSysPrintFunctionLargeSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionLargeSizeCount.setStatus('optional')
mltSysPrintFunctionLargeDuplexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysPrintFunctionLargeDuplexCount.setStatus('optional')
mltSysSizeCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4), )
if mibBuilder.loadTexts: mltSysSizeCounterTable.setStatus('mandatory')
mltSysSizeCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysSizeFunctionIndex"), (0, "MC2350-MIB", "mltSysSizeTypeIndex"))
if mibBuilder.loadTexts: mltSysSizeCounterEntry.setStatus('mandatory')
mltSysSizeFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeFunctionIndex.setStatus('mandatory')
mltSysSizeTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeTypeIndex.setStatus('mandatory')
mltSysSizeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("total", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeFunction.setStatus('mandatory')
mltSysSizeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 83, 84, 93, 100, 101, 102, 103, 104, 106, 114, 115, 116, 117, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 222, 223, 224, 225, 226, 227, 230, 236, 240, 241, 242, 244, 246, 248))).clone(namedValues=NamedValues(("otherPaperSize", 0), ("unknownPaperSize", 1), ("a0", 11), ("a1", 12), ("a2", 13), ("a3", 14), ("a4", 15), ("a5", 16), ("a6", 17), ("b0", 21), ("b1", 22), ("b2", 23), ("b3", 24), ("b4", 25), ("b5", 26), ("b6", 27), ("us12x14", 30), ("ledger", 31), ("us11x15", 32), ("us11x14", 33), ("comp", 34), ("us10x14", 35), ("us9-1by4x14", 36), ("legal", 37), ("us8-1by4x11-3by4", 38), ("letter", 39), ("govermentLetter", 40), ("quarto", 41), ("executive", 42), ("statement", 43), ("fls", 50), ("fls0", 51), ("fls1", 52), ("fls2", 53), ("fls3", 54), ("hagaki", 61), ("oufuku-Hagaki", 62), ("envelopeB5", 63), ("envelopeCom10", 64), ("envelopeC5", 65), ("envelopeDL", 66), ("envelopeMonarch", 67), ("envelopeC6", 68), ("youkei-0Gou", 70), ("youkei-4Gou", 71), ("youkei-6Gou", 72), ("choukei-3Gou", 83), ("choukei-4Gou", 84), ("kakugata-3Gou", 93), ("special0", 100), ("special1", 101), ("special2", 102), ("special3", 103), ("special4", 104), ("special5", 106), ("a3W", 114), ("a4W", 115), ("a5W", 116), ("a6W", 117), ("otherPaperAttribute", 199), ("unknownPaperAttribute", 200), ("plain", 201), ("exclusive", 202), ("notFor2Sided", 203), ("specialPaper", 204), ("cover", 205), ("inserter", 206), ("reuse", 207), ("otherMediaType", 208), ("unknownMediaType", 209), ("plainPaper", 210), ("plainPaper-2side", 211), ("plainPaper-Recycled", 212), ("plainPaper-Exclusive", 214), ("plainPaper-Color", 216), ("thick1", 222), ("thick1-2side", 223), ("thick2", 224), ("thick2-2side", 225), ("thick3", 226), ("thick3-2side", 227), ("ohp", 230), ("thin", 236), ("envelope", 240), ("envelope-2side", 241), ("label", 242), ("postCard", 244), ("letterHead", 246), ("tab", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeType.setStatus('mandatory')
mltSysSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysSizeCount.setStatus('mandatory')
mltSysTonerLifeCounterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5), )
if mibBuilder.loadTexts: mltSysTonerLifeCounterTable.setStatus('optional')
mltSysTonerLifeCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltSysTonerTypeIndex"))
if mibBuilder.loadTexts: mltSysTonerLifeCounterEntry.setStatus('optional')
mltSysTonerTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTonerTypeIndex.setStatus('optional')
mltSysTonerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("cyan", 1), ("magenta", 2), ("yellow", 3), ("black", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltSysTonerType.setStatus('optional')
mltTonerTypeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 1, 5, 7, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltTonerTypeCount.setStatus('optional')
mltNetMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetMibVersion.setStatus('mandatory')
mltNetGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2))
mltNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3))
mltNetCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5))
mltNetSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6))
mltNetTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7))
mltNetNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8))
mltNetAppleTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9))
mltNetSmb = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10))
mltNetGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: mltNetGeneralTable.setStatus('mandatory')
mltNetGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetGeneralIndex"))
if mibBuilder.loadTexts: mltNetGeneralEntry.setStatus('mandatory')
mltNetGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetGeneralIndex.setStatus('mandatory')
mltNetFirmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFirmVersion.setStatus('mandatory')
mltNetHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHardwareAddress.setStatus('mandatory')
mltNetSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSerialNumber.setStatus('mandatory')
mltNetSupportedConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSupportedConnector.setStatus('mandatory')
mltNetCurrentConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notWorking", 0), ("etherAUI", 1), ("etherBNC", 2), ("etherRJ", 3), ("etherFiber", 4), ("tokenSTP", 7), ("tokenUTP", 8), ("tokenFiber", 9), ("wirelessA", 11), ("wirelessB", 12), ("blueTooth", 13), ("ieee1394", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCurrentConnector.setStatus('mandatory')
mltNetSpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 0), ("autoDetectEther", 1), ("et10MbpsHalfDuplex", 2), ("et10MbpsFullDuplex", 3), ("et100MbpsHalfDuplex", 4), ("et100MbpsFullDuplex", 5), ("etGbpsHalfDuplex", 6), ("etGbpsFullDuplex", 7), ("autoDetectToken", 10), ("tr4Mbps", 11), ("tr16Mbps", 12), ("tr32Mbps", 13), ("autoDetectWireless", 20), ("wireless1Mbps", 21), ("wireless2Mbps", 22), ("wireless5-5Mbps", 23), ("wireless11Mbps", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSpeedConfig.setStatus('mandatory')
mltNetInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 11, 12, 100, 101, 102, 103, 104, 201, 202))).clone(namedValues=NamedValues(("other", 0), ("ieee1284", 1), ("ieee1394", 2), ("usb", 3), ("dual1284", 10), ("dpo", 11), ("psio", 12), ("onBoardDPO", 100), ("noPhysicalNIC", 101), ("onBoard", 102), ("onBoardOneChip", 103), ("onBoardPSIO", 104), ("pciNonIntelligent", 201), ("pciIntelligent", 202)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetInterfaceType.setStatus('mandatory')
mltNetIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIfDescr.setStatus('mandatory')
mltNetProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: mltNetProtocolTable.setStatus('mandatory')
mltNetProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetProtocolIfIndex"), (0, "MC2350-MIB", "mltNetProtocolIndex"))
if mibBuilder.loadTexts: mltNetProtocolEntry.setStatus('mandatory')
mltNetProtocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolIfIndex.setStatus('mandatory')
mltNetProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolIndex.setStatus('mandatory')
mltNetProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("unknown", 0), ("tcp-ip", 1), ("netWare", 2), ("appleTalk", 3), ("smb", 4), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolType.setStatus('mandatory')
mltNetProtocolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolDescr.setStatus('mandatory')
mltNetProtocolVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetProtocolVer.setStatus('mandatory')
mltNetProtocolOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetProtocolOnOff.setStatus('mandatory')
mltNetCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: mltNetCommandTable.setStatus('mandatory')
mltNetCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetCommandIfIndex"))
if mibBuilder.loadTexts: mltNetCommandEntry.setStatus('mandatory')
mltNetCommandIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandIfIndex.setStatus('mandatory')
mltNetCommandReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandReset.setStatus('mandatory')
mltNetCommandDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetCommandDefault.setStatus('mandatory')
mltNetCommandPrintNicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12))).clone(namedValues=NamedValues(("notSupported", 10), ("supported", 11), ("printing", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandPrintNicConfig.setStatus('mandatory')
mltNetCommandStartupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12))).clone(namedValues=NamedValues(("notSupported", 10), ("supported", 11), ("printStartUp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandStartupConfig.setStatus('mandatory')
mltNetCommandDownLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("notDownLoad", 1), ("downLoading", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetCommandDownLoad.setStatus('mandatory')
mltNetSnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: mltNetSnmpCommTable.setStatus('mandatory')
mltNetSnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSnmpCommIndex"))
if mibBuilder.loadTexts: mltNetSnmpCommEntry.setStatus('mandatory')
mltNetSnmpCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpCommIndex.setStatus('mandatory')
mltNetSnmpCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpCommName.setStatus('mandatory')
mltNetSnmpCommAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("readOnly", 1), ("writeOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpCommAccessRight.setStatus('mandatory')
mltNetSnmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: mltNetSnmpTrapTable.setStatus('mandatory')
mltNetSnmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSnmpTrapIfIndex"), (0, "MC2350-MIB", "mltNetSnmpTrapIndex"))
if mibBuilder.loadTexts: mltNetSnmpTrapEntry.setStatus('mandatory')
mltNetSnmpTrapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpTrapIfIndex.setStatus('mandatory')
mltNetSnmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSnmpTrapIndex.setStatus('mandatory')
mltNetSnmpTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapCommunity.setStatus('mandatory')
mltNetSnmpTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapIpAddress.setStatus('mandatory')
mltNetSnmpTrapIpxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapIpxAddress.setStatus('mandatory')
mltNetSnmpTrapOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSnmpTrapOnOff.setStatus('mandatory')
mltNetTcpipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1))
mltNetLpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2))
mltNetFtpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6))
mltNetHttpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8))
mltNetSmtpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13))
mltNetIpp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14))
mltNetSlp = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17))
mltNetTcpipGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1), )
if mibBuilder.loadTexts: mltNetTcpipGeneralTable.setStatus('mandatory')
mltNetTcpipGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetTcpipIfIndex"))
if mibBuilder.loadTexts: mltNetTcpipGeneralEntry.setStatus('mandatory')
mltNetTcpipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipIfIndex.setStatus('mandatory')
mltNetTcpipDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDefault.setStatus('mandatory')
mltNetTcpipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipAddress.setStatus('mandatory')
mltNetTcpipSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipSubnet.setStatus('mandatory')
mltNetTcpipGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipGateway.setStatus('mandatory')
mltNetTcpipUseBootProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("neverUse", 0), ("useWhenNoAddress", 1), ("useEveryTime", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipUseBootProtocol.setStatus('mandatory')
mltNetTcpipBootProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipBootProtocolEnable.setStatus('mandatory')
mltNetTcpipAddressServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipAddressServer.setStatus('mandatory')
mltNetTcpipRawPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipRawPortNumber.setStatus('mandatory')
mltNetTcpipSupportService = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipSupportService.setStatus('mandatory')
mltNetTcpipDnsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("use", 1), ("noUse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsSupport.setStatus('mandatory')
mltNetTcpipDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsHostName.setStatus('mandatory')
mltNetTcpipDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsDomainName.setStatus('mandatory')
mltNetTcpipDnsTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2), )
if mibBuilder.loadTexts: mltNetTcpipDnsTable.setStatus('mandatory')
mltNetTcpipDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetTcpipDnsIfIndex"), (0, "MC2350-MIB", "mltNetTcpipDnsServerIndex"))
if mibBuilder.loadTexts: mltNetTcpipDnsEntry.setStatus('mandatory')
mltNetTcpipDnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsIfIndex.setStatus('mandatory')
mltNetTcpipDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetTcpipDnsServerIndex.setStatus('mandatory')
mltNetTcpipDnsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetTcpipDnsServerAddress.setStatus('mandatory')
mltNetLpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1), )
if mibBuilder.loadTexts: mltNetLpdGeneralTable.setStatus('mandatory')
mltNetLpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetLpdIfIndex"))
if mibBuilder.loadTexts: mltNetLpdGeneralEntry.setStatus('mandatory')
mltNetLpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdIfIndex.setStatus('mandatory')
mltNetLpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdEnable.setStatus('mandatory')
mltNetLpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdPort.setStatus('mandatory')
mltNetLpdQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2), )
if mibBuilder.loadTexts: mltNetLpdQueueTable.setStatus('mandatory')
mltNetLpdQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetLpdQueueIfIndex"), (0, "MC2350-MIB", "mltNetLpdQueueIndex"))
if mibBuilder.loadTexts: mltNetLpdQueueEntry.setStatus('mandatory')
mltNetLpdQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueIfIndex.setStatus('mandatory')
mltNetLpdQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueIndex.setStatus('mandatory')
mltNetLpdQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdQueueName.setStatus('mandatory')
mltNetLpdQueueDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetLpdQueueDescr.setStatus('mandatory')
mltNetLpdQueueFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueFilter.setStatus('mandatory')
mltNetLpdQueueBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noBanner", 0), ("ascii", 1), ("pcl", 2), ("ps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueBanner.setStatus('mandatory')
mltNetLpdQueueEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetLpdQueueEnable.setStatus('mandatory')
mltNetFtpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1), )
if mibBuilder.loadTexts: mltNetFtpdGeneralTable.setStatus('mandatory')
mltNetFtpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetFtpdIfIndex"))
if mibBuilder.loadTexts: mltNetFtpdGeneralEntry.setStatus('mandatory')
mltNetFtpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdIfIndex.setStatus('mandatory')
mltNetFtpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdEnable.setStatus('mandatory')
mltNetFtpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdPort.setStatus('mandatory')
mltNetFtpdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2), )
if mibBuilder.loadTexts: mltNetFtpdConfigTable.setStatus('mandatory')
mltNetFtpdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetFtpdConfigIfIndex"), (0, "MC2350-MIB", "mltNetFtpdUserIndex"))
if mibBuilder.loadTexts: mltNetFtpdConfigEntry.setStatus('mandatory')
mltNetFtpdConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdConfigIfIndex.setStatus('mandatory')
mltNetFtpdUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUserIndex.setStatus('mandatory')
mltNetFtpdUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUser.setStatus('mandatory')
mltNetFtpdUserPassWd = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdUserPassWd.setStatus('mandatory')
mltNetFtpdCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetFtpdCapability.setStatus('mandatory')
mltNetFtpdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetFtpdDescr.setStatus('mandatory')
mltNetHttpdGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1), )
if mibBuilder.loadTexts: mltNetHttpdGeneralTable.setStatus('mandatory')
mltNetHttpdGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetHttpdIfIndex"))
if mibBuilder.loadTexts: mltNetHttpdGeneralEntry.setStatus('mandatory')
mltNetHttpdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetHttpdIfIndex.setStatus('mandatory')
mltNetHttpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdEnable.setStatus('mandatory')
mltNetHttpdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdPort.setStatus('mandatory')
mltNetHttpdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetHttpdDescr.setStatus('mandatory')
mltNetSmtpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1), )
if mibBuilder.loadTexts: mltNetSmtpGeneralTable.setStatus('mandatory')
mltNetSmtpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmtpIfIndex"))
if mibBuilder.loadTexts: mltNetSmtpGeneralEntry.setStatus('mandatory')
mltNetSmtpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpIfIndex.setStatus('mandatory')
mltNetSmtpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpEnable.setStatus('mandatory')
mltNetSmtpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpServerAddress.setStatus('mandatory')
mltNetSmtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpPort.setStatus('mandatory')
mltNetSmtpAccountTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2), )
if mibBuilder.loadTexts: mltNetSmtpAccountTable.setStatus('mandatory')
mltNetSmtpAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmtpAccountIfIndex"), (0, "MC2350-MIB", "mltNetSmtpAccountIndex"))
if mibBuilder.loadTexts: mltNetSmtpAccountEntry.setStatus('mandatory')
mltNetSmtpAccountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpAccountIfIndex.setStatus('mandatory')
mltNetSmtpAccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpAccountIndex.setStatus('mandatory')
mltNetSmtpFromAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpFromAddress.setStatus('mandatory')
mltNetSmtpReplyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpReplyAddress.setStatus('mandatory')
mltNetSmtpConnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpConnTimeout.setStatus('mandatory')
mltNetSmtpPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("epNet", 1), ("scanFunction", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmtpPurpose.setStatus('mandatory')
mltNetSmtpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 13, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmtpDescription.setStatus('mandatory')
mltNetIppGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1))
mltNetIppPrtDescrAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2))
mltNetIppJobTemplateAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3))
mltNetIppGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1), )
if mibBuilder.loadTexts: mltNetIppGeneralTable.setStatus('optional')
mltNetIppGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetIppGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppGeneralEntry.setStatus('optional')
mltNetIppGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppGeneralIfIndex.setStatus('optional')
mltNetIppServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetIppServiceEnable.setStatus('optional')
mltNetIppDefaultPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetIppDefaultPortIndex.setStatus('optional')
mltNetIppPortTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2), )
if mibBuilder.loadTexts: mltNetIppPortTable.setStatus('optional')
mltNetIppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetIppPortIfIndex"), (0, "MC2350-MIB", "mltNetIppPortIndex"))
if mibBuilder.loadTexts: mltNetIppPortEntry.setStatus('optional')
mltNetIppPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortIfIndex.setStatus('optional')
mltNetIppPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortIndex.setStatus('optional')
mltNetIppPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetIppPortNumber.setStatus('optional')
mltNetIppPrtDescGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1), )
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralTable.setStatus('optional')
mltNetIppPrtDescGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppPrtDescGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppPrtDescGeneralEntry.setStatus('optional')
mltIppPrtDescGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtDescGeneralIfIndex.setStatus('optional')
mltIppPrtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtName.setStatus('optional')
mltIppPrtMoreInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtMoreInfo.setStatus('optional')
mltIppPrtState = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("idle", 3), ("processing", 4), ("stopped", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtState.setStatus('optional')
mltIppCharSetConfiguredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetConfiguredIndex.setStatus('optional')
mltIppNaturalLanguageConfiguredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLanguageConfiguredIndex.setStatus('optional')
mltIppDocFormatDefaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppDocFormatDefaultIndex.setStatus('optional')
mltIppPrinterIsAcceptingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrinterIsAcceptingJobs.setStatus('optional')
mltIppQueuedJobCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppQueuedJobCount.setStatus('optional')
mltIppColorSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppColorSupported.setStatus('optional')
mltIppPdlOverrideSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("attempted", 3), ("notAttempted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPdlOverrideSupported.setStatus('optional')
mltIppPrinterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterUpTime.setStatus('optional')
mltIppPrtLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrtLocation.setStatus('optional')
mltIppPrinterCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 1, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterCurrentTime.setStatus('optional')
mltIppUriSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2), )
if mibBuilder.loadTexts: mltIppUriSupportedTable.setStatus('optional')
mltIppUriSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppUriIfIndex"), (0, "MC2350-MIB", "mltIppUriIndex"))
if mibBuilder.loadTexts: mltIppUriSupportedEntry.setStatus('optional')
mltIppUriIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriIfIndex.setStatus('optional')
mltIppUriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriIndex.setStatus('optional')
mltIppUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUri.setStatus('optional')
mltIppUriSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("none", 3), ("ssl3", 4), ("tls", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriSecurity.setStatus('optional')
mltIppUriAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 3), ("requestingUserName", 4), ("basic", 5), ("digest", 6), ("certificate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppUriAuthentication.setStatus('optional')
mltIppPrtStateReasonsTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3), )
if mibBuilder.loadTexts: mltIppPrtStateReasonsTable.setStatus('optional')
mltIppPrtStateReasonsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppPrtStateReasonIfIndex"), (0, "MC2350-MIB", "mltIppPrtStateReasonIndex"))
if mibBuilder.loadTexts: mltIppPrtStateReasonsEntry.setStatus('optional')
mltIppPrtStateReasonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonIfIndex.setStatus('optional')
mltIppPrtStateReasonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonIndex.setStatus('optional')
mltIppPrinterStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("other", 2), ("none", 3), ("mediaNeeded", 4), ("mediaJam", 5), ("movingToPaused", 6), ("paused", 7), ("shutDown", 8), ("connectingToDevice", 9), ("timedOut", 10), ("stopping", 11), ("stoppedPartly", 12), ("tonerLow", 13), ("tonerEmpty", 14), ("spoolAreaFull", 15), ("coverOpen", 16), ("interlockOpen", 17), ("doorOpen", 18), ("inputTrayMissing", 19), ("mediaLow", 20), ("mediaEmpty", 21), ("outputTrayMissing", 22), ("outputAreaAlmostFull", 23), ("outputAreaFull", 24), ("markerSupplyLow", 25), ("markerSupplyEmpty", 26), ("markerWasteAlmostFull", 27), ("markerWasteFull", 28), ("fuserOverTemp", 29), ("fuserUnderTemp", 30), ("opcNearEndOfLife", 31), ("opcLifeOver", 32), ("developerLow", 33), ("developerEmpty", 34), ("interpreterResourceUnavailable", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrinterStateReason.setStatus('optional')
mltIppPrtStateReasonSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("report", 3), ("warning", 4), ("error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPrtStateReasonSuffix.setStatus('optional')
mltIppVersionsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4), )
if mibBuilder.loadTexts: mltIppVersionsSupportedTable.setStatus('optional')
mltIppVersionsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppVersionIfIndex"), (0, "MC2350-MIB", "mltIppVersionIndex"))
if mibBuilder.loadTexts: mltIppVersionsSupportedEntry.setStatus('optional')
mltIppVersionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionIfIndex.setStatus('optional')
mltIppVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionIndex.setStatus('optional')
mltIppVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ipp10", 3), ("ipp11", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppVersionType.setStatus('optional')
mltIppOperationSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5), )
if mibBuilder.loadTexts: mltIppOperationSupportedTable.setStatus('optional')
mltIppOperationSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppOperationIfIndex"), (0, "MC2350-MIB", "mltIppOperationIndex"))
if mibBuilder.loadTexts: mltIppOperationSupportedEntry.setStatus('optional')
mltIppOperationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationIfIndex.setStatus('optional')
mltIppOperationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationIndex.setStatus('optional')
mltIppOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18))).clone(namedValues=NamedValues(("printJob", 2), ("printURI", 3), ("validateJob", 4), ("createJob", 5), ("sendDocument", 6), ("sendURI", 7), ("cancelJob", 8), ("getJobAttributes", 9), ("getJobs", 10), ("getPrinterAttributes", 11), ("holdJobs", 12), ("releaseJob", 13), ("restartJob", 14), ("pausePrinter", 16), ("resumePrinter", 17), ("purgeJobs", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOperationType.setStatus('optional')
mltIppOperationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppOperationEnable.setStatus('optional')
mltIppCharSetSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6), )
if mibBuilder.loadTexts: mltIppCharSetSupportedTable.setStatus('optional')
mltIppCharSetSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppCharSetIfIndex"), (0, "MC2350-MIB", "mltIppCharSetIndex"))
if mibBuilder.loadTexts: mltIppCharSetSupportedEntry.setStatus('optional')
mltIppCharSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetIfIndex.setStatus('optional')
mltIppCharSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetIndex.setStatus('optional')
mltIppCharSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetName.setStatus('optional')
mltIppCharSetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCharSetCode.setStatus('optional')
mltIppNaturalLanguageSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7), )
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedTable.setStatus('optional')
mltIppNaturalLanguageSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppNaturalLangIfIndex"), (0, "MC2350-MIB", "mltIppNaturalLangIndex"))
if mibBuilder.loadTexts: mltIppNaturalLanguageSupportedEntry.setStatus('optional')
mltIppNaturalLangIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangIfIndex.setStatus('optional')
mltIppNaturalLangIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangIndex.setStatus('optional')
mltIppNaturalLangName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNaturalLangName.setStatus('optional')
mltIppDocFormatSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8), )
if mibBuilder.loadTexts: mltIppDocFormatSupportedTable.setStatus('optional')
mltIppDocFormatSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppDocFormatIfIndex"), (0, "MC2350-MIB", "mltIppDocFormatIndex"))
if mibBuilder.loadTexts: mltIppDocFormatSupportedEntry.setStatus('optional')
mltIppDocFormatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatIfIndex.setStatus('optional')
mltIppDocFormatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatIndex.setStatus('optional')
mltIppDocFormatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppDocFormatName.setStatus('optional')
mltIppCompressionSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10), )
if mibBuilder.loadTexts: mltIppCompressionSupportedTable.setStatus('optional')
mltIppCompressionSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppCompressionIfIndex"), (0, "MC2350-MIB", "mltIppCompressionIndex"))
if mibBuilder.loadTexts: mltIppCompressionSupportedEntry.setStatus('optional')
mltIppCompressionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionIfIndex.setStatus('optional')
mltIppCompressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionIndex.setStatus('optional')
mltIppCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 3), ("deflate", 4), ("gzip", 5), ("compress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCompressionType.setStatus('optional')
mltNetIppJobTemplateGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1), )
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralTable.setStatus('optional')
mltNetIppJobTemplateGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobTemplateGeneralIfIndex"))
if mibBuilder.loadTexts: mltNetIppJobTemplateGeneralEntry.setStatus('optional')
mltIppJobTemplateGeneralIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobTemplateGeneralIfIndex.setStatus('optional')
mltIppJobPriorityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobPriorityDefault.setStatus('optional')
mltIppJobPrioritySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobPrioritySupported.setStatus('optional')
mltIppJobHoldUntilDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilDefault.setStatus('optional')
mltIppJobSheetsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsDefault.setStatus('optional')
mltIppCopiesDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppCopiesDefault.setStatus('optional')
mltIppCopiesMaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppCopiesMaxSupported.setStatus('optional')
mltIppFinishingsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsDefault.setStatus('optional')
mltIppPageRangesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppPageRangesSupported.setStatus('optional')
mltIppSidesDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppSidesDefault.setStatus('optional')
mltIppNumberUpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpDefault.setStatus('optional')
mltIppOrientationRequestedDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppOrientationRequestedDefault.setStatus('optional')
mltIppMediaDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppMediaDefault.setStatus('optional')
mltIppPrinterResolutionDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrinterResolutionDefault.setStatus('optional')
mltIppPrintQualityDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltIppPrintQualityDefault.setStatus('optional')
mltIppJobHoldUntilSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2), )
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedTable.setStatus('optional')
mltIppJobHoldUntilSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobHoldUntilIfIndex"), (0, "MC2350-MIB", "mltIppJobHoldUntilIndex"))
if mibBuilder.loadTexts: mltIppJobHoldUntilSupportedEntry.setStatus('optional')
mltIppJobHoldUntilIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilIfIndex.setStatus('optional')
mltIppJobHoldUntilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilIndex.setStatus('optional')
mltIppJobHoldUntilType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noHold", 3), ("indefinite", 4), ("dayTime", 5), ("evening", 6), ("night", 7), ("weekend", 8), ("secondShift", 9), ("thirdShift", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobHoldUntilType.setStatus('optional')
mltIppJobSheetsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3), )
if mibBuilder.loadTexts: mltIppJobSheetsSupportedTable.setStatus('optional')
mltIppJobSheetsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppJobSheetsIfIndex"), (0, "MC2350-MIB", "mltIppJobSheetsIndex"))
if mibBuilder.loadTexts: mltIppJobSheetsSupportedEntry.setStatus('optional')
mltIppJobSheetsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsIfIndex.setStatus('optional')
mltIppJobSheetsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsIndex.setStatus('optional')
mltIppJobSheetsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("none", 3), ("standard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppJobSheetsType.setStatus('optional')
mltIppFinishingsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4), )
if mibBuilder.loadTexts: mltIppFinishingsSupportedTable.setStatus('optional')
mltIppFinishingsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppFinishingsIfIndex"), (0, "MC2350-MIB", "mltIppFinishingsIndex"))
if mibBuilder.loadTexts: mltIppFinishingsSupportedEntry.setStatus('optional')
mltIppFinishingsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsIfIndex.setStatus('optional')
mltIppFinishingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsIndex.setStatus('optional')
mltIppFinishingsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("none", 3), ("staple", 4), ("punch", 5), ("cover", 6), ("bind", 7), ("saddle-stitch", 8), ("edge-stitch", 9), ("staple-top-left", 20), ("staple-bottom-left", 21), ("staple-top-right", 22), ("staple-bottom-right", 23), ("edge-stitch-left", 24), ("edge-stitch-top", 25), ("edge-stitch-right", 26), ("edge-stitch-bottom", 27), ("staple-dual-left", 28), ("staple-dual-top", 29), ("staple-dual-right", 30), ("staple-dual-bottom", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppFinishingsType.setStatus('optional')
mltIppSidesSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5), )
if mibBuilder.loadTexts: mltIppSidesSupportedTable.setStatus('optional')
mltIppSidesSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppSidesIfIndex"), (0, "MC2350-MIB", "mltIppSidesIndex"))
if mibBuilder.loadTexts: mltIppSidesSupportedEntry.setStatus('optional')
mltIppSidesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesIfIndex.setStatus('optional')
mltIppSidesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesIndex.setStatus('optional')
mltIppSidesType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("one-sided", 3), ("two-sided-long-edge", 4), ("two-sided-short-edge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppSidesType.setStatus('optional')
mltIppNumberUpSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6), )
if mibBuilder.loadTexts: mltIppNumberUpSupportedTable.setStatus('optional')
mltIppNumberUpSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppNumberUpIfIndex"), (0, "MC2350-MIB", "mltIppNumberUpIndex"))
if mibBuilder.loadTexts: mltIppNumberUpSupportedEntry.setStatus('optional')
mltIppNumberUpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpIfIndex.setStatus('optional')
mltIppNumberUpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpIndex.setStatus('optional')
mltIppNumberUpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("num1Up", 1), ("num2Up", 2), ("num4Up", 3), ("num9Up", 4), ("num16Up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppNumberUpType.setStatus('optional')
mltIppOrientationRequestedSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7), )
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedTable.setStatus('optional')
mltIppOrientationRequestedSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppOrientationRequestedIfIndex"), (0, "MC2350-MIB", "mltIppOrientationRequestedIndex"))
if mibBuilder.loadTexts: mltIppOrientationRequestedSupportedEntry.setStatus('optional')
mltIppOrientationRequestedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedIfIndex.setStatus('optional')
mltIppOrientationRequestedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedIndex.setStatus('optional')
mltIppOrientationRequestedType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("portrait", 3), ("landscape", 4), ("reverse-landscape", 5), ("reverse-portrait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppOrientationRequestedType.setStatus('optional')
mltIppMediaSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8), )
if mibBuilder.loadTexts: mltIppMediaSupportedTable.setStatus('optional')
mltIppMediaSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1), ).setIndexNames((0, "MC2350-MIB", "mltIppMediaIfIndex"), (0, "MC2350-MIB", "mltIppMediaIndex"))
if mibBuilder.loadTexts: mltIppMediaSupportedEntry.setStatus('optional')
mltIppMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaIfIndex.setStatus('optional')
mltIppMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaIndex.setStatus('optional')
mltIppMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaName.setStatus('optional')
mltIppMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaType.setStatus('optional')
mltIppMediaColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaColor.setStatus('optional')
mltIppMediaInputTray = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltIppMediaInputTray.setStatus('optional')
mltPrinterResolutionSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9), )
if mibBuilder.loadTexts: mltPrinterResolutionSupportedTable.setStatus('optional')
mltPrinterResolutionSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1), ).setIndexNames((0, "MC2350-MIB", "mltPrinterResolutionIfIndex"), (0, "MC2350-MIB", "mltPrinterResolutionIndex"))
if mibBuilder.loadTexts: mltPrinterResolutionSupportedEntry.setStatus('optional')
mltPrinterResolutionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionIfIndex.setStatus('optional')
mltPrinterResolutionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionIndex.setStatus('optional')
mltPrinterResolutionFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionFeedDir.setStatus('optional')
mltPrinterResolutionXFeedDir = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionXFeedDir.setStatus('optional')
mltPrinterResolutionUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("tenThousandthsOfInches", 3), ("micrometers", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrinterResolutionUnit.setStatus('optional')
mltPrintQualitySupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10), )
if mibBuilder.loadTexts: mltPrintQualitySupportedTable.setStatus('optional')
mltPrintQualitySupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1), ).setIndexNames((0, "MC2350-MIB", "mltPrintQualityIfIndex"), (0, "MC2350-MIB", "mltPrintQualityIndex"))
if mibBuilder.loadTexts: mltPrintQualitySupportedEntry.setStatus('optional')
mltPrintQualityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityIfIndex.setStatus('optional')
mltPrintQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityIndex.setStatus('optional')
mltPrintQualityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("draft", 3), ("normal", 4), ("high", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltPrintQualityType.setStatus('optional')
mltNetSlpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1), )
if mibBuilder.loadTexts: mltNetSlpGeneralTable.setStatus('mandatory')
mltNetSlpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSlpIfIndex"))
if mibBuilder.loadTexts: mltNetSlpGeneralEntry.setStatus('mandatory')
mltNetSlpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpIfIndex.setStatus('mandatory')
mltNetSlpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpEnable.setStatus('mandatory')
mltNetSlpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpPortNumber.setStatus('mandatory')
mltNetSlpMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpMTU.setStatus('mandatory')
mltNetSlpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpTTL.setStatus('mandatory')
mltNetSlpBroadcastSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastOnly", 1), ("multicastOnly", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpBroadcastSupport.setStatus('mandatory')
mltNetSlpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2), )
if mibBuilder.loadTexts: mltNetSlpConfigTable.setStatus('mandatory')
mltNetSlpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSlpConfigIfIndex"), (0, "MC2350-MIB", "mltNetSlpIndex"))
if mibBuilder.loadTexts: mltNetSlpConfigEntry.setStatus('mandatory')
mltNetSlpConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpConfigIfIndex.setStatus('mandatory')
mltNetSlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpIndex.setStatus('mandatory')
mltNetSlpService = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSlpService.setStatus('mandatory')
mltNetSlpScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpScope.setStatus('mandatory')
mltNetSlpLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 7, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSlpLifetime.setStatus('mandatory')
mltNetNwGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1), )
if mibBuilder.loadTexts: mltNetNwGeneralTable.setStatus('mandatory')
mltNetNwGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwIfIndex"))
if mibBuilder.loadTexts: mltNetNwGeneralEntry.setStatus('mandatory')
mltNetNwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwIfIndex.setStatus('mandatory')
mltNetNwDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwDefault.setStatus('mandatory')
mltNetNwFrameTypeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwFrameTypeConfig.setStatus('mandatory')
mltNetNwPrintMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pServerMode", 1), ("nPrinterMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPrintMode.setStatus('mandatory')
mltNetNwFrameTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2), )
if mibBuilder.loadTexts: mltNetNwFrameTable.setStatus('optional')
mltNetNwFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwFrameIfIndex"), (0, "MC2350-MIB", "mltNetNwFrameIndex"))
if mibBuilder.loadTexts: mltNetNwFrameEntry.setStatus('optional')
mltNetNwFrameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameIfIndex.setStatus('optional')
mltNetNwFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameIndex.setStatus('optional')
mltNetNwFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("ethernet8023", 1), ("ethernetII", 2), ("ethernetSnap", 3), ("ethernet8022", 4), ("tokenRing8025", 6), ("tokenRingSnap", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwFrameType.setStatus('optional')
mltNetNwNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNetworkNumber.setStatus('optional')
mltNetNwPserverTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3), )
if mibBuilder.loadTexts: mltNetNwPserverTable.setStatus('mandatory')
mltNetNwPserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwPsIfIndex"), (0, "MC2350-MIB", "mltNetNwPsIndex"))
if mibBuilder.loadTexts: mltNetNwPserverEntry.setStatus('mandatory')
mltNetNwPsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwPsIfIndex.setStatus('mandatory')
mltNetNwPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwPsIndex.setStatus('mandatory')
mltNetNwPsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsName.setStatus('mandatory')
mltNetNwPsPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPasswd.setStatus('mandatory')
mltNetNwPsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("binderyMode", 1), ("ndsMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsMode.setStatus('mandatory')
mltNetNwPsPrefFServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefFServer.setStatus('mandatory')
mltNetNwPsPrefTree = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefTree.setStatus('mandatory')
mltNetNwPsPrefContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPrefContext.setStatus('mandatory')
mltNetNwPsPollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwPsPollingRate.setStatus('mandatory')
mltNetNwQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4), )
if mibBuilder.loadTexts: mltNetNwQueueTable.setStatus('mandatory')
mltNetNwQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwQueueIndex"))
if mibBuilder.loadTexts: mltNetNwQueueEntry.setStatus('mandatory')
mltNetNwQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueIndex.setStatus('mandatory')
mltNetNwQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueName.setStatus('mandatory')
mltNetNwQueueRefIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueRefIfIndex.setStatus('mandatory')
mltNetNwQueueRefPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueRefPsIndex.setStatus('mandatory')
mltNetNwQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("available", 1), ("allocated", 2), ("inUse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwQueueStatus.setStatus('mandatory')
mltNetNwNPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5), )
if mibBuilder.loadTexts: mltNetNwNPrinterTable.setStatus('mandatory')
mltNetNwNPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetNwNPrinterIfIndex"), (0, "MC2350-MIB", "mltNetNwNPrinterIndex"))
if mibBuilder.loadTexts: mltNetNwNPrinterEntry.setStatus('mandatory')
mltNetNwNPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNPrinterIfIndex.setStatus('mandatory')
mltNetNwNPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetNwNPrinterIndex.setStatus('mandatory')
mltNetNwNPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwNPrinterName.setStatus('mandatory')
mltNetNwNPrinterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 8, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetNwNPrinterNumber.setStatus('mandatory')
mltNetAppleTalkGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1), )
if mibBuilder.loadTexts: mltNetAppleTalkGeneralTable.setStatus('mandatory')
mltNetAppleTalkGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetAtIfIndex"))
if mibBuilder.loadTexts: mltNetAppleTalkGeneralEntry.setStatus('mandatory')
mltNetAtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtIfIndex.setStatus('mandatory')
mltNetAtDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtDefault.setStatus('mandatory')
mltNetAtNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtNetNumber.setStatus('mandatory')
mltNetAtNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtNodeNumber.setStatus('mandatory')
mltNetAtDesiredZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtDesiredZone.setStatus('mandatory')
mltNetAtCurrentZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtCurrentZone.setStatus('mandatory')
mltNetAtPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2), )
if mibBuilder.loadTexts: mltNetAtPrinterTable.setStatus('mandatory')
mltNetAtPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetAtPrinterIfIndex"), (0, "MC2350-MIB", "mltNetAtPrinterIndex"))
if mibBuilder.loadTexts: mltNetAtPrinterEntry.setStatus('mandatory')
mltNetAtPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterIfIndex.setStatus('mandatory')
mltNetAtPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterIndex.setStatus('mandatory')
mltNetAtPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetAtPrinterName.setStatus('mandatory')
mltNetAtPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetAtPrinterType.setStatus('mandatory')
mltNetSmbGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1), )
if mibBuilder.loadTexts: mltNetSmbGeneralTable.setStatus('mandatory')
mltNetSmbGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmbIfIndex"))
if mibBuilder.loadTexts: mltNetSmbGeneralEntry.setStatus('mandatory')
mltNetSmbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbIfIndex.setStatus('mandatory')
mltNetSmbDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ("resetToDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbDefault.setStatus('mandatory')
mltNetSmbWorkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbWorkGroupName.setStatus('mandatory')
mltNetSmbHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbHostName.setStatus('mandatory')
mltNetSmbWinsSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsSupport.setStatus('mandatory')
mltNetSmbWinsPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsPrimaryServer.setStatus('mandatory')
mltNetSmbWinsSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbWinsSecondaryServer.setStatus('mandatory')
mltNetSmbPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2), )
if mibBuilder.loadTexts: mltNetSmbPrinterTable.setStatus('mandatory')
mltNetSmbPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1), ).setIndexNames((0, "MC2350-MIB", "mltNetSmbPrinterIfIndex"), (0, "MC2350-MIB", "mltNetSmbPrinterIndex"))
if mibBuilder.loadTexts: mltNetSmbPrinterEntry.setStatus('mandatory')
mltNetSmbPrinterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterIfIndex.setStatus('mandatory')
mltNetSmbPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterIndex.setStatus('mandatory')
mltNetSmbPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltNetSmbPrinterName.setStatus('mandatory')
mltNetSmbPrinterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 2, 1, 5, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltNetSmbPrinterDescr.setStatus('mandatory')
mltJmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmMibVersion.setStatus('mandatory')
mltJmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2))
mltJmJob = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3))
mltJmReport = MibIdentifier((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4))
mltJmGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: mltJmGeneralTable.setStatus('mandatory')
mltJmGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmGeneralJobSetIndex"))
if mibBuilder.loadTexts: mltJmGeneralEntry.setStatus('mandatory')
mltJmGeneralJobSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobSetIndex.setStatus('mandatory')
mltJmGeneralNumberOfActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralNumberOfActiveJobs.setStatus('mandatory')
mltJmGeneralOldestActiveJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralOldestActiveJobIndex.setStatus('mandatory')
mltJmGeneralNewestActiveJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralNewestActiveJobIndex.setStatus('mandatory')
mltJmGeneralJobPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobPersistence.setStatus('mandatory')
mltJmGeneralJobSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mfpAll", 0), ("copy", 1), ("print", 2), ("receiveJob", 3), ("sendJob", 4), ("faxReceive", 5), ("faxSend", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmGeneralJobSetType.setStatus('mandatory')
mltJmJobTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: mltJmJobTable.setStatus('mandatory')
mltJmJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmJobJobSetIndex"), (0, "MC2350-MIB", "mltJmJobIndex"))
if mibBuilder.loadTexts: mltJmJobEntry.setStatus('mandatory')
mltJmJobJobSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobJobSetIndex.setStatus('mandatory')
mltJmJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobIndex.setStatus('mandatory')
mltJmJobFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("copy", 1), ("print", 2), ("receiveJob", 3), ("sendJob", 4), ("faxReceive", 5), ("faxSend", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobFunction.setStatus('mandatory')
mltJmJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10, 11, 12, 20, 21, 22, 23, 24, 25, 30, 31, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("cancelRequest", 2), ("puaseRequest", 3), ("restartRequest", 4), ("pending", 10), ("pendingHeld", 11), ("pendingPaused", 12), ("processing", 20), ("sending", 21), ("receiving", 22), ("printing", 23), ("scanning", 24), ("processingStopped", 25), ("completed", 30), ("caution", 31), ("aborted", 32), ("canceled", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmJobStatus.setStatus('mandatory')
mltJmJobReceivedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobReceivedTime.setStatus('mandatory')
mltJmJobCompleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobCompleteTime.setStatus('mandatory')
mltJmJobPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 0), ("lowestPriority", 1), ("lowPriority", 2), ("normalPriority", 3), ("highPriority", 4), ("highestPriority", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmJobPriority.setStatus('mandatory')
mltJmJobDivNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDivNumber.setStatus('mandatory')
mltJmJobOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOwner.setStatus('mandatory')
mltJmJobType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 29, 31, 40, 51, 52))).clone(namedValues=NamedValues(("other", 0), ("eMail", 11), ("iFaxSend", 12), ("scanToServer", 13), ("scanToPC", 14), ("scanToHDD", 15), ("twain", 16), ("normalPrint", 20), ("ippPrint", 21), ("securePrint", 22), ("timerPrint", 23), ("printToHDD", 24), ("proofAndPrint", 25), ("reportPrint", 29), ("iFaxReceive", 31), ("normalCopy", 40), ("faxRecieved", 51), ("faxSend", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobType.setStatus('mandatory')
mltJmJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobName.setStatus('mandatory')
mltJmJobDocPageNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDocPageNumbers.setStatus('mandatory')
mltJmJobDocCopyNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDocCopyNumbers.setStatus('mandatory')
mltJmJobPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 76, 83, 84, 93, 114, 115, 116, 117))).clone(namedValues=NamedValues(("otherPaperSize", 0), ("unknownPaperSize", 1), ("a0", 11), ("a1", 12), ("a2", 13), ("a3", 14), ("a4", 15), ("a5", 16), ("a6", 17), ("b0", 21), ("b1", 22), ("b2", 23), ("b3", 24), ("b4", 25), ("b5", 26), ("b6", 27), ("us12x14", 30), ("ledger", 31), ("us11x15", 32), ("us11x14", 33), ("comp", 34), ("us10x14", 35), ("us9-1by4x14", 36), ("legal", 37), ("us8-1by4x11-3by4", 38), ("letter", 39), ("govLetter", 40), ("quarto", 41), ("executive", 42), ("statement", 43), ("govRegal", 44), ("us3x5", 46), ("us4x6", 47), ("fls", 50), ("fls0", 51), ("fls1", 52), ("fls2", 53), ("fls3", 54), ("hagaki", 61), ("oufuku-Hagaki", 62), ("envelopeB5", 63), ("envelopeCom10", 64), ("envelopeC5", 65), ("envelopeDL", 66), ("envelopeMonarch", 67), ("envelopeC6", 68), ("youkei-0Gou", 70), ("youkei-1Gou", 71), ("youkei-4Gou", 74), ("youkei-6Gou", 76), ("choukei-3Gou", 83), ("choukei-4Gou", 84), ("kakugata-3Gou", 93), ("a3W", 114), ("a4W", 115), ("a5W", 116), ("a6W", 117)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobPageSize.setStatus('mandatory')
mltJmJobDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDestination.setStatus('mandatory')
mltJmJobDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDataSize.setStatus('optional')
mltJmJobColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("color", 2), ("grayScale", 3), ("blackWhite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobColorMode.setStatus('optional')
mltJmJobFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("raw", 2), ("tiff", 3), ("tiff-MH", 4), ("tiff-MR", 5), ("tiff-MMR", 6), ("jpeg", 7), ("pdf", 8), ("pcl", 9), ("postScript", 10), ("gdi", 11), ("linePrinter", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobFormat.setStatus('optional')
mltJmJobXResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobXResolution.setStatus('optional')
mltJmJobYResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobYResolution.setStatus('optional')
mltJmJobDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobDuplex.setStatus('optional')
mltJmJobOutputPages = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOutputPages.setStatus('optional')
mltJmJobOutputSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobOutputSheets.setStatus('optional')
mltJmJobMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(208, 209, 210, 211, 212, 214, 216, 222, 223, 224, 225, 226, 227, 230, 236, 240, 241, 242, 244, 246, 248))).clone(namedValues=NamedValues(("otherMediaType", 208), ("unknownMediaType", 209), ("plainPaper", 210), ("plainPaper2side", 211), ("plainPaperRecycled", 212), ("plainPaperExclusive", 214), ("plainPaperColor", 216), ("thick1", 222), ("thick1-2side", 223), ("thick2", 224), ("thick2-2side", 225), ("thick3", 226), ("thick3-2side", 227), ("ohp", 230), ("thin", 236), ("envelope", 240), ("envelope-2side", 241), ("label", 242), ("postCard", 244), ("letterHead", 246), ("tab", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmJobMediaType.setStatus('mandatory')
mltJmReportTable = MibTable((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1), )
if mibBuilder.loadTexts: mltJmReportTable.setStatus('mandatory')
mltJmReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1), ).setIndexNames((0, "MC2350-MIB", "mltJmReportIndex"))
if mibBuilder.loadTexts: mltJmReportEntry.setStatus('mandatory')
mltJmReportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmReportIndex.setStatus('mandatory')
mltJmReportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportAddress.setStatus('mandatory')
mltJmKeepAliveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmKeepAliveCount.setStatus('mandatory')
mltJmReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSend", 0), ("each1", 1), ("each10", 2), ("each50", 3), ("each100", 4), ("each250", 5), ("each500", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportInterval.setStatus('optional')
mltJmReporIntervalSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSend", 0), ("each1", 1), ("each10", 2), ("each50", 3), ("each100", 4), ("each250", 5), ("each500", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltJmReporIntervalSelection.setStatus('optional')
mltJmReportRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2590, 1, 1, 4, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltJmReportRequest.setStatus('optional')
mibBuilder.exportSymbols("MC2350-MIB", mltNetAppleTalkGeneralTable=mltNetAppleTalkGeneralTable, mltNetAppleTalkGeneralEntry=mltNetAppleTalkGeneralEntry, mltIppPrtMoreInfo=mltIppPrtMoreInfo, mltNetSmtpAccountEntry=mltNetSmtpAccountEntry, mltNetFtpd=mltNetFtpd, mltSysInputTrayRefIndex=mltSysInputTrayRefIndex, mltNetHttpdEnable=mltNetHttpdEnable, mltIppJobPriorityDefault=mltIppJobPriorityDefault, mltNetNwFrameIndex=mltNetNwFrameIndex, mltPrtPrintConfigTable=mltPrtPrintConfigTable, mltIppOperationSupportedTable=mltIppOperationSupportedTable, mltNetFtpdConfigEntry=mltNetFtpdConfigEntry, mltSysPrintFunctionTotalCount=mltSysPrintFunctionTotalCount, mltJmGeneralJobSetType=mltJmGeneralJobSetType, mltNetProtocolVer=mltNetProtocolVer, mltNetTcpipRawPortNumber=mltNetTcpipRawPortNumber, mltNetTcpipDnsSupport=mltNetTcpipDnsSupport, mltNetSlpConfigIfIndex=mltNetSlpConfigIfIndex, mltNetSmtpGeneralEntry=mltNetSmtpGeneralEntry, mltNetNwNPrinterIfIndex=mltNetNwNPrinterIfIndex, mltNetTcpipSupportService=mltNetTcpipSupportService, mltNetAtNodeNumber=mltNetAtNodeNumber, mltIppNumberUpType=mltIppNumberUpType, mltSysSizeCount=mltSysSizeCount, mltIppPrinterResolutionDefault=mltIppPrinterResolutionDefault, mltNetAtPrinterEntry=mltNetAtPrinterEntry, mltSysVersionEntry=mltSysVersionEntry, mltJmReport=mltJmReport, mltNetSnmpCommName=mltNetSnmpCommName, mltNetSnmpTrapTable=mltNetSnmpTrapTable, mltNetIppGeneralEntry=mltNetIppGeneralEntry, mltPrinterResolutionIfIndex=mltPrinterResolutionIfIndex, mltNetCommand=mltNetCommand, mltIppOperationIndex=mltIppOperationIndex, mltJmGeneral=mltJmGeneral, mltNetGeneralTable=mltNetGeneralTable, mltNetLpdQueueEntry=mltNetLpdQueueEntry, mltNetNwPserverEntry=mltNetNwPserverEntry, mltNetSmbPrinterIfIndex=mltNetSmbPrinterIfIndex, mltJmKeepAliveCount=mltJmKeepAliveCount, mltNetSlpMTU=mltNetSlpMTU, mltNetNwQueueRefPsIndex=mltNetNwQueueRefPsIndex, mltNetGeneral=mltNetGeneral, mltPrtPsFontName=mltPrtPsFontName, mltPrintQualityType=mltPrintQualityType, mltNetSmbGeneralEntry=mltNetSmbGeneralEntry, mltSysVerName=mltSysVerName, mltPrtSymbolSetIndex=mltPrtSymbolSetIndex, mltNetSmbWinsPrimaryServer=mltNetSmbWinsPrimaryServer, mltNetAtPrinterTable=mltNetAtPrinterTable, mltNetMibVersion=mltNetMibVersion, mltNetIppGeneralTable=mltNetIppGeneralTable, mltPrtPclFontNumber=mltPrtPclFontNumber, mltNetProtocolEntry=mltNetProtocolEntry, mltIppFinishingsType=mltIppFinishingsType, mltNetProtocolTable=mltNetProtocolTable, mltNetSmbPrinterDescr=mltNetSmbPrinterDescr, mltNetSmbPrinterName=mltNetSmbPrinterName, mltNetworkMib=mltNetworkMib, mltPrtPsErrorPrint=mltPrtPsErrorPrint, mltNetSmb=mltNetSmb, mltNetTcpipDnsIfIndex=mltNetTcpipDnsIfIndex, mltNetSlpGeneralTable=mltNetSlpGeneralTable, mltIppPageRangesSupported=mltIppPageRangesSupported, mltNetSnmpCommEntry=mltNetSnmpCommEntry, mltPrtPsFontIndex=mltPrtPsFontIndex, mltNetNwQueueIndex=mltNetNwQueueIndex, mltIppCompressionSupportedTable=mltIppCompressionSupportedTable, mltNetSmtpAccountIndex=mltNetSmtpAccountIndex, mltIppColorSupported=mltIppColorSupported, mltNetTcpipDnsDomainName=mltNetTcpipDnsDomainName, mltIppVersionIndex=mltIppVersionIndex, mltIppPdlOverrideSupported=mltIppPdlOverrideSupported, mltNetIppGeneral=mltNetIppGeneral, mltPaperFeedDir=mltPaperFeedDir, mltJmReporIntervalSelection=mltJmReporIntervalSelection, mltNetSnmpTrapEntry=mltNetSnmpTrapEntry, mltIppSidesIndex=mltIppSidesIndex, mltIppSidesType=mltIppSidesType, mltNetSmbPrinterEntry=mltNetSmbPrinterEntry, mltSysPrintFunctionIndex=mltSysPrintFunctionIndex, mltSysPrintFunctionColorType=mltSysPrintFunctionColorType, mltJmJobName=mltJmJobName, mltNetSmbPrinterTable=mltNetSmbPrinterTable, mltPrtPclFontName=mltPrtPclFontName, mltPrtSymbolSetEntry=mltPrtSymbolSetEntry, mltSysOutputTrayNickName=mltSysOutputTrayNickName, mltNetProtocolType=mltNetProtocolType, mltJmReportRequest=mltJmReportRequest, mltNetSnmpTrapIfIndex=mltNetSnmpTrapIfIndex, mltSysCompConfigID=mltSysCompConfigID, mltIppSidesIfIndex=mltIppSidesIfIndex, mltPrtSysConfigTable=mltPrtSysConfigTable, mltNetProtocolDescr=mltNetProtocolDescr, mltNetFtpdDescr=mltNetFtpdDescr, mltNetAtDefault=mltNetAtDefault, mltJmJobType=mltJmJobType, mltSysSendTotalCount=mltSysSendTotalCount, mltIppPrtLocation=mltIppPrtLocation, mltSysCurrentDateTime=mltSysCurrentDateTime, mltIppJobTemplateGeneralIfIndex=mltIppJobTemplateGeneralIfIndex, mltSysPrintFunctionLargeSizeCount=mltSysPrintFunctionLargeSizeCount, mltSysPrintFunctionColorIndex=mltSysPrintFunctionColorIndex, mltNetSnmpTrapIndex=mltNetSnmpTrapIndex, mltNetFirmVersion=mltNetFirmVersion, mltPrtPaperSource=mltPrtPaperSource, mltIppNaturalLangIfIndex=mltIppNaturalLangIfIndex, mltNetSnmpCommIndex=mltNetSnmpCommIndex, mltJmJobFormat=mltJmJobFormat, mltJmGeneralJobPersistence=mltJmGeneralJobPersistence, mltNetIppPortIfIndex=mltNetIppPortIfIndex, mltJmJob=mltJmJob, mltPrtFont=mltPrtFont, mltPrtPrintPageEntry=mltPrtPrintPageEntry, mltSysTotalTroubleCount=mltSysTotalTroubleCount, mltNetNwPserverTable=mltNetNwPserverTable, mltIppOrientationRequestedIndex=mltIppOrientationRequestedIndex, mltSysContactInfo=mltSysContactInfo, mltSysPrintFunctionType=mltSysPrintFunctionType, mltJmJobMediaType=mltJmJobMediaType, minolta=minolta, mltNetCommandDefault=mltNetCommandDefault, mltPrtPaperSizeTable=mltPrtPaperSizeTable, mltPrtCopies=mltPrtCopies, mltNetIpp=mltNetIpp, mltNetTcpipGeneralTable=mltNetTcpipGeneralTable, mltNetNwGeneralEntry=mltNetNwGeneralEntry, mltIppJobSheetsSupportedEntry=mltIppJobSheetsSupportedEntry, mltJmMibVersion=mltJmMibVersion, mltIppUriSupportedEntry=mltIppUriSupportedEntry, mltNetAtPrinterIfIndex=mltNetAtPrinterIfIndex, mltJmGeneralNumberOfActiveJobs=mltJmGeneralNumberOfActiveJobs, mltSysMib=mltSysMib, mltIppPrtStateReasonIfIndex=mltIppPrtStateReasonIfIndex, mltNetProtocolIndex=mltNetProtocolIndex, mltNetSerialNumber=mltNetSerialNumber, mltSysLargeSizeType=mltSysLargeSizeType, mltSysCounter=mltSysCounter, mltIppJobHoldUntilIndex=mltIppJobHoldUntilIndex, mltIppOperationSupportedEntry=mltIppOperationSupportedEntry, mltPrintQualitySupportedEntry=mltPrintQualitySupportedEntry, mltIppJobSheetsType=mltIppJobSheetsType, mltIppQueuedJobCount=mltIppQueuedJobCount, mltNetAtPrinterName=mltNetAtPrinterName, mltNetNwQueueName=mltNetNwQueueName, mltNetFtpdUserPassWd=mltNetFtpdUserPassWd, mltNetNwPsPrefFServer=mltNetNwPsPrefFServer, mltNetSlpBroadcastSupport=mltNetSlpBroadcastSupport, mltIppOperationType=mltIppOperationType, mltIppMediaInputTray=mltIppMediaInputTray, mltIppOrientationRequestedType=mltIppOrientationRequestedType, mltNetTcpipGateway=mltNetTcpipGateway, mltNetNwPsPrefTree=mltNetNwPsPrefTree, mltNetNwQueueTable=mltNetNwQueueTable, mltSysCounterConfig=mltSysCounterConfig, mltSysOutputTrayRefIndex=mltSysOutputTrayRefIndex, mltNetNwDefault=mltNetNwDefault, mltNetSmbDefault=mltNetSmbDefault, mltNetNwPsPrefContext=mltNetNwPsPrefContext, mltJmJobDuplex=mltJmJobDuplex, mltNetSmtpEnable=mltNetSmtpEnable, mltNetNwNetworkNumber=mltNetNwNetworkNumber, mltJmGeneralOldestActiveJobIndex=mltJmGeneralOldestActiveJobIndex, mltIppNaturalLanguageSupportedEntry=mltIppNaturalLanguageSupportedEntry, mltSysVersion=mltSysVersion, mltNetIppJobTemplateAttribute=mltNetIppJobTemplateAttribute, mltPrtRemotePanel=mltPrtRemotePanel, mltNetSmbHostName=mltNetSmbHostName, mltNetFtpdCapability=mltNetFtpdCapability, mltPrtPowerSave=mltPrtPowerSave, mltNetSmtpClient=mltNetSmtpClient, mltNetLpdQueueEnable=mltNetLpdQueueEnable, mltPrtPclFontIndex=mltPrtPclFontIndex, mltNetLpdQueueIfIndex=mltNetLpdQueueIfIndex, mltSysComponent=mltSysComponent, mltMgmt=mltMgmt, mltPrtCommandEntry=mltPrtCommandEntry, mltIppCompressionIndex=mltIppCompressionIndex, mltNetLpdIfIndex=mltNetLpdIfIndex, mltNetFtpdPort=mltNetFtpdPort, mltSysColorCountSupportType=mltSysColorCountSupportType, mltNetSnmpCommTable=mltNetSnmpCommTable, mltNetHttpd=mltNetHttpd, mltNetLpdGeneralEntry=mltNetLpdGeneralEntry, mltJmJobOutputSheets=mltJmJobOutputSheets, mltPrtRemotePanelButtonEntry=mltPrtRemotePanelButtonEntry, mltIppMediaSupportedTable=mltIppMediaSupportedTable, mltNetSmtpReplyAddress=mltNetSmtpReplyAddress, mltJmJobDataSize=mltJmJobDataSize, mltSysOutputTrayDefaultName=mltSysOutputTrayDefaultName, mltSysCorpURL=mltSysCorpURL, mltIppCopiesMaxSupported=mltIppCopiesMaxSupported, mltNetIppPrtDescGeneralTable=mltNetIppPrtDescGeneralTable, mltIppUriSecurity=mltIppUriSecurity, mltNetNwFrameTypeConfig=mltNetNwFrameTypeConfig, mltNetNwPsPollingRate=mltNetNwPsPollingRate, mltIppMediaColor=mltIppMediaColor, mltIppFinishingsSupportedTable=mltIppFinishingsSupportedTable, mltPrtSymbolSetName=mltPrtSymbolSetName, mltSysInputTrayIndex=mltSysInputTrayIndex, mltIppPrintQualityDefault=mltIppPrintQualityDefault, mltNetFtpdUserIndex=mltNetFtpdUserIndex, mltPrinterResolutionUnit=mltPrinterResolutionUnit, mltPrinterResolutionSupportedEntry=mltPrinterResolutionSupportedEntry, mltNetTcpipBootProtocolEnable=mltNetTcpipBootProtocolEnable, mltPrtRemotePanelButtonTable=mltPrtRemotePanelButtonTable, mltPrtCommandJobProceed=mltPrtCommandJobProceed, mltJmJobDestination=mltJmJobDestination, mltSysOutputTrayTable=mltSysOutputTrayTable, mltNetSmtpDescription=mltNetSmtpDescription, mltIppPrtStateReasonsTable=mltIppPrtStateReasonsTable, mltNetNwQueueRefIfIndex=mltNetNwQueueRefIfIndex, mltNetSmtpServerAddress=mltNetSmtpServerAddress, mltNetSlpScope=mltNetSlpScope, mltSysTonerType=mltSysTonerType, mltPrtPanelButtonIndex=mltPrtPanelButtonIndex, mltNetSlpGeneralEntry=mltNetSlpGeneralEntry, mltNetIppPortNumber=mltNetIppPortNumber, mltSysInputTrayTable=mltSysInputTrayTable, mltIppSidesSupportedEntry=mltIppSidesSupportedEntry, mltSysSizeCounterEntry=mltSysSizeCounterEntry, mltIppOrientationRequestedSupportedEntry=mltIppOrientationRequestedSupportedEntry, mltNetSnmpTrapCommunity=mltNetSnmpTrapCommunity, mltPrtPrintPageName=mltPrtPrintPageName, mltSysTotalJamCount=mltSysTotalJamCount, mltNetInterfaceType=mltNetInterfaceType, mltNetAtNetNumber=mltNetAtNetNumber, mltNetTcpipUseBootProtocol=mltNetTcpipUseBootProtocol, mltSysDuplexCount=mltSysDuplexCount, mltPrtConfig=mltPrtConfig, mltNetFtpdConfigTable=mltNetFtpdConfigTable, mltIppOrientationRequestedIfIndex=mltIppOrientationRequestedIfIndex, CodedCharSet=CodedCharSet, mltIppCharSetConfiguredIndex=mltIppCharSetConfiguredIndex, mltPrtMibInfo=mltPrtMibInfo, mltJmJobDocCopyNumbers=mltJmJobDocCopyNumbers, mltIppNaturalLangName=mltIppNaturalLangName, mltJmJobColorMode=mltJmJobColorMode, mltIppCompressionType=mltIppCompressionType, mltNetCommandEntry=mltNetCommandEntry, mltSysPrintFunctionCounterEntry=mltSysPrintFunctionCounterEntry, mltIppNaturalLanguageSupportedTable=mltIppNaturalLanguageSupportedTable, mltNetIppPortEntry=mltNetIppPortEntry, mltIppFinishingsIfIndex=mltIppFinishingsIfIndex, mltNetSmtpIfIndex=mltNetSmtpIfIndex, mltNetSmtpPort=mltNetSmtpPort, mltNetNwFrameIfIndex=mltNetNwFrameIfIndex, mltPrtPanelButtonDescr=mltPrtPanelButtonDescr, mltNetTcpipSubnet=mltNetTcpipSubnet, mltNetTcpipAddressServer=mltNetTcpipAddressServer, mltJmGeneralNewestActiveJobIndex=mltJmGeneralNewestActiveJobIndex, mltNetLpdEnable=mltNetLpdEnable, mltNetSmtpFromAddress=mltNetSmtpFromAddress, mltNetProtocolOnOff=mltNetProtocolOnOff)
mibBuilder.exportSymbols("MC2350-MIB", mltJmJobDocPageNumbers=mltJmJobDocPageNumbers, mltNetGeneralEntry=mltNetGeneralEntry, mltPrinterResolutionFeedDir=mltPrinterResolutionFeedDir, mltJmReportEntry=mltJmReportEntry, mltIppOperationIfIndex=mltIppOperationIfIndex, mltPrtJobLanguage=mltPrtJobLanguage, mltPrtPaperSize=mltPrtPaperSize, mltNetIfDescr=mltNetIfDescr, mltPrtPanelButtonPush=mltPrtPanelButtonPush, mltSysSystemCounter=mltSysSystemCounter, mltPrtPsFontSource=mltPrtPsFontSource, mltIppMediaType=mltIppMediaType, mltSysContactSiteName=mltSysContactSiteName, mltSysLargeDuplexCount=mltSysLargeDuplexCount, mltNetCommandTable=mltNetCommandTable, mltIppUri=mltIppUri, mltSysVersionTable=mltSysVersionTable, mltNetSmbIfIndex=mltNetSmbIfIndex, mltJmJobPageSize=mltJmJobPageSize, mltIppJobPrioritySupported=mltIppJobPrioritySupported, mltNetGeneralIndex=mltNetGeneralIndex, mltNetHttpdIfIndex=mltNetHttpdIfIndex, mltNetLpdQueueIndex=mltNetLpdQueueIndex, mltNetCommandPrintNicConfig=mltNetCommandPrintNicConfig, mltIppCharSetName=mltIppCharSetName, mltNetNwPrintMode=mltNetNwPrintMode, mltNetSnmpTrapIpxAddress=mltNetSnmpTrapIpxAddress, mltIppOrientationRequestedSupportedTable=mltIppOrientationRequestedSupportedTable, mltSysTotalCount=mltSysTotalCount, mltPrintQualityIndex=mltPrintQualityIndex, mltIppPrtStateReasonsEntry=mltIppPrtStateReasonsEntry, mltIppPrtStateReasonIndex=mltIppPrtStateReasonIndex, mltJobManagement=mltJobManagement, mltJmJobTable=mltJmJobTable, mltNetTcpipAddress=mltNetTcpipAddress, mltNetNwPsPasswd=mltNetNwPsPasswd, mltNetTcpipDefault=mltNetTcpipDefault, mltPrtTonerSave=mltPrtTonerSave, mltPrinterResolutionSupportedTable=mltPrinterResolutionSupportedTable, mltJmJobXResolution=mltJmJobXResolution, mltNetCommandIfIndex=mltNetCommandIfIndex, mltNetTcpipDnsTable=mltNetTcpipDnsTable, mltPrtPrintPageIndex=mltPrtPrintPageIndex, mltNetSlpService=mltNetSlpService, mltIppPrtStateReasonSuffix=mltIppPrtStateReasonSuffix, mltIppSidesDefault=mltIppSidesDefault, mltIppNaturalLangIndex=mltIppNaturalLangIndex, mltSysPrintFunctionLargeDuplexCount=mltSysPrintFunctionLargeDuplexCount, mltNetCommandDownLoad=mltNetCommandDownLoad, mltIppUriIndex=mltIppUriIndex, mltJmGeneralEntry=mltJmGeneralEntry, mltNetHttpdDescr=mltNetHttpdDescr, mltIppDocFormatName=mltIppDocFormatName, mltNetLpdQueueBanner=mltNetLpdQueueBanner, mltNetNwFrameTable=mltNetNwFrameTable, mltNetIppServiceEnable=mltNetIppServiceEnable, mltSysGeneralInfo=mltSysGeneralInfo, mltPrtCharSetID=mltPrtCharSetID, mltNetHardwareAddress=mltNetHardwareAddress, mltPrinterResolutionXFeedDir=mltPrinterResolutionXFeedDir, mltSysMibVersion=mltSysMibVersion, mltSysSizeFunctionIndex=mltSysSizeFunctionIndex, mltPaperSizeName=mltPaperSizeName, mltSysTonerLifeCounterEntry=mltSysTonerLifeCounterEntry, mltNetTcpipGeneral=mltNetTcpipGeneral, mltIppMediaIfIndex=mltIppMediaIfIndex, mltNetLpdQueueFilter=mltNetLpdQueueFilter, mltIppFinishingsSupportedEntry=mltIppFinishingsSupportedEntry, mltNetNwNPrinterEntry=mltNetNwNPrinterEntry, mltNetIppPrtDescrAttribute=mltNetIppPrtDescrAttribute, mltNetSmbPrinterIndex=mltNetSmbPrinterIndex, mltJmJobFunction=mltJmJobFunction, mltPrtPaper=mltPrtPaper, mltPrtPrintPageTable=mltPrtPrintPageTable, mltSysInputTrayName=mltSysInputTrayName, mltIppUriAuthentication=mltIppUriAuthentication, mltNetTcpipDnsHostName=mltNetTcpipDnsHostName, mltIppNumberUpSupportedTable=mltIppNumberUpSupportedTable, mltJmJobReceivedTime=mltJmJobReceivedTime, mltIppPrinterCurrentTime=mltIppPrinterCurrentTime, mltSysInputTrayCapacitySence=mltSysInputTrayCapacitySence, mltIppMediaName=mltIppMediaName, mltNetLpdPort=mltNetLpdPort, mltNetFtpdGeneralEntry=mltNetFtpdGeneralEntry, mltJmJobYResolution=mltJmJobYResolution, mltIppVersionType=mltIppVersionType, mltSysOutputTrayType=mltSysOutputTrayType, mltNetSmtpPurpose=mltNetSmtpPurpose, mltSysSizeCounterTable=mltSysSizeCounterTable, mltNetNwFrameEntry=mltNetNwFrameEntry, mltSysInputTraySpecialPaper=mltSysInputTraySpecialPaper, mltMib=mltMib, mltSysLargeSizeCountMode=mltSysLargeSizeCountMode, mltNetSlp=mltNetSlp, mltNetSnmpTrapIpAddress=mltNetSnmpTrapIpAddress, mltIppJobSheetsDefault=mltIppJobSheetsDefault, mltIppNumberUpIfIndex=mltIppNumberUpIfIndex, mltNetCurrentConnector=mltNetCurrentConnector, mltIppOperationEnable=mltIppOperationEnable, mltNetIppGeneralIfIndex=mltNetIppGeneralIfIndex, mltJmReportTable=mltJmReportTable, mltPrtPaperTimeOut=mltPrtPaperTimeOut, mltJmJobDivNumber=mltJmJobDivNumber, mltNetSlpConfigTable=mltNetSlpConfigTable, mltSysContact=mltSysContact, mltNetIppJobTemplateGeneralEntry=mltNetIppJobTemplateGeneralEntry, mltNetAtDesiredZone=mltNetAtDesiredZone, mltNetSlpConfigEntry=mltNetSlpConfigEntry, mltIppJobSheetsIndex=mltIppJobSheetsIndex, mltNetTcpipIfIndex=mltNetTcpipIfIndex, mltIppDocFormatSupportedEntry=mltIppDocFormatSupportedEntry, mltPrinterResolutionIndex=mltPrinterResolutionIndex, mltNetNwNPrinterTable=mltNetNwNPrinterTable, mltPrtSysConfigEntry=mltPrtSysConfigEntry, mltNetLpdGeneralTable=mltNetLpdGeneralTable, mltIppMediaSupportedEntry=mltIppMediaSupportedEntry, mltPrintQualityIfIndex=mltPrintQualityIfIndex, mltPrtPrintCommand=mltPrtPrintCommand, mltIppCharSetSupportedTable=mltIppCharSetSupportedTable, mltNetAppleTalk=mltNetAppleTalk, mltNetCommandReset=mltNetCommandReset, mltInterface=mltInterface, mltNetTcpipDnsEntry=mltNetTcpipDnsEntry, mltIppCompressionSupportedEntry=mltIppCompressionSupportedEntry, mltPaperSizeIndex=mltPaperSizeIndex, mltSysInputTrayEntry=mltSysInputTrayEntry, mltIppCharSetSupportedEntry=mltIppCharSetSupportedEntry, mltIppDocFormatSupportedTable=mltIppDocFormatSupportedTable, mltIppJobSheetsIfIndex=mltIppJobSheetsIfIndex, mltIppSidesSupportedTable=mltIppSidesSupportedTable, mltIppJobHoldUntilSupportedTable=mltIppJobHoldUntilSupportedTable, mltJmJobStatus=mltJmJobStatus, mltPrtCommandTable=mltPrtCommandTable, mltSysSizeType=mltSysSizeType, mltIppPrtDescGeneralIfIndex=mltIppPrtDescGeneralIfIndex, mltJmJobOwner=mltJmJobOwner, mltNetTcpipDnsServerAddress=mltNetTcpipDnsServerAddress, mltNetSlpIndex=mltNetSlpIndex, mltNetHttpdGeneralTable=mltNetHttpdGeneralTable, mltSysLargeSizeCount=mltSysLargeSizeCount, mltIppJobSheetsSupportedTable=mltIppJobSheetsSupportedTable, mltSysSizeTypeIndex=mltSysSizeTypeIndex, mltPrtPclFontSource=mltPrtPclFontSource, mltJob=mltJob, mltSysVersionCode=mltSysVersionCode, mltIppFinishingsDefault=mltIppFinishingsDefault, mltIppVersionIfIndex=mltIppVersionIfIndex, mltIppCompressionIfIndex=mltIppCompressionIfIndex, mltJmJobPriority=mltJmJobPriority, mltPrtCommandJobCancel=mltPrtCommandJobCancel, mltJmReportInterval=mltJmReportInterval, mltDirectory=mltDirectory, mltNetSmbWorkGroupName=mltNetSmbWorkGroupName, mltNetFtpdGeneralTable=mltNetFtpdGeneralTable, mltIppCopiesDefault=mltIppCopiesDefault, mltNetLpdQueueName=mltNetLpdQueueName, mltIppPrtName=mltIppPrtName, mltIppUriSupportedTable=mltIppUriSupportedTable, mltNetSnmpTrapOnOff=mltNetSnmpTrapOnOff, mltJmJobEntry=mltJmJobEntry, mltNetSpeedConfig=mltNetSpeedConfig, mltNetFtpdConfigIfIndex=mltNetFtpdConfigIfIndex, mltIppOrientationRequestedDefault=mltIppOrientationRequestedDefault, mltPrtPanelButtonName=mltPrtPanelButtonName, mltJmGeneralTable=mltJmGeneralTable, mltPrtPclFontEntry=mltPrtPclFontEntry, mltSysDuplexCountMode=mltSysDuplexCountMode, mltIppCharSetIfIndex=mltIppCharSetIfIndex, mltNetSnmp=mltNetSnmp, mltIppFinishingsIndex=mltIppFinishingsIndex, mltSysPrintFunctionCounterTable=mltSysPrintFunctionCounterTable, mltNetCommandStartupConfig=mltNetCommandStartupConfig, mltSysTonerLifeCounterTable=mltSysTonerLifeCounterTable, mltNetNwFrameType=mltNetNwFrameType, mltNetSmbWinsSupport=mltNetSmbWinsSupport, mltPrtSymbolSetTable=mltPrtSymbolSetTable, mltNetNetWare=mltNetNetWare, mltIppPrinterStateReason=mltIppPrinterStateReason, mltPrintQualitySupportedTable=mltPrintQualitySupportedTable, mltIppPrinterUpTime=mltIppPrinterUpTime, mltIppNumberUpIndex=mltIppNumberUpIndex, mltNetNwPsIfIndex=mltNetNwPsIfIndex, mltNetwork=mltNetwork, mltNetNwGeneralTable=mltNetNwGeneralTable, mltPrtCommand=mltPrtCommand, mltIppPrinterIsAcceptingJobs=mltIppPrinterIsAcceptingJobs, mltPrtCommandOnline=mltPrtCommandOnline, mltNetProtocolIfIndex=mltNetProtocolIfIndex, mltSysInputTrayPaperAttribute=mltSysInputTrayPaperAttribute, mltSysTonerTypeIndex=mltSysTonerTypeIndex, mltPrtPaperSizeEntry=mltPrtPaperSizeEntry, mltIppNumberUpSupportedEntry=mltIppNumberUpSupportedEntry, mltPrtPsFontNumber=mltPrtPsFontNumber, mltSysSupportedCounterType=mltSysSupportedCounterType, mltJmJobIndex=mltJmJobIndex, mltJmReportIndex=mltJmReportIndex, mltSystem=mltSystem, mltIppDocFormatIndex=mltIppDocFormatIndex, mltNetSlpPortNumber=mltNetSlpPortNumber, mltSysPrintFunctionDuplexCount=mltSysPrintFunctionDuplexCount, mltIppMediaDefault=mltIppMediaDefault, mltJmJobCompleteTime=mltJmJobCompleteTime, mltNetSmtpAccountTable=mltNetSmtpAccountTable, mltPrtAutoContinue=mltPrtAutoContinue, mltNetTcpipGeneralEntry=mltNetTcpipGeneralEntry, mltSysPriorityDevice=mltSysPriorityDevice, mltNetIppPortTable=mltNetIppPortTable, mltNetSnmpCommAccessRight=mltNetSnmpCommAccessRight, mltNetSmtpConnTimeout=mltNetSmtpConnTimeout, mltIppJobHoldUntilType=mltIppJobHoldUntilType, mltPrtPclFontTable=mltPrtPclFontTable, mltNetNwPsIndex=mltNetNwPsIndex, mltNetSlpTTL=mltNetSlpTTL, mltNetNwPsName=mltNetNwPsName, mltNetTcpipDnsServerIndex=mltNetTcpipDnsServerIndex, mltNetAtPrinterType=mltNetAtPrinterType, mltIppPrtState=mltIppPrtState, mltSysGeneralCounter=mltSysGeneralCounter, mltNetNwNPrinterName=mltNetNwNPrinterName, mltJmReportAddress=mltJmReportAddress, mltIppNumberUpDefault=mltIppNumberUpDefault, mltSysOutputTrayIndex=mltSysOutputTrayIndex, mltNetNwNPrinterIndex=mltNetNwNPrinterIndex, mltNetSlpEnable=mltNetSlpEnable, mltSysSuppliesInfo=mltSysSuppliesInfo, mltIppNaturalLanguageConfiguredIndex=mltIppNaturalLanguageConfiguredIndex, mltSysProductHelpURL=mltSysProductHelpURL, mltNetAtIfIndex=mltNetAtIfIndex, mltIppVersionsSupportedTable=mltIppVersionsSupportedTable, mltNetSupportedConnector=mltNetSupportedConnector, mltNetAtCurrentZone=mltNetAtCurrentZone, mltIppJobHoldUntilIfIndex=mltIppJobHoldUntilIfIndex, mltNetNwPsMode=mltNetNwPsMode, mltSysVerDescr=mltSysVerDescr, mltNetFtpdIfIndex=mltNetFtpdIfIndex, mltNetNwQueueEntry=mltNetNwQueueEntry, mltNetLpd=mltNetLpd, mltNetSmbGeneralTable=mltNetSmbGeneralTable, mltIppJobHoldUntilDefault=mltIppJobHoldUntilDefault, mltDevice=mltDevice, mltPrinterMib=mltPrinterMib, mltNetFtpdUser=mltNetFtpdUser, mltIppMediaIndex=mltIppMediaIndex, mltJmGeneralJobSetIndex=mltJmGeneralJobSetIndex, mltSysVersionIndex=mltSysVersionIndex, mltNetIppJobTemplateGeneralTable=mltNetIppJobTemplateGeneralTable, mltIppUriIfIndex=mltIppUriIfIndex, mltNetLpdQueueTable=mltNetLpdQueueTable, mltNetHttpdPort=mltNetHttpdPort, mltNetLpdQueueDescr=mltNetLpdQueueDescr, mltNetNwQueueStatus=mltNetNwQueueStatus, mltNetSlpLifetime=mltNetSlpLifetime, mltIppDocFormatDefaultIndex=mltIppDocFormatDefaultIndex, mltPrtPsFontTable=mltPrtPsFontTable)
mibBuilder.exportSymbols("MC2350-MIB", mltIppCharSetIndex=mltIppCharSetIndex, mltPrtPrintConfigEntry=mltPrtPrintConfigEntry, mltNetFtpdEnable=mltNetFtpdEnable, mltIppCharSetCode=mltIppCharSetCode, mltSysOutputTrayEntry=mltSysOutputTrayEntry, mltNetIppPortIndex=mltNetIppPortIndex, mltPrtPsFontEntry=mltPrtPsFontEntry, mltNetSmtpGeneralTable=mltNetSmtpGeneralTable, mltSysSizeFunction=mltSysSizeFunction, mltNetTcpip=mltNetTcpip, mltNetHttpdGeneralEntry=mltNetHttpdGeneralEntry, mltNetProtocol=mltNetProtocol, mltPrinter=mltPrinter, mltNetIppPrtDescGeneralEntry=mltNetIppPrtDescGeneralEntry, mltNetNwNPrinterNumber=mltNetNwNPrinterNumber, mltIppJobHoldUntilSupportedEntry=mltIppJobHoldUntilSupportedEntry, mltNetIppDefaultPortIndex=mltNetIppDefaultPortIndex, mltNetNwIfIndex=mltNetNwIfIndex, mltJmJobOutputPages=mltJmJobOutputPages, mltNetSmbWinsSecondaryServer=mltNetSmbWinsSecondaryServer, mltNetAtPrinterIndex=mltNetAtPrinterIndex, mltNetSlpIfIndex=mltNetSlpIfIndex, mltIppDocFormatIfIndex=mltIppDocFormatIfIndex, mltTonerTypeCount=mltTonerTypeCount, mltPrtFineArt=mltPrtFineArt, mltNetSmtpAccountIfIndex=mltNetSmtpAccountIfIndex, mltIppVersionsSupportedEntry=mltIppVersionsSupportedEntry, mltPrtMibVersion=mltPrtMibVersion, mltJmJobJobSetIndex=mltJmJobJobSetIndex)
