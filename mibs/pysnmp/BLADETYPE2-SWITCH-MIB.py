#
# PySNMP MIB module BLADETYPE2-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, iso, ObjectIdentity, IpAddress, Unsigned32, ModuleIdentity, Integer32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Unsigned32", "ModuleIdentity", "Integer32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier")
DisplayString, MacAddress, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "TextualConvention")
agent = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1))
if mibBuilder.loadTexts: agent.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: agent.setOrganization('Hewlett Packard Company ')
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5))
agTrapHost = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6))
agTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11))
agAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3))
spStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 4))
mgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 5))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9))
aclPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10))
aclMeterPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2))
swKeyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 3))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5))
mgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 6))
geaportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7))
ufdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('current')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('current')
hwInsertedCubeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiberCube", 1), ("copperCube", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInsertedCubeType.setStatus('current')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
portOperDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2), )
if mibBuilder.loadTexts: portOperDot1xTable.setStatus('current')
portOperDot1xTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portOperDot1xIndx"))
if mibBuilder.loadTexts: portOperDot1xTableEntry.setStatus('current')
portOperDot1xIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperDot1xIndx.setStatus('current')
portOperDot1xReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReset.setStatus('current')
portOperDot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReauth.setStatus('current')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('current')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
agRackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agRackId.setStatus('current')
agChassis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agChassis.setStatus('current')
agCurCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setStatus('current')
agNewCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setStatus('current')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCreekFortSaintJohnBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCreekFortSaintJohnBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
agCurCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUfdTrap.setStatus('current')
agNewCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUfdTrap.setStatus('current')
agCurBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aoscli", 1), ("iscli", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliMode.setStatus('current')
agNewBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aoscli", 1), ("iscli", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliMode.setStatus('current')
agCurCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgReminders.setStatus('current')
agNewCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgReminders.setStatus('current')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
agNewCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setStatus('current')
agCurCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setStatus('current')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
agNewCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapUfd.setStatus('current')
agCurCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapUfd.setStatus('current')
agNewCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setStatus('current')
agCurCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setStatus('current')
agNewCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrap8021x.setStatus('current')
agCurCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrap8021x.setStatus('current')
agNewCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapHotlinks.setStatus('current')
agCurCfgSyslogTrapHotlinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 5, 12, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapHotlinks.setStatus('current')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('current')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('current')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('current')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('current')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('current')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('current')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('current')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('current')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('current')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('current')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('current')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('current')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('current')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('current')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('current')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('current')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("img-put", 7), ("tsdump-put", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('current')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('current')
agTftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpUserName.setStatus('current')
agTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPassword.setStatus('current')
agTftpTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpTSDumpFileName.setStatus('current')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
agPortCurCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStp.setStatus('current')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('current')
agPortCurCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setStatus('current')
agPortCurCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setStatus('current')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
agPortCurCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setStatus('current')
agPortCurCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setStatus('current')
agPortCurCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setStatus('current')
agPortCurCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setStatus('current')
agPortCurCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setStatus('current')
agPortCurCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setStatus('current')
agPortCurCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setStatus('current')
agPortFiberCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agPortFiberCurCfgTable.setStatus('current')
agPortFiberCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortFiberCurCfgIndx"))
if mibBuilder.loadTexts: agPortFiberCurCfgTableEntry.setStatus('current')
agPortFiberCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgIndx.setStatus('current')
agPortFiberCurCfgTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxCtrl.setStatus('current')
agPortFiberCurCfgTxPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxPulse.setStatus('current')
agPortFiberCurCfgTxUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxUp.setStatus('current')
agPortFiberCurCfgTxDn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberCurCfgTxDn.setStatus('current')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
agPortNewCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStp.setStatus('current')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('current')
agPortNewCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setStatus('current')
agPortNewCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setStatus('current')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
agPortNewCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setStatus('current')
agPortNewCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setStatus('current')
agPortNewCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setStatus('current')
agPortNewCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setStatus('current')
agPortNewCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setStatus('current')
agPortNewCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setStatus('current')
agPortNewCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setStatus('current')
agPortFiberNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agPortFiberNewCfgTable.setStatus('current')
agPortFiberNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agPortFiberNewCfgIndx"))
if mibBuilder.loadTexts: agPortFiberNewCfgTableEntry.setStatus('current')
agPortFiberNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortFiberNewCfgIndx.setStatus('current')
agPortFiberNewCfgTxCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxCtrl.setStatus('current')
agPortFiberNewCfgTxPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxPulse.setStatus('current')
agPortFiberNewCfgTxUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxUp.setStatus('current')
agPortFiberNewCfgTxDn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortFiberNewCfgTxDn.setStatus('current')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('current')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('current')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('current')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('current')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('current')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('current')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
radCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecBd.setStatus('current')
radNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecBd.setStatus('current')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
agCurCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setStatus('current')
agNewCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setStatus('current')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('current')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('current')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
tacCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setStatus('current')
tacNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setStatus('current')
tacCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setStatus('current')
tacNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setStatus('current')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
tacCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTelnet.setStatus('current')
tacNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTelnet.setStatus('current')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
tacCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecBd.setStatus('current')
tacNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecBd.setStatus('current')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
agTacacsUserMapCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31), )
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setStatus('current')
agTacacsUserMapCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agTacacsUserMapCurCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setStatus('current')
agTacacsUserMapCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setStatus('current')
agTacacsUserMapCurCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setStatus('current')
agTacacsUserMapNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32), )
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setStatus('current')
agTacacsUserMapNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agTacacsUserMapNewCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setStatus('current')
agTacacsUserMapNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setStatus('current')
agTacacsUserMapNewCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 10, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setStatus('current')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
agAccessUserMaxUserID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserMaxUserID.setStatus('current')
agAccessUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setStatus('current')
agAccessUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agAccessUserCurCfgUId"))
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setStatus('current')
agAccessUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setStatus('current')
agAccessUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCos.setStatus('current')
agAccessUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgName.setStatus('current')
agAccessUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setStatus('current')
agAccessUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgState.setStatus('current')
agAccessUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setStatus('current')
agAccessUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agAccessUserNewCfgUId"))
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setStatus('current')
agAccessUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setStatus('current')
agAccessUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCos.setStatus('current')
agAccessUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgName.setStatus('current')
agAccessUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setStatus('current')
agAccessUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgState.setStatus('current')
agAccessUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 1, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setStatus('current')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
portStatsPhyIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setStatus('current')
portStatsPhyIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setStatus('current')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
dot1xPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dot1xPortStatsTable.setStatus('current')
dot1xPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "dot1xPortStatsIndx"))
if mibBuilder.loadTexts: dot1xPortStatsTableEntry.setStatus('current')
dot1xPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPortStatsIndx.setStatus('current')
eapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesRx.setStatus('current')
eapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesTx.setStatus('current')
eapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolStartFramesRx.setStatus('current')
eapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolLogoffFramesRx.setStatus('current')
eapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespIdFramesRx.setStatus('current')
eapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespFramesRx.setStatus('current')
eapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqIdFramesTx.setStatus('current')
eapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqFramesTx.setStatus('current')
invalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidEapolFramesRx.setStatus('current')
eapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapLengthErrorFramesRx.setStatus('current')
authEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersConnecting.setStatus('current')
authEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffsWhileConnecting.setStatus('current')
authEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersAuthenticating.setStatus('current')
authSuccessesWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSuccessesWhileAuthenticating.setStatus('current')
authTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTimeoutsWhileAuthenticating.setStatus('current')
authFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailWhileAuthenticating.setStatus('current')
authReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticating.setStatus('current')
authEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticating.setStatus('current')
authEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticating.setStatus('current')
authReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticated.setStatus('current')
authEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticated.setStatus('current')
authEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticated.setStatus('current')
backendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendResponses.setStatus('current')
backendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAccessChallenges.setStatus('current')
backendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendOtherRequestsToSupplicant.setStatus('current')
backendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendNonNakResponsesFromSupplicant.setStatus('current')
backendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthSuccesses.setStatus('current')
backendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthFails.setStatus('current')
lastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameVersion.setStatus('current')
lastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 3, 2, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameSource.setStatus('current')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
geaportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1), )
if mibBuilder.loadTexts: geaportInfoTable.setStatus('current')
geaportInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "geaportInfoLogicalIndex"))
if mibBuilder.loadTexts: geaportInfoTableEntry.setStatus('current')
geaportInfoLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setStatus('current')
geaportInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoPort.setStatus('current')
geaportInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoUnit.setStatus('current')
ufdInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoState.setStatus('current')
ufdInfoLtMStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("forwarding", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMStatus.setStatus('current')
ufdInfoLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMPorts.setStatus('current')
ufdInfoLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMTrunks.setStatus('current')
ufdInfoLtDStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("autoDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDStatus.setStatus('current')
ufdInfoLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDPorts.setStatus('current')
ufdInfoLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDTrunks.setStatus('current')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
aclPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: aclPortStatsTable.setStatus('current')
aclPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "aclPortStatsIndx"))
if mibBuilder.loadTexts: aclPortStatsTableEntry.setStatus('current')
aclPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortStatsIndx.setStatus('current')
aclPortStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortStatsHits.setStatus('current')
aclPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortClearStats.setStatus('current')
aclMeterPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1), )
if mibBuilder.loadTexts: aclMeterPortStatsTable.setStatus('current')
aclMeterPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1), ).setIndexNames((0, "BLADETYPE2-SWITCH-MIB", "aclMeterPortStatsIndx"))
if mibBuilder.loadTexts: aclMeterPortStatsTableEntry.setStatus('current')
aclMeterPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMeterPortStatsIndx.setStatus('current')
aclMeterPortStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMeterPortStatsHits.setStatus('current')
aclMeterPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 1, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclMeterPortClearStats.setStatus('current')
mibBuilder.exportSymbols("BLADETYPE2-SWITCH-MIB", agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, agTftpImage=agTftpImage, agTftpCfgFileName=agTftpCfgFileName, pktStatsAllocs=pktStatsAllocs, geaportInfoPort=geaportInfoPort, lastEapolFrameVersion=lastEapolFrameVersion, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, agTftpAction=agTftpAction, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, ufdInfo=ufdInfo, agTacacsUserMapNewCfgUId=agTacacsUserMapNewCfgUId, agDiffTable=agDiffTable, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, tacCurCfgSecondaryIpAddr=tacCurCfgSecondaryIpAddr, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, agCurCfgNTPDlight=agCurCfgNTPDlight, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, radNewCfgTimeout=radNewCfgTimeout, agRadiusConfig=agRadiusConfig, agPortFiberCurCfgTxUp=agPortFiberCurCfgTxUp, agSyslog=agSyslog, agCurCfgTftpServerPort=agCurCfgTftpServerPort, authEntersConnecting=authEntersConnecting, agPortFiberCurCfgTxDn=agPortFiberCurCfgTxDn, agClearFlashDump=agClearFlashDump, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, portInfoIndx=portInfoIndx, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, backendAuthSuccesses=backendAuthSuccesses, agAccessUserNewCfgTable=agAccessUserNewCfgTable, authEapLogoffWhileAuthenticating=authEapLogoffWhileAuthenticating, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, authEapLogoffWhileAuthenticated=authEapLogoffWhileAuthenticated, hwPartNumber=hwPartNumber, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, tacNewCfgCmap=tacNewCfgCmap, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, eapolLogoffFramesRx=eapolLogoffFramesRx, tacCurCfgPort=tacCurCfgPort, radNewCfgSecBd=radNewCfgSecBd, agAccessUserCurCfgName=agAccessUserCurCfgName, agRackId=agRackId, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, agNTPOper=agNTPOper, tacNewCfgSecBd=tacNewCfgSecBd, pktStats=pktStats, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, agCurCfgSyslogTrapStg=agCurCfgSyslogTrapStg, agImage1Ver=agImage1Ver, portOperDot1xTableEntry=portOperDot1xTableEntry, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, agPortNewCfgBroadcastThresholdRate=agPortNewCfgBroadcastThresholdRate, agNewDaylightSavings=agNewDaylightSavings, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, agCfgDumpTable=agCfgDumpTable, agPortFiberCurCfgIndx=agPortFiberCurCfgIndx, portStatsClear=portStatsClear, agPortCurCfgPortName=agPortCurCfgPortName, aclMeterPortStatsTable=aclMeterPortStatsTable, agRtcDate=agRtcDate, radCurCfgTimeout=radCurCfgTimeout, agCfgDump=agCfgDump, agPortFiberCurCfgTxCtrl=agPortFiberCurCfgTxCtrl, agNewCfgNTPDlight=agNewCfgNTPDlight, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, portOperDot1xReset=portOperDot1xReset, portOperDot1xReauth=portOperDot1xReauth, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, ufdInfoLtMPorts=ufdInfoLtMPorts, agPortNewCfgState=agPortNewCfgState, agDiffTableSize=agDiffTableSize, agApplyIndex=agApplyIndex, agTftpDumpFileName=agTftpDumpFileName, agSlotNumber=agSlotNumber, agTacacsUserMapCurCfgTable=agTacacsUserMapCurCfgTable, backendResponses=backendResponses, agCfgDumpTableSize=agCfgDumpTableSize, hwRevision=hwRevision, agSyslogMsgIndex=agSyslogMsgIndex, agPortNewCfgTableEntry=agPortNewCfgTableEntry, portInfoLink=portInfoLink, swKeyInfo=swKeyInfo, agPortFiberCurCfgTable=agPortFiberCurCfgTable, portStatsIndx=portStatsIndx, agAccessUserMaxUserID=agAccessUserMaxUserID, agCurCfgSyslogTrap8021x=agCurCfgSyslogTrap8021x, portInfoTableEntry=portInfoTableEntry, pktStatsAllocFails=pktStatsAllocFails, agPortCurCfgBroadcastThreshold=agPortCurCfgBroadcastThreshold, radNewCfgState=radNewCfgState, eapolFramesTx=eapolFramesTx, portInfo=portInfo, agPortCurCfgTable=agPortCurCfgTable, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, dot1xPortStatsTable=dot1xPortStatsTable, agCurCfgConsole=agCurCfgConsole, mgmtInfo=mgmtInfo, agPortNewCfgTagPVID=agPortNewCfgTagPVID, agNewCfgSyslogHost=agNewCfgSyslogHost, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, eapolFramesRx=eapolFramesRx, agDiffState=agDiffState, agTacacsUserMapNewCfgTableEntry=agTacacsUserMapNewCfgTableEntry, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, agCfgDumpState=agCfgDumpState, eapolRespIdFramesRx=eapolRespIdFramesRx, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, agPortFiberCurCfgTableEntry=agPortFiberCurCfgTableEntry, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, tacNewCfgPrimaryIpAddr=tacNewCfgPrimaryIpAddr, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, aclPortStatsTable=aclPortStatsTable, agPortCurCfgTableEntry=agPortCurCfgTableEntry, agSyslogMsgTableEntry=agSyslogMsgTableEntry, agCfgDumpTableEntry=agCfgDumpTableEntry, portOperDot1xTable=portOperDot1xTable, agDiffString=agDiffString, agPortCurCfgIndx=agPortCurCfgIndx, agNewCfgNTPService=agNewCfgNTPService, agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, agReset=agReset, agCurCfgNTPTzoneHHMM=agCurCfgNTPTzoneHHMM, portStatsPhyIfInOctets=portStatsPhyIfInOctets, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, backendNonNakResponsesFromSupplicant=backendNonNakResponsesFromSupplicant, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, agAccessUserCurCos=agAccessUserCurCos, agPortFiberNewCfgTxPulse=agPortFiberNewCfgTxPulse, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, eapolRespFramesRx=eapolRespFramesRx, agMgmtNetConfig=agMgmtNetConfig, aclMeterPortStatsIndx=aclMeterPortStatsIndx, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, agTacacsConfig=agTacacsConfig, agLastSetErrorReason=agLastSetErrorReason, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, agCurCfgBootp=agCurCfgBootp, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, eapolReqIdFramesTx=eapolReqIdFramesTx, ufdInfoLtMTrunks=ufdInfoLtMTrunks, agSoftwareVersion=agSoftwareVersion, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, agNewCfgTftpServerPort=agNewCfgTftpServerPort, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, agDiffTableEntry=agDiffTableEntry, agPortNewCfgVlanTag=agPortNewCfgVlanTag, radNewCfgRetries=radNewCfgRetries, agCurCfgNTPService=agCurCfgNTPService, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agCurCfgNTPSecServer=agCurCfgNTPSecServer, agApplyConfig=agApplyConfig, geaportInfoUnit=geaportInfoUnit, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, portStatsPhyIfInMulticastPkts=portStatsPhyIfInMulticastPkts, agPortCurCfgStp=agPortCurCfgStp, portStatsTableEntry=portStatsTableEntry, tacCurCfgRetries=tacCurCfgRetries, agCurCfgHttpServerPort=agCurCfgHttpServerPort, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, dot1xPortStatsIndx=dot1xPortStatsIndx, tacNewCfgTimeout=tacNewCfgTimeout, pktStatsFrees=pktStatsFrees, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, spStats=spStats, agPortCurCfgRmon=agPortCurCfgRmon, ntpClearStats=ntpClearStats, agCurBootNxtCliMode=agCurBootNxtCliMode, agCurCfgUfdTrap=agCurCfgUfdTrap, tacNewCfgPort=tacNewCfgPort, agSystem=agSystem, agLog=agLog, agent=agent, authSuccessesWhileAuthenticating=authSuccessesWhileAuthenticating, ufdInfoLtDStatus=ufdInfoLtDStatus, agentStats=agentStats, portOperRmon=portOperRmon, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, agAccessUserCurCfgPswd=agAccessUserCurCfgPswd, agAccessUserNewCos=agAccessUserNewCos, agPortCurCfgMulticastThresholdRate=agPortCurCfgMulticastThresholdRate, agTftpPassword=agTftpPassword, agImage2Ver=agImage2Ver, agRevert=agRevert, tacCurCfgTelnet=tacCurCfgTelnet, agCurCfgSyslogSev=agCurCfgSyslogSev, agSyslogMsgTable=agSyslogMsgTable, portInfoTable=portInfoTable, aclMeterPortStatsHits=aclMeterPortStatsHits, portStatsTable=portStatsTable, agCurCfgNTPServer=agCurCfgNTPServer, agPortNewCfgGigEthMode=agPortNewCfgGigEthMode, agNewCfgBootp=agNewCfgBootp, agTftpServer=agTftpServer, radCurCfgTelnet=radCurCfgTelnet, agTftpLastActionStatus=agTftpLastActionStatus, agAccessUserCurCfgTable=agAccessUserCurCfgTable, agAccessUserCurCfgTableEntry=agAccessUserCurCfgTableEntry, tacCurCfgAuthenString=tacCurCfgAuthenString, agPortNewCfgDLFThreshold=agPortNewCfgDLFThreshold, agNewCfgSyslogTrapUfd=agNewCfgSyslogTrapUfd, aclMeterPortStats=aclMeterPortStats, agAccessUserCurCfgUId=agAccessUserCurCfgUId, agPortCurCfgGigEthSpeed=agPortCurCfgGigEthSpeed, agAccessUserNewCfgUId=agAccessUserNewCfgUId, agRtcTime=agRtcTime, agPortConfig=agPortConfig, agNewCfgSyslogTrapHotlinks=agNewCfgSyslogTrapHotlinks, hardware=hardware, agPortNewCfgStp=agPortNewCfgStp, agApplyConfiguration=agApplyConfiguration, radCurCfgSecBd=radCurCfgSecBd, ufdInfoLtMStatus=ufdInfoLtMStatus, agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, tacNewCfgState=tacNewCfgState, tacCurCfgCmap=tacCurCfgCmap, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, agApply=agApply, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, radNewCfgAuthenString=radNewCfgAuthenString, aclMeterPortClearStats=aclMeterPortClearStats, geaportInfoLogicalIndex=geaportInfoLogicalIndex, agPortCurCfgDLFThresholdRate=agPortCurCfgDLFThresholdRate, agNewCfgReminders=agNewCfgReminders, agPortNewCfgDLFThresholdRate=agPortNewCfgDLFThresholdRate, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, authEapLogoffsWhileConnecting=authEapLogoffsWhileConnecting, agPortNewCfgIndx=agPortNewCfgIndx, radNewCfgTelnet=radNewCfgTelnet, agTacacsUserMapCurCfgMapping=agTacacsUserMapCurCfgMapping, agNewCfgSyslogTrapStg=agNewCfgSyslogTrapStg, agentOper=agentOper, portOperState=portOperState, authFailWhileAuthenticating=authFailWhileAuthenticating, portInfoPhyIfDescr=portInfoPhyIfDescr, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agPortCurCfgVlanTag=agPortCurCfgVlanTag, mpCpuStats=mpCpuStats, radCurCfgAuthenString=radCurCfgAuthenString, agPortNewCfgRmon=agPortNewCfgRmon, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, agNTP=agNTP, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, PYSNMP_MODULE_ID=agent, portInfoSpeed=portInfoSpeed, agCurCfgSyslogTrapHotlinks=agCurCfgSyslogTrapHotlinks)
mibBuilder.exportSymbols("BLADETYPE2-SWITCH-MIB", agPortNewCfgMulticastThreshold=agPortNewCfgMulticastThreshold, eapLengthErrorFramesRx=eapLengthErrorFramesRx, portInfoFlowCtrl=portInfoFlowCtrl, ntpStats=ntpStats, portInfoMode=portInfoMode, agSyslogMessage=agSyslogMessage, agTftp=agTftp, hwInsertedCubeType=hwInsertedCubeType, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, pktStatsJumbos=pktStatsJumbos, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, agPortNewCfgMulticastThresholdRate=agPortNewCfgMulticastThresholdRate, agCurDaylightSavings=agCurDaylightSavings, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, aclPortStats=aclPortStats, authEapStartsWhileAuthenticated=authEapStartsWhileAuthenticated, agPortCurCfgDLFThreshold=agPortCurCfgDLFThreshold, agNewCfgSyslog2Host=agNewCfgSyslog2Host, agCfgDumpString=agCfgDumpString, agPortOperTable=agPortOperTable, agPortCurCfgBroadcastThresholdRate=agPortCurCfgBroadcastThresholdRate, backendOtherRequestsToSupplicant=backendOtherRequestsToSupplicant, authReauthsWhileAuthenticated=authReauthsWhileAuthenticated, agPortCurCfgMulticastThreshold=agPortCurCfgMulticastThreshold, tacCurCfgSecBd=tacCurCfgSecBd, agNewCfgNTPServer=agNewCfgNTPServer, agCurCfgSyslogHost=agCurCfgSyslogHost, agNewCfgLoginBanner=agNewCfgLoginBanner, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, agPortFiberNewCfgTxDn=agPortFiberNewCfgTxDn, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, agAccessUserNewCfgDelete=agAccessUserNewCfgDelete, agImageForNxtReset=agImageForNxtReset, agPortNewCfgPortName=agPortNewCfgPortName, geaportInfoTableEntry=geaportInfoTableEntry, agAccessUserNewCfgName=agAccessUserNewCfgName, aclPortStatsTableEntry=aclPortStatsTableEntry, agNewCfgSyslogTrap8021x=agNewCfgSyslogTrap8021x, agAccessUserCurCfgState=agAccessUserCurCfgState, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, authTimeoutsWhileAuthenticating=authTimeoutsWhileAuthenticating, agConfigForNxtReset=agConfigForNxtReset, radCurCfgState=radCurCfgState, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, agSaveConfiguration=agSaveConfiguration, agRevertApply=agRevertApply, ntpLastUpdateServer=ntpLastUpdateServer, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, agPortCurCfgPVID=agPortCurCfgPVID, portStatsPhyIfInErrors=portStatsPhyIfInErrors, radCurCfgRetries=radCurCfgRetries, agPortNewCfgBroadcastThreshold=agPortNewCfgBroadcastThreshold, agDiffIndex=agDiffIndex, agTftpUserName=agTftpUserName, authReauthsWhileAuthenticating=authReauthsWhileAuthenticating, agBootVer=agBootVer, agTacacsUserMapNewCfgMapping=agTacacsUserMapNewCfgMapping, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, agNewCfgHttpServerPort=agNewCfgHttpServerPort, tacCurCfgTimeout=tacCurCfgTimeout, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, agPortFiberNewCfgTxCtrl=agPortFiberNewCfgTxCtrl, geaportInfoTable=geaportInfoTable, agCurCfgTrapHostTable=agCurCfgTrapHostTable, agNewCfgConsole=agNewCfgConsole, agPortTableMaxEnt=agPortTableMaxEnt, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, ufdInfoLtDTrunks=ufdInfoLtDTrunks, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, portOperIdx=portOperIdx, agApplyTableSize=agApplyTableSize, agApplyString=agApplyString, agTrapHost=agTrapHost, agentInfo=agentInfo, agApplyTableEntry=agApplyTableEntry, aclMeterPortStatsTableEntry=aclMeterPortStatsTableEntry, portInfoPhyIfType=portInfoPhyIfType, agSavePending=agSavePending, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, agNewCfgUfdTrap=agNewCfgUfdTrap, aclPortClearStats=aclPortClearStats, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, agTacacsUserMapCurCfgTableEntry=agTacacsUserMapCurCfgTableEntry, agAccess=agAccess, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, agApplyTable=agApplyTable, hwPowerSupplyStatus=hwPowerSupplyStatus, agNewBootNxtCliMode=agNewBootNxtCliMode, aclPortStatsHits=aclPortStatsHits, agPortFiberNewCfgTable=agPortFiberNewCfgTable, tacCurCfgPrimaryIpAddr=tacCurCfgPrimaryIpAddr, agCurCfgSyslog2Host=agCurCfgSyslog2Host, agNewCfgNTPSecServer=agNewCfgNTPSecServer, tacNewCfgAuthenString=tacNewCfgAuthenString, geaportInfo=geaportInfo, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, agPortNewCfgGigEthSpeed=agPortNewCfgGigEthSpeed, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, agPortCurCfgState=agPortCurCfgState, agPortCurCfgTagPVID=agPortCurCfgTagPVID, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, invalidEapolFramesRx=invalidEapolFramesRx, ntpOperSendReq=ntpOperSendReq, portInfoPhyIfMtu=portInfoPhyIfMtu, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, tacNewCfgRetries=tacNewCfgRetries, ufdInfoState=ufdInfoState, agPortFiberNewCfgIndx=agPortFiberNewCfgIndx, agNewCfgSyslogTrapCfg=agNewCfgSyslogTrapCfg, lastEapolFrameSource=lastEapolFrameSource, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, dot1xPortStatsTableEntry=dot1xPortStatsTableEntry, agClrSyslogMsgs=agClrSyslogMsgs, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, agDiff=agDiff, ufdInfoLtDPorts=ufdInfoLtDPorts, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, agPortNewCfgPVID=agPortNewCfgPVID, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, agPortOperTableEntry=agPortOperTableEntry, agPortFiberNewCfgTxUp=agPortFiberNewCfgTxUp, agCurCfgReminders=agCurCfgReminders, aclPortStatsIndx=aclPortStatsIndx, radNewCfgPort=radNewCfgPort, agNewCfgTrapHostTable=agNewCfgTrapHostTable, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, hwSensor1Temp=hwSensor1Temp, agTftpImageFileName=agTftpImageFileName, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, agPortFiberCurCfgTxPulse=agPortFiberCurCfgTxPulse, agAccessUserNewCfgTableEntry=agAccessUserNewCfgTableEntry, portStatsPhyIfOutMulticastPkts=portStatsPhyIfOutMulticastPkts, agTftpTSDumpFileName=agTftpTSDumpFileName, mgmtStats=mgmtStats, pktStatsMediums=pktStatsMediums, agCfgDumpIndex=agCfgDumpIndex, agentConfig=agentConfig, tacNewCfgTelnet=tacNewCfgTelnet, agPortNewCfgTable=agPortNewCfgTable, ntpLastUpdateTime=ntpLastUpdateTime, agCurCfgSyslogTrapCfg=agCurCfgSyslogTrapCfg, backendAccessChallenges=backendAccessChallenges, agTacacsUserMapNewCfgTable=agTacacsUserMapNewCfgTable, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, agCurCfgLoginBanner=agCurCfgLoginBanner, agNewCfgSyslogSev=agNewCfgSyslogSev, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, authEntersAuthenticating=authEntersAuthenticating, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, authEapStartsWhileAuthenticating=authEapStartsWhileAuthenticating, agCurCfgSyslogTrapUfd=agCurCfgSyslogTrapUfd, agCurCfgSyslogFac=agCurCfgSyslogFac, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, portOperDot1xIndx=portOperDot1xIndx, agPortFiberNewCfgTableEntry=agPortFiberNewCfgTableEntry, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, agChassis=agChassis, radCurCfgPort=radCurCfgPort, ntpSystemCurrentTime=ntpSystemCurrentTime, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, backendAuthFails=backendAuthFails, portInfoPhyIfLastChange=portInfoPhyIfLastChange, agPortCurCfgGigEthMode=agPortCurCfgGigEthMode, agApplyPending=agApplyPending, tacNewCfgSecondaryIpAddr=tacNewCfgSecondaryIpAddr, agNewCfgNTPTzoneHHMM=agNewCfgNTPTzoneHHMM, tacCurCfgState=tacCurCfgState, agAccessUserNewCfgPswd=agAccessUserNewCfgPswd, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, portStats=portStats, agAccessUserNewCfgState=agAccessUserNewCfgState, agNewCfgSyslogFac=agNewCfgSyslogFac, eapolReqFramesTx=eapolReqFramesTx, agTacacsUserMapCurCfgUId=agTacacsUserMapCurCfgUId, pktStatsSmalls=pktStatsSmalls, eapolStartFramesRx=eapolStartFramesRx)
