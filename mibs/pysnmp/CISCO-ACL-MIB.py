#
# PySNMP MIB module CISCO-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoIpProtocol, = mibBuilder.importSymbols("CISCO-TC", "CiscoIpProtocol")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, TimeTicks, Unsigned32, ModuleIdentity, iso, MibIdentifier, Gauge32, ObjectIdentity, Counter32, Counter64, Bits, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Unsigned32", "ModuleIdentity", "iso", "MibIdentifier", "Gauge32", "ObjectIdentity", "Counter32", "Counter64", "Bits", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
ciscoACLMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 808))
ciscoACLMIB.setRevisions(('2013-03-27 00:00',))
if mibBuilder.loadTexts: ciscoACLMIB.setLastUpdated('201303270000Z')
if mibBuilder.loadTexts: ciscoACLMIB.setOrganization('Cisco Systems, Inc.')
caAclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 1))
caAclMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 2))
caAclConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1))
caAclStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2))
caAclMIBACEConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1))
caAclMIBACECompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 1))
caAclMIBCfgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2))
class CaAclTrafficDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class CaAclACLIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CaAclSequenceNumber(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CaAclPortOperator(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("lt", 1), ("gt", 2), ("eq", 3), ("neq", 4), ("range", 5))

class CaAclAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

class CaAclLogOption(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("log", 1), ("logInput", 2))

class CaAclTcpFlagsMatch(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("matchAny", 1), ("matchAll", 2), ("matchNone", 3))

class CaAclPrecedenceValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flashOverride", 4), ("critical", 5), ("internet", 6), ("network", 7))

caAclCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1), )
if mibBuilder.loadTexts: caAclCfgTable.setStatus('current')
caAclCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ACL-MIB", "caAclIndex"), (0, "CISCO-ACL-MIB", "caAclAddressType"))
if mibBuilder.loadTexts: caAclCfgTableEntry.setStatus('current')
caAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1, 1, 1), CaAclACLIndex())
if mibBuilder.loadTexts: caAclIndex.setStatus('current')
caAclAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: caAclAddressType.setStatus('current')
caAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclName.setStatus('current')
caAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclRowStatus.setStatus('current')
caAclIPV4ACECfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2), )
if mibBuilder.loadTexts: caAclIPV4ACECfgTable.setStatus('current')
caAclIPV4ACECfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-ACL-MIB", "caAclIndex"), (0, "CISCO-ACL-MIB", "caAclAddressType"), (0, "CISCO-ACL-MIB", "caAclIPV4ACESequenceNumber"))
if mibBuilder.loadTexts: caAclIPV4ACECfgTableEntry.setStatus('current')
caAclIPV4ACESequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 1), CaAclSequenceNumber())
if mibBuilder.loadTexts: caAclIPV4ACESequenceNumber.setStatus('current')
caAclIPV4ACEAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 2), CaAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEAction.setStatus('current')
caAclIPV4ACEProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 3), CiscoIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEProtocol.setStatus('current')
caAclIPV4ACESourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourceAddress.setStatus('current')
caAclIPV4ACESourceWildCardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourceWildCardMask.setStatus('current')
caAclIPV4ACESourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourceNetworkGroup.setStatus('current')
caAclIPV4ACESourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 7), CaAclPortOperator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourcePortOperator.setStatus('current')
caAclIPV4ACESourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourcePort.setStatus('current')
caAclIPV4ACESourcePortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourcePortUpper.setStatus('current')
caAclIPV4ACESourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACESourcePortGroup.setStatus('current')
caAclIPV4ACEDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationAddress.setStatus('current')
caAclIPV4ACEDestinationWildCardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationWildCardMask.setStatus('current')
caAclIPV4ACEDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationNetworkGroup.setStatus('current')
caAclIPV4ACEDestinationPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 14), CaAclPortOperator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationPortOperator.setStatus('current')
caAclIPV4ACEDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 15), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationPort.setStatus('current')
caAclIPV4ACEDestinationPortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 16), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationPortUpper.setStatus('current')
caAclIPV4ACEDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDestinationPortGroup.setStatus('current')
caAclIPV4ACEDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEDscpValue.setStatus('current')
caAclIPV4ACETcpFlagsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACETcpFlagsValue.setStatus('current')
caAclIPV4ACETcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACETcpFlagsMask.setStatus('current')
caAclIPV4ACETcpFlagsMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 21), CaAclTcpFlagsMatch()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACETcpFlagsMatchType.setStatus('current')
caAclIPV4ACETosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACETosValue.setStatus('current')
caAclIPV4ACEPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 23), CaAclPrecedenceValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACEPrecedenceValue.setStatus('current')
caAclIPV4ACELogOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 24), CaAclLogOption()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACELogOption.setStatus('current')
caAclIPV4ACECounterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACECounterLabel.setStatus('current')
caAclIPV4ACERemark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACERemark.setStatus('current')
caAclIPV4ACERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 2, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV4ACERowStatus.setStatus('current')
caAclIPV6ACECfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3), )
if mibBuilder.loadTexts: caAclIPV6ACECfgTable.setStatus('current')
caAclIPV6ACECfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ACL-MIB", "caAclIndex"), (0, "CISCO-ACL-MIB", "caAclAddressType"), (0, "CISCO-ACL-MIB", "caAclIPV6ACESequenceNumber"))
if mibBuilder.loadTexts: caAclIPV6ACECfgTableEntry.setStatus('current')
caAclIPV6ACESequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 1), CaAclSequenceNumber())
if mibBuilder.loadTexts: caAclIPV6ACESequenceNumber.setStatus('current')
caAclIPV6ACEAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 2), CaAclAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEAction.setStatus('current')
caAclIPV6ACEProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 3), CiscoIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEProtocol.setStatus('current')
caAclIPV6ACESourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourceAddress.setStatus('current')
caAclIPV6ACESourcePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourcePrefixLength.setStatus('current')
caAclIPV6ACESourceNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourceNetworkGroup.setStatus('current')
caAclIPV6ACESourcePortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 7), CaAclPortOperator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourcePortOperator.setStatus('current')
caAclIPV6ACESourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourcePort.setStatus('current')
caAclIPV6ACESourcePortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourcePortUpper.setStatus('current')
caAclIPV6ACESourcePortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACESourcePortGroup.setStatus('current')
caAclIPV6ACEDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationAddress.setStatus('current')
caAclIPV6ACEDestinationPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationPrefixLength.setStatus('current')
caAclIPV6ACEDestinationNetworkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationNetworkGroup.setStatus('current')
caAclIPV6ACEDestinationPortOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 14), CaAclPortOperator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationPortOperator.setStatus('current')
caAclIPV6ACEDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 15), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationPort.setStatus('current')
caAclIPV6ACEDestinationPortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 16), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationPortUpper.setStatus('current')
caAclIPV6ACEDestinationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACEDestinationPortGroup.setStatus('current')
caAclIPV6ACETrafficClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACETrafficClassValue.setStatus('current')
caAclIPV6ACETcpFlagsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACETcpFlagsValue.setStatus('current')
caAclIPV6ACETcpFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACETcpFlagsMask.setStatus('current')
caAclIPV6ACETcpFlagsMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 21), CaAclTcpFlagsMatch()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACETcpFlagsMatchType.setStatus('current')
caAclIPV6ACELogOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 22), CaAclLogOption()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACELogOption.setStatus('current')
caAclIPV6ACECounterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACECounterLabel.setStatus('current')
caAclIPV6ACERemark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACERemark.setStatus('current')
caAclIPV6ACERowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 3, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclIPV6ACERowStatus.setStatus('current')
caAclAccessGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4), )
if mibBuilder.loadTexts: caAclAccessGroupCfgTable.setStatus('current')
caAclAccessGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ACL-MIB", "caAclAccessGroupCfgAddressType"), (0, "CISCO-ACL-MIB", "caAclAccessGroupDirection"), (0, "CISCO-ACL-MIB", "caAclAccessGroupSequenceNumber"))
if mibBuilder.loadTexts: caAclAccessGroupCfgEntry.setStatus('current')
caAclAccessGroupACL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1, 1), CaAclACLIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclAccessGroupACL.setStatus('current')
caAclAccessGroupCfgAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: caAclAccessGroupCfgAddressType.setStatus('current')
caAclAccessGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1, 3), CaAclTrafficDirection())
if mibBuilder.loadTexts: caAclAccessGroupDirection.setStatus('current')
caAclAccessGroupSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1, 4), CaAclSequenceNumber())
if mibBuilder.loadTexts: caAclAccessGroupSequenceNumber.setStatus('current')
caAclAccessGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caAclAccessGroupRowStatus.setStatus('current')
caAclLabelIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2, 1), )
if mibBuilder.loadTexts: caAclLabelIntfStatsTable.setStatus('current')
caAclLabelIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ACL-MIB", "caAclAccessGroupCfgAddressType"), (0, "CISCO-ACL-MIB", "caAclAccessGroupDirection"), (0, "CISCO-ACL-MIB", "caAclIntfStatsCounterLabelName"))
if mibBuilder.loadTexts: caAclLabelIntfStatsEntry.setStatus('current')
caAclIntfStatsCounterLabelName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: caAclIntfStatsCounterLabelName.setStatus('current')
caAclIntfStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2, 1, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: caAclIntfStatsPackets.setStatus('current')
caAclIntfStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 808, 1, 2, 1, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: caAclIntfStatsOctets.setStatus('current')
caAclMIBCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2, 1)).setObjects(("CISCO-ACL-MIB", "caAclName"), ("CISCO-ACL-MIB", "caAclRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclMIBCfgGroup = caAclMIBCfgGroup.setStatus('current')
caAclIPV4ACLMIBACEGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2, 2)).setObjects(("CISCO-ACL-MIB", "caAclIPV4ACEAction"), ("CISCO-ACL-MIB", "caAclIPV4ACEProtocol"), ("CISCO-ACL-MIB", "caAclIPV4ACESourceAddress"), ("CISCO-ACL-MIB", "caAclIPV4ACESourceWildCardMask"), ("CISCO-ACL-MIB", "caAclIPV4ACESourceNetworkGroup"), ("CISCO-ACL-MIB", "caAclIPV4ACESourcePortOperator"), ("CISCO-ACL-MIB", "caAclIPV4ACESourcePort"), ("CISCO-ACL-MIB", "caAclIPV4ACESourcePortUpper"), ("CISCO-ACL-MIB", "caAclIPV4ACESourcePortGroup"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationAddress"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationWildCardMask"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationNetworkGroup"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationPortOperator"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationPort"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationPortUpper"), ("CISCO-ACL-MIB", "caAclIPV4ACEDestinationPortGroup"), ("CISCO-ACL-MIB", "caAclIPV4ACEDscpValue"), ("CISCO-ACL-MIB", "caAclIPV4ACETcpFlagsValue"), ("CISCO-ACL-MIB", "caAclIPV4ACETcpFlagsMask"), ("CISCO-ACL-MIB", "caAclIPV4ACETcpFlagsMatchType"), ("CISCO-ACL-MIB", "caAclIPV4ACETosValue"), ("CISCO-ACL-MIB", "caAclIPV4ACEPrecedenceValue"), ("CISCO-ACL-MIB", "caAclIPV4ACELogOption"), ("CISCO-ACL-MIB", "caAclIPV4ACECounterLabel"), ("CISCO-ACL-MIB", "caAclIPV4ACERemark"), ("CISCO-ACL-MIB", "caAclIPV4ACERowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclIPV4ACLMIBACEGroup = caAclIPV4ACLMIBACEGroup.setStatus('current')
caAclIPV6ACLMIBACEGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2, 3)).setObjects(("CISCO-ACL-MIB", "caAclIPV6ACEAction"), ("CISCO-ACL-MIB", "caAclIPV6ACEProtocol"), ("CISCO-ACL-MIB", "caAclIPV6ACESourceAddress"), ("CISCO-ACL-MIB", "caAclIPV6ACESourcePrefixLength"), ("CISCO-ACL-MIB", "caAclIPV6ACESourceNetworkGroup"), ("CISCO-ACL-MIB", "caAclIPV6ACESourcePortOperator"), ("CISCO-ACL-MIB", "caAclIPV6ACESourcePort"), ("CISCO-ACL-MIB", "caAclIPV6ACESourcePortUpper"), ("CISCO-ACL-MIB", "caAclIPV6ACESourcePortGroup"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationAddress"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationPrefixLength"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationNetworkGroup"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationPortOperator"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationPort"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationPortUpper"), ("CISCO-ACL-MIB", "caAclIPV6ACEDestinationPortGroup"), ("CISCO-ACL-MIB", "caAclIPV6ACETcpFlagsValue"), ("CISCO-ACL-MIB", "caAclIPV6ACETcpFlagsMask"), ("CISCO-ACL-MIB", "caAclIPV6ACETcpFlagsMatchType"), ("CISCO-ACL-MIB", "caAclIPV6ACETrafficClassValue"), ("CISCO-ACL-MIB", "caAclIPV6ACELogOption"), ("CISCO-ACL-MIB", "caAclIPV6ACECounterLabel"), ("CISCO-ACL-MIB", "caAclIPV6ACERemark"), ("CISCO-ACL-MIB", "caAclIPV6ACERowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclIPV6ACLMIBACEGroup = caAclIPV6ACLMIBACEGroup.setStatus('current')
caAclMIBAccessGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2, 4)).setObjects(("CISCO-ACL-MIB", "caAclAccessGroupACL"), ("CISCO-ACL-MIB", "caAclAccessGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclMIBAccessGroupCfgGroup = caAclMIBAccessGroupCfgGroup.setStatus('current')
caAclMIBCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 2, 5)).setObjects(("CISCO-ACL-MIB", "caAclIntfStatsPackets"), ("CISCO-ACL-MIB", "caAclIntfStatsOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclMIBCounterGroup = caAclMIBCounterGroup.setStatus('current')
caAclMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 808, 2, 1, 1, 1)).setObjects(("CISCO-ACL-MIB", "caAclMIBCfgGroup"), ("CISCO-ACL-MIB", "caAclMIBAccessGroupCfgGroup"), ("CISCO-ACL-MIB", "caAclIPV4ACLMIBACEGroup"), ("CISCO-ACL-MIB", "caAclIPV6ACLMIBACEGroup"), ("CISCO-ACL-MIB", "caAclMIBCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caAclMIBCompliance = caAclMIBCompliance.setStatus('current')
mibBuilder.exportSymbols("CISCO-ACL-MIB", CaAclPrecedenceValue=CaAclPrecedenceValue, caAclIPV4ACERowStatus=caAclIPV4ACERowStatus, caAclIPV4ACESourceAddress=caAclIPV4ACESourceAddress, caAclIPV6ACESourcePrefixLength=caAclIPV6ACESourcePrefixLength, CaAclTcpFlagsMatch=CaAclTcpFlagsMatch, caAclIntfStatsCounterLabelName=caAclIntfStatsCounterLabelName, CaAclACLIndex=CaAclACLIndex, caAclMIBAccessGroupCfgGroup=caAclMIBAccessGroupCfgGroup, caAclIPV6ACESourceNetworkGroup=caAclIPV6ACESourceNetworkGroup, caAclIPV4ACESourcePortGroup=caAclIPV4ACESourcePortGroup, caAclIPV6ACLMIBACEGroup=caAclIPV6ACLMIBACEGroup, caAclIPV6ACEDestinationPortOperator=caAclIPV6ACEDestinationPortOperator, caAclIPV4ACECounterLabel=caAclIPV4ACECounterLabel, caAclIPV4ACEDestinationPortGroup=caAclIPV4ACEDestinationPortGroup, caAclAccessGroupCfgTable=caAclAccessGroupCfgTable, caAclAccessGroupACL=caAclAccessGroupACL, caAclIPV6ACETrafficClassValue=caAclIPV6ACETrafficClassValue, caAclIPV4ACEDestinationPortUpper=caAclIPV4ACEDestinationPortUpper, caAclConfiguration=caAclConfiguration, caAclMIBACEConform=caAclMIBACEConform, caAclIPV4ACETcpFlagsMask=caAclIPV4ACETcpFlagsMask, caAclIPV6ACETcpFlagsValue=caAclIPV6ACETcpFlagsValue, caAclIPV6ACEAction=caAclIPV6ACEAction, caAclIPV6ACESourcePortGroup=caAclIPV6ACESourcePortGroup, caAclIntfStatsOctets=caAclIntfStatsOctets, caAclMIBObjects=caAclMIBObjects, caAclIPV4ACELogOption=caAclIPV4ACELogOption, caAclIPV4ACESourcePort=caAclIPV4ACESourcePort, caAclIPV4ACESourcePortUpper=caAclIPV4ACESourcePortUpper, caAclIPV6ACECfgTable=caAclIPV6ACECfgTable, caAclCfgTableEntry=caAclCfgTableEntry, caAclIPV4ACESourcePortOperator=caAclIPV4ACESourcePortOperator, caAclIPV4ACEDestinationAddress=caAclIPV4ACEDestinationAddress, caAclIndex=caAclIndex, caAclIPV4ACECfgTable=caAclIPV4ACECfgTable, caAclAccessGroupSequenceNumber=caAclAccessGroupSequenceNumber, caAclIPV4ACEDscpValue=caAclIPV4ACEDscpValue, caAclMIBCompliance=caAclMIBCompliance, caAclIPV4ACESequenceNumber=caAclIPV4ACESequenceNumber, CaAclTrafficDirection=CaAclTrafficDirection, caAclRowStatus=caAclRowStatus, caAclIPV6ACESourcePortOperator=caAclIPV6ACESourcePortOperator, caAclStats=caAclStats, caAclMIBConformance=caAclMIBConformance, caAclIPV6ACESourceAddress=caAclIPV6ACESourceAddress, caAclIPV6ACECfgTableEntry=caAclIPV6ACECfgTableEntry, caAclIPV6ACEDestinationPortUpper=caAclIPV6ACEDestinationPortUpper, caAclIPV6ACEDestinationPortGroup=caAclIPV6ACEDestinationPortGroup, caAclIPV6ACETcpFlagsMatchType=caAclIPV6ACETcpFlagsMatchType, caAclIPV4ACEDestinationNetworkGroup=caAclIPV4ACEDestinationNetworkGroup, caAclAddressType=caAclAddressType, caAclIPV4ACESourceNetworkGroup=caAclIPV4ACESourceNetworkGroup, caAclIntfStatsPackets=caAclIntfStatsPackets, caAclIPV4ACEProtocol=caAclIPV4ACEProtocol, caAclIPV4ACEDestinationWildCardMask=caAclIPV4ACEDestinationWildCardMask, caAclIPV4ACEDestinationPortOperator=caAclIPV4ACEDestinationPortOperator, CaAclPortOperator=CaAclPortOperator, caAclName=caAclName, caAclIPV4ACETcpFlagsValue=caAclIPV4ACETcpFlagsValue, caAclAccessGroupCfgEntry=caAclAccessGroupCfgEntry, CaAclAction=CaAclAction, caAclMIBCfgGroup=caAclMIBCfgGroup, caAclCfgTable=caAclCfgTable, caAclIPV4ACEDestinationPort=caAclIPV4ACEDestinationPort, caAclAccessGroupRowStatus=caAclAccessGroupRowStatus, caAclIPV6ACEDestinationNetworkGroup=caAclIPV6ACEDestinationNetworkGroup, caAclIPV6ACESourcePort=caAclIPV6ACESourcePort, caAclIPV6ACESequenceNumber=caAclIPV6ACESequenceNumber, caAclIPV4ACETosValue=caAclIPV4ACETosValue, caAclAccessGroupCfgAddressType=caAclAccessGroupCfgAddressType, caAclIPV4ACESourceWildCardMask=caAclIPV4ACESourceWildCardMask, ciscoACLMIB=ciscoACLMIB, CaAclSequenceNumber=CaAclSequenceNumber, caAclIPV4ACECfgTableEntry=caAclIPV4ACECfgTableEntry, caAclMIBCfgGroups=caAclMIBCfgGroups, caAclLabelIntfStatsEntry=caAclLabelIntfStatsEntry, caAclIPV6ACERemark=caAclIPV6ACERemark, CaAclLogOption=CaAclLogOption, caAclIPV6ACEDestinationPrefixLength=caAclIPV6ACEDestinationPrefixLength, caAclIPV4ACEPrecedenceValue=caAclIPV4ACEPrecedenceValue, caAclIPV6ACEDestinationAddress=caAclIPV6ACEDestinationAddress, caAclIPV4ACERemark=caAclIPV4ACERemark, PYSNMP_MODULE_ID=ciscoACLMIB, caAclIPV4ACEAction=caAclIPV4ACEAction, caAclMIBACECompliances=caAclMIBACECompliances, caAclIPV6ACECounterLabel=caAclIPV6ACECounterLabel, caAclIPV6ACESourcePortUpper=caAclIPV6ACESourcePortUpper, caAclIPV4ACETcpFlagsMatchType=caAclIPV4ACETcpFlagsMatchType, caAclMIBCounterGroup=caAclMIBCounterGroup, caAclIPV6ACELogOption=caAclIPV6ACELogOption, caAclIPV6ACEDestinationPort=caAclIPV6ACEDestinationPort, caAclIPV6ACERowStatus=caAclIPV6ACERowStatus, caAclIPV6ACEProtocol=caAclIPV6ACEProtocol, caAclIPV4ACLMIBACEGroup=caAclIPV4ACLMIBACEGroup, caAclIPV6ACETcpFlagsMask=caAclIPV6ACETcpFlagsMask, caAclAccessGroupDirection=caAclAccessGroupDirection, caAclLabelIntfStatsTable=caAclLabelIntfStatsTable)
