#
# PySNMP MIB module ATSWTCH2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATSWTCH2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:14:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Unsigned32, MibIdentifier, IpAddress, Integer32, TimeTicks, Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Unsigned32", "MibIdentifier", "IpAddress", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
atiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atswitchMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10))
atswitchSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1))
atswitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 2))
atswitchPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 3))
atswitchVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 4))
atswitchEthernetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5))
atswitchEthPortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6))
atswitchFwdVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 7))
atswitchTrapAttrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 8))
atswitchBridgeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9))
atswitchStaticMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 10))
atswitchPortMacAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 12))
atswitchDebugMallocLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 13))
atswitchBrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1))
atswitchBrStp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2))
atswitchBrTp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3))
atswitchProductType = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("at-3726", 1), ("at-3714", 2), ("at-8124XL", 3), ("at-8118", 4), ("at-3726XL", 5), ("at-3714FXL", 6), ("at-3716XL", 7), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchProductType.setStatus('mandatory')
atswitchEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthernetPortCount.setStatus('mandatory')
atswitchReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-no-reset", 1), ("switch-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchReset.setStatus('mandatory')
atswitchMDA1Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rj45-mii", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchMDA1Type.setStatus('mandatory')
atswitchMDA2Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rj45-mii", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchMDA2Type.setStatus('mandatory')
atswitchDeviceFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDeviceFlowControl.setStatus('mandatory')
atswitchSwGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7))
atswitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8))
atswitchNMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9))
atswitchSwProduct = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchSwProduct.setStatus('mandatory')
atswitchSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchSwVersion.setStatus('mandatory')
atswitchCurrentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchCurrentIpAddress.setStatus('mandatory')
atswitchConfiguredIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredIpAddress.setStatus('mandatory')
atswitchConfiguredSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredSubnetMask.setStatus('mandatory')
atswitchConfiguredRouter = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredRouter.setStatus('mandatory')
atswitchIPAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("from-dhcp", 1), ("from-bootp", 2), ("from-psuedoip", 3), ("from-Omega", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchIPAddressStatus.setStatus('mandatory')
atswitchDNServer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDNServer.setStatus('mandatory')
atswitchDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDefaultDomainName.setStatus('mandatory')
atswitchNwMgrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1), )
if mibBuilder.loadTexts: atswitchNwMgrTable.setStatus('mandatory')
atswitchNwMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchNwMgrIndex"))
if mibBuilder.loadTexts: atswitchNwMgrEntry.setStatus('mandatory')
atswitchNwMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchNwMgrIndex.setStatus('mandatory')
atswitchNwMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchNwMgrIpAddr.setStatus('mandatory')
atswitchPortDisableOnSecurityViolation = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable-on-security-voilation", 1), ("suspend-on-double-address", 2), ("security-not-yet-initalized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortDisableOnSecurityViolation.setStatus('mandatory')
atswitchMirroringSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirroringSourcePort.setStatus('mandatory')
atswitchMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2), ("both", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirrorState.setStatus('mandatory')
atswitchMirroringDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirroringDestinationPort.setStatus('mandatory')
atswitchSecurityConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-with-learning-locked", 2), ("limited-enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchSecurityConfig.setStatus('mandatory')
atswitchSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("send-trap-only", 1), ("disable-port-only", 2), ("disable-port-and-send-trap", 3), ("do-nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchSecurityAction.setStatus('mandatory')
atswitchDebugAvailableBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugAvailableBytes.setStatus('mandatory')
atswitchTrunkConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchTrunkConfig.setStatus('mandatory')
atswitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1), )
if mibBuilder.loadTexts: atswitchPortTable.setStatus('mandatory')
atswitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPortNumber"))
if mibBuilder.loadTexts: atswitchPortEntry.setStatus('mandatory')
atswitchPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortNumber.setStatus('mandatory')
atswitchPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortName.setStatus('mandatory')
atswitchPortAutosenseOrHalfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portAutoSense", 1), ("forceHalfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortAutosenseOrHalfDuplex.setStatus('mandatory')
atswitchPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortLinkState.setStatus('mandatory')
atswitchPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortDuplexStatus.setStatus('mandatory')
atswitchPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenMBits", 1), ("hundredMBits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSpeed.setStatus('mandatory')
atswitchPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortState.setStatus('mandatory')
atswitchPortTransmitPacingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortTransmitPacingConfig.setStatus('mandatory')
atswitchPortSTPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPConfig.setStatus('mandatory')
atswitchPortBridgeid = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortBridgeid.setStatus('mandatory')
atswitchPortSTPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPCost.setStatus('mandatory')
atswitchPortSTPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPPriority.setStatus('mandatory')
atswitchPortSwitchingType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast-cut-through", 1), ("store-and-forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSwitchingType.setStatus('mandatory')
atswitchPortFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortFlowControlEnable.setStatus('deprecated')
atswitchPortSecurityNumberOfAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSecurityNumberOfAddresses.setStatus('mandatory')
atswitchBasicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1), )
if mibBuilder.loadTexts: atswitchBasicVlanTable.setStatus('mandatory')
atswitchBasicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBeVlanIndex"))
if mibBuilder.loadTexts: atswitchBasicVlanEntry.setStatus('mandatory')
atswitchBeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBeVlanIndex.setStatus('mandatory')
atswitchBeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanName.setStatus('mandatory')
atswitchBeVlanTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanTagId.setStatus('mandatory')
atswitchBeVlanPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanPortMask.setStatus('mandatory')
atswitchBeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("operational", 2), ("under-construction", 3), ("not-operational", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanRowStatus.setStatus('mandatory')
atswitchPort2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2), )
if mibBuilder.loadTexts: atswitchPort2VlanTable.setStatus('mandatory')
atswitchPort2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPvPortNumber"))
if mibBuilder.loadTexts: atswitchPort2VlanEntry.setStatus('mandatory')
atswitchPvPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPvPortNumber.setStatus('mandatory')
atswitchPvVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPvVlanName.setStatus('mandatory')
atswitchEthMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1))
atswitchEthErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2))
atswitchEthMonRxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonRxGoodFrames.setStatus('mandatory')
atswitchEthMonTxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxGoodFrames.setStatus('mandatory')
atswitchEthMonTxTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxTotalBytes.setStatus('mandatory')
atswitchEthMonTxDeferred = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxDeferred.setStatus('mandatory')
atswitchEthMonTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxCollisions.setStatus('mandatory')
atswitchEthErrorCRC = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorCRC.setStatus('mandatory')
atswitchEthErrorAlignment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorAlignment.setStatus('mandatory')
atswitchEthErrorRxBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorRxBadFrames.setStatus('mandatory')
atswitchEthErrorLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorLateCollisions.setStatus('mandatory')
atswitchEthErrorTxTotal = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorTxTotal.setStatus('mandatory')
atswitchEthPortMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1))
atswitchEthPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2))
atswitchEthPortMonTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1), )
if mibBuilder.loadTexts: atswitchEthPortMonTable.setStatus('mandatory')
atswitchEthPortMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchEthPortMonId"))
if mibBuilder.loadTexts: atswitchEthPortMonEntry.setStatus('mandatory')
atswitchEthPortMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortMonId.setStatus('mandatory')
atswitchEthPortMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortMonTxTotalBytes.setStatus('mandatory')
atswitchRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchRxGoodFrames.setStatus('mandatory')
atswitchTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxGoodFrames.setStatus('mandatory')
atswitchTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxBroadcastFrames.setStatus('mandatory')
atswitchTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxMulticastFrames.setStatus('mandatory')
atswitchAddrDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchAddrDuplicate.setStatus('mandatory')
atswitchAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchAddrMismatches.setStatus('mandatory')
atswitchRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchRxOverruns.setStatus('mandatory')
atswitchEthPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1), )
if mibBuilder.loadTexts: atswitchEthPortErrorTable.setStatus('mandatory')
atswitchEthPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchEthPortErrorId"))
if mibBuilder.loadTexts: atswitchEthPortErrorEntry.setStatus('mandatory')
atswitchEthPortErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorId.setStatus('mandatory')
atswitchEthPortErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorRxBadFrames.setStatus('mandatory')
atswitchEthPortErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorTxTotal.setStatus('mandatory')
atswitchFwdVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1), )
if mibBuilder.loadTexts: atswitchFwdVlanTable.setStatus('mandatory')
atswitchFwdVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchFwdVlanMACAddr"))
if mibBuilder.loadTexts: atswitchFwdVlanEntry.setStatus('mandatory')
atswitchFwdVlanMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanMACAddr.setStatus('mandatory')
atswitchFwdVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanVlanId.setStatus('mandatory')
atswitchFwdVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanAge.setStatus('mandatory')
atswitchFwdVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanStatus.setStatus('mandatory')
atswitchFwdVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanPort.setStatus('mandatory')
atswitchBrBaseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1), )
if mibBuilder.loadTexts: atswitchBrBaseTable.setStatus('mandatory')
atswitchBrBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrBaseLanId"))
if mibBuilder.loadTexts: atswitchBrBaseEntry.setStatus('mandatory')
atswitchBrBaseLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseLanId.setStatus('mandatory')
atswitchBrBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseBridgeAddress.setStatus('mandatory')
atswitchBrBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseNumPorts.setStatus('mandatory')
atswitchBrBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseType.setStatus('mandatory')
atswitchBrBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4), )
if mibBuilder.loadTexts: atswitchBrBasePortTable.setStatus('mandatory')
atswitchBrBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrBasePortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrBasePort"))
if mibBuilder.loadTexts: atswitchBrBasePortEntry.setStatus('mandatory')
atswitchBrBasePortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortLanId.setStatus('mandatory')
atswitchBrBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePort.setStatus('mandatory')
atswitchBrBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortIfIndex.setStatus('mandatory')
atswitchBrBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortCircuit.setStatus('mandatory')
atswitchBrBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortDelayExceededDiscards.setStatus('mandatory')
atswitchBrBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortMtuExceededDiscards.setStatus('mandatory')
atswitchBrStpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1), )
if mibBuilder.loadTexts: atswitchBrStpTable.setStatus('mandatory')
atswitchBrStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrStpLanId"))
if mibBuilder.loadTexts: atswitchBrStpEntry.setStatus('mandatory')
atswitchBrStpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpLanId.setStatus('mandatory')
atswitchBrStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpProtocolSpecification.setStatus('mandatory')
atswitchBrStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPriority.setStatus('mandatory')
atswitchBrStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpTimeSinceTopologyChange.setStatus('mandatory')
atswitchBrStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpTopChanges.setStatus('mandatory')
atswitchBrStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpDesignatedRoot.setStatus('mandatory')
atswitchBrStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpRootCost.setStatus('mandatory')
atswitchBrStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpRootPort.setStatus('mandatory')
atswitchBrStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpMaxAge.setStatus('mandatory')
atswitchBrStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpHelloTime.setStatus('mandatory')
atswitchBrStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpHoldTime.setStatus('mandatory')
atswitchBrStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpForwardDelay.setStatus('mandatory')
atswitchBrStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeMaxAge.setStatus('mandatory')
atswitchBrStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeHelloTime.setStatus('mandatory')
atswitchBrStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeForwardDelay.setStatus('mandatory')
atswitchBrStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15), )
if mibBuilder.loadTexts: atswitchBrStpPortTable.setStatus('mandatory')
atswitchBrStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrStpPortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrStpPort"))
if mibBuilder.loadTexts: atswitchBrStpPortEntry.setStatus('mandatory')
atswitchBrStpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortLanId.setStatus('mandatory')
atswitchBrStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPort.setStatus('mandatory')
atswitchBrStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortPriority.setStatus('mandatory')
atswitchBrStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortState.setStatus('mandatory')
atswitchBrStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortEnable.setStatus('mandatory')
atswitchBrStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortPathCost.setStatus('mandatory')
atswitchBrStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedRoot.setStatus('mandatory')
atswitchBrStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedCost.setStatus('mandatory')
atswitchBrStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedBridge.setStatus('mandatory')
atswitchBrStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedPort.setStatus('mandatory')
atswitchBrStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortForwardTransitions.setStatus('mandatory')
atswitchBrTpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1), )
if mibBuilder.loadTexts: atswitchBrTpTable.setStatus('mandatory')
atswitchBrTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpLanId"))
if mibBuilder.loadTexts: atswitchBrTpEntry.setStatus('mandatory')
atswitchBrTpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpLanId.setStatus('mandatory')
atswitchBrTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpLearnedEntryDiscards.setStatus('mandatory')
atswitchBrTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrTpAgingTime.setStatus('mandatory')
atswitchBrTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3), )
if mibBuilder.loadTexts: atswitchBrTpFdbTable.setStatus('mandatory')
atswitchBrTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpFdbLanId"), (0, "ATSWTCH2-MIB", "atswitchBrTpFdbAddress"))
if mibBuilder.loadTexts: atswitchBrTpFdbEntry.setStatus('mandatory')
atswitchBrTpFdbLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbLanId.setStatus('mandatory')
atswitchBrTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbAddress.setStatus('mandatory')
atswitchBrTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbPort.setStatus('mandatory')
atswitchBrTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbStatus.setStatus('mandatory')
atswitchBrTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4), )
if mibBuilder.loadTexts: atswitchBrTpPortTable.setStatus('mandatory')
atswitchBrTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpPortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrTpPort"))
if mibBuilder.loadTexts: atswitchBrTpPortEntry.setStatus('mandatory')
atswitchBrTpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortLanId.setStatus('mandatory')
atswitchBrTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPort.setStatus('mandatory')
atswitchBrTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortMaxInfo.setStatus('mandatory')
atswitchBrTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortInFrames.setStatus('mandatory')
atswitchBrTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortOutFrames.setStatus('mandatory')
atswitchBrTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortInDiscards.setStatus('mandatory')
atswitchStaticMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1), )
if mibBuilder.loadTexts: atswitchStaticMACTable.setStatus('mandatory')
atswitchStaticMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchStaticMACAddress"))
if mibBuilder.loadTexts: atswitchStaticMACEntry.setStatus('mandatory')
atswitchStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchStaticMACAddress.setStatus('mandatory')
atswitchStaticMACPortNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchStaticMACPortNumbers.setStatus('mandatory')
atswitchStaticMACVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchStaticMACVlan.setStatus('mandatory')
atswitchPortMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1), )
if mibBuilder.loadTexts: atswitchPortMACTable.setStatus('mandatory')
atswitchPortMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPortMACAddress"), (0, "ATSWTCH2-MIB", "atswitchPortMACPort"))
if mibBuilder.loadTexts: atswitchPortMACEntry.setStatus('mandatory')
atswitchPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortMACAddress.setStatus('mandatory')
atswitchPortMACPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortMACPort.setStatus('mandatory')
atswitchDebugMallocLogTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1), )
if mibBuilder.loadTexts: atswitchDebugMallocLogTable.setStatus('deprecated')
atswitchMallocLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchDebugMallocLogIndex"))
if mibBuilder.loadTexts: atswitchMallocLogEntry.setStatus('deprecated')
atswitchDebugMallocLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogIndex.setStatus('deprecated')
atswitchDebugMallocLogCaller = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogCaller.setStatus('deprecated')
atswitchDebugMallocLogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogAddress.setStatus('deprecated')
atswitchDuplicateMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: atswitchDuplicateMacAddress.setStatus('mandatory')
atswitchIntruderMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: atswitchIntruderMacAddress.setStatus('mandatory')
atswitchSecuredPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 3), Integer32())
if mibBuilder.loadTexts: atswitchSecuredPortNumber.setStatus('mandatory')
newRoot = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,101))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,102))
intruderTrap = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,105))
mibBuilder.exportSymbols("ATSWTCH2-MIB", atiProduct=atiProduct, atswitchEthErrorStats=atswitchEthErrorStats, atswitchBrTpLanId=atswitchBrTpLanId, atswitchBrTpPortOutFrames=atswitchBrTpPortOutFrames, atswitchEthernetStatsGroup=atswitchEthernetStatsGroup, atswitchDebugMallocLogIndex=atswitchDebugMallocLogIndex, atswitchEthMonTxGoodFrames=atswitchEthMonTxGoodFrames, intruderTrap=intruderTrap, atswitchStaticMACAddress=atswitchStaticMACAddress, atswitchPortConfigGroup=atswitchPortConfigGroup, atswitchBrBase=atswitchBrBase, atswitchMirroringSourcePort=atswitchMirroringSourcePort, atswitchEthErrorRxBadFrames=atswitchEthErrorRxBadFrames, atswitchEthMonTxDeferred=atswitchEthMonTxDeferred, atswitchEthPortStatsGroup=atswitchEthPortStatsGroup, atswitchDNServer=atswitchDNServer, atswitchTrunkConfig=atswitchTrunkConfig, atswitchPortSecurityNumberOfAddresses=atswitchPortSecurityNumberOfAddresses, atswitchMallocLogEntry=atswitchMallocLogEntry, atswitchBrStpHelloTime=atswitchBrStpHelloTime, atswitchPortMACEntry=atswitchPortMACEntry, atswitchPortTransmitPacingConfig=atswitchPortTransmitPacingConfig, atswitchPortState=atswitchPortState, atswitchCurrentIpAddress=atswitchCurrentIpAddress, atswitchProductType=atswitchProductType, atswitchBrStp=atswitchBrStp, atswitchBrBasePortMtuExceededDiscards=atswitchBrBasePortMtuExceededDiscards, atswitchReset=atswitchReset, atswitchEthPortErrorEntry=atswitchEthPortErrorEntry, atswitchBrBaseEntry=atswitchBrBaseEntry, atswitchPortLinkState=atswitchPortLinkState, atswitchIpGroup=atswitchIpGroup, atswitchPortEntry=atswitchPortEntry, atswitchEthPortMonStats=atswitchEthPortMonStats, atswitchBrBasePortLanId=atswitchBrBasePortLanId, atswitchBrStpHoldTime=atswitchBrStpHoldTime, atswitchBrTp=atswitchBrTp, atswitchMDA2Type=atswitchMDA2Type, atswitchRxOverruns=atswitchRxOverruns, atswitchTxMulticastFrames=atswitchTxMulticastFrames, BridgeId=BridgeId, atswitchEthPortMonTable=atswitchEthPortMonTable, atswitchBrStpBridgeHelloTime=atswitchBrStpBridgeHelloTime, atswitchPortAutosenseOrHalfDuplex=atswitchPortAutosenseOrHalfDuplex, mibObject=mibObject, atswitchFwdVlanEntry=atswitchFwdVlanEntry, atswitchBrTpPortEntry=atswitchBrTpPortEntry, atswitchBrStpTimeSinceTopologyChange=atswitchBrStpTimeSinceTopologyChange, atswitchPortSpeed=atswitchPortSpeed, atswitchPortNumber=atswitchPortNumber, atswitchEthMonTxTotalBytes=atswitchEthMonTxTotalBytes, atswitchPvPortNumber=atswitchPvPortNumber, atswitchDebugMallocLogTable=atswitchDebugMallocLogTable, atswitchBrStpForwardDelay=atswitchBrStpForwardDelay, atswitchTrapAttrGroup=atswitchTrapAttrGroup, atswitchBrStpPortDesignatedCost=atswitchBrStpPortDesignatedCost, atswitchIPAddressStatus=atswitchIPAddressStatus, atswitchConfiguredRouter=atswitchConfiguredRouter, atswitchEthPortError=atswitchEthPortError, atswitchBrTpFdbPort=atswitchBrTpFdbPort, atswitchNMGroup=atswitchNMGroup, atswitchPortBridgeid=atswitchPortBridgeid, atswitchBrTpPortMaxInfo=atswitchBrTpPortMaxInfo, atswitchBrStpPortPathCost=atswitchBrStpPortPathCost, atswitchBrBasePortIfIndex=atswitchBrBasePortIfIndex, atswitchMDA1Type=atswitchMDA1Type, atswitchNwMgrIpAddr=atswitchNwMgrIpAddr, atswitchBrStpDesignatedRoot=atswitchBrStpDesignatedRoot, atswitchStaticMACEntry=atswitchStaticMACEntry, newRoot=newRoot, atswitchBeVlanPortMask=atswitchBeVlanPortMask, atswitchBrBasePort=atswitchBrBasePort, atswitchBasicVlanEntry=atswitchBasicVlanEntry, atswitchBrTpLearnedEntryDiscards=atswitchBrTpLearnedEntryDiscards, atswitchBrTpEntry=atswitchBrTpEntry, atswitchPortSTPCost=atswitchPortSTPCost, atswitchMib=atswitchMib, atswitchBrTpPortTable=atswitchBrTpPortTable, atswitchEthPortMonTxTotalBytes=atswitchEthPortMonTxTotalBytes, atswitchDebugMallocLogAddress=atswitchDebugMallocLogAddress, Timeout=Timeout, atswitchEthErrorCRC=atswitchEthErrorCRC, atswitchBrStpPortEntry=atswitchBrStpPortEntry, atswitchPortFlowControlEnable=atswitchPortFlowControlEnable, atswitchBrBaseType=atswitchBrBaseType, atswitchBrTpTable=atswitchBrTpTable, atswitchBrStpPortLanId=atswitchBrStpPortLanId, atswitchStaticMACPortNumbers=atswitchStaticMACPortNumbers, atswitchPortMACTable=atswitchPortMACTable, atswitchBrTpFdbAddress=atswitchBrTpFdbAddress, atswitchDebugAvailableBytes=atswitchDebugAvailableBytes, atswitchBrTpFdbEntry=atswitchBrTpFdbEntry, atswitchEthernetPortCount=atswitchEthernetPortCount, atswitchPort2VlanEntry=atswitchPort2VlanEntry, atswitchEthMonStats=atswitchEthMonStats, atswitchEthErrorAlignment=atswitchEthErrorAlignment, atswitchEthErrorLateCollisions=atswitchEthErrorLateCollisions, alliedTelesyn=alliedTelesyn, atswitchBrBaseLanId=atswitchBrBaseLanId, atswitchFwdVlanAge=atswitchFwdVlanAge, atswitchFwdVlanStatus=atswitchFwdVlanStatus, atswitchPortSTPConfig=atswitchPortSTPConfig, atswitchBrTpPortInFrames=atswitchBrTpPortInFrames, atswitchBrStpTopChanges=atswitchBrStpTopChanges, atswitchDebugMallocLogGroup=atswitchDebugMallocLogGroup, atswitchMirroringDestinationPort=atswitchMirroringDestinationPort, atswitchSwProduct=atswitchSwProduct, atswitchFwdVlanGroup=atswitchFwdVlanGroup, atswitchDebugMallocLogCaller=atswitchDebugMallocLogCaller, atswitchStaticMACGroup=atswitchStaticMACGroup, atswitchBrStpPortTable=atswitchBrStpPortTable, atswitchBridgeMib=atswitchBridgeMib, atswitchPortMACAddress=atswitchPortMACAddress, atswitchPortMACPort=atswitchPortMACPort, atswitchVlanConfigGroup=atswitchVlanConfigGroup, atswitchNwMgrTable=atswitchNwMgrTable, atswitchStaticMACVlan=atswitchStaticMACVlan, atswitchBrStpPort=atswitchBrStpPort, atswitchSecurityAction=atswitchSecurityAction, atswitchPortDuplexStatus=atswitchPortDuplexStatus, atswitchPortMacAddrGroup=atswitchPortMacAddrGroup, atswitchPortDisableOnSecurityViolation=atswitchPortDisableOnSecurityViolation, atswitchMirrorState=atswitchMirrorState, atswitchFwdVlanVlanId=atswitchFwdVlanVlanId, atswitchBrStpPortDesignatedPort=atswitchBrStpPortDesignatedPort, atswitchEthPortErrorTxTotal=atswitchEthPortErrorTxTotal, atswitchBrTpFdbStatus=atswitchBrTpFdbStatus, atswitchBrBasePortDelayExceededDiscards=atswitchBrBasePortDelayExceededDiscards, atswitchBrBaseBridgeAddress=atswitchBrBaseBridgeAddress, atswitchBrTpFdbTable=atswitchBrTpFdbTable, atswitchNwMgrEntry=atswitchNwMgrEntry, topologyChange=topologyChange, atswitchBrStpPortState=atswitchBrStpPortState, atswitchBeVlanIndex=atswitchBeVlanIndex, atswitchBrStpBridgeMaxAge=atswitchBrStpBridgeMaxAge, atswitchBrStpLanId=atswitchBrStpLanId, atswitchStaticMACTable=atswitchStaticMACTable, atswitchBrStpPortForwardTransitions=atswitchBrStpPortForwardTransitions, atswitchBrStpPortPriority=atswitchBrStpPortPriority, atswitchBrBasePortCircuit=atswitchBrBasePortCircuit, atswitchRxGoodFrames=atswitchRxGoodFrames, atswitchFwdVlanPort=atswitchFwdVlanPort, atswitchBrTpPort=atswitchBrTpPort, atswitchBrTpFdbLanId=atswitchBrTpFdbLanId, MacAddress=MacAddress, atswitchEthErrorTxTotal=atswitchEthErrorTxTotal, atswitchConfigGroup=atswitchConfigGroup, atswitchBrStpPortDesignatedBridge=atswitchBrStpPortDesignatedBridge, atswitchAddrDuplicate=atswitchAddrDuplicate, atswitchSysGroup=atswitchSysGroup, atswitchPortName=atswitchPortName, atswitchSwGroup=atswitchSwGroup, atswitchEthMonRxGoodFrames=atswitchEthMonRxGoodFrames, atswitchBrStpRootCost=atswitchBrStpRootCost, atswitchTxGoodFrames=atswitchTxGoodFrames, atswitchAddrMismatches=atswitchAddrMismatches, atswitchBeVlanName=atswitchBeVlanName, atswitchBrStpProtocolSpecification=atswitchBrStpProtocolSpecification, atswitchSecurityConfig=atswitchSecurityConfig, atswitchNwMgrIndex=atswitchNwMgrIndex, atswitchEthMonTxCollisions=atswitchEthMonTxCollisions, atswitchBrStpPortEnable=atswitchBrStpPortEnable, atswitchPortTable=atswitchPortTable, atswitchSecuredPortNumber=atswitchSecuredPortNumber, atswitchPortSTPPriority=atswitchPortSTPPriority, atswitchEthPortMonId=atswitchEthPortMonId, atswitchBrStpPortDesignatedRoot=atswitchBrStpPortDesignatedRoot, atswitchBeVlanRowStatus=atswitchBeVlanRowStatus, atswitchBasicVlanTable=atswitchBasicVlanTable, atswitchBeVlanTagId=atswitchBeVlanTagId, atswitchBrBaseTable=atswitchBrBaseTable, atswitchFwdVlanTable=atswitchFwdVlanTable, atswitchBrTpPortInDiscards=atswitchBrTpPortInDiscards, atswitchBrStpMaxAge=atswitchBrStpMaxAge, atswitchPvVlanName=atswitchPvVlanName, atswitchBrTpAgingTime=atswitchBrTpAgingTime, atswitchPortSwitchingType=atswitchPortSwitchingType, atswitchDuplicateMacAddress=atswitchDuplicateMacAddress, atswitchBrBaseNumPorts=atswitchBrBaseNumPorts, atswitchTxBroadcastFrames=atswitchTxBroadcastFrames, atswitchBrStpTable=atswitchBrStpTable, atswitchSwVersion=atswitchSwVersion, atswitchBrStpEntry=atswitchBrStpEntry, atswitchBrTpPortLanId=atswitchBrTpPortLanId, atswitchDeviceFlowControl=atswitchDeviceFlowControl, atswitchEthPortErrorTable=atswitchEthPortErrorTable, atswitchConfiguredIpAddress=atswitchConfiguredIpAddress, atswitchEthPortMonEntry=atswitchEthPortMonEntry, atswitchFwdVlanMACAddr=atswitchFwdVlanMACAddr, atswitchBrBasePortTable=atswitchBrBasePortTable, atswitchDefaultDomainName=atswitchDefaultDomainName, atswitchBrStpPriority=atswitchBrStpPriority, atswitchEthPortErrorRxBadFrames=atswitchEthPortErrorRxBadFrames, atswitchEthPortErrorId=atswitchEthPortErrorId, atswitchBrBasePortEntry=atswitchBrBasePortEntry, atswitchPort2VlanTable=atswitchPort2VlanTable, atswitchBrStpBridgeForwardDelay=atswitchBrStpBridgeForwardDelay, atswitchConfiguredSubnetMask=atswitchConfiguredSubnetMask, atswitchBrStpRootPort=atswitchBrStpRootPort, atswitchIntruderMacAddress=atswitchIntruderMacAddress)
