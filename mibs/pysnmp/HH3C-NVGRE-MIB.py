#
# PySNMP MIB module HH3C-NVGRE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-NVGRE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, MibIdentifier, TimeTicks, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Integer32, Unsigned32, iso, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "MibIdentifier", "TimeTicks", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Integer32", "Unsigned32", "iso", "Bits", "ObjectIdentity")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
hh3cNvgre = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 156))
hh3cNvgre.setRevisions(('2014-03-11 09:00',))
if mibBuilder.loadTexts: hh3cNvgre.setLastUpdated('201403110900Z')
if mibBuilder.loadTexts: hh3cNvgre.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cNvgreObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1))
hh3cNvgreScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1))
hh3cNvgreNextNvgreID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreNextNvgreID.setStatus('current')
hh3cNvgreConfigured = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreConfigured.setStatus('current')
hh3cNvgreTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2), )
if mibBuilder.loadTexts: hh3cNvgreTable.setStatus('current')
hh3cNvgreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreID"))
if mibBuilder.loadTexts: hh3cNvgreEntry.setStatus('current')
hh3cNvgreID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cNvgreID.setStatus('current')
hh3cNvgreVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreVsiIndex.setStatus('current')
hh3cNvgreRemoteMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreRemoteMacCount.setStatus('current')
hh3cNvgreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreRowStatus.setStatus('current')
hh3cNvgreTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3), )
if mibBuilder.loadTexts: hh3cNvgreTunnelTable.setStatus('current')
hh3cNvgreTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreID"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreTunnelID"))
if mibBuilder.loadTexts: hh3cNvgreTunnelEntry.setStatus('current')
hh3cNvgreTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cNvgreTunnelID.setStatus('current')
hh3cNvgreTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreTunnelRowStatus.setStatus('current')
hh3cNvgreTunnelOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelOctets.setStatus('current')
hh3cNvgreTunnelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelPackets.setStatus('current')
hh3cNvgreTunnelBoundTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4), )
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundTable.setStatus('current')
hh3cNvgreTunnelBoundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreTunnelID"))
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundEntry.setStatus('current')
hh3cNvgreTunnelBoundNvgreNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundNvgreNum.setStatus('current')
hh3cNvgreMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5), )
if mibBuilder.loadTexts: hh3cNvgreMacTable.setStatus('current')
hh3cNvgreMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreVsiIndex"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreMacAddr"))
if mibBuilder.loadTexts: hh3cNvgreMacEntry.setStatus('current')
hh3cNvgreMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cNvgreMacAddr.setStatus('current')
hh3cNvgreMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreMacTunnelID.setStatus('current')
hh3cNvgreMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selfLearned", 1), ("staticConfigured", 2), ("protocolLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreMacType.setStatus('current')
hh3cNvgreStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6), )
if mibBuilder.loadTexts: hh3cNvgreStaticMacTable.setStatus('current')
hh3cNvgreStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreVsiIndex"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreStaticMacAddr"))
if mibBuilder.loadTexts: hh3cNvgreStaticMacEntry.setStatus('current')
hh3cNvgreStaticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cNvgreStaticMacAddr.setStatus('current')
hh3cNvgreStaticMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreStaticMacTunnelID.setStatus('current')
hh3cNvgreStaticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreStaticMacRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-NVGRE-MIB", hh3cNvgreScalarGroup=hh3cNvgreScalarGroup, hh3cNvgreTunnelBoundNvgreNum=hh3cNvgreTunnelBoundNvgreNum, hh3cNvgreConfigured=hh3cNvgreConfigured, hh3cNvgreTable=hh3cNvgreTable, hh3cNvgreMacTunnelID=hh3cNvgreMacTunnelID, hh3cNvgreRowStatus=hh3cNvgreRowStatus, hh3cNvgreTunnelBoundEntry=hh3cNvgreTunnelBoundEntry, hh3cNvgreObjects=hh3cNvgreObjects, hh3cNvgreTunnelEntry=hh3cNvgreTunnelEntry, hh3cNvgreStaticMacAddr=hh3cNvgreStaticMacAddr, hh3cNvgreStaticMacTunnelID=hh3cNvgreStaticMacTunnelID, hh3cNvgreTunnelTable=hh3cNvgreTunnelTable, hh3cNvgreNextNvgreID=hh3cNvgreNextNvgreID, PYSNMP_MODULE_ID=hh3cNvgre, hh3cNvgreTunnelID=hh3cNvgreTunnelID, hh3cNvgre=hh3cNvgre, hh3cNvgreRemoteMacCount=hh3cNvgreRemoteMacCount, hh3cNvgreTunnelOctets=hh3cNvgreTunnelOctets, hh3cNvgreMacEntry=hh3cNvgreMacEntry, hh3cNvgreID=hh3cNvgreID, hh3cNvgreTunnelPackets=hh3cNvgreTunnelPackets, hh3cNvgreVsiIndex=hh3cNvgreVsiIndex, hh3cNvgreMacType=hh3cNvgreMacType, hh3cNvgreTunnelBoundTable=hh3cNvgreTunnelBoundTable, hh3cNvgreMacTable=hh3cNvgreMacTable, hh3cNvgreStaticMacRowStatus=hh3cNvgreStaticMacRowStatus, hh3cNvgreTunnelRowStatus=hh3cNvgreTunnelRowStatus, hh3cNvgreStaticMacEntry=hh3cNvgreStaticMacEntry, hh3cNvgreMacAddr=hh3cNvgreMacAddr, hh3cNvgreEntry=hh3cNvgreEntry, hh3cNvgreStaticMacTable=hh3cNvgreStaticMacTable)
