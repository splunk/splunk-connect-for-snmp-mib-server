#
# PySNMP MIB module DE1500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DE1500-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, IpAddress, mgmt, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Gauge32, Bits, MibIdentifier, Unsigned32, internet, ModuleIdentity, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "mgmt", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Gauge32", "Bits", "MibIdentifier", "Unsigned32", "internet", "ModuleIdentity", "Counter32", "Integer32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mib = MibIdentifier((1, 3, 6, 1, 2, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
sysDescr = MibScalar((1, 3, 6, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('mandatory')
sysObjectID = MibScalar((1, 3, 6, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('mandatory')
sysUpTime = MibScalar((1, 3, 6, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpTime.setStatus('mandatory')
sysContact = MibScalar((1, 3, 6, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('mandatory')
sysName = MibScalar((1, 3, 6, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('mandatory')
sysLocation = MibScalar((1, 3, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLocation.setStatus('mandatory')
sysServices = MibScalar((1, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServices.setStatus('mandatory')
ifNumber = MibScalar((1, 3, 6, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
ifTable = MibTable((1, 3, 6, 1, 2, 1, 2, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTable.setStatus('mandatory')
ifEntry = MibTableRow((1, 3, 6, 1, 2, 1, 2, 2, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
ifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
ifDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
ifType = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("t1-carrier", 18), ("cept", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifType.setStatus('mandatory')
ifMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMtu.setStatus('mandatory')
ifSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpeed.setStatus('mandatory')
ifPhyAddress = MibScalar((1, 3, 6, 1, 2, 1, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhyAddress.setStatus('mandatory')
ifAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifAdminStatus.setStatus('mandatory')
ifOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOperStatus.setStatus('mandatory')
ifLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLastChange.setStatus('mandatory')
ifInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('mandatory')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('mandatory')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('mandatory')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('mandatory')
ifInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInErrors.setStatus('mandatory')
ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUnknownProtos.setStatus('mandatory')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('mandatory')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('mandatory')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('mandatory')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('mandatory')
ifOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutErrors.setStatus('mandatory')
ifOutQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutQLen.setStatus('mandatory')
ifSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpecific.setStatus('mandatory')
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gateway", 1), ("host", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwarding.setStatus('mandatory')
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultTTL.setStatus('mandatory')
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInReceives.setStatus('mandatory')
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInHdrErrors.setStatus('mandatory')
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInAddrErrors.setStatus('mandatory')
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwDatagrams.setStatus('mandatory')
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInUnknownProtos.setStatus('mandatory')
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDiscards.setStatus('mandatory')
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDelivers.setStatus('mandatory')
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRequests.setStatus('mandatory')
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutDiscards.setStatus('mandatory')
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutNoRoutes.setStatus('mandatory')
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmTimeout.setStatus('mandatory')
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmReqds.setStatus('mandatory')
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmOKs.setStatus('mandatory')
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmFails.setStatus('mandatory')
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragOKs.setStatus('mandatory')
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragFails.setStatus('mandatory')
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragCreates.setStatus('mandatory')
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInMsgs.setStatus('mandatory')
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInErrors.setStatus('mandatory')
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInDestUnreachs.setStatus('mandatory')
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimeExcds.setStatus('mandatory')
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInParmProbs.setStatus('mandatory')
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInSrcQuenchs.setStatus('mandatory')
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRedirects.setStatus('mandatory')
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchos.setStatus('mandatory')
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchoReps.setStatus('mandatory')
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestamps.setStatus('mandatory')
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestampReps.setStatus('mandatory')
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMasks.setStatus('mandatory')
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMaskReps.setStatus('mandatory')
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutMsgs.setStatus('mandatory')
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutErrors.setStatus('mandatory')
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutDestUnreachs.setStatus('mandatory')
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimeExcds.setStatus('mandatory')
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutParmProbs.setStatus('mandatory')
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setStatus('mandatory')
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRedirects.setStatus('mandatory')
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchos.setStatus('mandatory')
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchoReps.setStatus('mandatory')
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestamps.setStatus('mandatory')
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestampReps.setStatus('mandatory')
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMasks.setStatus('mandatory')
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setStatus('mandatory')
udpInDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInDatagrams.setStatus('mandatory')
udpNoPorts = MibScalar((1, 3, 6, 1, 2, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpNoPorts.setStatus('mandatory')
udpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInErrors.setStatus('mandatory')
udpOutDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpOutDatagrams.setStatus('mandatory')
udpTable = MibTable((1, 3, 6, 1, 2, 1, 7, 5), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpTable.setStatus('mandatory')
udpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 7, 5, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpEntry.setStatus('mandatory')
udpLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalAddress.setStatus('mandatory')
udpLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalPort.setStatus('mandatory')
snmpInPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInPkts.setStatus('mandatory')
snmpOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutPkts.setStatus('mandatory')
snmpInBadVersions = MibScalar((1, 3, 6, 1, 2, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadVersions.setStatus('mandatory')
snmpInBadCommunityNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityNames.setStatus('mandatory')
snmpInBadCommunityUses = MibScalar((1, 3, 6, 1, 2, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityUses.setStatus('mandatory')
snmpInASNParseErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInASNParseErrs.setStatus('mandatory')
snmpInBadTypes = MibScalar((1, 3, 6, 1, 2, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadTypes.setStatus('mandatory')
snmpInTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTooBigs.setStatus('mandatory')
snmpInNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInNoSuchNames.setStatus('mandatory')
snmpInBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadValues.setStatus('mandatory')
snmpInReadOnlys = MibScalar((1, 3, 6, 1, 2, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInReadOnlys.setStatus('mandatory')
snmpInGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGenErrs.setStatus('mandatory')
snmpInTotalReqVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalReqVars.setStatus('mandatory')
snmpInTotalSetVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalSetVars.setStatus('mandatory')
snmpInGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetRequests.setStatus('mandatory')
snmpInGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetNexts.setStatus('mandatory')
snmpInSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInSetRequests.setStatus('mandatory')
snmpInGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetResponses.setStatus('mandatory')
snmpInTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTraps.setStatus('mandatory')
snmpOutTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTooBigs.setStatus('mandatory')
snmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutNoSuchNames.setStatus('mandatory')
snmpOutBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutBadValues.setStatus('mandatory')
snmpOutReadOnlys = MibScalar((1, 3, 6, 1, 2, 1, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutReadOnlys.setStatus('mandatory')
snmpOutGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGenErrs.setStatus('mandatory')
snmpOutGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetRequests.setStatus('mandatory')
snmpOutGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetNexts.setStatus('mandatory')
snmpOutSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutSetRequests.setStatus('mandatory')
snmpOutGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetResponses.setStatus('mandatory')
snmpOutTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTraps.setStatus('mandatory')
snmpEnableAuthTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnableAuthTraps.setStatus('mandatory')
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
hubmib = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 2))
basicGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 2, 1))
monitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 2, 2))
addrTrackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 2, 3))
basicHubMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubMIBVersion.setStatus('mandatory')
basicHubVender = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubVender.setStatus('mandatory')
basicHubProduct = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubProduct.setStatus('mandatory')
basicHubVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubVersion.setStatus('mandatory')
basicHubHealthState = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("hubFailure", 3), ("groupFailure", 4), ("portFailure", 5), ("generalFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubHealthState.setStatus('mandatory')
basicHubHealthText = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubHealthText.setStatus('mandatory')
basicHubHealthData = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubHealthData.setStatus('mandatory')
basicHubReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHubReset.setStatus('mandatory')
basicHubSelfTest1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSelfTest1", 1), ("selfTest1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHubSelfTest1.setStatus('mandatory')
basicHubSelfTest2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSelfTest2", 1), ("selfTest2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHubSelfTest2.setStatus('mandatory')
basucHubIntrusion = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noIntrusion", 1), ("intrusion", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basucHubIntrusion.setStatus('mandatory')
basicHubClearStats = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearstatsistics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHubClearStats.setStatus('mandatory')
basicHubLed = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubLed.setStatus('mandatory')
basicHubNumofPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHubNumofPorts.setStatus('mandatory')
basicPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 2, 1, 15), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortTable.setStatus('mandatory')
basicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortEntry.setStatus('mandatory')
basicPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortID.setStatus('mandatory')
basicPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAdminState.setStatus('mandatory')
basicPortAutoPartState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoPartitioned", 1), ("notAutoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAutoPartState.setStatus('mandatory')
basicPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortName.setStatus('mandatory')
basicPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("tenBASET", 2), ("tenBASE2", 3), ("tenBASE5", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortType.setStatus('mandatory')
basicPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLink.setStatus('mandatory')
basicPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearportstats", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortClearStats.setStatus('mandatory')
monHubCollisions = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHubCollisions.setStatus('mandatory')
monHubBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHubBadFrames.setStatus('mandatory')
monHubReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHubReadableOctets.setStatus('mandatory')
monHubReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHubReadableFrames.setStatus('mandatory')
monHubLedFlag = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monHubLedFlag.setStatus('mandatory')
monHubUtilization = MibScalar((1, 3, 6, 1, 4, 1, 171, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("onePercentage", 1), ("twoPercentage", 2), ("fivePercentage", 3), ("tenPercentage", 4), ("fifteenPercentage", 5), ("twentyPercentage", 6), ("twenty-fivePercentage", 7), ("thirtyPercentage", 8), ("thirty-fivePercentage", 9), ("fortyPercentage", 10), ("fifty-fivePercentage", 11), ("finety-ninePercentage", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monHubUtilization.setStatus('mandatory')
monPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 2, 2, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortTable.setStatus('mandatory')
monPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortEntry.setStatus('mandatory')
monPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortID.setStatus('mandatory')
monPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortReadableFrames.setStatus('mandatory')
monPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortReadableOctets.setStatus('mandatory')
monPortFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortFcsErrors.setStatus('mandatory')
monPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortAlignmentErrors.setStatus('mandatory')
monPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortFrameTooLongs.setStatus('mandatory')
monPortFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortFrameTooShorts.setStatus('mandatory')
monPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortRunts.setStatus('mandatory')
monPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortCollisions.setStatus('mandatory')
monPortLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortLateCollisions.setStatus('mandatory')
monPortDataRateMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortDataRateMismatchs.setStatus('mandatory')
monPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortAutoPartitions.setStatus('mandatory')
monPortBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 2, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monPortBadFrames.setStatus('mandatory')
addPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 2, 3, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPortTable.setStatus('mandatory')
addPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 2, 3, 1, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPortEntry.setStatus('mandatory')
addPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPortID.setStatus('mandatory')
addPortLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addPortLastSourceAddress.setStatus('mandatory')
addPortSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addPortSourceAddrChanges.setStatus('mandatory')
addPortAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unauthorized", 1), ("authorized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addPortAuthorized.setStatus('mandatory')
mibBuilder.exportSymbols("DE1500-MIB", icmpOutMsgs=icmpOutMsgs, private=private, monPortFrameTooShorts=monPortFrameTooShorts, ifTable=ifTable, snmpInBadCommunityNames=snmpInBadCommunityNames, ipInReceives=ipInReceives, snmpInBadCommunityUses=snmpInBadCommunityUses, icmpOutAddrMaskReps=icmpOutAddrMaskReps, sysUpTime=sysUpTime, udpTable=udpTable, snmpOutGetNexts=snmpOutGetNexts, icmpOutEchos=icmpOutEchos, monitorGroup=monitorGroup, basicHubHealthText=basicHubHealthText, icmpInAddrMaskReps=icmpInAddrMaskReps, monHubCollisions=monHubCollisions, monHubReadableFrames=monHubReadableFrames, ipForwDatagrams=ipForwDatagrams, ifOutErrors=ifOutErrors, ipFragOKs=ipFragOKs, monPortEntry=monPortEntry, snmpInBadValues=snmpInBadValues, snmpInTotalSetVars=snmpInTotalSetVars, addrTrackGroup=addrTrackGroup, ipFragCreates=ipFragCreates, ifMtu=ifMtu, ifOutNUcastPkts=ifOutNUcastPkts, icmpInSrcQuenchs=icmpInSrcQuenchs, snmpOutNoSuchNames=snmpOutNoSuchNames, icmpInAddrMasks=icmpInAddrMasks, monPortCollisions=monPortCollisions, ifInDiscards=ifInDiscards, icmpInDestUnreachs=icmpInDestUnreachs, snmpOutGetResponses=snmpOutGetResponses, udpInDatagrams=udpInDatagrams, basicHubVender=basicHubVender, monHubBadFrames=monHubBadFrames, monPortReadableOctets=monPortReadableOctets, ipFragFails=ipFragFails, addPortSourceAddrChanges=addPortSourceAddrChanges, basicPortClearStats=basicPortClearStats, icmpInTimeExcds=icmpInTimeExcds, experimental=experimental, ifOperStatus=ifOperStatus, sysLocation=sysLocation, mib=mib, ifInUnknownProtos=ifInUnknownProtos, snmpInTraps=snmpInTraps, basicHubHealthState=basicHubHealthState, icmpOutSrcQuenchs=icmpOutSrcQuenchs, basicHubSelfTest1=basicHubSelfTest1, addPortTable=addPortTable, ifNumber=ifNumber, icmpInMsgs=icmpInMsgs, snmpOutPkts=snmpOutPkts, icmpOutTimeExcds=icmpOutTimeExcds, snmpInGetResponses=snmpInGetResponses, monPortID=monPortID, snmpInGenErrs=snmpInGenErrs, addPortAuthorized=addPortAuthorized, icmpOutRedirects=icmpOutRedirects, monPortAutoPartitions=monPortAutoPartitions, basicHubClearStats=basicHubClearStats, icmpInEchoReps=icmpInEchoReps, ifAdminStatus=ifAdminStatus, ifOutOctets=ifOutOctets, basicHubVersion=basicHubVersion, ipInAddrErrors=ipInAddrErrors, ipReasmTimeout=ipReasmTimeout, snmpOutBadValues=snmpOutBadValues, system=system, ifInErrors=ifInErrors, sysContact=sysContact, directory=directory, udpNoPorts=udpNoPorts, addPortID=addPortID, udpOutDatagrams=udpOutDatagrams, ifSpeed=ifSpeed, monPortLateCollisions=monPortLateCollisions, icmpOutEchoReps=icmpOutEchoReps, basicHubMIBVersion=basicHubMIBVersion, ifInNUcastPkts=ifInNUcastPkts, icmpInParmProbs=icmpInParmProbs, sysServices=sysServices, snmpOutTraps=snmpOutTraps, basicPortType=basicPortType, udp=udp, addPortLastSourceAddress=addPortLastSourceAddress, basicHubLed=basicHubLed, enterprises=enterprises, ifEntry=ifEntry, ipOutRequests=ipOutRequests, snmp=snmp, monPortFcsErrors=monPortFcsErrors, monHubUtilization=monHubUtilization, icmpInErrors=icmpInErrors, udpLocalPort=udpLocalPort, hubmib=hubmib, ipOutDiscards=ipOutDiscards, icmpOutDestUnreachs=icmpOutDestUnreachs, sysName=sysName, snmpInTotalReqVars=snmpInTotalReqVars, basicPortID=basicPortID, monPortTable=monPortTable, snmpInTooBigs=snmpInTooBigs, monPortDataRateMismatchs=monPortDataRateMismatchs, basicHubNumofPorts=basicHubNumofPorts, ipInUnknownProtos=ipInUnknownProtos, basicPortAutoPartState=basicPortAutoPartState, icmpInRedirects=icmpInRedirects, icmpOutTimestamps=icmpOutTimestamps, ipReasmFails=ipReasmFails, ifSpecific=ifSpecific, basicPortLink=basicPortLink, monPortReadableFrames=monPortReadableFrames, basicPortAdminState=basicPortAdminState, icmpInEchos=icmpInEchos, basicPortTable=basicPortTable, basucHubIntrusion=basucHubIntrusion, ip=ip, snmpInBadTypes=snmpInBadTypes, addPortEntry=addPortEntry, snmpInSetRequests=snmpInSetRequests, basicHubReset=basicHubReset, sysObjectID=sysObjectID, d_link=d_link, ifType=ifType, ifDescr=ifDescr, ipInHdrErrors=ipInHdrErrors, ipForwarding=ipForwarding, icmpOutErrors=icmpOutErrors, ifOutUcastPkts=ifOutUcastPkts, basicHubHealthData=basicHubHealthData, snmpOutGetRequests=snmpOutGetRequests, icmpInTimestampReps=icmpInTimestampReps, sysDescr=sysDescr, ifOutDiscards=ifOutDiscards, monHubReadableOctets=monHubReadableOctets, icmpOutAddrMasks=icmpOutAddrMasks, basicHubSelfTest2=basicHubSelfTest2, monPortBadFrames=monPortBadFrames, udpEntry=udpEntry, ipReasmReqds=ipReasmReqds, snmpOutSetRequests=snmpOutSetRequests, monPortFrameTooLongs=monPortFrameTooLongs, snmpInGetNexts=snmpInGetNexts, ifInOctets=ifInOctets, ipInDelivers=ipInDelivers, basicGroup=basicGroup, icmp=icmp, ifIndex=ifIndex, snmpInNoSuchNames=snmpInNoSuchNames, basicPortName=basicPortName, icmpOutParmProbs=icmpOutParmProbs, monPortRunts=monPortRunts, snmpInPkts=snmpInPkts, ipInDiscards=ipInDiscards, icmpOutTimestampReps=icmpOutTimestampReps, udpInErrors=udpInErrors, snmpEnableAuthTraps=snmpEnableAuthTraps, ifOutQLen=ifOutQLen, interfaces=interfaces, udpLocalAddress=udpLocalAddress, snmpInReadOnlys=snmpInReadOnlys, snmpInGetRequests=snmpInGetRequests, snmpInASNParseErrs=snmpInASNParseErrs, snmpOutGenErrs=snmpOutGenErrs, ipReasmOKs=ipReasmOKs, monPortAlignmentErrors=monPortAlignmentErrors, snmpOutTooBigs=snmpOutTooBigs, ipDefaultTTL=ipDefaultTTL, ifPhyAddress=ifPhyAddress, icmpInTimestamps=icmpInTimestamps, snmpInBadVersions=snmpInBadVersions, ifInUcastPkts=ifInUcastPkts, basicHubProduct=basicHubProduct, ifLastChange=ifLastChange, snmpOutReadOnlys=snmpOutReadOnlys, ipOutNoRoutes=ipOutNoRoutes, basicPortEntry=basicPortEntry, monHubLedFlag=monHubLedFlag)
