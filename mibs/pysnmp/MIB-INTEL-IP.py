#
# PySNMP MIB module MIB-INTEL-IP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIB-INTEL-IP
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, NotificationType, Gauge32, ModuleIdentity, Integer32, TimeTicks, Bits, Unsigned32, MibIdentifier, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "NotificationType", "Gauge32", "ModuleIdentity", "Integer32", "TimeTicks", "Bits", "Unsigned32", "MibIdentifier", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 38))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

rtIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 38, 1), )
if mibBuilder.loadTexts: rtIpRouteTable.setStatus('optional')
rtIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1), ).setIndexNames((0, "MIB-INTEL-IP", "rtIpRouteChassis"), (0, "MIB-INTEL-IP", "rtIpRouteModule"), (0, "MIB-INTEL-IP", "rtIpRouteInst"), (0, "MIB-INTEL-IP", "rtIpRouteDest"), (0, "MIB-INTEL-IP", "rtIpRouteMask"), (0, "MIB-INTEL-IP", "rtIpRouteIfIndex"), (0, "MIB-INTEL-IP", "rtIpRouteNextHop"))
if mibBuilder.loadTexts: rtIpRouteEntry.setStatus('optional')
rtIpRouteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteChassis.setStatus('optional')
rtIpRouteModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteModule.setStatus('optional')
rtIpRouteInst = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteInst.setStatus('optional')
rtIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteDest.setStatus('optional')
rtIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteMask.setStatus('optional')
rtIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteIfIndex.setStatus('optional')
rtIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteNextHop.setStatus('optional')
rtIpRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRoutePref.setStatus('optional')
rtIpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteMetric.setStatus('optional')
rtIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("ospf", 3), ("rip", 4), ("other", 5), ("all", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteProto.setStatus('optional')
rtIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRouteAge.setStatus('optional')
rtIpRteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 38, 2), )
if mibBuilder.loadTexts: rtIpRteTable.setStatus('optional')
rtIpRteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1), ).setIndexNames((0, "MIB-INTEL-IP", "rtIpRteChassis"), (0, "MIB-INTEL-IP", "rtIpRteModule"), (0, "MIB-INTEL-IP", "rtIpRteInst"), (0, "MIB-INTEL-IP", "rtIpRteDest"), (0, "MIB-INTEL-IP", "rtIpRteMask"), (0, "MIB-INTEL-IP", "rtIpRtePref"), (0, "MIB-INTEL-IP", "rtIpRteProto"), (0, "MIB-INTEL-IP", "rtIpRteIfIndex"), (0, "MIB-INTEL-IP", "rtIpRteNextHop"))
if mibBuilder.loadTexts: rtIpRteEntry.setStatus('optional')
rtIpRteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteChassis.setStatus('optional')
rtIpRteModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteModule.setStatus('optional')
rtIpRteInst = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteInst.setStatus('optional')
rtIpRteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteDest.setStatus('optional')
rtIpRteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteMask.setStatus('optional')
rtIpRtePref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRtePref.setStatus('optional')
rtIpRteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("ospf", 3), ("rip", 4), ("other", 5), ("all", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteProto.setStatus('optional')
rtIpRteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteIfIndex.setStatus('optional')
rtIpRteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteNextHop.setStatus('optional')
rtIpRteState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpRteState.setStatus('optional')
rtIpRteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIpRteAge.setStatus('optional')
rtIpRteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpRteMetric.setStatus('optional')
rtIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 38, 3), )
if mibBuilder.loadTexts: rtIpStaticRouteTable.setStatus('optional')
rtIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1), ).setIndexNames((0, "MIB-INTEL-IP", "rtIpStRtChassis"), (0, "MIB-INTEL-IP", "rtIpStRtModule"), (0, "MIB-INTEL-IP", "rtIpStRtInst"), (0, "MIB-INTEL-IP", "rtIpStRtDest"), (0, "MIB-INTEL-IP", "rtIpStRtMask"), (0, "MIB-INTEL-IP", "rtIpStRtPref"), (0, "MIB-INTEL-IP", "rtIpStRtIfIndex"), (0, "MIB-INTEL-IP", "rtIpStRtNextHop"))
if mibBuilder.loadTexts: rtIpStaticRouteEntry.setStatus('optional')
rtIpStRtChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtChassis.setStatus('optional')
rtIpStRtModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtModule.setStatus('optional')
rtIpStRtInst = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtInst.setStatus('optional')
rtIpStRtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtDest.setStatus('optional')
rtIpStRtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtMask.setStatus('optional')
rtIpStRtPref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtPref.setStatus('optional')
rtIpStRtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtIfIndex.setStatus('optional')
rtIpStRtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtNextHop.setStatus('optional')
rtIpStRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtMetric.setStatus('optional')
rtIpStRtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtStatus.setStatus('optional')
rtIpStRtState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 38, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIpStRtState.setStatus('optional')
mibBuilder.exportSymbols("MIB-INTEL-IP", rtIpRteMask=rtIpRteMask, rtIpRteInst=rtIpRteInst, rtIpRteDest=rtIpRteDest, rtIpRouteMetric=rtIpRouteMetric, rtIpRouteAge=rtIpRouteAge, rtIpRouteTable=rtIpRouteTable, rtIpStaticRouteTable=rtIpStaticRouteTable, rtIpStaticRouteEntry=rtIpStaticRouteEntry, rtIpRteNextHop=rtIpRteNextHop, rtIpRouteIfIndex=rtIpRouteIfIndex, rtIpStRtMask=rtIpStRtMask, rtIpRouteInst=rtIpRouteInst, rtIpRoutePref=rtIpRoutePref, rtIpStRtModule=rtIpStRtModule, RowStatus=RowStatus, rtIpRteTable=rtIpRteTable, rtIpRouteProto=rtIpRouteProto, rtIpStRtStatus=rtIpStRtStatus, rtIpRteMetric=rtIpRteMetric, rtIpRouteDest=rtIpRouteDest, rtIpRteState=rtIpRteState, rtIpStRtPref=rtIpStRtPref, rtIpStRtIfIndex=rtIpStRtIfIndex, rtIpStRtNextHop=rtIpStRtNextHop, rtIpRteModule=rtIpRteModule, rtIpStRtChassis=rtIpStRtChassis, rtIpRteChassis=rtIpRteChassis, rtIpRteIfIndex=rtIpRteIfIndex, rtIpRteProto=rtIpRteProto, rtIpStRtState=rtIpStRtState, rtIpStRtInst=rtIpStRtInst, rtIpRouteModule=rtIpRouteModule, rtIpRteAge=rtIpRteAge, rtIpRouteChassis=rtIpRouteChassis, rtIpRouteNextHop=rtIpRouteNextHop, rtIpRouteEntry=rtIpRouteEntry, rtIpStRtMetric=rtIpStRtMetric, rtIpRouteMask=rtIpRouteMask, rtIpRtePref=rtIpRtePref, ipr=ipr, rtIpRteEntry=rtIpRteEntry, rtIpStRtDest=rtIpStRtDest)
