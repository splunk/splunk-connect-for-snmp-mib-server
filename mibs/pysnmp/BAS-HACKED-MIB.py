#
# PySNMP MIB module BAS-HACKED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-HACKED-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
BasInterfaceId, BasCardClass, BasLogicalPortId, BasSlotId, basHackedInfo, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasInterfaceId", "BasCardClass", "BasLogicalPortId", "BasSlotId", "basHackedInfo", "BasChassisId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Gauge32, Unsigned32, ModuleIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, iso, Integer32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Gauge32", "Unsigned32", "ModuleIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "iso", "Integer32", "ObjectIdentity", "Counter32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
basHackedInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1))
if mibBuilder.loadTexts: basHackedInfoMib.setLastUpdated('9901180900Z')
if mibBuilder.loadTexts: basHackedInfoMib.setOrganization('Broadband Access Systems')
basHackedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1))
basHackedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1), )
if mibBuilder.loadTexts: basHackedInfoTable.setStatus('current')
basHackedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1), ).setIndexNames((0, "BAS-HACKED-MIB", "basHackedCardInfoChassis"), (0, "BAS-HACKED-MIB", "basHackedCardInfoSlot"), (0, "BAS-HACKED-MIB", "basHackedCardInfoIf"), (0, "BAS-HACKED-MIB", "basHackedCardInfoLPort"))
if mibBuilder.loadTexts: basHackedInfoEntry.setStatus('current')
basHackedCardInfoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basHackedCardInfoChassis.setStatus('current')
basHackedCardInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basHackedCardInfoSlot.setStatus('current')
basHackedCardInfoIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basHackedCardInfoIf.setStatus('current')
basHackedCardInfoLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basHackedCardInfoLPort.setStatus('current')
basHackedCardInfoChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedCardInfoChassisNumber.setStatus('current')
basHackedCardInfoClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 6), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedCardInfoClass.setStatus('current')
basHackedAgentConfigSave = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("save", 2), ("saving", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentConfigSave.setStatus('current')
basHackedAgentConfigSaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("passed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basHackedAgentConfigSaveStatus.setStatus('current')
basHackedBcmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedBcmIpAddress.setStatus('current')
basHackedCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedCardReset.setStatus('current')
basHackedAgentSharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentSharedKey.setStatus('current')
basHackedAgentUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentUdpPort.setStatus('current')
basHackedAgentTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedAgentTcpPort.setStatus('current')
basHackedCardResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 1000, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basHackedCardResetState.setStatus('current')
mibBuilder.exportSymbols("BAS-HACKED-MIB", basHackedAgentTcpPort=basHackedAgentTcpPort, basHackedBcmIpAddress=basHackedBcmIpAddress, basHackedCardInfoSlot=basHackedCardInfoSlot, basHackedCardResetState=basHackedCardResetState, PYSNMP_MODULE_ID=basHackedInfoMib, basHackedObjects=basHackedObjects, basHackedInfoEntry=basHackedInfoEntry, basHackedCardReset=basHackedCardReset, basHackedCardInfoChassis=basHackedCardInfoChassis, basHackedAgentUdpPort=basHackedAgentUdpPort, basHackedAgentConfigSaveStatus=basHackedAgentConfigSaveStatus, basHackedCardInfoClass=basHackedCardInfoClass, basHackedAgentConfigSave=basHackedAgentConfigSave, basHackedInfoTable=basHackedInfoTable, basHackedAgentSharedKey=basHackedAgentSharedKey, basHackedInfoMib=basHackedInfoMib, basHackedCardInfoIf=basHackedCardInfoIf, basHackedCardInfoLPort=basHackedCardInfoLPort, basHackedCardInfoChassisNumber=basHackedCardInfoChassisNumber)
