#
# PySNMP MIB module ISILON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISILON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, enterprises, Integer32, ModuleIdentity, Bits, Counter64, IpAddress, NotificationType, Unsigned32, TimeTicks, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "enterprises", "Integer32", "ModuleIdentity", "Bits", "Counter64", "IpAddress", "NotificationType", "Unsigned32", "TimeTicks", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
isilon = ModuleIdentity((1, 3, 6, 1, 4, 1, 12124))
isilon.setRevisions(('2015-09-23 00:00', '2015-04-07 00:00', '2010-10-21 00:00', '2010-06-29 00:00', '2009-12-15 00:00', '2009-11-10 00:00', '2009-05-29 00:00',))
if mibBuilder.loadTexts: isilon.setLastUpdated('201509230000Z')
if mibBuilder.loadTexts: isilon.setOrganization('Isilon Systems LLC')
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1))
node = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2))
local = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 4))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5))
clusterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 1))
clusterPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 2))
ifsFilesystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 3))
licenses = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 5))
quotas = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 12))
snapshots = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 13))
clusterName = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('current')
clusterHealth = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("attn", 1), ("down", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterHealth.setStatus('current')
clusterGUID = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterGUID.setStatus('current')
nodeCount = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCount.setStatus('current')
configuredNodes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configuredNodes.setStatus('current')
onlineNodes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onlineNodes.setStatus('current')
offlineNodes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: offlineNodes.setStatus('current')
clusterIfsPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 2, 1))
clusterIfsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIfsInBytes.setStatus('current')
clusterIfsInBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIfsInBitsPerSecond.setStatus('current')
clusterIfsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIfsOutBytes.setStatus('current')
clusterIfsOutBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterIfsOutBitsPerSecond.setStatus('current')
clusterNetworkPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 2, 2))
clusterNetworkInBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNetworkInBytes.setStatus('obsolete')
clusterNetworkInBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNetworkInBitsPerSecond.setStatus('current')
clusterNetworkOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 2, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNetworkOutBytes.setStatus('obsolete')
clusterNetworkOutBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 2, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNetworkOutBitsPerSecond.setStatus('current')
clusterCPUPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3))
clusterCPUUser = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCPUUser.setStatus('current')
clusterCPUNice = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCPUNice.setStatus('current')
clusterCPUSystem = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCPUSystem.setStatus('current')
clusterCPUInterrupt = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCPUInterrupt.setStatus('current')
clusterCPUIdlePct = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 2, 3, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCPUIdlePct.setStatus('current')
ifsTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifsTotalBytes.setStatus('current')
ifsUsedBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifsUsedBytes.setStatus('current')
ifsAvailableBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifsAvailableBytes.setStatus('current')
ifsFreeBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifsFreeBytes.setStatus('current')
accessTimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessTimeEnabled.setStatus('current')
accessTimeGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessTimeGracePeriod.setStatus('current')
licenseTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1), )
if mibBuilder.loadTexts: licenseTable.setStatus('current')
licenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1, 1), ).setIndexNames((0, "ISILON-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('current')
licenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: licenseIndex.setStatus('current')
licenseModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseModuleName.setStatus('current')
licenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0, 1))).clone(namedValues=NamedValues(("inactive", -2), ("expired", -1), ("activated", 0), ("evaluation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseStatus.setStatus('current')
licenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationDate.setStatus('current')
quotaTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1), )
if mibBuilder.loadTexts: quotaTable.setStatus('current')
quotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1), ).setIndexNames((0, "ISILON-MIB", "quotaDomainID"))
if mibBuilder.loadTexts: quotaEntry.setStatus('current')
quotaDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48))
if mibBuilder.loadTexts: quotaDomainID.setStatus('current')
quotaType = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("defaultUser", 0), ("user", 1), ("defaultGroup", 2), ("group", 3), ("directory", 4), ("special", 5), ("max", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaType.setStatus('current')
quotaID = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaID.setStatus('current')
quotaIncludesSnapshotUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaIncludesSnapshotUsage.setStatus('current')
quotaPath = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaPath.setStatus('current')
quotaHardThresholdDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaHardThresholdDefined.setStatus('current')
quotaHardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaHardThreshold.setStatus('current')
quotaSoftThresholdDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaSoftThresholdDefined.setStatus('current')
quotaSoftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaSoftThreshold.setStatus('current')
quotaAdvisoryThresholdDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaAdvisoryThresholdDefined.setStatus('current')
quotaAdvisoryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaAdvisoryThreshold.setStatus('current')
quotaGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaGracePeriod.setStatus('current')
quotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaUsage.setStatus('current')
quotaUsageWithOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaUsageWithOverhead.setStatus('current')
quotaInodeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 15), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInodeUsage.setStatus('current')
quotaIncludesOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaIncludesOverhead.setStatus('current')
snapshotSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1))
snapshotScheduledCreateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduledCreateEnabled.setStatus('current')
snapshotScheduledDeleteEnabled = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduledDeleteEnabled.setStatus('current')
snapshotReservedPct = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotReservedPct.setStatus('current')
snapshotRootVisibilityNFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootVisibilityNFS.setStatus('current')
snapshotRootAccessNFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootAccessNFS.setStatus('current')
snapshotSubdirAccessNFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSubdirAccessNFS.setStatus('current')
snapshotRootVisibilityCIFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootVisibilityCIFS.setStatus('current')
snapshotRootAccessCIFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootAccessCIFS.setStatus('current')
snapshotSubdirAccessCIFS = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSubdirAccessCIFS.setStatus('current')
snapshotRootVisibilityLocal = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootVisibilityLocal.setStatus('current')
snapshotRootAccessLocal = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotRootAccessLocal.setStatus('current')
snapshotSubdirAccessLocal = MibScalar((1, 3, 6, 1, 4, 1, 12124, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSubdirAccessLocal.setStatus('current')
snapshotScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2), )
if mibBuilder.loadTexts: snapshotScheduleTable.setStatus('current')
snapshotScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1), ).setIndexNames((0, "ISILON-MIB", "snapshotScheduleIndex"))
if mibBuilder.loadTexts: snapshotScheduleEntry.setStatus('current')
snapshotScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleIndex.setStatus('current')
snapshotScheduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleName.setStatus('current')
snapshotScheduleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleAlias.setStatus('current')
snapshotScheduleNamingPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleNamingPattern.setStatus('current')
snapshotScheduleSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleSchedule.setStatus('current')
snapshotScheduleExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotScheduleExpiration.setStatus('current')
snapshotSchedulePath = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSchedulePath.setStatus('current')
snapshotTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3), )
if mibBuilder.loadTexts: snapshotTable.setStatus('current')
snapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1), ).setIndexNames((0, "ISILON-MIB", "snapshotIndex"))
if mibBuilder.loadTexts: snapshotEntry.setStatus('current')
snapshotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: snapshotIndex.setStatus('current')
snapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotName.setStatus('current')
snapshotCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotCreated.setStatus('current')
snapshotExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotExpires.setStatus('current')
snapshotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotSize.setStatus('current')
snapshotPath = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotPath.setStatus('current')
snapshotAliasFor = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotAliasFor.setStatus('current')
snapshotLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotLocked.setStatus('current')
nodeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2, 1))
nodePerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2, 2))
nodeName = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('current')
nodeHealth = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("attn", 1), ("down", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHealth.setStatus('current')
nodeType = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("storage", 0), ("accelerator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeType.setStatus('current')
readOnly = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readOnly.setStatus('current')
nodeIfsPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2, 2, 1))
nodeIfsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfsInBytes.setStatus('current')
nodeIfsInBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfsInBitsPerSecond.setStatus('current')
nodeIfsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfsOutBytes.setStatus('current')
nodeIfsOutBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIfsOutBitsPerSecond.setStatus('current')
nodeNetworkPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2, 2, 2))
nodeNetworkInBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNetworkInBytes.setStatus('obsolete')
nodeNetworkInBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNetworkInBitsPerSecond.setStatus('current')
nodeNetworkOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 2, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNetworkOutBytes.setStatus('obsolete')
nodeNetworkOutBitsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 2, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNetworkOutBitsPerSecond.setStatus('current')
nodeCPUPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3))
nodeCPUUser = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCPUUser.setStatus('current')
nodeCPUNice = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCPUNice.setStatus('current')
nodeCPUSystem = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCPUSystem.setStatus('current')
nodeCPUInterrupt = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCPUInterrupt.setStatus('current')
nodeCPUIdle = MibScalar((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCPUIdle.setStatus('current')
nodeCPUPerfTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10), )
if mibBuilder.loadTexts: nodeCPUPerfTable.setStatus('current')
nodeCPUPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1), ).setIndexNames((0, "ISILON-MIB", "nodePerCPUID"))
if mibBuilder.loadTexts: nodeCPUPerfEntry.setStatus('current')
nodePerCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePerCPUUser.setStatus('current')
nodePerCPUNice = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePerCPUNice.setStatus('current')
nodePerCPUSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePerCPUSystem.setStatus('current')
nodePerCPUInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePerCPUInterrupt.setStatus('current')
nodePerCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePerCPUIdle.setStatus('current')
nodePerCPUID = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: nodePerCPUID.setStatus('current')
nodeProtocolPerfTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10), )
if mibBuilder.loadTexts: nodeProtocolPerfTable.setStatus('current')
nodeProtocolPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1), ).setIndexNames((1, "ISILON-MIB", "protocolName"))
if mibBuilder.loadTexts: nodeProtocolPerfEntry.setStatus('current')
protocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolName.setStatus('current')
protocolOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolOpCount.setStatus('current')
protocolOpsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolOpsPerSecond.setStatus('current')
inMinBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inMinBytes.setStatus('current')
inMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inMaxBytes.setStatus('current')
inAvgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inAvgBytes.setStatus('current')
inStdDevBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inStdDevBytes.setStatus('current')
inBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inBitsPerSecond.setStatus('current')
outMinBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outMinBytes.setStatus('current')
outMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outMaxBytes.setStatus('current')
outAvgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outAvgBytes.setStatus('current')
outStdDevBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outStdDevBytes.setStatus('current')
outBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outBitsPerSecond.setStatus('current')
latencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latencyMin.setStatus('current')
latencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latencyMax.setStatus('current')
latencyAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latencyAverage.setStatus('current')
latencyStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 10, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latencyStdDev.setStatus('current')
diskPerfTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52), )
if mibBuilder.loadTexts: diskPerfTable.setStatus('current')
diskPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1), ).setIndexNames((0, "ISILON-MIB", "diskPerfBay"))
if mibBuilder.loadTexts: diskPerfEntry.setStatus('current')
diskPerfBay = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerfBay.setStatus('current')
diskPerfDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerfDeviceName.setStatus('current')
diskPerfOpsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerfOpsPerSecond.setStatus('current')
diskPerfInBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerfInBitsPerSecond.setStatus('current')
diskPerfOutBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 2, 52, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPerfOutBitsPerSecond.setStatus('current')
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 51), )
if mibBuilder.loadTexts: chassisTable.setStatus('current')
chassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1), ).setIndexNames((0, "ISILON-MIB", "chassisNumber"))
if mibBuilder.loadTexts: chassisEntry.setStatus('current')
chassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNumber.setStatus('current')
chassisConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisConfigNumber.setStatus('current')
chassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('current')
chassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModel.setStatus('current')
chassisUnitIDLEDOn = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 51, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("na", -1), ("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisUnitIDLEDOn.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 52), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1), ).setIndexNames((0, "ISILON-MIB", "diskBay"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
diskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskBay.setStatus('current')
diskLogicalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLogicalNumber.setStatus('current')
diskChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskChassisNumber.setStatus('current')
diskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDeviceName.setStatus('current')
diskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatus.setStatus('current')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('current')
diskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSerialNumber.setStatus('current')
diskFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFirmwareVersion.setStatus('current')
diskSizeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 52, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSizeBytes.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 53), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 53, 1), ).setIndexNames((0, "ISILON-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 53, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('current')
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 53, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('current')
fanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 53, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDescription.setStatus('current')
fanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 53, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('current')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 54), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 54, 1), ).setIndexNames((0, "ISILON-MIB", "tempSensorNumber"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
tempSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 54, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorNumber.setStatus('current')
tempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 54, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorName.setStatus('current')
tempSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 54, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorDescription.setStatus('current')
tempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 54, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorValue.setStatus('current')
powerSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12124, 2, 55), )
if mibBuilder.loadTexts: powerSensorTable.setStatus('current')
powerSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12124, 2, 55, 1), ).setIndexNames((0, "ISILON-MIB", "powerSensorNumber"))
if mibBuilder.loadTexts: powerSensorEntry.setStatus('current')
powerSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorNumber.setStatus('current')
powerSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 55, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorName.setStatus('current')
powerSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 55, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorDescription.setStatus('current')
powerSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12124, 2, 55, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSensorValue.setStatus('current')
credentialBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 4, 1))
clusterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5, 1))
nodeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5, 2))
clusterStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 1)).setObjects(("ISILON-MIB", "clusterName"), ("ISILON-MIB", "clusterHealth"), ("ISILON-MIB", "clusterGUID"), ("ISILON-MIB", "nodeCount"), ("ISILON-MIB", "configuredNodes"), ("ISILON-MIB", "onlineNodes"), ("ISILON-MIB", "offlineNodes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clusterStatusGroup = clusterStatusGroup.setStatus('current')
clusterPerformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5, 1, 2))
clusterIfsPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 2, 1)).setObjects(("ISILON-MIB", "clusterIfsInBytes"), ("ISILON-MIB", "clusterIfsInBitsPerSecond"), ("ISILON-MIB", "clusterIfsOutBytes"), ("ISILON-MIB", "clusterIfsOutBitsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clusterIfsPerfGroup = clusterIfsPerfGroup.setStatus('current')
clusterNetworkPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 2, 2)).setObjects(("ISILON-MIB", "clusterNetworkInBytes"), ("ISILON-MIB", "clusterNetworkInBitsPerSecond"), ("ISILON-MIB", "clusterNetworkOutBytes"), ("ISILON-MIB", "clusterNetworkOutBitsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clusterNetworkPerfGroup = clusterNetworkPerfGroup.setStatus('current')
clusterCPUPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 2, 3)).setObjects(("ISILON-MIB", "clusterCPUUser"), ("ISILON-MIB", "clusterCPUNice"), ("ISILON-MIB", "clusterCPUSystem"), ("ISILON-MIB", "clusterCPUInterrupt"), ("ISILON-MIB", "clusterCPUIdlePct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clusterCPUPerfGroup = clusterCPUPerfGroup.setStatus('current')
ifsFilesystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 3)).setObjects(("ISILON-MIB", "ifsTotalBytes"), ("ISILON-MIB", "ifsUsedBytes"), ("ISILON-MIB", "ifsAvailableBytes"), ("ISILON-MIB", "ifsFreeBytes"), ("ISILON-MIB", "accessTimeEnabled"), ("ISILON-MIB", "accessTimeGracePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ifsFilesystemGroup = ifsFilesystemGroup.setStatus('current')
licensesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 5)).setObjects(("ISILON-MIB", "licenseModuleName"), ("ISILON-MIB", "licenseStatus"), ("ISILON-MIB", "licenseExpirationDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licensesGroup = licensesGroup.setStatus('current')
quotasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 12)).setObjects(("ISILON-MIB", "quotaType"), ("ISILON-MIB", "quotaID"), ("ISILON-MIB", "quotaIncludesSnapshotUsage"), ("ISILON-MIB", "quotaPath"), ("ISILON-MIB", "quotaHardThresholdDefined"), ("ISILON-MIB", "quotaHardThreshold"), ("ISILON-MIB", "quotaSoftThresholdDefined"), ("ISILON-MIB", "quotaSoftThreshold"), ("ISILON-MIB", "quotaAdvisoryThresholdDefined"), ("ISILON-MIB", "quotaAdvisoryThreshold"), ("ISILON-MIB", "quotaGracePeriod"), ("ISILON-MIB", "quotaUsage"), ("ISILON-MIB", "quotaUsageWithOverhead"), ("ISILON-MIB", "quotaInodeUsage"), ("ISILON-MIB", "quotaIncludesOverhead"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    quotasGroup = quotasGroup.setStatus('current')
snapshotsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5, 1, 13))
snapshotSettingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 13, 1)).setObjects(("ISILON-MIB", "snapshotScheduledCreateEnabled"), ("ISILON-MIB", "snapshotScheduledDeleteEnabled"), ("ISILON-MIB", "snapshotReservedPct"), ("ISILON-MIB", "snapshotRootVisibilityNFS"), ("ISILON-MIB", "snapshotRootAccessNFS"), ("ISILON-MIB", "snapshotSubdirAccessNFS"), ("ISILON-MIB", "snapshotRootVisibilityCIFS"), ("ISILON-MIB", "snapshotRootAccessCIFS"), ("ISILON-MIB", "snapshotSubdirAccessCIFS"), ("ISILON-MIB", "snapshotRootVisibilityLocal"), ("ISILON-MIB", "snapshotRootAccessLocal"), ("ISILON-MIB", "snapshotSubdirAccessLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snapshotSettingsGroup = snapshotSettingsGroup.setStatus('current')
snapshotScheduleTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 13, 2)).setObjects(("ISILON-MIB", "snapshotScheduleIndex"), ("ISILON-MIB", "snapshotScheduleName"), ("ISILON-MIB", "snapshotScheduleAlias"), ("ISILON-MIB", "snapshotScheduleNamingPattern"), ("ISILON-MIB", "snapshotScheduleSchedule"), ("ISILON-MIB", "snapshotScheduleExpiration"), ("ISILON-MIB", "snapshotSchedulePath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snapshotScheduleTableGroup = snapshotScheduleTableGroup.setStatus('current')
snapshotTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 1, 13, 3)).setObjects(("ISILON-MIB", "snapshotName"), ("ISILON-MIB", "snapshotCreated"), ("ISILON-MIB", "snapshotExpires"), ("ISILON-MIB", "snapshotSize"), ("ISILON-MIB", "snapshotPath"), ("ISILON-MIB", "snapshotAliasFor"), ("ISILON-MIB", "snapshotLocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snapshotTableGroup = snapshotTableGroup.setStatus('current')
nodeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 1)).setObjects(("ISILON-MIB", "nodeName"), ("ISILON-MIB", "nodeHealth"), ("ISILON-MIB", "nodeType"), ("ISILON-MIB", "readOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeStatusGroup = nodeStatusGroup.setStatus('current')
nodePerformanceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2))
nodeIfsPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2, 1)).setObjects(("ISILON-MIB", "nodeIfsInBytes"), ("ISILON-MIB", "nodeIfsInBitsPerSecond"), ("ISILON-MIB", "nodeIfsOutBytes"), ("ISILON-MIB", "nodeIfsOutBitsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeIfsPerfGroup = nodeIfsPerfGroup.setStatus('current')
nodeNetworkPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2, 2)).setObjects(("ISILON-MIB", "nodeNetworkInBytes"), ("ISILON-MIB", "nodeNetworkInBitsPerSecond"), ("ISILON-MIB", "nodeNetworkOutBytes"), ("ISILON-MIB", "nodeNetworkOutBitsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeNetworkPerfGroup = nodeNetworkPerfGroup.setStatus('current')
nodeCPUPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2, 3)).setObjects(("ISILON-MIB", "nodeCPUUser"), ("ISILON-MIB", "nodeCPUNice"), ("ISILON-MIB", "nodeCPUSystem"), ("ISILON-MIB", "nodeCPUInterrupt"), ("ISILON-MIB", "nodeCPUIdle"), ("ISILON-MIB", "nodePerCPUUser"), ("ISILON-MIB", "nodePerCPUNice"), ("ISILON-MIB", "nodePerCPUSystem"), ("ISILON-MIB", "nodePerCPUInterrupt"), ("ISILON-MIB", "nodePerCPUIdle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeCPUPerfGroup = nodeCPUPerfGroup.setStatus('current')
nodeProtocolPerfTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2, 10)).setObjects(("ISILON-MIB", "protocolName"), ("ISILON-MIB", "protocolOpCount"), ("ISILON-MIB", "protocolOpsPerSecond"), ("ISILON-MIB", "inMinBytes"), ("ISILON-MIB", "inMaxBytes"), ("ISILON-MIB", "inAvgBytes"), ("ISILON-MIB", "inStdDevBytes"), ("ISILON-MIB", "inBitsPerSecond"), ("ISILON-MIB", "outMinBytes"), ("ISILON-MIB", "outMaxBytes"), ("ISILON-MIB", "outAvgBytes"), ("ISILON-MIB", "outStdDevBytes"), ("ISILON-MIB", "outBitsPerSecond"), ("ISILON-MIB", "latencyMin"), ("ISILON-MIB", "latencyMax"), ("ISILON-MIB", "latencyAverage"), ("ISILON-MIB", "latencyStdDev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeProtocolPerfTableGroup = nodeProtocolPerfTableGroup.setStatus('current')
diskPerfTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 2, 52)).setObjects(("ISILON-MIB", "diskPerfBay"), ("ISILON-MIB", "diskPerfDeviceName"), ("ISILON-MIB", "diskPerfOpsPerSecond"), ("ISILON-MIB", "diskPerfInBitsPerSecond"), ("ISILON-MIB", "diskPerfOutBitsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskPerfTableGroup = diskPerfTableGroup.setStatus('current')
chassisTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 51)).setObjects(("ISILON-MIB", "chassisNumber"), ("ISILON-MIB", "chassisConfigNumber"), ("ISILON-MIB", "chassisSerialNumber"), ("ISILON-MIB", "chassisModel"), ("ISILON-MIB", "chassisUnitIDLEDOn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisTableGroup = chassisTableGroup.setStatus('current')
diskTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 52)).setObjects(("ISILON-MIB", "diskBay"), ("ISILON-MIB", "diskLogicalNumber"), ("ISILON-MIB", "diskChassisNumber"), ("ISILON-MIB", "diskDeviceName"), ("ISILON-MIB", "diskStatus"), ("ISILON-MIB", "diskModel"), ("ISILON-MIB", "diskSerialNumber"), ("ISILON-MIB", "diskFirmwareVersion"), ("ISILON-MIB", "diskSizeBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diskTableGroup = diskTableGroup.setStatus('current')
fanTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 53)).setObjects(("ISILON-MIB", "fanNumber"), ("ISILON-MIB", "fanName"), ("ISILON-MIB", "fanDescription"), ("ISILON-MIB", "fanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fanTableGroup = fanTableGroup.setStatus('current')
tempSensorTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 54)).setObjects(("ISILON-MIB", "tempSensorNumber"), ("ISILON-MIB", "tempSensorName"), ("ISILON-MIB", "tempSensorDescription"), ("ISILON-MIB", "tempSensorValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tempSensorTableGroup = tempSensorTableGroup.setStatus('current')
powerSensorTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12124, 5, 2, 55)).setObjects(("ISILON-MIB", "powerSensorNumber"), ("ISILON-MIB", "powerSensorName"), ("ISILON-MIB", "powerSensorDescription"), ("ISILON-MIB", "powerSensorValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerSensorTableGroup = powerSensorTableGroup.setStatus('current')
isilonCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12124, 5, 10)).setObjects(("ISILON-MIB", "clusterStatusGroup"), ("ISILON-MIB", "clusterIfsPerfGroup"), ("ISILON-MIB", "clusterNetworkPerfGroup"), ("ISILON-MIB", "clusterCPUPerfGroup"), ("ISILON-MIB", "ifsFilesystemGroup"), ("ISILON-MIB", "licensesGroup"), ("ISILON-MIB", "quotasGroup"), ("ISILON-MIB", "snapshotSettingsGroup"), ("ISILON-MIB", "snapshotScheduleTableGroup"), ("ISILON-MIB", "snapshotTableGroup"), ("ISILON-MIB", "nodeStatusGroup"), ("ISILON-MIB", "nodeIfsPerfGroup"), ("ISILON-MIB", "nodeNetworkPerfGroup"), ("ISILON-MIB", "nodeCPUPerfGroup"), ("ISILON-MIB", "nodeProtocolPerfTableGroup"), ("ISILON-MIB", "diskPerfTableGroup"), ("ISILON-MIB", "chassisTableGroup"), ("ISILON-MIB", "diskTableGroup"), ("ISILON-MIB", "fanTableGroup"), ("ISILON-MIB", "tempSensorTableGroup"), ("ISILON-MIB", "powerSensorTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isilonCompliance = isilonCompliance.setStatus('current')
mibBuilder.exportSymbols("ISILON-MIB", snapshotLocked=snapshotLocked, nodeProtocolPerfEntry=nodeProtocolPerfEntry, quotaUsage=quotaUsage, diskTable=diskTable, chassisTableGroup=chassisTableGroup, snapshotScheduleTable=snapshotScheduleTable, clusterNetworkInBytes=clusterNetworkInBytes, chassisSerialNumber=chassisSerialNumber, licenseTable=licenseTable, snapshotScheduleName=snapshotScheduleName, conformance=conformance, readOnly=readOnly, powerSensorName=powerSensorName, nodePerCPUID=nodePerCPUID, licenseEntry=licenseEntry, snapshotTable=snapshotTable, licensesGroup=licensesGroup, licenseExpirationDate=licenseExpirationDate, fanNumber=fanNumber, snapshotRootAccessLocal=snapshotRootAccessLocal, inMinBytes=inMinBytes, clusterNetworkPerf=clusterNetworkPerf, clusterStatus=clusterStatus, nodePerCPUSystem=nodePerCPUSystem, tempSensorValue=tempSensorValue, quotaTable=quotaTable, snapshotRootVisibilityLocal=snapshotRootVisibilityLocal, diskPerfDeviceName=diskPerfDeviceName, ifsFilesystem=ifsFilesystem, snapshotSubdirAccessLocal=snapshotSubdirAccessLocal, clusterCPUIdlePct=clusterCPUIdlePct, nodeCPUSystem=nodeCPUSystem, nodeGroups=nodeGroups, outStdDevBytes=outStdDevBytes, tempSensorNumber=tempSensorNumber, clusterStatusGroup=clusterStatusGroup, clusterIfsOutBitsPerSecond=clusterIfsOutBitsPerSecond, diskSizeBytes=diskSizeBytes, fanTableGroup=fanTableGroup, snapshotSettings=snapshotSettings, quotas=quotas, snapshotScheduleNamingPattern=snapshotScheduleNamingPattern, snapshotSettingsGroup=snapshotSettingsGroup, latencyMin=latencyMin, diskChassisNumber=diskChassisNumber, nodeCPUNice=nodeCPUNice, quotaType=quotaType, snapshotIndex=snapshotIndex, snapshotReservedPct=snapshotReservedPct, inStdDevBytes=inStdDevBytes, snapshotsGroup=snapshotsGroup, quotaSoftThreshold=quotaSoftThreshold, powerSensorTable=powerSensorTable, nodeNetworkInBitsPerSecond=nodeNetworkInBitsPerSecond, chassisNumber=chassisNumber, nodeHealth=nodeHealth, powerSensorNumber=powerSensorNumber, configuredNodes=configuredNodes, clusterIfsInBitsPerSecond=clusterIfsInBitsPerSecond, quotaEntry=quotaEntry, snapshots=snapshots, clusterHealth=clusterHealth, protocolName=protocolName, diskPerfInBitsPerSecond=diskPerfInBitsPerSecond, clusterIfsPerf=clusterIfsPerf, cluster=cluster, nodeCount=nodeCount, ifsFreeBytes=ifsFreeBytes, nodeStatus=nodeStatus, clusterIfsOutBytes=clusterIfsOutBytes, nodeCPUPerfEntry=nodeCPUPerfEntry, fanDescription=fanDescription, diskPerfEntry=diskPerfEntry, nodeNetworkInBytes=nodeNetworkInBytes, protocolOpCount=protocolOpCount, inAvgBytes=inAvgBytes, quotaIncludesSnapshotUsage=quotaIncludesSnapshotUsage, snapshotCreated=snapshotCreated, nodeName=nodeName, nodePerCPUInterrupt=nodePerCPUInterrupt, powerSensorDescription=powerSensorDescription, diskStatus=diskStatus, clusterCPUPerf=clusterCPUPerf, snapshotTableGroup=snapshotTableGroup, snapshotScheduleAlias=snapshotScheduleAlias, tempSensorDescription=tempSensorDescription, clusterNetworkInBitsPerSecond=clusterNetworkInBitsPerSecond, quotaAdvisoryThreshold=quotaAdvisoryThreshold, latencyAverage=latencyAverage, fanSpeed=fanSpeed, accessTimeEnabled=accessTimeEnabled, snapshotSubdirAccessNFS=snapshotSubdirAccessNFS, snapshotScheduleIndex=snapshotScheduleIndex, diskEntry=diskEntry, clusterCPUNice=clusterCPUNice, quotaGracePeriod=quotaGracePeriod, nodeCPUPerf=nodeCPUPerf, inMaxBytes=inMaxBytes, nodeCPUInterrupt=nodeCPUInterrupt, offlineNodes=offlineNodes, diskPerfTable=diskPerfTable, snapshotPath=snapshotPath, ifsTotalBytes=ifsTotalBytes, diskFirmwareVersion=diskFirmwareVersion, nodeProtocolPerfTable=nodeProtocolPerfTable, local=local, licenses=licenses, chassisModel=chassisModel, diskBay=diskBay, fanName=fanName, tempSensorEntry=tempSensorEntry, powerSensorTableGroup=powerSensorTableGroup, clusterIfsInBytes=clusterIfsInBytes, quotaSoftThresholdDefined=quotaSoftThresholdDefined, nodeNetworkPerf=nodeNetworkPerf, quotaPath=quotaPath, licenseModuleName=licenseModuleName, nodeNetworkPerfGroup=nodeNetworkPerfGroup, snapshotAliasFor=snapshotAliasFor, nodeProtocolPerfTableGroup=nodeProtocolPerfTableGroup, fanEntry=fanEntry, clusterNetworkOutBitsPerSecond=clusterNetworkOutBitsPerSecond, snapshotRootAccessCIFS=snapshotRootAccessCIFS, clusterGroups=clusterGroups, latencyStdDev=latencyStdDev, onlineNodes=onlineNodes, nodeIfsInBitsPerSecond=nodeIfsInBitsPerSecond, snapshotScheduledCreateEnabled=snapshotScheduledCreateEnabled, diskDeviceName=diskDeviceName, nodeNetworkOutBitsPerSecond=nodeNetworkOutBitsPerSecond, quotaID=quotaID, diskLogicalNumber=diskLogicalNumber, snapshotExpires=snapshotExpires, snapshotScheduleExpiration=snapshotScheduleExpiration, clusterNetworkOutBytes=clusterNetworkOutBytes, chassisUnitIDLEDOn=chassisUnitIDLEDOn, diskPerfBay=diskPerfBay, accessTimeGracePeriod=accessTimeGracePeriod, diskTableGroup=diskTableGroup, nodeCPUPerfTable=nodeCPUPerfTable, powerSensorEntry=powerSensorEntry, inBitsPerSecond=inBitsPerSecond, snapshotEntry=snapshotEntry, nodeIfsInBytes=nodeIfsInBytes, nodePerCPUIdle=nodePerCPUIdle, nodePerCPUUser=nodePerCPUUser, snapshotScheduleSchedule=snapshotScheduleSchedule, nodeNetworkOutBytes=nodeNetworkOutBytes, quotaHardThreshold=quotaHardThreshold, nodeCPUUser=nodeCPUUser, tempSensorTable=tempSensorTable, nodeIfsPerf=nodeIfsPerf, nodeCPUPerfGroup=nodeCPUPerfGroup, isilonCompliance=isilonCompliance, latencyMax=latencyMax, nodePerformance=nodePerformance, snapshotScheduleEntry=snapshotScheduleEntry, snapshotRootAccessNFS=snapshotRootAccessNFS, quotaInodeUsage=quotaInodeUsage, snapshotRootVisibilityNFS=snapshotRootVisibilityNFS, clusterName=clusterName, snapshotName=snapshotName, clusterPerformanceGroups=clusterPerformanceGroups, clusterCPUSystem=clusterCPUSystem, quotaHardThresholdDefined=quotaHardThresholdDefined, chassisEntry=chassisEntry, snapshotSubdirAccessCIFS=snapshotSubdirAccessCIFS, tempSensorName=tempSensorName, diskPerfOutBitsPerSecond=diskPerfOutBitsPerSecond, nodeCPUIdle=nodeCPUIdle, snapshotRootVisibilityCIFS=snapshotRootVisibilityCIFS, ifsUsedBytes=ifsUsedBytes, snapshotScheduledDeleteEnabled=snapshotScheduledDeleteEnabled, diskModel=diskModel, outMinBytes=outMinBytes, nodeStatusGroup=nodeStatusGroup, snapshotSize=snapshotSize, snapshotScheduleTableGroup=snapshotScheduleTableGroup, licenseStatus=licenseStatus, chassisConfigNumber=chassisConfigNumber, outAvgBytes=outAvgBytes, nodeType=nodeType, nodePerformanceGroup=nodePerformanceGroup, fanTable=fanTable, nodeIfsOutBytes=nodeIfsOutBytes, quotaAdvisoryThresholdDefined=quotaAdvisoryThresholdDefined, quotaDomainID=quotaDomainID, outBitsPerSecond=outBitsPerSecond, tempSensorTableGroup=tempSensorTableGroup, nodeIfsPerfGroup=nodeIfsPerfGroup, clusterCPUInterrupt=clusterCPUInterrupt, licenseIndex=licenseIndex, protocolOpsPerSecond=protocolOpsPerSecond, chassisTable=chassisTable, clusterIfsPerfGroup=clusterIfsPerfGroup, ifsFilesystemGroup=ifsFilesystemGroup, quotasGroup=quotasGroup, PYSNMP_MODULE_ID=isilon, outMaxBytes=outMaxBytes, credentialBindings=credentialBindings, node=node, clusterPerformance=clusterPerformance, isilon=isilon, diskPerfOpsPerSecond=diskPerfOpsPerSecond, snapshotSchedulePath=snapshotSchedulePath, quotaIncludesOverhead=quotaIncludesOverhead, clusterGUID=clusterGUID, ifsAvailableBytes=ifsAvailableBytes, diskSerialNumber=diskSerialNumber, clusterCPUUser=clusterCPUUser, clusterNetworkPerfGroup=clusterNetworkPerfGroup, powerSensorValue=powerSensorValue, nodePerCPUNice=nodePerCPUNice, quotaUsageWithOverhead=quotaUsageWithOverhead, diskPerfTableGroup=diskPerfTableGroup, nodeIfsOutBitsPerSecond=nodeIfsOutBitsPerSecond, clusterCPUPerfGroup=clusterCPUPerfGroup)
