#
# PySNMP MIB module NE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ne, = mibBuilder.importSymbols("CORIOLIS-MIB", "ne")
phyRingPortNo, phyRingSlotNo, logRingVPortNo = mibBuilder.importSymbols("RING-MIB", "phyRingPortNo", "phyRingSlotNo", "logRingVPortNo")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, TimeTicks, ObjectIdentity, Counter64, Unsigned32, Counter32, NotificationType, MibIdentifier, IpAddress, Gauge32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "TimeTicks", "ObjectIdentity", "Counter64", "Unsigned32", "Counter32", "NotificationType", "MibIdentifier", "IpAddress", "Gauge32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
neMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 5, 2))
if mibBuilder.loadTexts: neMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: neMIB.setOrganization('Coriolis Networks')
cfgNeTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 5, 1), )
if mibBuilder.loadTexts: cfgNeTable.setStatus('current')
cfgNeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1), ).setIndexNames((0, "NE-MIB", "cfgNeIPAddr"))
if mibBuilder.loadTexts: cfgNeEntry.setStatus('current')
cfgNeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cfgNeIPAddr.setStatus('current')
cfgNePriMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNePriMacAddr.setStatus('current')
cfgNeSecMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNeSecMacAddr.setStatus('current')
cfgNeSpareMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNeSpareMacAddr.setStatus('current')
neReachTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 5, 3), )
if mibBuilder.loadTexts: neReachTable.setStatus('current')
neReachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 5, 3, 1), ).setIndexNames((0, "NE-MIB", "neReachIpAddr"), (0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: neReachEntry.setStatus('current')
neReachIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neReachIpAddr.setStatus('current')
mibBuilder.exportSymbols("NE-MIB", neMIB=neMIB, cfgNeSpareMacAddr=cfgNeSpareMacAddr, cfgNePriMacAddr=cfgNePriMacAddr, neReachTable=neReachTable, neReachEntry=neReachEntry, cfgNeSecMacAddr=cfgNeSecMacAddr, PYSNMP_MODULE_ID=neMIB, cfgNeTable=cfgNeTable, cfgNeIPAddr=cfgNeIPAddr, neReachIpAddr=neReachIpAddr, cfgNeEntry=cfgNeEntry)
