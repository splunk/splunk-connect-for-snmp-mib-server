#
# PySNMP MIB module HH3C-ATM-DXI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-ATM-DXI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, ObjectIdentity, Bits, Integer32, Counter32, IpAddress, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "ObjectIdentity", "Bits", "Integer32", "Counter32", "IpAddress", "iso", "Counter64")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hh3cAtmDxi = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 49))
hh3cAtmDxi.setRevisions(('2005-04-14 15:18',))
if mibBuilder.loadTexts: hh3cAtmDxi.setLastUpdated('200504141518Z')
if mibBuilder.loadTexts: hh3cAtmDxi.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cAtmDxiScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 49, 1))
hh3cAtmDxiConfMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAtmDxiConfMode.setStatus('current')
hh3cAtmDxiIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2))
hh3cAtmDxiPvcTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1), )
if mibBuilder.loadTexts: hh3cAtmDxiPvcTable.setStatus('current')
hh3cAtmDxiPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcVpi"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcVci"))
if mibBuilder.loadTexts: hh3cAtmDxiPvcEntry.setStatus('current')
hh3cAtmDxiPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hh3cAtmDxiPvcVpi.setStatus('current')
hh3cAtmDxiPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cAtmDxiPvcVci.setStatus('current')
hh3cAtmDxiPvcDFA = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiPvcDFA.setStatus('current')
hh3cAtmDxiPvcEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snap", 1), ("nlpid", 2), ("mux", 3))).clone('snap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiPvcEncType.setStatus('current')
hh3cAtmDxiPvcMapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiPvcMapCount.setStatus('current')
hh3cAtmDxiPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiPvcRowStatus.setStatus('current')
hh3cAtmDxiMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2), )
if mibBuilder.loadTexts: hh3cAtmDxiMapTable.setStatus('current')
hh3cAtmDxiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapPeerIpType"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapPeerIp"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapPvcVpi"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapPvcVci"), (0, "HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapType"))
if mibBuilder.loadTexts: hh3cAtmDxiMapEntry.setStatus('current')
hh3cAtmDxiMapPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cAtmDxiMapPeerIpType.setStatus('current')
hh3cAtmDxiMapPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cAtmDxiMapPeerIp.setStatus('current')
hh3cAtmDxiMapPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hh3cAtmDxiMapPvcVpi.setStatus('current')
hh3cAtmDxiMapPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cAtmDxiMapPvcVci.setStatus('current')
hh3cAtmDxiMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("address", 1), ("inarp", 2), ("default", 3))))
if mibBuilder.loadTexts: hh3cAtmDxiMapType.setStatus('current')
hh3cAtmDxiMapInarpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 10), )).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiMapInarpTime.setStatus('current')
hh3cAtmDxiMapBroEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiMapBroEnable.setStatus('current')
hh3cAtmDxiMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 49, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAtmDxiMapRowStatus.setStatus('current')
hh3cAtmDxiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3))
hh3cAtmDxiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3, 1))
hh3cAtmDxiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3, 1, 1)).setObjects(("HH3C-ATM-DXI-MIB", "hh3cPVCMAPGroup"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cAtmDxiCompliance = hh3cAtmDxiCompliance.setStatus('current')
hh3cAtmDxiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3, 2))
hh3cPVCMAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3, 2, 1)).setObjects(("HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcDFA"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcEncType"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcMapCount"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiPvcRowStatus"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapBroEnable"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapInarpTime"), ("HH3C-ATM-DXI-MIB", "hh3cAtmDxiMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cPVCMAPGroup = hh3cPVCMAPGroup.setStatus('current')
hh3cAtmDxiGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 49, 3, 2, 2)).setObjects(("HH3C-ATM-DXI-MIB", "hh3cAtmDxiConfMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cAtmDxiGeneralGroup = hh3cAtmDxiGeneralGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-ATM-DXI-MIB", PYSNMP_MODULE_ID=hh3cAtmDxi, hh3cAtmDxiMapEntry=hh3cAtmDxiMapEntry, hh3cAtmDxiConformance=hh3cAtmDxiConformance, hh3cAtmDxiMapTable=hh3cAtmDxiMapTable, hh3cAtmDxiMapPvcVci=hh3cAtmDxiMapPvcVci, hh3cAtmDxiCompliances=hh3cAtmDxiCompliances, hh3cAtmDxiMapRowStatus=hh3cAtmDxiMapRowStatus, hh3cAtmDxiConfMode=hh3cAtmDxiConfMode, hh3cAtmDxiMapBroEnable=hh3cAtmDxiMapBroEnable, hh3cAtmDxiPvcMapCount=hh3cAtmDxiPvcMapCount, hh3cAtmDxiGeneralGroup=hh3cAtmDxiGeneralGroup, hh3cAtmDxi=hh3cAtmDxi, hh3cPVCMAPGroup=hh3cPVCMAPGroup, hh3cAtmDxiPvcRowStatus=hh3cAtmDxiPvcRowStatus, hh3cAtmDxiPvcEntry=hh3cAtmDxiPvcEntry, hh3cAtmDxiPvcDFA=hh3cAtmDxiPvcDFA, hh3cAtmDxiMapType=hh3cAtmDxiMapType, hh3cAtmDxiPvcTable=hh3cAtmDxiPvcTable, hh3cAtmDxiScalarGroup=hh3cAtmDxiScalarGroup, hh3cAtmDxiPvcEncType=hh3cAtmDxiPvcEncType, hh3cAtmDxiIfObjects=hh3cAtmDxiIfObjects, hh3cAtmDxiMapInarpTime=hh3cAtmDxiMapInarpTime, hh3cAtmDxiGroup=hh3cAtmDxiGroup, hh3cAtmDxiMapPeerIp=hh3cAtmDxiMapPeerIp, hh3cAtmDxiPvcVpi=hh3cAtmDxiPvcVpi, hh3cAtmDxiPvcVci=hh3cAtmDxiPvcVci, hh3cAtmDxiCompliance=hh3cAtmDxiCompliance, hh3cAtmDxiMapPeerIpType=hh3cAtmDxiMapPeerIpType, hh3cAtmDxiMapPvcVpi=hh3cAtmDxiMapPvcVpi)
