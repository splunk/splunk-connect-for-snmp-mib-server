#
# PySNMP MIB module RADLAN-CDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-CDP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:37:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
cdpCacheIfIndex, cdpCacheEntry, cdpCacheDeviceIndex = mibBuilder.importSymbols("CISCO-CDP-MIB", "cdpCacheIfIndex", "cdpCacheEntry", "cdpCacheDeviceIndex")
CiscoNetworkAddress, CiscoNetworkProtocol = mibBuilder.importSymbols("CISCO-TC", "CiscoNetworkAddress", "CiscoNetworkProtocol")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanId")
rndErrorSeverity, rndErrorDesc = mibBuilder.importSymbols("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity", "rndErrorDesc")
rnd, rndNotifications = mibBuilder.importSymbols("RADLAN-MIB", "rnd", "rndNotifications")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, ModuleIdentity, TimeTicks, iso, Bits, Counter64, Gauge32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "iso", "Bits", "Counter64", "Gauge32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Integer32")
DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
rlCdp = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 137))
rlCdp.setRevisions(('2008-09-14 00:00', '2010-08-11 00:00', '2010-10-25 00:00', '2010-11-10 00:00', '2010-11-14 00:00', '2011-01-09 00:00', '2011-02-15 00:00', '2012-02-14 00:00', '2015-03-04 00:00',))
if mibBuilder.loadTexts: rlCdp.setLastUpdated('201503040000Z')
if mibBuilder.loadTexts: rlCdp.setOrganization('Marvell Technology Group Ltd.')
class RlCdpVersionTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("version-v1", 1), ("version-v2", 2))

class RlCdpCounterTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("totalInputPackets", 1), ("v1InputPackets", 2), ("v2InputPackets", 3), ("totalOutputPackets", 4), ("v1OutputPackets", 5), ("v2OutputPackets", 6), ("illegalChksum", 7), ("errorPackets", 8), ("maxNeighborsExceededInMainCache", 9), ("maxNeighborsExceededInSecondaryCache", 10))

class RlCdpPduActionTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("filtering", 1), ("bridging", 2), ("flooding", 3))

rlCdpVersionAdvertised = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 1), RlCdpVersionTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpVersionAdvertised.setStatus('current')
rlCdpSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpSourceInterface.setStatus('current')
rlCdpLogMismatchDuplexEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpLogMismatchDuplexEnable.setStatus('current')
rlCdpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 4), )
if mibBuilder.loadTexts: rlCdpCountersTable.setStatus('current')
rlCdpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 4, 1), ).setIndexNames((0, "RADLAN-CDP-MIB", "rlCdpCountersName"))
if mibBuilder.loadTexts: rlCdpCountersEntry.setStatus('current')
rlCdpCountersName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 4, 1, 1), RlCdpCounterTypes())
if mibBuilder.loadTexts: rlCdpCountersName.setStatus('current')
rlCdpCountersValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpCountersValue.setStatus('current')
rlCdpCountersClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpCountersClear.setStatus('current')
rlCdpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpCacheClear.setStatus('current')
rlCdpVoiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpVoiceVlanId.setStatus('obsolete')
rlCdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 8), )
if mibBuilder.loadTexts: rlCdpCacheTable.setStatus('current')
rlCdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 8, 1), )
cdpCacheEntry.registerAugmentions(("RADLAN-CDP-MIB", "rlCdpCacheEntry"))
rlCdpCacheEntry.setIndexNames(*cdpCacheEntry.getIndexNames())
if mibBuilder.loadTexts: rlCdpCacheEntry.setStatus('current')
rlCdpCacheVersionExt = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpCacheVersionExt.setStatus('current')
rlCdpCacheTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpCacheTimeToLive.setStatus('current')
rlCdpCacheCdpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 8, 1, 3), RlCdpVersionTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpCacheCdpVersion.setStatus('current')
rlCdpPduAction = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 9), RlCdpPduActionTypes().clone('bridging')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpPduAction.setStatus('current')
rlCdpLogMismatchVoiceVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpLogMismatchVoiceVlanEnable.setStatus('current')
rlCdpLogMismatchNativeVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpLogMismatchNativeVlanEnable.setStatus('current')
rlCdpSecondaryCacheTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 12), )
if mibBuilder.loadTexts: rlCdpSecondaryCacheTable.setStatus('current')
rlCdpSecondaryCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 12, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpCacheIfIndex"), (0, "CISCO-CDP-MIB", "cdpCacheDeviceIndex"))
if mibBuilder.loadTexts: rlCdpSecondaryCacheEntry.setStatus('current')
rlCdpSecondaryCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheMacAddress.setStatus('current')
rlCdpSecondaryCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCachePlatform.setStatus('current')
rlCdpSecondaryCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheCapabilities.setStatus('current')
rlCdpSecondaryCacheVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheVoiceVlanID.setStatus('current')
rlCdpSecondaryCacheTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheTimeToLive.setStatus('current')
rlCdpSecondaryCachePowerAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCachePowerAvailable.setStatus('current')
rlCdpSecondaryCachePowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCachePowerConsumption.setStatus('current')
rlCdpSecondaryCacheSparePairPoECapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 10), Bits().clone(namedValues=NamedValues(("supported", 0), ("detectionClassificationRequired", 1), ("desiredState", 2), ("operationalState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheSparePairPoECapabilities.setStatus('current')
rlCdpSecondaryCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheDeviceId.setStatus('current')
rlCdpSecondaryCachePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCachePortId.setStatus('current')
rlCdpGlobalLogMismatchDuplexEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpGlobalLogMismatchDuplexEnable.setStatus('current')
rlCdpGlobalLogMismatchVoiceVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpGlobalLogMismatchVoiceVlanEnable.setStatus('current')
rlCdpGlobalLogMismatchNativeVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpGlobalLogMismatchNativeVlanEnable.setStatus('current')
rlCdpTlvTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 16), )
if mibBuilder.loadTexts: rlCdpTlvTable.setStatus('current')
rlCdpTlvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 16, 1), ).setIndexNames((0, "RADLAN-CDP-MIB", "rlCdpTlvIfIndex"))
if mibBuilder.loadTexts: rlCdpTlvEntry.setStatus('current')
rlCdpTlvIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlCdpTlvIfIndex.setStatus('current')
rlCdpTlvDeviceIdFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialNumber", 1), ("macAddress", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvDeviceIdFormat.setStatus('current')
rlCdpTlvDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvDeviceId.setStatus('current')
rlCdpTlvAddress1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress1Type.setStatus('current')
rlCdpTlvAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress1.setStatus('current')
rlCdpTlvAddress2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress2Type.setStatus('current')
rlCdpTlvAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress2.setStatus('current')
rlCdpTlvAddress3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress3Type.setStatus('current')
rlCdpTlvAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvAddress3.setStatus('current')
rlCdpTlvPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPortId.setStatus('current')
rlCdpTlvCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvCapabilities.setStatus('current')
rlCdpTlvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvVersion.setStatus('current')
rlCdpTlvPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPlatform.setStatus('current')
rlCdpTlvNativeVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvNativeVLAN.setStatus('current')
rlCdpTlvDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfduplex", 2), ("fullduplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvDuplex.setStatus('current')
rlCdpTlvApplianceID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvApplianceID.setStatus('current')
rlCdpTlvApplianceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvApplianceVlanID.setStatus('current')
rlCdpTlvExtendedTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untrusted", 0), ("trusted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvExtendedTrust.setStatus('current')
rlCdpTlvCosForUntrustedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvCosForUntrustedPorts.setStatus('current')
rlCdpTlvPowerAvailableRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerAvailableRequestId.setStatus('current')
rlCdpTlvPowerAvailablePowerManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerAvailablePowerManagementId.setStatus('current')
rlCdpTlvPowerAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerAvailable.setStatus('current')
rlCdpTlvPowerAvailableManagementPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerAvailableManagementPowerLevel.setStatus('current')
rlCdpTlvSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvSysName.setStatus('current')
rlCdpTlvPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerConsumption.setStatus('current')
rlCdpTlvPowerRequestedRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerRequestedRequestId.setStatus('current')
rlCdpTlvPowerRequestedPowerManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerRequestedPowerManagementId.setStatus('current')
rlCdpTlvSparePairPoECapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 16, 1, 28), Bits().clone(namedValues=NamedValues(("supported", 0), ("detectionClassificationRequired", 1), ("desiredState", 2), ("operationalState", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvSparePairPoECapabilities.setStatus('current')
rlCdpTlvPowerRequestTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 21), )
if mibBuilder.loadTexts: rlCdpTlvPowerRequestTable.setStatus('current')
rlCdpTlvPowerRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 21, 1), ).setIndexNames((0, "RADLAN-CDP-MIB", "rlCdpTlvIfIndex"), (0, "RADLAN-CDP-MIB", "rlCdpTlvPowerRequestPowerLevelIndex"))
if mibBuilder.loadTexts: rlCdpTlvPowerRequestEntry.setStatus('current')
rlCdpTlvPowerRequestPowerLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlCdpTlvPowerRequestPowerLevelIndex.setStatus('current')
rlCdpTlvPowerRequestPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpTlvPowerRequestPowerLevel.setStatus('current')
rlCdpSecondaryCacheAddressTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 22), )
if mibBuilder.loadTexts: rlCdpSecondaryCacheAddressTable.setStatus('current')
rlCdpSecondaryCacheAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 22, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpCacheIfIndex"), (0, "CISCO-CDP-MIB", "cdpCacheDeviceIndex"), (0, "RADLAN-CDP-MIB", "rlCdpSecondaryCacheAddressIndex"))
if mibBuilder.loadTexts: rlCdpSecondaryCacheAddressEntry.setStatus('current')
rlCdpSecondaryCacheAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlCdpSecondaryCacheAddressIndex.setStatus('current')
rlCdpSecondaryCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 22, 1, 4), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheAddressType.setStatus('current')
rlCdpSecondaryCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 22, 1, 5), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheAddress.setStatus('current')
rlCdpSecondaryCacheRequestedPowerTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 23), )
if mibBuilder.loadTexts: rlCdpSecondaryCacheRequestedPowerTable.setStatus('current')
rlCdpSecondaryCacheRequestedPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 23, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpCacheIfIndex"), (0, "CISCO-CDP-MIB", "cdpCacheDeviceIndex"), (0, "RADLAN-CDP-MIB", "rlCdpSecondaryCacheRequestedPowerIndex"))
if mibBuilder.loadTexts: rlCdpSecondaryCacheRequestedPowerEntry.setStatus('current')
rlCdpSecondaryCacheRequestedPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlCdpSecondaryCacheRequestedPowerIndex.setStatus('current')
rlCdpSecondaryCacheRequestedPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 23, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpSecondaryCacheRequestedPowerLevel.setStatus('current')
rlCdpAdvertiseApplianceTlv = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpAdvertiseApplianceTlv.setStatus('current')
rlCdpValidateMandatoryTlvs = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 18), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpValidateMandatoryTlvs.setStatus('current')
rlCdpInterfaceCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 137, 19), )
if mibBuilder.loadTexts: rlCdpInterfaceCountersTable.setStatus('current')
rlCdpInterfaceCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 137, 19, 1), ).setIndexNames((0, "RADLAN-CDP-MIB", "rlCdpInterfaceId"))
if mibBuilder.loadTexts: rlCdpInterfaceCountersEntry.setStatus('current')
rlCdpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlCdpInterfaceId.setStatus('current')
rlCdpInterfaceTotalInputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceTotalInputPackets.setStatus('current')
rlCdpInterfaceV1InputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceV1InputPackets.setStatus('current')
rlCdpInterfaceV2InputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceV2InputPackets.setStatus('current')
rlCdpInterfaceTotalOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceTotalOutputPackets.setStatus('current')
rlCdpInterfaceV1OutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceV1OutputPackets.setStatus('current')
rlCdpInterfaceV2OutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceV2OutputPackets.setStatus('current')
rlCdpInterfaceIllegalChksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceIllegalChksum.setStatus('current')
rlCdpInterfaceErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceErrorPackets.setStatus('current')
rlCdpInterfaceMaxNeighborsExceededInMainCache = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceMaxNeighborsExceededInMainCache.setStatus('current')
rlCdpInterfaceMaxNeighborsExceededInSecondaryCache = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 137, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCdpInterfaceMaxNeighborsExceededInSecondaryCache.setStatus('current')
rlCdpInterfaceCountersClear = MibScalar((1, 3, 6, 1, 4, 1, 89, 137, 20), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCdpInterfaceCountersClear.setStatus('current')
rlCdpLogMismatchDuplexTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 224)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCdpLogMismatchDuplexTrap.setStatus('current')
rlCdpLogMismatchVoiceVlanTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 225)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCdpLogMismatchVoiceVlanTrap.setStatus('current')
rlCdpLogMismatchNativeVlanTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 226)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCdpLogMismatchNativeVlanTrap.setStatus('current')
mibBuilder.exportSymbols("RADLAN-CDP-MIB", rlCdpGlobalLogMismatchDuplexEnable=rlCdpGlobalLogMismatchDuplexEnable, rlCdpTlvDeviceIdFormat=rlCdpTlvDeviceIdFormat, rlCdpTlvIfIndex=rlCdpTlvIfIndex, rlCdpInterfaceTotalOutputPackets=rlCdpInterfaceTotalOutputPackets, rlCdpTlvPowerAvailableRequestId=rlCdpTlvPowerAvailableRequestId, rlCdpTlvAddress1Type=rlCdpTlvAddress1Type, rlCdpTlvPowerAvailableManagementPowerLevel=rlCdpTlvPowerAvailableManagementPowerLevel, rlCdpCountersTable=rlCdpCountersTable, rlCdpSecondaryCacheAddressType=rlCdpSecondaryCacheAddressType, rlCdpSecondaryCacheDeviceId=rlCdpSecondaryCacheDeviceId, rlCdpSecondaryCacheVoiceVlanID=rlCdpSecondaryCacheVoiceVlanID, rlCdpInterfaceV2OutputPackets=rlCdpInterfaceV2OutputPackets, rlCdpTlvPortId=rlCdpTlvPortId, rlCdpTlvCosForUntrustedPorts=rlCdpTlvCosForUntrustedPorts, rlCdpTlvPowerRequestEntry=rlCdpTlvPowerRequestEntry, rlCdpLogMismatchNativeVlanEnable=rlCdpLogMismatchNativeVlanEnable, rlCdpSecondaryCacheAddressIndex=rlCdpSecondaryCacheAddressIndex, rlCdpTlvVersion=rlCdpTlvVersion, rlCdpCountersName=rlCdpCountersName, rlCdpVoiceVlanId=rlCdpVoiceVlanId, rlCdpSecondaryCachePowerAvailable=rlCdpSecondaryCachePowerAvailable, rlCdpCacheCdpVersion=rlCdpCacheCdpVersion, rlCdpTlvSysName=rlCdpTlvSysName, rlCdpInterfaceV1InputPackets=rlCdpInterfaceV1InputPackets, rlCdpSecondaryCacheCapabilities=rlCdpSecondaryCacheCapabilities, rlCdpCacheEntry=rlCdpCacheEntry, RlCdpCounterTypes=RlCdpCounterTypes, rlCdpInterfaceCountersTable=rlCdpInterfaceCountersTable, rlCdpTlvNativeVLAN=rlCdpTlvNativeVLAN, rlCdpTlvDuplex=rlCdpTlvDuplex, rlCdpGlobalLogMismatchVoiceVlanEnable=rlCdpGlobalLogMismatchVoiceVlanEnable, rlCdpTlvPowerRequestedPowerManagementId=rlCdpTlvPowerRequestedPowerManagementId, rlCdpSecondaryCacheMacAddress=rlCdpSecondaryCacheMacAddress, rlCdpInterfaceCountersEntry=rlCdpInterfaceCountersEntry, rlCdpSecondaryCacheTimeToLive=rlCdpSecondaryCacheTimeToLive, rlCdpInterfaceV1OutputPackets=rlCdpInterfaceV1OutputPackets, rlCdpTlvTable=rlCdpTlvTable, rlCdpLogMismatchDuplexTrap=rlCdpLogMismatchDuplexTrap, rlCdpTlvApplianceVlanID=rlCdpTlvApplianceVlanID, rlCdpTlvAddress2=rlCdpTlvAddress2, rlCdpTlvAddress3=rlCdpTlvAddress3, rlCdpPduAction=rlCdpPduAction, rlCdpSecondaryCachePowerConsumption=rlCdpSecondaryCachePowerConsumption, rlCdpSecondaryCacheAddressTable=rlCdpSecondaryCacheAddressTable, rlCdpLogMismatchNativeVlanTrap=rlCdpLogMismatchNativeVlanTrap, rlCdpCacheTimeToLive=rlCdpCacheTimeToLive, rlCdpInterfaceTotalInputPackets=rlCdpInterfaceTotalInputPackets, rlCdpTlvApplianceID=rlCdpTlvApplianceID, rlCdpValidateMandatoryTlvs=rlCdpValidateMandatoryTlvs, rlCdpCountersClear=rlCdpCountersClear, rlCdpInterfaceIllegalChksum=rlCdpInterfaceIllegalChksum, rlCdpLogMismatchVoiceVlanEnable=rlCdpLogMismatchVoiceVlanEnable, rlCdpInterfaceMaxNeighborsExceededInMainCache=rlCdpInterfaceMaxNeighborsExceededInMainCache, rlCdpCountersEntry=rlCdpCountersEntry, rlCdpCacheTable=rlCdpCacheTable, rlCdpTlvExtendedTrust=rlCdpTlvExtendedTrust, rlCdpTlvAddress2Type=rlCdpTlvAddress2Type, rlCdpTlvPowerRequestPowerLevelIndex=rlCdpTlvPowerRequestPowerLevelIndex, rlCdpInterfaceV2InputPackets=rlCdpInterfaceV2InputPackets, rlCdpTlvPowerAvailablePowerManagementId=rlCdpTlvPowerAvailablePowerManagementId, rlCdpSecondaryCachePortId=rlCdpSecondaryCachePortId, rlCdpSecondaryCacheEntry=rlCdpSecondaryCacheEntry, rlCdpSecondaryCacheTable=rlCdpSecondaryCacheTable, rlCdpTlvPowerRequestedRequestId=rlCdpTlvPowerRequestedRequestId, rlCdpGlobalLogMismatchNativeVlanEnable=rlCdpGlobalLogMismatchNativeVlanEnable, rlCdpAdvertiseApplianceTlv=rlCdpAdvertiseApplianceTlv, rlCdpCacheClear=rlCdpCacheClear, rlCdp=rlCdp, rlCdpSecondaryCacheRequestedPowerIndex=rlCdpSecondaryCacheRequestedPowerIndex, rlCdpTlvSparePairPoECapabilities=rlCdpTlvSparePairPoECapabilities, rlCdpTlvPowerRequestPowerLevel=rlCdpTlvPowerRequestPowerLevel, RlCdpPduActionTypes=RlCdpPduActionTypes, rlCdpVersionAdvertised=rlCdpVersionAdvertised, rlCdpSecondaryCacheAddressEntry=rlCdpSecondaryCacheAddressEntry, PYSNMP_MODULE_ID=rlCdp, rlCdpSecondaryCacheAddress=rlCdpSecondaryCacheAddress, rlCdpLogMismatchDuplexEnable=rlCdpLogMismatchDuplexEnable, rlCdpLogMismatchVoiceVlanTrap=rlCdpLogMismatchVoiceVlanTrap, rlCdpInterfaceErrorPackets=rlCdpInterfaceErrorPackets, rlCdpSecondaryCacheRequestedPowerLevel=rlCdpSecondaryCacheRequestedPowerLevel, rlCdpSourceInterface=rlCdpSourceInterface, RlCdpVersionTypes=RlCdpVersionTypes, rlCdpTlvPowerAvailable=rlCdpTlvPowerAvailable, rlCdpTlvPowerRequestTable=rlCdpTlvPowerRequestTable, rlCdpInterfaceCountersClear=rlCdpInterfaceCountersClear, rlCdpTlvAddress1=rlCdpTlvAddress1, rlCdpInterfaceMaxNeighborsExceededInSecondaryCache=rlCdpInterfaceMaxNeighborsExceededInSecondaryCache, rlCdpCountersValue=rlCdpCountersValue, rlCdpTlvEntry=rlCdpTlvEntry, rlCdpTlvPlatform=rlCdpTlvPlatform, rlCdpSecondaryCacheSparePairPoECapabilities=rlCdpSecondaryCacheSparePairPoECapabilities, rlCdpTlvAddress3Type=rlCdpTlvAddress3Type, rlCdpTlvCapabilities=rlCdpTlvCapabilities, rlCdpInterfaceId=rlCdpInterfaceId, rlCdpSecondaryCachePlatform=rlCdpSecondaryCachePlatform, rlCdpSecondaryCacheRequestedPowerTable=rlCdpSecondaryCacheRequestedPowerTable, rlCdpSecondaryCacheRequestedPowerEntry=rlCdpSecondaryCacheRequestedPowerEntry, rlCdpCacheVersionExt=rlCdpCacheVersionExt, rlCdpTlvDeviceId=rlCdpTlvDeviceId, rlCdpTlvPowerConsumption=rlCdpTlvPowerConsumption)
