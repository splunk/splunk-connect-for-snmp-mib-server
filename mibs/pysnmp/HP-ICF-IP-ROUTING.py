#
# PySNMP MIB module HP-ICF-IP-ROUTING (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-IP-ROUTING
# Produced by pysmi-0.3.4 at Mon Apr 29 19:21:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
HpInetCidrRouteState, = mibBuilder.importSymbols("HP-ICF-TC", "HpInetCidrRouteState")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
inetCidrRouteDestType, inetCidrRouteEntry, ipCidrRouteEntry = mibBuilder.importSymbols("IP-FORWARD-MIB", "inetCidrRouteDestType", "inetCidrRouteEntry", "ipCidrRouteEntry")
ipv6RouterAdvertEntry, ipDefaultRouterEntry = mibBuilder.importSymbols("IP-MIB", "ipv6RouterAdvertEntry", "ipDefaultRouterEntry")
Metric, = mibBuilder.importSymbols("OSPF-MIB", "Metric")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, MibIdentifier, ModuleIdentity, Unsigned32, iso, Integer32, NotificationType, ObjectIdentity, IpAddress, Gauge32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "iso", "Integer32", "NotificationType", "ObjectIdentity", "IpAddress", "Gauge32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus, PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "PhysAddress", "TruthValue")
hpicfIpRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15))
hpicfIpRouting.setRevisions(('2016-12-02 00:00', '2016-11-09 00:00', '2016-03-18 00:00', '2016-02-17 00:00', '2014-08-26 00:00', '2013-06-03 00:00', '2012-10-20 00:00', '2011-11-10 00:00', '2011-08-30 00:00', '2010-11-29 00:00', '2010-05-27 00:00', '2009-11-05 00:00', '2009-10-12 00:00', '2008-12-19 00:00', '2008-04-08 00:00', '2008-03-04 00:00', '2007-04-20 00:00', '2005-08-13 02:28', '2005-08-05 00:00', '2003-05-13 02:28', '2002-10-31 23:53', '2002-05-23 17:38', '2000-07-15 00:22',))
if mibBuilder.loadTexts: hpicfIpRouting.setLastUpdated('201612020000Z')
if mibBuilder.loadTexts: hpicfIpRouting.setOrganization('HP Networking.')
hpicfIpRoutingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1))
hpicfIcmpRdisc = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1))
hpicfRdiscAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscAdminStatus.setStatus('current')
hpicfRdiscIfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfRdiscIfCfgTable.setStatus('current')
hpicfRdiscIfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfRdiscIfCfgEntry.setStatus('current')
hpicfRdiscIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdminStatus.setStatus('current')
hpicfRdiscIfAdvertAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdvertAddress.setStatus('current')
hpicfRdiscIfMaxAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfMaxAdvertInterval.setStatus('current')
hpicfRdiscIfMinAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfMinAdvertInterval.setStatus('current')
hpicfRdiscIfAdvertLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfAdvertLifetime.setStatus('current')
hpicfRdiscIfPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRdiscIfPreference.setStatus('current')
hpicfIcmpRateLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2))
hpicfIcmpBoxLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1))
hpicfIcmpReplyLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpReplyLimitEnable.setStatus('current')
hpicfIcmpReplyLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpReplyLimit.setStatus('current')
hpicfIcmpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpRedirectEnable.setStatus('current')
hpicfIcmpDestUnreachEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpDestUnreachEnable.setStatus('current')
hpicfIcmpAddrMaskReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpAddrMaskReplyEnable.setStatus('current')
hpicfIcmpEchoBroadcastReplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIcmpEchoBroadcastReplyEnable.setStatus('current')
hpicfGlobalIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3))
hpicfDBroadcastFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDBroadcastFwdEnable.setStatus('current')
hpicfSourceRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSourceRouteEnable.setStatus('current')
hpicfIpMaximumPaths = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpMaximumPaths.setStatus('current')
hpicfDBroadcastFwdAcl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDBroadcastFwdAcl.setStatus('current')
hpicfIpStaticRouteConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4))
hpicfIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1), )
if mibBuilder.loadTexts: hpicfIpStaticRouteTable.setStatus('current')
hpicfIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixLength"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddr"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdIfIndex"))
if mibBuilder.loadTexts: hpicfIpStaticRouteEntry.setStatus('current')
hpicfIpStaticRoutePrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixType.setStatus('current')
hpicfIpStaticRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefix.setStatus('current')
hpicfIpStaticRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpStaticRoutePrefixLength.setStatus('current')
hpicfIpStaticRouteFwdAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddrType.setStatus('current')
hpicfIpStaticRouteFwdAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdAddr.setStatus('current')
hpicfIpStaticRouteFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hpicfIpStaticRouteFwdIfIndex.setStatus('current')
hpicfIpStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5))).clone('remote')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteType.setStatus('current')
hpicfIpStaticRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteDistance.setStatus('current')
hpicfIpStaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteTag.setStatus('current')
hpicfIpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteStatus.setStatus('current')
hpicfIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 11), Metric().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteMetric.setStatus('current')
hpicfIpStaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteName.setStatus('current')
hpicfIpStaticRouteLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteLogging.setStatus('current')
hpicfIpStaticRouteBfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEnable.setStatus('current')
hpicfIpStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2), )
if mibBuilder.loadTexts: hpicfIpStaticNeighborTable.setStatus('current')
hpicfIpStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborNetAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborNetAddress"))
if mibBuilder.loadTexts: hpicfIpStaticNeighborEntry.setStatus('current')
hpicfIpStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpStaticNeighborIfIndex.setStatus('current')
hpicfIpStaticNeighborNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddrType.setStatus('current')
hpicfIpStaticNeighborNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpStaticNeighborNetAddress.setStatus('current')
hpicfIpStaticNeighborPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticNeighborPhysAddress.setStatus('current')
hpicfIpStaticNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticNeighborStatus.setStatus('current')
hpicfIpStaticRouteBfdTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3), )
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdTable.setStatus('current')
hpicfIpStaticRouteBfdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRoutePrefixLength"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddrType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdAddr"), (0, "HP-ICF-IP-ROUTING", "hpicfIpStaticRouteFwdIfIndex"))
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdEntry.setStatus('current')
hpicfIpStaticRouteBfdSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddrType.setStatus('current')
hpicfIpStaticRouteBfdSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdSrcAddr.setStatus('current')
hpicfIpStaticRouteBfdDstAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddrType.setStatus('current')
hpicfIpStaticRouteBfdDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdDstAddr.setStatus('current')
hpicfIpStaticRouteBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpStaticRouteBfdStatus.setStatus('current')
hpicfIpRouteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5))
hpicfIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfIpCidrRouteTable.setStatus('current')
hpicfIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1), )
ipCidrRouteEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteEntry"))
hpicfIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpCidrRouteEntry.setStatus('current')
hpicfIpCidrRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpCidrRouteDistance.setStatus('current')
hpicfInetCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2), )
if mibBuilder.loadTexts: hpicfInetCidrRouteTable.setStatus('current')
hpicfInetCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1), )
inetCidrRouteEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteEntry"))
hpicfInetCidrRouteEntry.setIndexNames(*inetCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfInetCidrRouteEntry.setStatus('current')
hpicfInetCidrRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteDistance.setStatus('current')
hpicfInetCidrRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteInfo.setStatus('current')
hpicfInetCidrRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 2, 1, 3), HpInetCidrRouteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrRouteState.setStatus('current')
hpicfInetCidrRouteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3), )
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsTable.setStatus('current')
hpicfInetCidrRouteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1), ).setIndexNames((0, "IP-FORWARD-MIB", "inetCidrRouteDestType"))
if mibBuilder.loadTexts: hpicfInetCidrRouteStatsEntry.setStatus('current')
hpicfInetCidrNumRouteDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrNumRouteDestinations.setStatus('current')
hpicfInetCidrNumRouteRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfInetCidrNumRouteRoutes.setStatus('current')
hpicfArpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6))
hpicfArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16666666)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpAgingTime.setStatus('current')
hpicfArpMcastReplies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpMcastReplies.setStatus('current')
hpicfIpDefaultRouterPrefixInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7))
hpicfIpDefaultRouterPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1), )
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixTable.setStatus('current')
hpicfIpDefaultRouterPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterAddressType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterAddress"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixLength"))
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixEntry.setStatus('current')
hpicfIpDefaultRouterAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddressType.setStatus('current')
hpicfIpDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfIpDefaultRouterAddress.setStatus('current')
hpicfIpDefaultRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpDefaultRouterIfIndex.setStatus('current')
hpicfIpDefaultRouterPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixType.setStatus('current')
hpicfIpDefaultRouterPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 5), InetAddress())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefix.setStatus('current')
hpicfIpDefaultRouterPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixLength.setStatus('current')
hpicfIpDefaultRouterPrefixOnLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixOnLink.setStatus('current')
hpicfIpDefaultRouterPrefixAutonomous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixAutonomous.setStatus('current')
hpicfIpDefaultRouterPrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixValidLifeTime.setStatus('current')
hpicfIpDefaultRouterPrefixPrefdLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterPrefixPrefdLifeTime.setStatus('current')
hpicfIpDefaultRouterProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8))
hpicfIpDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1), )
if mibBuilder.loadTexts: hpicfIpDefaultRouterTable.setStatus('current')
hpicfIpDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1), )
ipDefaultRouterEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterEntry"))
hpicfIpDefaultRouterEntry.setIndexNames(*ipDefaultRouterEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpDefaultRouterEntry.setStatus('current')
hpicfIpDefaultRouterMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterMTU.setStatus('current')
hpicfIpDefaultRouterHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpDefaultRouterHopLimit.setStatus('current')
hpicfIpv6ND = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9))
hpicfIpv6NDRAAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6NDRAAdminStatus.setStatus('current')
hpicfIpv6RtrAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2), )
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixTable.setStatus('current')
hpicfIpv6RtrAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixIfIndex"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixType"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixPrefix"), (0, "HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixLength"))
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixEntry.setStatus('current')
hpicfIpv6RtrAdvPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixIfIndex.setStatus('current')
hpicfIpv6RtrAdvPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixType.setStatus('current')
hpicfIpv6RtrAdvPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPrefix.setStatus('current')
hpicfIpv6RtrAdvPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLength.setStatus('current')
hpicfIpv6RtrAdvPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixOnLinkFlag.setStatus('current')
hpicfIpv6RtrAdvPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAutonomousFlag.setStatus('current')
hpicfIpv6RtrAdvPrefixLifetimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("realTime", 2))).clone('fixed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixLifetimeType.setStatus('current')
hpicfIpv6RtrAdvPrefixPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 8), Unsigned32().clone(604800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixPreferredLifetime.setStatus('current')
hpicfIpv6RtrAdvPrefixValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 9), Unsigned32().clone(2592000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixValidLifetime.setStatus('current')
hpicfIpv6RtrAdvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixRowStatus.setStatus('current')
hpicfIpv6RtrAdvPrefixAdvertiseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 2, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvPrefixAdvertiseFlag.setStatus('current')
hpicfIpRouteSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10))
class HpicfIpRouteProtoName(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 27, 32, 33, 40, 42))
    namedValues = NamedValues(("connected", 1), ("ipv6", 7), ("ospf2ase", 8), ("rip", 9), ("bgp", 10), ("rdisc6", 11), ("static", 12), ("snmp", 13), ("isis", 15), ("ripng", 17), ("ipv4", 18), ("pim", 22), ("rdisc", 23), ("ospf2", 24), ("ospf2nssa", 25), ("mroute", 27), ("igmpv3", 32), ("pim6", 33), ("mpls", 40), ("vrrp2", 42))

hpicfIpRouteSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1), )
if mibBuilder.loadTexts: hpicfIpRouteSummaryTable.setStatus('current')
hpicfIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpRouteProto"))
if mibBuilder.loadTexts: hpicfIpRouteEntry.setStatus('current')
hpicfIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1, 1), HpicfIpRouteProtoName())
if mibBuilder.loadTexts: hpicfIpRouteProto.setStatus('current')
hpicfIpRouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteCnt.setStatus('current')
hpicfIpv6RouteSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11))
class HpicfIpv6RouteProtoName(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 22, 23, 24, 25, 27, 32, 33, 40, 42))
    namedValues = NamedValues(("connected", 1), ("ospf3", 4), ("ospf3ase", 5), ("ospf3nssa", 6), ("ipv6", 7), ("ospf2ase", 8), ("rip", 9), ("bgp", 10), ("rdisc6", 11), ("static", 12), ("snmp", 13), ("isis", 15), ("ripng", 17), ("ipv4", 18), ("pim", 22), ("rdisc", 23), ("ospf2", 24), ("ospf2nssa", 25), ("mroute", 27), ("igmpv3", 32), ("pim6", 33), ("mpls", 40), ("vrrp2", 42))

hpicfIpv6RouteSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1), )
if mibBuilder.loadTexts: hpicfIpv6RouteSummaryTable.setStatus('current')
hpicfIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1), ).setIndexNames((0, "HP-ICF-IP-ROUTING", "hpicfIpv6RouteProto"))
if mibBuilder.loadTexts: hpicfIpv6RouteEntry.setStatus('current')
hpicfIpv6RouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1, 1), HpicfIpv6RouteProtoName())
if mibBuilder.loadTexts: hpicfIpv6RouteProto.setStatus('current')
hpicfIpv6RouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpv6RouteCnt.setStatus('current')
hpicfIpRouteBaseScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3))
hpicfIpRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteCount.setStatus('current')
hpicfIpRouteNextHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpRouteNextHopCount.setStatus('current')
hpicfIpv6RtrAdvTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3), )
if mibBuilder.loadTexts: hpicfIpv6RtrAdvTable.setStatus('current')
hpicfIpv6NDRADNSAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6NDRADNSAdminStatus.setStatus('current')
hpicfIpv6RtrAdvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1), )
ipv6RouterAdvertEntry.registerAugmentions(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvEntry"))
hpicfIpv6RtrAdvEntry.setIndexNames(*ipv6RouterAdvertEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpv6RtrAdvEntry.setStatus('current')
hpicfIpv6RtrAdvCurHopLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("global", 1), ("perInterface", 2))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RtrAdvCurHopLimitMode.setStatus('current')
hpicfIpv6RouterAdvertSendDNSAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertSendDNSAdverts.setStatus('current')
hpicfIpv6RouterAdvertRtrPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6RouterAdvertRtrPreference.setStatus('current')
hpicfIpRoutingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2))
hpicfIpRoutingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1))
hpicfRdiscBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 1)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRdiscBaseGroup = hpicfRdiscBaseGroup.setStatus('current')
hpicfRdiscIfCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 2)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdminStatus"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdvertAddress"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfMaxAdvertInterval"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfMinAdvertInterval"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfAdvertLifetime"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRdiscIfCfgGroup = hpicfRdiscIfCfgGroup.setStatus('current')
hpicfIcmpReplyBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 3)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpRedirectEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpDestUnreachEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpAddrMaskReplyEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpEchoBroadcastReplyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyBaseGroup = hpicfIcmpReplyBaseGroup.setStatus('current')
hpicfIcmpReplyLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 4)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitEnable"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyLimitGroup = hpicfIcmpReplyLimitGroup.setStatus('current')
hpicfIpRouteCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 5)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdEnable"), ("HP-ICF-IP-ROUTING", "hpicfSourceRouteEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteCfgGroup = hpicfIpRouteCfgGroup.setStatus('current')
hpicfIpStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 6)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteGroup = hpicfIpStaticRouteGroup.setStatus('deprecated')
hpicfIpStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 7)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborPhysAddress"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticNeighborGroup = hpicfIpStaticNeighborGroup.setStatus('current')
hpicfIpCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 8)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpCidrRouteGroup = hpicfIpCidrRouteGroup.setStatus('current')
hpicfInetCidrRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 9)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteGroup = hpicfInetCidrRouteGroup.setStatus('current')
hpicfArpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 10)).setObjects(("HP-ICF-IP-ROUTING", "hpicfArpAgingTime"), ("HP-ICF-IP-ROUTING", "hpicfArpMcastReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpBaseGroup = hpicfArpBaseGroup.setStatus('current')
hpicfIpv6RtrAdvPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 11)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixOnLinkFlag"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixAutonomousFlag"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixLifetimeType"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixPreferredLifetime"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixValidLifetime"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixRowStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixAdvertiseFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvPrefixGroup = hpicfIpv6RtrAdvPrefixGroup.setStatus('current')
hpicfIpv6RtrAdvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 12)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvCurHopLimitMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvGroup = hpicfIpv6RtrAdvGroup.setStatus('deprecated')
hpicfGlobalIpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 13)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdEnable"), ("HP-ICF-IP-ROUTING", "hpicfSourceRouteEnable"), ("HP-ICF-IP-ROUTING", "hpicfIpMaximumPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGlobalIpConfigGroup = hpicfGlobalIpConfigGroup.setStatus('current')
hpicfIpDefaultRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 14)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixOnLink"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixAutonomous"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixValidLifeTime"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterPrefixPrefdLifeTime"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterMTU"), ("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterHopLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDefaultRouterGroup = hpicfIpDefaultRouterGroup.setStatus('current')
hpicfIpv6NDRAAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 15)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRAAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRAAdminGroup = hpicfIpv6NDRAAdminGroup.setStatus('current')
hpicfIpRouteBaseScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 16)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteCount"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteNextHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteBaseScalarsGroup = hpicfIpRouteBaseScalarsGroup.setStatus('current')
hpicfIpStaticRouteOtherGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 17)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteOtherGroup = hpicfIpStaticRouteOtherGroup.setStatus('deprecated')
hpicfIpRouteSummaryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 18)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteSummaryTableGroup = hpicfIpRouteSummaryTableGroup.setStatus('current')
hpicfInetCidrRouteGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 19)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteGroup1 = hpicfInetCidrRouteGroup1.setStatus('current')
hpicfInetCidrRouteStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 20)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrNumRouteDestinations"), ("HP-ICF-IP-ROUTING", "hpicfInetCidrNumRouteRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteStatsGroup = hpicfInetCidrRouteStatsGroup.setStatus('current')
hpicfIpv6RtrAdvDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 21)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouterAdvertSendDNSAdverts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvDNSGroup = hpicfIpv6RtrAdvDNSGroup.setStatus('current')
hpicfIpv6NDRADNSAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 22)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRADNSAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRADNSAdminGroup = hpicfIpv6NDRADNSAdminGroup.setStatus('current')
hpicfIpStaticRouteNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 23)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteNameGroup = hpicfIpStaticRouteNameGroup.setStatus('deprecated')
hpicfIpv6RouteSummaryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 24)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouteProto"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RouteCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RouteSummaryTableGroup = hpicfIpv6RouteSummaryTableGroup.setStatus('current')
hpicfDBroadcastFwdAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 25)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdAcl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDBroadcastFwdAclGroup = hpicfDBroadcastFwdAclGroup.setStatus('current')
hpicfIpStaticRouteParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 26)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteParamGroup = hpicfIpStaticRouteParamGroup.setStatus('deprecated')
hpicfIpStaticRouteParamGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 28)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteDistance"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteTag"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteStatus"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteMetric"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteName"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteLogging"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteParamGroup1 = hpicfIpStaticRouteParamGroup1.setStatus('current')
hpicfIpStaticRouteBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 29)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdSrcAddrType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdSrcAddr"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdDstAddrType"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdDstAddr"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteBfdGroup = hpicfIpStaticRouteBfdGroup.setStatus('current')
hpicfIpv6RtrAdvParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 27)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvCurHopLimitMode"), ("HP-ICF-IP-ROUTING", "hpicfIpv6RouterAdvertRtrPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvParamGroup = hpicfIpv6RtrAdvParamGroup.setStatus('current')
hpicfIpRoutingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2))
hpicfIcmpRdiscCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 1)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpRdiscCompliance = hpicfIcmpRdiscCompliance.setStatus('current')
hpicfIcmpReplyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 2)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIcmpReplyCompliance = hpicfIcmpReplyCompliance.setStatus('current')
hpicfIpRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 3)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouterCompliance = hpicfIpRouterCompliance.setStatus('deprecated')
hpicfArpInfoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 4)).setObjects(("HP-ICF-IP-ROUTING", "hpicfArpBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpInfoCompliance = hpicfArpInfoCompliance.setStatus('current')
hpicfIpv6RtrAdvPrefixCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 5)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvPrefixGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvPrefixCompliance = hpicfIpv6RtrAdvPrefixCompliance.setStatus('current')
hpicfIpv6RtrAdvCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 6)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvCompliance = hpicfIpv6RtrAdvCompliance.setStatus('deprecated')
hpicfGlobalIpConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 7)).setObjects(("HP-ICF-IP-ROUTING", "hpicfGlobalIpConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGlobalIpConfigCompliance = hpicfGlobalIpConfigCompliance.setStatus('current')
hpicfIpDefaultRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 8)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpDefaultRouterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDefaultRouterCompliance = hpicfIpDefaultRouterCompliance.setStatus('current')
hpicfIpv6NDRAAdminCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 9)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRAAdminGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRAAdminCompliance = hpicfIpv6NDRAAdminCompliance.setStatus('current')
hpicfIpRouteBaseScalarsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 10)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteBaseScalarsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteBaseScalarsCompliance = hpicfIpRouteBaseScalarsCompliance.setStatus('current')
hpicfInetCidrRouteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 11)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteCompliance = hpicfInetCidrRouteCompliance.setStatus('current')
hpicfIpRouterOtherCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 12)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteOtherGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouterOtherCompliance = hpicfIpRouterOtherCompliance.setStatus('deprecated')
hpicfIpRouteSummaryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 13)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpRouteSummaryTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteSummaryCompliance = hpicfIpRouteSummaryCompliance.setStatus('current')
hpicfInetCidrRouteCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 14)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteCompliance1 = hpicfInetCidrRouteCompliance1.setStatus('current')
hpicfInetCidrRouteStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 15)).setObjects(("HP-ICF-IP-ROUTING", "hpicfInetCidrRouteStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetCidrRouteStatsCompliance = hpicfInetCidrRouteStatsCompliance.setStatus('current')
hpicfIpv6RtrAdvDNSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 16)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvDNSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvDNSCompliance = hpicfIpv6RtrAdvDNSCompliance.setStatus('current')
hpicfIpv6NDRADNSAdminCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 17)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6NDRADNSAdminGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDRADNSAdminCompliance = hpicfIpv6NDRADNSAdminCompliance.setStatus('current')
hpicfIpStaticRouteNameCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 18)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteNameCompliance = hpicfIpStaticRouteNameCompliance.setStatus('deprecated')
hpicfIpv6RouteSummaryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 19)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RouteSummaryTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RouteSummaryCompliance = hpicfIpv6RouteSummaryCompliance.setStatus('current')
hpicfIpDBroadcastFwdAclCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 20)).setObjects(("HP-ICF-IP-ROUTING", "hpicfDBroadcastFwdAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpDBroadcastFwdAclCompliance = hpicfIpDBroadcastFwdAclCompliance.setStatus('current')
hpicfIpRouteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 21)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpRouteCompliance = hpicfIpRouteCompliance.setStatus('deprecated')
hpicfIpv6RtrAdvParamCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 22)).setObjects(("HP-ICF-IP-ROUTING", "hpicfIpv6RtrAdvParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6RtrAdvParamCompliance = hpicfIpv6RtrAdvParamCompliance.setStatus('current')
hpicfIpStaticRouteCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2, 23)).setObjects(("HP-ICF-IP-ROUTING", "hpicfRdiscBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfRdiscIfCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyBaseGroup"), ("HP-ICF-IP-ROUTING", "hpicfIcmpReplyLimitGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpRouteCfgGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticNeighborGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpCidrRouteGroup"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteParamGroup1"), ("HP-ICF-IP-ROUTING", "hpicfIpStaticRouteBfdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpStaticRouteCompliance1 = hpicfIpStaticRouteCompliance1.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-IP-ROUTING", hpicfArpInfoCompliance=hpicfArpInfoCompliance, hpicfIpDefaultRouterProperties=hpicfIpDefaultRouterProperties, hpicfIpRoutingGroups=hpicfIpRoutingGroups, hpicfInetCidrRouteGroup1=hpicfInetCidrRouteGroup1, hpicfIpv6RtrAdvDNSCompliance=hpicfIpv6RtrAdvDNSCompliance, hpicfDBroadcastFwdEnable=hpicfDBroadcastFwdEnable, hpicfIpStaticRouteNameCompliance=hpicfIpStaticRouteNameCompliance, hpicfIpv6RtrAdvGroup=hpicfIpv6RtrAdvGroup, hpicfIcmpReplyLimit=hpicfIcmpReplyLimit, hpicfIpv6RouteSummaryCompliance=hpicfIpv6RouteSummaryCompliance, hpicfDBroadcastFwdAcl=hpicfDBroadcastFwdAcl, hpicfIpStaticRouteBfdDstAddrType=hpicfIpStaticRouteBfdDstAddrType, hpicfIpRouteCount=hpicfIpRouteCount, hpicfIpv6ND=hpicfIpv6ND, hpicfIpStaticRouteParamGroup1=hpicfIpStaticRouteParamGroup1, hpicfInetCidrRouteStatsGroup=hpicfInetCidrRouteStatsGroup, hpicfIpRouteProto=hpicfIpRouteProto, hpicfRdiscIfPreference=hpicfRdiscIfPreference, hpicfIpv6RouteProto=hpicfIpv6RouteProto, hpicfIpStaticRouteBfdSrcAddrType=hpicfIpStaticRouteBfdSrcAddrType, hpicfIpDefaultRouterMTU=hpicfIpDefaultRouterMTU, hpicfInetCidrRouteCompliance1=hpicfInetCidrRouteCompliance1, hpicfIpStaticRouteBfdGroup=hpicfIpStaticRouteBfdGroup, hpicfIpv6NDRADNSAdminStatus=hpicfIpv6NDRADNSAdminStatus, hpicfIpCidrRouteEntry=hpicfIpCidrRouteEntry, hpicfIpCidrRouteDistance=hpicfIpCidrRouteDistance, hpicfIpRoutingObjects=hpicfIpRoutingObjects, hpicfSourceRouteEnable=hpicfSourceRouteEnable, hpicfIpStaticRouteTag=hpicfIpStaticRouteTag, hpicfIpRouteBaseScalarsGroup=hpicfIpRouteBaseScalarsGroup, hpicfIpv6RtrAdvPrefixLength=hpicfIpv6RtrAdvPrefixLength, hpicfIpStaticRouteGroup=hpicfIpStaticRouteGroup, hpicfIpStaticNeighborEntry=hpicfIpStaticNeighborEntry, hpicfIpRouteCompliance=hpicfIpRouteCompliance, hpicfIpStaticNeighborPhysAddress=hpicfIpStaticNeighborPhysAddress, hpicfIpRouteSummary=hpicfIpRouteSummary, hpicfIpv6RtrAdvCompliance=hpicfIpv6RtrAdvCompliance, hpicfIpRouteCnt=hpicfIpRouteCnt, hpicfIpStaticRouteBfdTable=hpicfIpStaticRouteBfdTable, hpicfIpStaticNeighborTable=hpicfIpStaticNeighborTable, hpicfIpDefaultRouterAddressType=hpicfIpDefaultRouterAddressType, hpicfIpRouteCfgGroup=hpicfIpRouteCfgGroup, hpicfRdiscIfCfgTable=hpicfRdiscIfCfgTable, hpicfInetCidrRouteDistance=hpicfInetCidrRouteDistance, hpicfIpStaticRouteFwdAddr=hpicfIpStaticRouteFwdAddr, hpicfRdiscIfAdvertLifetime=hpicfRdiscIfAdvertLifetime, hpicfIcmpEchoBroadcastReplyEnable=hpicfIcmpEchoBroadcastReplyEnable, hpicfIpStaticRouteBfdDstAddr=hpicfIpStaticRouteBfdDstAddr, hpicfIpv6RtrAdvPrefixIfIndex=hpicfIpv6RtrAdvPrefixIfIndex, hpicfInetCidrRouteState=hpicfInetCidrRouteState, hpicfIpRouteSummaryTableGroup=hpicfIpRouteSummaryTableGroup, hpicfRdiscIfMaxAdvertInterval=hpicfRdiscIfMaxAdvertInterval, hpicfIpStaticRouteBfdEnable=hpicfIpStaticRouteBfdEnable, hpicfIpv6RtrAdvPrefixTable=hpicfIpv6RtrAdvPrefixTable, hpicfInetCidrRouteTable=hpicfInetCidrRouteTable, hpicfIcmpBoxLimits=hpicfIcmpBoxLimits, hpicfIpStaticRouteLogging=hpicfIpStaticRouteLogging, hpicfRdiscAdminStatus=hpicfRdiscAdminStatus, hpicfRdiscIfAdminStatus=hpicfRdiscIfAdminStatus, hpicfRdiscIfAdvertAddress=hpicfRdiscIfAdvertAddress, hpicfGlobalIpConfigCompliance=hpicfGlobalIpConfigCompliance, hpicfIpStaticRouteMetric=hpicfIpStaticRouteMetric, hpicfIpStaticRouteFwdIfIndex=hpicfIpStaticRouteFwdIfIndex, hpicfIpStaticRouteParamGroup=hpicfIpStaticRouteParamGroup, hpicfIpv6RtrAdvPrefixPrefix=hpicfIpv6RtrAdvPrefixPrefix, hpicfInetCidrRouteStatsCompliance=hpicfInetCidrRouteStatsCompliance, hpicfArpMcastReplies=hpicfArpMcastReplies, hpicfIpDefaultRouterPrefixOnLink=hpicfIpDefaultRouterPrefixOnLink, hpicfInetCidrNumRouteRoutes=hpicfInetCidrNumRouteRoutes, hpicfIpRoutingConformance=hpicfIpRoutingConformance, HpicfIpRouteProtoName=HpicfIpRouteProtoName, hpicfArpInfo=hpicfArpInfo, hpicfIpv6RtrAdvParamCompliance=hpicfIpv6RtrAdvParamCompliance, hpicfIpv6NDRAAdminGroup=hpicfIpv6NDRAAdminGroup, hpicfIpv6RtrAdvTable=hpicfIpv6RtrAdvTable, hpicfIpv6RtrAdvCurHopLimitMode=hpicfIpv6RtrAdvCurHopLimitMode, hpicfIpStaticRoutePrefixType=hpicfIpStaticRoutePrefixType, hpicfIpStaticRouteName=hpicfIpStaticRouteName, hpicfIpv6RtrAdvPrefixValidLifetime=hpicfIpv6RtrAdvPrefixValidLifetime, hpicfIpv6RtrAdvEntry=hpicfIpv6RtrAdvEntry, hpicfIpv6NDRAAdminCompliance=hpicfIpv6NDRAAdminCompliance, hpicfInetCidrRouteInfo=hpicfInetCidrRouteInfo, hpicfIcmpRateLimits=hpicfIcmpRateLimits, hpicfArpBaseGroup=hpicfArpBaseGroup, hpicfInetCidrRouteStatsTable=hpicfInetCidrRouteStatsTable, hpicfIpStaticNeighborGroup=hpicfIpStaticNeighborGroup, hpicfIcmpReplyLimitEnable=hpicfIcmpReplyLimitEnable, hpicfIpCidrRouteGroup=hpicfIpCidrRouteGroup, hpicfIpv6RtrAdvPrefixGroup=hpicfIpv6RtrAdvPrefixGroup, hpicfIpDefaultRouterPrefixTable=hpicfIpDefaultRouterPrefixTable, hpicfIcmpAddrMaskReplyEnable=hpicfIcmpAddrMaskReplyEnable, hpicfIcmpReplyCompliance=hpicfIcmpReplyCompliance, hpicfIpv6RtrAdvPrefixAutonomousFlag=hpicfIpv6RtrAdvPrefixAutonomousFlag, hpicfIpv6RtrAdvPrefixEntry=hpicfIpv6RtrAdvPrefixEntry, hpicfIpDefaultRouterEntry=hpicfIpDefaultRouterEntry, hpicfIpv6RtrAdvPrefixPreferredLifetime=hpicfIpv6RtrAdvPrefixPreferredLifetime, hpicfRdiscIfCfgGroup=hpicfRdiscIfCfgGroup, hpicfIpStaticRouteCompliance1=hpicfIpStaticRouteCompliance1, hpicfIpRouterCompliance=hpicfIpRouterCompliance, HpicfIpv6RouteProtoName=HpicfIpv6RouteProtoName, hpicfIcmpRedirectEnable=hpicfIcmpRedirectEnable, hpicfIpDefaultRouterPrefixAutonomous=hpicfIpDefaultRouterPrefixAutonomous, hpicfIpStaticRoutePrefixLength=hpicfIpStaticRoutePrefixLength, hpicfIpDefaultRouterPrefixPrefdLifeTime=hpicfIpDefaultRouterPrefixPrefdLifeTime, hpicfIpMaximumPaths=hpicfIpMaximumPaths, hpicfIpStaticRouteType=hpicfIpStaticRouteType, hpicfIpv6RtrAdvPrefixLifetimeType=hpicfIpv6RtrAdvPrefixLifetimeType, hpicfIpStaticRouteBfdSrcAddr=hpicfIpStaticRouteBfdSrcAddr, hpicfIpDefaultRouterIfIndex=hpicfIpDefaultRouterIfIndex, hpicfIpv6RouterAdvertSendDNSAdverts=hpicfIpv6RouterAdvertSendDNSAdverts, hpicfIcmpReplyBaseGroup=hpicfIcmpReplyBaseGroup, hpicfIpRouterOtherCompliance=hpicfIpRouterOtherCompliance, hpicfIpRouteSummaryCompliance=hpicfIpRouteSummaryCompliance, hpicfRdiscIfMinAdvertInterval=hpicfRdiscIfMinAdvertInterval, hpicfIpRouteStats=hpicfIpRouteStats, hpicfIpRouteEntry=hpicfIpRouteEntry, hpicfIpDefaultRouterPrefix=hpicfIpDefaultRouterPrefix, PYSNMP_MODULE_ID=hpicfIpRouting, hpicfIpDefaultRouterPrefixEntry=hpicfIpDefaultRouterPrefixEntry, hpicfIpv6RouteSummaryTableGroup=hpicfIpv6RouteSummaryTableGroup, hpicfIpv6RtrAdvPrefixOnLinkFlag=hpicfIpv6RtrAdvPrefixOnLinkFlag, hpicfIpStaticRouteFwdAddrType=hpicfIpStaticRouteFwdAddrType, hpicfIpv6RouterAdvertRtrPreference=hpicfIpv6RouterAdvertRtrPreference, hpicfIpStaticRouteOtherGroup=hpicfIpStaticRouteOtherGroup, hpicfIpv6NDRADNSAdminGroup=hpicfIpv6NDRADNSAdminGroup, hpicfIpDefaultRouterPrefixType=hpicfIpDefaultRouterPrefixType, hpicfIpv6RouteSummaryTable=hpicfIpv6RouteSummaryTable, hpicfRdiscBaseGroup=hpicfRdiscBaseGroup, hpicfInetCidrNumRouteDestinations=hpicfInetCidrNumRouteDestinations, hpicfInetCidrRouteStatsEntry=hpicfInetCidrRouteStatsEntry, hpicfIpDefaultRouterPrefixLength=hpicfIpDefaultRouterPrefixLength, hpicfIpv6NDRADNSAdminCompliance=hpicfIpv6NDRADNSAdminCompliance, hpicfIpv6RtrAdvPrefixRowStatus=hpicfIpv6RtrAdvPrefixRowStatus, hpicfIpRouteNextHopCount=hpicfIpRouteNextHopCount, hpicfIpRouteSummaryTable=hpicfIpRouteSummaryTable, hpicfIpStaticNeighborStatus=hpicfIpStaticNeighborStatus, hpicfIpCidrRouteTable=hpicfIpCidrRouteTable, hpicfIpStaticRouteNameGroup=hpicfIpStaticRouteNameGroup, hpicfIpStaticNeighborIfIndex=hpicfIpStaticNeighborIfIndex, hpicfIpv6RouteSummary=hpicfIpv6RouteSummary, hpicfIpStaticNeighborNetAddrType=hpicfIpStaticNeighborNetAddrType, hpicfGlobalIpConfig=hpicfGlobalIpConfig, hpicfIpv6NDRAAdminStatus=hpicfIpv6NDRAAdminStatus, hpicfIcmpRdiscCompliance=hpicfIcmpRdiscCompliance, hpicfIpRouteBaseScalars=hpicfIpRouteBaseScalars, hpicfIpStaticRouteTable=hpicfIpStaticRouteTable, hpicfIpDefaultRouterTable=hpicfIpDefaultRouterTable, hpicfIpRouting=hpicfIpRouting, hpicfIpv6RouteCnt=hpicfIpv6RouteCnt, hpicfRdiscIfCfgEntry=hpicfRdiscIfCfgEntry, hpicfIpStaticRouteStatus=hpicfIpStaticRouteStatus, hpicfIpDefaultRouterHopLimit=hpicfIpDefaultRouterHopLimit, hpicfIpStaticNeighborNetAddress=hpicfIpStaticNeighborNetAddress, hpicfIpDefaultRouterAddress=hpicfIpDefaultRouterAddress, hpicfIpv6RtrAdvPrefixCompliance=hpicfIpv6RtrAdvPrefixCompliance, hpicfIpStaticRouteDistance=hpicfIpStaticRouteDistance, hpicfInetCidrRouteCompliance=hpicfInetCidrRouteCompliance, hpicfIpDefaultRouterPrefixValidLifeTime=hpicfIpDefaultRouterPrefixValidLifeTime, hpicfInetCidrRouteEntry=hpicfInetCidrRouteEntry, hpicfIpv6RtrAdvDNSGroup=hpicfIpv6RtrAdvDNSGroup, hpicfDBroadcastFwdAclGroup=hpicfDBroadcastFwdAclGroup, hpicfIpv6RtrAdvParamGroup=hpicfIpv6RtrAdvParamGroup, hpicfInetCidrRouteGroup=hpicfInetCidrRouteGroup, hpicfIpStaticRouteBfdStatus=hpicfIpStaticRouteBfdStatus, hpicfIpStaticRouteBfdEntry=hpicfIpStaticRouteBfdEntry, hpicfIpDBroadcastFwdAclCompliance=hpicfIpDBroadcastFwdAclCompliance, hpicfIpv6RtrAdvPrefixType=hpicfIpv6RtrAdvPrefixType, hpicfIpRoutingCompliances=hpicfIpRoutingCompliances, hpicfIpRouteBaseScalarsCompliance=hpicfIpRouteBaseScalarsCompliance, hpicfIpDefaultRouterCompliance=hpicfIpDefaultRouterCompliance, hpicfIcmpReplyLimitGroup=hpicfIcmpReplyLimitGroup, hpicfIpStaticRouteEntry=hpicfIpStaticRouteEntry, hpicfGlobalIpConfigGroup=hpicfGlobalIpConfigGroup, hpicfIpv6RtrAdvPrefixAdvertiseFlag=hpicfIpv6RtrAdvPrefixAdvertiseFlag, hpicfIpDefaultRouterGroup=hpicfIpDefaultRouterGroup, hpicfArpAgingTime=hpicfArpAgingTime, hpicfIpv6RouteEntry=hpicfIpv6RouteEntry, hpicfIcmpDestUnreachEnable=hpicfIcmpDestUnreachEnable, hpicfIpStaticRouteConfig=hpicfIpStaticRouteConfig, hpicfIpStaticRoutePrefix=hpicfIpStaticRoutePrefix, hpicfIcmpRdisc=hpicfIcmpRdisc, hpicfIpDefaultRouterPrefixInfo=hpicfIpDefaultRouterPrefixInfo)
