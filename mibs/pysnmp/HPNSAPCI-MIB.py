#
# PySNMP MIB module HPNSAPCI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAPCI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, iso, TimeTicks, Counter64, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "iso", "TimeTicks", "Counter64", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaPci = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 10))
hpnsaPciMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 1))
hpnsaPciAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2))
hpnsaPciBios = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 3))
hpnsaPciConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4))
hpnsaPciMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciMibRevMajor.setStatus('mandatory')
hpnsaPciMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciMibRevMinor.setStatus('mandatory')
hpnsaPciAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1), )
if mibBuilder.loadTexts: hpnsaPciAgentTable.setStatus('mandatory')
hpnsaPciAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1, 1), ).setIndexNames((0, "HPNSAPCI-MIB", "hpnsaPciAgentIndex"))
if mibBuilder.loadTexts: hpnsaPciAgentEntry.setStatus('mandatory')
hpnsaPciAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciAgentIndex.setStatus('mandatory')
hpnsaPciAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciAgentName.setStatus('mandatory')
hpnsaPciAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciAgentVersion.setStatus('mandatory')
hpnsaPciAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciAgentDate.setStatus('mandatory')
hpnsaPciBiosPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notPresent", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBiosPresent.setStatus('mandatory')
hpnsaPciBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBiosVersion.setStatus('mandatory')
hpnsaPciBuses = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBuses.setStatus('mandatory')
hpnsaPciTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1), )
if mibBuilder.loadTexts: hpnsaPciTable.setStatus('mandatory')
hpnsaPciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1), ).setIndexNames((0, "HPNSAPCI-MIB", "hpnsaPciBusIndex"), (0, "HPNSAPCI-MIB", "hpnsaPciDeviceIndex"), (0, "HPNSAPCI-MIB", "hpnsaPciFunctionIndex"))
if mibBuilder.loadTexts: hpnsaPciEntry.setStatus('mandatory')
hpnsaPciBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBusIndex.setStatus('mandatory')
hpnsaPciDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciDeviceIndex.setStatus('mandatory')
hpnsaPciFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciFunctionIndex.setStatus('mandatory')
hpnsaPciVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4098, 4099, 4100, 4101, 4102, 4103, 4104, 4106, 4107, 4108, 4109, 4110, 4112, 4113, 4114, 4115, 4116, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4136, 4137, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4236, 4237, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4363, 4364, 4365), SingleValueConstraint(4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4388, 4389, 4389, 4393, 4394, 4395, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 21299, 22272))).clone(namedValues=NamedValues(("ati-technologies-inc", 4098), ("ulsi-systems", 4099), ("vlsi-technology-inc", 4100), ("avance-logics-inc", 4101), ("reply-group", 4102), ("netframe-systems-inc", 4103), ("epson", 4104), ("phoenix-technologies", 4106), ("national-semiconductor", 4107), ("tseng-labs-inc", 4108), ("ast-research-inc", 4109), ("weitek", 4110), ("video-logic-ltd", 4112), ("dec", 4113), ("micronics-computers-inc", 4114), ("cirrus-logic", 4115), ("ibm", 4116), ("icl-personal-systems", 4118), ("spea-software-ag", 4119), ("unisys-systems", 4120), ("elitegroup-computer-sys", 4121), ("ncr", 4122), ("vitesse-semiconductor", 4123), ("western-digital", 4124), ("american-megatrends", 4126), ("picture-tel", 4127), ("hitachi-computer-products", 4128), ("oki-electric-industry", 4129), ("advanced-micro-devices", 4130), ("trident-microsystems", 4131), ("zenith-data-systems", 4132), ("acer-incorporated", 4133), ("dell-computer-corporation", 4136), ("siemens-nixdorf-is-ag", 4137), ("matrox", 4139), ("chips-and-technologies", 4140), ("wyse-technology", 4141), ("olivetti-advanced-technology", 4142), ("toshiba-america-elect", 4143), ("tmc-research", 4144), ("miro-computer-products-ag", 4145), ("compaq", 4146), ("nec-corporation", 4147), ("burndy-corporation", 4148), ("comp-comm-resh-lab", 4149), ("future-domain", 4150), ("hitachi-micro-systems", 4151), ("amp-inc", 4152), ("silicon-integrated-system", 4153), ("seiko-epson-corporation", 4154), ("tatung-co-of-america", 4155), ("hewlett-packard", 4156), ("solliday-engineering", 4158), ("logic-modeling", 4159), ("kubota-pacific-computer-inc", 4160), ("computrend", 4161), ("pc-technology-inc", 4162), ("asustek-computer-inc", 4163), ("distributed-processing-technology", 4164), ("opti", 4165), ("ipc-corporation-ltd", 4166), ("genoa-systems-corp", 4167), ("elsa-gmbh", 4168), ("fountain-technology", 4169), ("sgs-thomson-microelectric", 4170), ("buslogic", 4171), ("texas-instruments", 4172), ("sony-corporation", 4173), ("oak-technology-inc", 4174), ("co-time-computer-ltd", 4175), ("winbond-electronics-corp", 4176), ("anigma-inc", 4177), ("young-micro-systems", 4178), ("hitachi-ltd", 4180), ("efar-microsystems", 4181), ("icl", 4182), ("motorola-computer", 4183), ("electronics-telec-rsh", 4184), ("teknor-microsystems", 4185), ("promise-technology", 4186), ("foxconn-international", 4187), ("wipro-infotech-limited", 4188), ("number-9-computer-company", 4189), ("vtech-computers-limites", 4190), ("infotronic-america-inc", 4191), ("united-microelectronics", 4192), ("i-t-t", 4193), ("maspar-computer-corp", 4194), ("ocean-office-automation", 4195), ("alcatel-cit", 4196), ("texas-microsystems", 4197), ("picopower-technology", 4198), ("mitsubishi-electronics", 4199), ("diversified-technology", 4200), ("mylex-corporation", 4201), ("aten-research-inc", 4202), ("apple-computer-inc", 4203), ("madge-networks", 4203), ("hyundai-electronics-ameri", 4204), ("sequent", 4205), ("dfi-inc", 4206), ("city-gate-development-ltd", 4207), ("daewoo-telecom-ltd", 4208), ("mitac", 4209), ("git-co-ltd", 4210), ("yamaha-corporation", 4211), ("nexgen-microsysteme", 4212), ("advanced-integration-res", 4213), ("chaintech-computer-co-ltd", 4214), ("q-logic", 4215), ("cyrix-corporation", 4216), ("i-bus", 4217), ("networth", 4218), ("gateway-2000", 4219), ("goldstar-co-ltd", 4220), ("leadtek-research-inc", 4221), ("interphase-corporation", 4222), ("data-technology-corporation", 4223), ("contaq-microsystems-inc", 4224), ("supermac-technology-inc", 4225), ("efa-corporation-of-america", 4226), ("forex-computer-corporation", 4227), ("parador", 4228), ("tulip-computers-int-bv", 4229), ("j-bond-computer-systems", 4230), ("cache-computer", 4231), ("microcomputer-systems-m-son", 4232), ("data-general-corporation", 4233), ("bit3-computer", 4234), ("oakleigh-systems-inc", 4236), ("olicom", 4237), ("systemsoft-corporation", 4239), ("encore-computer-corporation", 4240), ("intergraph-corporation", 4241), ("diamond-computer-systems", 4242), ("national-instruments", 4243), ("first-intl-computers", 4244), ("cmd-technology-inc", 4245), ("alacron", 4246), ("appian-technology-inc", 4247), ("quantum-designs-hk-ltd", 4248), ("samsung-electronics-co-ltd", 4249), ("packard-bell", 4250), ("gemlight-computer-ltd", 4251), ("megachips-corporation", 4252), ("zida-technologies-ltd", 4253), ("brooktree-corporation", 4254), ("trigem-computer-inc", 4255), ("meidensha-corporation", 4256), ("juko-electronics-ind-co-ltd", 4257), ("quantum-corporation", 4258), ("everex-systems-inc", 4259), ("globe-manufacturing-sales", 4260), ("racal-interlan", 4261), ("informtech-industrial-ltd", 4262), ("benchmarq-microelectronics", 4263), ("sierra-semiconductor", 4264), ("silicon-graphics", 4265), ("acc-microelectronics-corp", 4266), ("digicom", 4267), ("honeywell-iasd", 4268), ("symphony-labs", 4269), ("cornerstone-technology", 4270), ("micro-computer-sysytems-inc", 4271), ("cardexpert-technology", 4272), ("cabletron-systems-inc", 4273), ("raytheon-company", 4274), ("databook-inc", 4275), ("stb-systems-inc", 4276), ("plx-technology", 4277), ("three-3com-corporation", 4279), ("standard-microsystems-corporation", 4280), ("acer-labs", 4281), ("mitsubishi-electronics-corp", 4282), ("dapha-electronics-corporation", 4283), ("advanced-logic-research-inc", 4284), ("surecom-technology", 4285), ("tsenglabs-international-co", 4286), ("most-inc", 4287), ("boca-research-inc", 4288), ("icm-co-ltd", 4289), ("auspex-systems-inc", 4290), ("samsung-semiconductors", 4291), ("award-software-intl-inc", 4292), ("xerox-corporation", 4293), ("rambus-inc", 4294), ("media-vision", 4295), ("neomagic-corporation", 4296), ("dataexpert-corporation", 4297), ("fujitsu", 4298), ("omron-corporation", 4299), ("mentor-arc-inc", 4300), ("advanced-system-products", 4301), ("radius-inc", 4302), ("citicorp-tti", 4303), ("fujitsu-limited", 4304), ("future-systems", 4305), ("molex-incorporated", 4306), ("jabil-circuit-inc", 4307), ("hualon-microelectronics", 4308), ("autologic-inc", 4309), ("cetia", 4310), ("advanced-peripherals-labs", 4312), ("macronix-international-co-ltd", 4313), ("thomas-conrad-corporation", 4314), ("rohm-research", 4315), ("cern-ecp-edu", 4316), ("evans-sutherland", 4317), ("nvidia-corporation", 4318), ("emulex-corporation", 4319), ("integrated-micro-solutions-inc", 4320), ("tekram-technology-co-ltd", 4321), ("aptix-corporation", 4322), ("newbridge-microsystems", 4323), ("tandem-computers", 4324), ("micro-industries-corporation", 4325), ("gainbery-computer-products-inc", 4326), ("vadem", 4327), ("applied-micro-circuits-corporation", 4328), ("alps-electric-co-ltd", 4329), ("integraphics-systems", 4330), ("artists-graphics", 4331), ("realtek-semiconductor-co-ltd", 4332), ("ascii-corporation", 4333), ("xilinx-corporation", 4334), ("racore-computer-products-inc", 4335), ("peritek-corporation", 4336), ("tyan-computer", 4337), ("achme-computer-inc", 4338), ("alaris-inc", 4339), ("s-mos-systems", 4340), ("nkk-corporation", 4341), ("creative-electronic-systems-sa", 4342), ("matsushita-electric-industrial-co-ltd", 4343), ("altos-india-ltd", 4344), ("pc-direct", 4345), ("truevision", 4346), ("thesys-ges-f-mikroelektronik-mgh", 4347), ("i-o-data-device-inc", 4348), ("soyo-technology-co-ltd", 4349), ("fast-electronic-gmbh", 4350), ("ncube", 4351), ("jazz-multimedia", 4352), ("initio-corporation", 4353), ("creative-labs", 4354), ("triones-technologies-inc", 4355), ("rasterops", 4356), ("sigma-designs-inc", 4357), ("via-technologies-inc", 4358), ("stratus-computer", 4359), ("proteon-inc", 4360), ("cogent-data-technologies", 4361), ("xenon-microsystems", 4363), ("mini-max-technology-inc", 4364), ("znyx-advanced-systems", 4365)) + NamedValues(("cpu-technology", 4366), ("ross-technology", 4367), ("powerhouse-systems", 4368), ("santa-cruz-operation", 4369), ("rockwell-network-systems", 4370), ("accton-technology-corporation", 4371), ("atmel-corp", 4372), ("three-3dlabs", 4373), ("data-translation", 4374), ("datacube-inc", 4375), ("berg-electronics", 4376), ("vortex-computersysteme-gmbh", 4377), ("efficent-networks-inc", 4378), ("teledyne-electronic-systems", 4379), ("tricord-systems-inc", 4380), ("integrated-device-tech", 4381), ("eldec-corporaton", 4382), ("prescision-digital-images", 4383), ("emc-corporation", 4384), ("zilog", 4385), ("multi-tech-systems-inc", 4386), ("leutron-vision-ag", 4388), ("eurocore", 4389), ("vigra", 4389), ("firmworks", 4393), ("hermes-electronics-co-ltd", 4394), ("linotype-hell-ag", 4395), ("ravicad", 4397), ("infomedia-microelectronics-inc", 4398), ("imaging-technology-inc", 4399), ("computervision", 4400), ("philips-semiconductors", 4401), ("mitel-corp", 4402), ("eicon-technology-corporation", 4403), ("mercury-computer-systems-inc", 4404), ("fuji-xerox-co-ltd", 4405), ("momentum-data-systems", 4406), ("cisco-systems-inc", 4407), ("ziatech-corporation", 4408), ("dynamic-pictures-inc", 4409), ("fwb-inc", 4410), ("cyclone-micro", 4412), ("leading-edge-products-inc", 4413), ("sanyo-electric-co", 4414), ("equinox-systems", 4415), ("intervoice-inc", 4416), ("crest-microsystem-inc", 4417), ("alliance-semiconductor-corporation", 4418), ("netpower-inc", 4419), ("cincinnati-milacron", 4420), ("workbit-corp", 4421), ("force-computers", 4422), ("interface-corp", 4423), ("schneider-koch-co", 4424), ("win-system-corporation", 4425), ("vmic", 4426), ("canopus-co-ltd", 4427), ("annabooks", 4428), ("ic-corporation", 4429), ("nikon-systems-inc", 4430), ("digi-international", 4431), ("thinking-machines-corp", 4432), ("jae-electronics-inc", 4433), ("megatek", 4434), ("land-win-electronic-corp", 4435), ("melco-inc", 4436), ("pine-technology-ltd", 4437), ("periscope-engineering", 4438), ("s3-inc", 21299), ("netpower", 22272)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciVendorId.setStatus('mandatory')
hpnsaPciDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciDeviceId.setStatus('mandatory')
hpnsaPciRevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciRevisionId.setStatus('mandatory')
hpnsaPciHeaderType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciHeaderType.setStatus('mandatory')
hpnsaPciClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciClassCode.setStatus('mandatory')
hpnsaPciCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciCommand.setStatus('mandatory')
hpnsaPciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciStatus.setStatus('mandatory')
hpnsaPciCacheLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciCacheLineSize.setStatus('mandatory')
hpnsaPciLatencyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciLatencyTimer.setStatus('mandatory')
hpnsaPciBist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBist.setStatus('mandatory')
hpnsaPciInterruptLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciInterruptLine.setStatus('mandatory')
hpnsaPciInterruptPin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciInterruptPin.setStatus('mandatory')
hpnsaPciMaxLat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciMaxLat.setStatus('mandatory')
hpnsaPciMinGnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciMinGnt.setStatus('mandatory')
hpnsaPciBaseAddrRegs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciBaseAddrRegs.setStatus('mandatory')
hpnsaPciExpRomBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciExpRomBaseAddr.setStatus('mandatory')
hpnsaPciDeviceSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 10, 4, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(192, 192)).setFixedLength(192)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPciDeviceSpecific.setStatus('mandatory')
mibBuilder.exportSymbols("HPNSAPCI-MIB", hpnsaPciInterruptLine=hpnsaPciInterruptLine, hpnsaPciDeviceSpecific=hpnsaPciDeviceSpecific, hpnsaPciConfig=hpnsaPciConfig, hpnsaPciDeviceId=hpnsaPciDeviceId, hpnsaPciLatencyTimer=hpnsaPciLatencyTimer, hpnsaPciHeaderType=hpnsaPciHeaderType, hpnsaPciMinGnt=hpnsaPciMinGnt, hpnsa=hpnsa, hpnsaPciAgentName=hpnsaPciAgentName, hpnsaPciBiosVersion=hpnsaPciBiosVersion, hpnsaPciMibRev=hpnsaPciMibRev, hpnsaPciAgent=hpnsaPciAgent, hpnsaPciCacheLineSize=hpnsaPciCacheLineSize, hpnsaPciCommand=hpnsaPciCommand, nm=nm, hpnsaPciStatus=hpnsaPciStatus, hpnsaPciBios=hpnsaPciBios, hpnsaPciMaxLat=hpnsaPciMaxLat, hp=hp, hpnsaPciAgentIndex=hpnsaPciAgentIndex, hpnsaPciClassCode=hpnsaPciClassCode, hpnsaPciAgentTable=hpnsaPciAgentTable, hpnsaPciMibRevMinor=hpnsaPciMibRevMinor, hpnsaPciAgentVersion=hpnsaPciAgentVersion, hpnsaPciEntry=hpnsaPciEntry, hpnsaPciBusIndex=hpnsaPciBusIndex, hpnsaPciBaseAddrRegs=hpnsaPciBaseAddrRegs, hpnsaPciAgentDate=hpnsaPciAgentDate, hpnsaPciVendorId=hpnsaPciVendorId, hpnsaPciBuses=hpnsaPciBuses, hpnsaPciRevisionId=hpnsaPciRevisionId, hpnsaPci=hpnsaPci, hpnsaPciBiosPresent=hpnsaPciBiosPresent, hpnsaPciFunctionIndex=hpnsaPciFunctionIndex, hpnsaPciMibRevMajor=hpnsaPciMibRevMajor, hpnsaPciBist=hpnsaPciBist, hpnsaPciInterruptPin=hpnsaPciInterruptPin, hpnsaPciDeviceIndex=hpnsaPciDeviceIndex, hpnsaPciExpRomBaseAddr=hpnsaPciExpRomBaseAddr, hpnsaPciAgentEntry=hpnsaPciAgentEntry, hpnsaPciTable=hpnsaPciTable)
