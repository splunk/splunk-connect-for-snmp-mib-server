#
# PySNMP MIB module ALCATEL-IND1-PIM-BSR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-PIM-BSR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Pim, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Pim")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Integer32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ModuleIdentity, TimeTicks, iso, IpAddress, Bits, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ModuleIdentity", "TimeTicks", "iso", "IpAddress", "Bits", "Gauge32", "MibIdentifier")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
alaPimBsrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3))
alaPimBsrMIB.setRevisions(('2007-07-02 00:00',))
if mibBuilder.loadTexts: alaPimBsrMIB.setLastUpdated('200707020000Z')
if mibBuilder.loadTexts: alaPimBsrMIB.setOrganization('Alcatel-Lucent')
alaPimBsrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 0))
alaPimBsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1))
alaPimBsrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2))
alaPimBsrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2, 1))
alaPimBsrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2, 2))
alaPimBsrCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1), )
if mibBuilder.loadTexts: alaPimBsrCandidateRPTable.setStatus('current')
alaPimBsrCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPAddressType"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPAddress"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPGroupAddress"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPGroupPrefixLength"))
if mibBuilder.loadTexts: alaPimBsrCandidateRPEntry.setStatus('current')
alaPimBsrCandidateRPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaPimBsrCandidateRPAddressType.setStatus('current')
alaPimBsrCandidateRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaPimBsrCandidateRPAddress.setStatus('current')
alaPimBsrCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaPimBsrCandidateRPGroupAddress.setStatus('current')
alaPimBsrCandidateRPGroupPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaPimBsrCandidateRPGroupPrefixLength.setStatus('current')
alaPimBsrCandidateRPBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateRPBidir.setStatus('current')
alaPimBsrCandidateRPAdvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrCandidateRPAdvTimer.setStatus('current')
alaPimBsrCandidateRPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateRPPriority.setStatus('current')
alaPimBsrCandidateRPAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26214)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateRPAdvInterval.setStatus('current')
alaPimBsrCandidateRPHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateRPHoldtime.setStatus('current')
alaPimBsrCandidateRPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateRPStatus.setStatus('current')
alaPimBsrElectedBSRRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2), )
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetTable.setStatus('current')
alaPimBsrElectedBSRRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRGrpMappingAddrType"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRGrpMappingGrpAddr"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRGrpMappingGrpPrefixLen"), (0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRGrpMappingRPAddr"))
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetEntry.setStatus('current')
alaPimBsrElectedBSRGrpMappingAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaPimBsrElectedBSRGrpMappingAddrType.setStatus('current')
alaPimBsrElectedBSRGrpMappingGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaPimBsrElectedBSRGrpMappingGrpAddr.setStatus('current')
alaPimBsrElectedBSRGrpMappingGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: alaPimBsrElectedBSRGrpMappingGrpPrefixLen.setStatus('current')
alaPimBsrElectedBSRGrpMappingRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: alaPimBsrElectedBSRGrpMappingRPAddr.setStatus('current')
alaPimBsrElectedBSRRPSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetPriority.setStatus('current')
alaPimBsrElectedBSRRPSetHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetHoldtime.setStatus('current')
alaPimBsrElectedBSRRPSetExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetExpiryTime.setStatus('current')
alaPimBsrElectedBSRRPSetGrpBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRRPSetGrpBidir.setStatus('current')
alaPimBsrCandidateBSRTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3), )
if mibBuilder.loadTexts: alaPimBsrCandidateBSRTable.setStatus('current')
alaPimBsrCandidateBSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRAddressType"))
if mibBuilder.loadTexts: alaPimBsrCandidateBSREntry.setStatus('current')
alaPimBsrCandidateBSRAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaPimBsrCandidateBSRAddressType.setStatus('current')
alaPimBsrCandidateBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRAddress.setStatus('current')
alaPimBsrCandidateBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRPriority.setStatus('current')
alaPimBsrCandidateBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRHashMaskLength.setStatus('current')
alaPimBsrCandidateBSRElectedBSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRElectedBSR.setStatus('current')
alaPimBsrCandidateBSRBootstrapTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRBootstrapTimer.setStatus('current')
alaPimBsrCandidateBSRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaPimBsrCandidateBSRStatus.setStatus('current')
alaPimBsrElectedBSRTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4), )
if mibBuilder.loadTexts: alaPimBsrElectedBSRTable.setStatus('current')
alaPimBsrElectedBSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRAddressType"))
if mibBuilder.loadTexts: alaPimBsrElectedBSREntry.setStatus('current')
alaPimBsrElectedBSRAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaPimBsrElectedBSRAddressType.setStatus('current')
alaPimBsrElectedBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRAddress.setStatus('current')
alaPimBsrElectedBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRPriority.setStatus('current')
alaPimBsrElectedBSRHashMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRHashMaskLength.setStatus('current')
alaPimBsrElectedBSRExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaPimBsrElectedBSRExpiryTime.setStatus('current')
alaPimBsrElectedBSRLostElection = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 0, 1)).setObjects(("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRElectedBSR"))
if mibBuilder.loadTexts: alaPimBsrElectedBSRLostElection.setStatus('current')
alaPimBsrCandidateBSRWinElection = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 0, 2)).setObjects(("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRElectedBSR"))
if mibBuilder.loadTexts: alaPimBsrCandidateBSRWinElection.setStatus('current')
alaPimBsrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2, 1, 1)).setObjects(("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrObjectGroup"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrDiagnosticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimBsrCompliance = alaPimBsrCompliance.setStatus('current')
alaPimBsrObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2, 2, 1)).setObjects(("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPBidir"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPAdvTimer"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPPriority"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPAdvInterval"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPHoldtime"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateRPStatus"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRRPSetPriority"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRRPSetHoldtime"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRRPSetExpiryTime"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRRPSetGrpBidir"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRAddress"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRPriority"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRHashMaskLength"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRElectedBSR"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRBootstrapTimer"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRStatus"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRAddress"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRPriority"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRHashMaskLength"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimBsrObjectGroup = alaPimBsrObjectGroup.setStatus('current')
alaPimBsrDiagnosticsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 6, 3, 2, 2, 2)).setObjects(("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrElectedBSRLostElection"), ("ALCATEL-IND1-PIM-BSR-MIB", "alaPimBsrCandidateBSRWinElection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPimBsrDiagnosticsGroup = alaPimBsrDiagnosticsGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-PIM-BSR-MIB", alaPimBsrElectedBSRGrpMappingGrpPrefixLen=alaPimBsrElectedBSRGrpMappingGrpPrefixLen, alaPimBsrElectedBSRGrpMappingAddrType=alaPimBsrElectedBSRGrpMappingAddrType, alaPimBsrElectedBSRRPSetEntry=alaPimBsrElectedBSRRPSetEntry, alaPimBsrCandidateBSRStatus=alaPimBsrCandidateBSRStatus, alaPimBsrCandidateRPHoldtime=alaPimBsrCandidateRPHoldtime, alaPimBsrCandidateBSREntry=alaPimBsrCandidateBSREntry, alaPimBsrCandidateBSRHashMaskLength=alaPimBsrCandidateBSRHashMaskLength, alaPimBsrCandidateBSRTable=alaPimBsrCandidateBSRTable, alaPimBsrElectedBSRGrpMappingRPAddr=alaPimBsrElectedBSRGrpMappingRPAddr, alaPimBsrCompliance=alaPimBsrCompliance, alaPimBsrElectedBSRAddress=alaPimBsrElectedBSRAddress, alaPimBsrCandidateBSRElectedBSR=alaPimBsrCandidateBSRElectedBSR, alaPimBsrElectedBSRRPSetPriority=alaPimBsrElectedBSRRPSetPriority, alaPimBsrDiagnosticsGroup=alaPimBsrDiagnosticsGroup, alaPimBsrCandidateBSRPriority=alaPimBsrCandidateBSRPriority, alaPimBsrCandidateRPBidir=alaPimBsrCandidateRPBidir, alaPimBsrElectedBSRExpiryTime=alaPimBsrElectedBSRExpiryTime, alaPimBsrElectedBSRGrpMappingGrpAddr=alaPimBsrElectedBSRGrpMappingGrpAddr, alaPimBsrElectedBSRRPSetGrpBidir=alaPimBsrElectedBSRRPSetGrpBidir, alaPimBsrElectedBSRLostElection=alaPimBsrElectedBSRLostElection, alaPimBsrElectedBSRPriority=alaPimBsrElectedBSRPriority, alaPimBsrCandidateBSRWinElection=alaPimBsrCandidateBSRWinElection, alaPimBsrCandidateRPTable=alaPimBsrCandidateRPTable, alaPimBsrElectedBSRAddressType=alaPimBsrElectedBSRAddressType, PYSNMP_MODULE_ID=alaPimBsrMIB, alaPimBsrCandidateRPPriority=alaPimBsrCandidateRPPriority, alaPimBsrMIB=alaPimBsrMIB, alaPimBsrCandidateRPStatus=alaPimBsrCandidateRPStatus, alaPimBsrCandidateBSRAddress=alaPimBsrCandidateBSRAddress, alaPimBsrCompliances=alaPimBsrCompliances, alaPimBsrObjects=alaPimBsrObjects, alaPimBsrObjectGroup=alaPimBsrObjectGroup, alaPimBsrElectedBSRRPSetExpiryTime=alaPimBsrElectedBSRRPSetExpiryTime, alaPimBsrGroups=alaPimBsrGroups, alaPimBsrCandidateRPAddressType=alaPimBsrCandidateRPAddressType, alaPimBsrElectedBSRRPSetTable=alaPimBsrElectedBSRRPSetTable, alaPimBsrCandidateRPEntry=alaPimBsrCandidateRPEntry, alaPimBsrElectedBSRHashMaskLength=alaPimBsrElectedBSRHashMaskLength, alaPimBsrElectedBSREntry=alaPimBsrElectedBSREntry, alaPimBsrElectedBSRRPSetHoldtime=alaPimBsrElectedBSRRPSetHoldtime, alaPimBsrCandidateBSRBootstrapTimer=alaPimBsrCandidateBSRBootstrapTimer, alaPimBsrNotifications=alaPimBsrNotifications, alaPimBsrCandidateRPGroupAddress=alaPimBsrCandidateRPGroupAddress, alaPimBsrCandidateRPGroupPrefixLength=alaPimBsrCandidateRPGroupPrefixLength, alaPimBsrCandidateBSRAddressType=alaPimBsrCandidateBSRAddressType, alaPimBsrConformance=alaPimBsrConformance, alaPimBsrElectedBSRTable=alaPimBsrElectedBSRTable, alaPimBsrCandidateRPAddress=alaPimBsrCandidateRPAddress, alaPimBsrCandidateRPAdvInterval=alaPimBsrCandidateRPAdvInterval, alaPimBsrCandidateRPAdvTimer=alaPimBsrCandidateRPAdvTimer)
