#
# PySNMP MIB module INTEL-GEN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-GEN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, NotificationType, ObjectIdentity, IpAddress, TimeTicks, ModuleIdentity, NotificationType, Gauge32, enterprises, iso, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks", "ModuleIdentity", "NotificationType", "Gauge32", "enterprises", "iso", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
sysProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5))
switches = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1))
express10 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 1))
express10plus = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 2))
express100fx = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 3))
express550t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 4))
express550f = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 5))
express510t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 6))
express520t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 7))
expressGigaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 8))
express460t_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 9)).setLabel("express460t-16")
express460t_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 10)).setLabel("express460t-24")
nstructure560t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 11))
nstructure560tr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 13))
nstructure560fr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 14))
routers = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2))
express9100 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 1))
express920x = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 2))
express9300 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 3))
express9400 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 4))
express8100st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 5))
express8100u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 6))
express8100x = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 7))
express8100fr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 8))
express9520st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 9))
express9520u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 10))
express9510st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 11))
express9510u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 12))
express9515st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 13))
express9515u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 14))
express9525st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 15))
express9525u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 16))
express8210 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 17))
express8220 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 18))
express9530 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 19))
express9535 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 20))
express9545st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 21))
express9545u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 22))
express8100wV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 23))
express8100stV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 27))
express8100uV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 28))
hubs = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3))
express110_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 1)).setLabel("express110-12")
express110_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 2)).setLabel("express110-24")
express210_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 3)).setLabel("express210-12")
express210_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 4)).setLabel("express210-24")
express220_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 5)).setLabel("express220-12")
express220_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 6)).setLabel("express220-24")
express330_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 7)).setLabel("express330-16")
express330_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 8)).setLabel("express330-24")
stacks = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4))
nstructure560 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1))
nstructure560s = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1, 1))
nstructure560l3s = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1, 2))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 1))
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 2))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 3))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7))
stack = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 3))
mediamodules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 4))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 5))
stackext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 11))
chassisext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 12))
modulesext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13))
mediamodulesext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 14))
portsext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 15))
sysVendorName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVendorName.setStatus('mandatory')
sysProductName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductName.setStatus('mandatory')
sysProductSubType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductSubType.setStatus('mandatory')
sysMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMibVersion.setStatus('mandatory')
sysTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeOfDay.setStatus('mandatory')
sysSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemDate.setStatus('optional')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("resetCold", 1), ("resetWarm", 2), ("resetStackCold", 3), ("resetStackWarm", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
sysConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 1, 8), )
if mibBuilder.loadTexts: sysConfTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1) + (1000, ), Integer32())
sysConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: sysConfEntry.setStatus('mandatory')
confStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("default", 2), ("loaded", 3), ("changed", 4), ("saved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confStatus.setStatus('mandatory')
confName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confName.setStatus('mandatory')
confTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confTime.setStatus('mandatory')
confTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confTftpIp.setStatus('mandatory')
sysConfChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("useDefaultConf", 1), ("useDefaultConfKeepIp", 2), ("useBackupConf", 3), ("createBackupConf", 4), ("createDefBackupConf", 5), ("useStackBackupConf", 6), ("createStackBackupConf", 7), ("stackTftpUploadLock", 8), ("stackTftpUploadUnlockActivate", 9), ("stackTftpUploadUnlockCancel", 10), ("stackTftpUploadKeepAlive", 11), ("stackUseDefaultConf", 12), ("stackUseDefaultConfKeepIp", 13), ("stackCreateDefBackupConf", 14)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysConfChange.setStatus('mandatory')
sysLogTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 1, 10), )
if mibBuilder.loadTexts: sysLogTable.setStatus('mandatory')
sysLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "logType"))
if mibBuilder.loadTexts: sysLogEntry.setStatus('mandatory')
logType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logSystem", 1), ("logError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logType.setStatus('mandatory')
logEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logEntries.setStatus('mandatory')
logFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileName.setStatus('mandatory')
logLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLastChanged.setStatus('mandatory')
sysConfRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfRollbackTimeout.setStatus('mandatory')
sysConfChangeLastResponse = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 99))).clone(namedValues=NamedValues(("success", 1), ("noEditingRightsVlan", 2), ("noEditingRightsLocalParm", 3), ("flashOperationFailed", 4), ("flashOperationNothingToLoad", 5), ("tftpOperationFailed", 6), ("tftpOperationNoLock", 7), ("tftpOperationStackMemberMissingParmFile", 8), ("tftpOperationMissingParmFile", 9), ("tftpOperationMissingNvpFile", 10), ("tftpOperationMgtTimeout", 11), ("factoryDefaultOperationFailed", 12), ("stackMemberRejectsOperation", 13), ("intraStackCommunicationError", 16), ("internalError", 17), ("notReady", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfChangeLastResponse.setStatus('mandatory')
sysLocalMangementTimeout = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalMangementTimeout.setStatus('mandatory')
ipConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 2, 1), )
if mibBuilder.loadTexts: ipConfTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1) + (1001, ), Integer32())
ipConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: ipConfEntry.setStatus('mandatory')
ipAddressAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressAssignment.setStatus('mandatory')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddress.setStatus('mandatory')
ipSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSubNetMask.setStatus('mandatory')
ipRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterAddress.setStatus('mandatory')
ipBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBroadcastAddress.setStatus('mandatory')
ipBootpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBootpServerAddress.setStatus('mandatory')
ipConf2Activate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipConf2Activate.setStatus('mandatory')
ipModuleConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 2, 3), )
if mibBuilder.loadTexts: ipModuleConfTable.setStatus('optional')
ipModuleConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "ipModuleChassisIndex"), (0, "INTEL-GEN-MIB", "ipModuleModuleIndex"), (0, "INTEL-GEN-MIB", "ipModuleConfigIndex"))
if mibBuilder.loadTexts: ipModuleConfEntry.setStatus('mandatory')
ipModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleChassisIndex.setStatus('mandatory')
ipModuleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleModuleIndex.setStatus('mandatory')
ipModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleConfigIndex.setStatus('mandatory')
ipModuleAddressAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleAddressAssignment.setStatus('mandatory')
ipModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleAddress.setStatus('mandatory')
ipModuleSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleSubNetMask.setStatus('mandatory')
ipModuleRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleRouterAddress.setStatus('mandatory')
ipModuleBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleBroadcastAddress.setStatus('mandatory')
ipModuleBootpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleBootpServerAddress.setStatus('mandatory')
ipModuleConf2Activate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipModuleConf2Activate.setStatus('optional')
ipModuleConf2Confirm = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("confirm", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipModuleConf2Confirm.setStatus('optional')
snmpAuthMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthMaxEntries.setStatus('mandatory')
snmpAuthTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthTableLastChange.setStatus('mandatory')
snmpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 3), )
if mibBuilder.loadTexts: snmpAuthTable.setStatus('mandatory')
snmpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "authNumber"))
if mibBuilder.loadTexts: snmpAuthEntry.setStatus('mandatory')
authNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authNumber.setStatus('mandatory')
authProtocolAccessIpCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocolAccessIpCommunity.setStatus('mandatory')
authDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: authDelete.setStatus('mandatory')
snmpTrapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapMaxEntries.setStatus('mandatory')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 5), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('mandatory')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "trapNumber"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('mandatory')
trapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNumber.setStatus('mandatory')
trapIpAndGroupAndCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpAndGroupAndCommunity.setStatus('mandatory')
trapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDelete.setStatus('mandatory')
snmpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 6), )
if mibBuilder.loadTexts: snmpAccessTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1) + (1002, ), Integer32())
snmpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: snmpAccessEntry.setStatus('mandatory')
snmpAccessIP = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessIP.setStatus('mandatory')
snmpAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessTime.setStatus('mandatory')
snmpAccessProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("snmp", 1), ("telnet", 2), ("http", 3), ("tftp", 4), ("ftp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessProtocol.setStatus('mandatory')
snmpAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("writeOnly", 3), ("readWrite", 4), ("readOnlySecureSNMPObjects", 5), ("readWriteSecureSNMPObjects", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessType.setStatus('mandatory')
stackClass = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 1), ("chassis", 2), ("multiagentstack", 3), ("singleagentstack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackClass.setStatus('mandatory')
stackMaxChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackMaxChassis.setStatus('mandatory')
stackChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackChassis.setStatus('mandatory')
stackAgentChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAgentChassis.setStatus('mandatory')
stackAgentModule = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAgentModule.setStatus('mandatory')
stackUserAssignedName = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUserAssignedName.setStatus('mandatory')
stackID = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackID.setStatus('optional')
stackTopology = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chain", 1), ("star", 2), ("tree", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackTopology.setStatus('optional')
stackMultiAgentDefultChassisModule = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackMultiAgentDefultChassisModule.setStatus('mandatory')
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 2, 1), )
if mibBuilder.loadTexts: chassisTable.setStatus('mandatory')
chassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "chassisIndex"))
if mibBuilder.loadTexts: chassisEntry.setStatus('mandatory')
chassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndex.setStatus('mandatory')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unavailable", 1), ("campus8tx", 2), ("campus8fx", 3), ("desktop24tx", 4), ("stackable12tx", 5), ("stackable24tx", 6), ("stackable16tx", 7), ("desktop16tx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
chassisMaxModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxModules.setStatus('mandatory')
chassisModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModules.setStatus('mandatory')
chassisUserAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedType.setStatus('mandatory')
chassisUserAssignedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedNumber.setStatus('mandatory')
chassisUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedName.setStatus('mandatory')
chassisMaxPSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxPSUs.setStatus('mandatory')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 3, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "moduleChassisIndex"), (0, "INTEL-GEN-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
moduleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChassisIndex.setStatus('mandatory')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39))).clone(namedValues=NamedValues(("unavailable", 1), ("express550t", 2), ("express550f", 3), ("express510t", 4), ("express8100st", 5), ("express8100u", 6), ("express8100x", 7), ("express8100fr", 8), ("express110p12", 20), ("express110p24", 21), ("express110management", 22), ("express110bridge", 23), ("express110managementWithRMON", 24), ("express210p12", 25), ("express210p24", 26), ("express220p12", 27), ("express220p24", 28), ("express330p16", 29), ("express330p24", 30), ("express300management", 31), ("express300txuplink", 32), ("express300fxuplink", 33), ("express460tp16", 34), ("express460tp24", 35), ("nstructure560t", 36), ("nstructure560tr", 38), ("nstructure560fr", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('mandatory')
moduleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFirstPort.setStatus('mandatory')
moduleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumberOfPorts.setStatus('mandatory')
moduleMaxMediaModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxMediaModules.setStatus('mandatory')
moduleUserAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedType.setStatus('mandatory')
moduleUserAssignedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedNumber.setStatus('mandatory')
moduleUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedName.setStatus('mandatory')
moduleRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRAM.setStatus('mandatory')
moduleEPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEPROM.setStatus('mandatory')
moduleFLASHPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFLASHPROM.setStatus('mandatory')
moduleLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLEDInfo.setStatus('mandatory')
moduleAllPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortType.setStatus('mandatory')
moduleAllPortLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortLEDInfo.setStatus('mandatory')
moduleAllPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortStatus.setStatus('mandatory')
moduleLastPortChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLastPortChange.setStatus('mandatory')
moduleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMacAddress.setStatus('mandatory')
moduleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIpAddress.setStatus('mandatory')
moduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialNumber.setStatus('mandatory')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('mandatory')
moduleSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notsupported", 1), ("nosoftware", 2), ("unavailable", 3), ("approved", 4), ("experimental", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSwStatus.setStatus('mandatory')
moduleSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwName.setStatus('mandatory')
moduleSwDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwDescription.setStatus('mandatory')
moduleSwLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwLoadTime.setStatus('mandatory')
moduleSwTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwTftpIp.setStatus('mandatory')
moduleBackupSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notsupported", 1), ("nosoftware", 2), ("unavailable", 3), ("approved", 4), ("experimental", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwStatus.setStatus('mandatory')
moduleBackupSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwName.setStatus('mandatory')
moduleBackupSwDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwDescription.setStatus('mandatory')
moduleBackupSwLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwLoadTime.setStatus('mandatory')
moduleBackupSwTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwTftpIp.setStatus('mandatory')
moduleSwTftpIpAndSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 260))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSwTftpIpAndSwName.setStatus('mandatory')
moduleSwUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("swUpdateRunning", 2), ("errorUnknown", 3), ("errorNoTftpServer", 4), ("errorNoSoftware", 5), ("errorSoftwareMismatch", 6), ("errorMoreFlash", 7), ("errorMoreRAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateResult.setStatus('mandatory')
moduleSpecificObject = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: moduleSpecificObject.setStatus('mandatory')
moduleTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("critical", 3), ("unavailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureStatus.setStatus('optional')
moduleBootSectionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootSectionVersion.setStatus('mandatory')
mediaModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 4, 1), )
if mibBuilder.loadTexts: mediaModuleTable.setStatus('mandatory')
mediaModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "mediaModuleChassisIndex"), (0, "INTEL-GEN-MIB", "mediaModuleModuleIndex"), (0, "INTEL-GEN-MIB", "mediaModuleIndex"))
if mibBuilder.loadTexts: mediaModuleEntry.setStatus('mandatory')
mediaModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleChassisIndex.setStatus('mandatory')
mediaModuleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleModuleIndex.setStatus('mandatory')
mediaModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleIndex.setStatus('mandatory')
mediaModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unavailable", 1), ("mediaModule4tx", 2), ("mediaModule2fx", 3), ("mediaModuleSMM", 4), ("mediaModule1sx", 5), ("mediaModuleMMM", 6), ("mediaModule1sxSMM", 7), ("mediaModule1lxSMM", 8), ("mediaModule1atmmm", 9), ("mediaModule1atmsm", 10), ("mediaModule1atmutp", 11), ("mediaModule1lx", 12), ("mediaModule1000bt", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleType.setStatus('mandatory')
mediaModuleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleFirstPort.setStatus('mandatory')
mediaModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleNumberOfPorts.setStatus('mandatory')
mediaModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleVersion.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 5, 1), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "portChassisIndex"), (0, "INTEL-GEN-MIB", "portModuleIndex"), (0, "INTEL-GEN-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChassisIndex.setStatus('mandatory')
portModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleIndex.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portMediaModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaModuleIndex.setStatus('mandatory')
portIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfIndex.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("tpfd", 1), ("fomm", 2), ("fosm", 3), ("hundredbasetx", 4), ("hundredbasefx", 5), ("core", 6), ("serialwan", 7), ("isdnU", 8), ("isdnST", 9), ("gigabasesxlx", 10), ("tenbasetx", 11), ("oc3mm", 12), ("oc3sm", 13), ("utp5", 14), ("csu", 15), ("console", 16), ("gigabasesx", 17), ("gigabaselx", 18), ("gigabaset", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatus.setStatus('mandatory')
portLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDInfo.setStatus('mandatory')
portTimeSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTimeSinceLastStateChange.setStatus('mandatory')
portResetAllCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portResetAllCounters.setStatus('mandatory')
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("holdinreset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setStatus('mandatory')
portLastErrorID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("badPhy", 2), ("polarity", 3), ("wrongSpeedLP", 4), ("jabberSeen", 5), ("partition", 6), ("reserved1", 7), ("reserved2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastErrorID.setStatus('mandatory')
portUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUserAssignedName.setStatus('mandatory')
snmpAuthViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 3) + (0,1)).setObjects(("INTEL-GEN-MIB", "snmpAccessIP"), ("INTEL-GEN-MIB", "snmpAccessTime"), ("INTEL-GEN-MIB", "snmpAccessProtocol"), ("INTEL-GEN-MIB", "snmpAccessType"))
snmpLoginViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 3) + (0,2)).setObjects(("INTEL-GEN-MIB", "snmpAccessIP"), ("INTEL-GEN-MIB", "snmpAccessTime"), ("INTEL-GEN-MIB", "snmpAccessProtocol"), ("INTEL-GEN-MIB", "snmpAccessType"))
chassisInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 2) + (0,1)).setObjects(("INTEL-GEN-MIB", "chassisIndex"))
chassisRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 2) + (0,2)).setObjects(("INTEL-GEN-MIB", "chassisIndex"))
moduleInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,1)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
moduleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,2)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
moduleTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,3)).setObjects(("INTEL-GEN-MIB", "moduleTemperatureStatus"), ("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
mediaModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 4) + (0,1)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"), ("INTEL-GEN-MIB", "mediaModuleIndex"))
mediaModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 4) + (0,2)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"), ("INTEL-GEN-MIB", "mediaModuleIndex"))
mibBuilder.exportSymbols("INTEL-GEN-MIB", moduleSpecificObject=moduleSpecificObject, snmpTrapTable=snmpTrapTable, chassisTable=chassisTable, snmpLoginViolation=snmpLoginViolation, express9515st=express9515st, portType=portType, express110_12=express110_12, snmp=snmp, moduleBackupSwName=moduleBackupSwName, moduleBackupSwDescription=moduleBackupSwDescription, chassis=chassis, express8100st=express8100st, mediaModuleTable=mediaModuleTable, ipConf2Activate=ipConf2Activate, confTime=confTime, moduleUserAssignedNumber=moduleUserAssignedNumber, chassisEntry=chassisEntry, pysmiFakeCol1001=pysmiFakeCol1001, stackChassis=stackChassis, moduleSwStatus=moduleSwStatus, modules=modules, moduleAllPortStatus=moduleAllPortStatus, moduleRemoved=moduleRemoved, express9510st=express9510st, portChassisIndex=portChassisIndex, logEntries=logEntries, portIfIndex=portIfIndex, express8100uV4=express8100uV4, portStatus=portStatus, portReset=portReset, express10=express10, express220_24=express220_24, express220_12=express220_12, moduleFLASHPROM=moduleFLASHPROM, express9530=express9530, mediaModuleIndex=mediaModuleIndex, snmpAccessType=snmpAccessType, stackext=stackext, chassisUserAssignedName=chassisUserAssignedName, express210_12=express210_12, switches=switches, snmpAccessProtocol=snmpAccessProtocol, intel=intel, portsext=portsext, express9545u=express9545u, ipBootpServerAddress=ipBootpServerAddress, express9525st=express9525st, express110_24=express110_24, portLastErrorID=portLastErrorID, sysTimeOfDay=sysTimeOfDay, ipModuleSubNetMask=ipModuleSubNetMask, sysProductSubType=sysProductSubType, sysProducts=sysProducts, sysConfChangeLastResponse=sysConfChangeLastResponse, sysConfRollbackTimeout=sysConfRollbackTimeout, sysLocalMangementTimeout=sysLocalMangementTimeout, moduleUserAssignedName=moduleUserAssignedName, routers=routers, snmpAccessIP=snmpAccessIP, chassisMaxModules=chassisMaxModules, moduleFirstPort=moduleFirstPort, trapDelete=trapDelete, snmpAccessTime=snmpAccessTime, sysConfChange=sysConfChange, portLEDInfo=portLEDInfo, moduleIndex=moduleIndex, moduleRAM=moduleRAM, moduleBootSectionVersion=moduleBootSectionVersion, logType=logType, express9300=express9300, express9515u=express9515u, moduleUserAssignedType=moduleUserAssignedType, nstructure560fr=nstructure560fr, ipModuleAddress=ipModuleAddress, pysmiFakeCol1000=pysmiFakeCol1000, express9520u=express9520u, chassisUserAssignedNumber=chassisUserAssignedNumber, moduleInserted=moduleInserted, express210_24=express210_24, nstructure560tr=nstructure560tr, moduleSwTftpIp=moduleSwTftpIp, mediaModuleVersion=mediaModuleVersion, chassisext=chassisext, moduleMaxMediaModules=moduleMaxMediaModules, express550t=express550t, stackUserAssignedName=stackUserAssignedName, snmpAuthEntry=snmpAuthEntry, moduleMacAddress=moduleMacAddress, snmpAccessTable=snmpAccessTable, moduleBackupSwStatus=moduleBackupSwStatus, chassisRemoved=chassisRemoved, ipAddressAssignment=ipAddressAssignment, expressGigaSwitch=expressGigaSwitch, express9525u=express9525u, ipModuleConf2Activate=ipModuleConf2Activate, stackClass=stackClass, sysSystemDate=sysSystemDate, chassisType=chassisType, trapNumber=trapNumber, chassisModules=chassisModules, mediaModuleNumberOfPorts=mediaModuleNumberOfPorts, ipSubNetMask=ipSubNetMask, moduleBackupSwTftpIp=moduleBackupSwTftpIp, ipModuleConfEntry=ipModuleConfEntry, ipModuleModuleIndex=ipModuleModuleIndex, ip=ip, ipModuleBroadcastAddress=ipModuleBroadcastAddress, portIndex=portIndex, express8210=express8210, stacks=stacks, sysConfTable=sysConfTable, snmpAuthMaxEntries=snmpAuthMaxEntries, express8220=express8220, express100fx=express100fx, express8100u=express8100u, express9100=express9100, mediaModuleChassisIndex=mediaModuleChassisIndex, portEntry=portEntry, express9535=express9535, express8100fr=express8100fr, ipModuleConfTable=ipModuleConfTable, mediamodulesext=mediamodulesext, moduleIpAddress=moduleIpAddress, snmpAuthTableLastChange=snmpAuthTableLastChange, mediaModuleInserted=mediaModuleInserted, sysVendorName=sysVendorName, moduleTemperatureStatus=moduleTemperatureStatus, stackAgentModule=stackAgentModule, nstructure560l3s=nstructure560l3s, stackAgentChassis=stackAgentChassis, system=system, moduleSwName=moduleSwName, ipModuleBootpServerAddress=ipModuleBootpServerAddress, mediaModuleEntry=mediaModuleEntry, sysLogTable=sysLogTable, express10plus=express10plus, moduleNumberOfPorts=moduleNumberOfPorts, confName=confName, ipModuleConfigIndex=ipModuleConfigIndex, ports=ports, moduleSerialNumber=moduleSerialNumber, moduleSwDescription=moduleSwDescription, nstructure560t=nstructure560t, chassisIndex=chassisIndex, express460t_24=express460t_24, express9400=express9400, moduleSwUpdateResult=moduleSwUpdateResult, ipConfTable=ipConfTable, authProtocolAccessIpCommunity=authProtocolAccessIpCommunity, stackTopology=stackTopology, chassisUserAssignedType=chassisUserAssignedType, express8100wV4=express8100wV4, mediaModuleModuleIndex=mediaModuleModuleIndex, portMediaModuleIndex=portMediaModuleIndex, ipAddress=ipAddress, express520t=express520t, moduleBackupSwLoadTime=moduleBackupSwLoadTime, mib2ext=mib2ext, ipRouterAddress=ipRouterAddress, express8100x=express8100x, moduleTable=moduleTable, hw=hw, stackMaxChassis=stackMaxChassis, snmpAuthViolation=snmpAuthViolation, express330_24=express330_24, logLastChanged=logLastChanged, mediamodules=mediamodules, ipModuleConf2Confirm=ipModuleConf2Confirm, portModuleIndex=portModuleIndex, pysmiFakeCol1002=pysmiFakeCol1002, hubs=hubs, moduleEntry=moduleEntry, ipModuleChassisIndex=ipModuleChassisIndex, ipBroadcastAddress=ipBroadcastAddress, express9520st=express9520st, ipConfEntry=ipConfEntry, snmpTrapMaxEntries=snmpTrapMaxEntries, moduleSwTftpIpAndSwName=moduleSwTftpIpAndSwName, express330_16=express330_16, confStatus=confStatus, sysConfEntry=sysConfEntry, portResetAllCounters=portResetAllCounters, express920x=express920x, moduleAllPortLEDInfo=moduleAllPortLEDInfo, ipModuleRouterAddress=ipModuleRouterAddress, confTftpIp=confTftpIp, nstructure560s=nstructure560s, portUserAssignedName=portUserAssignedName, express9545st=express9545st, stackMultiAgentDefultChassisModule=stackMultiAgentDefultChassisModule, moduleVersion=moduleVersion, express8100stV4=express8100stV4, stack=stack, snmpTrapEntry=snmpTrapEntry, authDelete=authDelete, moduleTemperatureEvent=moduleTemperatureEvent, express9510u=express9510u, mediaModuleType=mediaModuleType, portTimeSinceLastStateChange=portTimeSinceLastStateChange, snmpAuthTable=snmpAuthTable, moduleLastPortChange=moduleLastPortChange, authNumber=authNumber, modulesext=modulesext, sysProductName=sysProductName, express550f=express550f, sysLogEntry=sysLogEntry, trapIpAndGroupAndCommunity=trapIpAndGroupAndCommunity, express460t_16=express460t_16, moduleSwLoadTime=moduleSwLoadTime, moduleType=moduleType, moduleAllPortType=moduleAllPortType, moduleEPROM=moduleEPROM, logFileName=logFileName, moduleChassisIndex=moduleChassisIndex, nstructure560=nstructure560, ipModuleAddressAssignment=ipModuleAddressAssignment, snmpAccessEntry=snmpAccessEntry, mediaModuleRemoved=mediaModuleRemoved, stackID=stackID, moduleLEDInfo=moduleLEDInfo, express510t=express510t, sysMibVersion=sysMibVersion, mediaModuleFirstPort=mediaModuleFirstPort, chassisMaxPSUs=chassisMaxPSUs, chassisInserted=chassisInserted, portTable=portTable, sysReset=sysReset)
