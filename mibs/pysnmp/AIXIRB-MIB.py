#
# PySNMP MIB module AIXIRB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIXIRB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, Counter32, Unsigned32, Bits, NotificationType, enterprises, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, IpAddress, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Counter32", "Unsigned32", "Bits", "NotificationType", "enterprises", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "IpAddress", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiSLC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16))
aiXirb = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 16, 5))
if mibBuilder.loadTexts: aiXirb.setLastUpdated('0006201510Z')
if mibBuilder.loadTexts: aiXirb.setOrganization('Applied Innovation Inc.')
aiXirbSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 1))
aiXirbTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 2))
aiXirbTcpWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ws200", 1), ("ws512", 2), ("ws1024", 3), ("ws2048", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbTcpWindowSize.setStatus('current')
aiXirbTcpSendAhead = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbTcpSendAhead.setStatus('current')
aiXirbX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 3))
aiXirbBx25CallDown = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25CallDown.setStatus('current')
aiXirbBx25DMlock = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 6000000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25DMlock.setStatus('current')
aiXirbBx25LinkUp = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 6000000)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbBx25LinkUp.setStatus('current')
aiXirbCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 4))
aiXirbCpuStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiXirbCpuStatsCurrent.setStatus('current')
aiXirbCpuStatsMax = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiXirbCpuStatsMax.setStatus('current')
aiXirbCpuStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbCpuStatsReset.setStatus('current')
aiXirbEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 16, 5, 5))
aiXirbPpc10BaseT = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirbPpc10BaseT.setStatus('current')
aiXirb10BaseTDuplex = MibScalar((1, 3, 6, 1, 4, 1, 539, 16, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiXirb10BaseTDuplex.setStatus('current')
mibBuilder.exportSymbols("AIXIRB-MIB", aiXirbEthernet=aiXirbEthernet, aiXirbTcpWindowSize=aiXirbTcpWindowSize, aiXirbTcpSendAhead=aiXirbTcpSendAhead, aii=aii, aiXirbCpuStatsMax=aiXirbCpuStatsMax, aiXirbSystem=aiXirbSystem, aiXirbBx25LinkUp=aiXirbBx25LinkUp, aiXirbBx25DMlock=aiXirbBx25DMlock, aiXirb10BaseTDuplex=aiXirb10BaseTDuplex, aiXirbX25=aiXirbX25, aiXirb=aiXirb, aiSLC2=aiSLC2, aiXirbTcp=aiXirbTcp, aiXirbBx25CallDown=aiXirbBx25CallDown, aiXirbCpuStats=aiXirbCpuStats, aiXirbCpuStatsCurrent=aiXirbCpuStatsCurrent, aiXirbPpc10BaseT=aiXirbPpc10BaseT, aiXirbCpuStatsReset=aiXirbCpuStatsReset, aiSystemOID=aiSystemOID, PYSNMP_MODULE_ID=aiXirb)
