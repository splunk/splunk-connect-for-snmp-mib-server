#
# PySNMP MIB module UNCDZ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UNCDZ-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysName, sysLocation, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysContact")
IpAddress, enterprises, Integer32, Gauge32, iso, TimeTicks, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Bits, ModuleIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "Integer32", "Gauge32", "iso", "TimeTicks", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Bits", "ModuleIdentity", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
uncdz_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839, 2, 1)).setLabel("uncdz-MIB")
uncdz_MIB.setRevisions(('2004-08-12 15:52',))
if mibBuilder.loadTexts: uncdz_MIB.setLastUpdated('200408121552Z')
if mibBuilder.loadTexts: uncdz_MIB.setOrganization('CAREL SpA')
carel = MibIdentifier((1, 3, 6, 1, 4, 1, 9839))
systm = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 1))
agentRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 1), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRelease.setStatus('current')
agentCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCode.setStatus('current')
instruments = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2))
pCOWebInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0))
pCOStatusgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10))
pCOId1_Status = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10, 1), Integer32()).setLabel("pCOId1-Status").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_Status.setStatus('current')
pCOErrorsNumbergroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11))
pCOId1_ErrorsNumber = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11, 1), Integer32()).setLabel("pCOId1-ErrorsNumber").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_ErrorsNumber.setStatus('current')
digitalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1))
vent_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 1), Integer32()).setLabel("vent-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: vent_on.setStatus('current')
compressore1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore1.setStatus('current')
compressore2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 3), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore2.setStatus('current')
compressore3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 4), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore3.setStatus('current')
compressore4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 5), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressore4.setStatus('current')
out_h1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 6), Integer32()).setLabel("out-h1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h1.setStatus('current')
out_h2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 7), Integer32()).setLabel("out-h2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h2.setStatus('current')
out_h3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 8), Integer32()).setLabel("out-h3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: out_h3.setStatus('current')
gas_caldo_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 9), Integer32()).setLabel("gas-caldo-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gas_caldo_on.setStatus('current')
on_deum = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 10), Integer32()).setLabel("on-deum").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: on_deum.setStatus('current')
power = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 11), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: power.setStatus('current')
mal_access = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 12), Integer32()).setLabel("mal-access").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_access.setStatus('current')
mal_ata = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 13), Integer32()).setLabel("mal-ata").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ata.setStatus('current')
mal_bta = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 14), Integer32()).setLabel("mal-bta").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_bta.setStatus('current')
mal_aua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 15), Integer32()).setLabel("mal-aua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_aua.setStatus('current')
mal_bua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 16), Integer32()).setLabel("mal-bua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_bua.setStatus('current')
mal_eap = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 17), Integer32()).setLabel("mal-eap").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_eap.setStatus('current')
mal_filter = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 18), Integer32()).setLabel("mal-filter").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_filter.setStatus('current')
mal_flood = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 19), Integer32()).setLabel("mal-flood").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_flood.setStatus('current')
mal_flux = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 20), Integer32()).setLabel("mal-flux").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_flux.setStatus('current')
mal_heater = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 21), Integer32()).setLabel("mal-heater").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_heater.setStatus('current')
mal_hp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 22), Integer32()).setLabel("mal-hp1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hp1.setStatus('current')
mal_hp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 23), Integer32()).setLabel("mal-hp2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hp2.setStatus('current')
mal_lp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 24), Integer32()).setLabel("mal-lp1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lp1.setStatus('current')
mal_lp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 25), Integer32()).setLabel("mal-lp2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lp2.setStatus('current')
mal_phase = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 26), Integer32()).setLabel("mal-phase").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_phase.setStatus('current')
mal_smoke = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 27), Integer32()).setLabel("mal-smoke").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_smoke.setStatus('current')
mal_lan = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 28), Integer32()).setLabel("mal-lan").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_lan.setStatus('current')
mal_hcurr = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 29), Integer32()).setLabel("mal-hcurr").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_hcurr.setStatus('current')
mal_nopower = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 30), Integer32()).setLabel("mal-nopower").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_nopower.setStatus('current')
mal_nowater = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 31), Integer32()).setLabel("mal-nowater").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_nowater.setStatus('current')
mal_cw_dh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 32), Integer32()).setLabel("mal-cw-dh").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_cw_dh.setStatus('current')
mal_tc_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 33), Integer32()).setLabel("mal-tc-cw").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_tc_cw.setStatus('current')
mal_wflow = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 34), Integer32()).setLabel("mal-wflow").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_wflow.setStatus('current')
mal_wht = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 35), Integer32()).setLabel("mal-wht").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_wht.setStatus('current')
mal_sonda_ta = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 36), Integer32()).setLabel("mal-sonda-ta").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_ta.setStatus('current')
mal_sonda_tac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 37), Integer32()).setLabel("mal-sonda-tac").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tac.setStatus('current')
mal_sonda_tc = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 38), Integer32()).setLabel("mal-sonda-tc").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tc.setStatus('current')
mal_sonda_te = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 39), Integer32()).setLabel("mal-sonda-te").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_te.setStatus('current')
mal_sonda_tm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 40), Integer32()).setLabel("mal-sonda-tm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_tm.setStatus('current')
mal_sonda_ua = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 41), Integer32()).setLabel("mal-sonda-ua").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_sonda_ua.setStatus('current')
mal_ore_compr1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 42), Integer32()).setLabel("mal-ore-compr1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr1.setStatus('current')
mal_ore_compr2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 43), Integer32()).setLabel("mal-ore-compr2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr2.setStatus('current')
mal_ore_compr3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 44), Integer32()).setLabel("mal-ore-compr3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr3.setStatus('current')
mal_ore_compr4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 45), Integer32()).setLabel("mal-ore-compr4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_compr4.setStatus('current')
mal_ore_filtro = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 46), Integer32()).setLabel("mal-ore-filtro").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_filtro.setStatus('current')
mal_ore_risc1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 47), Integer32()).setLabel("mal-ore-risc1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_risc1.setStatus('current')
mal_ore_risc2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 48), Integer32()).setLabel("mal-ore-risc2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_risc2.setStatus('current')
mal_ore_umid = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 49), Integer32()).setLabel("mal-ore-umid").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_umid.setStatus('current')
mal_ore_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 50), Integer32()).setLabel("mal-ore-unit").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mal_ore_unit.setStatus('current')
glb_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 51), Integer32()).setLabel("glb-al").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: glb_al.setStatus('current')
or_al_2lev = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 52), Integer32()).setLabel("or-al-2lev").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: or_al_2lev.setStatus('current')
range_t_ext = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 53), Integer32()).setLabel("range-t-ext").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_ext.setStatus('current')
range_t_circ = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 54), Integer32()).setLabel("range-t-circ").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_circ.setStatus('current')
range_t_man = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 55), Integer32()).setLabel("range-t-man").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_man.setStatus('current')
range_t_ac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 56), Integer32()).setLabel("range-t-ac").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_t_ac.setStatus('current')
umid_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 57), Integer32()).setLabel("umid-al").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: umid_al.setStatus('current')
range_u_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 58), Integer32()).setLabel("range-u-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: range_u_amb.setStatus('current')
k_syson = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("k-syson").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: k_syson.setStatus('current')
xs_res_al = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("xs-res-al").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xs_res_al.setStatus('current')
sleep_mode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sleep-mode").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sleep_mode.setStatus('current')
test_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("test-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: test_sm.setStatus('current')
ab_mediath = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("ab-mediath").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ab_mediath.setStatus('current')
ustdby1_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("ustdby1-2").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ustdby1_2.setStatus('current')
emerg = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 67), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: emerg.setStatus('current')
analogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2))
temp_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 1), Integer32()).setLabel("temp-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_amb.setStatus('current')
temp_ext = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 2), Integer32()).setLabel("temp-ext").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_ext.setStatus('current')
temp_mand = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 3), Integer32()).setLabel("temp-mand").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_mand.setStatus('current')
temp_circ = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 4), Integer32()).setLabel("temp-circ").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_circ.setStatus('current')
temp_ac = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 5), Integer32()).setLabel("temp-ac").setUnits('deg.C x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_ac.setStatus('current')
umid_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 6), Integer32()).setLabel("umid-amb").setUnits('rH% x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: umid_amb.setStatus('current')
t_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set.setStatus('current')
t_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-diff").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_diff.setStatus('current')
t_set_c = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-c").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_c.setStatus('current')
t_diff_c = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-diff-c").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_diff_c.setStatus('current')
ht_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("ht-set").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ht_set.setStatus('current')
lt_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lt-set").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lt_set.setStatus('current')
t_set_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_sm.setStatus('current')
t_set_c_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-c-sm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_c_sm.setStatus('current')
t_cw_dh = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-cw-dh").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_cw_dh.setStatus('current')
htset_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("htset-cw").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: htset_cw.setStatus('current')
t_set_cw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-cw").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_cw.setStatus('current')
t_rc_es = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-rc-es").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_rc_es.setStatus('current')
t_rc_est = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-rc-est").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_rc_est.setStatus('current')
rampa_valv = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 20), Integer32()).setLabel("rampa-valv").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: rampa_valv.setStatus('current')
anaout2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 21), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: anaout2.setStatus('current')
steam_production = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 22), Integer32()).setLabel("steam-production").setUnits('kg/h x 10').setMaxAccess("readonly")
if mibBuilder.loadTexts: steam_production.setStatus('current')
t_set_lm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-set-lm").setUnits('deg.C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_set_lm.setStatus('current')
delta_lm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("delta-lm").setUnits('deg.C x 10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delta_lm.setStatus('current')
integerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3))
ore_filtro = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 1), Integer32()).setLabel("ore-filtro").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_filtro.setStatus('current')
ore_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 2), Integer32()).setLabel("ore-unit").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_unit.setStatus('current')
ore_compr1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 3), Integer32()).setLabel("ore-compr1").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr1.setStatus('current')
ore_compr2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 4), Integer32()).setLabel("ore-compr2").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr2.setStatus('current')
ore_compr3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 5), Integer32()).setLabel("ore-compr3").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr3.setStatus('current')
ore_compr4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 6), Integer32()).setLabel("ore-compr4").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_compr4.setStatus('current')
ore_heat1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 7), Integer32()).setLabel("ore-heat1").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_heat1.setStatus('current')
ore_heat2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 8), Integer32()).setLabel("ore-heat2").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_heat2.setStatus('current')
ore_umid = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 9), Integer32()).setLabel("ore-umid").setUnits('h').setMaxAccess("readonly")
if mibBuilder.loadTexts: ore_umid.setStatus('current')
hdiff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdiff.setStatus('current')
hu_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-diff").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_diff.setStatus('current')
hh_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hh-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh_set.setStatus('current')
lh_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lh-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lh_set.setStatus('current')
hset = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hset.setStatus('current')
hset_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hset-sm").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hset_sm.setStatus('current')
hu_set = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-set").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_set.setStatus('current')
hu_set_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("hu-set-sm").setUnits('rH%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hu_set_sm.setStatus('current')
restart_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("restart-delay").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: restart_delay.setStatus('current')
regul_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("regul-delay").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: regul_delay.setStatus('current')
time_lowp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("time-lowp").setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_lowp.setStatus('current')
alarm_delay = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("alarm-delay").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm_delay.setStatus('current')
exc_time = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("exc-time").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: exc_time.setStatus('current')
t_std_by = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("t-std-by").setUnits('h').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t_std_by.setStatus('current')
lan_unit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("lan-unit").setUnits('n').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan_unit.setStatus('current')
ciclo_sm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setLabel("ciclo-sm").setUnits('m').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciclo_sm.setStatus('current')
mibBuilder.exportSymbols("UNCDZ-MIB", mal_ore_compr1=mal_ore_compr1, mal_ore_compr4=mal_ore_compr4, out_h1=out_h1, range_u_amb=range_u_amb, exc_time=exc_time, compressore3=compressore3, digitalObjects=digitalObjects, mal_ore_risc2=mal_ore_risc2, temp_amb=temp_amb, lan_unit=lan_unit, xs_res_al=xs_res_al, mal_ore_risc1=mal_ore_risc1, mal_flux=mal_flux, lh_set=lh_set, mal_ore_unit=mal_ore_unit, mal_phase=mal_phase, steam_production=steam_production, pCOErrorsNumbergroup=pCOErrorsNumbergroup, PYSNMP_MODULE_ID=uncdz_MIB, pCOId1_ErrorsNumber=pCOId1_ErrorsNumber, rampa_valv=rampa_valv, ore_compr4=ore_compr4, test_sm=test_sm, t_set_cw=t_set_cw, power=power, mal_hp1=mal_hp1, restart_delay=restart_delay, mal_access=mal_access, mal_heater=mal_heater, mal_sonda_ta=mal_sonda_ta, hh_set=hh_set, pCOId1_Status=pCOId1_Status, instruments=instruments, temp_circ=temp_circ, umid_amb=umid_amb, mal_wht=mal_wht, t_set_c_sm=t_set_c_sm, t_rc_est=t_rc_est, mal_lp1=mal_lp1, ciclo_sm=ciclo_sm, systm=systm, mal_sonda_tm=mal_sonda_tm, mal_ore_filtro=mal_ore_filtro, anaout2=anaout2, mal_nowater=mal_nowater, compressore4=compressore4, htset_cw=htset_cw, temp_ext=temp_ext, ore_unit=ore_unit, ab_mediath=ab_mediath, mal_hcurr=mal_hcurr, t_diff=t_diff, ore_umid=ore_umid, vent_on=vent_on, or_al_2lev=or_al_2lev, range_t_circ=range_t_circ, sleep_mode=sleep_mode, hset_sm=hset_sm, hdiff=hdiff, ore_filtro=ore_filtro, t_set_sm=t_set_sm, mal_smoke=mal_smoke, glb_al=glb_al, ore_compr2=ore_compr2, alarm_delay=alarm_delay, mal_lan=mal_lan, mal_bua=mal_bua, agentRelease=agentRelease, temp_mand=temp_mand, t_rc_es=t_rc_es, analogObjects=analogObjects, integerObjects=integerObjects, regul_delay=regul_delay, lt_set=lt_set, mal_bta=mal_bta, t_set_lm=t_set_lm, emerg=emerg, out_h2=out_h2, mal_ore_compr2=mal_ore_compr2, mal_filter=mal_filter, t_set=t_set, pCOWebInfo=pCOWebInfo, mal_ata=mal_ata, ht_set=ht_set, agentCode=agentCode, hset=hset, mal_sonda_tc=mal_sonda_tc, out_h3=out_h3, mal_sonda_tac=mal_sonda_tac, mal_tc_cw=mal_tc_cw, hu_set_sm=hu_set_sm, ore_heat2=ore_heat2, mal_eap=mal_eap, delta_lm=delta_lm, hu_diff=hu_diff, t_diff_c=t_diff_c, compressore2=compressore2, compressore1=compressore1, ore_compr1=ore_compr1, uncdz_MIB=uncdz_MIB, t_cw_dh=t_cw_dh, mal_ore_compr3=mal_ore_compr3, ore_compr3=ore_compr3, k_syson=k_syson, on_deum=on_deum, mal_hp2=mal_hp2, range_t_ext=range_t_ext, hu_set=hu_set, temp_ac=temp_ac, mal_ore_umid=mal_ore_umid, umid_al=umid_al, mal_cw_dh=mal_cw_dh, ustdby1_2=ustdby1_2, mal_sonda_te=mal_sonda_te, mal_lp2=mal_lp2, time_lowp=time_lowp, t_std_by=t_std_by, gas_caldo_on=gas_caldo_on, mal_flood=mal_flood, range_t_man=range_t_man, t_set_c=t_set_c, ore_heat1=ore_heat1, pCOStatusgroup=pCOStatusgroup, mal_aua=mal_aua, carel=carel, mal_wflow=mal_wflow, mal_sonda_ua=mal_sonda_ua, mal_nopower=mal_nopower, range_t_ac=range_t_ac)
