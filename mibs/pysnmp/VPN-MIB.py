#
# PySNMP MIB module VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:28:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, NotificationType, mgmt, ObjectIdentity, Counter32, TimeTicks, IpAddress, Counter64, iso, Gauge32, ModuleIdentity, enterprises, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "NotificationType", "mgmt", "ObjectIdentity", "Counter32", "TimeTicks", "IpAddress", "Counter64", "iso", "Gauge32", "ModuleIdentity", "enterprises", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vpnet = MibIdentifier((1, 3, 6, 1, 4, 1, 1866))
vpnmib = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7))
waninterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7, 1))
vpns = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7, 2))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7, 3))
vsuSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7, 4))
activeSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 1866, 7, 5))
wanIfTable = MibTable((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1), )
if mibBuilder.loadTexts: wanIfTable.setStatus('mandatory')
wanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1), ).setIndexNames((0, "VPN-MIB", "wanIfIndex"))
if mibBuilder.loadTexts: wanIfEntry.setStatus('mandatory')
wanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfIndex.setStatus('mandatory')
wanIfFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfFramesRcvd.setStatus('mandatory')
wanIfFramesXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfFramesXmit.setStatus('mandatory')
wanIfFramesDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfFramesDisc.setStatus('mandatory')
wanIfRcvOvrn = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvOvrn.setStatus('mandatory')
wanIfRcvAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvAbort.setStatus('mandatory')
wanIfRcvAlignErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvAlignErr.setStatus('mandatory')
wanIfRcvCRCErr = MibScalar((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvCRCErr.setStatus('mandatory')
wanIfRcvFrameLong = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvFrameLong.setStatus('mandatory')
wanIfRcvNoBuff = MibScalar((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvNoBuff.setStatus('mandatory')
wanIfXmitUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfXmitUnderrun.setStatus('mandatory')
wanIfXmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfXmitTimeout.setStatus('mandatory')
wanIfXmitNoBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfXmitNoBuff.setStatus('mandatory')
wanIfRcvByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfRcvByteRate.setStatus('mandatory')
wanIfXmitByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIfXmitByteRate.setStatus('mandatory')
vpnTable = MibTable((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1), )
if mibBuilder.loadTexts: vpnTable.setStatus('mandatory')
vpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1), ).setIndexNames((0, "VPN-MIB", "vpnIndex"))
if mibBuilder.loadTexts: vpnEntry.setStatus('mandatory')
vpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnIndex.setStatus('mandatory')
vpnDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnDescr.setStatus('mandatory')
vpnSkipInPktDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipInPktDecap.setStatus('mandatory')
vpnSkipOutPktEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipOutPktEncap.setStatus('mandatory')
vpnSkipInPktParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipInPktParseErr.setStatus('mandatory')
vpnSkipInKPUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipInKPUpdt.setStatus('mandatory')
vpnSkipOutKPUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipOutKPUpdt.setStatus('mandatory')
vpnOutFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnOutFrag.setStatus('mandatory')
vpnOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnOctetsIn.setStatus('mandatory')
vpnOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnOctetsOut.setStatus('mandatory')
vpnNOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnNOutOfOrder.setStatus('mandatory')
vpnSkipAlgMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSkipAlgMismatch.setStatus('mandatory')
vpnAuthInPktInvdSig = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnAuthInPktInvdSig.setStatus('mandatory')
vpnAuthInPktParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnAuthInPktParseErr.setStatus('mandatory')
vpnEncryptImpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnEncryptImpEncap.setStatus('mandatory')
vpnEncryptInPktParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnEncryptInPktParseErr.setStatus('mandatory')
logTable = MibTable((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1), )
if mibBuilder.loadTexts: logTable.setStatus('mandatory')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1, 1), ).setIndexNames((0, "VPN-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('mandatory')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('mandatory')
logTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTime.setStatus('mandatory')
logAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAttackType.setStatus('mandatory')
logDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDescription.setStatus('mandatory')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 1866, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('mandatory')
activeSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1), )
if mibBuilder.loadTexts: activeSessionTable.setStatus('mandatory')
activeSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1), ).setIndexNames((0, "VPN-MIB", "asName"))
if mibBuilder.loadTexts: activeSessionEntry.setStatus('mandatory')
asName = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asName.setStatus('mandatory')
asLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLength.setStatus('mandatory')
asOrgIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asOrgIPAddress.setStatus('mandatory')
asXlateIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asXlateIPAddress.setStatus('mandatory')
asDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asDescr.setStatus('mandatory')
asPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asPktsIn.setStatus('mandatory')
asPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asPktsOut.setStatus('mandatory')
asBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asBytesIn.setStatus('mandatory')
asBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1866, 7, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asBytesOut.setStatus('mandatory')
skipHdrErr = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,1))
skipNCounterErr = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,2))
skipAlgMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,3))
authFailure = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,4))
authHdrErr = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,5))
encryptHdrErr = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,6))
authFailureLimitErr = NotificationType((1, 3, 6, 1, 4, 1, 1866) + (0,7))
mibBuilder.exportSymbols("VPN-MIB", vpnSkipOutPktEncap=vpnSkipOutPktEncap, vpnmib=vpnmib, activeSessionEntry=activeSessionEntry, wanIfRcvOvrn=wanIfRcvOvrn, encryptHdrErr=encryptHdrErr, skipHdrErr=skipHdrErr, asPktsIn=asPktsIn, activeSessionTable=activeSessionTable, logEntry=logEntry, wanIfEntry=wanIfEntry, log=log, wanIfXmitTimeout=wanIfXmitTimeout, vpnSkipAlgMismatch=vpnSkipAlgMismatch, logIndex=logIndex, vpnSkipInPktParseErr=vpnSkipInPktParseErr, wanIfIndex=wanIfIndex, wanIfFramesDisc=wanIfFramesDisc, skipNCounterErr=skipNCounterErr, vpnSkipInPktDecap=vpnSkipInPktDecap, asName=asName, waninterface=waninterface, activeSessions=activeSessions, wanIfRcvFrameLong=wanIfRcvFrameLong, asLength=asLength, vpnDescr=vpnDescr, asBytesOut=asBytesOut, asDescr=asDescr, asPktsOut=asPktsOut, cpuUtilization=cpuUtilization, vpnEncryptImpEncap=vpnEncryptImpEncap, vpnEncryptInPktParseErr=vpnEncryptInPktParseErr, vpnTable=vpnTable, wanIfRcvNoBuff=wanIfRcvNoBuff, vpnAuthInPktParseErr=vpnAuthInPktParseErr, asXlateIPAddress=asXlateIPAddress, asOrgIPAddress=asOrgIPAddress, wanIfXmitNoBuff=wanIfXmitNoBuff, wanIfFramesXmit=wanIfFramesXmit, vpnOctetsIn=vpnOctetsIn, vpnAuthInPktInvdSig=vpnAuthInPktInvdSig, asBytesIn=asBytesIn, logTable=logTable, vpnOutFrag=vpnOutFrag, vsuSystem=vsuSystem, wanIfFramesRcvd=wanIfFramesRcvd, vpnOctetsOut=vpnOctetsOut, logDescription=logDescription, skipAlgMismatch=skipAlgMismatch, vpnSkipInKPUpdt=vpnSkipInKPUpdt, vpnet=vpnet, wanIfRcvCRCErr=wanIfRcvCRCErr, logAttackType=logAttackType, wanIfXmitByteRate=wanIfXmitByteRate, wanIfXmitUnderrun=wanIfXmitUnderrun, authFailureLimitErr=authFailureLimitErr, authFailure=authFailure, wanIfRcvByteRate=wanIfRcvByteRate, vpnSkipOutKPUpdt=vpnSkipOutKPUpdt, vpns=vpns, logTime=logTime, vpnIndex=vpnIndex, vpnNOutOfOrder=vpnNOutOfOrder, vpnEntry=vpnEntry, authHdrErr=authHdrErr, wanIfRcvAbort=wanIfRcvAbort, wanIfTable=wanIfTable, wanIfRcvAlignErr=wanIfRcvAlignErr)
