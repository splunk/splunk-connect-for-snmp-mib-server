#
# PySNMP MIB module BayNetworks-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-DNS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:25:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, NotificationType, IpAddress, ObjectIdentity, Integer32, Bits, iso, Counter32, Unsigned32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "NotificationType", "IpAddress", "ObjectIdentity", "Integer32", "Bits", "iso", "Counter32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfDnsGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDnsGroup")
wfDns = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1))
wfDnsDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDelete.setStatus('mandatory')
wfDnsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDisable.setStatus('mandatory')
wfDnsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsTimeOut.setStatus('mandatory')
wfDnsRexmit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsRexmit.setStatus('mandatory')
wfDnsMaxAllow = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsMaxAllow.setStatus('mandatory')
wfDnsIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsIpTos.setStatus('obsolete')
wfDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDomainName.setStatus('mandatory')
wfDnsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsRecursion.setStatus('mandatory')
wfDnsTruncation = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsTruncation.setStatus('mandatory')
wfDnsAuthOnly = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsAuthOnly.setStatus('mandatory')
wfDnsDefDomain = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsDefDomain.setStatus('mandatory')
wfDnsQueries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsQueries.setStatus('mandatory')
wfDnsResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsResps.setStatus('mandatory')
wfDnsNonAuthResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsNonAuthResps.setStatus('mandatory')
wfDnsNoData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsNoData.setStatus('mandatory')
wfDnsMartians = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsMartians.setStatus('mandatory')
wfDnsUnParseResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsUnParseResps.setStatus('mandatory')
wfDnsRexmitPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsRexmitPkts.setStatus('mandatory')
wfDnsTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsTimeOuts.setStatus('mandatory')
wfDnsHostsFile = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsHostsFile.setStatus('mandatory')
wfDnsRcvdError = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsRcvdError.setStatus('mandatory')
wfDnsLocalError = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsLocalError.setStatus('mandatory')
wfDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2), )
if mibBuilder.loadTexts: wfDnsServerTable.setStatus('mandatory')
wfDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1), ).setIndexNames((0, "BayNetworks-DNS-MIB", "wfDnsServerIndex"))
if mibBuilder.loadTexts: wfDnsServerEntry.setStatus('mandatory')
wfDnsServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerDelete.setStatus('mandatory')
wfDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsServerIndex.setStatus('mandatory')
wfDnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerAddr.setStatus('mandatory')
wfDnsServerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 2, 1, 4), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsServerPortNo.setStatus('mandatory')
wfDnsProxyIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3), )
if mibBuilder.loadTexts: wfDnsProxyIntfTable.setStatus('mandatory')
wfDnsProxyIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1), ).setIndexNames((0, "BayNetworks-DNS-MIB", "wfDnsProxyIntfAddress"))
if mibBuilder.loadTexts: wfDnsProxyIntfEntry.setStatus('mandatory')
wfDnsProxyIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDelete.setStatus('mandatory')
wfDnsProxyIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDisable.setStatus('mandatory')
wfDnsProxyIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfState.setStatus('mandatory')
wfDnsProxyIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfAddress.setStatus('mandatory')
wfDnsProxyIntfPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 5), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfPortNo.setStatus('mandatory')
wfDnsProxyIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass-thru", 1), ("nat-translation", 2))).clone('pass-thru')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfMode.setStatus('mandatory')
wfDnsProxyIntfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfDomain.setStatus('mandatory')
wfDnsProxyIntfFwdServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer1.setStatus('mandatory')
wfDnsProxyIntfFwdServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer2.setStatus('mandatory')
wfDnsProxyIntfFwdServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServer3.setStatus('mandatory')
wfDnsProxyIntfFwdServerPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 11), Integer32().clone(53)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfFwdServerPortNo.setStatus('mandatory')
wfDnsProxyIntfTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOut.setStatus('mandatory')
wfDnsProxyIntfRexmit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfRexmit.setStatus('mandatory')
wfDnsProxyIntfMaxAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfMaxAllow.setStatus('mandatory')
wfDnsProxyIntfTruncDnsAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTruncDnsAnswer.setStatus('mandatory')
wfDnsProxyIntfTruncMaxNo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfTruncMaxNo.setStatus('mandatory')
wfDnsProxyIntfCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDnsProxyIntfCacheSize.setStatus('mandatory')
wfDnsProxyIntfForward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfForward.setStatus('mandatory')
wfDnsProxyIntfResps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfResps.setStatus('mandatory')
wfDnsProxyIntfDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfDropped.setStatus('mandatory')
wfDnsProxyIntfMartians = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfMartians.setStatus('mandatory')
wfDnsProxyIntfUnParseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfUnParseResps.setStatus('mandatory')
wfDnsProxyIntfRexmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfRexmitPkts.setStatus('mandatory')
wfDnsProxyIntfTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfTimeOuts.setStatus('mandatory')
wfDnsProxyIntfLocalError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfLocalError.setStatus('mandatory')
wfDnsProxyIntfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 19, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDnsProxyIntfCacheHits.setStatus('mandatory')
mibBuilder.exportSymbols("BayNetworks-DNS-MIB", wfDnsAuthOnly=wfDnsAuthOnly, wfDnsHostsFile=wfDnsHostsFile, wfDnsRecursion=wfDnsRecursion, wfDnsTimeOuts=wfDnsTimeOuts, wfDnsProxyIntfTimeOut=wfDnsProxyIntfTimeOut, wfDnsProxyIntfFwdServer1=wfDnsProxyIntfFwdServer1, wfDnsProxyIntfRexmitPkts=wfDnsProxyIntfRexmitPkts, wfDnsNoData=wfDnsNoData, wfDnsProxyIntfFwdServerPortNo=wfDnsProxyIntfFwdServerPortNo, wfDnsDomainName=wfDnsDomainName, wfDnsProxyIntfTable=wfDnsProxyIntfTable, wfDnsProxyIntfTruncDnsAnswer=wfDnsProxyIntfTruncDnsAnswer, wfDnsProxyIntfUnParseResps=wfDnsProxyIntfUnParseResps, wfDnsServerDelete=wfDnsServerDelete, wfDnsProxyIntfCacheHits=wfDnsProxyIntfCacheHits, wfDnsProxyIntfPortNo=wfDnsProxyIntfPortNo, wfDnsProxyIntfFwdServer2=wfDnsProxyIntfFwdServer2, wfDns=wfDns, wfDnsDisable=wfDnsDisable, wfDnsServerPortNo=wfDnsServerPortNo, wfDnsServerIndex=wfDnsServerIndex, wfDnsProxyIntfResps=wfDnsProxyIntfResps, wfDnsNonAuthResps=wfDnsNonAuthResps, wfDnsProxyIntfCacheSize=wfDnsProxyIntfCacheSize, wfDnsServerAddr=wfDnsServerAddr, wfDnsUnParseResps=wfDnsUnParseResps, wfDnsIpTos=wfDnsIpTos, wfDnsProxyIntfLocalError=wfDnsProxyIntfLocalError, wfDnsProxyIntfAddress=wfDnsProxyIntfAddress, wfDnsMartians=wfDnsMartians, wfDnsProxyIntfMode=wfDnsProxyIntfMode, wfDnsQueries=wfDnsQueries, wfDnsProxyIntfState=wfDnsProxyIntfState, wfDnsDefDomain=wfDnsDefDomain, wfDnsProxyIntfTruncMaxNo=wfDnsProxyIntfTruncMaxNo, wfDnsTruncation=wfDnsTruncation, wfDnsRexmit=wfDnsRexmit, wfDnsMaxAllow=wfDnsMaxAllow, wfDnsProxyIntfDropped=wfDnsProxyIntfDropped, wfDnsProxyIntfMaxAllow=wfDnsProxyIntfMaxAllow, wfDnsServerEntry=wfDnsServerEntry, wfDnsProxyIntfFwdServer3=wfDnsProxyIntfFwdServer3, wfDnsProxyIntfForward=wfDnsProxyIntfForward, wfDnsLocalError=wfDnsLocalError, wfDnsProxyIntfTimeOuts=wfDnsProxyIntfTimeOuts, wfDnsServerTable=wfDnsServerTable, wfDnsResps=wfDnsResps, wfDnsProxyIntfEntry=wfDnsProxyIntfEntry, wfDnsProxyIntfDomain=wfDnsProxyIntfDomain, wfDnsRcvdError=wfDnsRcvdError, wfDnsProxyIntfMartians=wfDnsProxyIntfMartians, wfDnsTimeOut=wfDnsTimeOut, wfDnsProxyIntfDisable=wfDnsProxyIntfDisable, wfDnsProxyIntfRexmit=wfDnsProxyIntfRexmit, wfDnsDelete=wfDnsDelete, wfDnsRexmitPkts=wfDnsRexmitPkts, wfDnsProxyIntfDelete=wfDnsProxyIntfDelete)
