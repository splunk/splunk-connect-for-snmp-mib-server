#
# PySNMP MIB module DLINK-3100-DNSCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-DNSCL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:33:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
rlDnsCl, = mibBuilder.importSymbols("DLINK-3100-MIB", "rlDnsCl")
dnsResConfigSbeltEntry, = mibBuilder.importSymbols("DNS-RESOLVER-MIB", "dnsResConfigSbeltEntry")
DnsQType, DnsQClass, DnsType, dns, DnsClass, DnsOpCode, DnsName, DnsNameAsIndex, DnsRespCode, DnsTime = mibBuilder.importSymbols("DNS-SERVER-MIB", "DnsQType", "DnsQClass", "DnsType", "dns", "DnsClass", "DnsOpCode", "DnsName", "DnsNameAsIndex", "DnsRespCode", "DnsTime")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, iso, ObjectIdentity, Counter64, Bits, TimeTicks, Integer32, NotificationType, Counter32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "iso", "ObjectIdentity", "Counter64", "Bits", "TimeTicks", "Integer32", "NotificationType", "Counter32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
rlDnsClMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClMibVersion.setStatus('current')
rlDnsClEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClEnable.setStatus('current')
rlDnsClDomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 3), )
if mibBuilder.loadTexts: rlDnsClDomainNameTable.setStatus('current')
rlDnsClDomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 3, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsClDomainNameName"))
if mibBuilder.loadTexts: rlDnsClDomainNameEntry.setStatus('current')
rlDnsClDomainNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 3, 1, 1), DnsName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClDomainNameName.setStatus('current')
rlDnsClDomainNameOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClDomainNameOwner.setStatus('current')
rlDnsClDomainNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClDomainNameRowStatus.setStatus('current')
rlDnsClMaxNumOfRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClMaxNumOfRetransmissions.setStatus('current')
rlDnsClMinRetransmissionInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClMinRetransmissionInterval.setStatus('current')
rlDnsClNamesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6), )
if mibBuilder.loadTexts: rlDnsClNamesTable.setStatus('current')
rlDnsClNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesName"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesOwner"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesIndex"))
if mibBuilder.loadTexts: rlDnsClNamesEntry.setStatus('current')
rlDnsClNamesName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1, 1), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClNamesName.setStatus('current')
rlDnsClNamesOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesOwner.setStatus('current')
rlDnsClNamesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClNamesIndex.setStatus('current')
rlDnsClNamesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesAddr.setStatus('current')
rlDnsClNamesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesRowStatus.setStatus('current')
rlDnsResConfigSbeltExtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 7), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtTable.setStatus('current')
rlDnsResConfigSbeltExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 7, 1), )
dnsResConfigSbeltEntry.registerAugmentions(("DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltExtEntry"))
rlDnsResConfigSbeltExtEntry.setIndexNames(*dnsResConfigSbeltEntry.getIndexNames())
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtEntry.setStatus('current')
rlDnsResConfigSbeltOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResConfigSbeltOwner.setStatus('current')
rlDnsClNamesInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8), )
if mibBuilder.loadTexts: rlDnsClNamesInetTable.setStatus('current')
rlDnsClNamesInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesInetName"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesInetOwner"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesInetIndex"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsClNamesInetRRType"))
if mibBuilder.loadTexts: rlDnsClNamesInetEntry.setStatus('current')
rlDnsClNamesInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 1), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsClNamesInetName.setStatus('current')
rlDnsClNamesInetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetOwner.setStatus('current')
rlDnsClNamesInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 3), Integer32())
if mibBuilder.loadTexts: rlDnsClNamesInetIndex.setStatus('current')
rlDnsClNamesInetRRType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 4), DnsType())
if mibBuilder.loadTexts: rlDnsClNamesInetRRType.setStatus('current')
rlDnsClNamesInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetAddrType.setStatus('current')
rlDnsClNamesInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetAddr.setStatus('current')
rlDnsClNamesInetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 8, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsClNamesInetRowStatus.setStatus('current')
rlDnsResConfigSbeltInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetTable.setStatus('current')
rlDnsResConfigSbeltInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltInetAddrType"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltInetAddr"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltInetSubTree"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltInetClass"))
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetEntry.setStatus('current')
rlDnsResConfigSbeltInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetAddrType.setStatus('current')
rlDnsResConfigSbeltInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetAddr.setStatus('current')
rlDnsResConfigSbeltInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 3), DnsName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetName.setStatus('current')
rlDnsResConfigSbeltInetRecursion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iterative", 1), ("recursive", 2), ("recursiveAndIterative", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetRecursion.setStatus('current')
rlDnsResConfigSbeltInetPref = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetPref.setStatus('current')
rlDnsResConfigSbeltInetSubTree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 6), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetSubTree.setStatus('current')
rlDnsResConfigSbeltInetClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 7), DnsClass())
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetClass.setStatus('current')
rlDnsResConfigSbeltInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetStatus.setStatus('current')
rlDnsResCacheRRInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10), )
if mibBuilder.loadTexts: rlDnsResCacheRRInetTable.setStatus('current')
rlDnsResCacheRRInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsResCacheRRInetName"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResCacheRRInetClass"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResCacheRRInetType"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResCacheRRInetIndex"))
if mibBuilder.loadTexts: rlDnsResCacheRRInetEntry.setStatus('current')
rlDnsResCacheRRInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResCacheRRInetName.setStatus('current')
rlDnsResCacheRRInetClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 2), DnsClass())
if mibBuilder.loadTexts: rlDnsResCacheRRInetClass.setStatus('current')
rlDnsResCacheRRInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 3), DnsType())
if mibBuilder.loadTexts: rlDnsResCacheRRInetType.setStatus('current')
rlDnsResCacheRRInetTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 4), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetTTL.setStatus('current')
rlDnsResCacheRRInetElapsedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 5), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetElapsedTTL.setStatus('current')
rlDnsResCacheRRInetSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetSourceAddrType.setStatus('current')
rlDnsResCacheRRInetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetSource.setStatus('current')
rlDnsResCacheRRInetData = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetData.setStatus('current')
rlDnsResCacheRRInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResCacheRRInetStatus.setStatus('current')
rlDnsResCacheRRInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 10), Integer32())
if mibBuilder.loadTexts: rlDnsResCacheRRInetIndex.setStatus('current')
rlDnsResCacheRRInetPrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 10, 1, 11), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResCacheRRInetPrettyName.setStatus('current')
rlDnsResNCacheErrInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11), )
if mibBuilder.loadTexts: rlDnsResNCacheErrInetTable.setStatus('current')
rlDnsResNCacheErrInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1), ).setIndexNames((0, "DLINK-3100-DNSCL-MIB", "rlDnsResNCacheErrInetQName"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResNCacheErrInetQClass"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResNCacheErrInetQType"), (0, "DLINK-3100-DNSCL-MIB", "rlDnsResNCacheErrInetIndex"))
if mibBuilder.loadTexts: rlDnsResNCacheErrInetEntry.setStatus('current')
rlDnsResNCacheErrInetQName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 1), DnsNameAsIndex())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQName.setStatus('current')
rlDnsResNCacheErrInetQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 2), DnsQClass())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQClass.setStatus('current')
rlDnsResNCacheErrInetQType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 3), DnsQType())
if mibBuilder.loadTexts: rlDnsResNCacheErrInetQType.setStatus('current')
rlDnsResNCacheErrInetTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 4), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetTTL.setStatus('current')
rlDnsResNCacheErrInetElapsedTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 5), DnsTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetElapsedTTL.setStatus('current')
rlDnsResNCacheErrInetSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetSourceAddrType.setStatus('current')
rlDnsResNCacheErrInetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetSource.setStatus('current')
rlDnsResNCacheErrInetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonexistantName", 1), ("noData", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetCode.setStatus('current')
rlDnsResNCacheErrInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetStatus.setStatus('current')
rlDnsResNCacheErrInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetIndex.setStatus('current')
rlDnsResNCacheErrInetPrettyName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 11, 1, 11), DnsName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDnsResNCacheErrInetPrettyName.setStatus('current')
rlDnsResConfigSbeltExtInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 12), )
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtInetTable.setStatus('current')
rlDnsResConfigSbeltExtInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 12, 1), )
rlDnsResConfigSbeltInetEntry.registerAugmentions(("DLINK-3100-DNSCL-MIB", "rlDnsResConfigSbeltExtInetEntry"))
rlDnsResConfigSbeltExtInetEntry.setIndexNames(*rlDnsResConfigSbeltInetEntry.getIndexNames())
if mibBuilder.loadTexts: rlDnsResConfigSbeltExtInetEntry.setStatus('current')
rlDnsResConfigSbeltInetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 93, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDnsResConfigSbeltInetOwner.setStatus('current')
mibBuilder.exportSymbols("DLINK-3100-DNSCL-MIB", rlDnsResConfigSbeltInetRecursion=rlDnsResConfigSbeltInetRecursion, rlDnsResCacheRRInetType=rlDnsResCacheRRInetType, rlDnsClNamesEntry=rlDnsClNamesEntry, rlDnsClNamesInetAddr=rlDnsClNamesInetAddr, rlDnsClNamesInetEntry=rlDnsClNamesInetEntry, rlDnsResConfigSbeltExtInetTable=rlDnsResConfigSbeltExtInetTable, rlDnsClMinRetransmissionInterval=rlDnsClMinRetransmissionInterval, rlDnsResNCacheErrInetElapsedTTL=rlDnsResNCacheErrInetElapsedTTL, rlDnsClNamesInetRowStatus=rlDnsClNamesInetRowStatus, rlDnsClDomainNameName=rlDnsClDomainNameName, rlDnsResConfigSbeltInetAddr=rlDnsResConfigSbeltInetAddr, rlDnsResNCacheErrInetIndex=rlDnsResNCacheErrInetIndex, rlDnsClNamesName=rlDnsClNamesName, rlDnsClNamesInetName=rlDnsClNamesInetName, rlDnsClNamesInetTable=rlDnsClNamesInetTable, rlDnsClMaxNumOfRetransmissions=rlDnsClMaxNumOfRetransmissions, rlDnsClNamesRowStatus=rlDnsClNamesRowStatus, rlDnsResCacheRRInetClass=rlDnsResCacheRRInetClass, rlDnsResNCacheErrInetQClass=rlDnsResNCacheErrInetQClass, rlDnsResCacheRRInetData=rlDnsResCacheRRInetData, rlDnsResNCacheErrInetQName=rlDnsResNCacheErrInetQName, rlDnsResNCacheErrInetQType=rlDnsResNCacheErrInetQType, rlDnsResNCacheErrInetCode=rlDnsResNCacheErrInetCode, rlDnsResNCacheErrInetPrettyName=rlDnsResNCacheErrInetPrettyName, rlDnsClNamesInetRRType=rlDnsClNamesInetRRType, rlDnsClNamesInetOwner=rlDnsClNamesInetOwner, rlDnsResConfigSbeltInetStatus=rlDnsResConfigSbeltInetStatus, rlDnsResCacheRRInetSourceAddrType=rlDnsResCacheRRInetSourceAddrType, rlDnsResCacheRRInetPrettyName=rlDnsResCacheRRInetPrettyName, rlDnsResNCacheErrInetTTL=rlDnsResNCacheErrInetTTL, rlDnsClNamesInetIndex=rlDnsClNamesInetIndex, rlDnsClDomainNameOwner=rlDnsClDomainNameOwner, rlDnsResConfigSbeltInetSubTree=rlDnsResConfigSbeltInetSubTree, rlDnsClDomainNameRowStatus=rlDnsClDomainNameRowStatus, rlDnsResCacheRRInetIndex=rlDnsResCacheRRInetIndex, rlDnsResConfigSbeltInetOwner=rlDnsResConfigSbeltInetOwner, rlDnsResConfigSbeltInetEntry=rlDnsResConfigSbeltInetEntry, rlDnsResConfigSbeltExtTable=rlDnsResConfigSbeltExtTable, rlDnsClNamesOwner=rlDnsClNamesOwner, rlDnsClMibVersion=rlDnsClMibVersion, rlDnsClNamesInetAddrType=rlDnsClNamesInetAddrType, rlDnsResConfigSbeltInetPref=rlDnsResConfigSbeltInetPref, rlDnsResConfigSbeltExtInetEntry=rlDnsResConfigSbeltExtInetEntry, rlDnsClNamesTable=rlDnsClNamesTable, rlDnsResConfigSbeltInetClass=rlDnsResConfigSbeltInetClass, rlDnsResNCacheErrInetSource=rlDnsResNCacheErrInetSource, rlDnsResCacheRRInetName=rlDnsResCacheRRInetName, rlDnsResNCacheErrInetTable=rlDnsResNCacheErrInetTable, rlDnsResConfigSbeltInetTable=rlDnsResConfigSbeltInetTable, rlDnsResCacheRRInetTTL=rlDnsResCacheRRInetTTL, rlDnsClEnable=rlDnsClEnable, rlDnsClDomainNameTable=rlDnsClDomainNameTable, rlDnsClNamesAddr=rlDnsClNamesAddr, rlDnsResConfigSbeltInetName=rlDnsResConfigSbeltInetName, rlDnsClDomainNameEntry=rlDnsClDomainNameEntry, rlDnsResCacheRRInetTable=rlDnsResCacheRRInetTable, rlDnsResCacheRRInetElapsedTTL=rlDnsResCacheRRInetElapsedTTL, rlDnsResNCacheErrInetSourceAddrType=rlDnsResNCacheErrInetSourceAddrType, rlDnsResConfigSbeltInetAddrType=rlDnsResConfigSbeltInetAddrType, rlDnsResCacheRRInetEntry=rlDnsResCacheRRInetEntry, rlDnsResConfigSbeltExtEntry=rlDnsResConfigSbeltExtEntry, rlDnsResCacheRRInetSource=rlDnsResCacheRRInetSource, rlDnsResNCacheErrInetStatus=rlDnsResNCacheErrInetStatus, rlDnsResNCacheErrInetEntry=rlDnsResNCacheErrInetEntry, rlDnsClNamesIndex=rlDnsClNamesIndex, rlDnsResConfigSbeltOwner=rlDnsResConfigSbeltOwner, rlDnsResCacheRRInetStatus=rlDnsResCacheRRInetStatus)
