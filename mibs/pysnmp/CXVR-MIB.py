#
# PySNMP MIB module CXVR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXVR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Alias, cxVR = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxVR")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, Counter64, NotificationType, Integer32, Unsigned32, Counter32, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Counter64", "NotificationType", "Integer32", "Unsigned32", "Counter32", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vrRegTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10), )
if mibBuilder.loadTexts: vrRegTable.setStatus('mandatory')
vrRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1), ).setIndexNames((0, "CXVR-MIB", "vrRegDialNo"))
if mibBuilder.loadTexts: vrRegEntry.setStatus('mandatory')
vrRegDialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegDialNo.setStatus('mandatory')
vrRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vrOk", 1), ("vrAgedOut", 2), ("vrTableFull", 3), ("vrMemallocFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegState.setStatus('mandatory')
vrRegVceStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegVceStationId.setStatus('mandatory')
vrRegVceSoftId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegVceSoftId.setStatus('mandatory')
vrRegSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegSlotNo.setStatus('mandatory')
vrRegHuntChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRegHuntChannel.setStatus('mandatory')
vrConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20))
vrConfigNodeId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('VoiceRouting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigNodeId.setStatus('mandatory')
vrConfigSoftId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrConfigSoftId.setStatus('mandatory')
vrConfigNoOfSysRouteSupported = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigNoOfSysRouteSupported.setStatus('mandatory')
vrConfigNoOfDigitSupported = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7))).clone(namedValues=NamedValues(("dig5", 5), ("dig7", 7))).clone('dig5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigNoOfDigitSupported.setStatus('mandatory')
vrConfigMaxBufferPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigMaxBufferPoolSize.setStatus('mandatory')
vrConfigFastSwitchingOption = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vrprtysmall", 1), ("vrprtyroute", 2))).clone('vrprtysmall')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigFastSwitchingOption.setStatus('mandatory')
vrConfigStatsSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigStatsSamplingPeriod.setStatus('mandatory')
vrConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vrcfgidle", 1), ("vrcfgrte", 2), ("vrcfgreg", 3))).clone('vrcfgidle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigControl.setStatus('mandatory')
vrConfigOptimization = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vroptdisabled", 1), ("vroptenabled", 2), ("vroptbwmgt", 3))).clone('vroptbwmgt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrConfigOptimization.setStatus('mandatory')
vrMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 20, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMibLevel.setStatus('mandatory')
vrStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30))
vrStatInitState = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("vrDead", 1), ("vrUnrecoverableError", 2), ("vrTablesBuilt", 3), ("vrConfigRead", 4), ("vrInitialized", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatInitState.setStatus('mandatory')
vrStatLongestMuxPassInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatLongestMuxPassInMs.setStatus('mandatory')
vrStatNbPacketsForwardedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbPacketsForwardedPerSec.setStatus('mandatory')
vrStatNbRoutingConflicts = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbRoutingConflicts.setStatus('mandatory')
vrStatRegOverallNumber = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatRegOverallNumber.setStatus('mandatory')
vrStatRegNotOwner = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatRegNotOwner.setStatus('mandatory')
vrStatRegInvalidDialNumber = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatRegInvalidDialNumber.setStatus('mandatory')
vrStatRegFormatError = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatRegFormatError.setStatus('mandatory')
vrStatNbVceMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbVceMsgRx.setStatus('mandatory')
vrStatNbVceMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbVceMsgTx.setStatus('mandatory')
vrStatNbBusMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbBusMsgRx.setStatus('mandatory')
vrStatNbBusMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbBusMsgTx.setStatus('mandatory')
vrStatNbWanMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbWanMsgRx.setStatus('mandatory')
vrStatNbWanMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbWanMsgTx.setStatus('mandatory')
vrStatNbOutboundQueueFull = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbOutboundQueueFull.setStatus('mandatory')
vrStatNbOverallForwards = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbOverallForwards.setStatus('mandatory')
vrStatNbOverallDiscards = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbOverallDiscards.setStatus('mandatory')
vrStatNbDeadEnds = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatNbDeadEnds.setStatus('mandatory')
vrStatError = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatError.setStatus('mandatory')
vrStatFieldsAddress = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatFieldsAddress.setStatus('mandatory')
vrStatIamUnxFieldAddress = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 30, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrStatIamUnxFieldAddress.setStatus('mandatory')
vrSrTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40), )
if mibBuilder.loadTexts: vrSrTable.setStatus('mandatory')
vrSrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1), ).setIndexNames((0, "CXVR-MIB", "vrSrIndex"))
if mibBuilder.loadTexts: vrSrEntry.setStatus('mandatory')
vrSrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrIndex.setStatus('mandatory')
vrSrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSrRowStatus.setStatus('mandatory')
vrSrDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSrDestAlias.setStatus('mandatory')
vrSrSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSrSubRef.setStatus('mandatory')
vrSrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSrBandwidth.setStatus('mandatory')
vrSrBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSrBwIndex.setStatus('mandatory')
vrSrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vrSrDown", 1), ("vrSrInFlowCtl", 2), ("vrSrUp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrStatus.setStatus('mandatory')
vrSrConStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vrNotConfigured", 1), ("vrClose", 2), ("vrWaitForQuery", 3), ("vrWaitForOpenConf", 4), ("vrOpen", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrConStatus.setStatus('mandatory')
vrSrFailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("vrNoFailure", 1), ("vrInternalError", 2), ("vrLocalMemFail", 3), ("vrRemMemFail", 4), ("vrRemNoAcces", 5), ("vrRemPvcDown", 6), ("vrRemPvcBusy", 7), ("vrLocalFcnFailure", 8), ("vrRemFcnFailure", 9), ("vrLocalDsnFailure", 10), ("vrRemAliasNotFound", 11), ("vrNoPvcService", 12), ("vrOpenReqTimeout", 13), ("vrAdjaReset", 14), ("vrUnsupportedSR", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrFailStatus.setStatus('mandatory')
vrSrNbLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbLinkDown.setStatus('mandatory')
vrSrNbResetFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbResetFrameRx.setStatus('mandatory')
vrSrNbOutboundFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbOutboundFrame.setStatus('mandatory')
vrSrNbInboundFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbInboundFrame.setStatus('mandatory')
vrSrNbOutboundBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbOutboundBw.setStatus('mandatory')
vrSrNbInboundBw = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbInboundBw.setStatus('mandatory')
vrSrBwUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrBwUsed.setStatus('mandatory')
vrSrNbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbCalls.setStatus('mandatory')
vrSrNbPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 40, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSrNbPktDropped.setStatus('mandatory')
vrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50), )
if mibBuilder.loadTexts: vrRouteTable.setStatus('mandatory')
vrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1), ).setIndexNames((0, "CXVR-MIB", "vrRouteDialNo"))
if mibBuilder.loadTexts: vrRouteEntry.setStatus('mandatory')
vrRouteDialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRouteDialNo.setStatus('mandatory')
vrRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrRouteRowStatus.setStatus('mandatory')
vrRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1111111)).clone(1111111)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrRouteMask.setStatus('mandatory')
vrRouteSrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrRouteSrNumber.setStatus('mandatory')
vrRouteForwardedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 50, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRouteForwardedPkt.setStatus('mandatory')
vrPingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60))
vrPingDialNo = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingDialNo.setStatus('mandatory')
vrPingNbToBeSent = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingNbToBeSent.setStatus('mandatory')
vrPingGapsInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingGapsInMs.setStatus('mandatory')
vrPingMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingMaxHopCount.setStatus('mandatory')
vrPingProbeReturnAddress = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999)).clone(9999999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingProbeReturnAddress.setStatus('mandatory')
vrPingTriggerSend = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vrIdle", 1), ("vrSend", 2))).clone('vrIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPingTriggerSend.setStatus('mandatory')
vrPingNbReplyRx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingNbReplyRx.setStatus('mandatory')
vrPingFormatError = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingFormatError.setStatus('mandatory')
vrPingNbVrNodesCrossedForward = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingNbVrNodesCrossedForward.setStatus('mandatory')
vrPingNbVrNodesCrossedBackward = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingNbVrNodesCrossedBackward.setStatus('mandatory')
vrPingLastRoundTripInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingLastRoundTripInMs.setStatus('mandatory')
vrPingLastSequenceNumberRx = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingLastSequenceNumberRx.setStatus('mandatory')
vrPingSequenceError = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingSequenceError.setStatus('mandatory')
vrPingMinRoundTripInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingMinRoundTripInMs.setStatus('mandatory')
vrPingMaxRoundTripInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingMaxRoundTripInMs.setStatus('mandatory')
vrPingRemStatus = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("vrOk", 1), ("vrUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemStatus.setStatus('mandatory')
vrPingRemVrNodeId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemVrNodeId.setStatus('mandatory')
vrPingRemVceStationId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemVceStationId.setStatus('mandatory')
vrPingRemVrSoftId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemVrSoftId.setStatus('mandatory')
vrPingRemVceSoftId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemVceSoftId.setStatus('mandatory')
vrPingRemSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemSlotIndex.setStatus('mandatory')
vrPingRemHuntChannel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemHuntChannel.setStatus('mandatory')
vrPingRemNbForwardedPacket = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemNbForwardedPacket.setStatus('mandatory')
vrPingRemNbRestart = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 60, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPingRemNbRestart.setStatus('mandatory')
vrBwTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70), )
if mibBuilder.loadTexts: vrBwTable.setStatus('mandatory')
vrBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1), ).setIndexNames((0, "CXVR-MIB", "vrBwIndex"))
if mibBuilder.loadTexts: vrBwEntry.setStatus('mandatory')
vrBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrBwIndex.setStatus('mandatory')
vrBwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrBwRowStatus.setStatus('mandatory')
vrBwBandwidthCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrBwBandwidthCfg.setStatus('mandatory')
vrBwBandwidthUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrBwBandwidthUsed.setStatus('mandatory')
vrBwNbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrBwNbCalls.setStatus('mandatory')
vrBwNbPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 50, 70, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrBwNbPktDropped.setStatus('mandatory')
mibBuilder.exportSymbols("CXVR-MIB", vrSrNbLinkDown=vrSrNbLinkDown, vrBwRowStatus=vrBwRowStatus, vrSrBandwidth=vrSrBandwidth, vrPingTriggerSend=vrPingTriggerSend, vrPingGapsInMs=vrPingGapsInMs, vrPingNbReplyRx=vrPingNbReplyRx, vrPingRemVceSoftId=vrPingRemVceSoftId, vrRegHuntChannel=vrRegHuntChannel, vrStatNbWanMsgTx=vrStatNbWanMsgTx, vrPingRemNbRestart=vrPingRemNbRestart, vrConfigSoftId=vrConfigSoftId, vrStatNbOverallForwards=vrStatNbOverallForwards, vrStatIamUnxFieldAddress=vrStatIamUnxFieldAddress, vrStatFieldsAddress=vrStatFieldsAddress, vrBwTable=vrBwTable, vrBwNbPktDropped=vrBwNbPktDropped, vrPingNbVrNodesCrossedBackward=vrPingNbVrNodesCrossedBackward, vrRegTable=vrRegTable, vrPingLastSequenceNumberRx=vrPingLastSequenceNumberRx, vrStatNbWanMsgRx=vrStatNbWanMsgRx, vrRouteMask=vrRouteMask, vrSrStatus=vrSrStatus, vrSrNbInboundFrame=vrSrNbInboundFrame, vrSrNbOutboundBw=vrSrNbOutboundBw, vrStatNbOverallDiscards=vrStatNbOverallDiscards, vrPingRemStatus=vrPingRemStatus, vrStatLongestMuxPassInMs=vrStatLongestMuxPassInMs, vrStatRegOverallNumber=vrStatRegOverallNumber, vrSrNbPktDropped=vrSrNbPktDropped, vrBwBandwidthUsed=vrBwBandwidthUsed, vrBwNbCalls=vrBwNbCalls, vrPingRemNbForwardedPacket=vrPingRemNbForwardedPacket, vrStatNbPacketsForwardedPerSec=vrStatNbPacketsForwardedPerSec, vrMibLevel=vrMibLevel, vrPingSequenceError=vrPingSequenceError, vrBwBandwidthCfg=vrBwBandwidthCfg, vrPingMaxRoundTripInMs=vrPingMaxRoundTripInMs, vrSrIndex=vrSrIndex, vrRegDialNo=vrRegDialNo, vrPingRemVrNodeId=vrPingRemVrNodeId, vrConfigOptimization=vrConfigOptimization, vrConfigNodeId=vrConfigNodeId, vrSrConStatus=vrSrConStatus, vrSrNbResetFrameRx=vrSrNbResetFrameRx, vrRegState=vrRegState, vrSrNbCalls=vrSrNbCalls, vrStatRegFormatError=vrStatRegFormatError, vrConfigStatsSamplingPeriod=vrConfigStatsSamplingPeriod, vrPingNbToBeSent=vrPingNbToBeSent, vrPingFormatError=vrPingFormatError, vrStatNbBusMsgRx=vrStatNbBusMsgRx, vrStatNbOutboundQueueFull=vrStatNbOutboundQueueFull, vrRegEntry=vrRegEntry, vrSrBwIndex=vrSrBwIndex, vrPingDialNo=vrPingDialNo, vrPingRemVrSoftId=vrPingRemVrSoftId, vrStatGroup=vrStatGroup, vrConfigGroup=vrConfigGroup, vrSrNbOutboundFrame=vrSrNbOutboundFrame, vrPingProbeReturnAddress=vrPingProbeReturnAddress, vrConfigMaxBufferPoolSize=vrConfigMaxBufferPoolSize, vrRouteSrNumber=vrRouteSrNumber, vrStatRegNotOwner=vrStatRegNotOwner, vrSrRowStatus=vrSrRowStatus, vrRouteEntry=vrRouteEntry, vrRouteDialNo=vrRouteDialNo, vrStatNbVceMsgTx=vrStatNbVceMsgTx, vrStatNbDeadEnds=vrStatNbDeadEnds, vrPingRemVceStationId=vrPingRemVceStationId, vrSrBwUsed=vrSrBwUsed, vrPingLastRoundTripInMs=vrPingLastRoundTripInMs, vrRouteForwardedPkt=vrRouteForwardedPkt, vrPingRemSlotIndex=vrPingRemSlotIndex, vrPingGroup=vrPingGroup, vrStatError=vrStatError, vrPingMinRoundTripInMs=vrPingMinRoundTripInMs, vrConfigNoOfDigitSupported=vrConfigNoOfDigitSupported, vrConfigFastSwitchingOption=vrConfigFastSwitchingOption, vrSrSubRef=vrSrSubRef, vrBwIndex=vrBwIndex, vrSrDestAlias=vrSrDestAlias, vrConfigNoOfSysRouteSupported=vrConfigNoOfSysRouteSupported, vrRegSlotNo=vrRegSlotNo, vrBwEntry=vrBwEntry, vrSrTable=vrSrTable, vrSrEntry=vrSrEntry, vrPingRemHuntChannel=vrPingRemHuntChannel, vrStatInitState=vrStatInitState, vrSrNbInboundBw=vrSrNbInboundBw, vrStatNbVceMsgRx=vrStatNbVceMsgRx, vrRegVceStationId=vrRegVceStationId, vrStatRegInvalidDialNumber=vrStatRegInvalidDialNumber, vrStatNbBusMsgTx=vrStatNbBusMsgTx, vrConfigControl=vrConfigControl, vrPingMaxHopCount=vrPingMaxHopCount, vrRegVceSoftId=vrRegVceSoftId, vrRouteRowStatus=vrRouteRowStatus, vrRouteTable=vrRouteTable, vrStatNbRoutingConflicts=vrStatNbRoutingConflicts, vrPingNbVrNodesCrossedForward=vrPingNbVrNodesCrossedForward, vrSrFailStatus=vrSrFailStatus)
