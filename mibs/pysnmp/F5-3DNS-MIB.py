#
# PySNMP MIB module F5-3DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F5-3DNS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ModuleIdentity, Gauge32, IpAddress, NotificationType, Bits, Counter32, MibIdentifier, Counter64, TimeTicks, ObjectIdentity, Unsigned32, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ModuleIdentity", "Gauge32", "IpAddress", "NotificationType", "Bits", "Counter32", "MibIdentifier", "Counter64", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "enterprises")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
f5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375))
f5systems = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1))
f53dns = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2))
f53dnsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1))
f53dnsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1))
globals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1))
dataCenters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2))
lbRouters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3))
hosts = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4))
lbDnsServs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5))
lbDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6))
summary = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7))
threednsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2))
threednsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2))
globalCheckStaticDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCheckStaticDepends.setStatus('mandatory')
globalDefaultAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalDefaultAlternate.setStatus('mandatory')
globalTimerGetLBRouterData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTimerGetLBRouterData.setStatus('mandatory')
globalTimerGetVServData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTimerGetVServData.setStatus('mandatory')
globalTimerGetPathData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTimerGetPathData.setStatus('mandatory')
globalLBRouterTTL = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalLBRouterTTL.setStatus('mandatory')
globalVSTTL = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalVSTTL.setStatus('mandatory')
globalPathTTL = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathTTL.setStatus('mandatory')
globalRTTTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTTimeout.setStatus('mandatory')
globalRTTSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTSampleCount.setStatus('mandatory')
globalRTTPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTPacketLength.setStatus('mandatory')
globalRTTProbeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("dnsnslookupDot", 4), ("dnsRetrieveBindVers", 5), ("numberItems", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTProbeProtocol.setStatus('mandatory')
globalEncryption = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalEncryption.setStatus('mandatory')
globalEncryptionKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalEncryptionKeyFile.setStatus('mandatory')
globalPathHiWater = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathHiWater.setStatus('mandatory')
globalPathLoWater = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathLoWater.setStatus('mandatory')
globalPathDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 2419200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathDuration.setStatus('mandatory')
globalPathReapAlg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lru", 1), ("fewestHits", 2), ("numberItems", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathReapAlg.setStatus('mandatory')
globalTimerKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTimerKeepAlive.setStatus('mandatory')
globalRxBufSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRxBufSize.setStatus('mandatory')
globalTxBufSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTxBufSize.setStatus('mandatory')
globalQosCoeffRTT = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosCoeffRTT.setStatus('mandatory')
globalQosCoeffCompletionRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosCoeffCompletionRate.setStatus('mandatory')
globalQosCoeffHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosCoeffHops.setStatus('mandatory')
globalQosCoeffPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosCoeffPacketRate.setStatus('mandatory')
globalPathsNoClobber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathsNoClobber.setStatus('mandatory')
globalPathsNeverDie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPathsNeverDie.setStatus('mandatory')
globalRegulateInit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRegulateInit.setStatus('mandatory')
globalRegulatePaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRegulatePaths.setStatus('mandatory')
globalProberAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalProberAddr.setStatus('mandatory')
globalCheckDynamicDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCheckDynamicDepends.setStatus('mandatory')
globalDefaultFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalDefaultFallback.setStatus('mandatory')
globalDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalDefaultTTL.setStatus('mandatory')
globalPersistLDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalPersistLDns.setStatus('mandatory')
globalFbRespectAcl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalFbRespectAcl.setStatus('mandatory')
globalFbRespectDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalFbRespectDepends.setStatus('mandatory')
globalHostTTL = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalHostTTL.setStatus('mandatory')
globalTimerGetHostData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalTimerGetHostData.setStatus('mandatory')
globalRTTRetireZero = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTRetireZero.setStatus('mandatory')
globalRTTPortDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTPortDiscovery.setStatus('mandatory')
globalRTTDiscoveryMethod = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("short", 1), ("wks", 2), ("full", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTDiscoveryMethod.setStatus('mandatory')
globalRTTProbeDynamic = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTProbeDynamic.setStatus('mandatory')
globalResolverRXBufSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 131072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalResolverRXBufSize.setStatus('mandatory')
globalResolverTXBufSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalResolverTXBufSize.setStatus('mandatory')
globalCoeffLastAccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffLastAccess.setStatus('mandatory')
globalCoeffFreshRemain = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffFreshRemain.setStatus('mandatory')
globalCoeffAccessRefresh = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffAccessRefresh.setStatus('mandatory')
globalCoeffAccessTotal = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffAccessTotal.setStatus('mandatory')
globalCoeffDRTT = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffDRTT.setStatus('mandatory')
globalCoeffDCompletionRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalCoeffDCompletionRate.setStatus('mandatory')
globalQosCoeffTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosCoeffTopology.setStatus('mandatory')
globalQosFactorRTT = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosFactorRTT.setStatus('mandatory')
globalQosFactorHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosFactorHops.setStatus('mandatory')
globalQosFactorCompletionRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosFactorCompletionRate.setStatus('mandatory')
globalQosFactorPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosFactorPacketRate.setStatus('mandatory')
globalQosFactorTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalQosFactorTopology.setStatus('mandatory')
globalLDnsHiWater = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalLDnsHiWater.setStatus('mandatory')
globalLDnsLoWater = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalLDnsLoWater.setStatus('mandatory')
globalLDnsDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 424967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalLDnsDuration.setStatus('mandatory')
globalLDnsReapAlg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lru", 1), ("fewestHits", 2), ("numberItems", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalLDnsReapAlg.setStatus('mandatory')
globalUseAltIqPort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalUseAltIqPort.setStatus('mandatory')
globalMultiplexIq = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalMultiplexIq.setStatus('mandatory')
globalRTTProbeProtocolList = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTProbeProtocolList.setStatus('mandatory')
globalRTTProbeProtocolState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalRTTProbeProtocolState.setStatus('mandatory')
globalResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalResetCounters.setStatus('mandatory')
globalResetCounterTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 1, 66), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalResetCounterTime.setStatus('mandatory')
dataCenterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: dataCenterTable.setStatus('mandatory')
dataCenterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "F5-3DNS-MIB", "dataCenterName"))
if mibBuilder.loadTexts: dataCenterEntry.setStatus('mandatory')
dataCenterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterName.setStatus('mandatory')
dataCenterContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterContact.setStatus('mandatory')
dataCenterLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterLocation.setStatus('mandatory')
dataCenterPathCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterPathCount.setStatus('mandatory')
dataCenterDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterDisabled.setStatus('mandatory')
dataCenterDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterDisableDuration.setStatus('mandatory')
dataCenterServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: dataCenterServTable.setStatus('mandatory')
dataCenterServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "F5-3DNS-MIB", "dataCenterName"), (0, "F5-3DNS-MIB", "dataCenterServAddr"))
if mibBuilder.loadTexts: dataCenterServEntry.setStatus('mandatory')
dataCenterServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterServAddr.setStatus('mandatory')
dataCenterServType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("lbRouter", 2), ("lbDnsServ", 3), ("host", 4), ("lDns", 5), ("prober", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCenterServType.setStatus('mandatory')
lbRouterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: lbRouterTable.setStatus('mandatory')
lbRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbRouterAddr"))
if mibBuilder.loadTexts: lbRouterEntry.setStatus('mandatory')
lbRouterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterAddr.setStatus('mandatory')
lbRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterName.setStatus('mandatory')
lbRouterVServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServCount.setStatus('mandatory')
lbRouterPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterPicks.setStatus('mandatory')
lbRouterRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterRefreshes.setStatus('mandatory')
lbRouterDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterDisabled.setStatus('mandatory')
lbRouterDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterDisableDuration.setStatus('mandatory')
lbRouterIQProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIQProto.setStatus('mandatory')
lbRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: lbRouterIfTable.setStatus('mandatory')
lbRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbRouterAddr"), (0, "F5-3DNS-MIB", "lbRouterIfAddr"))
if mibBuilder.loadTexts: lbRouterIfEntry.setStatus('mandatory')
lbRouterIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfAddr.setStatus('mandatory')
lbRouterIfShared = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfShared.setStatus('mandatory')
lbRouterIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("waiting", 4), ("alert", 5), ("panic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfStatus.setStatus('mandatory')
lbRouterIfTXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfTXPackets.setStatus('mandatory')
lbRouterIfRXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfRXPackets.setStatus('mandatory')
lbRouterIfPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPacketRate.setStatus('mandatory')
lbRouterIfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfUpTime.setStatus('mandatory')
lbRouterIfAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfAliveTime.setStatus('mandatory')
lbRouterIfDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfDataTime.setStatus('mandatory')
lbRouterIfPathSentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPathSentTime.setStatus('mandatory')
lbRouterIfPathsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPathsSent.setStatus('mandatory')
lbRouterIfPathsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPathsRcvd.setStatus('mandatory')
lbRouterIfPathSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPathSends.setStatus('mandatory')
lbRouterIfPathRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfPathRcvs.setStatus('mandatory')
lbRouterIfAvgPathsSentX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfAvgPathsSentX1000.setStatus('mandatory')
lbRouterIfAvgPathsRcvdX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfAvgPathsRcvdX1000.setStatus('mandatory')
lbRouterIfFctryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: lbRouterIfFctryTable.setStatus('mandatory')
lbRouterIfFctryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbRouterAddr"), (0, "F5-3DNS-MIB", "lbRouterIfAddr"), (0, "F5-3DNS-MIB", "lbRouterIfFctryType"))
if mibBuilder.loadTexts: lbRouterIfFctryEntry.setStatus('mandatory')
lbRouterIfFctryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lbRouter", 1), ("prober", 2), ("discovery", 3), ("snmp", 4), ("hops", 5), ("server", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfFctryType.setStatus('mandatory')
lbRouterIfFctryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterIfFctryCount.setStatus('mandatory')
lbRouterVServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4), )
if mibBuilder.loadTexts: lbRouterVServTable.setStatus('mandatory')
lbRouterVServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbRouterAddr"), (0, "F5-3DNS-MIB", "lbRouterVServAddr"), (0, "F5-3DNS-MIB", "lbRouterVServPort"))
if mibBuilder.loadTexts: lbRouterVServEntry.setStatus('mandatory')
lbRouterVServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServAddr.setStatus('mandatory')
lbRouterVServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServPort.setStatus('mandatory')
lbRouterVServXlatedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServXlatedAddr.setStatus('mandatory')
lbRouterVServXlatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServXlatedPort.setStatus('mandatory')
lbRouterVServProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("dnsnslookupDot", 4), ("dnsRetrieveBindVers", 5), ("numberItems", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServProbeProtocol.setStatus('mandatory')
lbRouterVServPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServPicks.setStatus('mandatory')
lbRouterVServRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServRefreshes.setStatus('mandatory')
lbRouterVServAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServAliveTime.setStatus('mandatory')
lbRouterVServDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServDataTime.setStatus('mandatory')
lbRouterVServCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServCurConns.setStatus('mandatory')
lbRouterVServCurConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServCurConnLimit.setStatus('mandatory')
lbRouterVServCurNodesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServCurNodesUp.setStatus('mandatory')
lbRouterVServCurEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServCurEnabled.setStatus('mandatory')
lbRouterVServDnsServDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServDnsServDisabled.setStatus('mandatory')
lbRouterVServDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 3, 4, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbRouterVServDisableDuration.setStatus('mandatory')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: hostTable.setStatus('mandatory')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "F5-3DNS-MIB", "hostAddr"))
if mibBuilder.loadTexts: hostEntry.setStatus('mandatory')
hostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostAddr.setStatus('mandatory')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
hostProber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostProber.setStatus('mandatory')
hostProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("dnsnslookupDot", 4), ("dnsRetrieveBindVers", 5), ("numberItems", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostProbeProtocol.setStatus('mandatory')
hostProbePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostProbePort.setStatus('mandatory')
hostVServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServCount.setStatus('mandatory')
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("waiting", 4), ("alert", 5), ("panic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatus.setStatus('mandatory')
hostPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostPicks.setStatus('mandatory')
hostRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostRefreshes.setStatus('mandatory')
hostDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDisabled.setStatus('mandatory')
hostDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDisableDuration.setStatus('mandatory')
hostMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unkown", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMetrics.setStatus('mandatory')
hostMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMemory.setStatus('mandatory')
hostCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostCPU.setStatus('mandatory')
hostDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostDiskSpace.setStatus('mandatory')
hostSNMPConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPConfigured.setStatus('mandatory')
hostSNMPAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ciscold", 1), ("ciscold2", 2), ("ciscold3", 3), ("ucd", 4), ("solstice", 5), ("ntserv", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPAgentType.setStatus('mandatory')
hostSNMPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPAddress.setStatus('mandatory')
hostSNMPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPPort.setStatus('mandatory')
hostSNMPRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPRetries.setStatus('mandatory')
hostSNMPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPTimeout.setStatus('mandatory')
hostSNMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3), ("notset", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPVersion.setStatus('mandatory')
hostSNMPCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSNMPCommunity.setStatus('mandatory')
hostIfTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: hostIfTable.setStatus('mandatory')
hostIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "F5-3DNS-MIB", "hostAddr"), (0, "F5-3DNS-MIB", "hostIfAddr"))
if mibBuilder.loadTexts: hostIfEntry.setStatus('mandatory')
hostIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfAddr.setStatus('mandatory')
hostIfShared = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfShared.setStatus('mandatory')
hostIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("waiting", 4), ("alert", 5), ("panic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfStatus.setStatus('mandatory')
hostIfTXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfTXPackets.setStatus('mandatory')
hostIfRXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfRXPackets.setStatus('mandatory')
hostIfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfUpTime.setStatus('mandatory')
hostIfAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfAliveTime.setStatus('mandatory')
hostIfDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfDataTime.setStatus('mandatory')
hostIfPathSentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfPathSentTime.setStatus('mandatory')
hostIfPathsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfPathsSent.setStatus('mandatory')
hostIfPathsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfPathsRcvd.setStatus('mandatory')
hostIfPathSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfPathSends.setStatus('mandatory')
hostIfPathRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfPathRcvs.setStatus('mandatory')
hostIfAvgPathsSentX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfAvgPathsSentX1000.setStatus('mandatory')
hostIfAvgPathsRcvdX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfAvgPathsRcvdX1000.setStatus('mandatory')
hostIfFctryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 3), )
if mibBuilder.loadTexts: hostIfFctryTable.setStatus('mandatory')
hostIfFctryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 3, 1), ).setIndexNames((0, "F5-3DNS-MIB", "hostAddr"), (0, "F5-3DNS-MIB", "hostIfAddr"), (0, "F5-3DNS-MIB", "hostIfFctryType"))
if mibBuilder.loadTexts: hostIfFctryEntry.setStatus('mandatory')
hostIfFctryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lbRouter", 1), ("prober", 2), ("discovery", 3), ("snmp", 4), ("hops", 5), ("server", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfFctryType.setStatus('mandatory')
hostIfFctryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfFctryCount.setStatus('mandatory')
hostVServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: hostVServTable.setStatus('mandatory')
hostVServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "F5-3DNS-MIB", "hostAddr"), (0, "F5-3DNS-MIB", "hostVServAddr"), (0, "F5-3DNS-MIB", "hostVServPort"))
if mibBuilder.loadTexts: hostVServEntry.setStatus('mandatory')
hostVServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServAddr.setStatus('mandatory')
hostVServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServPort.setStatus('mandatory')
hostVServXlatedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServXlatedAddr.setStatus('mandatory')
hostVServXlatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServXlatedPort.setStatus('mandatory')
hostVServProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("dnsnslookupDot", 4), ("dnsRetrieveBindVers", 5), ("numberItems", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServProbeProtocol.setStatus('mandatory')
hostVServPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServPicks.setStatus('mandatory')
hostVServRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServRefreshes.setStatus('mandatory')
hostVServAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServAliveTime.setStatus('mandatory')
hostVServDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServDataTime.setStatus('mandatory')
hostVServDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServDisabled.setStatus('mandatory')
hostVServDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 4, 4, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostVServDisableDuration.setStatus('mandatory')
lbDnsServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: lbDnsServTable.setStatus('mandatory')
lbDnsServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDnsServAddr"))
if mibBuilder.loadTexts: lbDnsServEntry.setStatus('mandatory')
lbDnsServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServAddr.setStatus('mandatory')
lbDnsServName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServName.setStatus('mandatory')
lbDnsServProber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServProber.setStatus('mandatory')
lbDnsServProbeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("udp", 3), ("dnsnslookupDot", 4), ("dnsRetrieveBindVers", 5), ("numberItems", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServProbeProtocol.setStatus('mandatory')
lbDnsServProbePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServProbePort.setStatus('mandatory')
lbDnsServStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("waiting", 4), ("alert", 5), ("panic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServStatus.setStatus('mandatory')
lbDnsServPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServPicks.setStatus('mandatory')
lbDnsServRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServRefreshes.setStatus('mandatory')
lbDnsServDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServDisabled.setStatus('mandatory')
lbDnsServDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServDisableDuration.setStatus('mandatory')
lbDnsServIQProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIQProto.setStatus('mandatory')
lbDnsServIfTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2), )
if mibBuilder.loadTexts: lbDnsServIfTable.setStatus('mandatory')
lbDnsServIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDnsServAddr"), (0, "F5-3DNS-MIB", "lbDnsServIfAddr"))
if mibBuilder.loadTexts: lbDnsServIfEntry.setStatus('mandatory')
lbDnsServIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfAddr.setStatus('mandatory')
lbDnsServIfShared = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfShared.setStatus('mandatory')
lbDnsServIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("waiting", 4), ("alert", 5), ("panic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfStatus.setStatus('mandatory')
lbDnsServIfTXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfTXPackets.setStatus('mandatory')
lbDnsServIfRXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfRXPackets.setStatus('mandatory')
lbDnsServIfUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfUpTime.setStatus('mandatory')
lbDnsServIfAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfAliveTime.setStatus('mandatory')
lbDnsServIfDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfDataTime.setStatus('mandatory')
lbDnsServIfPathSentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfPathSentTime.setStatus('mandatory')
lbDnsServIfPathsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfPathsSent.setStatus('mandatory')
lbDnsServIfPathsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfPathsRcvd.setStatus('mandatory')
lbDnsServIfPathSends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfPathSends.setStatus('mandatory')
lbDnsServIfPathRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfPathRcvs.setStatus('mandatory')
lbDnsServIfAvgPathsSentX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfAvgPathsSentX1000.setStatus('mandatory')
lbDnsServIfAvgPathsRcvdX1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfAvgPathsRcvdX1000.setStatus('mandatory')
lbDnsServIfFctryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 3), )
if mibBuilder.loadTexts: lbDnsServIfFctryTable.setStatus('mandatory')
lbDnsServIfFctryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 3, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDnsServAddr"), (0, "F5-3DNS-MIB", "lbDnsServIfAddr"), (0, "F5-3DNS-MIB", "lbDnsServIfFctryType"))
if mibBuilder.loadTexts: lbDnsServIfFctryEntry.setStatus('mandatory')
lbDnsServIfFctryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lbRouter", 1), ("prober", 2), ("discovery", 3), ("snmp", 4), ("hops", 5), ("server", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfFctryType.setStatus('mandatory')
lbDnsServIfFctryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDnsServIfFctryCount.setStatus('mandatory')
lbDomainTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: lbDomainTable.setStatus('mandatory')
lbDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDomainName"))
if mibBuilder.loadTexts: lbDomainEntry.setStatus('mandatory')
lbDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainName.setStatus('mandatory')
lbDomainAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainAddr.setStatus('mandatory')
lbDomainPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPort.setStatus('mandatory')
lbDomainTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainTTL.setStatus('mandatory')
lbDomainLBModePool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainLBModePool.setStatus('mandatory')
lbDomainQosCoeffRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainQosCoeffRTT.setStatus('mandatory')
lbDomainQosCoeffHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainQosCoeffHops.setStatus('mandatory')
lbDomainQosCoeffTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainQosCoeffTopology.setStatus('mandatory')
lbDomainQosCoeffCompletionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainQosCoeffCompletionRate.setStatus('mandatory')
lbDomainQosCoeffPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainQosCoeffPacketRate.setStatus('mandatory')
lbDomainRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainRequests.setStatus('mandatory')
lbDomainPreferredResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPreferredResolves.setStatus('mandatory')
lbDomainAlternateResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainAlternateResolves.setStatus('mandatory')
lbDomainFallbackResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainFallbackResolves.setStatus('mandatory')
lbDomainReturnsToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainReturnsToDns.setStatus('mandatory')
lbDomainLastResolve = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainLastResolve.setStatus('mandatory')
lbDomainDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainDisabled.setStatus('mandatory')
lbDomainDisableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainDisableDuration.setStatus('mandatory')
lbDomainPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPersist.setStatus('mandatory')
lbDomainPersistTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 1, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPersistTTL.setStatus('mandatory')
lbDomainAliasTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 2), )
if mibBuilder.loadTexts: lbDomainAliasTable.setStatus('mandatory')
lbDomainAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 2, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDomainName"), (0, "F5-3DNS-MIB", "lbDomainAliasIndex"))
if mibBuilder.loadTexts: lbDomainAliasEntry.setStatus('mandatory')
lbDomainAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainAliasIndex.setStatus('mandatory')
lbDomainAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainAliasName.setStatus('mandatory')
lbDomainAliasRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainAliasRequests.setStatus('mandatory')
lbDomainPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 3), )
if mibBuilder.loadTexts: lbDomainPortTable.setStatus('mandatory')
lbDomainPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 3, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDomainName"), (0, "F5-3DNS-MIB", "lbDomainPortPort"))
if mibBuilder.loadTexts: lbDomainPortEntry.setStatus('mandatory')
lbDomainPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPortPort.setStatus('mandatory')
lbDomainPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4), )
if mibBuilder.loadTexts: lbDomainPoolTable.setStatus('mandatory')
lbDomainPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDomainName"), (0, "F5-3DNS-MIB", "lbDomainPoolIndex"))
if mibBuilder.loadTexts: lbDomainPoolEntry.setStatus('mandatory')
lbDomainPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolIndex.setStatus('mandatory')
lbDomainPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolName.setStatus('mandatory')
lbDomainPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("lbRouter", 2), ("host", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolType.setStatus('mandatory')
lbDomainPoolState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("preferred", 2), ("alternate", 3), ("fallback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolState.setStatus('mandatory')
lbDomainPoolVSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolVSCount.setStatus('mandatory')
lbDomainPoolLBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolLBMode.setStatus('mandatory')
lbDomainPoolAlternateLBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolAlternateLBMode.setStatus('mandatory')
lbDomainPoolFallbackLBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("returnDNS", 1), ("none", 2), ("returnVS", 3), ("roundRobin", 4), ("ratio", 5), ("random", 6), ("topology", 7), ("staticPersist", 8), ("globalAvailability", 9), ("servers", 10), ("connections", 11), ("roundTripTime", 12), ("hops", 13), ("packetRate", 14), ("mem", 15), ("cpu", 16), ("diskSpace", 17), ("hitRatio", 18), ("qos", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolFallbackLBMode.setStatus('mandatory')
lbDomainPoolCheckStaticDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolCheckStaticDepends.setStatus('mandatory')
lbDomainPoolCheckDynamicDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolCheckDynamicDepends.setStatus('mandatory')
lbDomainPoolRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolRatio.setStatus('mandatory')
lbDomainPoolRipeness = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolRipeness.setStatus('mandatory')
lbDomainPoolPreferredResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolPreferredResolves.setStatus('mandatory')
lbDomainPoolAlternateResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolAlternateResolves.setStatus('mandatory')
lbDomainPoolFallbackResolves = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolFallbackResolves.setStatus('mandatory')
lbDomainPoolReturnsToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolReturnsToDns.setStatus('mandatory')
lbDomainPoolRRLdns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolRRLdns.setStatus('mandatory')
lbDomainPoolRRLdnsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolRRLdnsLimit.setStatus('mandatory')
lbDomainPoolVSTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5), )
if mibBuilder.loadTexts: lbDomainPoolVSTable.setStatus('mandatory')
lbDomainPoolVSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5, 1), ).setIndexNames((0, "F5-3DNS-MIB", "lbDomainName"), (0, "F5-3DNS-MIB", "lbDomainPoolIndex"), (0, "F5-3DNS-MIB", "lbDomainPoolVSAddr"), (0, "F5-3DNS-MIB", "lbDomainPoolVSPort"))
if mibBuilder.loadTexts: lbDomainPoolVSEntry.setStatus('mandatory')
lbDomainPoolVSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolVSAddr.setStatus('mandatory')
lbDomainPoolVSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolVSPort.setStatus('mandatory')
lbDomainPoolVSRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolVSRatio.setStatus('mandatory')
lbDomainPoolVSRipeness = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbDomainPoolVSRipeness.setStatus('mandatory')
summaryVersion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryVersion.setStatus('mandatory')
summaryUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryUpTime.setStatus('mandatory')
summaryDate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryDate.setStatus('mandatory')
summaryLastReload = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryLastReload.setStatus('mandatory')
summaryLastDump = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryLastDump.setStatus('mandatory')
summaryRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryRequests.setStatus('mandatory')
summarySyncMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncMode.setStatus('mandatory')
summarySyncFile = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncFile.setStatus('mandatory')
summarySyncIns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncIns.setStatus('mandatory')
summarySyncInErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncInErrors.setStatus('mandatory')
summaryLastSyncIn = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryLastSyncIn.setStatus('mandatory')
summarySyncOuts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncOuts.setStatus('mandatory')
summarySyncOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summarySyncOutErrors.setStatus('mandatory')
summaryLastSyncOut = MibScalar((1, 3, 6, 1, 4, 1, 3375, 1, 2, 1, 1, 7, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryLastSyncOut.setStatus('mandatory')
threednsTrapVSGreenToRed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2) + (0,1))
threednsTrapVSRedToGreen = NotificationType((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2) + (0,2))
threednsTrapServerRedToGreen = NotificationType((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2) + (0,3))
threednsTrapServerGreenToRed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2) + (0,4))
threednsTrapCRCFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 1, 2, 2, 2) + (0,5))
mibBuilder.exportSymbols("F5-3DNS-MIB", hostVServXlatedAddr=hostVServXlatedAddr, dataCenterServEntry=dataCenterServEntry, globalTimerGetPathData=globalTimerGetPathData, globalRTTProbeProtocolList=globalRTTProbeProtocolList, hostSNMPConfigured=hostSNMPConfigured, lbDnsServIfAvgPathsSentX1000=lbDnsServIfAvgPathsSentX1000, threednsTraps=threednsTraps, summarySyncInErrors=summarySyncInErrors, lbDomainAddr=lbDomainAddr, lbDomainName=lbDomainName, hostSNMPAddress=hostSNMPAddress, lbRouterVServPort=lbRouterVServPort, hostRefreshes=hostRefreshes, hostIfFctryCount=hostIfFctryCount, lbRouterVServCurNodesUp=lbRouterVServCurNodesUp, globalRTTPacketLength=globalRTTPacketLength, hostIfFctryEntry=hostIfFctryEntry, hostIfTXPackets=hostIfTXPackets, lbRouterIfPathsSent=lbRouterIfPathsSent, lbDomainPoolName=lbDomainPoolName, threednsTrapCRCFailure=threednsTrapCRCFailure, lbDomainAlternateResolves=lbDomainAlternateResolves, lbRouterIfAvgPathsSentX1000=lbRouterIfAvgPathsSentX1000, lbRouterVServCount=lbRouterVServCount, globalDefaultTTL=globalDefaultTTL, lbRouterVServDataTime=lbRouterVServDataTime, hostSNMPRetries=hostSNMPRetries, summarySyncFile=summarySyncFile, globalTimerGetLBRouterData=globalTimerGetLBRouterData, lbRouterVServDisableDuration=lbRouterVServDisableDuration, lbDnsServIfAvgPathsRcvdX1000=lbDnsServIfAvgPathsRcvdX1000, lbRouters=lbRouters, lbRouterPicks=lbRouterPicks, hostEntry=hostEntry, hostIfFctryType=hostIfFctryType, lbDomainPoolVSAddr=lbDomainPoolVSAddr, hostName=hostName, hostIfDataTime=hostIfDataTime, lbDomainPoolRipeness=lbDomainPoolRipeness, lbRouterIfFctryEntry=lbRouterIfFctryEntry, globalQosCoeffCompletionRate=globalQosCoeffCompletionRate, summaryLastSyncOut=summaryLastSyncOut, globalTimerGetHostData=globalTimerGetHostData, lbDnsServIfPathRcvs=lbDnsServIfPathRcvs, lbDomainRequests=lbDomainRequests, lbRouterIfPathRcvs=lbRouterIfPathRcvs, lbDomainPoolRatio=lbDomainPoolRatio, lbRouterVServEntry=lbRouterVServEntry, lbDomainPoolType=lbDomainPoolType, globalRTTRetireZero=globalRTTRetireZero, summarySyncMode=summarySyncMode, lbDomainQosCoeffCompletionRate=lbDomainQosCoeffCompletionRate, hostProbePort=hostProbePort, lbRouterIfTable=lbRouterIfTable, globalDefaultFallback=globalDefaultFallback, lbDomainPortEntry=lbDomainPortEntry, hostVServCount=hostVServCount, lbRouterIQProto=lbRouterIQProto, globalRegulateInit=globalRegulateInit, hostIfAvgPathsSentX1000=hostIfAvgPathsSentX1000, lbDnsServIfPathsSent=lbDnsServIfPathsSent, summaryRequests=summaryRequests, summarySyncOuts=summarySyncOuts, summarySyncOutErrors=summarySyncOutErrors, hostVServAddr=hostVServAddr, lbDnsServIQProto=lbDnsServIQProto, lbRouterIfPathsRcvd=lbRouterIfPathsRcvd, hostIfRXPackets=hostIfRXPackets, lbDomainAliasRequests=lbDomainAliasRequests, lbDomainPoolLBMode=lbDomainPoolLBMode, globalPathsNoClobber=globalPathsNoClobber, hostIfStatus=hostIfStatus, dataCenterServType=dataCenterServType, hostVServAliveTime=hostVServAliveTime, lbDnsServName=lbDnsServName, threednsTrapVSRedToGreen=threednsTrapVSRedToGreen, globalPathDuration=globalPathDuration, lbDnsServAddr=lbDnsServAddr, globalQosFactorHops=globalQosFactorHops, globalTxBufSize=globalTxBufSize, lbDnsServIfFctryCount=lbDnsServIfFctryCount, hostVServDisabled=hostVServDisabled, globalResolverRXBufSize=globalResolverRXBufSize, dataCenterContact=dataCenterContact, globalEncryptionKeyFile=globalEncryptionKeyFile, lbRouterIfTXPackets=lbRouterIfTXPackets, lbDomainPoolCheckStaticDepends=lbDomainPoolCheckStaticDepends, hostVServDataTime=hostVServDataTime, globalPersistLDns=globalPersistLDns, hostIfEntry=hostIfEntry, lbDnsServIfPathSends=lbDnsServIfPathSends, globals=globals, dataCenterDisabled=dataCenterDisabled, lbDnsServIfFctryTable=lbDnsServIfFctryTable, dataCenterName=dataCenterName, lbDomainPortPort=lbDomainPortPort, globalPathsNeverDie=globalPathsNeverDie, lbRouterRefreshes=lbRouterRefreshes, hostSNMPAgentType=hostSNMPAgentType, lbDnsServStatus=lbDnsServStatus, lbRouterIfStatus=lbRouterIfStatus, lbDomainPoolEntry=lbDomainPoolEntry, lbDnsServIfAddr=lbDnsServIfAddr, dataCenterLocation=dataCenterLocation, lbDomainPoolVSCount=lbDomainPoolVSCount, dataCenterTable=dataCenterTable, globalEncryption=globalEncryption, globalFbRespectDepends=globalFbRespectDepends, globalCoeffDCompletionRate=globalCoeffDCompletionRate, lbDomainFallbackResolves=lbDomainFallbackResolves, threednsTrap=threednsTrap, summaryLastSyncIn=summaryLastSyncIn, lbDomainQosCoeffPacketRate=lbDomainQosCoeffPacketRate, lbDnsServIfPathSentTime=lbDnsServIfPathSentTime, hostIfAvgPathsRcvdX1000=hostIfAvgPathsRcvdX1000, dataCenters=dataCenters, lbDnsServIfAliveTime=lbDnsServIfAliveTime, lbRouterVServCurConns=lbRouterVServCurConns, lbDnsServIfRXPackets=lbDnsServIfRXPackets, f5=f5, lbDomainTable=lbDomainTable, lbDomainReturnsToDns=lbDomainReturnsToDns, lbDomainPoolRRLdns=lbDomainPoolRRLdns, lbDomainPoolVSRipeness=lbDomainPoolVSRipeness, globalCoeffFreshRemain=globalCoeffFreshRemain, globalDefaultAlternate=globalDefaultAlternate, globalHostTTL=globalHostTTL, hostDisabled=hostDisabled, hostIfPathSentTime=hostIfPathSentTime, hosts=hosts, globalPathHiWater=globalPathHiWater, lbRouterVServDnsServDisabled=lbRouterVServDnsServDisabled, threednsTrapVSGreenToRed=threednsTrapVSGreenToRed, f5systems=f5systems, dataCenterServAddr=dataCenterServAddr, summary=summary, globalLDnsDuration=globalLDnsDuration, lbDnsServIfEntry=lbDnsServIfEntry, hostIfAliveTime=hostIfAliveTime, lbDomains=lbDomains, lbRouterVServAddr=lbRouterVServAddr, hostVServRefreshes=hostVServRefreshes, lbRouterIfFctryTable=lbRouterIfFctryTable, lbDnsServIfDataTime=lbDnsServIfDataTime, lbRouterVServXlatedAddr=lbRouterVServXlatedAddr, lbDomainPort=lbDomainPort, lbRouterVServRefreshes=lbRouterVServRefreshes, globalQosFactorRTT=globalQosFactorRTT, hostStatus=hostStatus, lbDomainAliasName=lbDomainAliasName, lbDomainPreferredResolves=lbDomainPreferredResolves, lbRouterIfPathSends=lbRouterIfPathSends, globalRTTDiscoveryMethod=globalRTTDiscoveryMethod, globalCoeffLastAccess=globalCoeffLastAccess, globalRegulatePaths=globalRegulatePaths, lbDnsServIfStatus=lbDnsServIfStatus, hostVServPort=hostVServPort, globalTimerKeepAlive=globalTimerKeepAlive, lbRouterTable=lbRouterTable, hostCPU=hostCPU, lbDnsServEntry=lbDnsServEntry, hostProbeProtocol=hostProbeProtocol, lbDomainPoolCheckDynamicDepends=lbDomainPoolCheckDynamicDepends, globalLDnsLoWater=globalLDnsLoWater, lbRouterIfDataTime=lbRouterIfDataTime, hostIfPathSends=hostIfPathSends, globalLDnsHiWater=globalLDnsHiWater, globalUseAltIqPort=globalUseAltIqPort, globalFbRespectAcl=globalFbRespectAcl, lbRouterVServXlatedPort=lbRouterVServXlatedPort, hostDiskSpace=hostDiskSpace, hostMemory=hostMemory, lbDomainLBModePool=lbDomainLBModePool, hostVServEntry=hostVServEntry, lbRouterIfEntry=lbRouterIfEntry, hostAddr=hostAddr, f53dnsMIB=f53dnsMIB, lbRouterIfUpTime=lbRouterIfUpTime, lbDnsServDisableDuration=lbDnsServDisableDuration, lbDomainPoolFallbackResolves=lbDomainPoolFallbackResolves, lbDomainQosCoeffRTT=lbDomainQosCoeffRTT, globalRTTPortDiscovery=globalRTTPortDiscovery, dataCenterDisableDuration=dataCenterDisableDuration, lbDomainPortTable=lbDomainPortTable, globalMultiplexIq=globalMultiplexIq, globalTimerGetVServData=globalTimerGetVServData, globalCheckDynamicDepends=globalCheckDynamicDepends, summaryVersion=summaryVersion, summaryUpTime=summaryUpTime, hostIfPathsRcvd=hostIfPathsRcvd, hostIfTable=hostIfTable, lbDomainAliasTable=lbDomainAliasTable, hostMetrics=hostMetrics, summaryDate=summaryDate, globalCoeffAccessRefresh=globalCoeffAccessRefresh, lbRouterIfAddr=lbRouterIfAddr, globalLDnsReapAlg=globalLDnsReapAlg, threednsTrapServerGreenToRed=threednsTrapServerGreenToRed, hostIfPathsSent=hostIfPathsSent, lbDomainPoolPreferredResolves=lbDomainPoolPreferredResolves, hostIfPathRcvs=hostIfPathRcvs, lbDomainPoolIndex=lbDomainPoolIndex, lbRouterVServCurConnLimit=lbRouterVServCurConnLimit, hostPicks=hostPicks, summaryLastReload=summaryLastReload, lbDnsServIfShared=lbDnsServIfShared, globalRTTProbeDynamic=globalRTTProbeDynamic, lbDnsServProbePort=lbDnsServProbePort, lbDomainPoolFallbackLBMode=lbDomainPoolFallbackLBMode, lbRouterIfAvgPathsRcvdX1000=lbRouterIfAvgPathsRcvdX1000, globalQosFactorCompletionRate=globalQosFactorCompletionRate, lbRouterDisableDuration=lbRouterDisableDuration, summarySyncIns=summarySyncIns, globalQosFactorPacketRate=globalQosFactorPacketRate, globalCoeffAccessTotal=globalCoeffAccessTotal, lbRouterIfRXPackets=lbRouterIfRXPackets, lbDomainPoolAlternateResolves=lbDomainPoolAlternateResolves, globalQosCoeffRTT=globalQosCoeffRTT, lbDomainPoolTable=lbDomainPoolTable, lbRouterIfShared=lbRouterIfShared, threednsTrapServerRedToGreen=threednsTrapServerRedToGreen, globalRTTProbeProtocol=globalRTTProbeProtocol, hostProber=hostProber, lbDomainEntry=lbDomainEntry, f53dnsMIBObjects=f53dnsMIBObjects, hostSNMPPort=hostSNMPPort, hostVServPicks=hostVServPicks, lbRouterName=lbRouterName, hostVServTable=hostVServTable, hostVServXlatedPort=hostVServXlatedPort, globalQosCoeffHops=globalQosCoeffHops, lbRouterEntry=lbRouterEntry, summaryLastDump=summaryLastDump, lbDnsServIfFctryEntry=lbDnsServIfFctryEntry, lbDomainAliasEntry=lbDomainAliasEntry, globalLBRouterTTL=globalLBRouterTTL, lbDomainQosCoeffHops=lbDomainQosCoeffHops, lbDnsServIfTXPackets=lbDnsServIfTXPackets, lbDomainPoolVSEntry=lbDomainPoolVSEntry, lbDomainPoolVSRatio=lbDomainPoolVSRatio, lbDnsServProbeProtocol=lbDnsServProbeProtocol, lbDomainPoolVSPort=lbDomainPoolVSPort, lbRouterIfAliveTime=lbRouterIfAliveTime, hostSNMPTimeout=hostSNMPTimeout, globalResetCounterTime=globalResetCounterTime, lbRouterDisabled=lbRouterDisabled, lbRouterVServAliveTime=lbRouterVServAliveTime, lbDomainTTL=lbDomainTTL, hostVServProbeProtocol=hostVServProbeProtocol, dataCenterEntry=dataCenterEntry, lbDomainPoolState=lbDomainPoolState, globalPathLoWater=globalPathLoWater, lbDnsServDisabled=lbDnsServDisabled, lbDomainDisableDuration=lbDomainDisableDuration)
mibBuilder.exportSymbols("F5-3DNS-MIB", hostVServDisableDuration=hostVServDisableDuration, f53dns=f53dns, lbDomainQosCoeffTopology=lbDomainQosCoeffTopology, lbDomainLastResolve=lbDomainLastResolve, dataCenterServTable=dataCenterServTable, lbDnsServProber=lbDnsServProber, lbDomainPoolVSTable=lbDomainPoolVSTable, hostTable=hostTable, globalResolverTXBufSize=globalResolverTXBufSize, globalPathReapAlg=globalPathReapAlg, lbDnsServRefreshes=lbDnsServRefreshes, hostIfFctryTable=hostIfFctryTable, globalRTTSampleCount=globalRTTSampleCount, globalQosCoeffPacketRate=globalQosCoeffPacketRate, lbRouterIfPacketRate=lbRouterIfPacketRate, lbRouterAddr=lbRouterAddr, hostIfShared=hostIfShared, lbDomainDisabled=lbDomainDisabled, lbDnsServIfPathsRcvd=lbDnsServIfPathsRcvd, hostIfAddr=hostIfAddr, hostIfUpTime=hostIfUpTime, lbDomainPersistTTL=lbDomainPersistTTL, globalQosCoeffTopology=globalQosCoeffTopology, lbDnsServTable=lbDnsServTable, lbRouterIfPathSentTime=lbRouterIfPathSentTime, hostDisableDuration=hostDisableDuration, lbRouterVServCurEnabled=lbRouterVServCurEnabled, lbRouterIfFctryType=lbRouterIfFctryType, lbDnsServIfFctryType=lbDnsServIfFctryType, lbDnsServs=lbDnsServs, lbDnsServIfTable=lbDnsServIfTable, globalRxBufSize=globalRxBufSize, lbDomainAliasIndex=lbDomainAliasIndex, globalRTTTimeout=globalRTTTimeout, globalQosFactorTopology=globalQosFactorTopology, globalVSTTL=globalVSTTL, lbRouterVServPicks=lbRouterVServPicks, globalCoeffDRTT=globalCoeffDRTT, hostSNMPCommunity=hostSNMPCommunity, globalResetCounters=globalResetCounters, globalRTTProbeProtocolState=globalRTTProbeProtocolState, hostSNMPVersion=hostSNMPVersion, lbDomainPoolAlternateLBMode=lbDomainPoolAlternateLBMode, lbDnsServPicks=lbDnsServPicks, lbRouterIfFctryCount=lbRouterIfFctryCount, globalPathTTL=globalPathTTL, lbDomainPersist=lbDomainPersist, globalProberAddr=globalProberAddr, lbDnsServIfUpTime=lbDnsServIfUpTime, dataCenterPathCount=dataCenterPathCount, lbDomainPoolRRLdnsLimit=lbDomainPoolRRLdnsLimit, lbDomainPoolReturnsToDns=lbDomainPoolReturnsToDns, lbRouterVServTable=lbRouterVServTable, lbRouterVServProbeProtocol=lbRouterVServProbeProtocol, globalCheckStaticDepends=globalCheckStaticDepends)
