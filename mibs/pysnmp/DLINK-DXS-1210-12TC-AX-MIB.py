#
# PySNMP MIB module DLINK-DXS-1210-12TC-AX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-DXS-1210-12TC-AX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:34:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
dot1dBasePort, dot1dBridge, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort", "dot1dBridge", "dot1dBasePortEntry")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, SnmpEngineID, SnmpSecurityLevel = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString", "SnmpEngineID", "SnmpSecurityLevel")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ModuleIdentity, Integer32, ObjectIdentity, Bits, enterprises, IpAddress, Gauge32, NotificationType, Counter32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ModuleIdentity", "Integer32", "ObjectIdentity", "Bits", "enterprises", "IpAddress", "Gauge32", "NotificationType", "Counter32", "iso", "Unsigned32")
DateAndTime, TruthValue, TimeInterval, MacAddress, DisplayString, TextualConvention, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TimeInterval", "MacAddress", "DisplayString", "TextualConvention", "RowStatus", "TimeStamp")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DXS1210SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139)).setLabel("dlink-DXS1210SeriesProd")
dxs_1210_12tc = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1)).setLabel("dxs-1210-12tc")
dxs_1210_12tc_AX = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1)).setLabel("dxs-1210-12tc-AX")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class VlanList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class OwnerString(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class OperationResponseStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("responseReceived", 1), ("unknown", 2), ("internalError", 3), ("requestTimedOut", 4), ("unknownDestinationAddress", 5), ("noRouteToTarget", 6), ("interfaceInactiveToTarget", 7), ("arpFailure", 8), ("maxConcurrentLimitReached", 9), ("unableToResolveDnsName", 10), ("invalidHostAddress", 11))

class LldpChassisIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7))

class LldpChassisId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpPortIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7))

class LldpPortId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class LldpManAddrIfSubtype(TextualConvention, Integer32):
    reference = 'IEEE 802.1AB-2005 9.5.9.5'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3))

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class LldpSystemCapabilitiesMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("other", 0), ("repeater", 1), ("bridge", 2), ("wlanAccessPoint", 3), ("router", 4), ("telephone", 5), ("docsisCableDevice", 6), ("stationOnly", 7))

class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

class LldpPortList(TextualConvention, OctetString):
    reference = 'IETF RFC 2674 section 5'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 512)

class TimeFilter(TextualConvention, TimeTicks):
    status = 'current'

class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

class ZeroBasedCounter32(TextualConvention, Gauge32):
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class InetAddressPrefixLength(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 2040)

class DStormCtlTrafficType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3))

class DStormCtlThrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pps", 1), ("kbps", 2), ("percentage", 3))

class DStormCtlThrTypeValue(TextualConvention, Integer32):
    status = 'current'

class VlanIdOrNone(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )
dlinkDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1))
deviceInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1))
dlinkSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2))
sysInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 1))
syslogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4))
sysPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13))
sysSNTPSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17))
sysTimeRangeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38))
dlinkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3))
mgtUserAccountGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1))
mgtPasswordEncryptionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 2))
mgtSnmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3))
mgtRMONGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4))
mgtTelnetWebGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 5))
mgtSessionTimeoutGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 6))
mgtDDPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14))
dlinkL2Features = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4))
l2FDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1))
l2Dot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2))
l2STPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3))
l2LBDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4))
l2LAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5))
l2MulticastCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6))
l2LLDPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7))
dlinkL3Features = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5))
l3ARPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1))
l3IpMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3))
dlinkQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6))
qosBasicSettingsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1))
dlinkACL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7))
aclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1))
dlinkSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8))
securityportSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1))
securityDhcpSerScrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7))
securitySafeGuardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 13))
securityTrustedHostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14))
securityTrafficSegmentationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 15))
securityStormCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16))
securityDoSprevGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17))
securitySSLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19))
dlinkOAM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9))
oamCableDiagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1))
dlinkMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10))
monStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2))
monMirrorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3))
dlinkGreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11))
dlinkPowersavingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1))
dlinkEEEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 2))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('current')
portCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1), )
if mibBuilder.loadTexts: portCtrlTable.setStatus('current')
portCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "portSetIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "portSetMediaType"))
if mibBuilder.loadTexts: portCtrlEntry.setStatus('current')
portSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSetIndex.setStatus('current')
portSetMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSetMediaType.setStatus('current')
portSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetState.setStatus('current')
portSetAutoDowngrade = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetAutoDowngrade.setStatus('current')
portSetFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetFlowControl.setStatus('current')
portSetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetDuplex.setStatus('current')
portSetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 1), ("rate100M", 2), ("rate1000M", 3), ("rate1000M-Master", 4), ("rate1000M-Slave", 5), ("rate10G", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetSpeed.setStatus('current')
portSetCapaAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("adv100M", 1), ("adv1G", 2), ("adv100M_1G", 3), ("adv10G", 4), ("adv100M_10G", 5), ("adv1G_10G", 6), ("adv100M_1G_10G", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetCapaAdvertised.setStatus('current')
portSetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSetDescription.setStatus('current')
portSetLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSetLinkStatus.setStatus('current')
portStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2), )
if mibBuilder.loadTexts: portStatusTable.setStatus('current')
portStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "portStaIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "portStaMediaType"))
if mibBuilder.loadTexts: portStatusEntry.setStatus('current')
portStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaIndex.setStatus('current')
portStaMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaMediaType.setStatus('current')
portStaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaStatus.setStatus('current')
portStaMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaMacAddr.setStatus('current')
portStaVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaVlan.setStatus('current')
portStaFlowCtrlOpSend = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaFlowCtrlOpSend.setStatus('current')
portStaFlowCtrlOpRece = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaFlowCtrlOpRece.setStatus('current')
portStaDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("full", 2), ("auto-full", 3), ("auto-falf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaDuplex.setStatus('current')
portStaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto", 1), ("rate100M", 2), ("rate1000M", 3), ("rate1000M-Master", 4), ("rate1000M-Slave", 5), ("rate10G", 6), ("auto-rate100M", 7), ("auto-rate1000M", 8), ("auto-rate10G", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStaSpeed.setStatus('current')
errDisAssertTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDisAssertTrapState.setStatus('current')
errDisClearTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDisClearTrapState.setStatus('current')
errDisNotificationRate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDisNotificationRate.setStatus('current')
errDisIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6), )
if mibBuilder.loadTexts: errDisIfStatusTable.setStatus('current')
errDisIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "errDisIfStatusPortIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "errDisIfStatusVlanIndex"))
if mibBuilder.loadTexts: errDisIfStatusEntry.setStatus('current')
errDisIfStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisIfStatusPortIndex.setStatus('current')
errDisIfStatusVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisIfStatusVlanIndex.setStatus('current')
errDisPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisPortState.setStatus('current')
errDisPortConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisPortConnectStatus.setStatus('current')
errDisPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("portsecurity", 1), ("stormControl", 2), ("arpRateLimit", 3), ("bpduRateLimit", 4), ("dhcpRateLimit", 5), ("loopbackDetect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisPortReason.setStatus('current')
errDisPortRecoveryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisPortRecoveryTimeLeft.setStatus('current')
errDisRecoveryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 7), )
if mibBuilder.loadTexts: errDisRecoveryTable.setStatus('current')
errDisRecoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "errDisRecoveryReason"))
if mibBuilder.loadTexts: errDisRecoveryEntry.setStatus('current')
errDisRecoveryReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("portsecurity", 1), ("stormControl", 2), ("arpRateLimit", 3), ("bpduRateLimit", 4), ("dhcpRateLimit", 5), ("loopbackDetect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errDisRecoveryReason.setStatus('current')
errDisRecoveryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDisRecoveryStatus.setStatus('current')
errDisRecoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errDisRecoveryInterval.setStatus('current')
errDisTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8))
errDisTrapsList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8, 0))
errDisNotifyPortDisabledAssert = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8, 0, 1))
if mibBuilder.loadTexts: errDisNotifyPortDisabledAssert.setStatus('current')
errDisNotifyPortDisabledClear = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8, 0, 2))
if mibBuilder.loadTexts: errDisNotifyPortDisabledClear.setStatus('current')
errDisNotifyVlanDisabledAssert = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8, 0, 3))
if mibBuilder.loadTexts: errDisNotifyVlanDisabledAssert.setStatus('current')
errDisNotifyVlanDisabledClear = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 8, 0, 4))
if mibBuilder.loadTexts: errDisNotifyVlanDisabledClear.setStatus('current')
jumboFrameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 14), )
if mibBuilder.loadTexts: jumboFrameTable.setStatus('current')
jumboFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 14, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "portIndex"))
if mibBuilder.loadTexts: jumboFrameEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
maxReceFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 13, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxReceFrameSize.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dot1qVlanid"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanid.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 2, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dot1qVlanPortIndex"))
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanPortIndex.setStatus('current')
dot1qVlanPortVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortVlanMode.setStatus('current')
dot1qVlanPortAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admitAll", 1), ("admitTagged", 2), ("admitUntagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortAcceptableFrameType.setStatus('current')
dot1qVlanPortIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortIngressChecking.setStatus('current')
dot1qVlanPortNativeVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortNativeVlanStatus.setStatus('current')
dot1qVlanPortNativeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortNativeVlanId.setStatus('current')
dot1qVlanPortTagVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 7), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortTagVlanList.setStatus('current')
dot1qVlanPortUntagVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 2, 3, 1, 8), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPortUntagVlanList.setStatus('current')
stpProtocolSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1))
stpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpStatus.setStatus('current')
stpNewRootTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpNewRootTrapState.setStatus('current')
stpTopologyChangeTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTopologyChangeTrapState.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 7), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 8), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMaxHopCount.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpPortConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: stpPortConfigurationTable.setStatus('current')
stpPortConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "stpPort"))
if mibBuilder.loadTexts: stpPortConfigurationEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortGuardRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortGuardRoot.setStatus('current')
stpPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("p2p", 0), ("shared", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortLinkType.setStatus('current')
stpPortOperLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperLinkType.setStatus('current')
stpPortFast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("edge", 0), ("disabled", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortFast.setStatus('current')
stpPortOperFast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("edge", 1), ("non-edge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperFast.setStatus('current')
stpPortTCNFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortTCNFilter.setStatus('current')
stpPortFowardBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortFowardBPDU.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 2, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortHelloTime.setStatus('current')
mstConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3))
mstiConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiConfigurationName.setStatus('current')
mstiRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiRevisionLevel.setStatus('current')
mstMstiConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiConfigDigest.setStatus('current')
mstVlanMstiMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4), )
if mibBuilder.loadTexts: mstVlanMstiMappingTable.setStatus('current')
mstVlanMstiMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstVlanMstiMappingEntry.setStatus('current')
mstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceIndex.setStatus('current')
mstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstSetVlanList.setStatus('current')
mstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstResetVlanList.setStatus('current')
mstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped.setStatus('current')
mstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped2k.setStatus('current')
mstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped3k.setStatus('current')
mstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 3, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped4k.setStatus('current')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4))
mstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistBridgePriority.setStatus('current')
mstCistStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistStatus.setStatus('current')
mstCistPortDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortDesignatedRoot.setStatus('current')
mstCistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistRegionalRoot.setStatus('current')
mstCistPortDesignatedBridge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortDesignatedBridge.setStatus('current')
mstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6), )
if mibBuilder.loadTexts: mstMstiBridgeTable.setStatus('current')
mstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mstMstiInstanceIndex"))
if mibBuilder.loadTexts: mstMstiBridgeEntry.setStatus('current')
mstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiInstanceIndex.setStatus('current')
mstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiBridgePriority.setStatus('current')
mstMstiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiStatus.setStatus('current')
mstMstiPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortDesignatedRoot.setStatus('current')
mstMstiBridgeRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiBridgeRegionalRoot.setStatus('current')
mstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortDesignatedBridge.setStatus('current')
mstMstiTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiTopChanges.setStatus('current')
stpInstancePortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5))
mstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1), )
if mibBuilder.loadTexts: mstCistPortTable.setStatus('current')
mstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mstCistPort"))
if mibBuilder.loadTexts: mstCistPortEntry.setStatus('current')
mstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPort.setStatus('current')
mstCistPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortAdminPathCost.setStatus('current')
mstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortPathCost.setStatus('current')
mstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPriority.setStatus('current')
mstCistPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortState.setStatus('current')
mstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurrentPortRole.setStatus('current')
mstCistPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortProtocolMigration.setStatus('current')
mstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2), )
if mibBuilder.loadTexts: mstMstiPortTable.setStatus('current')
mstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mstMstiPort"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "mstMstiPortInstanceIndex"))
if mibBuilder.loadTexts: mstMstiPortEntry.setStatus('current')
mstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPort.setStatus('current')
mstMstiPortInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortInstanceIndex.setStatus('current')
mstMstiPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortAdminPathCost.setStatus('current')
mstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortPathCost.setStatus('current')
mstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPriority.setStatus('current')
mstMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortState.setStatus('current')
mstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiCurrentPortRole.setStatus('current')
stpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 6))
stpTrapsList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 6, 0))
stpNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 6, 0, 1))
if mibBuilder.loadTexts: stpNewRootTrap.setStatus('current')
stpTopologyChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 3, 6, 0, 2))
if mibBuilder.loadTexts: stpTopologyChgTrap.setStatus('current')
sntpClockSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 1))
sntpTimeZoneSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2))
sntpSNTPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3))
sntpTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeSeconds.setStatus('current')
sntpSummerTimeState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("recurring", 2), ("date", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSummerTimeState.setStatus('current')
sntpGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpGMTMinutes.setStatus('current')
sntpSummerTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSummerTimeStart.setStatus('current')
sntpSummerTimeEnd = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSummerTimeEnd.setStatus('current')
sntpSummerTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpSummerTimeOffset.setStatus('current')
sntpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpGlobalState.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "sntpServerAddrType"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "sntpServerAddr"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddrType.setStatus('current')
sntpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerAddr.setStatus('current')
sntpServerStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerStratum.setStatus('current')
sntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerVersion.setStatus('current')
sntpServerLastReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerLastReceive.setStatus('current')
sntpServerSynced = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServerSynced.setStatus('current')
sntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 17, 3, 3, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerRowStatus.setStatus('current')
timeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1), )
if mibBuilder.loadTexts: timeRangeTable.setStatus('current')
timeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "timeRangeName"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "timeRangeIndex"))
if mibBuilder.loadTexts: timeRangeEntry.setStatus('current')
timeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeName.setStatus('current')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
timeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartHour.setStatus('current')
timeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeStartMinute.setStatus('current')
timeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndHour.setStatus('current')
timeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeEndMinute.setStatus('current')
timeRangeWeekday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 7), Bits().clone(namedValues=NamedValues(("saturday", 0), ("friday", 1), ("thursday", 2), ("wednesday", 3), ("tuesday", 4), ("monday", 5), ("sunday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeWeekday.setStatus('current')
timeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 38, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangeRowStatus.setStatus('current')
multiIfMainTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: multiIfMainTable.setStatus('current')
multiIfMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIfMainIndex"))
if mibBuilder.loadTexts: multiIfMainEntry.setStatus('current')
multiIfMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIfMainIndex.setStatus('current')
multiIfMainAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiIfMainAdminStatus.setStatus('current')
multiIfMainOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIfMainOperStatus.setStatus('current')
multiIfIpBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIfIpBindVlanId.setStatus('current')
multiL3VlanIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiL3VlanIfName.setStatus('current')
multiIfMainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiIfMainRowStatus.setStatus('current')
multiIfIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2), )
if mibBuilder.loadTexts: multiIfIpTable.setStatus('current')
multiIfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIfIpIndex"))
if mibBuilder.loadTexts: multiIfIpEntry.setStatus('current')
multiIfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIfIpIndex.setStatus('current')
multiIfIpAddrAllocMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIfIpAddrAllocMethod.setStatus('current')
multiIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIfIpAddr.setStatus('current')
multiIfIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIfIpSubnetMask.setStatus('current')
multiRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3), )
if mibBuilder.loadTexts: multiRouteTable.setStatus('current')
multiRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiRouteDest"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiRouteMask"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiRouteTos"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiRouteNextHop"))
if mibBuilder.loadTexts: multiRouteEntry.setStatus('current')
multiRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: multiRouteDest.setStatus('current')
multiRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: multiRouteMask.setStatus('current')
multiRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: multiRouteTos.setStatus('current')
multiRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 4), IpAddress())
if mibBuilder.loadTexts: multiRouteNextHop.setStatus('current')
multiRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiRouteIfIndex.setStatus('current')
multiRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiRouteStatus.setStatus('current')
multiIpv6IfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4), )
if mibBuilder.loadTexts: multiIpv6IfTable.setStatus('current')
multiIpv6IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6IfIndex"))
if mibBuilder.loadTexts: multiIpv6IfEntry.setStatus('current')
multiIpv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6IfIndex.setStatus('current')
multiIpv6IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6IfAdminStatus.setStatus('current')
multiIpv6IfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stale", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6IfOperStatus.setStatus('current')
multiIpv6IfRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6IfRetransmitTime.setStatus('current')
multiIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5), )
if mibBuilder.loadTexts: multiIpv6AddrTable.setStatus('current')
multiIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6AddrIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6AddrAddress"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6AddrPrefixLen"))
if mibBuilder.loadTexts: multiIpv6AddrEntry.setStatus('current')
multiIpv6AddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6AddrIndex.setStatus('current')
multiIpv6AddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6AddrAddress.setStatus('current')
multiIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6AddrPrefixLen.setStatus('current')
multiIpv6AddrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiIpv6AddrAdminStatus.setStatus('current')
multiIpv6AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6AddrType.setStatus('current')
multiIpv6AddrCfgMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("stateless", 2), ("stateful", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6AddrCfgMethod.setStatus('current')
multiIpv6AddrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tentative", 1), ("complete", 2), ("down", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6AddrOperStatus.setStatus('current')
multiIPv6neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6), )
if mibBuilder.loadTexts: multiIPv6neighborTable.setStatus('current')
multiIpv6NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6NeighborIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6NeighborAddr"))
if mibBuilder.loadTexts: multiIpv6NeighborEntry.setStatus('current')
multiIpv6NeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6NeighborIndex.setStatus('current')
multiIpv6NeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6NeighborAddr.setStatus('current')
multiIpv6NeighborMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6NeighborMacAddr.setStatus('current')
multiIpv6NeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6NeighborType.setStatus('current')
multiIpv6NeighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6NeighborCacheState.setStatus('current')
multiIpv6NeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 6, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6NeighborRowStatus.setStatus('current')
multiIpv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7), )
if mibBuilder.loadTexts: multiIpv6RouteTable.setStatus('current')
multiIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6RouteDest"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6RoutePfxLength"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6RouteProtocol"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "multiIpv6RouteNextHop"))
if mibBuilder.loadTexts: multiIpv6RouteEntry.setStatus('current')
multiIpv6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6RouteDest.setStatus('current')
multiIpv6RoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6RoutePfxLength.setStatus('current')
multiIpv6RouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6RouteProtocol.setStatus('current')
multiIpv6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiIpv6RouteNextHop.setStatus('current')
multiIpv6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiIpv6RouteIfIndex.setStatus('current')
multiIpv6RouteAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiIpv6RouteAdminStatus.setStatus('current')
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('current')
dhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcpClientIfIndex"))
if mibBuilder.loadTexts: dhcpClientEntry.setStatus('current')
dhcpClientIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientIfIndex.setStatus('current')
dhcpClientClientIdIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientClientIdIfIdx.setStatus('current')
dhcpClientClassIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientClassIdType.setStatus('current')
dhcpClientClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientClassId.setStatus('current')
dhcpClientHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientHostName.setStatus('current')
dhcpClientLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10000), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientLeaseDay.setStatus('current')
dhcpClientLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientLeaseHour.setStatus('current')
dhcpClientLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientLeaseMinute.setStatus('current')
dhcp6ClientTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 9), )
if mibBuilder.loadTexts: dhcp6ClientTable.setStatus('current')
dhcp6ClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 9, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcp6ClientIndex"))
if mibBuilder.loadTexts: dhcp6ClientEntry.setStatus('current')
dhcp6ClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcp6ClientIndex.setStatus('current')
dhcp6ClientEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcp6ClientEnabled.setStatus('current')
dhcp6ClientRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcp6ClientRapidCommit.setStatus('current')
lbdGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1))
lbdPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2))
lbdVlanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 3))
lbdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 4))
lbdState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdState.setStatus('current')
lbdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdMode.setStatus('current')
lbdEnabledVLANIDList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdEnabledVLANIDList.setStatus('current')
lbdInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdInterval.setStatus('current')
lbdTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdTrapState.setStatus('current')
lbdAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("none", 2))).clone('shutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdAction.setStatus('current')
lbdportTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1), )
if mibBuilder.loadTexts: lbdportTable.setStatus('current')
lbdportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lbdportIndex"))
if mibBuilder.loadTexts: lbdportEntry.setStatus('current')
lbdportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdportIndex.setStatus('current')
lbdportState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdportState.setStatus('current')
lbdportResult = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdportResult.setStatus('current')
lbdportTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdportTimeLeft.setStatus('current')
lbdVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 3, 1), )
if mibBuilder.loadTexts: lbdVlanLoopTable.setStatus('current')
lbdVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lbdVlanLoopIndex"))
if mibBuilder.loadTexts: lbdVlanLoopEntry.setStatus('current')
lbdVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdVlanLoopIndex.setStatus('current')
lbdVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 3, 1, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdVlanLoopPorts.setStatus('current')
lbdTrapsList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 4, 0))
lbdLoopOccur = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 4, 0, 1))
if mibBuilder.loadTexts: lbdLoopOccur.setStatus('current')
lbdLoopRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 4, 4, 0, 2))
if mibBuilder.loadTexts: lbdLoopRecover.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 1))
laChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2))
laSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laSystemPriority.setStatus('current')
laSystemLoadBalanceAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macSrc", 1), ("macDst", 2), ("macSrcDst", 3), ("ipSrc", 4), ("ipDst", 5), ("ipSrcDst", 6))).clone('macSrc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laSystemLoadBalanceAlgorithm.setStatus('current')
laActorSystemID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laActorSystemID.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelMaxPorts.setStatus('current')
laPortChannelMemberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelMemberNumber.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laSystemChannelGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laSystemChannelGroupID.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("on", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laChannelDetailTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2), )
if mibBuilder.loadTexts: laChannelDetailTable.setStatus('current')
laChannelDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "laChannelDetailPort"))
if mibBuilder.loadTexts: laChannelDetailEntry.setStatus('current')
laChannelDetailPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelDetailPort.setStatus('current')
laChannelDetailLACPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laChannelDetailLACPTimeout.setStatus('current')
laChannelDetailWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laChannelDetailWorkingMode.setStatus('current')
laChannelDetailLACPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("upInBndl", 0), ("standby", 1), ("down", 2), ("upIndividual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelDetailLACPState.setStatus('current')
laChannelDetailPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laChannelDetailPortPriority.setStatus('current')
laChannelDetailPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelDetailPortNumber.setStatus('current')
laChannelNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3), )
if mibBuilder.loadTexts: laChannelNeighborTable.setStatus('current')
laChannelNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "laChannelNeighborPort"))
if mibBuilder.loadTexts: laChannelNeighborEntry.setStatus('current')
laChannelNeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborPort.setStatus('current')
laChannelNeighborSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborSystemPriority.setStatus('current')
laChannelNeighborSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborSystemID.setStatus('current')
laChannelNeighborPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborPortNo.setStatus('current')
laChannelNeighborLACPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborLACPTimeout.setStatus('current')
laChannelNeighborWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborWorkingMode.setStatus('current')
laChannelNeighborPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laChannelNeighborPortPriority.setStatus('current')
lldpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15))
lldpLocalSystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16))
lldpRemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17))
lldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpState.setStatus('current')
lldpForwardState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpForwardState.setStatus('current')
lldpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTrapState.setStatus('current')
lldpMEDTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMEDTrapState.setStatus('current')
lldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMsgTxInterval.setStatus('current')
lldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMsgHoldMultiplier.setStatus('current')
lldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpReinitDelay.setStatus('current')
lldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpTxDelay.setStatus('current')
lldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10), )
if mibBuilder.loadTexts: lldpPortConfigTable.setStatus('current')
lldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: lldpPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("macAddress", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigSubtype.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortStatsClear.setStatus('current')
lldpPortNeighborClear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortNeighborClear.setStatus('current')
lldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 11), )
if mibBuilder.loadTexts: lldpConfigManAddrTable.setStatus('current')
lldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 11, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpConfigManAddrSubtype"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpConfigManAddr"))
if mibBuilder.loadTexts: lldpConfigManAddrEntry.setStatus('current')
lldpConfigManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 11, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpConfigManAddrSubtype.setStatus('current')
lldpConfigManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 11, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpConfigManAddr.setStatus('current')
lldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 11, 1, 3), LldpPortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpConfigManAddrPortsTxEnable.setStatus('current')
lldpStatsRemTablesLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesLastChangeTime.setStatus('current')
lldpStatsRemTablesInserts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 2), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesInserts.setStatus('current')
lldpStatsRemTablesDeletes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 3), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDeletes.setStatus('current')
lldpStatsRemTablesDrops = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 4), ZeroBasedCounter32()).setUnits('table entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesDrops.setStatus('current')
lldpStatsRemTablesAgeouts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRemTablesAgeouts.setStatus('current')
lldpStatsTxPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 6), )
if mibBuilder.loadTexts: lldpStatsTxPortTable.setStatus('current')
lldpStatsTxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 6, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpStatsTxPortNum"))
if mibBuilder.loadTexts: lldpStatsTxPortEntry.setStatus('current')
lldpStatsTxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 6, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortNum.setStatus('current')
lldpStatsTxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsTxPortFramesTotal.setStatus('current')
lldpRxStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7), )
if mibBuilder.loadTexts: lldpRxStatsPortTable.setStatus('current')
lldpRxStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpStatsRxPortNum"))
if mibBuilder.loadTexts: lldpRxStatsPortEntry.setStatus('current')
lldpStatsRxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortNum.setStatus('current')
lldpStatsRxPortFramesDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesDiscardedTotal.setStatus('current')
lldpStatsRxPortFramesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesErrors.setStatus('current')
lldpStatsRxPortFramesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortFramesTotal.setStatus('current')
lldpStatsRxPortTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsDiscardedTotal.setStatus('current')
lldpStatsRxPortTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortTLVsUnrecognizedTotal.setStatus('current')
lldpStatsRxPortAgeoutsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 7, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpStatsRxPortAgeoutsTotal.setStatus('current')
lldpStatsRemTablesClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 15, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpStatsRemTablesClear.setStatus('current')
lldpLocChassisIdSubtype = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 1), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisIdSubtype.setStatus('current')
lldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 2), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocChassisId.setStatus('current')
lldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysName.setStatus('current')
lldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysDesc.setStatus('current')
lldpLocSysCapSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 5), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapSupported.setStatus('current')
lldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 6), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocSysCapEnabled.setStatus('current')
lldpLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7), )
if mibBuilder.loadTexts: lldpLocPortTable.setStatus('current')
lldpLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpLocPortEntry.setStatus('current')
lldpLocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortNum.setStatus('current')
lldpLocPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("macAddress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortIdSubtype.setStatus('current')
lldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortId.setStatus('current')
lldpLocPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocPortDesc.setStatus('current')
lldpLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8), )
if mibBuilder.loadTexts: lldpLocManAddrTable.setStatus('current')
lldpLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpLocManAddrSubtype"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpLocManAddr"))
if mibBuilder.loadTexts: lldpLocManAddrEntry.setStatus('current')
lldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrSubtype.setStatus('current')
lldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddr.setStatus('current')
lldpLocManAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrLen.setStatus('current')
lldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 4), LldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfSubtype.setStatus('current')
lldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrIfId.setStatus('current')
lldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 16, 8, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpLocManAddrOID.setStatus('current')
lldpRemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1), )
if mibBuilder.loadTexts: lldpRemTable.setStatus('current')
lldpRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpRemEntry.setStatus('current')
lldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemTimeMark.setStatus('current')
lldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemLocalPortNum.setStatus('current')
lldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemIndex.setStatus('current')
lldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 4), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisIdSubtype.setStatus('current')
lldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 5), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemChassisId.setStatus('current')
lldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 6), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortIdSubtype.setStatus('current')
lldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 7), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortId.setStatus('current')
lldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemPortDesc.setStatus('current')
lldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysName.setStatus('current')
lldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysDesc.setStatus('current')
lldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 11), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapSupported.setStatus('current')
lldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 1, 1, 12), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemSysCapEnabled.setStatus('current')
lldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2), )
if mibBuilder.loadTexts: lldpRemManAddrTable.setStatus('current')
lldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemManTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemManLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemManIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemManAddrSubtype"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemManAddr"))
if mibBuilder.loadTexts: lldpRemManAddrEntry.setStatus('current')
lldpRemManTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManTimeMark.setStatus('current')
lldpRemManLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManLocalPortNum.setStatus('current')
lldpRemManIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManIndex.setStatus('current')
lldpRemManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 4), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrSubtype.setStatus('current')
lldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddr.setStatus('current')
lldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 6), LldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfSubtype.setStatus('current')
lldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrIfId.setStatus('current')
lldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemManAddrOID.setStatus('current')
lldpRemUnknownTLVTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3), )
if mibBuilder.loadTexts: lldpRemUnknownTLVTable.setStatus('current')
lldpRemUnknownTLVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemUnknownTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemUnknownLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemUnknownIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpRemUnknownTLVType"))
if mibBuilder.loadTexts: lldpRemUnknownTLVEntry.setStatus('current')
lldpRemUnknownTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTimeMark.setStatus('current')
lldpRemUnknownLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownLocalPortNum.setStatus('current')
lldpRemUnknownIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownIndex.setStatus('current')
lldpRemUnknownTLVType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTLVType.setStatus('current')
lldpRemUnknownTLVInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 17, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpRemUnknownTLVInfo.setStatus('current')
lldpXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13))
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1ConfigVlanPortNum"))
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigVlanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanPortNum.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocConfigVlanNamePortNum"))
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1LocConfigVlanNamePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 2, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocConfigVlanNamePortNum.setStatus('current')
lldpXdot1ConfigVlanNameTxEnableVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnableVlanList.setStatus('current')
lldpXdot1ConfigProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTable.setStatus('current')
lldpXdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1ConfigProtoVlanPortNum"))
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanEntry.setStatus('current')
lldpXdot1ConfigProtoVlanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 3, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanPortNum.setStatus('current')
lldpXdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTxEnable.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1ConfigProtocolPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1ConfigProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 4, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolPortNum.setStatus('current')
lldpXdot1ConfigProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolIndex.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocPortNum"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortNum.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1LocProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanTable.setStatus('current')
lldpXdot1LocProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocProtoVlanPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEntry.setStatus('current')
lldpXdot1LocProtoVlanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanPortNum.setStatus('current')
lldpXdot1LocProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanId.setStatus('current')
lldpXdot1LocProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanSupported.setStatus('current')
lldpXdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEnabled.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocVlanNamePortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanNamePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 3, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanNamePortNum.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocProtocolPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 4, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolPortNum.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemIndex"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemTimeMark.setStatus('current')
lldpXdot1RemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemLocalPortNum.setStatus('current')
lldpXdot1RemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemIndex.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtoVlanTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtoVlanLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtoVlanIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTimeMark.setStatus('current')
lldpXdot1RemProtoVlanLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanLocalPortNum.setStatus('current')
lldpXdot1RemProtoVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanIndex.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemVlanNameTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemVlanNameLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemVlanNameIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanNameTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTimeMark.setStatus('current')
lldpXdot1RemVlanNameLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameLocalPortNum.setStatus('current')
lldpXdot1RemVlanNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanNameIndex.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1, 4), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtocolTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtocolLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtocolIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot1RemProtocolIdIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolTimeMark.setStatus('current')
lldpXdot1RemProtocolLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolLocalPortNum.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolIdIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 13, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
lldpXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14))
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3))
lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3PortConfigPortNum"))
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 1, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3PortConfigPortNum.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 1, 1, 1, 2), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("linkAggregation", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3LocPortNum"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortNum.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2), )
if mibBuilder.loadTexts: lldpXdot3LocPowerTable.setStatus('current')
lldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3LocPowerPortNum"))
if mibBuilder.loadTexts: lldpXdot3LocPowerEntry.setStatus('current')
lldpXdot3LocPowerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortNum.setStatus('current')
lldpXdot3LocPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 2), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortClass.setStatus('current')
lldpXdot3LocPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDISupported.setStatus('current')
lldpXdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDIEnabled.setStatus('current')
lldpXdot3LocPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairControlable.setStatus('current')
lldpXdot3LocPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairs.setStatus('current')
lldpXdot3LocPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerClass.setStatus('current')
lldpXdot3LocLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 3), )
if mibBuilder.loadTexts: lldpXdot3LocLinkAggTable.setStatus('current')
lldpXdot3LocLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3LocLinkAggPortNum"))
if mibBuilder.loadTexts: lldpXdot3LocLinkAggEntry.setStatus('current')
lldpXdot3LocLinkAggPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 3, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortNum.setStatus('current')
lldpXdot3LocLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 3, 1, 2), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggStatus.setStatus('current')
lldpXdot3LocLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortId.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3LocMaxFrameSizePortNum"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSizePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 4, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizePortNum.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemIndex"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemTimeMark.setStatus('current')
lldpXdot3RemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLocalPortNum.setStatus('current')
lldpXdot3RemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemIndex.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemPowerTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemPowerLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemPowerIndex"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerTimeMark.setStatus('current')
lldpXdot3RemPowerLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerLocalPortNum.setStatus('current')
lldpXdot3RemPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerIndex.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 4), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemLinkAggTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemLinkAggLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemLinkAggIndex"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTimeMark.setStatus('current')
lldpXdot3RemLinkAggLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggLocalPortNum.setStatus('current')
lldpXdot3RemLinkAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggIndex.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1, 4), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemMaxFrameSizeTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemMaxFrameSizeLocalPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXdot3RemMaxFrameSizeIndex"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSizeTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTimeMark.setStatus('current')
lldpXdot3RemMaxFrameSizeLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeLocalPortNum.setStatus('current')
lldpXdot3RemMaxFrameSizeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeIndex.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 14, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXMedNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 18))
lldpXMedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19))
lldpXMedTopologyChangeDetected = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 18, 1)).setObjects(("DLINK-DXS-1210-12TC-AX-MIB", "lldpRemChassisIdSubtype"), ("DLINK-DXS-1210-12TC-AX-MIB", "lldpRemChassisId"))
if mibBuilder.loadTexts: lldpXMedTopologyChangeDetected.setStatus('current')
lldpXMedConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1))
lldpXMedLocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2))
lldpXMedRemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3))
class LldpXMedDeviceClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notDefined", 0), ("endpointClass1", 1), ("endpointClass2", 2), ("endpointClass3", 3), ("networkConnectivity", 4))

class LldpXMedCapabilities(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("capabilities", 0), ("networkPolicy", 1), ("location", 2), ("extendedPSE", 3), ("extendedPD", 4), ("inventory", 5))

class PolicyAppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("voice", 1), ("voiceSignaling", 2), ("guestVoice", 3), ("guestVoiceSignaling", 4), ("softPhoneVoice", 5), ("videoconferencing", 6), ("streamingVideo", 7), ("videoSignaling", 8))

lldpXMedLocDeviceClass = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 1), LldpXMedDeviceClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocDeviceClass.setStatus('current')
lldpXMedPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2), )
if mibBuilder.loadTexts: lldpXMedPortConfigTable.setStatus('current')
lldpXMedPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedPortConfigPortNum"))
if mibBuilder.loadTexts: lldpXMedPortConfigEntry.setStatus('current')
lldpXMedPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedPortConfigPortNum.setStatus('current')
lldpXMedPortCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2, 1, 2), LldpXMedCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedPortCapSupported.setStatus('current')
lldpXMedPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2, 1, 3), LldpXMedCapabilities()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedPortConfigTLVsTxEnable.setStatus('current')
lldpXMedPortConfigNotifEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedPortConfigNotifEnable.setStatus('current')
lldpXMedFastStartRepeatCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXMedFastStartRepeatCount.setStatus('current')
lldpXMedLocMediaPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1), )
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTable.setStatus('current')
lldpXMedLocMediaPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedLocMediaPolicyPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedLocMediaPolicyAppType"))
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyEntry.setStatus('current')
lldpXMedLocMediaPolicyPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 1), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyPortNum.setStatus('current')
lldpXMedLocMediaPolicyAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 2), PolicyAppType())
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyAppType.setStatus('current')
lldpXMedLocMediaPolicyVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyVlanID.setStatus('current')
lldpXMedLocMediaPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyPriority.setStatus('current')
lldpXMedLocMediaPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 5), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyDscp.setStatus('current')
lldpXMedLocMediaPolicyUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyUnknown.setStatus('current')
lldpXMedLocMediaPolicyTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMediaPolicyTagged.setStatus('current')
lldpXMedLocHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocHardwareRev.setStatus('current')
lldpXMedLocFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocFirmwareRev.setStatus('current')
lldpXMedLocSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocSoftwareRev.setStatus('current')
lldpXMedLocSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocSerialNum.setStatus('current')
lldpXMedLocMfgName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocMfgName.setStatus('current')
lldpXMedLocModelName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocModelName.setStatus('current')
lldpXMedLocAssetID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocAssetID.setStatus('current')
lldpXMedLocXPoEDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("pseDevice", 2), ("pdDevice", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedLocXPoEDeviceType.setStatus('current')
lldpXMedRemCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1), )
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesTable.setStatus('current')
lldpXMedRemCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemCapTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemCapPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemCapIndex"))
if mibBuilder.loadTexts: lldpXMedRemCapabilitiesEntry.setStatus('current')
lldpXMedRemCapTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapTimeMark.setStatus('current')
lldpXMedRemCapPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapPortNum.setStatus('current')
lldpXMedRemCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapIndex.setStatus('current')
lldpXMedRemCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 1, 1, 4), LldpXMedCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemCapSupported.setStatus('current')
lldpXMedRemMediaPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2), )
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTable.setStatus('current')
lldpXMedRemMediaPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemMediaPolicyTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemMediaPolicyPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemMediaPolicyIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemMediaPolicyAppType"))
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyEntry.setStatus('current')
lldpXMedRemMediaPolicyTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTimeMark.setStatus('current')
lldpXMedRemMediaPolicyPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyPortNum.setStatus('current')
lldpXMedRemMediaPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyIndex.setStatus('current')
lldpXMedRemMediaPolicyAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 4), PolicyAppType())
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyAppType.setStatus('current')
lldpXMedRemMediaPolicyVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyVlanID.setStatus('current')
lldpXMedRemMediaPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyPriority.setStatus('current')
lldpXMedRemMediaPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 7), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyDscp.setStatus('current')
lldpXMedRemMediaPolicyUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyUnknown.setStatus('current')
lldpXMedRemMediaPolicyTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMediaPolicyTagged.setStatus('current')
lldpXMedRemInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3), )
if mibBuilder.loadTexts: lldpXMedRemInventoryTable.setStatus('current')
lldpXMedRemInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemTimeMark"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemPortNum"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "lldpXMedRemIndex"))
if mibBuilder.loadTexts: lldpXMedRemInventoryEntry.setStatus('current')
lldpXMedRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 1), TimeFilter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemTimeMark.setStatus('current')
lldpXMedRemPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 2), LldpPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemPortNum.setStatus('current')
lldpXMedRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemIndex.setStatus('current')
lldpXMedRemHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemHardwareRev.setStatus('current')
lldpXMedRemFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemFirmwareRev.setStatus('current')
lldpXMedRemSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemSoftwareRev.setStatus('current')
lldpXMedRemSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemSerialNum.setStatus('current')
lldpXMedRemMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemMfgName.setStatus('current')
lldpXMedRemModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemModelName.setStatus('current')
lldpXMedRemAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 7, 19, 3, 3, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXMedRemAssetID.setStatus('current')
telnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetState.setStatus('current')
telnetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPort.setStatus('current')
webState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webState.setStatus('current')
webPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webPort.setStatus('current')
ddpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddpStatus.setStatus('current')
ddpReportTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120))).clone(namedValues=NamedValues(("never", 0), ("offset30sec", 30), ("offset60sec", 60), ("offset90sec", 90), ("offset120sec", 120))).clone('offset30sec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddpReportTime.setStatus('current')
ddpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 3), )
if mibBuilder.loadTexts: ddpTable.setStatus('current')
ddpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "ddpPort"))
if mibBuilder.loadTexts: ddpEntry.setStatus('current')
ddpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddpPort.setStatus('current')
ddpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddpPortStatus.setStatus('current')
rmonRisingAlarmTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonRisingAlarmTrapState.setStatus('current')
rmonFallingAlarmTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonFallingAlarmTrapState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 3), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsOctets.setStatus('current')
rmonStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts.setStatus('current')
rmonStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsBroadcastPkts.setStatus('current')
rmonStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsMulticastPkts.setStatus('current')
rmonStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsUndersizePkts.setStatus('current')
rmonStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsOversizePkts.setStatus('current')
rmonStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsFragments.setStatus('current')
rmonStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsJabbers.setStatus('current')
rmonStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsCRCErrors.setStatus('current')
rmonStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 13), Counter32()).setUnits('Collisions').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsCollisions.setStatus('current')
rmonStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsDropEvents.setStatus('current')
rmonStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts64Octets.setStatus('current')
rmonStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 16), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts65to127Octets.setStatus('current')
rmonStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts128to255Octets.setStatus('current')
rmonStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts256to511Octets.setStatus('current')
rmonStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts512to1023Octets.setStatus('current')
rmonStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsPkts1024to1518Octets.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 3, 1, 1, 21), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1), )
if mibBuilder.loadTexts: rmonHistoryControlTable.setStatus('current')
rmonHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonHistoryControlIndex"))
if mibBuilder.loadTexts: rmonHistoryControlEntry.setStatus('current')
rmonHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryControlIndex.setStatus('current')
rmonHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryControlDataSource.setStatus('current')
rmonHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryControlBucketsRequested.setStatus('current')
rmonHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryControlBucketsGranted.setStatus('current')
rmonHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryControlInterval.setStatus('current')
rmonHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 6), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryControlOwner.setStatus('current')
rmonHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 1, 1, 7), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonHistoryControlStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonHistoryIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonHistorySampleIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistorySampleIndex.setStatus('current')
rmonHistoryOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryOctets.setStatus('current')
rmonHistoryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryPkts.setStatus('current')
rmonHistoryBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryBroadcastPkts.setStatus('current')
rmonHistoryMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryMulticastPkts.setStatus('current')
rmonHistoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryUtilization.setStatus('current')
rmonHistoryUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryUndersizePkts.setStatus('current')
rmonHistoryOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryOversizePkts.setStatus('current')
rmonHistoryFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryFragments.setStatus('current')
rmonHistoryJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryJabbers.setStatus('current')
rmonHistoryCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryCRCErrors.setStatus('current')
rmonHistoryCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 13), Counter32()).setUnits('Collisions').setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryCollisions.setStatus('current')
rmonHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryDropEvents.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmValue.setStatus('current')
rmonAlarmStartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2), ("risingOrFallingAlarm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStartupAlarm.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmRisingEventNumber.setStatus('current')
rmonAlarmFallingEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmFallingEventNumber.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 11), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 5, 1, 1, 12), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 4), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 5), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 6), RmonStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
rmonEventLastTimeSent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventLastTimeSent.setStatus('current')
rmonLogTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2), )
if mibBuilder.loadTexts: rmonLogTable.setStatus('current')
rmonLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonLogEventIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "rmonLogIndex"))
if mibBuilder.loadTexts: rmonLogEntry.setStatus('current')
rmonLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonLogEventIndex.setStatus('current')
rmonLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonLogIndex.setStatus('current')
rmonLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonLogTime.setStatus('current')
rmonLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 4, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonLogDescription.setStatus('current')
trafficSegmentationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 15, 1), )
if mibBuilder.loadTexts: trafficSegmentationTable.setStatus('current')
trafficSegmentationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 15, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "trafficSegmentationIfIndex"))
if mibBuilder.loadTexts: trafficSegmentationEntry.setStatus('current')
trafficSegmentationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 15, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegmentationIfIndex.setStatus('current')
trafficSegmentationMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 15, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegmentationMemberList.setStatus('current')
doSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17, 1), )
if mibBuilder.loadTexts: doSCtrlTable.setStatus('current')
doSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "doSCtrlType"))
if mibBuilder.loadTexts: doSCtrlEntry.setStatus('current')
doSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("land-attack", 1), ("blat-attack", 2), ("tcp-null-scan", 3), ("tcp-xmascan", 4), ("tcp-synfin", 5), ("tcp-syn-srcport-less-1024", 6), ("ping-of-death-attack", 7), ("tcp-tiny-fragment-attack", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlType.setStatus('current')
doSCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlState.setStatus('current')
doSCtrlActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("drop", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlActionType.setStatus('current')
safeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safeGuardEnable.setStatus('current')
arpAgingTime = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 1))
arpARPTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2))
arpAgingTimeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: arpAgingTimeTable.setStatus('current')
arpAgingTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "arpAgingTimeIntrefaceID"))
if mibBuilder.loadTexts: arpAgingTimeEntry.setStatus('current')
arpAgingTimeIntrefaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpAgingTimeIntrefaceID.setStatus('current')
arpAgingTimeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpAgingTimeTimeout.setStatus('current')
arpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: arpTable.setStatus('current')
arpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "arpIntrefaceID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "arpIpAddr"))
if mibBuilder.loadTexts: arpEntry.setStatus('current')
arpIntrefaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIntrefaceID.setStatus('current')
arpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIpAddr.setStatus('current')
arpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpMacAddress.setStatus('current')
arpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpType.setStatus('current')
arpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 5, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: arpRowStatus.setStatus('current')
powerSavingGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1))
powerSavingTimeRangeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 2))
powerSavingShutdownSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 3))
psgFunctionVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psgFunctionVersion.setStatus('current')
psgScheduledPortShutdown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgScheduledPortShutdown.setStatus('current')
psgScheduledHibernation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgScheduledHibernation.setStatus('current')
psgScheduledDimLED = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgScheduledDimLED.setStatus('current')
psgAdministrativeDimLED = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgAdministrativeDimLED.setStatus('current')
psgDimLEDShutOffTimeProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgDimLEDShutOffTimeProfile.setStatus('current')
psgHibernationTimeProfile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psgHibernationTimeProfile.setStatus('current')
powerSavingShutdownTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 3, 1), )
if mibBuilder.loadTexts: powerSavingShutdownTable.setStatus('current')
powerSavingShutdownEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "psShutdownPort"))
if mibBuilder.loadTexts: powerSavingShutdownEntry.setStatus('current')
psShutdownPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psShutdownPort.setStatus('current')
psShutdownTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShutdownTimeRange.setStatus('current')
greenEeeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 2, 1), )
if mibBuilder.loadTexts: greenEeeTable.setStatus('current')
greenEeeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "eeePort"))
if mibBuilder.loadTexts: greenEeeEntry.setStatus('current')
eeePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eeePort.setStatus('current')
eeestate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eeestate.setStatus('current')
portSecurityGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 1))
portSecurityPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2))
portSecurityAddressEntries = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3))
portSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 4))
portSecurityTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 1, 1), Bits().clone(namedValues=NamedValues(("portSecExceedMLA", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityTrapState.setStatus('current')
portSecurityTrapRate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityTrapRate.setStatus('current')
portSecuritySysMaxAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6656))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecuritySysMaxAddr.setStatus('current')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "portSecurityPort"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
portSecurityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityPort.setStatus('current')
portSecurityState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityState.setStatus('current')
portSecuritySysMax = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6656))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecuritySysMax.setStatus('current')
portSecurityVioAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protect", 1), ("restrict", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityVioAction.setStatus('current')
portSecuritySecurMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecuritySecurMode.setStatus('current')
portSecurityAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityAgingTime.setStatus('current')
portSecurityAgingType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("inactivity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityAgingType.setStatus('current')
portSecurityCurrentNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCurrentNo.setStatus('current')
portSecurityVioCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityVioCount.setStatus('current')
portSecurityCurState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("forwarding", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityCurState.setStatus('current')
portSecAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1), )
if mibBuilder.loadTexts: portSecAddrTable.setStatus('current')
portSecAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "portSecAddrVID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "portSecAddrMAC"))
if mibBuilder.loadTexts: portSecAddrEntry.setStatus('current')
portSecAddrVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecAddrVID.setStatus('current')
portSecAddrMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecAddrMAC.setStatus('current')
portSecAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAddrPort.setStatus('current')
portSecAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecAddrType.setStatus('current')
portSecAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecAddrRowStatus.setStatus('current')
portSecAddrRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecAddrRemainTime.setStatus('current')
portSecurityTrapList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 4, 0))
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 1, 4, 0, 1)).setObjects(("DLINK-DXS-1210-12TC-AX-MIB", "portSecurityPort"), ("DLINK-DXS-1210-12TC-AX-MIB", "portSecurityVioCount"))
if mibBuilder.loadTexts: portSecurityViolation.setStatus('current')
sessionTimeoutWeb = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeoutWeb.setStatus('current')
sessionTimeoutTelnet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionTimeoutTelnet.setStatus('current')
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
cableDiagTestPairTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2), )
if mibBuilder.loadTexts: cableDiagTestPairTable.setStatus('current')
cableDiagTestPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "cableDiagTestPortPair"))
if mibBuilder.loadTexts: cableDiagTestPairEntry.setStatus('current')
cableDiagTestPortPair = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestPortPair.setStatus('current')
cableDiagTestResultPair1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("crosstalk", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestResultPair1.setStatus('current')
cableDiagTestResultPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("crosstalk", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestResultPair2.setStatus('current')
cableDiagTestResultPair3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("crosstalk", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestResultPair3.setStatus('current')
cableDiagTestResultPair4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("crosstalk", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestResultPair4.setStatus('current')
cableDiagTestLenPair1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestLenPair1.setStatus('current')
cableDiagTestLenPair2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestLenPair2.setStatus('current')
cableDiagTestLenPair3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestLenPair3.setStatus('current')
cableDiagTestLenPair4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagTestLenPair4.setStatus('current')
cableDiagTestLenPairClear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 9, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTestLenPairClear.setStatus('current')
passwordEncryptionStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordEncryptionStatus.setStatus('current')
sslObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1))
sslServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslServerStatus.setStatus('current')
servicePolicyName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: servicePolicyName.setStatus('current')
sslConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4))
sslServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3), )
if mibBuilder.loadTexts: sslServicePolicyTable.setStatus('current')
sslServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "sslServicePolicyName"))
if mibBuilder.loadTexts: sslServicePolicyEntry.setStatus('current')
sslServicePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslServicePolicyName.setStatus('current')
sslServicePolicyCipherSuites = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3, 1, 2), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6), ("rsa-with-aes-128-cbc-sha", 7), ("rsa-with-aes-256-cbc-sha", 8), ("dhe-rsa-with-aes-128-cbc-sha", 9), ("dhe-rsa-with-aes-256-cbc-sha", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslServicePolicyCipherSuites.setStatus('current')
sslServicePolicyCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sslServicePolicyCacheTimeout.setStatus('current')
sslServicePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 19, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sslServicePolicyRowStatus.setStatus('current')
dhcpSerScrGlobSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1))
dhcpSerScrPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2))
dhcpSerScrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 3))
dhcpSerScrGlobTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrGlobTrapState.setStatus('current')
dhcpSerScrLogBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrLogBufEntries.setStatus('current')
dhcpSerScrLogClear = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrLogClear.setStatus('current')
dhcpSerScrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 4), )
if mibBuilder.loadTexts: dhcpSerScrProfileTable.setStatus('current')
dhcpSerScrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcpSerScrProfileName"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcpSerScrProfileClientMac"))
if mibBuilder.loadTexts: dhcpSerScrProfileEntry.setStatus('current')
dhcpSerScrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrProfileName.setStatus('current')
dhcpSerScrProfileClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrProfileClientMac.setStatus('current')
dhcpSerScrProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSerScrProfileRowStatus.setStatus('current')
dhcpSerScrLogTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5), )
if mibBuilder.loadTexts: dhcpSerScrLogTable.setStatus('current')
dhcpSerScrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcpSerScrLogIndex"))
if mibBuilder.loadTexts: dhcpSerScrLogEntry.setStatus('current')
dhcpSerScrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrLogIndex.setStatus('current')
dhcpSerScrLogVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrLogVlanID.setStatus('current')
dhcpSerScrLogIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrLogIPAddr.setStatus('current')
dhcpSerScrLogMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrLogMacAddr.setStatus('current')
dhcpSerScrLogOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrLogOccurrence.setStatus('current')
dhcpSerScrPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1), )
if mibBuilder.loadTexts: dhcpSerScrPortTable.setStatus('current')
dhcpSerScrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "dhcpSerScrPortIndex"))
if mibBuilder.loadTexts: dhcpSerScrPortEntry.setStatus('current')
dhcpSerScrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSerScrPortIndex.setStatus('current')
dhcpSerScrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrPortState.setStatus('current')
dhcpSerScrPortServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrPortServerAddrType.setStatus('current')
dhcpSerScrPortServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrPortServerIP.setStatus('current')
dhcpSerScrPortProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSerScrPortProfileName.setStatus('current')
dhcpSerScrTrapList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 3, 0))
dhcpSerScrAttackDetect = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 7, 3, 0, 1))
if mibBuilder.loadTexts: dhcpSerScrAttackDetect.setStatus('current')
userAccountsManagementSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1))
userAccountsSessionTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2))
userAccountsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: userAccountsTable.setStatus('current')
userAccountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "userName"))
if mibBuilder.loadTexts: userAccountsEntry.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPrivilege.setStatus('current')
userEncryptControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userEncryptControl.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userRowStatus.setStatus('current')
userSessionTableEntry = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: userSessionTableEntry.setStatus('current')
userSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "sessionID"))
if mibBuilder.loadTexts: userSessionEntry.setStatus('current')
sessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionID.setStatus('current')
liveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: liveTime.setStatus('current')
loginType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("http", 1), ("telnet", 2), ("ssh", 3), ("console", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginType.setStatus('current')
loginIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginIP.setStatus('current')
loginUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginUserLevel.setStatus('current')
loginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginUserName.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14, 1), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "trustedHostType"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "trustedHostACLName"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("ping", 2), ("http", 3), ("https", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostType.setStatus('current')
trustedHostACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostACLName.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 14, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
stormCtrlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1))
stormCtrlGentrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1))
stormCtrlNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlNotifyEnable.setStatus('current')
stormCtrlPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlPollingInterval.setStatus('current')
stormCtrlPollingRetries = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 360), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlPollingRetries.setStatus('current')
stormCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 4), )
if mibBuilder.loadTexts: stormCtrlTable.setStatus('current')
stormCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "stormCtrlIndex"))
if mibBuilder.loadTexts: stormCtrlEntry.setStatus('current')
stormCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormCtrlIndex.setStatus('current')
stormCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlActionMode.setStatus('current')
stormCtrlLevelType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("kbps", 2))).clone('pps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlLevelType.setStatus('current')
stormCtrlThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5), )
if mibBuilder.loadTexts: stormCtrlThresholdTable.setStatus('current')
stormCtrlThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "stormCtrlThresholdIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "stormCtrlThresholdType"))
if mibBuilder.loadTexts: stormCtrlThresholdEntry.setStatus('current')
stormCtrlThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormCtrlThresholdIndex.setStatus('current')
stormCtrlThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormCtrlThresholdType.setStatus('current')
stormCtrlThresholdRiseThre = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlThresholdRiseThre.setStatus('current')
stormCtrlThresholdLowThre = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormCtrlThresholdLowThre.setStatus('current')
stormCtrlThresholdCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormCtrlThresholdCurrRate.setStatus('current')
stormCtrlThresholdStormState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("forwarding", 1), ("dropped", 2), ("errorDisabled", 3), ("linkDown", 4), ("inactive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormCtrlThresholdStormState.setStatus('current')
stormCtrlTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 6))
stormCtrlTrapsList = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 6, 0))
stormCtrlTrapsStormOccur = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 6, 0, 1))
if mibBuilder.loadTexts: stormCtrlTrapsStormOccur.setStatus('current')
stormCtrlTrapsStormClear = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 8, 16, 1, 1, 6, 0, 2))
if mibBuilder.loadTexts: stormCtrlTrapsStormClear.setStatus('current')
syslogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1))
syslogGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 1))
syslogSourceInterfaceState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSourceInterfaceState.setStatus('current')
syslogSourceInterfaceVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSourceInterfaceVID.setStatus('current')
syslogLogbuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 2))
syslogClearLogBuffer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogClearLogBuffer.setStatus('current')
syslogLogBufferEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogBufferEnabled.setStatus('current')
syslogLogBufSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergencies", 0), ("alerts", 1), ("critical", 2), ("errors", 3), ("warnings", 4), ("notifications", 5), ("informational", 6), ("debugging", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogBufSeverity.setStatus('current')
syslogLogBufWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 2, 4), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLogBufWriteDelay.setStatus('current')
syslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: syslogServerTable.setStatus('current')
syslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "syslogServerIndex"))
if mibBuilder.loadTexts: syslogServerEntry.setStatus('current')
syslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServerIndex.setStatus('current')
syslogServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddressType.setStatus('current')
syslogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerAddress.setStatus('current')
syslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(1024, 65535), )).clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
syslogServerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergencie", 0), ("alerts", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notification", 5), ("informational", 6), ("debugging", 7))).clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerSeverity.setStatus('current')
syslogServerFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("kern", 0), ("user", 1), ("mail", 2), ("daemon", 3), ("auth", 4), ("syslog", 5), ("lpr", 6), ("news", 7), ("uucp", 8), ("cron", 9), ("authpriv", 10), ("ftp", 11), ("ntp", 12), ("audit", 13), ("console", 14), ("cron2", 15), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))).clone('kern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerFacility.setStatus('current')
syslogServerRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerRowstatus.setStatus('current')
syslogBufferTableNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogBufferTableNum.setStatus('current')
syslogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: syslogBufferTable.setStatus('current')
syslogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "syslogBufferIndex"))
if mibBuilder.loadTexts: syslogBufferEntry.setStatus('current')
syslogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogBufferIndex.setStatus('current')
syslogBufferDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogBufferDateAndTime.setStatus('current')
syslogBufferDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogBufferDescription.setStatus('current')
syslogBufferSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 2, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergencie", 0), ("alerts", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notification", 5), ("informational", 6), ("debugging", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogBufferSeverity.setStatus('current')
mirrorSessionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1), )
if mibBuilder.loadTexts: mirrorSessionTable.setStatus('current')
mirrorSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mirrorSessionNumber"))
if mibBuilder.loadTexts: mirrorSessionEntry.setStatus('current')
mirrorSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mirrorSessionNumber.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourceIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorSourceIngressPort.setStatus('current')
mirrorSourceEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorSourceEgressPort.setStatus('current')
mirrorSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 3, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorSessionRowStatus.setStatus('current')
statisticsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1))
statisticsErrorCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2))
statisticsClear = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3))
statisticsCountersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1), )
if mibBuilder.loadTexts: statisticsCountersTable.setStatus('current')
statisticsCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "statPort"))
if mibBuilder.loadTexts: statisticsCountersEntry.setStatus('current')
statPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPort.setStatus('current')
statPortRxRateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxRateBytes.setStatus('current')
statPortRxRatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxRatePackets.setStatus('current')
statPortRxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxTotalBytes.setStatus('current')
statPortRxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxTotalPackets.setStatus('current')
statPortTxRateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxRateBytes.setStatus('current')
statPortTxRatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxRatePackets.setStatus('current')
statPortTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxTotalBytes.setStatus('current')
statPortTxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxTotalPackets.setStatus('current')
statPortRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxMulticast.setStatus('current')
statPortRxUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxUnicast.setStatus('current')
statPortRxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortRxBroadcast.setStatus('current')
statPortTxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxMulticast.setStatus('current')
statPortTxUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxUnicast.setStatus('current')
statPortTxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortTxBroadcast.setStatus('current')
statCountersrxHCPkt64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt64Octets.setStatus('current')
statCountersrxHCPkt65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt65to127Octets.setStatus('current')
statCountersrxHCPkt128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt128to255Octets.setStatus('current')
statCountersrxHCPkt256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt256to511Octets.setStatus('current')
statCountersrxHCPkt512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt512to1023Octets.setStatus('current')
statCountersrxHCPkt1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt1024to1518Octets.setStatus('current')
statCountersrxHCPkt1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt1519to2047Octets.setStatus('current')
statCountersrxHCPkt2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt2048to4095Octets.setStatus('current')
statCountersrxHCPkt4096to9216Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxHCPkt4096to9216Octets.setStatus('current')
statCounterstxHCPkt64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt64Octets.setStatus('current')
statCounterstxHCPkt65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt65to127Octets.setStatus('current')
statCounterstxHCPkt128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt128to255Octets.setStatus('current')
statCounterstxHCPkt256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt256to511Octets.setStatus('current')
statCounterstxHCPkt512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt512to1023Octets.setStatus('current')
statCounterstxHCPkt1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt1024to1518Octets.setStatus('current')
statCounterstxHCPkt1519to2047Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt1519to2047Octets.setStatus('current')
statCounterstxHCPkt2048to4095Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt2048to4095Octets.setStatus('current')
statCounterstxHCPkt4096to9216Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 1, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxHCPkt4096to9216Octets.setStatus('current')
statisticsErrorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1), )
if mibBuilder.loadTexts: statisticsErrorTable.setStatus('current')
statisticsErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "statPortCountPort"))
if mibBuilder.loadTexts: statisticsErrorEntry.setStatus('current')
statPortCountPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountPort.setStatus('current')
statCountersrxDroppkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxDroppkts.setStatus('current')
statCountersrxMTUDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxMTUDropPkts.setStatus('current')
statPortCountDeferredTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountDeferredTx.setStatus('current')
statCountersdot3StatsSingleColFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersdot3StatsSingleColFrames.setStatus('current')
statPortCountExcessCol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountExcessCol.setStatus('current')
statPortCountLateCol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountLateCol.setStatus('current')
statPortCountAlignErr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountAlignErr.setStatus('current')
statPortCountFCSErr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountFCSErr.setStatus('current')
statCountersifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersifOutDiscards.setStatus('current')
statPortCountMultiCol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountMultiCol.setStatus('current')
statPortCountCarriSen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountCarriSen.setStatus('current')
statPortCountSQETestErr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountSQETestErr.setStatus('current')
statCountersdot3StatsDeferredTransmisions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersdot3StatsDeferredTransmisions.setStatus('current')
statPortCountIntMacTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountIntMacTx.setStatus('current')
statPortCountIntMacRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statPortCountIntMacRx.setStatus('current')
statCountersrxCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxCRCAlignErrors.setStatus('current')
statCountersrxUndersizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxUndersizedPkts.setStatus('current')
statCountersrxOversizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxOversizedPkts.setStatus('current')
statCountersrxFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxFragmentPkts.setStatus('current')
statCountersrxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxJabbers.setStatus('current')
statCountersrxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxSymbolErrors.setStatus('current')
statCountersrxMulticastDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersrxMulticastDropPkts.setStatus('current')
statCountersifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersifInErrors.setStatus('current')
statCountersifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersifOutErrors.setStatus('current')
statCountersifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersifInDiscards.setStatus('current')
statCountersifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCountersifInUnknownProtos.setStatus('current')
statCounterstxDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterstxDelayExceededDiscards.setStatus('current')
statisticsCounterClearTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3, 1), )
if mibBuilder.loadTexts: statisticsCounterClearTable.setStatus('current')
statisticsCounterClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "statCounterClearIndex"))
if mibBuilder.loadTexts: statisticsCounterClearEntry.setStatus('current')
statCounterClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterClearIndex.setStatus('current')
statCounterClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statCounterClearStatus.setStatus('current')
statCounterLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 10, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statCounterLinkChange.setStatus('current')
fdbStaticFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1))
fdbMACAddressTableSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2))
fdbUnicastStaticFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1))
fdbMulticastStaticFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2))
fdbUnicastStaticFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1), )
if mibBuilder.loadTexts: fdbUnicastStaticFDBTable.setStatus('current')
fdbUnicastStaticFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbUnicastStaticFDBVID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbUnicastStaticFDBMACAddr"))
if mibBuilder.loadTexts: fdbUnicastStaticFDBEntry.setStatus('current')
fdbUnicastStaticFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbUnicastStaticFDBVID.setStatus('current')
fdbUnicastStaticFDBMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbUnicastStaticFDBMACAddr.setStatus('current')
fdbUnicastStaticFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbUnicastStaticFDBPort.setStatus('current')
fdbUnicastStaticFDBState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("permanentDrop", 2))).clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbUnicastStaticFDBState.setStatus('current')
fdbUnicastStaticFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbUnicastStaticFDBRowStatus.setStatus('current')
fdMulticastStaticFDBTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: fdMulticastStaticFDBTable.setStatus('current')
fdbMulticastStaticFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbMulticastStaticFDBVID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbMulticastStaticFDBMACAddr"))
if mibBuilder.loadTexts: fdbMulticastStaticFDBEntry.setStatus('current')
fdbMulticastStaticFDBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMulticastStaticFDBVID.setStatus('current')
fdbMulticastStaticFDBMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMulticastStaticFDBMACAddr.setStatus('current')
fdbMulticastStaticFDBEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbMulticastStaticFDBEgressPorts.setStatus('current')
fdbMulticastStaticFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbMulticastStaticFDBRowStatus.setStatus('current')
fdbMACAddrGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 1))
fdbMACAddrAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbMACAddrAgingTime.setStatus('current')
fdbMACAddrAgingDestinationHit = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbMACAddrAgingDestinationHit.setStatus('current')
fdbMACAddressLearningTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 2), )
if mibBuilder.loadTexts: fdbMACAddressLearningTable.setStatus('current')
fdbMACAddressLearningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbMACAddressLearningPort"))
if mibBuilder.loadTexts: fdbMACAddressLearningEntry.setStatus('current')
fdbMACAddressLearningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMACAddressLearningPort.setStatus('current')
fdbMACAddressLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbMACAddressLearningState.setStatus('current')
fdbMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: fdbMACAddressTable.setStatus('current')
fdbMACAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbMACAddrTabVID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "fdbMACAddrTabMACAddr"))
if mibBuilder.loadTexts: fdbMACAddressTableEntry.setStatus('current')
fdbMACAddrTabVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMACAddrTabVID.setStatus('current')
fdbMACAddrTabMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMACAddrTabMACAddr.setStatus('current')
fdbMACAddrTabType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("dynamic", 3), ("self", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMACAddrTabType.setStatus('current')
fdbMACAddrTabPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMACAddrTabPort.setStatus('current')
fdbMACAddressClear = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 4))
fdbClearId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClearId.setStatus('current')
fdbClearMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 4, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClearMac.setStatus('current')
fdbClearAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearAll", 1), ("clearByVlanId", 2), ("clearByPort", 3), ("clearByMAC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClearAction.setStatus('current')
qosBasPortDefaultCoS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1))
qosBasPortScheMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 2))
qosBasQueueSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3))
qosBasCoS2QueueMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 4))
qosBasPortRateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5))
qosBasQueueRateLimiting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6))
qosBasDscpMapCos = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7))
qosPortDefaultCoSTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1), )
if mibBuilder.loadTexts: qosPortDefaultCoSTable.setStatus('current')
qosPortDefaultCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosPortindex"))
if mibBuilder.loadTexts: qosPortDefaultCoSEntry.setStatus('current')
qosPortindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortindex.setStatus('current')
qosPortDefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("defaultCoS", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortDefMode.setStatus('current')
qosPortDefCos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosPortDefCos.setStatus('current')
qosPortDefOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPortDefOverride.setStatus('current')
qosPortSchedulerMethodTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 2, 1), )
if mibBuilder.loadTexts: qosPortSchedulerMethodTable.setStatus('current')
qosPortSchedulerMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosSchedulingModeBasePort"))
if mibBuilder.loadTexts: qosPortSchedulerMethodEntry.setStatus('current')
qosSchedulingModeBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSchedulingModeBasePort.setStatus('current')
qosSchedulingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sp", 1), ("rr", 2), ("wrr", 3), ("wdrr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingMode.setStatus('current')
qosQueueSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1), )
if mibBuilder.loadTexts: qosQueueSettingsTable.setStatus('current')
qosQueueSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosQueueBasePort"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "qosQueueID"))
if mibBuilder.loadTexts: qosQueueSettingsEntry.setStatus('current')
qosQueueBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosQueueBasePort.setStatus('current')
qosQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosQueueID.setStatus('current')
qosQueueWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueWrrWeight.setStatus('current')
qosQueueQuantum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueQuantum.setStatus('current')
qosCoS2QueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 4, 1), )
if mibBuilder.loadTexts: qosCoS2QueueTable.setStatus('current')
qosCoS2QueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 4, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosCoS2QueCos"))
if mibBuilder.loadTexts: qosCoS2QueueEntry.setStatus('current')
qosCoS2QueCos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCoS2QueCos.setStatus('current')
qosCos2QueQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCos2QueQueueID.setStatus('current')
qosPortRateLimitingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1), )
if mibBuilder.loadTexts: qosPortRateLimitingTable.setStatus('current')
qosPortRateLimitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosBandwidthBasePort"))
if mibBuilder.loadTexts: qosPortRateLimitingEntry.setStatus('current')
qosBandwidthBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosBandwidthBasePort.setStatus('current')
qosBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthRxRate.setStatus('current')
qosBandwidthRxRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthRxRateMode.setStatus('current')
qosBandwidthRxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthRxBurst.setStatus('current')
qosBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthTxRate.setStatus('current')
qosBandwidthTxRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthTxRateMode.setStatus('current')
qosBandwidthTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBandwidthTxBurst.setStatus('current')
qosQueueRateLimitingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1), )
if mibBuilder.loadTexts: qosQueueRateLimitingTable.setStatus('current')
qosQueueRateLimitingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosQueueBandwidthBasePort"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "qosQueueBandwidthQueId"))
if mibBuilder.loadTexts: qosQueueRateLimitingEntry.setStatus('current')
qosQueueBandwidthBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosQueueBandwidthBasePort.setStatus('current')
qosQueueBandwidthQueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosQueueBandwidthQueId.setStatus('current')
qosQueueBandwidthMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueBandwidthMinRate.setStatus('current')
qosQueueBandwidthMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueBandwidthMaxRate.setStatus('current')
qosQueueBandwidthRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate", 1), ("percent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueBandwidthRateMode.setStatus('current')
qosDscpMapCosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 1), )
if mibBuilder.loadTexts: qosDscpMapCosTable.setStatus('current')
qosDscpMapCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosDscpMapCosEntry.setStatus('current')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortIndex.setStatus('current')
qosTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cos", 0), ("dscp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustMode.setStatus('current')
qosDscpValueMapCosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 2), )
if mibBuilder.loadTexts: qosDscpValueMapCosTable.setStatus('current')
qosDscpValueMapCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "qosDscpPort"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "qosDscpCos"))
if mibBuilder.loadTexts: qosDscpValueMapCosEntry.setStatus('current')
qosDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDscpPort.setStatus('current')
qosDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDscpCos.setStatus('current')
qosDscpMapCosList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 6, 1, 7, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDscpMapCosList.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2))
igsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsClearIgmpSnoopByVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 1, 3), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsClearIgmpSnoopByVlanId.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQuerierVersion.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanMaxResponseTime.setStatus('current')
igsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRobustnessValue.setStatus('current')
igsVlanLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanLastMemberQueryInterval.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanMulticastGroupVlanId"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanMulticastGroupIpAddress"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanMulticastGroupReceiverPortIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanMulticastGroupReceiverSrcAddr"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupReceiverPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupReceiverPortIndex.setStatus('current')
igsVlanMulticastGroupReceiverSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupReceiverSrcAddr.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupExp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupExp.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 2, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsVlanStaticMcastGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3), )
if mibBuilder.loadTexts: igsVlanStaticMcastGrpTable.setStatus('current')
igsVlanStaticMcastGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanStaticMcastGrpVlanId"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanStaticMcastGrpGroupAddress"))
if mibBuilder.loadTexts: igsVlanStaticMcastGrpEntry.setStatus('current')
igsVlanStaticMcastGrpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanStaticMcastGrpVlanId.setStatus('current')
igsVlanStaticMcastGrpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanStaticMcastGrpGroupAddress.setStatus('current')
igsVlanStaticMcastGrpPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanStaticMcastGrpPortList.setStatus('current')
igsVlanStaticMcastGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igsVlanStaticMcastGrpRowStatus.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRouterStaticPortList.setStatus('current')
igsVlanRouterBlockPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRouterBlockPortList.setStatus('current')
igsVlanRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 2, 4, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterDynamicPortList.setStatus('current')
igsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1), )
if mibBuilder.loadTexts: igsStatsTable.setStatus('current')
igsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "igsStatsVlanId"))
if mibBuilder.loadTexts: igsStatsEntry.setStatus('current')
igsStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsVlanId.setStatus('current')
igsStatsIGMPv1RxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv1RxReport.setStatus('current')
igsStatsIGMPv1RxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv1RxQueries.setStatus('current')
igsStatsIGMPv1TxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv1TxReport.setStatus('current')
igsStatsIGMPv1TxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv1TxQueries.setStatus('current')
igsStatsIGMPv2RxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2RxReport.setStatus('current')
igsStatsIGMPv2RxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2RxQueries.setStatus('current')
igsStatsIGMPv2RxLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2RxLeave.setStatus('current')
igsStatsIGMPv2TxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2TxReport.setStatus('current')
igsStatsIGMPv2TxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2TxQueries.setStatus('current')
igsStatsIGMPv2TxLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv2TxLeave.setStatus('current')
igsStatsIGMPv3RxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv3RxReport.setStatus('current')
igsStatsIGMPv3RxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv3RxQueries.setStatus('current')
igsStatsIGMPv3TxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv3TxReport.setStatus('current')
igsStatsIGMPv3TxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsStatsIGMPv3TxQueries.setStatus('current')
mldSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 4))
mldVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5))
mldStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6))
mldStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldStatus.setStatus('current')
mldClearIgmpSnoopByVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 4, 3), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldClearIgmpSnoopByVlanId.setStatus('current')
mldVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1), )
if mibBuilder.loadTexts: mldVlanFilterTable.setStatus('current')
mldVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanFilterVlanId"))
if mibBuilder.loadTexts: mldVlanFilterEntry.setStatus('current')
mldVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanFilterVlanId.setStatus('current')
mldVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanSnoopStatus.setStatus('current')
mldVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanFastLeave.setStatus('current')
mldVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanQuerier.setStatus('current')
mldVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanCfgQuerier.setStatus('current')
mldVlanQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanQuerierVersion.setStatus('current')
mldVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanQueryInterval.setStatus('current')
mldVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanMaxResponseTime.setStatus('current')
mldVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanRobustnessValue.setStatus('current')
mldVlanLastListenerQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanLastListenerQueryInterval.setStatus('current')
mldVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2), )
if mibBuilder.loadTexts: mldVlanMulticastGroupTable.setStatus('current')
mldVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanMulticastGroupVlanId"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanMulticastGroupIpAddress"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanMulticastGroupReceiverPortIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanMulticastGroupReceiverSrcAddr"))
if mibBuilder.loadTexts: mldVlanMulticastGroupEntry.setStatus('current')
mldVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupVlanId.setStatus('current')
mldVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupIpAddress.setStatus('current')
mldVlanMulticastGroupReceiverPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupReceiverPortIndex.setStatus('current')
mldVlanMulticastGroupReceiverSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupReceiverSrcAddr.setStatus('current')
mldVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupMacAddress.setStatus('current')
mldVlanMulticastGroupExp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupExp.setStatus('current')
mldVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 2, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanMulticastGroupPortList.setStatus('current')
mldVlanStaticMcastGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3), )
if mibBuilder.loadTexts: mldVlanStaticMcastGrpTable.setStatus('current')
mldVlanStaticMcastGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanStaticMcastGrpVlanId"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanStaticMcastGrpGroupAddress"))
if mibBuilder.loadTexts: mldVlanStaticMcastGrpEntry.setStatus('current')
mldVlanStaticMcastGrpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanStaticMcastGrpVlanId.setStatus('current')
mldVlanStaticMcastGrpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanStaticMcastGrpGroupAddress.setStatus('current')
mldVlanStaticMcastGrpPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanStaticMcastGrpPortList.setStatus('current')
mldVlanStaticMcastGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldVlanStaticMcastGrpRowStatus.setStatus('current')
mldVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4), )
if mibBuilder.loadTexts: mldVlanRouterTable.setStatus('current')
mldVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mldVlanRouterVlanId"))
if mibBuilder.loadTexts: mldVlanRouterEntry.setStatus('current')
mldVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanRouterVlanId.setStatus('current')
mldVlanRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanRouterStaticPortList.setStatus('current')
mldVlanRouterBlockPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldVlanRouterBlockPortList.setStatus('current')
mldVlanRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 5, 4, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldVlanRouterDynamicPortList.setStatus('current')
mldStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1), )
if mibBuilder.loadTexts: mldStatsTable.setStatus('current')
mldStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "mldStatsVlanId"))
if mibBuilder.loadTexts: mldStatsEntry.setStatus('current')
mldStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsVlanId.setStatus('current')
mldStatsMLDv1RxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv1RxReport.setStatus('current')
mldStatsMLDv1RxDone = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv1RxDone.setStatus('current')
mldStatsMLDv1TxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv1TxReport.setStatus('current')
mldStatsMLDv1TxDone = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv1TxDone.setStatus('current')
mldStatsMLDv2RxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv2RxReport.setStatus('current')
mldStatsMLDv2TxReport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsMLDv2TxReport.setStatus('current')
mldStatsRxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsRxQueries.setStatus('current')
mldStatsTxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldStatsTxQueries.setStatus('current')
multicastFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 7), )
if mibBuilder.loadTexts: multicastFilterVlanTable.setStatus('current')
multicastFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 7, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "multicastFilterVlanIndex"))
if mibBuilder.loadTexts: multicastFilterVlanEntry.setStatus('current')
multicastFilterVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastFilterVlanIndex.setStatus('current')
multicastFilterVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 4, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastFilterVlanType.setStatus('current')
deviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1))
deviceFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2))
deviceErrorCodeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 3))
deviceFan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 4))
deviceInfoDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoDeviceType.setStatus('current')
deviceInfoBootPROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoBootPROMVersion.setStatus('current')
deviceInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoFirmwareVersion.setStatus('current')
deviceInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoHardwareVersion.setStatus('current')
deviceInfoMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoMACAddress.setStatus('current')
deviceInfoSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoSystemTime.setStatus('current')
deviceInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInfoSerialNumber.setStatus('current')
deviceSwitchCPULast5SecUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwitchCPULast5SecUsage.setStatus('current')
firmwareInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: firmwareInformationTable.setStatus('current')
firmwareInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "firmwareInfoImageID"))
if mibBuilder.loadTexts: firmwareInformationEntry.setStatus('current')
firmwareInfoImageID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoImageID.setStatus('current')
firmwareInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoVersion.setStatus('current')
firmwareInfoSizeB = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoSizeB.setStatus('current')
firmwareInfoUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareInfoUpdateTime.setStatus('current')
devFunFwUpgradeAndBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2))
devFunConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3))
devFunConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4))
devFunLogBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5))
devFunPing = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6))
devFunLangMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 7))
devFunFwServerIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwServerIpAddrType.setStatus('current')
devFunFwServerIpvxAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwServerIpvxAddr.setStatus('current')
devFunFwServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwServerInterfaceName.setStatus('current')
devFunFwSrcFilename = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwSrcFilename.setStatus('current')
devFunFwOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwOperation.setStatus('current')
devFunFwOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("failure", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunFwOperationStatus.setStatus('current')
devFunFwTransferPercentage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunFwTransferPercentage.setStatus('current')
devFunFwRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunFwRetryCount.setStatus('current')
devFunFwServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ok", 0), ("internalerror", 1), ("nofileerror", 2), ("accessViolation", 3), ("memoryfull", 4), ("fileexists", 5), ("connecthostfail", 6), ("invalidarg", 7), ("readfail", 8), ("writefail", 9), ("createfilefail", 10), ("filetoohuge", 11), ("buffertoosmall", 12), ("serverfail", 13), ("programming", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunFwServerStatus.setStatus('current')
devFwOperationImageId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFwOperationImageId.setStatus('current')
devFwNextBootImageId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFwNextBootImageId.setStatus('current')
devFwActualBootImageId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFwActualBootImageId.setStatus('current')
devFunCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: devFunCfgInfoTable.setStatus('current')
devFunCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "devFunCfgId"))
if mibBuilder.loadTexts: devFunCfgInfoEntry.setStatus('current')
devFunCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgId.setStatus('current')
devFunCfgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgSize.setStatus('current')
devFunCfgUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgUpdateTime.setStatus('current')
devFunCfgServerIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgServerIpAddrType.setStatus('current')
devFunCfgServerIpvxAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgServerIpvxAddr.setStatus('current')
devFunCfgSrcFilename = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgSrcFilename.setStatus('current')
devFunCfgStartUpConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2))).clone('config1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgStartUpConfigID.setStatus('current')
devFunCfgOperConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2))).clone('config1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgOperConfigID.setStatus('current')
devFunCfgOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgOperation.setStatus('current')
devFunCfgSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunCfgSave.setStatus('current')
devFunCfgOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("failure", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgOperationStatus.setStatus('current')
devFunCfgTransferPercentage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgTransferPercentage.setStatus('current')
devFunCfgServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgServerInterfaceName.setStatus('current')
devFunCfgServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ok", 0), ("internalerror", 1), ("nofileerror", 2), ("accessViolation", 3), ("memoryfull", 4), ("fileexists", 5), ("connecthostfail", 6), ("invalidarg", 7), ("readfail", 8), ("writefail", 9), ("createfilefail", 10), ("filetoohuge", 11), ("buffertoosmall", 12), ("serverfail", 13), ("programming", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgServerStatus.setStatus('current')
devFunCfgCurrStartUpConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2))).clone('config1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunCfgCurrStartUpConfigID.setStatus('current')
devFunLogBackupToTftpIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLogBackupToTftpIpType.setStatus('current')
devFunLogBackupToTftpIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLogBackupToTftpIpAddr.setStatus('current')
devFunLogBackupToTftpDestURL = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLogBackupToTftpDestURL.setStatus('obsolete')
devFunLogBackupToTftpOper = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLogBackupToTftpOper.setStatus('obsolete')
devFunLogBackupToTftStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("failure", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFunLogBackupToTftStatus.setStatus('obsolete')
devPingDestIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPingDestIpType.setStatus('current')
devPingDestIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPingDestIpAddr.setStatus('current')
devPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPingTimeout.setStatus('current')
devPingTimes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPingTimes.setStatus('current')
devPingStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devPingStart.setStatus('current')
devPingStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notinitiated", 1), ("progress", 2), ("completed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPingStatus.setStatus('current')
devPingSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPingSuccesses.setStatus('current')
devPingV4ProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 8), )
if mibBuilder.loadTexts: devPingV4ProbeHistoryTable.setStatus('current')
devPingV4ProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 8, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "devPingIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "devPingProbeIndex"))
if mibBuilder.loadTexts: devPingV4ProbeHistoryEntry.setStatus('current')
devPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPingIndex.setStatus('current')
devPingProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPingProbeIndex.setStatus('current')
devPingProbeHistoryResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPingProbeHistoryResponseTime.setStatus('current')
devIpv6PingProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 9), )
if mibBuilder.loadTexts: devIpv6PingProbeHistoryTable.setStatus('current')
devIpv6PingProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 9, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "devIpv6PingIndex"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "devIpv6PingProbeIndex"))
if mibBuilder.loadTexts: devIpv6PingProbeHistoryEntry.setStatus('current')
devIpv6PingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIpv6PingIndex.setStatus('current')
devIpv6PingProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIpv6PingProbeIndex.setStatus('current')
devIpv6PingProbeHistoryResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 6, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIpv6PingProbeHistoryResponseTime.setStatus('current')
devFunLangMgmtFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLangMgmtFile.setStatus('obsolete')
devFunLangMgmtApply = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunLangMgmtApply.setStatus('current')
devFunRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noreboot", 1), ("reboot", 2), ("reset", 3), ("resetwithoutip", 4))).clone('noreboot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunRestart.setStatus('current')
devFunWizardIgnoreNextTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devFunWizardIgnoreNextTime.setStatus('current')
deviceErrorCodeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: deviceErrorCodeTable.setStatus('current')
deviceErrorCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "devErrorCodeIndex"))
if mibBuilder.loadTexts: deviceErrorCodeEntry.setStatus('current')
devErrorCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devErrorCodeIndex.setStatus('current')
devErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devErrorString.setStatus('current')
deviceFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1))).clone('fail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFanStatus.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileName.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v4Ext", 3), ("l3v6", 4), ("l3v6Ext", 5), ("expert", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRemark.setStatus('current')
aclProfileRuleIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleIdStart.setStatus('current')
aclProfileRuleIdStep = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleIdStep.setStatus('current')
aclProfileRuleCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleCounterState.setStatus('current')
aclProfileRuleCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleCounterClear.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL2ProfileID"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleTimeRange.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleEtherTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 12), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherTypeMask.setStatus('current')
aclL2RuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleMatchCount.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 2, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3v4Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3))
aclL3v4RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: aclL3v4RuleTable.setStatus('current')
aclL3v4RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v4RuleProfileNo"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v4RuleAccessID"))
if mibBuilder.loadTexts: aclL3v4RuleEntry.setStatus('current')
aclL3v4RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleProfileNo.setStatus('current')
aclL3v4RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleAccessID.setStatus('current')
aclL3v4RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddr.setStatus('current')
aclL3v4RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddr.setStatus('current')
aclL3v4RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddrMask.setStatus('current')
aclL3v4RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 6), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddrMask.setStatus('current')
aclL3v4RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleAction.setStatus('current')
aclL3v4RuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleTimeRange.setStatus('current')
aclL3v4RuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleMatchCount.setStatus('current')
aclL3v4RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 3, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleStatus.setStatus('current')
aclL3v4ExtRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4))
aclL3v4ExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1), )
if mibBuilder.loadTexts: aclL3v4ExtRuleTable.setStatus('current')
aclL3v4ExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v4ExtRuleProfileNo"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v4ExtRuleAccessID"))
if mibBuilder.loadTexts: aclL3v4ExtRuleEntry.setStatus('current')
aclL3v4ExtRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleProfileNo.setStatus('current')
aclL3v4ExtRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleAccessID.setStatus('current')
aclL3v4ExtRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 47, 50, 88, 89, 94, 103, 108, 112))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("gre", 47), ("esp", 50), ("eigrp", 88), ("ospf", 89), ("ipinip", 94), ("pim", 103), ("pcp", 108), ("vrrp", 112)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleProtocol.setStatus('current')
aclL3v4ExtRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleFragments.setStatus('current')
aclL3v4ExtRuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageType.setStatus('current')
aclL3v4ExtRuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageCode.setStatus('current')
aclL3v4ExtRuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddr.setStatus('current')
aclL3v4ExtRuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddr.setStatus('current')
aclL3v4ExtRuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddrMask.setStatus('current')
aclL3v4ExtRuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddrMask.setStatus('current')
aclL3v4ExtRuleTcpUdpDstOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstOperator.setStatus('current')
aclL3v4ExtRuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstPort.setStatus('current')
aclL3v4ExtRuleTcpUdpMinDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpMinDstPort.setStatus('current')
aclL3v4ExtRuleTcpUdpMaxDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 14), Unsigned32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpMaxDstPort.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcOperator.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcPort.setStatus('current')
aclL3v4ExtRuleTcpUdpMinSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpMinSrcPort.setStatus('current')
aclL3v4ExtRuleTcpUdpMaxSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 18), Unsigned32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpMaxSrcPort.setStatus('current')
aclL3v4ExtRuleIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleIPPrecedence.setStatus('current')
aclL3v4ExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleDscp.setStatus('current')
aclL3v4ExtRuleToS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleToS.setStatus('current')
aclL3v4ExtRuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpAckBit.setStatus('current')
aclL3v4ExtRuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpRstBit.setStatus('current')
aclL3v4ExtRuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUrgBit.setStatus('current')
aclL3v4ExtRuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpPshBit.setStatus('current')
aclL3v4ExtRuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpSynBit.setStatus('current')
aclL3v4ExtRuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpFinBit.setStatus('current')
aclL3v4ExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleAction.setStatus('current')
aclL3v4ExtRuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTimeRange.setStatus('current')
aclL3v4ExtRuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleMatchCount.setStatus('current')
aclL3v4ExtRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 4, 1, 1, 31), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleStatus.setStatus('current')
aclL3v6Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5))
aclL3v6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1), )
if mibBuilder.loadTexts: aclL3v6RuleTable.setStatus('current')
aclL3v6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v6RuleProfileNo"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v6RuleAccessID"))
if mibBuilder.loadTexts: aclL3v6RuleEntry.setStatus('current')
aclL3v6RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleProfileNo.setStatus('current')
aclL3v6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleAccessID.setStatus('current')
aclL3v6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6Addr.setStatus('current')
aclL3v6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 4), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6Addr.setStatus('current')
aclL3v6RuleDstIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 5), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleSrcIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 6), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleAction.setStatus('current')
aclL3v6RuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTimeRange.setStatus('current')
aclL3v6RuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleMatchCount.setStatus('current')
aclL3v6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 5, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleStatus.setStatus('current')
aclL3v6ExtRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6))
aclL3v6ExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1), )
if mibBuilder.loadTexts: aclL3v6ExtRuleTable.setStatus('current')
aclL3v6ExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v6ExtRuleProfileNo"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclL3v6ExtRuleAccessID"))
if mibBuilder.loadTexts: aclL3v6ExtRuleEntry.setStatus('current')
aclL3v6ExtRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6ExtRuleProfileNo.setStatus('current')
aclL3v6ExtRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6ExtRuleAccessID.setStatus('current')
aclL3v6ExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleDscp.setStatus('current')
aclL3v6ExtRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleProtocol.setStatus('current')
aclL3v6ExtRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleFragments.setStatus('current')
aclL3v6ExtRuleTcpUdpDstOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpDstOperator.setStatus('current')
aclL3v6ExtRuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpDstPort.setStatus('current')
aclL3v6ExtRuleTcpUdpMinDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpMinDstPort.setStatus('current')
aclL3v6ExtRuleTcpUdpMaxDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpMaxDstPort.setStatus('current')
aclL3v6ExtRuleTcpUdpSrcOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpSrcOperator.setStatus('current')
aclL3v6ExtRuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpSrcPort.setStatus('current')
aclL3v6ExtRuleTcpUdpMinSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpMinSrcPort.setStatus('current')
aclL3v6ExtRuleTcpUdpMaxSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUdpMaxSrcPort.setStatus('current')
aclL3v6ExtRuleICMPv6MessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleICMPv6MessageType.setStatus('current')
aclL3v6ExtRuleICMPv6MessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleICMPv6MessageCode.setStatus('current')
aclL3v6ExtRuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 16), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleDstIpv6Addr.setStatus('current')
aclL3v6ExtRuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 17), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleSrcIpv6Addr.setStatus('current')
aclL3v6ExtRuleDstIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 18), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleDstIpv6AddrPrefixLen.setStatus('current')
aclL3v6ExtRuleSrcIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 19), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleSrcIpv6AddrPrefixLen.setStatus('current')
aclL3v6ExtRuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpAckBit.setStatus('current')
aclL3v6ExtRuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpRstBit.setStatus('current')
aclL3v6ExtRuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpUrgBit.setStatus('current')
aclL3v6ExtRuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpPshBit.setStatus('current')
aclL3v6ExtRuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpSynBit.setStatus('current')
aclL3v6ExtRuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v6ExtRuleTcpFinBit.setStatus('current')
aclL3v6ExtRuleFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleFlowLabel.setStatus('current')
aclL3v6ExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleAction.setStatus('current')
aclL3v6ExtRuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleTimeRange.setStatus('current')
aclL3v6ExtRuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6ExtRuleMatchCount.setStatus('current')
aclL3v6ExtRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 6, 1, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6ExtRuleStatus.setStatus('current')
aclExpertExtRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7))
aclExpertExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1), )
if mibBuilder.loadTexts: aclExpertExtRuleTable.setStatus('current')
aclExpertExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclExpertExtRuleProfileNo"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "aclExpertExtRuleAccessID"))
if mibBuilder.loadTexts: aclExpertExtRuleEntry.setStatus('current')
aclExpertExtRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclExpertExtRuleProfileNo.setStatus('current')
aclExpertExtRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclExpertExtRuleAccessID.setStatus('current')
aclExpertExtRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 47, 50, 88, 89, 94, 103, 108, 112))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("gre", 47), ("esp", 50), ("eigrp", 88), ("ospf", 89), ("ipinip", 94), ("pim", 103), ("pcp", 108), ("vrrp", 112)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleProtocol.setStatus('current')
aclExpertExtRuleFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleFragments.setStatus('current')
aclExpertExtRuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleICMPMessageType.setStatus('current')
aclExpertExtRuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleICMPMessageCode.setStatus('current')
aclExpertExtRuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleDstIpAddr.setStatus('current')
aclExpertExtRuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleSrcIpAddr.setStatus('current')
aclExpertExtRuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleDstIpAddrMask.setStatus('current')
aclExpertExtRuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleSrcIpAddrMask.setStatus('current')
aclExpertExtRuleTcpUdpDstOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpDstOperator.setStatus('current')
aclExpertExtRuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpDstPort.setStatus('current')
aclExpertExtRuleTcpUdpMinDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpMinDstPort.setStatus('current')
aclExpertExtRuleTcpUdpMaxDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpMaxDstPort.setStatus('current')
aclExpertExtRuleTcpUdpSrcOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("gt", 3), ("lt", 4), ("neq", 5), ("range", 6))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpSrcOperator.setStatus('current')
aclExpertExtRuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpSrcPort.setStatus('current')
aclExpertExtRuleTcpUdpMinSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpMinSrcPort.setStatus('current')
aclExpertExtRuleTcpUdpMaxSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUdpMaxSrcPort.setStatus('current')
aclExpertExtRuleIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleIPPrecedence.setStatus('current')
aclExpertExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleDscp.setStatus('current')
aclExpertExtRuleToS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleToS.setStatus('current')
aclExpertExtRuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpAckBit.setStatus('current')
aclExpertExtRuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpRstBit.setStatus('current')
aclExpertExtRuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpUrgBit.setStatus('current')
aclExpertExtRuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpPshBit.setStatus('current')
aclExpertExtRuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpSynBit.setStatus('current')
aclExpertExtRuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establish", 1), ("notEstablish", 2), ("dont_care", 3))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclExpertExtRuleTcpFinBit.setStatus('current')
aclExpertExtRuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 28), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleDstMacAddr.setStatus('current')
aclExpertExtRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleSrcMacAddr.setStatus('current')
aclExpertExtRuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleVlanId.setStatus('current')
aclExpertExtRule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRule1pPriority.setStatus('current')
aclExpertExtRuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 32), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleDstMacAddrMask.setStatus('current')
aclExpertExtRuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 33), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleSrcMacAddrMask.setStatus('current')
aclExpertExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleAction.setStatus('current')
aclExpertExtRuleTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleTimeRange.setStatus('current')
aclExpertExtRuleMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclExpertExtRuleMatchCount.setStatus('current')
aclExpertExtRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 7, 1, 1, 37), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclExpertExtRuleStatus.setStatus('current')
aclPortBindGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8))
aclPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1), )
if mibBuilder.loadTexts: aclPortGroupTable.setStatus('current')
aclPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "aclPortIndex"))
if mibBuilder.loadTexts: aclPortGroupEntry.setStatus('current')
aclPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortIndex.setStatus('current')
aclPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("in", 1))).clone('in')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortDirection.setStatus('current')
aclPortL2ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL2ProfileNo.setStatus('current')
aclPortL3v4StdProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v4StdProfileNo.setStatus('current')
aclPortL3v4ExtProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v4ExtProfileNo.setStatus('current')
aclPortL3v6StdProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v6StdProfileNo.setStatus('current')
aclPortL3v6ExtProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v6ExtProfileNo.setStatus('current')
aclPortExpertProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 7, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortExpertProfileNo.setStatus('current')
snmpGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1))
snmpView = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3))
snmpCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4))
snmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5))
snmpUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7))
snmpHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8))
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpResBroadReq = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpResBroadReq.setStatus('current')
snmpUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUDPPort.setStatus('current')
snmpTrapSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSourceInterface.setStatus('current')
snmpTrapGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGlobalState.setStatus('current')
snmpTrapSNMPAuthTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSNMPAuthTrap.setStatus('current')
snmpTrapPortLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPortLinkUp.setStatus('current')
snmpTrapPortLinkDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPortLinkDown.setStatus('current')
snmpTrapColdstart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapColdstart.setStatus('current')
snmpTrapWarmstart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapWarmstart.setStatus('current')
snmpViewTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: snmpViewTable.setStatus('current')
snmpViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpViewName"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpViewSubtree"))
if mibBuilder.loadTexts: snmpViewEntry.setStatus('current')
snmpViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpViewName.setStatus('current')
snmpViewSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpViewSubtree.setStatus('current')
snmpViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2))).clone('included')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpViewType.setStatus('current')
snmpViewStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpViewStatus.setStatus('current')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpCommName"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
snmpCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommName.setStatus('current')
snmpCommKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plainText", 1), ("encrypted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommKeyType.setStatus('current')
snmpCommViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommViewName.setStatus('current')
snmpCommAccessRight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommAccessRight.setStatus('current')
snmpCommIPAccListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommIPAccListName.setStatus('current')
snmpCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 4, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommStatus.setStatus('current')
snmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: snmpGroupTable.setStatus('current')
snmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpGroupName"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpGroupSecurityModel"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpGroupSecurityLevel"))
if mibBuilder.loadTexts: snmpGroupEntry.setStatus('current')
snmpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupName.setStatus('current')
snmpGroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupSecurityModel.setStatus('current')
snmpGroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthNoPriv", 1), ("authNoPriv", 2), ("authPriv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupSecurityLevel.setStatus('current')
snmpGroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupReadViewName.setStatus('current')
snmpGroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupWriteViewName.setStatus('current')
snmpGroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupNotifyViewName.setStatus('current')
snmpGroupIpListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupIpListName.setStatus('current')
snmpGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 5, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGroupStatus.setStatus('current')
snmpEngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 6), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEngineID.setStatus('current')
snmpUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1), )
if mibBuilder.loadTexts: snmpUserTable.setStatus('current')
snmpUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpUserName"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpUserVersion"))
if mibBuilder.loadTexts: snmpUserEntry.setStatus('current')
snmpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserName.setStatus('current')
snmpUserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3))).clone('v1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserVersion.setStatus('current')
snmpUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserGroupName.setStatus('current')
snmpUserV3Encrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("password", 1), ("key", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpUserV3Encrypt.setStatus('current')
snmpUserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtocol.setStatus('current')
snmpUserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtocolPassword.setStatus('current')
snmpUserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtocol.setStatus('current')
snmpUserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtocolPassword.setStatus('current')
snmpUserAuthProtoByKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtoByKey.setStatus('current')
snmpUserAuthProtoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserAuthProtoKey.setStatus('current')
snmpUserPrivProtoByKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtoByKey.setStatus('current')
snmpUserPrivProtoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserPrivProtoKey.setStatus('current')
snmpUserIpListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserIpListName.setStatus('current')
snmpUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 7, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserStatus.setStatus('current')
snmpHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1), )
if mibBuilder.loadTexts: snmpHostTable.setStatus('current')
snmpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1), ).setIndexNames((0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpHostAddress"), (0, "DLINK-DXS-1210-12TC-AX-MIB", "snmpHostIPType"))
if mibBuilder.loadTexts: snmpHostEntry.setStatus('current')
snmpHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpHostAddress.setStatus('current')
snmpHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpHostIPType.setStatus('current')
snmpHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("noAuthNoPriv", 3), ("authNoPriv", 4), ("authPriv", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostVersion.setStatus('current')
snmpHostUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostUDPPort.setStatus('current')
snmpHostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostCommunityName.setStatus('current')
snmpHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 139, 1, 1, 3, 3, 8, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHostStatus.setStatus('current')
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", dot1qVlanPortIndex=dot1qVlanPortIndex, lldpXdot3LocPowerMDISupported=lldpXdot3LocPowerMDISupported, snmpCommKeyType=snmpCommKeyType, mldVlanRouterEntry=mldVlanRouterEntry, aclL3v4RuleMatchCount=aclL3v4RuleMatchCount, rmonEventDescription=rmonEventDescription, devIpv6PingProbeHistoryEntry=devIpv6PingProbeHistoryEntry, devFunLangMgmt=devFunLangMgmt, rmonHistoryControlOwner=rmonHistoryControlOwner, qosPortDefMode=qosPortDefMode, multiRouteDest=multiRouteDest, laChannelDetailLACPTimeout=laChannelDetailLACPTimeout, lldpXdot1RemProtocolTimeMark=lldpXdot1RemProtocolTimeMark, laChannelDetailPort=laChannelDetailPort, fdbMACAddressTableSettings=fdbMACAddressTableSettings, lldpXMedRemIndex=lldpXMedRemIndex, igsVlanRouterVlanId=igsVlanRouterVlanId, mstMstiBridgePriority=mstMstiBridgePriority, snmpUser=snmpUser, sntpSummerTimeState=sntpSummerTimeState, lldpXdot1ConfigProtocolIndex=lldpXdot1ConfigProtocolIndex, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, lldpStatsRemTablesLastChangeTime=lldpStatsRemTablesLastChangeTime, rmonEventOwner=rmonEventOwner, aclL3v6RuleTimeRange=aclL3v6RuleTimeRange, telnetState=telnetState, lldpRemSysName=lldpRemSysName, rmonAlarm=rmonAlarm, lldpLocSysCapSupported=lldpLocSysCapSupported, statPortCountLateCol=statPortCountLateCol, rmonStatsPkts128to255Octets=rmonStatsPkts128to255Octets, lldpLocPortEntry=lldpLocPortEntry, lldpXMedLocMediaPolicyUnknown=lldpXMedLocMediaPolicyUnknown, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, lldpTrapState=lldpTrapState, l2LLDPGroup=l2LLDPGroup, lldpPortConfigTable=lldpPortConfigTable, statisticsErrorTable=statisticsErrorTable, lldpXMedLocAssetID=lldpXMedLocAssetID, snmpUDPPort=snmpUDPPort, sslServicePolicyCipherSuites=sslServicePolicyCipherSuites, errDisRecoveryReason=errDisRecoveryReason, rmonHistoryIndex=rmonHistoryIndex, statPortCountMultiCol=statPortCountMultiCol, lldpStatsRemTablesClear=lldpStatsRemTablesClear, lldpLocChassisId=lldpLocChassisId, lldpXdot3RemLocalPortNum=lldpXdot3RemLocalPortNum, cableDiagTestResultPair4=cableDiagTestResultPair4, qosQueueBandwidthMinRate=qosQueueBandwidthMinRate, multiIpv6RouteProtocol=multiIpv6RouteProtocol, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, devFunFwServerIpAddrType=devFunFwServerIpAddrType, lldpXdot1RemVlanNameTimeMark=lldpXdot1RemVlanNameTimeMark, rmonAlarmTable=rmonAlarmTable, lldpXMedPortCapSupported=lldpXMedPortCapSupported, aclL3v6ExtRuleTcpUdpMinSrcPort=aclL3v6ExtRuleTcpUdpMinSrcPort, lldpXMedLocMfgName=lldpXMedLocMfgName, lldpXdot3LocPowerPortNum=lldpXdot3LocPowerPortNum, LldpXMedDeviceClass=LldpXMedDeviceClass, aclL3v4RuleAccessID=aclL3v4RuleAccessID, ddpPortStatus=ddpPortStatus, lldpXdot3RemPortTable=lldpXdot3RemPortTable, portSecurityGlobalSettings=portSecurityGlobalSettings, aclExpertExtRuleTcpUdpMinDstPort=aclExpertExtRuleTcpUdpMinDstPort, lldpXdot3LocalData=lldpXdot3LocalData, errDisNotifyPortDisabledAssert=errDisNotifyPortDisabledAssert, lbdGlobalSettings=lbdGlobalSettings, trustedHostType=trustedHostType, lldpXdot1RemProtocolIdIndex=lldpXdot1RemProtocolIdIndex, lbdVlanLoopPorts=lbdVlanLoopPorts, portSetSpeed=portSetSpeed, igsVlanMaxResponseTime=igsVlanMaxResponseTime, dot1qVlanid=dot1qVlanid, arpIpAddr=arpIpAddr, devFunCfgInfoEntry=devFunCfgInfoEntry, lldpXMedRemMediaPolicyEntry=lldpXMedRemMediaPolicyEntry, lldpXMedRemMediaPolicyAppType=lldpXMedRemMediaPolicyAppType, lldpXdot1RemIndex=lldpXdot1RemIndex, portSecurityViolation=portSecurityViolation, mldStatsTable=mldStatsTable, sntpServerStratum=sntpServerStratum, devFunLogBackupToTftpDestURL=devFunLogBackupToTftpDestURL, dot1qVlanPortNativeVlanStatus=dot1qVlanPortNativeVlanStatus, igsVlanQueryInterval=igsVlanQueryInterval, lldpXdot1LocProtoVlanEnabled=lldpXdot1LocProtoVlanEnabled, snmpCommIPAccListName=snmpCommIPAccListName, userAccountsTable=userAccountsTable, multiIfMainOperStatus=multiIfMainOperStatus, stpTrapsList=stpTrapsList, lldpRemUnknownTimeMark=lldpRemUnknownTimeMark, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, mldVlanRobustnessValue=mldVlanRobustnessValue, cableDiagTestResultPair1=cableDiagTestResultPair1, aclL3v6RuleStatus=aclL3v6RuleStatus, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, lbdportIndex=lbdportIndex, statPortTxBroadcast=statPortTxBroadcast, lldpPortConfigSubtype=lldpPortConfigSubtype, lldpStatsRemTablesDrops=lldpStatsRemTablesDrops, aclL3v6ExtRuleICMPv6MessageType=aclL3v6ExtRuleICMPv6MessageType, devFunFwServerInterfaceName=devFunFwServerInterfaceName, igsStatsIGMPv2TxQueries=igsStatsIGMPv2TxQueries, mstCistPortDesignatedRoot=mstCistPortDesignatedRoot, dlinkOAM=dlinkOAM, aclL2RuleAction=aclL2RuleAction, rmonHistoryCollisions=rmonHistoryCollisions, aclL3v4ExtRuleTable=aclL3v4ExtRuleTable, sntpTimeSeconds=sntpTimeSeconds, multiIpv6AddrIndex=multiIpv6AddrIndex, lldpXdot1RemoteData=lldpXdot1RemoteData, ddpStatus=ddpStatus, cableDiagTestLenPairClear=cableDiagTestLenPairClear, mldVlanRouterTable=mldVlanRouterTable, qosBasicSettingsGroup=qosBasicSettingsGroup, devFunFwSrcFilename=devFunFwSrcFilename, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable, aclL3v6ExtRuleTcpRstBit=aclL3v6ExtRuleTcpRstBit, igsStatsIGMPv2RxQueries=igsStatsIGMPv2RxQueries, mgtUserAccountGroup=mgtUserAccountGroup, igsVlanStaticMcastGrpPortList=igsVlanStaticMcastGrpPortList, portSetFlowControl=portSetFlowControl, aclL3v4RuleStatus=aclL3v4RuleStatus, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, dhcpSerScrLogClear=dhcpSerScrLogClear, snmpViewType=snmpViewType, lldpRemPortIdSubtype=lldpRemPortIdSubtype, statPortTxRatePackets=statPortTxRatePackets, portStaIndex=portStaIndex, lbdportTable=lbdportTable, qosQueueBandwidthQueId=qosQueueBandwidthQueId, dhcpSerScrPortTable=dhcpSerScrPortTable, snmpHostUDPPort=snmpHostUDPPort, lbdEnabledVLANIDList=lbdEnabledVLANIDList, mldVlanStaticMcastGrpTable=mldVlanStaticMcastGrpTable, statPortRxTotalPackets=statPortRxTotalPackets, statPortTxUnicast=statPortTxUnicast, lldpXMedRemFirmwareRev=lldpXMedRemFirmwareRev, aclExpertExtRule1pPriority=aclExpertExtRule1pPriority, lldpStatsRxPortNum=lldpStatsRxPortNum, snmpViewName=snmpViewName, oamCableDiagGroup=oamCableDiagGroup, portSecAddrMAC=portSecAddrMAC, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, aclL2RuleEtherTypeMask=aclL2RuleEtherTypeMask, lldpPortStatsClear=lldpPortStatsClear, ddpEntry=ddpEntry, statisticsCounterClearTable=statisticsCounterClearTable, devPingTimeout=devPingTimeout, dot1qVlanPortAcceptableFrameType=dot1qVlanPortAcceptableFrameType, multiIpv6AddrTable=multiIpv6AddrTable, OperationResponseStatus=OperationResponseStatus, sslServicePolicyRowStatus=sslServicePolicyRowStatus, snmpCommViewName=snmpCommViewName, arpEntry=arpEntry, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, laSystemLoadBalanceAlgorithm=laSystemLoadBalanceAlgorithm, rmonRisingAlarmTrapState=rmonRisingAlarmTrapState, mstInstanceVlanMapped3k=mstInstanceVlanMapped3k, rmonStatsPkts256to511Octets=rmonStatsPkts256to511Octets, aclL3v6ExtRuleMatchCount=aclL3v6ExtRuleMatchCount, mldVlanStaticMcastGrpRowStatus=mldVlanStaticMcastGrpRowStatus, sntpServerAddr=sntpServerAddr, aclL3v4ExtRuleICMPMessageType=aclL3v4ExtRuleICMPMessageType, deviceErrorCodeTable=deviceErrorCodeTable, rmonAlarmStatus=rmonAlarmStatus, lbdPortSettings=lbdPortSettings, statPortCountSQETestErr=statPortCountSQETestErr, aclL3v4ExtRuleTcpAckBit=aclL3v4ExtRuleTcpAckBit, multiIpv6RouteAdminStatus=multiIpv6RouteAdminStatus, aclL3v4ExtRuleAction=aclL3v4ExtRuleAction, devFunFwOperation=devFunFwOperation, aclL3v6ExtRuleTcpUdpSrcPort=aclL3v6ExtRuleTcpUdpSrcPort, lldpXdot1ConfigProtoVlanEntry=lldpXdot1ConfigProtoVlanEntry, lldpXMedRemCapTimeMark=lldpXMedRemCapTimeMark, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, aclL3v6ExtRuleSrcIpv6Addr=aclL3v6ExtRuleSrcIpv6Addr, fdbMulticastStaticFDBRowStatus=fdbMulticastStaticFDBRowStatus, rmonStatsCRCErrors=rmonStatsCRCErrors, lldpRemManIndex=lldpRemManIndex, syslogLogBufferEnabled=syslogLogBufferEnabled, stpInstance=stpInstance, multicastFilterVlanIndex=multicastFilterVlanIndex, qosPortDefCos=qosPortDefCos, dlinkL3Features=dlinkL3Features, lldpRemManAddr=lldpRemManAddr, lldpXdot3PortConfigPortNum=lldpXdot3PortConfigPortNum, lldpXdot3RemPowerLocalPortNum=lldpXdot3RemPowerLocalPortNum, aclL3v4ExtRuleFragments=aclL3v4ExtRuleFragments, aclExpertExtRuleTcpUdpSrcOperator=aclExpertExtRuleTcpUdpSrcOperator, aclL3v6RuleDstIpv6AddrPrefixLen=aclL3v6RuleDstIpv6AddrPrefixLen, portSecurityAgingTime=portSecurityAgingTime, igsVlanMulticastGroupExp=igsVlanMulticastGroupExp, mstMstiBridgeEntry=mstMstiBridgeEntry, aclL3v6ExtRuleTcpUdpMinDstPort=aclL3v6ExtRuleTcpUdpMinDstPort, multiIpv6NeighborIndex=multiIpv6NeighborIndex, trafficSegmentationMemberList=trafficSegmentationMemberList, mstMstiPortDesignatedBridge=mstMstiPortDesignatedBridge, lldpXMedLocHardwareRev=lldpXMedLocHardwareRev, laChannel=laChannel, snmpUserVersion=snmpUserVersion, statCountersrxHCPkt4096to9216Octets=statCountersrxHCPkt4096to9216Octets, qosPortSchedulerMethodTable=qosPortSchedulerMethodTable, lldpXMedRemSerialNum=lldpXMedRemSerialNum, lldpXdot3RemLinkAggTimeMark=lldpXdot3RemLinkAggTimeMark, lldpXdot3LocPowerPortClass=lldpXdot3LocPowerPortClass, aclL3v6ExtRuleAccessID=aclL3v6ExtRuleAccessID, dhcpSerScrGlobSettings=dhcpSerScrGlobSettings, sntpServerAddrType=sntpServerAddrType, snmpUserV3Encrypt=snmpUserV3Encrypt, stormCtrlNotifyEnable=stormCtrlNotifyEnable, fdbMulticastStaticFDBEgressPorts=fdbMulticastStaticFDBEgressPorts, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, snmpUserName=snmpUserName, lldpXdot3RemLinkAggIndex=lldpXdot3RemLinkAggIndex, timeRangeEndHour=timeRangeEndHour, LldpManAddress=LldpManAddress, trafficSegmentationTable=trafficSegmentationTable, lldpXdot1RemProtoVlanIndex=lldpXdot1RemProtoVlanIndex, syslogBufferSeverity=syslogBufferSeverity, aclL3v6RuleSrcIpv6AddrPrefixLen=aclL3v6RuleSrcIpv6AddrPrefixLen, aclL3v6RuleMatchCount=aclL3v6RuleMatchCount, igsVlanStaticMcastGrpVlanId=igsVlanStaticMcastGrpVlanId, snmpUserAuthProtocol=snmpUserAuthProtocol, errDisIfStatusVlanIndex=errDisIfStatusVlanIndex, aclL3v6ExtRuleTcpUdpDstOperator=aclL3v6ExtRuleTcpUdpDstOperator, LldpLinkAggStatusMap=LldpLinkAggStatusMap, l3IpMgmtGroup=l3IpMgmtGroup, snmpTrapPortLinkUp=snmpTrapPortLinkUp, dhcpSerScrPortProfileName=dhcpSerScrPortProfileName, aclExpertExtRuleEntry=aclExpertExtRuleEntry, lldpXdot1ConfigVlanNameTxEnableVlanList=lldpXdot1ConfigVlanNameTxEnableVlanList, lldpRxStatsPortEntry=lldpRxStatsPortEntry, fdbMACAddressTableEntry=fdbMACAddressTableEntry, fdbMACAddressLearningTable=fdbMACAddressLearningTable, rmonStatsCollisions=rmonStatsCollisions, portStaMediaType=portStaMediaType, deviceFanStatus=deviceFanStatus, lldpStatsRemTablesInserts=lldpStatsRemTablesInserts, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, fdbMulticastStaticFDB=fdbMulticastStaticFDB, fdbClearId=fdbClearId, rmonAlarmFallingEventNumber=rmonAlarmFallingEventNumber, devFunCfgCurrStartUpConfigID=devFunCfgCurrStartUpConfigID, rmonAlarmValue=rmonAlarmValue, lldpXMedRemPortNum=lldpXMedRemPortNum, dhcpSerScrLogBufEntries=dhcpSerScrLogBufEntries, igsVlanFilterEntry=igsVlanFilterEntry, igsStatsIGMPv1TxReport=igsStatsIGMPv1TxReport, lldpRemLocalPortNum=lldpRemLocalPortNum, dlinkEEEGroup=dlinkEEEGroup, aclL3v4RuleDstIpAddr=aclL3v4RuleDstIpAddr, userRowStatus=userRowStatus, aclExpertExtRuleDstIpAddrMask=aclExpertExtRuleDstIpAddrMask)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", statisticsErrorCounters=statisticsErrorCounters, syslogServerAddress=syslogServerAddress, portStaDuplex=portStaDuplex, stormCtrlMIBObjects=stormCtrlMIBObjects, lldpLocManAddrEntry=lldpLocManAddrEntry, cableDiagTestResultPair3=cableDiagTestResultPair3, aclL3v6ExtRuleDstIpv6Addr=aclL3v6ExtRuleDstIpv6Addr, cableDiagTestPairTable=cableDiagTestPairTable, rmonAlarmStartupAlarm=rmonAlarmStartupAlarm, dhcp6ClientEntry=dhcp6ClientEntry, errDisIfStatusTable=errDisIfStatusTable, rmonHistoryJabbers=rmonHistoryJabbers, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, dlink_products=dlink_products, igsSystem=igsSystem, stpVersion=stpVersion, rmonLogEventIndex=rmonLogEventIndex, multiIfMainIndex=multiIfMainIndex, statPortCountDeferredTx=statPortCountDeferredTx, mstCistPortDesignatedBridge=mstCistPortDesignatedBridge, rmonHistoryOversizePkts=rmonHistoryOversizePkts, devFunPing=devFunPing, igsStatsEntry=igsStatsEntry, rmonHistoryMulticastPkts=rmonHistoryMulticastPkts, lldpXMedRemMediaPolicyTable=lldpXMedRemMediaPolicyTable, greenEeeTable=greenEeeTable, lldpXdot3LocPowerMDIEnabled=lldpXdot3LocPowerMDIEnabled, qosQueueID=qosQueueID, syslogBufferTableNum=syslogBufferTableNum, deviceInfoSystemTime=deviceInfoSystemTime, portSecurityTrapRate=portSecurityTrapRate, multiIpv6NeighborEntry=multiIpv6NeighborEntry, lldpXMedObjects=lldpXMedObjects, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, lldpLocPortDesc=lldpLocPortDesc, igsVlanCfgQuerier=igsVlanCfgQuerier, aclProfileName=aclProfileName, dlinkSecurity=dlinkSecurity, securityportSecurityGroup=securityportSecurityGroup, rmonStatsPkts65to127Octets=rmonStatsPkts65to127Octets, igsStatsIGMPv2RxLeave=igsStatsIGMPv2RxLeave, lldpXMedConfig=lldpXMedConfig, aclExpertExtRuleTcpSynBit=aclExpertExtRuleTcpSynBit, igsVlanRobustnessValue=igsVlanRobustnessValue, devFwActualBootImageId=devFwActualBootImageId, lbdLoopOccur=lbdLoopOccur, rmonHistoryUndersizePkts=rmonHistoryUndersizePkts, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, lldpXMedRemInventoryTable=lldpXMedRemInventoryTable, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, syslogServerTable=syslogServerTable, aclL3v4RuleSrcIpAddrMask=aclL3v4RuleSrcIpAddrMask, rmonEventType=rmonEventType, lldpXMedLocMediaPolicyVlanID=lldpXMedLocMediaPolicyVlanID, dhcpSerScrPortIndex=dhcpSerScrPortIndex, mldVlanMulticastGroupEntry=mldVlanMulticastGroupEntry, igsVlanFastLeave=igsVlanFastLeave, rmonStatsUndersizePkts=rmonStatsUndersizePkts, psgHibernationTimeProfile=psgHibernationTimeProfile, igsStatsVlanId=igsStatsVlanId, igsStatsIGMPv1RxQueries=igsStatsIGMPv1RxQueries, statisticsCounterClearEntry=statisticsCounterClearEntry, multiIpv6IfAdminStatus=multiIpv6IfAdminStatus, statCountersrxUndersizedPkts=statCountersrxUndersizedPkts, qosDscpPort=qosDscpPort, mstInstanceVlanMapped2k=mstInstanceVlanMapped2k, qosBasPortDefaultCoS=qosBasPortDefaultCoS, dxs_1210_12tc_AX=dxs_1210_12tc_AX, devFwOperationImageId=devFwOperationImageId, aclExpertExtRuleDstMacAddrMask=aclExpertExtRuleDstMacAddrMask, igsVlanRouterDynamicPortList=igsVlanRouterDynamicPortList, statPortRxMulticast=statPortRxMulticast, doSCtrlActionType=doSCtrlActionType, lldpStatistics=lldpStatistics, syslogBufferEntry=syslogBufferEntry, dot1qVlanEgressPorts=dot1qVlanEgressPorts, dot1qVlanTable=dot1qVlanTable, aclL3v4RuleAction=aclL3v4RuleAction, l2LAGroup=l2LAGroup, lldpMsgTxInterval=lldpMsgTxInterval, aclL3v4ExtRuleTcpUdpMaxSrcPort=aclL3v4ExtRuleTcpUdpMaxSrcPort, stpPortPriority=stpPortPriority, multiIpv6RoutePfxLength=multiIpv6RoutePfxLength, qosBasCoS2QueueMapping=qosBasCoS2QueueMapping, lldpRemManAddrIfSubtype=lldpRemManAddrIfSubtype, multiIpv6NeighborRowStatus=multiIpv6NeighborRowStatus, mgtDDPGroup=mgtDDPGroup, lldpXMedRemSoftwareRev=lldpXMedRemSoftwareRev, aclExpertExtRuleProfileNo=aclExpertExtRuleProfileNo, aclL3v4ExtRuleProtocol=aclL3v4ExtRuleProtocol, dhcp6ClientEnabled=dhcp6ClientEnabled, DStormCtlTrafficType=DStormCtlTrafficType, qosBasDscpMapCos=qosBasDscpMapCos, devFunCfgSize=devFunCfgSize, mldSystem=mldSystem, laChannelNeighborLACPTimeout=laChannelNeighborLACPTimeout, lldpXdot3LocPortTable=lldpXdot3LocPortTable, sntpGMTMinutes=sntpGMTMinutes, aclL3v6RuleAction=aclL3v6RuleAction, multicastFilterVlanEntry=multicastFilterVlanEntry, PortList=PortList, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, lldpXdot1LocConfigVlanNamePortNum=lldpXdot1LocConfigVlanNamePortNum, statCounterstxHCPkt64Octets=statCounterstxHCPkt64Octets, deviceInfoFirmwareVersion=deviceInfoFirmwareVersion, snmpTrapGlobalState=snmpTrapGlobalState, statPortRxRatePackets=statPortRxRatePackets, aclL3v6RuleDstIpv6Addr=aclL3v6RuleDstIpv6Addr, qosSchedulingModeBasePort=qosSchedulingModeBasePort, lldpXMedRemTimeMark=lldpXMedRemTimeMark, devFunCfgServerIpAddrType=devFunCfgServerIpAddrType, statisticsCounters=statisticsCounters, multicastFilterVlanTable=multicastFilterVlanTable, ddpReportTime=ddpReportTime, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, igsVlanFilterTable=igsVlanFilterTable, telnetPort=telnetPort, lldpLocManAddrSubtype=lldpLocManAddrSubtype, aclExpertExtRuleTcpUrgBit=aclExpertExtRuleTcpUrgBit, rmonHistoryControlDataSource=rmonHistoryControlDataSource, firmwareInformationTable=firmwareInformationTable, lldpRemManAddrTable=lldpRemManAddrTable, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, dot1qVlanPortNativeVlanId=dot1qVlanPortNativeVlanId, rmonStatsTable=rmonStatsTable, sntpSNTPSettings=sntpSNTPSettings, statCountersrxDroppkts=statCountersrxDroppkts, dhcpSerScrTraps=dhcpSerScrTraps, lldpXdot1RemVlanId=lldpXdot1RemVlanId, fdbMulticastStaticFDBEntry=fdbMulticastStaticFDBEntry, securityStormCtrlGroup=securityStormCtrlGroup, aclExpertExtRuleProtocol=aclExpertExtRuleProtocol, multiRouteEntry=multiRouteEntry, psShutdownPort=psShutdownPort, laPortChannelIfIndex=laPortChannelIfIndex, mstCistCurrentPortRole=mstCistCurrentPortRole, lldpXdot3LocLinkAggEntry=lldpXdot3LocLinkAggEntry, aclExpertExtRuleDscp=aclExpertExtRuleDscp, cableDiagTestPairEntry=cableDiagTestPairEntry, powerSavingShutdownTable=powerSavingShutdownTable, multiIpv6NeighborCacheState=multiIpv6NeighborCacheState, aclL3v4ExtRuleTcpFinBit=aclL3v4ExtRuleTcpFinBit, errDisRecoveryStatus=errDisRecoveryStatus, loginType=loginType, aclL2RuleTimeRange=aclL2RuleTimeRange, devFunCfgOperation=devFunCfgOperation, multiIpv6AddrCfgMethod=multiIpv6AddrCfgMethod, sntpServerLastReceive=sntpServerLastReceive, dhcpClientTable=dhcpClientTable, lldpRemUnknownIndex=lldpRemUnknownIndex, securityTrustedHostGroup=securityTrustedHostGroup, devFunConfiguration=devFunConfiguration, aclProfileNo=aclProfileNo, igsStatsTable=igsStatsTable, snmpUserPrivProtoByKey=snmpUserPrivProtoByKey, lbdportState=lbdportState, multiIpv6AddrType=multiIpv6AddrType, errDisNotifyVlanDisabledAssert=errDisNotifyVlanDisabledAssert, mldStatsMLDv2RxReport=mldStatsMLDv2RxReport, lldpStatsRxPortTLVsUnrecognizedTotal=lldpStatsRxPortTLVsUnrecognizedTotal, lldpXMedLocFirmwareRev=lldpXMedLocFirmwareRev, syslogLogBufSeverity=syslogLogBufSeverity, arpAgingTime=arpAgingTime, multiIfIpEntry=multiIfIpEntry, devFunFwOperationStatus=devFunFwOperationStatus, mstCistPort=mstCistPort, aclL2RuleVlanId=aclL2RuleVlanId, lldpXMedRemMediaPolicyPriority=lldpXMedRemMediaPolicyPriority, igsVlanQuerier=igsVlanQuerier, l2FDBGroup=l2FDBGroup, securityDoSprevGroup=securityDoSprevGroup, rmonHistory=rmonHistory, snmpCommAccessRight=snmpCommAccessRight, dlinkDeviceInfo=dlinkDeviceInfo, lldpStatsRxPortFramesDiscardedTotal=lldpStatsRxPortFramesDiscardedTotal, dlinkL2Features=dlinkL2Features, aclL3v4ExtRuleToS=aclL3v4ExtRuleToS, stormCtrlIndex=stormCtrlIndex, monMirrorGroup=monMirrorGroup, eeePort=eeePort, dhcpClientClientIdIfIdx=dhcpClientClientIdIfIdx, aclExpertExtRuleDstIpAddr=aclExpertExtRuleDstIpAddr, mirrorSourceIngressPort=mirrorSourceIngressPort, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, lldpTxDelay=lldpTxDelay, lldpXdot1RemTable=lldpXdot1RemTable, statPortCountExcessCol=statPortCountExcessCol, rmonEventCommunity=rmonEventCommunity, qosBandwidthTxBurst=qosBandwidthTxBurst, lldpXdot1RemProtoVlanTimeMark=lldpXdot1RemProtoVlanTimeMark, lldpXdot1LocProtoVlanId=lldpXdot1LocProtoVlanId, deviceErrorCodeEntry=deviceErrorCodeEntry, aclL3v4ExtRuleSrcIpAddr=aclL3v4ExtRuleSrcIpAddr, aclProfileType=aclProfileType, mstCistBridgePriority=mstCistBridgePriority, lldpXMedPortConfigEntry=lldpXMedPortConfigEntry, sessionTimeoutWeb=sessionTimeoutWeb, aclProfileRuleIdStep=aclProfileRuleIdStep, lbdState=lbdState, aclExpertExtRuleToS=aclExpertExtRuleToS, portSecAddrRowStatus=portSecAddrRowStatus, qosSchedulingMode=qosSchedulingMode, fdbMACAddressClear=fdbMACAddressClear, mirrorSessionRowStatus=mirrorSessionRowStatus, statPortCountIntMacTx=statPortCountIntMacTx, multiIfMainEntry=multiIfMainEntry, dlink_DXS1210SeriesProd=dlink_DXS1210SeriesProd, devFunWizardIgnoreNextTime=devFunWizardIgnoreNextTime, multiIpv6RouteTable=multiIpv6RouteTable, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, mldStatsMLDv2TxReport=mldStatsMLDv2TxReport, qosBandwidthTxRate=qosBandwidthTxRate, lldpXdot1RemProtoVlanLocalPortNum=lldpXdot1RemProtoVlanLocalPortNum, mstVlanMstiMappingTable=mstVlanMstiMappingTable, psgScheduledHibernation=psgScheduledHibernation, aclL3v4ExtRuleDstIpAddrMask=aclL3v4ExtRuleDstIpAddrMask, lbdInterval=lbdInterval, portSecurityAddressEntries=portSecurityAddressEntries, lldpRxStatsPortTable=lldpRxStatsPortTable, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, multiRouteMask=multiRouteMask, systemName=systemName, snmpGroupSecurityModel=snmpGroupSecurityModel, stpBridgeMaxAge=stpBridgeMaxAge, mstInstanceVlanMapped=mstInstanceVlanMapped, lldpStatsRxPortAgeoutsTotal=lldpStatsRxPortAgeoutsTotal, greenEeeEntry=greenEeeEntry, devIpv6PingProbeHistoryTable=devIpv6PingProbeHistoryTable, aclL3v4ExtRuleMatchCount=aclL3v4ExtRuleMatchCount, aclExpertExtRuleTcpRstBit=aclExpertExtRuleTcpRstBit, VlanIdOrNone=VlanIdOrNone, aclL3v4ExtRuleTimeRange=aclL3v4ExtRuleTimeRange, lbdTrapState=lbdTrapState, lldpLocalSystemData=lldpLocalSystemData, statPortCountIntMacRx=statPortCountIntMacRx, igsClearIgmpSnoopByVlanId=igsClearIgmpSnoopByVlanId, dhcpSerScrProfileEntry=dhcpSerScrProfileEntry, lldpXdot1LocTable=lldpXdot1LocTable, snmpViewStatus=snmpViewStatus, aclProfileRuleIdStart=aclProfileRuleIdStart, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, portSecuritySysMax=portSecuritySysMax, portStaStatus=portStaStatus, aclExpertExtRuleTcpUdpDstPort=aclExpertExtRuleTcpUdpDstPort, laChannelNeighborTable=laChannelNeighborTable, errDisRecoveryTable=errDisRecoveryTable, lldpXdot3LocPowerPairs=lldpXdot3LocPowerPairs, snmpUserAuthProtoKey=snmpUserAuthProtoKey, aclExpertExtRuleAccessID=aclExpertExtRuleAccessID, aclProfileEntry=aclProfileEntry, mstMstiConfigDigest=mstMstiConfigDigest, dhcpSerScrPortServerAddrType=dhcpSerScrPortServerAddrType, sslServicePolicyName=sslServicePolicyName, mstCistPortTable=mstCistPortTable)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", loginUserName=loginUserName, lldpXMedRemCapIndex=lldpXMedRemCapIndex, rmonStatsDropEvents=rmonStatsDropEvents, fdbClearAction=fdbClearAction, lldpXdot1RemVlanNameIndex=lldpXdot1RemVlanNameIndex, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, PolicyAppType=PolicyAppType, aclExpertExtRuleTcpUdpMaxDstPort=aclExpertExtRuleTcpUdpMaxDstPort, aclExpertExtRuleTcpUdpMinSrcPort=aclExpertExtRuleTcpUdpMinSrcPort, aclExpertExtRuleAction=aclExpertExtRuleAction, aclL3v6ExtRuleSrcIpv6AddrPrefixLen=aclL3v6ExtRuleSrcIpv6AddrPrefixLen, lldpXMedRemMfgName=lldpXMedRemMfgName, lldpXdot3RemMaxFrameSizeIndex=lldpXdot3RemMaxFrameSizeIndex, aclL3v6ExtRuleTcpUdpMaxSrcPort=aclL3v6ExtRuleTcpUdpMaxSrcPort, rmonHistoryUtilization=rmonHistoryUtilization, lldpConfigManAddrTable=lldpConfigManAddrTable, devPingTimes=devPingTimes, syslogServerIndex=syslogServerIndex, snmpHostAddress=snmpHostAddress, errDisIfStatusEntry=errDisIfStatusEntry, rmonAlarmVariable=rmonAlarmVariable, errDisAssertTrapState=errDisAssertTrapState, stormCtrlEntry=stormCtrlEntry, rmonAlarmInterval=rmonAlarmInterval, dot1qVlanPortIngressChecking=dot1qVlanPortIngressChecking, statCountersifOutErrors=statCountersifOutErrors, snmpCommStatus=snmpCommStatus, trafficSegmentationEntry=trafficSegmentationEntry, userAccountsManagementSettings=userAccountsManagementSettings, LldpPortList=LldpPortList, igsStatsIGMPv2RxReport=igsStatsIGMPv2RxReport, aclL3v4ExtRuleTcpPshBit=aclL3v4ExtRuleTcpPshBit, lldpLocPortIdSubtype=lldpLocPortIdSubtype, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, lldpConfigManAddr=lldpConfigManAddr, snmpResBroadReq=snmpResBroadReq, aclPortBindGroup=aclPortBindGroup, fdbMACAddrTabType=fdbMACAddrTabType, stpNewRootTrapState=stpNewRootTrapState, mldVlanStaticMcastGrpVlanId=mldVlanStaticMcastGrpVlanId, lldpRemChassisId=lldpRemChassisId, statPortRxUnicast=statPortRxUnicast, devPingStatus=devPingStatus, aclL3v4ExtRuleSrcIpAddrMask=aclL3v4ExtRuleSrcIpAddrMask, igsVlanMulticastGroupReceiverSrcAddr=igsVlanMulticastGroupReceiverSrcAddr, powerSavingGlobalSettings=powerSavingGlobalSettings, timeRangeIndex=timeRangeIndex, laSystem=laSystem, snmpTrapPortLinkDown=snmpTrapPortLinkDown, devFunCfgSave=devFunCfgSave, lldpRemChassisIdSubtype=lldpRemChassisIdSubtype, lldpXdot1RemEntry=lldpXdot1RemEntry, syslogBufferDateAndTime=syslogBufferDateAndTime, fdbUnicastStaticFDBRowStatus=fdbUnicastStaticFDBRowStatus, devPingProbeHistoryResponseTime=devPingProbeHistoryResponseTime, laChannelNeighborSystemID=laChannelNeighborSystemID, errDisRecoveryInterval=errDisRecoveryInterval, lldpXdot3RemoteData=lldpXdot3RemoteData, lldpMEDTrapState=lldpMEDTrapState, snmpTrapWarmstart=snmpTrapWarmstart, statPortRxBroadcast=statPortRxBroadcast, errDisClearTrapState=errDisClearTrapState, laChannelDetailPortNumber=laChannelDetailPortNumber, sysInformationGroup=sysInformationGroup, syslogBufferDescription=syslogBufferDescription, aclL3v6RuleSrcIpv6Addr=aclL3v6RuleSrcIpv6Addr, rmonHistoryPkts=rmonHistoryPkts, mldStatsRxQueries=mldStatsRxQueries, mldVlanStaticMcastGrpGroupAddress=mldVlanStaticMcastGrpGroupAddress, lldpLocManAddr=lldpLocManAddr, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, mldClearIgmpSnoopByVlanId=mldClearIgmpSnoopByVlanId, lldpXMedLocModelName=lldpXMedLocModelName, stpPortFast=stpPortFast, aclL3v4ExtRuleICMPMessageCode=aclL3v4ExtRuleICMPMessageCode, aclL3v4ExtRuleTcpUdpDstOperator=aclL3v4ExtRuleTcpUdpDstOperator, lldpRemManAddrSubtype=lldpRemManAddrSubtype, userPrivilege=userPrivilege, portSecurityPort=portSecurityPort, igsVlanStaticMcastGrpRowStatus=igsVlanStaticMcastGrpRowStatus, portSecurityTraps=portSecurityTraps, qosPortIndex=qosPortIndex, mldVlanFilterTable=mldVlanFilterTable, arpTable=arpTable, multiIpv6AddrOperStatus=multiIpv6AddrOperStatus, dhcpSerScrProfileName=dhcpSerScrProfileName, snmpHostEntry=snmpHostEntry, devErrorString=devErrorString, portSecuritySysMaxAddr=portSecuritySysMaxAddr, aclL3v4RuleDstIpAddrMask=aclL3v4RuleDstIpAddrMask, InetAddressPrefixLength=InetAddressPrefixLength, rmonHistoryControlBucketsGranted=rmonHistoryControlBucketsGranted, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, cableDiagTestLenPair3=cableDiagTestLenPair3, rmonAlarmSampleType=rmonAlarmSampleType, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, aclL3v4ExtRule=aclL3v4ExtRule, lbdportTimeLeft=lbdportTimeLeft, stpPortOperFast=stpPortOperFast, syslogSourceInterfaceState=syslogSourceInterfaceState, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, lldpLocManAddrIfId=lldpLocManAddrIfId, igsStats=igsStats, mstMstiPortPathCost=mstMstiPortPathCost, dhcpSerScrLogIndex=dhcpSerScrLogIndex, errDisNotifyVlanDisabledClear=errDisNotifyVlanDisabledClear, snmpHostStatus=snmpHostStatus, aclL3v6ExtRuleTcpSynBit=aclL3v6ExtRuleTcpSynBit, rmonStatsStatus=rmonStatsStatus, stpTopologyChangeTrapState=stpTopologyChangeTrapState, qosPortSchedulerMethodEntry=qosPortSchedulerMethodEntry, errDisTraps=errDisTraps, statisticsErrorEntry=statisticsErrorEntry, mldStatsVlanId=mldStatsVlanId, aclL3v4ExtRuleDscp=aclL3v4ExtRuleDscp, dot1qVlanEntry=dot1qVlanEntry, rmonHistoryControlInterval=rmonHistoryControlInterval, statisticsCountersTable=statisticsCountersTable, syslogSourceInterfaceVID=syslogSourceInterfaceVID, statPortCountCarriSen=statPortCountCarriSen, snmpViewEntry=snmpViewEntry, mstCistStatus=mstCistStatus, mldStatsMLDv1TxReport=mldStatsMLDv1TxReport, portSecuritySecurMode=portSecuritySecurMode, igsVlanFilterVlanId=igsVlanFilterVlanId, dhcpSerScrProfileTable=dhcpSerScrProfileTable, timeRangeEndMinute=timeRangeEndMinute, statCountersdot3StatsSingleColFrames=statCountersdot3StatsSingleColFrames, qosQueueRateLimitingTable=qosQueueRateLimitingTable, firmwareInformationEntry=firmwareInformationEntry, statCountersrxJabbers=statCountersrxJabbers, aclL2RuleMatchCount=aclL2RuleMatchCount, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, aclExpertExtRuleTcpUdpMaxSrcPort=aclExpertExtRuleTcpUdpMaxSrcPort, statCountersrxHCPkt65to127Octets=statCountersrxHCPkt65to127Octets, webState=webState, aclL3v4RuleEntry=aclL3v4RuleEntry, snmpCommunity=snmpCommunity, portIndex=portIndex, rmonHistoryControlIndex=rmonHistoryControlIndex, lldpRemIndex=lldpRemIndex, stpPort=stpPort, firmwareInfoUpdateTime=firmwareInfoUpdateTime, portSetMediaType=portSetMediaType, mstMstiPortState=mstMstiPortState, lldpXdot1Objects=lldpXdot1Objects, statCountersrxHCPkt256to511Octets=statCountersrxHCPkt256to511Octets, mgtRMONGroup=mgtRMONGroup, lldpXdot3LocPowerClass=lldpXdot3LocPowerClass, lldpXMedRemAssetID=lldpXMedRemAssetID, portSecurityVioCount=portSecurityVioCount, statCounterstxHCPkt1024to1518Octets=statCounterstxHCPkt1024to1518Octets, aclL3v4ExtRuleTcpSynBit=aclL3v4ExtRuleTcpSynBit, mstMstiPortPriority=mstMstiPortPriority, qosQueueSettingsEntry=qosQueueSettingsEntry, rmonEventEntry=rmonEventEntry, lldpRemUnknownLocalPortNum=lldpRemUnknownLocalPortNum, devIpv6PingIndex=devIpv6PingIndex, snmpCommunityEntry=snmpCommunityEntry, lldpXdot3LocPortNum=lldpXdot3LocPortNum, mstMstiBridgeTable=mstMstiBridgeTable, dot1qVlanRowStatus=dot1qVlanRowStatus, dhcpSerScrPortEntry=dhcpSerScrPortEntry, dlinkPowersavingGroup=dlinkPowersavingGroup, lldpXMedNotifications=lldpXMedNotifications, stormCtrlThresholdType=stormCtrlThresholdType, laChannelNeighborPort=laChannelNeighborPort, laPortChannelMemberList=laPortChannelMemberList, aclExpertExtRuleIPPrecedence=aclExpertExtRuleIPPrecedence, aclPortL3v4ExtProfileNo=aclPortL3v4ExtProfileNo, passwordEncryptionStatus=passwordEncryptionStatus, stormCtrlThresholdCurrRate=stormCtrlThresholdCurrRate, ddpTable=ddpTable, qosDscpCos=qosDscpCos, trafficSegmentationIfIndex=trafficSegmentationIfIndex, devPingStart=devPingStart, lldpRemManLocalPortNum=lldpRemManLocalPortNum, rmonEventStatus=rmonEventStatus, timeRangeStartHour=timeRangeStartHour, mstiConfigurationName=mstiConfigurationName, servicePolicyName=servicePolicyName, dlinkManagement=dlinkManagement, mirrorSessionNumber=mirrorSessionNumber, lldpXdot1RemTimeMark=lldpXdot1RemTimeMark, mldVlanMulticastGroupExp=mldVlanMulticastGroupExp, aclExpertExtRuleSrcMacAddr=aclExpertExtRuleSrcMacAddr, aclL3v6ExtRuleICMPv6MessageCode=aclL3v6ExtRuleICMPv6MessageCode, lldpXdot1LocVlanId=lldpXdot1LocVlanId, lldpXdot1LocProtoVlanTable=lldpXdot1LocProtoVlanTable, errDisRecoveryEntry=errDisRecoveryEntry, aclExpertExtRuleFragments=aclExpertExtRuleFragments, lldpXMedLocDeviceClass=lldpXMedLocDeviceClass, mstCistPortPathCost=mstCistPortPathCost, igsStatsIGMPv2TxLeave=igsStatsIGMPv2TxLeave, statCountersrxHCPkt64Octets=statCountersrxHCPkt64Octets, lldpXMedFastStartRepeatCount=lldpXMedFastStartRepeatCount, statPortCountPort=statPortCountPort, portSecurityAgingType=portSecurityAgingType, igsStatsIGMPv1TxQueries=igsStatsIGMPv1TxQueries, lldpXMedRemMediaPolicyTimeMark=lldpXMedRemMediaPolicyTimeMark, aclL3v4ExtRuleProfileNo=aclL3v4ExtRuleProfileNo, aclL3v6RuleEntry=aclL3v6RuleEntry, rmonStatsPkts64Octets=rmonStatsPkts64Octets, stormCtrlTraps=stormCtrlTraps, firmwareInfoImageID=firmwareInfoImageID, aclPortGroupEntry=aclPortGroupEntry, portSetState=portSetState, laChannelDetailTable=laChannelDetailTable, mstMstiPortEntry=mstMstiPortEntry, snmpGroupSecurityLevel=snmpGroupSecurityLevel, snmpUserGroupName=snmpUserGroupName, portSecAddrTable=portSecAddrTable, arpMacAddress=arpMacAddress, rmonStatsJabbers=rmonStatsJabbers, lbdportResult=lbdportResult, laChannelDetailEntry=laChannelDetailEntry, portSecurityEntry=portSecurityEntry, multiIpv6RouteDest=multiIpv6RouteDest, lldpXMedRemCapabilitiesTable=lldpXMedRemCapabilitiesTable, psgAdministrativeDimLED=psgAdministrativeDimLED, fdbUnicastStaticFDBVID=fdbUnicastStaticFDBVID, lldpXMedRemMediaPolicyPortNum=lldpXMedRemMediaPolicyPortNum, DStormCtlThrTypeValue=DStormCtlThrTypeValue, mstMstiInstanceIndex=mstMstiInstanceIndex, qosQueueRateLimitingEntry=qosQueueRateLimitingEntry, mldVlanMulticastGroupVlanId=mldVlanMulticastGroupVlanId, aclL3v4ExtRuleIPPrecedence=aclL3v4ExtRuleIPPrecedence, lldpStatsTxPortTable=lldpStatsTxPortTable, dot1qVlanPortVlanMode=dot1qVlanPortVlanMode, devPingProbeIndex=devPingProbeIndex, mgtTelnetWebGroup=mgtTelnetWebGroup, aclL3v4ExtRuleTcpUdpMinDstPort=aclL3v4ExtRuleTcpUdpMinDstPort, arpAgingTimeEntry=arpAgingTimeEntry, deviceInfoHardwareVersion=deviceInfoHardwareVersion, statCounterClearIndex=statCounterClearIndex, aclExpertExtRuleStatus=aclExpertExtRuleStatus, mstConfiguration=mstConfiguration, statCounterClearStatus=statCounterClearStatus, powerSavingTimeRangeSettings=powerSavingTimeRangeSettings, qosBandwidthBasePort=qosBandwidthBasePort, stormCtrlGentrl=stormCtrlGentrl, aclL3v6ExtRuleProtocol=aclL3v6ExtRuleProtocol, lldpXMedTopologyChangeDetected=lldpXMedTopologyChangeDetected, LldpPortIdSubtype=LldpPortIdSubtype, rmonStatsDataSource=rmonStatsDataSource, devFunCfgTransferPercentage=devFunCfgTransferPercentage, snmpGroupWriteViewName=snmpGroupWriteViewName, lldpStatsRxPortFramesErrors=lldpStatsRxPortFramesErrors, stormCtrlLevelType=stormCtrlLevelType, portSecAddrRemainTime=portSecAddrRemainTime, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, laChannelDetailPortPriority=laChannelDetailPortPriority, devFunFwRetryCount=devFunFwRetryCount)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", stpPortGuardRoot=stpPortGuardRoot, lldpXdot3RemPowerTimeMark=lldpXdot3RemPowerTimeMark, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, aclL2AccessID=aclL2AccessID, snmpUserPrivProtocolPassword=snmpUserPrivProtocolPassword, statCountersrxCRCAlignErrors=statCountersrxCRCAlignErrors, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, aclL3v4ExtRuleTcpRstBit=aclL3v4ExtRuleTcpRstBit, aclL3v6ExtRuleDscp=aclL3v6ExtRuleDscp, lldpXMedLocMediaPolicyTagged=lldpXMedLocMediaPolicyTagged, trustedHostACLName=trustedHostACLName, igsStatsIGMPv3RxReport=igsStatsIGMPv3RxReport, aclL3v6Rule=aclL3v6Rule, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, mldVlanFilterEntry=mldVlanFilterEntry, dhcpSerScrPortState=dhcpSerScrPortState, rmonLogIndex=rmonLogIndex, portSecurityCurrentNo=portSecurityCurrentNo, lldpXMedRemCapabilitiesEntry=lldpXMedRemCapabilitiesEntry, sslServicePolicyTable=sslServicePolicyTable, lldpPortConfigEntry=lldpPortConfigEntry, portStatusEntry=portStatusEntry, lldpXMedRemMediaPolicyIndex=lldpXMedRemMediaPolicyIndex, aclExpertExtRuleTcpAckBit=aclExpertExtRuleTcpAckBit, userSessionTableEntry=userSessionTableEntry, dhcpSerScrTrapList=dhcpSerScrTrapList, cableDiagTestLenPair4=cableDiagTestLenPair4, statCounterstxHCPkt512to1023Octets=statCounterstxHCPkt512to1023Octets, l2MulticastCtrlGroup=l2MulticastCtrlGroup, stormCtrlThresholdRiseThre=stormCtrlThresholdRiseThre, lldpLocManAddrLen=lldpLocManAddrLen, stormCtrlPollingRetries=stormCtrlPollingRetries, snmpGroupTable=snmpGroupTable, lldpXdot1RemLocalPortNum=lldpXdot1RemLocalPortNum, lldpXMedRemCapSupported=lldpXMedRemCapSupported, arpIntrefaceID=arpIntrefaceID, rmonAlarmRisingEventNumber=rmonAlarmRisingEventNumber, sslServicePolicyEntry=sslServicePolicyEntry, lbdTraps=lbdTraps, aclExpertExtRuleTcpUdpDstOperator=aclExpertExtRuleTcpUdpDstOperator, multiIpv6RouteIfIndex=multiIpv6RouteIfIndex, rmonHistorySampleIndex=rmonHistorySampleIndex, stormCtrlTrapsStormClear=stormCtrlTrapsStormClear, stpTxHoldCount=stpTxHoldCount, snmpUserAuthProtoByKey=snmpUserAuthProtoByKey, powerSavingShutdownEntry=powerSavingShutdownEntry, userPassword=userPassword, stpBridgeForwardDelay=stpBridgeForwardDelay, deviceFan=deviceFan, lldpStatsTxPortFramesTotal=lldpStatsTxPortFramesTotal, snmpCommName=snmpCommName, lldpXMedPortConfigNotifEnable=lldpXMedPortConfigNotifEnable, qosBasQueueSettings=qosBasQueueSettings, securitySafeGuardGroup=securitySafeGuardGroup, igsStatsIGMPv3TxReport=igsStatsIGMPv3TxReport, powerSavingShutdownSettings=powerSavingShutdownSettings, rmonHistoryControlEntry=rmonHistoryControlEntry, syslogLogbuffer=syslogLogbuffer, lldpXMedLocMediaPolicyEntry=lldpXMedLocMediaPolicyEntry, lldpRemPortDesc=lldpRemPortDesc, portStaFlowCtrlOpSend=portStaFlowCtrlOpSend, igsVlanMulticastGroupReceiverPortIndex=igsVlanMulticastGroupReceiverPortIndex, statCounterstxHCPkt128to255Octets=statCounterstxHCPkt128to255Octets, devFunCfgStartUpConfigID=devFunCfgStartUpConfigID, laChannelNeighborPortNo=laChannelNeighborPortNo, TimeFilter=TimeFilter, multiIpv6NeighborAddr=multiIpv6NeighborAddr, aclL3v4RuleTimeRange=aclL3v4RuleTimeRange, statCountersrxMulticastDropPkts=statCountersrxMulticastDropPkts, sslObjects=sslObjects, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, qosQueueSettingsTable=qosQueueSettingsTable, multiIfIpIndex=multiIfIpIndex, mldVlanCfgQuerier=mldVlanCfgQuerier, stormCtrlThresholdIndex=stormCtrlThresholdIndex, igsStatsIGMPv2TxReport=igsStatsIGMPv2TxReport, aclL3v4ExtRuleDstIpAddr=aclL3v4ExtRuleDstIpAddr, dhcpSerScrLogVlanID=dhcpSerScrLogVlanID, aclL3v6ExtRuleTcpUdpMaxDstPort=aclL3v6ExtRuleTcpUdpMaxDstPort, syslogGroup=syslogGroup, aclL3v6ExtRuleFlowLabel=aclL3v6ExtRuleFlowLabel, aclL3v6ExtRuleTcpUrgBit=aclL3v6ExtRuleTcpUrgBit, LldpPortNumber=LldpPortNumber, statPortCountAlignErr=statPortCountAlignErr, dhcp6ClientRapidCommit=dhcp6ClientRapidCommit, aclL2RuleTable=aclL2RuleTable, aclL3v6ExtRuleAction=aclL3v6ExtRuleAction, mldVlanRouterDynamicPortList=mldVlanRouterDynamicPortList, stormCtrlThresholdStormState=stormCtrlThresholdStormState, fdbMACAddressLearningState=fdbMACAddressLearningState, mstMstiPortTable=mstMstiPortTable, multiIfMainRowStatus=multiIfMainRowStatus, qosPortDefaultCoSEntry=qosPortDefaultCoSEntry, lldpStatsRemTablesAgeouts=lldpStatsRemTablesAgeouts, lldpRemManTimeMark=lldpRemManTimeMark, doSCtrlTable=doSCtrlTable, snmpHostCommunityName=snmpHostCommunityName, fdbMACAddressLearningEntry=fdbMACAddressLearningEntry, devFunCfgOperationStatus=devFunCfgOperationStatus, rmonHistoryEntry=rmonHistoryEntry, snmpTrapSNMPAuthTrap=snmpTrapSNMPAuthTrap, lldpConfigManAddrPortsTxEnable=lldpConfigManAddrPortsTxEnable, lldpXMedLocSoftwareRev=lldpXMedLocSoftwareRev, aclProfileRuleCounterState=aclProfileRuleCounterState, laPortChannelTable=laPortChannelTable, aclL3v4Rule=aclL3v4Rule, errDisNotifyPortDisabledClear=errDisNotifyPortDisabledClear, syslogServerFacility=syslogServerFacility, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, portStaFlowCtrlOpRece=portStaFlowCtrlOpRece, lldpXdot1Config=lldpXdot1Config, mirrorSessionTable=mirrorSessionTable, lldpXMedLocSerialNum=lldpXMedLocSerialNum, statCountersifInDiscards=statCountersifInDiscards, stpBridgeHelloTime=stpBridgeHelloTime, deviceErrorCodeInformation=deviceErrorCodeInformation, doSCtrlState=doSCtrlState, aclL2Rule1pPriority=aclL2Rule1pPriority, timeRangeRowStatus=timeRangeRowStatus, lldpReinitDelay=lldpReinitDelay, lldpPortNeighborClear=lldpPortNeighborClear, lldpXdot3LocLinkAggPortNum=lldpXdot3LocLinkAggPortNum, fdbMACAddrTabVID=fdbMACAddrTabVID, aclExpertExtRuleTimeRange=aclExpertExtRuleTimeRange, webPort=webPort, lldpStatsRxPortFramesTotal=lldpStatsRxPortFramesTotal, aclL3v4RuleSrcIpAddr=aclL3v4RuleSrcIpAddr, statCountersrxHCPkt128to255Octets=statCountersrxHCPkt128to255Octets, aclL3v4ExtRuleTcpUdpMaxDstPort=aclL3v4ExtRuleTcpUdpMaxDstPort, eeestate=eeestate, aclL3v6ExtRuleEntry=aclL3v6ExtRuleEntry, devFunCfgUpdateTime=devFunCfgUpdateTime, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, portSetAutoDowngrade=portSetAutoDowngrade, lldpRemUnknownTLVType=lldpRemUnknownTLVType, fdbUnicastStaticFDBTable=fdbUnicastStaticFDBTable, lldpXdot1LocVlanName=lldpXdot1LocVlanName, deviceInformation=deviceInformation, lldpRemSysCapEnabled=lldpRemSysCapEnabled, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, aclL3v4ExtRuleAccessID=aclL3v4ExtRuleAccessID, rmonStatsOctets=rmonStatsOctets, aclL3v6ExtRuleTcpAckBit=aclL3v6ExtRuleTcpAckBit, laChannelNeighborWorkingMode=laChannelNeighborWorkingMode, portCtrlTable=portCtrlTable, LldpPowerPortClass=LldpPowerPortClass, lbdLoopRecover=lbdLoopRecover, mldStatsEntry=mldStatsEntry, safeGuardEnable=safeGuardEnable, portStaSpeed=portStaSpeed, lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, snmpUserEntry=snmpUserEntry, aclL3v6ExtRule=aclL3v6ExtRule, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, systemContact=systemContact, lldpLocPortTable=lldpLocPortTable, mldVlanMulticastGroupPortList=mldVlanMulticastGroupPortList, sysTimeRangeGroup=sysTimeRangeGroup, lldpXMedLocMediaPolicyDscp=lldpXMedLocMediaPolicyDscp, portSetDuplex=portSetDuplex, snmpTrapColdstart=snmpTrapColdstart, lldpStatsRxPortTLVsDiscardedTotal=lldpStatsRxPortTLVsDiscardedTotal, multiIfIpTable=multiIfIpTable, mldVlanMulticastGroupReceiverSrcAddr=mldVlanMulticastGroupReceiverSrcAddr, lldpXdot3RemPowerIndex=lldpXdot3RemPowerIndex, aclExpertExtRuleSrcMacAddrMask=aclExpertExtRuleSrcMacAddrMask, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, aclL3v4RuleTable=aclL3v4RuleTable, deviceInfoDeviceType=deviceInfoDeviceType, syslogGeneral=syslogGeneral, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, arpRowStatus=arpRowStatus, fdbUnicastStaticFDBEntry=fdbUnicastStaticFDBEntry, mldVlanMaxResponseTime=mldVlanMaxResponseTime, lldpRemUnknownTLVTable=lldpRemUnknownTLVTable, monStatisticsGroup=monStatisticsGroup, stpNewRootTrap=stpNewRootTrap, userName=userName, lldpRemUnknownTLVEntry=lldpRemUnknownTLVEntry, statCounterstxHCPkt1519to2047Octets=statCounterstxHCPkt1519to2047Octets, statCounterstxHCPkt2048to4095Octets=statCounterstxHCPkt2048to4095Octets, dhcpClientIfIndex=dhcpClientIfIndex, laChannelDetailWorkingMode=laChannelDetailWorkingMode, snmpUserAuthProtocolPassword=snmpUserAuthProtocolPassword, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, qosBandwidthRxBurst=qosBandwidthRxBurst, rmonEvent=rmonEvent, mstMstiPortDesignatedRoot=mstMstiPortDesignatedRoot, laSystemChannelGroupID=laSystemChannelGroupID, mstMstiBridgeRegionalRoot=mstMstiBridgeRegionalRoot, sntpTimeZoneSettings=sntpTimeZoneSettings, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, aclExpertExtRuleTcpPshBit=aclExpertExtRuleTcpPshBit, aclPortL3v6StdProfileNo=aclPortL3v6StdProfileNo, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, aclL3v6ExtRuleFragments=aclL3v6ExtRuleFragments, timeRangeName=timeRangeName, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, qosBandwidthTxRateMode=qosBandwidthTxRateMode, multiIfIpBindVlanId=multiIfIpBindVlanId, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, arpAgingTimeTable=arpAgingTimeTable, psgScheduledDimLED=psgScheduledDimLED, lldpRemUnknownTLVInfo=lldpRemUnknownTLVInfo, aclL3v4ExtRuleTcpUdpMinSrcPort=aclL3v4ExtRuleTcpUdpMinSrcPort, dhcpSerScrPortSettings=dhcpSerScrPortSettings, multiIpv6IfOperStatus=multiIpv6IfOperStatus, devPingV4ProbeHistoryEntry=devPingV4ProbeHistoryEntry, statCountersrxHCPkt1024to1518Octets=statCountersrxHCPkt1024to1518Octets, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, statCountersrxHCPkt512to1023Octets=statCountersrxHCPkt512to1023Octets, mldVlanRouterBlockPortList=mldVlanRouterBlockPortList, sysPortConfigGroup=sysPortConfigGroup, sslServerStatus=sslServerStatus, statPortTxTotalPackets=statPortTxTotalPackets, stpPortFowardBPDU=stpPortFowardBPDU, portSecAddrPort=portSecAddrPort, syslogBufferIndex=syslogBufferIndex, lldpXdot1ConfigProtoVlanTable=lldpXdot1ConfigProtoVlanTable, mgtSessionTimeoutGroup=mgtSessionTimeoutGroup, qosQueueBandwidthBasePort=qosQueueBandwidthBasePort, lldpLocManAddrIfSubtype=lldpLocManAddrIfSubtype, rmonStatsEntry=rmonStatsEntry, rmonHistoryDropEvents=rmonHistoryDropEvents, qosBasPortScheMethod=qosBasPortScheMethod, lldpXMedRemHardwareRev=lldpXMedRemHardwareRev, devFunCfgServerIpvxAddr=devFunCfgServerIpvxAddr, multiIpv6NeighborMacAddr=multiIpv6NeighborMacAddr, sntpServerEntry=sntpServerEntry, OwnerString=OwnerString, fdbMACAddrTabPort=fdbMACAddrTabPort, rmonAlarmIndex=rmonAlarmIndex, qosCoS2QueCos=qosCoS2QueCos, devFwNextBootImageId=devFwNextBootImageId, devFunLogBackupToTftpIpType=devFunLogBackupToTftpIpType, stpPortState=stpPortState, psgScheduledPortShutdown=psgScheduledPortShutdown, lldpStatsTxPortNum=lldpStatsTxPortNum, lldpLocManAddrTable=lldpLocManAddrTable, timeRangeTable=timeRangeTable, lldpLocSysName=lldpLocSysName, aclL3v4RuleProfileNo=aclL3v4RuleProfileNo, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, devFunFwTransferPercentage=devFunFwTransferPercentage, igsVlanStaticMcastGrpGroupAddress=igsVlanStaticMcastGrpGroupAddress, qosQueueBandwidthRateMode=qosQueueBandwidthRateMode, mgtSnmpGroup=mgtSnmpGroup, snmpGroupEntry=snmpGroupEntry, stormCtrlThresholdLowThre=stormCtrlThresholdLowThre, qosPortRateLimitingTable=qosPortRateLimitingTable, mstCistPortPriority=mstCistPortPriority, portSecAddrType=portSecAddrType, qosCoS2QueueTable=qosCoS2QueueTable)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", mldVlanRouterVlanId=mldVlanRouterVlanId, dhcpSerScrLogTable=dhcpSerScrLogTable, lbdVlanSettings=lbdVlanSettings, arpAgingTimeIntrefaceID=arpAgingTimeIntrefaceID, devFunFwServerIpvxAddr=devFunFwServerIpvxAddr, qosDscpValueMapCosTable=qosDscpValueMapCosTable, errDisPortState=errDisPortState, lldpRemoteSystemsData=lldpRemoteSystemsData, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, statCountersrxHCPkt1519to2047Octets=statCountersrxHCPkt1519to2047Octets, syslogServerSeverity=syslogServerSeverity, mldVlan=mldVlan, lldpRemManAddrOID=lldpRemManAddrOID, sntpServerVersion=sntpServerVersion, rmonStatsPkts1024to1518Octets=rmonStatsPkts1024to1518Octets, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, mldVlanQuerier=mldVlanQuerier, userAccountsSessionTable=userAccountsSessionTable, igsVlanRouterBlockPortList=igsVlanRouterBlockPortList, fdbUnicastStaticFDBState=fdbUnicastStaticFDBState, lbdVlanLoopEntry=lbdVlanLoopEntry, lldpXMedRemCapPortNum=lldpXMedRemCapPortNum, multiIfIpAddrAllocMethod=multiIfIpAddrAllocMethod, mldVlanMulticastGroupIpAddress=mldVlanMulticastGroupIpAddress, statCountersrxHCPkt2048to4095Octets=statCountersrxHCPkt2048to4095Octets, sessionID=sessionID, aclExpertExtRuleMatchCount=aclExpertExtRuleMatchCount, qosBasQueueRateLimiting=qosBasQueueRateLimiting, doSCtrlEntry=doSCtrlEntry, snmpGroupName=snmpGroupName, mstCistPortEntry=mstCistPortEntry, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, lldpXMedLocMediaPolicyTable=lldpXMedLocMediaPolicyTable, mirrorSessionEntry=mirrorSessionEntry, snmpViewTable=snmpViewTable, mstMstiCurrentPortRole=mstMstiCurrentPortRole, aclL3v4ExtRuleTcpUdpSrcOperator=aclL3v4ExtRuleTcpUdpSrcOperator, lldpPortConfigPortNum=lldpPortConfigPortNum, errDisTrapsList=errDisTrapsList, igsVlanRouterStaticPortList=igsVlanRouterStaticPortList, arpType=arpType, rmonAlarmEntry=rmonAlarmEntry, fdbUnicastStaticFDB=fdbUnicastStaticFDB, igsStatsIGMPv3RxQueries=igsStatsIGMPv3RxQueries, mirrorDestinationPort=mirrorDestinationPort, rmonStatsFragments=rmonStatsFragments, snmpGroupReadViewName=snmpGroupReadViewName, aclExpertExtRuleSrcIpAddr=aclExpertExtRuleSrcIpAddr, lldpXdot1ConfigVlanPortNum=lldpXdot1ConfigVlanPortNum, laChannelDetailLACPState=laChannelDetailLACPState, mldStatsMLDv1RxDone=mldStatsMLDv1RxDone, aclExpertExtRuleTcpFinBit=aclExpertExtRuleTcpFinBit, fdbUnicastStaticFDBPort=fdbUnicastStaticFDBPort, multiIpv6IfEntry=multiIpv6IfEntry, lldpLocChassisIdSubtype=lldpLocChassisIdSubtype, qosCos2QueQueueID=qosCos2QueQueueID, sntpSummerTimeEnd=sntpSummerTimeEnd, portStaVlan=portStaVlan, lldpXdot1LocalData=lldpXdot1LocalData, cableDiagTestLenPair1=cableDiagTestLenPair1, lldpXdot1RemVlanName=lldpXdot1RemVlanName, mldVlanRouterStaticPortList=mldVlanRouterStaticPortList, lldpLocPortId=lldpLocPortId, lldpMsgHoldMultiplier=lldpMsgHoldMultiplier, dhcpSerScrLogMacAddr=dhcpSerScrLogMacAddr, rmonHistoryBroadcastPkts=rmonHistoryBroadcastPkts, userAccountsEntry=userAccountsEntry, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, aclL3v6RuleAccessID=aclL3v6RuleAccessID, LldpManAddrIfSubtype=LldpManAddrIfSubtype, syslogMIBObjects=syslogMIBObjects, errDisNotificationRate=errDisNotificationRate, statCountersifInErrors=statCountersifInErrors, qosPortDefaultCoSTable=qosPortDefaultCoSTable, userSessionEntry=userSessionEntry, cableDiagTestResultPair2=cableDiagTestResultPair2, snmpGroupIpListName=snmpGroupIpListName, fdbMACAddrTabMACAddr=fdbMACAddrTabMACAddr, laChannelNeighborPortPriority=laChannelNeighborPortPriority, syslogClearLogBuffer=syslogClearLogBuffer, lbdVlanLoopTable=lbdVlanLoopTable, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, snmpViewSubtree=snmpViewSubtree, multiIfIpSubnetMask=multiIfIpSubnetMask, dhcpSerScrAttackDetect=dhcpSerScrAttackDetect, multiIpv6IfRetransmitTime=multiIpv6IfRetransmitTime, multiIpv6AddrPrefixLen=multiIpv6AddrPrefixLen, mstSetVlanList=mstSetVlanList, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, loginIP=loginIP, lldpXMedRemoteData=lldpXMedRemoteData, mldStats=mldStats, l3ARPGroup=l3ARPGroup, dot1qVlanPortTable=dot1qVlanPortTable, statPortTxMulticast=statPortTxMulticast, devFunConfigInfo=devFunConfigInfo, deviceInfoSerialNumber=deviceInfoSerialNumber, qosDscpMapCosTable=qosDscpMapCosTable, dhcp6ClientIndex=dhcp6ClientIndex, lldpXMedRemMediaPolicyDscp=lldpXMedRemMediaPolicyDscp, lldpLocManAddrOID=lldpLocManAddrOID, dhcpClientHostName=dhcpClientHostName, lldpXdot3RemMaxFrameSizeLocalPortNum=lldpXdot3RemMaxFrameSizeLocalPortNum, multiIpv6AddrAdminStatus=multiIpv6AddrAdminStatus, aclL3v6ExtRuleTcpUdpDstPort=aclL3v6ExtRuleTcpUdpDstPort, multiIpv6IfIndex=multiIpv6IfIndex, devFunLangMgmtApply=devFunLangMgmtApply, aclL3v6ExtRuleDstIpv6AddrPrefixLen=aclL3v6ExtRuleDstIpv6AddrPrefixLen, portSetLinkStatus=portSetLinkStatus, rmonHistoryCRCErrors=rmonHistoryCRCErrors, lldpXMedLocXPoEDeviceType=lldpXMedLocXPoEDeviceType, devPingDestIpType=devPingDestIpType, jumboFrameEntry=jumboFrameEntry, laChannelNeighborSystemPriority=laChannelNeighborSystemPriority, aclPortDirection=aclPortDirection, stpPortLinkType=stpPortLinkType, lldpStatsTxPortEntry=lldpStatsTxPortEntry, snmpUserIpListName=snmpUserIpListName, lldpLocSysDesc=lldpLocSysDesc, aclExpertExtRuleDstMacAddr=aclExpertExtRuleDstMacAddr, fdbMACAddrGlobalSettings=fdbMACAddrGlobalSettings, l2STPGroup=l2STPGroup, qosQueueQuantum=qosQueueQuantum, mldVlanMulticastGroupTable=mldVlanMulticastGroupTable, stpPortAdminPathCost=stpPortAdminPathCost, trustedHostEntry=trustedHostEntry, fdbMACAddressLearningPort=fdbMACAddressLearningPort, aclExpertExtRuleTcpUdpSrcPort=aclExpertExtRuleTcpUdpSrcPort, sntpServerTable=sntpServerTable, laActorSystemID=laActorSystemID, lldpState=lldpState, aclL3v4ExtRuleStatus=aclL3v4ExtRuleStatus, rmonHistoryControlBucketsRequested=rmonHistoryControlBucketsRequested, trustedHostRowStatus=trustedHostRowStatus, errDisPortReason=errDisPortReason, mstCistPortState=mstCistPortState, portSecurityTrapList=portSecurityTrapList, multiIpv6AddrAddress=multiIpv6AddrAddress, rmonStatsOwner=rmonStatsOwner, multiIfMainAdminStatus=multiIfMainAdminStatus, devPingSuccesses=devPingSuccesses, snmpUserPrivProtocol=snmpUserPrivProtocol, lldpXdot1LocProtocolPortNum=lldpXdot1LocProtocolPortNum, dhcpSerScrPortServerIP=dhcpSerScrPortServerIP, statPortTxRateBytes=statPortTxRateBytes, cableDiagTestLenPair2=cableDiagTestLenPair2, devPingDestIpAddr=devPingDestIpAddr, portSecAddrEntry=portSecAddrEntry, mstMstiPort=mstMstiPort, lldpStatsRemTablesDeletes=lldpStatsRemTablesDeletes, lldpRemPortId=lldpRemPortId, rmonFallingAlarmTrapState=rmonFallingAlarmTrapState, lldpRemSysDesc=lldpRemSysDesc, lldpXdot3LocLinkAggTable=lldpXdot3LocLinkAggTable, portSecurityCurState=portSecurityCurState, igsVlanRouterEntry=igsVlanRouterEntry, fdbMulticastStaticFDBMACAddr=fdbMulticastStaticFDBMACAddr, sntpClockSettings=sntpClockSettings, dlinkMonitoring=dlinkMonitoring, mldVlanQuerierVersion=mldVlanQuerierVersion, aclPortL3v4StdProfileNo=aclPortL3v4StdProfileNo, timeRangeStartMinute=timeRangeStartMinute, lldpXMedRemMediaPolicyUnknown=lldpXMedRemMediaPolicyUnknown, sntpSummerTimeStart=sntpSummerTimeStart, lldpRemManAddrIfId=lldpRemManAddrIfId, dhcpClientClassIdType=dhcpClientClassIdType, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, aclProfileStatus=aclProfileStatus, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, devPingIndex=devPingIndex, errDisPortRecoveryTimeLeft=errDisPortRecoveryTimeLeft, aclL3v6ExtRuleTimeRange=aclL3v6ExtRuleTimeRange, timeRangeWeekday=timeRangeWeekday, mstMstiStatus=mstMstiStatus, laSystemPriority=laSystemPriority, deviceFunction=deviceFunction, mstInstanceVlanMapped4k=mstInstanceVlanMapped4k, mldVlanFilterVlanId=mldVlanFilterVlanId, rmonHistoryControlTable=rmonHistoryControlTable, snmpGlobalState=snmpGlobalState, statCounterstxHCPkt65to127Octets=statCounterstxHCPkt65to127Octets, lldpXMedRemModelName=lldpXMedRemModelName, statisticsCountersEntry=statisticsCountersEntry, portSecurityTable=portSecurityTable, lldpXMedRemInventoryEntry=lldpXMedRemInventoryEntry, stormCtrlThresholdEntry=stormCtrlThresholdEntry, firmwareInfoVersion=firmwareInfoVersion, sslConfiguration=sslConfiguration, liveTime=liveTime, stpInstancePortTable=stpInstancePortTable, stormCtrlActionMode=stormCtrlActionMode, ZeroBasedCounter32=ZeroBasedCounter32, arpAgingTimeTimeout=arpAgingTimeTimeout, aclL2RuleStatus=aclL2RuleStatus, fdbMACAddrAgingDestinationHit=fdbMACAddrAgingDestinationHit, dhcpSerScrProfileClientMac=dhcpSerScrProfileClientMac, aclL2RuleEntry=aclL2RuleEntry, sntpGlobalState=sntpGlobalState, aclL3v4ExtRuleTcpUdpSrcPort=aclL3v4ExtRuleTcpUdpSrcPort, igsVlanStaticMcastGrpEntry=igsVlanStaticMcastGrpEntry, snmpGroupStatus=snmpGroupStatus, statCounterstxHCPkt4096to9216Octets=statCounterstxHCPkt4096to9216Octets, portSecAddrVID=portSecAddrVID, statPort=statPort, devFunCfgSrcFilename=devFunCfgSrcFilename, lldpConfigManAddrSubtype=lldpConfigManAddrSubtype, dlinkSystem=dlinkSystem, aclL2RuleEtherType=aclL2RuleEtherType, igsVlanQuerierVersion=igsVlanQuerierVersion, fdbMACAddrAgingTime=fdbMACAddrAgingTime, lldpXdot3LocPowerEntry=lldpXdot3LocPowerEntry, qosTrustMode=qosTrustMode, dhcpClientLeaseDay=dhcpClientLeaseDay, lldpXdot3RemTimeMark=lldpXdot3RemTimeMark, snmpView=snmpView, portSetCapaAdvertised=portSetCapaAdvertised, qosCoS2QueueEntry=qosCoS2QueueEntry, devFunFwServerStatus=devFunFwServerStatus, aclL3v4ExtRuleTcpUdpDstPort=aclL3v4ExtRuleTcpUdpDstPort, igsVlanLastMemberQueryInterval=igsVlanLastMemberQueryInterval, snmpCommunityTable=snmpCommunityTable, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, lldpXdot1LocProtoVlanEntry=lldpXdot1LocProtoVlanEntry, devFunLogBackupToTftpOper=devFunLogBackupToTftpOper, deviceInfoMACAddress=deviceInfoMACAddress, lldpXMedLocalData=lldpXMedLocalData, igsStatus=igsStatus, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, multiL3VlanIfName=multiL3VlanIfName, LldpXMedCapabilities=LldpXMedCapabilities, errDisIfStatusPortIndex=errDisIfStatusPortIndex, aclProfileTable=aclProfileTable, multiIfIpAddr=multiIfIpAddr, igsVlanSnoopStatus=igsVlanSnoopStatus, multiRouteNextHop=multiRouteNextHop, devIpv6PingProbeHistoryResponseTime=devIpv6PingProbeHistoryResponseTime, lldpXdot3LocMaxFrameSizePortNum=lldpXdot3LocMaxFrameSizePortNum, dhcpSerScrLogOccurrence=dhcpSerScrLogOccurrence, stpTraps=stpTraps, multiIpv6NeighborType=multiIpv6NeighborType, stpPortTCNFilter=stpPortTCNFilter, stormCtrlThresholdTable=stormCtrlThresholdTable, Ipv6Address=Ipv6Address, LldpPortId=LldpPortId, igsStatsIGMPv3TxQueries=igsStatsIGMPv3TxQueries, loginUserLevel=loginUserLevel, l2Dot1qVlanGroup=l2Dot1qVlanGroup, aclL2Rule=aclL2Rule, aclPortL3v6ExtProfileNo=aclPortL3v6ExtProfileNo, multiRouteIfIndex=multiRouteIfIndex, portStatusTable=portStatusTable, stpMaxHopCount=stpMaxHopCount, lldpXMedPortConfigTable=lldpXMedPortConfigTable)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", devFunCfgInfoTable=devFunCfgInfoTable, trustedHostTable=trustedHostTable, laPortChannelMaxPorts=laPortChannelMaxPorts, rmonLogEntry=rmonLogEntry, qosBandwidthRxRate=qosBandwidthRxRate, portSecurityTrapState=portSecurityTrapState, psgFunctionVersion=psgFunctionVersion, portSecurityState=portSecurityState, syslogServerEntry=syslogServerEntry, dot1qVlanPortUntagVlanList=dot1qVlanPortUntagVlanList, lldpRemTable=lldpRemTable, qosPortRateLimitingEntry=qosPortRateLimitingEntry, lldpXdot3RemMaxFrameSizeTimeMark=lldpXdot3RemMaxFrameSizeTimeMark, stpPortPathCost=stpPortPathCost, statCountersrxFragmentPkts=statCountersrxFragmentPkts, lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, jumboFrameTable=jumboFrameTable, lldpRemSysCapSupported=lldpRemSysCapSupported, aclExpertExtRule=aclExpertExtRule, fdMulticastStaticFDBTable=fdMulticastStaticFDBTable, VlanIndex=VlanIndex, igsStatsIGMPv1RxReport=igsStatsIGMPv1RxReport, mldVlanSnoopStatus=mldVlanSnoopStatus, devErrorCodeIndex=devErrorCodeIndex, mldVlanQueryInterval=mldVlanQueryInterval, portStaMacAddr=portStaMacAddr, lldpForwardState=lldpForwardState, stormCtrlTrapsStormOccur=stormCtrlTrapsStormOccur, lldpXdot3LocLinkAggStatus=lldpXdot3LocLinkAggStatus, snmpUserPrivProtoKey=snmpUserPrivProtoKey, aclL2ProfileID=aclL2ProfileID, statCountersdot3StatsDeferredTransmisions=statCountersdot3StatsDeferredTransmisions, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, devFunCfgOperConfigID=devFunCfgOperConfigID, stpStatus=stpStatus, devFunFwUpgradeAndBackup=devFunFwUpgradeAndBackup, statPortRxRateBytes=statPortRxRateBytes, syslogServerPort=syslogServerPort, psgDimLEDShutOffTimeProfile=psgDimLEDShutOffTimeProfile, aclProfile=aclProfile, igsVlanStaticMcastGrpTable=igsVlanStaticMcastGrpTable, lldpXMedRemMediaPolicyVlanID=lldpXMedRemMediaPolicyVlanID, multiIfMainTable=multiIfMainTable, aclL3v6ExtRuleProfileNo=aclL3v6ExtRuleProfileNo, aclExpertExtRuleVlanId=aclExpertExtRuleVlanId, sysSNTPSettingGroup=sysSNTPSettingGroup, lldpXdot3RemIndex=lldpXdot3RemIndex, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, lldpXdot3Objects=lldpXdot3Objects, qosPortDefOverride=qosPortDefOverride, snmpGlobalSettings=snmpGlobalSettings, LldpSystemCapabilitiesMap=LldpSystemCapabilitiesMap, aclL3v6ExtRuleTable=aclL3v6ExtRuleTable, lldpXMedPortConfigPortNum=lldpXMedPortConfigPortNum, rmonStatsPkts=rmonStatsPkts, stormCtrlTable=stormCtrlTable, statPortCountFCSErr=statPortCountFCSErr, lldpXdot3LocLinkAggPortId=lldpXdot3LocLinkAggPortId, lldpXdot3RemLinkAggLocalPortNum=lldpXdot3RemLinkAggLocalPortNum, laPortChannelMemberNumber=laPortChannelMemberNumber, lldpLocSysCapEnabled=lldpLocSysCapEnabled, rmonHistoryOctets=rmonHistoryOctets, devFunLogBackupToTftpIpAddr=devFunLogBackupToTftpIpAddr, sntpServerRowStatus=sntpServerRowStatus, rmonStatsOversizePkts=rmonStatsOversizePkts, snmpUserTable=snmpUserTable, lbdportEntry=lbdportEntry, syslogServerAddressType=syslogServerAddressType, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, rmonStatsIndex=rmonStatsIndex, mgtPasswordEncryptionGroup=mgtPasswordEncryptionGroup, rmonLogTime=rmonLogTime, laPortChannelEntry=laPortChannelEntry, lldpXdot1LocVlanNamePortNum=lldpXdot1LocVlanNamePortNum, qosDscpMapCosList=qosDscpMapCosList, aclProfileRemark=aclProfileRemark, portSecurityPortSettings=portSecurityPortSettings, stpPortConfigurationTable=stpPortConfigurationTable, rmonStatsBroadcastPkts=rmonStatsBroadcastPkts, aclPortL2ProfileNo=aclPortL2ProfileNo, l2LBDGroup=l2LBDGroup, devIpv6PingProbeIndex=devIpv6PingProbeIndex, ddpPort=ddpPort, aclL3v6ExtRuleStatus=aclL3v6ExtRuleStatus, snmpHostVersion=snmpHostVersion, rmonAlarmOwner=rmonAlarmOwner, mstInstanceIndex=mstInstanceIndex, aclProfileRuleCount=aclProfileRuleCount, mstResetVlanList=mstResetVlanList, mldVlanStaticMcastGrpPortList=mldVlanStaticMcastGrpPortList, mirrorSourceEgressPort=mirrorSourceEgressPort, firmwareInfoSizeB=firmwareInfoSizeB, dot1qVlanPortTagVlanList=dot1qVlanPortTagVlanList, rmonEventTable=rmonEventTable, syslogLogBufWriteDelay=syslogLogBufWriteDelay, multiIpv6AddrEntry=multiIpv6AddrEntry, fdbStaticFDB=fdbStaticFDB, mstMstiPortInstanceIndex=mstMstiPortInstanceIndex, rmonStatistics=rmonStatistics, portSetIndex=portSetIndex, mstCistPortProtocolMigration=mstCistPortProtocolMigration, rmonEventIndex=rmonEventIndex, rmonLogDescription=rmonLogDescription, aclL3v6ExtRuleTcpFinBit=aclL3v6ExtRuleTcpFinBit, cableDiagTriggerIndex=cableDiagTriggerIndex, multicastFilterVlanType=multicastFilterVlanType, stormCtrlTrapsList=stormCtrlTrapsList, statCounterLinkChange=statCounterLinkChange, dhcp6ClientTable=dhcp6ClientTable, dlinkACL=dlinkACL, stpTopologyChgTrap=stpTopologyChgTrap, mldVlanLastListenerQueryInterval=mldVlanLastListenerQueryInterval, mldVlanStaticMcastGrpEntry=mldVlanStaticMcastGrpEntry, mldStatsTxQueries=mldStatsTxQueries, statCounterstxHCPkt256to511Octets=statCounterstxHCPkt256to511Octets, mldStatsMLDv1TxDone=mldStatsMLDv1TxDone, userEncryptControl=userEncryptControl, portSetDescription=portSetDescription, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, lldpXdot3LocPowerTable=lldpXdot3LocPowerTable, igsVlan=igsVlan, statisticsClear=statisticsClear, mldStatsMLDv1RxReport=mldStatsMLDv1RxReport, dhcpClientLeaseHour=dhcpClientLeaseHour, statCountersrxSymbolErrors=statCountersrxSymbolErrors, mstiRevisionLevel=mstiRevisionLevel, lldpXMedLocMediaPolicyPortNum=lldpXMedLocMediaPolicyPortNum, DStormCtlThrType=DStormCtlThrType, lldpRemEntry=lldpRemEntry, maxReceFrameSize=maxReceFrameSize, lldpXdot1ConfigProtoVlanTxEnable=lldpXdot1ConfigProtoVlanTxEnable, snmpEngineID=snmpEngineID, multiIpv6RouteNextHop=multiIpv6RouteNextHop, lldpXMedLocMediaPolicyPriority=lldpXMedLocMediaPolicyPriority, laChannelNeighborEntry=laChannelNeighborEntry, aclPortGroupTable=aclPortGroupTable, portSecurityVioAction=portSecurityVioAction, snmpHostTable=snmpHostTable, aclL3v4ExtRuleEntry=aclL3v4ExtRuleEntry, statCountersrxOversizedPkts=statCountersrxOversizedPkts, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable, arpARPTable=arpARPTable, BridgeId=BridgeId, qosDscpMapCosEntry=qosDscpMapCosEntry, stpBridgePriority=stpBridgePriority, devFunCfgServerInterfaceName=devFunCfgServerInterfaceName, errDisPortConnectStatus=errDisPortConnectStatus, lldpXdot1LocEntry=lldpXdot1LocEntry, dhcpClientLeaseMinute=dhcpClientLeaseMinute, laPortChannelMode=laPortChannelMode, syslogBufferTable=syslogBufferTable, LldpChassisIdSubtype=LldpChassisIdSubtype, lldpXMedRemMediaPolicyTagged=lldpXMedRemMediaPolicyTagged, devPingV4ProbeHistoryTable=devPingV4ProbeHistoryTable, statCountersifInUnknownProtos=statCountersifInUnknownProtos, portCtrlEntry=portCtrlEntry, lldpXMedLocMediaPolicyAppType=lldpXMedLocMediaPolicyAppType, rmonEventLastTimeSent=rmonEventLastTimeSent, psShutdownTimeRange=psShutdownTimeRange, mldStatus=mldStatus, lldpXdot1ConfigProtocolPortNum=lldpXdot1ConfigProtocolPortNum, LldpChassisId=LldpChassisId, lldpXdot1LocProtoVlanPortNum=lldpXdot1LocProtoVlanPortNum, d_link=d_link, securitySSLGroup=securitySSLGroup, dhcpSerScrLogIPAddr=dhcpSerScrLogIPAddr, stpPortConfigurationEntry=stpPortConfigurationEntry, lldpXdot3Config=lldpXdot3Config, devFunLogBackupToTftStatus=devFunLogBackupToTftStatus, syslogServerRowstatus=syslogServerRowstatus, statCounterstxDelayExceededDiscards=statCounterstxDelayExceededDiscards, dhcpClientEntry=dhcpClientEntry, statCountersrxMTUDropPkts=statCountersrxMTUDropPkts, mldVlanMulticastGroupReceiverPortIndex=mldVlanMulticastGroupReceiverPortIndex, rmonHistoryFragments=rmonHistoryFragments, snmpUserStatus=snmpUserStatus, Timeout=Timeout, fdbUnicastStaticFDBMACAddr=fdbUnicastStaticFDBMACAddr, stpPortOperLinkType=stpPortOperLinkType, multiRouteTos=multiRouteTos, qosQueueBasePort=qosQueueBasePort, lldpRemTimeMark=lldpRemTimeMark, statPortRxTotalBytes=statPortRxTotalBytes, snmpHost=snmpHost, dot1qVlanPortEntry=dot1qVlanPortEntry, securityDhcpSerScrGroup=securityDhcpSerScrGroup, multiRouteStatus=multiRouteStatus, rmonStatsMulticastPkts=rmonStatsMulticastPkts, lbdMode=lbdMode, aclGroup=aclGroup, rmonStatsPkts512to1023Octets=rmonStatsPkts512to1023Octets, stormCtrlPollingInterval=stormCtrlPollingInterval, fdbClearMac=fdbClearMac, sntpSummerTimeOffset=sntpSummerTimeOffset, dot1qVlanName=dot1qVlanName, mstCistRegionalRoot=mstCistRegionalRoot, rmonLogTable=rmonLogTable, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, lldpXMedPortConfigTLVsTxEnable=lldpXMedPortConfigTLVsTxEnable, lldpXdot1LocPortNum=lldpXdot1LocPortNum, lldpLocPortNum=lldpLocPortNum, mstCistPortAdminPathCost=mstCistPortAdminPathCost, rmonHistoryTable=rmonHistoryTable, deviceInfoGroup=deviceInfoGroup, devFunLogBackup=devFunLogBackup, devFunRestart=devFunRestart, stpProtocolSetting=stpProtocolSetting, lbdAction=lbdAction, aclL3v6ExtRuleTcpPshBit=aclL3v6ExtRuleTcpPshBit, devFunCfgServerStatus=devFunCfgServerStatus, deviceInfoBootPROMVersion=deviceInfoBootPROMVersion, devFunLangMgmtFile=devFunLangMgmtFile, aclExpertExtRuleICMPMessageType=aclExpertExtRuleICMPMessageType, aclExpertExtRuleICMPMessageCode=aclExpertExtRuleICMPMessageCode, snmpGroupNotifyViewName=snmpGroupNotifyViewName, mstMstiPortAdminPathCost=mstMstiPortAdminPathCost, dhcpSerScrLogEntry=dhcpSerScrLogEntry, qosPortindex=qosPortindex, aclExpertExtRuleTable=aclExpertExtRuleTable, fdbMACAddressTable=fdbMACAddressTable, aclPortExpertProfileNo=aclPortExpertProfileNo, fdbMulticastStaticFDBVID=fdbMulticastStaticFDBVID, aclL3v4ExtRuleTcpUrgBit=aclL3v4ExtRuleTcpUrgBit, securityTrafficSegmentationGroup=securityTrafficSegmentationGroup, aclL3v6RuleProfileNo=aclL3v6RuleProfileNo, lldpXdot1RemVlanNameLocalPortNum=lldpXdot1RemVlanNameLocalPortNum, devFunCfgId=devFunCfgId, aclL3v6RuleTable=aclL3v6RuleTable, multiIpv6IfTable=multiIpv6IfTable, dhcpClientClassId=dhcpClientClassId, lldpXdot1RemProtocolLocalPortNum=lldpXdot1RemProtocolLocalPortNum, sntpServerSynced=sntpServerSynced, sslServicePolicyCacheTimeout=sslServicePolicyCacheTimeout, cableDiagTestPortPair=cableDiagTestPortPair, mstVlanMstiMappingEntry=mstVlanMstiMappingEntry, timeRangeEntry=timeRangeEntry, snmpHostIPType=snmpHostIPType, mldVlanMulticastGroupMacAddress=mldVlanMulticastGroupMacAddress, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, dhcpSerScrGlobTrapState=dhcpSerScrGlobTrapState, stpPortHelloTime=stpPortHelloTime, lldpConfigManAddrEntry=lldpConfigManAddrEntry, qosDscpValueMapCosEntry=qosDscpValueMapCosEntry, qosBandwidthRxRateMode=qosBandwidthRxRateMode, dlinkQoS=dlinkQoS, aclPortIndex=aclPortIndex, snmpTrapSourceInterface=snmpTrapSourceInterface, snmpGroup=snmpGroup, doSCtrlType=doSCtrlType, lldpXdot1ConfigProtoVlanPortNum=lldpXdot1ConfigProtoVlanPortNum, lldpRemManAddrEntry=lldpRemManAddrEntry, mldVlanFastLeave=mldVlanFastLeave, rmonHistoryControlStatus=rmonHistoryControlStatus)
mibBuilder.exportSymbols("DLINK-DXS-1210-12TC-AX-MIB", systemLocation=systemLocation, sntpPollInterval=sntpPollInterval, lldpXdot1LocProtoVlanSupported=lldpXdot1LocProtoVlanSupported, deviceSwitchCPULast5SecUsage=deviceSwitchCPULast5SecUsage, aclExpertExtRuleSrcIpAddrMask=aclExpertExtRuleSrcIpAddrMask, multiIPv6neighborTable=multiIPv6neighborTable, statPortTxTotalBytes=statPortTxTotalBytes, dxs_1210_12tc=dxs_1210_12tc, multiIpv6RouteEntry=multiIpv6RouteEntry, aclProfileRuleCounterClear=aclProfileRuleCounterClear, qosBasPortRateLimiting=qosBasPortRateLimiting, statCountersifOutDiscards=statCountersifOutDiscards, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, lbdTrapsList=lbdTrapsList, VlanList=VlanList, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, qosQueueBandwidthMaxRate=qosQueueBandwidthMaxRate, dlinkGreen=dlinkGreen, sessionTimeoutTelnet=sessionTimeoutTelnet, igsVlanRouterTable=igsVlanRouterTable, aclL3v6ExtRuleTcpUdpSrcOperator=aclL3v6ExtRuleTcpUdpSrcOperator, RmonStatus=RmonStatus, multiRouteTable=multiRouteTable, mstMstiTopChanges=mstMstiTopChanges, lbdVlanLoopIndex=lbdVlanLoopIndex, dhcpSerScrProfileRowStatus=dhcpSerScrProfileRowStatus, lldpXdot3LocPowerPairControlable=lldpXdot3LocPowerPairControlable, qosQueueWrrWeight=qosQueueWrrWeight)
