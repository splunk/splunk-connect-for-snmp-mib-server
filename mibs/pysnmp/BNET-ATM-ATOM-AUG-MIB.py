#
# PySNMP MIB module BNET-ATM-ATOM-AUG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BNET-ATM-ATOM-AUG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
atmVclVpi, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVclVpi", "atmVclVci")
atmSoftPVccLeafReference, = mibBuilder.importSymbols("ATM-SOFT-PVC-MIB", "atmSoftPVccLeafReference")
AtmAddr, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmAddr")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
s5AtmTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5AtmTop")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, Gauge32, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, MibIdentifier, TimeTicks, iso, Counter32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Gauge32", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "MibIdentifier", "TimeTicks", "iso", "Counter32", "Counter64", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bnetAtmAug = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3))
bnetAtmDeviceAtmAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 1), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmDeviceAtmAddr.setStatus('mandatory')
bnetAtmLearnAddrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("learnAddrs", 2), ("forgetAddrs", 3))).clone('learnAddrs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnetAtmLearnAddrs.setStatus('mandatory')
atmfAddressClientTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3), )
if mibBuilder.loadTexts: atmfAddressClientTable.setStatus('mandatory')
atmfAddressClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1), ).setIndexNames((0, "BNET-ATM-ATOM-AUG-MIB", "atmfAddressPort"), (0, "BNET-ATM-ATOM-AUG-MIB", "atmfAddressAtmAddress"))
if mibBuilder.loadTexts: atmfAddressClientEntry.setStatus('mandatory')
atmfAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressPort.setStatus('mandatory')
atmfAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 2), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressAtmAddress.setStatus('mandatory')
atmfAddressClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("cnTurbo", 2), ("cnCircuitSaver", 3), ("laneTurbo", 4), ("laneCircuitSaver", 5), ("external", 6), ("les", 7), ("bus", 8), ("les-bus", 9), ("lecs", 10), ("spvc", 11))).clone('external')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressClientType.setStatus('mandatory')
atmfAddressClientCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressClientCallCount.setStatus('mandatory')
bnetAtmSoftPVccExtnTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4), )
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnTable.setStatus('mandatory')
bnetAtmSoftPVccExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-SOFT-PVC-MIB", "atmSoftPVccLeafReference"))
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnEntry.setStatus('mandatory')
bnetAtmSoftPVccCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmSoftPVccCircuitId.setStatus('mandatory')
mibBuilder.exportSymbols("BNET-ATM-ATOM-AUG-MIB", bnetAtmSoftPVccCircuitId=bnetAtmSoftPVccCircuitId, atmfAddressClientEntry=atmfAddressClientEntry, bnetAtmSoftPVccExtnEntry=bnetAtmSoftPVccExtnEntry, bnetAtmSoftPVccExtnTable=bnetAtmSoftPVccExtnTable, bnetAtmLearnAddrs=bnetAtmLearnAddrs, bnetAtmAug=bnetAtmAug, bnetAtmDeviceAtmAddr=bnetAtmDeviceAtmAddr, atmfAddressClientType=atmfAddressClientType, atmfAddressPort=atmfAddressPort, atmfAddressAtmAddress=atmfAddressAtmAddress, atmfAddressClientTable=atmfAddressClientTable, atmfAddressClientCallCount=atmfAddressClientCallCount)
