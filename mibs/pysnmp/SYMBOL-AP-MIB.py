#
# PySNMP MIB module SYMBOL-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBOL-AP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ObjectIdentity, enterprises, Unsigned32, IpAddress, Counter32, Bits, Bits, Gauge32, Integer32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ObjectIdentity", "enterprises", "Unsigned32", "IpAddress", "Counter32", "Bits", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "iso")
TextualConvention, TruthValue, DisplayString, PhysAddress, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "PhysAddress", "TestAndIncr")
ccWlanCryptoWepKey3, ccPortalRxPktsAt1Mb, ccMuSumStatsLongThroughputRx, ccPortalSettingsBasicRates, ccPortalTxOctetsUcast, ccWlanCryptoKeyguardKeyToUse, ccMuSumStatsShortAvgMuSnr, ccWlanTxOctetsAt11Mb, ccWlanAuthEapReauthenticationPeriod, ccPortalSigStatsNumPkts, ccMuTxOctetsAt1Mb, ccWlanSumStatsShortAvgBitSpeed, ccWlanQosWMETrafficSrcPortEnd, ccPortalSystemStatsProbeRespRetries2, ccMuSumStatsShortNumPkts, ccWlanMuAclRowStatus, ccPortalTxOctetsAt22Mb, ccPortalMeshAvailableBaseChannel, ccPortalTxOctetsAt54Mb, ccMuTxRetriesFailed, ccPortalTxRetriesOctets07, ccWlanQosWMEProfileVideoECwmin, ccMuSumStatsLongPktsPerSec100, ccWlanAuthEapRadius2Server, ccPortalSumStatsLongPktsPerSecTx100, ccMuRxPktsAt5pt5Mb, ccPortalSettingsDefaultBeaconInt, ccPortalSettingsUniSpread, ccPortalTxRetriesOctets05, ccWlanSumStatsShortTimestamp, ccMuRxOctetsUcast, ccPortalRxPktsAt12Mb, ccWlanRxPktsAt1Mb, ccMuSumStatsShortTimestamp, ccMuRxRssiNumPkts, ccWlanBwShareMode, ccWlanTxRetriesOctets10, ccWlanAuthEapServerMaxRetries, ccWlanQosWMEProfileName, ccPortalRxUndecryptablePkts, ccMuSigStatsNoiseSum, ccMuRxPktsAt36Mb, ccPortalSumStatsShortPp10kNUcastPkts, ccPortalRxPktsAt6Mb, ccMuSigStatsNoiseSumSquares, ccPortalCfgRadioPowerInMW, ccPortalSettingsName, ccWlanTxRetriesOctets11, ccMuType, ccPortalRxPktsAt11Mb, ccMuTxRetriesMostRecent, ccWlanTxPktsUcast, ccWlanTxRetriesOctetsNone, ccPortalRxOctetsAt48Mb, ccPortalPointersToWlans, ccPortalSumStatsLongTotalMus, ccMuTxPktsAt36Mb, ccMuRxOctetsAt11Mb, ccMuTxOctetsAt36Mb, ccWlanQosWMETrafficRowStatus, ccPortalSettingsMeshAutoBaseSelection, ccPortalSettingsDefaultSupportedRates, ccWlanAuthEapMuQuietPeriod, ccWlanCryptoWepKeyToUse, ccPortalBackgroundNoiseWorst, ccWlanRxOctetsNUcast, ccWlanAuthEapMuMaxRetries, ccWlanTxPktsAt11Mb, ccWlanSumStatsLongPktsPerSec100, ccWlanRxOctetsAt6Mb, ccWlanWeight, ccMuRadioType, ccMuTxRetriesOctets12, ccMuSumStatsLongAvgMuNoise, ccWlanThresholdRate, ccWlanRxOctetsAt1Mb, ccMuTxRetries05, ccWlanTxPktsAt48Mb, ccWlanSumStatsShortPktsPerSecRx100, ccWlanSumStatsShortThroughputRx, ccMuLastPortal, ccMuRxPktsAt12Mb, ccWlanCryptoWpaTwoKey, cc802dt1xPortAuthLogin, ccPortalSigStatsNoiseMostRecent, ccPortalSumStatsLongPktsPerSec100, ccPortalSystemStatsProbeReqRxOctets, ccPortalCfgRadioPosChannel, ccPortalSystemStatsProbeRespRetriesNone, ccPortalCfgRadioDefaultChannel, ccPortalRxOctetsAt6Mb, ccWlanQosWMEProfileBackgroundECwmax, ccMuRxPktsUcast, ccWlanVlanId, ccWlanQosWMETrafficSrcIp, ccWlanTxOctetsUcast, ccPortalTxRetriesOctets02, ccMuTxPktsAt18Mb, ccPortalSumStatsShortNumPkts, ccPortalTxRetriesPkts01, ccWlanTxOctetsAt12Mb, ccMuTxRetries13, ccPortalMeshPreferredBaseRowStatus, ccMuLastMac, ccPortalCfgRadioDefaultReset, ccPortalSettingsMeshMaxClients, ccWlanQosWMETrafficAccessCategory, ccPortalMac, ccWlanSigStatsSignalWorst, ccMuRxPktsAt24Mb, ccMuSigStatsSnrMostRecent, ccWlanQosWMEProfileVoiceECwmax, ccWlanRxOctetsAt12Mb, ccPortalTxPktsAt2Mb, ccMuSumStatsLongTimestamp, ccMuRxOctetsAt1Mb, ccPortalCfgRadioDesPowerLevel, ccWlanRxOctetsAt24Mb, ccPortalSettingsDefaultBasicRates, ccWlanCryptoWpaKey, ccPortalNumberOfBss, ccPortalCfgRadioDefaultDesPowerLevel, ccWlanAuthEapReauthenticationMaxRetries, ccMuSumStatsShortAvgMuSignal, ccWlanSumStatsLongTxAvgRetries100, ccPortalSigStatsSnrMostRecent, ccSubnetEntry, ccWlanQosWMEProfileVideoAifsn, ccMuRxPktsAt22Mb, cc802dt1xPortAuthSetAp300, ccPortalTxRetriesOctets01, ccMuRxPktsAt18Mb, ccMuSumStatsShortThroughput, ccWlanSigStatsNoiseSumSquares, ccWlanTxRetriesPkts12, ccMuSupportedRates, ccPortalCfgRadioPowerLevel, ccMuSigStatsSnrSum, ccWlanVoicePrioritization, ccPortalSumStatsLongAvgMuSignal, ccPortalSettingsSipAllowedSessCnt, ccPortalTxRetriesOctets04, ccPortalRxPktsUcast, ccWlanRxPktsAt9Mb, ccWlanSumStatsShortPp10kDropped, ccMuRxPktsAt6Mb, ccMuTxRetries14, ccMuRxPktsAt1Mb, ccMuTxOctetsAt9Mb, ccPortalCfgRadioPlacement, ccMuIpAddr, ccWlanAuthKerberosKdcServerIp1, ccWlanQosWMEProfileBestEffortECwmax, ccPortalSumStatsShortThroughputTx, ccWlanSigStatsNumPkts, ccPortalSettingsMeshBaseEnable, ccWlanCryptoWpaTwoBcastKeyRotation, ccPortalTxRetriesOctets03, ccPortalSumStatsLongThroughputRx, ccPortalSumStatsLongPp10kTxWithRetries, ccPortalRxOctetsAt22Mb, ccPortalSumStatsLongPp10kTxMaxRetries, ccWlanAuthEapRadius1SharedSecret, ccMuTxPktsAt9Mb, ccPortalCfgRadioDesPlacement, ccMuSumStatsLongAvgMuSnr, ccMuSumStatsLongPktsPerSecTx100, ccWlanSumStatsLongPp10kNUcastPkts, ccWlanAuthKerberosRealmName, ccWlanRxOctetsAt9Mb, ccMuTxRetries11, ccWlanCryptoWepKey1, ccWlanSigStatsNoiseSum, ccPortalTxRetriesPkts13, ccPortalTxRetriesPkts03, ccPortalCfgRadioDefaultPowerInMW, ccWlanQosWMEPriorityConversion, ccWlanIndex, ccWlanRxPktsAt48Mb, ccMuTxRetriesOctets13, ccMuTxRetriesOctets14, ccMuSigStatsNoiseWorst, ccPortalTxRetriesOctets10, ccMuTxPktsAt22Mb, ccMuAuthenticationMethod, ccPortalLegacyMode, ccPortalRxOctetsAt12Mb, ccMuVlanId, ccPortalCfgRadioDesPowerInMW, ccPortalTxPktsAt24Mb, ccPortalSettingsDefaultDtimPrd3, ccMuRxOctetsAt18Mb, ccPortalSettingsSipActiveSessCnt, ccWlanSumStatsShortThroughputTx, ccPortalSettingsDefaultShortPreamble, ccPortalTxPktsAt54Mb, ccWlanRxPktsAt12Mb, ccMuTxPktsAt48Mb, ccMuSumStatsShortPp10kNUcastPkts, ccPortalMeshAvailableBaseRssi, ccWlanTxRetriesPkts13, ccWlanAuthEapSyslogMode, ccWlanTxOctetsAt22Mb, ccPortalCfgRadioDefaultPlacement, ccWlanTxRetriesOctets09, ccWlanQosWMEProfileBackgroundTxopsTime, ccPortalAdoptionEndMac, ccWlanTxRetriesPkts08, ccWlanQosWMEProfileBestEffortAifsn, ccPortalSettingsDetector, ccPortalSettingsAntenna, ccMuPortalMac, ccMuSumStatsLongPp10kTxWithRetries, ccWlanAuthEapReauthenticationEnable, ccWlanAuthEapRadiusAcctMuRetries, ccWlanAuthKerberosKdcServerIpR, ccPortalTxRetriesOctetsFailed, ccPortalSettingsAdoptedWlan, ccMuTxRetries07, ccWlanTxRetriesPkts14, ccWlanSumStatsLongAvgMuNoise, ccMuTxRetries01, ccMuSumStatsShortPktsPerSec100, ccPortalSettingsLocation, ccPortalRxOctetsAt2Mb, ccWlanRxPktsAt5pt5Mb, ccWlanCryptoWpaBcastKeyRotation, ccWlanTxRetriesOctets14, ccPortalSumStatsLongPp10kRxUndecrypt, ccPortalTxRetriesOctetsNone, ccPortalTxRetriesPkts06, ccWlanCryptoWpaTwoPassphrase, ccWlanTxRetriesOctets08, ccMuTxRetries06, ccWlanMuAclStartingMac, ccWlanQosWMEProfileVideoECwmax, ccWlanTxPktsAt24Mb, ccPortalRadioRemapChannel, ccMuTxRetriesOctets04, ccPortalSumStatsShortThroughput, ccMuTxOctetsAt54Mb, ccPortalSumStatsLongPp10kDropped, ccMuSigStatsSnrSumSquares, ccMuRxOctetsAt5pt5Mb, ccWlanTxOctetsAt48Mb, ccWlanRxPktsUcast, ccMuSumStatsLongTxAvgRetries100, ccWlanTxRetriesPkts01, ccWlanTxRetriesPktsFailed, ccPortalSettingsRevertAp, ccPortalRxPktsAt36Mb, ccPortalCfgRadioDefaultDesPlacement, ccMuRxUndecryptablePkts, ccWlanTxPktsAt12Mb, ccPortalLastAdoption, ccPortalSumStatsShortTotalMus, ccMuSumStatsShortPktsPerSecTx100, ccWlanQosWMETrafficIndex, ccMuTxRetriesOctets15, ccWlanTxOctetsAt2Mb, ccWlanSumStatsShortTxAvgRetries100, ccPortalTxRetriesPkts14, ccPortalSumStatsShortAvgMuSnr, ccPortalSumStatsShortPp10kRfUtil, ccWlanSumStatsShortSkip1, ccPortalTxRetriesOctets06, ccPortalTxPktsAt36Mb, ccMuTxPktsAt2Mb, ccWlanCryptoUseWpa2, ccWlanAuthEapServerTimeout, ccPortalTxRetriesPkts12, ccWlanSumStatsShortPp10kTxWithRetries, ccWlanMuInactivityTimeout, ccMuSumStatsShortThroughputRx, ccWlanRxOctetsAt5pt5Mb, ccPortalTxPktsAt6Mb, ccMuTxRetriesOctets01, ccMuSumStatsLongPp10kRxUndecrypt, ccWlanTxOctetsAt9Mb, ccWlanQosWMEProfileRowStatus, ccWlanCryptoWpaPassphrase, ccPortalPointerToAp, ccWlanName, ccWlanTxRetriesOctets05, ccWlanSubnet, ccPortalCfgRadioDefaultPowerLevel, ccWlanTxPktsAt22Mb, ccPortalTxOctetsAt48Mb, ccWlanRxOctetsUcast, ccWlanEncryption, ccPortalTxRetriesPkts02, ccWlanQosWMEProfileVoiceTxopsTime, ccWlanQosWMETrafficSrcPortStart, ccWlanCryptoWpaTwoFastRoamPreAuth, ccPortalSIPCacMode, ccWlanRxPktsAt6Mb, ccPortalRxPktsAt54Mb, ccMuTxRetriesOctets03, ccPortalTxOctetsAt2Mb, ccPortalSettingsDefaultDtimPrd, ccPortalSystemStatsProbeRespTxOctets, ccMuTxOctetsAt6Mb, ccWlanAuthKerberosKdcPort1, ccMuSigStatsSignalSumSquares, ccPortalCfgRadioChannelMode, ccPortalSumStatsLongThroughput, ccWlanSigStatsSignalBest, ccMuTxRetries04, ccMuSigStatsSnrWorst, ccPortalTxRetriesPkts11, ccPortalTxRetriesPkts04, ccPortalTxPktsAt11Mb, ccWlanQosWMEProfileVideoTxopsTime, ccPortalBackgroundNoiseNumSamples, ccMuRxPktsAt2Mb, ccPortalSettingsBGMode, ccMuRxPktsAt54Mb, ccMuSumStatsLongAvgMuSignal, ccWlanMuAclEndingMac, ccPortalSumStatsShortAvgBitSpeed, ccMuTxPktsAt5pt5Mb, ccMuTxRetriesOctets11, ccPortalCfgRadioDefaultSet, ccWlanPortalsAdopted, cc802dt1xPortAuthPass, ccPortalRxOctetsNUcast, ccWlanSumStatsShortAvgMuNoise, ccWlanSumStatsLongTotalMus, ccMuTxRetriesOctets05, ccMuTxRetriesOctets07, ccPortalSettingsShortPreamble, ccMuRxOctetsAt9Mb, ccWlanTxRetriesOctets13, ccWlanAuthEapMuTimeout, ccPortalRxOctetsAt5pt5Mb, ccWlanSumStatsShortPp10kRxUndecrypt, ccPortalSigStatsSignalWorst, ccMuSumStatsLongThroughputTx, ccPortalBackgroundNoiseSum, ccWlanMuAclName, ccPortalTxOctetsAt5pt5Mb, ccWlanMulticastAddr1, ccPortalSumStatsShortPp10kTxMaxRetries, ccWlanCryptoKeyguardPasskey, ccWlanRxOctetsAt48Mb, ccPortalSettingsBeaconInt, ccWlanQosWMEProfileBackgroundECwmin, ccPortalTxPktsAt48Mb, ccMuRxOctetsAt22Mb, ccWlanRxPktsAt11Mb, ccWlanTxRetriesPkts15, ccPortalSigStatsNoiseSum, ccPortalTxRetriesPkts08, ccWlanTxOctetsAt18Mb, ccMuTxOctetsUcast, ccPortalSettingsDefaultUniSpread, ccWlanCryptoWpaTwoFastRoamKeyCache, ccPortalBackgroundNoiseSumSquares, ccPortalSettingsMeshClientWlanIndex, ccMuSymbolRogueApEna, ccPortalTxRetriesPkts09, ccPortalCfgRadioReset, ccWlanCryptoWpaTwoKeyToUse, ccPortalSettingsSupportedRates, ccPortalTxPktsUcast, ccWlanRxPktsNUcast, ccPortalTxPowerLevel, ccPortalSettingsWMEProfile, ccPortalRxPktsAt9Mb, ccWlanSumStatsShortPktsPerSecTx100, ccMuSumStatsShortPp10kTxWithRetries, ccWlanSumStatsLongPktsPerSecTx100, ccWlanSumStatsLongPp10kRxUndecrypt, ccPortalRxPktsNUcast, ccPortalSigStatsSignalSumSquares, ccPortalSumStatsShortAvgMuSignal, ccWlanRxOctetsAt2Mb, ccPortalChannel, ccPortalCfgRadioDefaultPosChannel, ccWlanQosWMETrafficDestPortStart, ccMuTxRetries02, ccPortalTxOctetsAt11Mb, ccPortalTxRetriesPkts10, ccPortalAssociatedMus, ccPortalSumStatsLongTimestamp, ccWlanAnswerBroadcastEss, ccWlanAuthKerberosKdcPort2, ccPortalSigStatsSnrBest, ccWlanSumStatsShortPktsPerSec100, ccMuTxRetriesOctetsFailed, ccPortalRxPktsAt18Mb, ccMuTxRetriesNone, ccMuTxRetriesOctets10, ccPortalSumStatsLongTxAvgRetries100, ccPortalSigStatsSnrSum, ccMuRxOctetsAt54Mb, ccPortalRxOctetsAt18Mb, ccPortalSystemStatsProbeRespRetries1, ccPortalTxPktsAt1Mb, ccPortalSettingsDtimPrd3, ccWlanTxRetriesPkts04, ccPortalSigStatsNoiseSumSquares, ccPortalTxOctetsAt18Mb, ccPortalIndex, ccWlanTxRetriesPkts06, ccWlanSumStatsLongPp10kDropped, ccWlanRxOctetsAt11Mb, ccPortalMeshAvailableBaseMac, ccMuSigStatsNumPkts, ccPortalSumStatsLongPktsPerSecRx100, ccPortalTxRetriesOctets13, ccMuTxPktsUcast, ccMuTxOctetsAt5pt5Mb, ccPortalTxPktsAt12Mb, ccMuRxRssiSumSquares, ccPortalSettingsDtimPrd2, ccMuSumStatsShortAvgMuNoise, ccWlanRxOctetsAt36Mb, ccMuTxOctetsAt11Mb, ccPortalSystemStatsBeaconsTx, ccPortalSigStatsSignalBest, ccMuTxPktsAt54Mb, ccMuTxOctetsAt22Mb, ccWanVpnEntry, ccPortalTxOctetsAt1Mb, ccWlanCryptoWpaKeyRotationInterval, ccPortalCfgRadioPosPowerLevel, ccWlanRxPktsAt24Mb, ccMuRxOctetsAt12Mb, ccWlanSigStatsSignalSum, ccWlanTxRetriesPkts05, ccMuSigStatsNoiseBest, ccWlanQosWMETrafficDestIp, ccWlanSumStatsLongAvgMuSnr, ccPortalLocation, ccMuTxPktsAt12Mb, ccPortalSumStatsShortTimestamp, ccWlanTxRetriesPkts10, ccPortalOptions, ccPortalTxOctetsAt24Mb, ccWlanTxRetriesPkts07, ccMuTxRetries10, ccWlanSumStatsLongThroughput, ccMuRxOctetsAt48Mb, ccPortalSettingsDefaultBGMode, ccWlanSumStatsLongSkip1, ccWlanCryptoWepKey4, ccPortalSystemStatsProbeReqRx, ccWlanCryptoWpaKeyToUse, ccWlanRxPktsAt18Mb, ccWlanAuthKerberosUsername, ccMuTxOctetsAt2Mb, ccPortalSigStatsSignalSum, ccMuTxRetriesOctets09, ccWlanEnable, ccPortalCfgRadioDesChannel, ccWlanSumStatsShortAvgMuSignal, ccPortalTxOctetsAt6Mb, ccPortalLastMac, ccPortalRadioType, ccWlanSumStatsShortPp10kNUcastPkts, ccPortalTxRetriesOctets12, ccWlanTxPktsAt1Mb, ccWlanTxRetriesPkts09, ccPortalTxRetriesOctets15, ccPortalSettingsRtsThresh, ccMuRxOctetsAt6Mb, ccPortalSettingsDefaultDtimPrd2, ccWlanQosWMEProfileVoiceAifsn, ccWlanSumStatsLongPp10kTxWithRetries, ccPortalSigStatsSignalMostRecent, ccPortalSumStatsShortPktsPerSecRx100, ccPortalRxOctetsAt54Mb, ccPortalRxPktsAt24Mb, ccPortalCfgRadioDefaultDesPowerInMW, ccMuTxOctetsAt48Mb, ccWlanQosMonitorDropped, ccPortalAdoptionIndex, ccPortalSumStatsLongThroughputTx, ccPortalRxOctetsAt11Mb, ccMuTxRetries08, ccWlanAuthEapRadius1Port, ccWlanQosWMEProfileBackgroundAifsn, ccPortalSumStatsLongPp10kRfUtil, ccPortalSumStatsLongNumPkts, ccMuTxRetriesOctetsNone, ccPortalRxPktsAt22Mb, ccWlanEssid, ccPortalTxRetriesOctets08, ccMuRxOctetsAt36Mb, ccWlanRxPktsAt36Mb, ccWlanLastActivity, ccPortalSettingsDefaultDtimPrd4, ccWlanCryptoWepKey2, ccMuSumStatsLongAvgBitSpeed, ccPortalSigStatsNoiseBest, ccWlanQosMonitorSent, ccMuTxRetriesTotal, ccWlanSecBeacon, ccPortalSumStatsShortPktsPerSec100, ccWlanTxOctetsAt5pt5Mb, ccWlanTxRetriesOctets01, ccWlanCryptoKeyguardKey2, ccMuTxOctetsAt24Mb, ccMuSumStatsLongPp10kNUcastPkts, ccPortalRxOctetsAt1Mb, ccMuSigStatsNoiseMostRecent, ccWlanTxOctetsAt54Mb, ccMuSumStatsLongPktsPerSecRx100, ccWlanSumStatsLongTimestamp, ccWlanQosWMEProfileBestEffortECwmin, ccPortalTxPktsAt5pt5Mb, ccPortalSumStatsShortPp10kRxUndecrypt, ccWlanMuAclDefault, ccWlanRxUndecryptablePkts, ccWlanSigStatsSnrWorst, ccWlanTxPktsAt9Mb, ccMuSumStatsShortPp10kRxUndecrypt, ccPortalSystemStatsBeaconsTxOctets, ccWlanTxPktsAt36Mb, ccWlanSumStatsShortAvgMuSnr, ccPortalTxPktsAt9Mb, ccPortalTxRetriesOctets14, ccMuTxPktsAt11Mb, ccMuTxPktsAt24Mb, ccMuSumStatsLongNumPkts, ccMuRxPktsAt48Mb, ccWlanSumStatsLongAvgMuSignal, ccPortalBackgroundNoiseBest, ccPortalCfgRadioChannel, ccMuWlanName, ccMuPortalIndex, ccMuTxRetries15, ccMuRxPktsAt9Mb, ccWlanAuthEapMuTxPeriod, ccWlanMuAclIndex, ccPortalAdoptionRowStatus, ccWlanTxOctetsAt6Mb, ccPortalSumStatsShortThroughputRx, ccWlanQosWMEProfileVoiceECwmin, ccPortalSystemStatsProbeRespRetriesFailed, ccPortalCfgRadioDefaultPosPowerLevel, ccPortalRxPktsAt2Mb, ccPortalRxPktsAt5pt5Mb, ccWlanCryptoKeyguardKey3, ccMuRxOctetsAt24Mb, ccWlanSigStatsSnrSumSquares, ccPortalRxOctetsAt9Mb, ccWlanAuthEapRadius1Server, ccPortalSettingsDefaultPriWlan, ccPortalRxPktsAt48Mb, ccMuSumStatsShortTxAvgRetries100, ccWlanRxOctetsAt22Mb, ccMuRxRssiMostRecent, ccWlanTxOctetsAt24Mb, ccWlanRxPktsAt22Mb, ccWlanAuthKerberosPassword, ccPortalSettingsPriWlan, ccPortalSettingsDefaultAntenna, ccPortalSigStatsSnrSumSquares, ccWlanTxOctetsAt1Mb, ccPortalTxRetriesOctets09, ccPortalAdoptionStartMac, ccMuMac, ccPortalSettingsDtimPrd4, ccWlanTxRetriesOctets02, ccPortalLastReason, ccWlanAuthEapRadius2Port, ccMuTxRetriesOctets02, ccMuSigStatsSignalWorst, ccWlanAuthEapSyslogSeverIp, ccPortalState, ccPortalCfgRadioSet, ccMuSumStatsShortPp10kDropped, ccPortalSumStatsShortPp10kDropped, ccWlanWEPSharedMode, ccMuMeshMode, ccWlanAuthEapRadiusAcctMode, ccPortalSettingsDefaultIndex, ccPortalModeLegacy, ccWlanTxRetriesOctets12, ccPortalIpAddress, ccPortalLastActivity, ccWlanTxRetriesOctetsFailed, ccMuWlanIndex, ccWlanDisallowMuToMu, ccPortalTxPktsAt18Mb, ccWlanMulticastAddr2, ccPortalCfgRadioDefaultDesChannel, ccWlanCryptoWpaTwoKeyRotationInterval, ccPortalRxOctetsUcast, ccPortalSettingsSipRoamedSessCnt, ccPortalTxPktsAt22Mb, ccWlanTxPktsAt54Mb, ccMuRxOctetsAt2Mb, ccWlanRxPktsAt54Mb, ccWlanTxPktsAt6Mb, ccWlanQosWMEWlanProfile, ccMuTxOctetsAt12Mb, ccPortalTxRetriesOctets11, ccMuIsDataReady, ccWlanTxRetriesOctets04, ccMuTxOctetsAt18Mb, ccPortalSystemStatsProbeRespRetries3OrMore, ccWlanCryptoKeyguardKey4, ccWlanQosWMEProfileIndex, ccPortalSettingsDtimPrd, ccPortalSumStatsLongAvgBitSpeed, ccWlanTxRetriesOctets06, ccPortalSumStatsShortAvgMuNoise, ccMuLastActivity, ccPortalSettingsSipInActiveSessCnt, ccPortalRxOctetsAt36Mb, ccWlanRxOctetsAt18Mb, ccPortalCfgRadioRemapChannel, ccPortalAdoptionWlanPointers, ccPortalSumStatsShortPp10kTxWithRetries, ccMuSumStatsShortPktsPerSecRx100, ccWlanSigStatsSnrSum, ccMuSigStatsSignalSum, ccPortalSettingsMeshClientEnable, ccPortalTxOctetsAt9Mb, ccMuSigStatsSignalMostRecent, ccWlanRxPktsAt2Mb, ccWlanTxPktsAt5pt5Mb, ccWlanSigStatsSignalSumSquares, ccWlanSumStatsLongNumPkts, ccMuRxPktsAt11Mb, ccPortalTxRetriesPktsFailed, ccMuEncryptionMethod, ccWlanSigStatsNoiseWorst, ccWlanSumStatsShortNumPkts, ccPortalSigStatsNoiseWorst, ccMuSumStatsShortAvgBitSpeed, ccMuTxPktsAt1Mb, ccWlanCryptoWpaTwoAllowTkipClient, ccMuTxRetries12, ccWlanAuthEapRadius2SharedSecret, ccMuLastReason, ccWlanCryptoWepPassKey, ccWlanQosWMETrafficDestPortEnd, ccPortalSumStatsLongPp10kNUcastPkts, ccWlanSumStatsLongAvgBitSpeed, ccPortalSumStatsLongAvgMuSnr, ccPortalSumStatsShortTxAvgRetries100, ccWlanTxPktsAt18Mb, ccPortalMeshPreferredBaseMac, ccWlanAuthentication, ccPortalSettingsSecBeacon, ccMuPowerMode, ccMuSigStatsSnrBest, ccWlanTxRetriesPktsNone, ccWlanAuthKerberosKdcServerIp2, ccWlanTxRetriesOctets07, ccWlanAuthEapRadiusAcctMuTimeout, ccWlanSigStatsNoiseBest, ccPortalTxRetriesPkts15, ccWlanSumStatsShortTotalMus, ccMuTxPktsAt6Mb, ccWlanTxOctetsAt36Mb, ccWlanSumStatsLongPktsPerSecRx100, ccWlanRxOctetsAt54Mb, ccPortalSigStatsSnrWorst, ccMuTxRetries03, ccMuRxOctetsNUcast, ccWlanAuthKerberosKdcPortR, ccPortalSumStatsShortPktsPerSecTx100, ccWlanSigStatsSnrBest, ccPortalSettingsDefaultSecBeacon, ccPortalTxRetriesPktsNone, ccMuRxPktsNUcast, ccWlanTxRetriesPkts02, ccWlanQosWMEProfileBestEffortTxopsTime, ccWlanTxRetriesPkts11, ccMuTxRetriesOctets08, ccWlanTxRetriesOctets15, ccWlanSumStatsShortThroughput, ccWlanTxPktsAt2Mb, ccPortalTxRetriesPkts05, ccPortalTxRetriesPkts07, ccPortalSettingsDefaultRtsThresh, ccWlanTxRetriesOctets03, ccMuSigStatsSignalBest, ccWlanQosWMETrafficDestMask, ccPortalNumberOfEss, ccMuSumStatsShortThroughputTx, ccWlanTxRetriesPkts03, ccPortalSumStatsLongAvgMuNoise, ccPortalName, ccMuSumStatsLongPp10kDropped, ccWlanSumStatsLongThroughputTx, ccPortalSettingsMeshBaseChannel, ccPortalRxOctetsAt24Mb, ccWlanQosWMETrafficSrcMask, ccMuSumStatsLongThroughput, ccPortalTxOctetsAt12Mb, ccMuTxRetriesOctets06, ccMuTxRetries09, ccWlanSumStatsLongThroughputRx, ccPortalTxOctetsAt36Mb, ccWlanCryptoKeyguardKey1, ccMuRxRssiSum, ccPortalCfgRadioDefaultChannelMode = mibBuilder.importSymbols("SYMBOL-CC-WS2000-MIB", "ccWlanCryptoWepKey3", "ccPortalRxPktsAt1Mb", "ccMuSumStatsLongThroughputRx", "ccPortalSettingsBasicRates", "ccPortalTxOctetsUcast", "ccWlanCryptoKeyguardKeyToUse", "ccMuSumStatsShortAvgMuSnr", "ccWlanTxOctetsAt11Mb", "ccWlanAuthEapReauthenticationPeriod", "ccPortalSigStatsNumPkts", "ccMuTxOctetsAt1Mb", "ccWlanSumStatsShortAvgBitSpeed", "ccWlanQosWMETrafficSrcPortEnd", "ccPortalSystemStatsProbeRespRetries2", "ccMuSumStatsShortNumPkts", "ccWlanMuAclRowStatus", "ccPortalTxOctetsAt22Mb", "ccPortalMeshAvailableBaseChannel", "ccPortalTxOctetsAt54Mb", "ccMuTxRetriesFailed", "ccPortalTxRetriesOctets07", "ccWlanQosWMEProfileVideoECwmin", "ccMuSumStatsLongPktsPerSec100", "ccWlanAuthEapRadius2Server", "ccPortalSumStatsLongPktsPerSecTx100", "ccMuRxPktsAt5pt5Mb", "ccPortalSettingsDefaultBeaconInt", "ccPortalSettingsUniSpread", "ccPortalTxRetriesOctets05", "ccWlanSumStatsShortTimestamp", "ccMuRxOctetsUcast", "ccPortalRxPktsAt12Mb", "ccWlanRxPktsAt1Mb", "ccMuSumStatsShortTimestamp", "ccMuRxRssiNumPkts", "ccWlanBwShareMode", "ccWlanTxRetriesOctets10", "ccWlanAuthEapServerMaxRetries", "ccWlanQosWMEProfileName", "ccPortalRxUndecryptablePkts", "ccMuSigStatsNoiseSum", "ccMuRxPktsAt36Mb", "ccPortalSumStatsShortPp10kNUcastPkts", "ccPortalRxPktsAt6Mb", "ccMuSigStatsNoiseSumSquares", "ccPortalCfgRadioPowerInMW", "ccPortalSettingsName", "ccWlanTxRetriesOctets11", "ccMuType", "ccPortalRxPktsAt11Mb", "ccMuTxRetriesMostRecent", "ccWlanTxPktsUcast", "ccWlanTxRetriesOctetsNone", "ccPortalRxOctetsAt48Mb", "ccPortalPointersToWlans", "ccPortalSumStatsLongTotalMus", "ccMuTxPktsAt36Mb", "ccMuRxOctetsAt11Mb", "ccMuTxOctetsAt36Mb", "ccWlanQosWMETrafficRowStatus", "ccPortalSettingsMeshAutoBaseSelection", "ccPortalSettingsDefaultSupportedRates", "ccWlanAuthEapMuQuietPeriod", "ccWlanCryptoWepKeyToUse", "ccPortalBackgroundNoiseWorst", "ccWlanRxOctetsNUcast", "ccWlanAuthEapMuMaxRetries", "ccWlanTxPktsAt11Mb", "ccWlanSumStatsLongPktsPerSec100", "ccWlanRxOctetsAt6Mb", "ccWlanWeight", "ccMuRadioType", "ccMuTxRetriesOctets12", "ccMuSumStatsLongAvgMuNoise", "ccWlanThresholdRate", "ccWlanRxOctetsAt1Mb", "ccMuTxRetries05", "ccWlanTxPktsAt48Mb", "ccWlanSumStatsShortPktsPerSecRx100", "ccWlanSumStatsShortThroughputRx", "ccMuLastPortal", "ccMuRxPktsAt12Mb", "ccWlanCryptoWpaTwoKey", "cc802dt1xPortAuthLogin", "ccPortalSigStatsNoiseMostRecent", "ccPortalSumStatsLongPktsPerSec100", "ccPortalSystemStatsProbeReqRxOctets", "ccPortalCfgRadioPosChannel", "ccPortalSystemStatsProbeRespRetriesNone", "ccPortalCfgRadioDefaultChannel", "ccPortalRxOctetsAt6Mb", "ccWlanQosWMEProfileBackgroundECwmax", "ccMuRxPktsUcast", "ccWlanVlanId", "ccWlanQosWMETrafficSrcIp", "ccWlanTxOctetsUcast", "ccPortalTxRetriesOctets02", "ccMuTxPktsAt18Mb", "ccPortalSumStatsShortNumPkts", "ccPortalTxRetriesPkts01", "ccWlanTxOctetsAt12Mb", "ccMuTxRetries13", "ccPortalMeshPreferredBaseRowStatus", "ccMuLastMac", "ccPortalCfgRadioDefaultReset", "ccPortalSettingsMeshMaxClients", "ccWlanQosWMETrafficAccessCategory", "ccPortalMac", "ccWlanSigStatsSignalWorst", "ccMuRxPktsAt24Mb", "ccMuSigStatsSnrMostRecent", "ccWlanQosWMEProfileVoiceECwmax", "ccWlanRxOctetsAt12Mb", "ccPortalTxPktsAt2Mb", "ccMuSumStatsLongTimestamp", "ccMuRxOctetsAt1Mb", "ccPortalCfgRadioDesPowerLevel", "ccWlanRxOctetsAt24Mb", "ccPortalSettingsDefaultBasicRates", "ccWlanCryptoWpaKey", "ccPortalNumberOfBss", "ccPortalCfgRadioDefaultDesPowerLevel", "ccWlanAuthEapReauthenticationMaxRetries", "ccMuSumStatsShortAvgMuSignal", "ccWlanSumStatsLongTxAvgRetries100", "ccPortalSigStatsSnrMostRecent", "ccSubnetEntry", "ccWlanQosWMEProfileVideoAifsn", "ccMuRxPktsAt22Mb", "cc802dt1xPortAuthSetAp300", "ccPortalTxRetriesOctets01", "ccMuRxPktsAt18Mb", "ccMuSumStatsShortThroughput", "ccWlanSigStatsNoiseSumSquares", "ccWlanTxRetriesPkts12", "ccMuSupportedRates", "ccPortalCfgRadioPowerLevel", "ccMuSigStatsSnrSum", "ccWlanVoicePrioritization", "ccPortalSumStatsLongAvgMuSignal", "ccPortalSettingsSipAllowedSessCnt", "ccPortalTxRetriesOctets04", "ccPortalRxPktsUcast", "ccWlanRxPktsAt9Mb", "ccWlanSumStatsShortPp10kDropped", "ccMuRxPktsAt6Mb", "ccMuTxRetries14", "ccMuRxPktsAt1Mb", "ccMuTxOctetsAt9Mb", "ccPortalCfgRadioPlacement", "ccMuIpAddr", "ccWlanAuthKerberosKdcServerIp1", "ccWlanQosWMEProfileBestEffortECwmax", "ccPortalSumStatsShortThroughputTx", "ccWlanSigStatsNumPkts", "ccPortalSettingsMeshBaseEnable", "ccWlanCryptoWpaTwoBcastKeyRotation", "ccPortalTxRetriesOctets03", "ccPortalSumStatsLongThroughputRx", "ccPortalSumStatsLongPp10kTxWithRetries", "ccPortalRxOctetsAt22Mb", "ccPortalSumStatsLongPp10kTxMaxRetries", "ccWlanAuthEapRadius1SharedSecret", "ccMuTxPktsAt9Mb", "ccPortalCfgRadioDesPlacement", "ccMuSumStatsLongAvgMuSnr", "ccMuSumStatsLongPktsPerSecTx100", "ccWlanSumStatsLongPp10kNUcastPkts", "ccWlanAuthKerberosRealmName", "ccWlanRxOctetsAt9Mb", "ccMuTxRetries11", "ccWlanCryptoWepKey1", "ccWlanSigStatsNoiseSum", "ccPortalTxRetriesPkts13", "ccPortalTxRetriesPkts03", "ccPortalCfgRadioDefaultPowerInMW", "ccWlanQosWMEPriorityConversion", "ccWlanIndex", "ccWlanRxPktsAt48Mb", "ccMuTxRetriesOctets13", "ccMuTxRetriesOctets14", "ccMuSigStatsNoiseWorst", "ccPortalTxRetriesOctets10", "ccMuTxPktsAt22Mb", "ccMuAuthenticationMethod", "ccPortalLegacyMode", "ccPortalRxOctetsAt12Mb", "ccMuVlanId", "ccPortalCfgRadioDesPowerInMW", "ccPortalTxPktsAt24Mb", "ccPortalSettingsDefaultDtimPrd3", "ccMuRxOctetsAt18Mb", "ccPortalSettingsSipActiveSessCnt", "ccWlanSumStatsShortThroughputTx", "ccPortalSettingsDefaultShortPreamble", "ccPortalTxPktsAt54Mb", "ccWlanRxPktsAt12Mb", "ccMuTxPktsAt48Mb", "ccMuSumStatsShortPp10kNUcastPkts", "ccPortalMeshAvailableBaseRssi", "ccWlanTxRetriesPkts13", "ccWlanAuthEapSyslogMode", "ccWlanTxOctetsAt22Mb", "ccPortalCfgRadioDefaultPlacement", "ccWlanTxRetriesOctets09", "ccWlanQosWMEProfileBackgroundTxopsTime", "ccPortalAdoptionEndMac", "ccWlanTxRetriesPkts08", "ccWlanQosWMEProfileBestEffortAifsn", "ccPortalSettingsDetector", "ccPortalSettingsAntenna", "ccMuPortalMac", "ccMuSumStatsLongPp10kTxWithRetries", "ccWlanAuthEapReauthenticationEnable", "ccWlanAuthEapRadiusAcctMuRetries", "ccWlanAuthKerberosKdcServerIpR", "ccPortalTxRetriesOctetsFailed", "ccPortalSettingsAdoptedWlan", "ccMuTxRetries07", "ccWlanTxRetriesPkts14", "ccWlanSumStatsLongAvgMuNoise", "ccMuTxRetries01", "ccMuSumStatsShortPktsPerSec100", "ccPortalSettingsLocation", "ccPortalRxOctetsAt2Mb", "ccWlanRxPktsAt5pt5Mb", "ccWlanCryptoWpaBcastKeyRotation", "ccWlanTxRetriesOctets14", "ccPortalSumStatsLongPp10kRxUndecrypt", "ccPortalTxRetriesOctetsNone", "ccPortalTxRetriesPkts06", "ccWlanCryptoWpaTwoPassphrase", "ccWlanTxRetriesOctets08", "ccMuTxRetries06", "ccWlanMuAclStartingMac", "ccWlanQosWMEProfileVideoECwmax", "ccWlanTxPktsAt24Mb", "ccPortalRadioRemapChannel", "ccMuTxRetriesOctets04", "ccPortalSumStatsShortThroughput", "ccMuTxOctetsAt54Mb", "ccPortalSumStatsLongPp10kDropped", "ccMuSigStatsSnrSumSquares", "ccMuRxOctetsAt5pt5Mb", "ccWlanTxOctetsAt48Mb", "ccWlanRxPktsUcast", "ccMuSumStatsLongTxAvgRetries100", "ccWlanTxRetriesPkts01", "ccWlanTxRetriesPktsFailed", "ccPortalSettingsRevertAp", "ccPortalRxPktsAt36Mb", "ccPortalCfgRadioDefaultDesPlacement", "ccMuRxUndecryptablePkts", "ccWlanTxPktsAt12Mb", "ccPortalLastAdoption", "ccPortalSumStatsShortTotalMus", "ccMuSumStatsShortPktsPerSecTx100", "ccWlanQosWMETrafficIndex", "ccMuTxRetriesOctets15", "ccWlanTxOctetsAt2Mb", "ccWlanSumStatsShortTxAvgRetries100", "ccPortalTxRetriesPkts14", "ccPortalSumStatsShortAvgMuSnr", "ccPortalSumStatsShortPp10kRfUtil", "ccWlanSumStatsShortSkip1", "ccPortalTxRetriesOctets06", "ccPortalTxPktsAt36Mb", "ccMuTxPktsAt2Mb", "ccWlanCryptoUseWpa2", "ccWlanAuthEapServerTimeout", "ccPortalTxRetriesPkts12", "ccWlanSumStatsShortPp10kTxWithRetries", "ccWlanMuInactivityTimeout", "ccMuSumStatsShortThroughputRx", "ccWlanRxOctetsAt5pt5Mb", "ccPortalTxPktsAt6Mb", "ccMuTxRetriesOctets01", "ccMuSumStatsLongPp10kRxUndecrypt", "ccWlanTxOctetsAt9Mb", "ccWlanQosWMEProfileRowStatus", "ccWlanCryptoWpaPassphrase", "ccPortalPointerToAp", "ccWlanName", "ccWlanTxRetriesOctets05", "ccWlanSubnet", "ccPortalCfgRadioDefaultPowerLevel", "ccWlanTxPktsAt22Mb", "ccPortalTxOctetsAt48Mb", "ccWlanRxOctetsUcast", "ccWlanEncryption", "ccPortalTxRetriesPkts02", "ccWlanQosWMEProfileVoiceTxopsTime", "ccWlanQosWMETrafficSrcPortStart", "ccWlanCryptoWpaTwoFastRoamPreAuth", "ccPortalSIPCacMode", "ccWlanRxPktsAt6Mb", "ccPortalRxPktsAt54Mb", "ccMuTxRetriesOctets03", "ccPortalTxOctetsAt2Mb", "ccPortalSettingsDefaultDtimPrd", "ccPortalSystemStatsProbeRespTxOctets", "ccMuTxOctetsAt6Mb", "ccWlanAuthKerberosKdcPort1", "ccMuSigStatsSignalSumSquares", "ccPortalCfgRadioChannelMode", "ccPortalSumStatsLongThroughput", "ccWlanSigStatsSignalBest", "ccMuTxRetries04", "ccMuSigStatsSnrWorst", "ccPortalTxRetriesPkts11", "ccPortalTxRetriesPkts04", "ccPortalTxPktsAt11Mb", "ccWlanQosWMEProfileVideoTxopsTime", "ccPortalBackgroundNoiseNumSamples", "ccMuRxPktsAt2Mb", "ccPortalSettingsBGMode", "ccMuRxPktsAt54Mb", "ccMuSumStatsLongAvgMuSignal", "ccWlanMuAclEndingMac", "ccPortalSumStatsShortAvgBitSpeed", "ccMuTxPktsAt5pt5Mb", "ccMuTxRetriesOctets11", "ccPortalCfgRadioDefaultSet", "ccWlanPortalsAdopted", "cc802dt1xPortAuthPass", "ccPortalRxOctetsNUcast", "ccWlanSumStatsShortAvgMuNoise", "ccWlanSumStatsLongTotalMus", "ccMuTxRetriesOctets05", "ccMuTxRetriesOctets07", "ccPortalSettingsShortPreamble", "ccMuRxOctetsAt9Mb", "ccWlanTxRetriesOctets13", "ccWlanAuthEapMuTimeout", "ccPortalRxOctetsAt5pt5Mb", "ccWlanSumStatsShortPp10kRxUndecrypt", "ccPortalSigStatsSignalWorst", "ccMuSumStatsLongThroughputTx", "ccPortalBackgroundNoiseSum", "ccWlanMuAclName", "ccPortalTxOctetsAt5pt5Mb", "ccWlanMulticastAddr1", "ccPortalSumStatsShortPp10kTxMaxRetries", "ccWlanCryptoKeyguardPasskey", "ccWlanRxOctetsAt48Mb", "ccPortalSettingsBeaconInt", "ccWlanQosWMEProfileBackgroundECwmin", "ccPortalTxPktsAt48Mb", "ccMuRxOctetsAt22Mb", "ccWlanRxPktsAt11Mb", "ccWlanTxRetriesPkts15", "ccPortalSigStatsNoiseSum", "ccPortalTxRetriesPkts08", "ccWlanTxOctetsAt18Mb", "ccMuTxOctetsUcast", "ccPortalSettingsDefaultUniSpread", "ccWlanCryptoWpaTwoFastRoamKeyCache", "ccPortalBackgroundNoiseSumSquares", "ccPortalSettingsMeshClientWlanIndex", "ccMuSymbolRogueApEna", "ccPortalTxRetriesPkts09", "ccPortalCfgRadioReset", "ccWlanCryptoWpaTwoKeyToUse", "ccPortalSettingsSupportedRates", "ccPortalTxPktsUcast", "ccWlanRxPktsNUcast", "ccPortalTxPowerLevel", "ccPortalSettingsWMEProfile", "ccPortalRxPktsAt9Mb", "ccWlanSumStatsShortPktsPerSecTx100", "ccMuSumStatsShortPp10kTxWithRetries", "ccWlanSumStatsLongPktsPerSecTx100", "ccWlanSumStatsLongPp10kRxUndecrypt", "ccPortalRxPktsNUcast", "ccPortalSigStatsSignalSumSquares", "ccPortalSumStatsShortAvgMuSignal", "ccWlanRxOctetsAt2Mb", "ccPortalChannel", "ccPortalCfgRadioDefaultPosChannel", "ccWlanQosWMETrafficDestPortStart", "ccMuTxRetries02", "ccPortalTxOctetsAt11Mb", "ccPortalTxRetriesPkts10", "ccPortalAssociatedMus", "ccPortalSumStatsLongTimestamp", "ccWlanAnswerBroadcastEss", "ccWlanAuthKerberosKdcPort2", "ccPortalSigStatsSnrBest", "ccWlanSumStatsShortPktsPerSec100", "ccMuTxRetriesOctetsFailed", "ccPortalRxPktsAt18Mb", "ccMuTxRetriesNone", "ccMuTxRetriesOctets10", "ccPortalSumStatsLongTxAvgRetries100", "ccPortalSigStatsSnrSum", "ccMuRxOctetsAt54Mb", "ccPortalRxOctetsAt18Mb", "ccPortalSystemStatsProbeRespRetries1", "ccPortalTxPktsAt1Mb", "ccPortalSettingsDtimPrd3", "ccWlanTxRetriesPkts04", "ccPortalSigStatsNoiseSumSquares", "ccPortalTxOctetsAt18Mb", "ccPortalIndex", "ccWlanTxRetriesPkts06", "ccWlanSumStatsLongPp10kDropped", "ccWlanRxOctetsAt11Mb", "ccPortalMeshAvailableBaseMac", "ccMuSigStatsNumPkts", "ccPortalSumStatsLongPktsPerSecRx100", "ccPortalTxRetriesOctets13", "ccMuTxPktsUcast", "ccMuTxOctetsAt5pt5Mb", "ccPortalTxPktsAt12Mb", "ccMuRxRssiSumSquares", "ccPortalSettingsDtimPrd2", "ccMuSumStatsShortAvgMuNoise", "ccWlanRxOctetsAt36Mb", "ccMuTxOctetsAt11Mb", "ccPortalSystemStatsBeaconsTx", "ccPortalSigStatsSignalBest", "ccMuTxPktsAt54Mb", "ccMuTxOctetsAt22Mb", "ccWanVpnEntry", "ccPortalTxOctetsAt1Mb", "ccWlanCryptoWpaKeyRotationInterval", "ccPortalCfgRadioPosPowerLevel", "ccWlanRxPktsAt24Mb", "ccMuRxOctetsAt12Mb", "ccWlanSigStatsSignalSum", "ccWlanTxRetriesPkts05", "ccMuSigStatsNoiseBest", "ccWlanQosWMETrafficDestIp", "ccWlanSumStatsLongAvgMuSnr", "ccPortalLocation", "ccMuTxPktsAt12Mb", "ccPortalSumStatsShortTimestamp", "ccWlanTxRetriesPkts10", "ccPortalOptions", "ccPortalTxOctetsAt24Mb", "ccWlanTxRetriesPkts07", "ccMuTxRetries10", "ccWlanSumStatsLongThroughput", "ccMuRxOctetsAt48Mb", "ccPortalSettingsDefaultBGMode", "ccWlanSumStatsLongSkip1", "ccWlanCryptoWepKey4", "ccPortalSystemStatsProbeReqRx", "ccWlanCryptoWpaKeyToUse", "ccWlanRxPktsAt18Mb", "ccWlanAuthKerberosUsername", "ccMuTxOctetsAt2Mb", "ccPortalSigStatsSignalSum", "ccMuTxRetriesOctets09", "ccWlanEnable", "ccPortalCfgRadioDesChannel", "ccWlanSumStatsShortAvgMuSignal", "ccPortalTxOctetsAt6Mb", "ccPortalLastMac", "ccPortalRadioType", "ccWlanSumStatsShortPp10kNUcastPkts", "ccPortalTxRetriesOctets12", "ccWlanTxPktsAt1Mb", "ccWlanTxRetriesPkts09", "ccPortalTxRetriesOctets15", "ccPortalSettingsRtsThresh", "ccMuRxOctetsAt6Mb", "ccPortalSettingsDefaultDtimPrd2", "ccWlanQosWMEProfileVoiceAifsn", "ccWlanSumStatsLongPp10kTxWithRetries", "ccPortalSigStatsSignalMostRecent", "ccPortalSumStatsShortPktsPerSecRx100", "ccPortalRxOctetsAt54Mb", "ccPortalRxPktsAt24Mb", "ccPortalCfgRadioDefaultDesPowerInMW", "ccMuTxOctetsAt48Mb", "ccWlanQosMonitorDropped", "ccPortalAdoptionIndex", "ccPortalSumStatsLongThroughputTx", "ccPortalRxOctetsAt11Mb", "ccMuTxRetries08", "ccWlanAuthEapRadius1Port", "ccWlanQosWMEProfileBackgroundAifsn", "ccPortalSumStatsLongPp10kRfUtil", "ccPortalSumStatsLongNumPkts", "ccMuTxRetriesOctetsNone", "ccPortalRxPktsAt22Mb", "ccWlanEssid", "ccPortalTxRetriesOctets08", "ccMuRxOctetsAt36Mb", "ccWlanRxPktsAt36Mb", "ccWlanLastActivity", "ccPortalSettingsDefaultDtimPrd4", "ccWlanCryptoWepKey2", "ccMuSumStatsLongAvgBitSpeed", "ccPortalSigStatsNoiseBest", "ccWlanQosMonitorSent", "ccMuTxRetriesTotal", "ccWlanSecBeacon", "ccPortalSumStatsShortPktsPerSec100", "ccWlanTxOctetsAt5pt5Mb", "ccWlanTxRetriesOctets01", "ccWlanCryptoKeyguardKey2", "ccMuTxOctetsAt24Mb", "ccMuSumStatsLongPp10kNUcastPkts", "ccPortalRxOctetsAt1Mb", "ccMuSigStatsNoiseMostRecent", "ccWlanTxOctetsAt54Mb", "ccMuSumStatsLongPktsPerSecRx100", "ccWlanSumStatsLongTimestamp", "ccWlanQosWMEProfileBestEffortECwmin", "ccPortalTxPktsAt5pt5Mb", "ccPortalSumStatsShortPp10kRxUndecrypt", "ccWlanMuAclDefault", "ccWlanRxUndecryptablePkts", "ccWlanSigStatsSnrWorst", "ccWlanTxPktsAt9Mb", "ccMuSumStatsShortPp10kRxUndecrypt", "ccPortalSystemStatsBeaconsTxOctets", "ccWlanTxPktsAt36Mb", "ccWlanSumStatsShortAvgMuSnr", "ccPortalTxPktsAt9Mb", "ccPortalTxRetriesOctets14", "ccMuTxPktsAt11Mb", "ccMuTxPktsAt24Mb", "ccMuSumStatsLongNumPkts", "ccMuRxPktsAt48Mb", "ccWlanSumStatsLongAvgMuSignal", "ccPortalBackgroundNoiseBest", "ccPortalCfgRadioChannel", "ccMuWlanName", "ccMuPortalIndex", "ccMuTxRetries15", "ccMuRxPktsAt9Mb", "ccWlanAuthEapMuTxPeriod", "ccWlanMuAclIndex", "ccPortalAdoptionRowStatus", "ccWlanTxOctetsAt6Mb", "ccPortalSumStatsShortThroughputRx", "ccWlanQosWMEProfileVoiceECwmin", "ccPortalSystemStatsProbeRespRetriesFailed", "ccPortalCfgRadioDefaultPosPowerLevel", "ccPortalRxPktsAt2Mb", "ccPortalRxPktsAt5pt5Mb", "ccWlanCryptoKeyguardKey3", "ccMuRxOctetsAt24Mb", "ccWlanSigStatsSnrSumSquares", "ccPortalRxOctetsAt9Mb", "ccWlanAuthEapRadius1Server", "ccPortalSettingsDefaultPriWlan", "ccPortalRxPktsAt48Mb", "ccMuSumStatsShortTxAvgRetries100", "ccWlanRxOctetsAt22Mb", "ccMuRxRssiMostRecent", "ccWlanTxOctetsAt24Mb", "ccWlanRxPktsAt22Mb", "ccWlanAuthKerberosPassword", "ccPortalSettingsPriWlan", "ccPortalSettingsDefaultAntenna", "ccPortalSigStatsSnrSumSquares", "ccWlanTxOctetsAt1Mb", "ccPortalTxRetriesOctets09", "ccPortalAdoptionStartMac", "ccMuMac", "ccPortalSettingsDtimPrd4", "ccWlanTxRetriesOctets02", "ccPortalLastReason", "ccWlanAuthEapRadius2Port", "ccMuTxRetriesOctets02", "ccMuSigStatsSignalWorst", "ccWlanAuthEapSyslogSeverIp", "ccPortalState", "ccPortalCfgRadioSet", "ccMuSumStatsShortPp10kDropped", "ccPortalSumStatsShortPp10kDropped", "ccWlanWEPSharedMode", "ccMuMeshMode", "ccWlanAuthEapRadiusAcctMode", "ccPortalSettingsDefaultIndex", "ccPortalModeLegacy", "ccWlanTxRetriesOctets12", "ccPortalIpAddress", "ccPortalLastActivity", "ccWlanTxRetriesOctetsFailed", "ccMuWlanIndex", "ccWlanDisallowMuToMu", "ccPortalTxPktsAt18Mb", "ccWlanMulticastAddr2", "ccPortalCfgRadioDefaultDesChannel", "ccWlanCryptoWpaTwoKeyRotationInterval", "ccPortalRxOctetsUcast", "ccPortalSettingsSipRoamedSessCnt", "ccPortalTxPktsAt22Mb", "ccWlanTxPktsAt54Mb", "ccMuRxOctetsAt2Mb", "ccWlanRxPktsAt54Mb", "ccWlanTxPktsAt6Mb", "ccWlanQosWMEWlanProfile", "ccMuTxOctetsAt12Mb", "ccPortalTxRetriesOctets11", "ccMuIsDataReady", "ccWlanTxRetriesOctets04", "ccMuTxOctetsAt18Mb", "ccPortalSystemStatsProbeRespRetries3OrMore", "ccWlanCryptoKeyguardKey4", "ccWlanQosWMEProfileIndex", "ccPortalSettingsDtimPrd", "ccPortalSumStatsLongAvgBitSpeed", "ccWlanTxRetriesOctets06", "ccPortalSumStatsShortAvgMuNoise", "ccMuLastActivity", "ccPortalSettingsSipInActiveSessCnt", "ccPortalRxOctetsAt36Mb", "ccWlanRxOctetsAt18Mb", "ccPortalCfgRadioRemapChannel", "ccPortalAdoptionWlanPointers", "ccPortalSumStatsShortPp10kTxWithRetries", "ccMuSumStatsShortPktsPerSecRx100", "ccWlanSigStatsSnrSum", "ccMuSigStatsSignalSum", "ccPortalSettingsMeshClientEnable", "ccPortalTxOctetsAt9Mb", "ccMuSigStatsSignalMostRecent", "ccWlanRxPktsAt2Mb", "ccWlanTxPktsAt5pt5Mb", "ccWlanSigStatsSignalSumSquares", "ccWlanSumStatsLongNumPkts", "ccMuRxPktsAt11Mb", "ccPortalTxRetriesPktsFailed", "ccMuEncryptionMethod", "ccWlanSigStatsNoiseWorst", "ccWlanSumStatsShortNumPkts", "ccPortalSigStatsNoiseWorst", "ccMuSumStatsShortAvgBitSpeed", "ccMuTxPktsAt1Mb", "ccWlanCryptoWpaTwoAllowTkipClient", "ccMuTxRetries12", "ccWlanAuthEapRadius2SharedSecret", "ccMuLastReason", "ccWlanCryptoWepPassKey", "ccWlanQosWMETrafficDestPortEnd", "ccPortalSumStatsLongPp10kNUcastPkts", "ccWlanSumStatsLongAvgBitSpeed", "ccPortalSumStatsLongAvgMuSnr", "ccPortalSumStatsShortTxAvgRetries100", "ccWlanTxPktsAt18Mb", "ccPortalMeshPreferredBaseMac", "ccWlanAuthentication", "ccPortalSettingsSecBeacon", "ccMuPowerMode", "ccMuSigStatsSnrBest", "ccWlanTxRetriesPktsNone", "ccWlanAuthKerberosKdcServerIp2", "ccWlanTxRetriesOctets07", "ccWlanAuthEapRadiusAcctMuTimeout", "ccWlanSigStatsNoiseBest", "ccPortalTxRetriesPkts15", "ccWlanSumStatsShortTotalMus", "ccMuTxPktsAt6Mb", "ccWlanTxOctetsAt36Mb", "ccWlanSumStatsLongPktsPerSecRx100", "ccWlanRxOctetsAt54Mb", "ccPortalSigStatsSnrWorst", "ccMuTxRetries03", "ccMuRxOctetsNUcast", "ccWlanAuthKerberosKdcPortR", "ccPortalSumStatsShortPktsPerSecTx100", "ccWlanSigStatsSnrBest", "ccPortalSettingsDefaultSecBeacon", "ccPortalTxRetriesPktsNone", "ccMuRxPktsNUcast", "ccWlanTxRetriesPkts02", "ccWlanQosWMEProfileBestEffortTxopsTime", "ccWlanTxRetriesPkts11", "ccMuTxRetriesOctets08", "ccWlanTxRetriesOctets15", "ccWlanSumStatsShortThroughput", "ccWlanTxPktsAt2Mb", "ccPortalTxRetriesPkts05", "ccPortalTxRetriesPkts07", "ccPortalSettingsDefaultRtsThresh", "ccWlanTxRetriesOctets03", "ccMuSigStatsSignalBest", "ccWlanQosWMETrafficDestMask", "ccPortalNumberOfEss", "ccMuSumStatsShortThroughputTx", "ccWlanTxRetriesPkts03", "ccPortalSumStatsLongAvgMuNoise", "ccPortalName", "ccMuSumStatsLongPp10kDropped", "ccWlanSumStatsLongThroughputTx", "ccPortalSettingsMeshBaseChannel", "ccPortalRxOctetsAt24Mb", "ccWlanQosWMETrafficSrcMask", "ccMuSumStatsLongThroughput", "ccPortalTxOctetsAt12Mb", "ccMuTxRetriesOctets06", "ccMuTxRetries09", "ccWlanSumStatsLongThroughputRx", "ccPortalTxOctetsAt36Mb", "ccWlanCryptoKeyguardKey1", "ccMuRxRssiSum", "ccPortalCfgRadioDefaultChannelMode")
moduleid = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 11, 3, 1))
moduleid.setRevisions(('2009-12-30 13:36',))
if mibBuilder.loadTexts: moduleid.setLastUpdated('200912301336Z')
if mibBuilder.loadTexts: moduleid.setOrganization('Symbol WSD (Wireless Infrastructure Division, San Jose)')
class SinglePointer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class MultiPointer63(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63))

class MultiPointer255(Bits):
    namedValues = NamedValues(("null", 0), ("referToEntry001", 1), ("referToEntry002", 2), ("referToEntry003", 3), ("referToEntry004", 4), ("referToEntry005", 5), ("referToEntry006", 6), ("referToEntry007", 7), ("referToEntry008", 8), ("referToEntry009", 9), ("referToEntry010", 10), ("referToEntry011", 11), ("referToEntry012", 12), ("referToEntry013", 13), ("referToEntry014", 14), ("referToEntry015", 15), ("referToEntry016", 16), ("referToEntry017", 17), ("referToEntry018", 18), ("referToEntry019", 19), ("referToEntry020", 20), ("referToEntry021", 21), ("referToEntry022", 22), ("referToEntry023", 23), ("referToEntry024", 24), ("referToEntry025", 25), ("referToEntry026", 26), ("referToEntry027", 27), ("referToEntry028", 28), ("referToEntry029", 29), ("referToEntry030", 30), ("referToEntry031", 31), ("referToEntry032", 32), ("referToEntry033", 33), ("referToEntry034", 34), ("referToEntry035", 35), ("referToEntry036", 36), ("referToEntry037", 37), ("referToEntry038", 38), ("referToEntry039", 39), ("referToEntry040", 40), ("referToEntry041", 41), ("referToEntry042", 42), ("referToEntry043", 43), ("referToEntry044", 44), ("referToEntry045", 45), ("referToEntry046", 46), ("referToEntry047", 47), ("referToEntry048", 48), ("referToEntry049", 49), ("referToEntry050", 50), ("referToEntry051", 51), ("referToEntry052", 52), ("referToEntry053", 53), ("referToEntry054", 54), ("referToEntry055", 55), ("referToEntry056", 56), ("referToEntry057", 57), ("referToEntry058", 58), ("referToEntry059", 59), ("referToEntry060", 60), ("referToEntry061", 61), ("referToEntry062", 62), ("referToEntry063", 63), ("referToEntry064", 64), ("referToEntry065", 65), ("referToEntry066", 66), ("referToEntry067", 67), ("referToEntry068", 68), ("referToEntry069", 69), ("referToEntry070", 70), ("referToEntry071", 71), ("referToEntry072", 72), ("referToEntry073", 73), ("referToEntry074", 74), ("referToEntry075", 75), ("referToEntry076", 76), ("referToEntry077", 77), ("referToEntry078", 78), ("referToEntry079", 79), ("referToEntry080", 80), ("referToEntry081", 81), ("referToEntry082", 82), ("referToEntry083", 83), ("referToEntry084", 84), ("referToEntry085", 85), ("referToEntry086", 86), ("referToEntry087", 87), ("referToEntry088", 88), ("referToEntry089", 89), ("referToEntry090", 90), ("referToEntry091", 91), ("referToEntry092", 92), ("referToEntry093", 93), ("referToEntry094", 94), ("referToEntry095", 95), ("referToEntry096", 96), ("referToEntry097", 97), ("referToEntry098", 98), ("referToEntry099", 99), ("referToEntry100", 100), ("referToEntry101", 101), ("referToEntry102", 102), ("referToEntry103", 103), ("referToEntry104", 104), ("referToEntry105", 105), ("referToEntry106", 106), ("referToEntry107", 107), ("referToEntry108", 108), ("referToEntry109", 109), ("referToEntry110", 110), ("referToEntry111", 111), ("referToEntry112", 112), ("referToEntry113", 113), ("referToEntry114", 114), ("referToEntry115", 115), ("referToEntry116", 116), ("referToEntry117", 117), ("referToEntry118", 118), ("referToEntry119", 119), ("referToEntry120", 120), ("referToEntry121", 121), ("referToEntry122", 122), ("referToEntry123", 123), ("referToEntry124", 124), ("referToEntry125", 125), ("referToEntry126", 126), ("referToEntry127", 127), ("referToEntry128", 128), ("referToEntry129", 129), ("referToEntry130", 130), ("referToEntry131", 131), ("referToEntry132", 132), ("referToEntry133", 133), ("referToEntry134", 134), ("referToEntry135", 135), ("referToEntry136", 136), ("referToEntry137", 137), ("referToEntry138", 138), ("referToEntry139", 139), ("referToEntry140", 140), ("referToEntry141", 141), ("referToEntry142", 142), ("referToEntry143", 143), ("referToEntry144", 144), ("referToEntry145", 145), ("referToEntry146", 146), ("referToEntry147", 147), ("referToEntry148", 148), ("referToEntry149", 149), ("referToEntry150", 150), ("referToEntry151", 151), ("referToEntry152", 152), ("referToEntry153", 153), ("referToEntry154", 154), ("referToEntry155", 155), ("referToEntry156", 156), ("referToEntry157", 157), ("referToEntry158", 158), ("referToEntry159", 159), ("referToEntry160", 160), ("referToEntry161", 161), ("referToEntry162", 162), ("referToEntry163", 163), ("referToEntry164", 164), ("referToEntry165", 165), ("referToEntry166", 166), ("referToEntry167", 167), ("referToEntry168", 168), ("referToEntry169", 169), ("referToEntry170", 170), ("referToEntry171", 171), ("referToEntry172", 172), ("referToEntry173", 173), ("referToEntry174", 174), ("referToEntry175", 175), ("referToEntry176", 176), ("referToEntry177", 177), ("referToEntry178", 178), ("referToEntry179", 179), ("referToEntry180", 180), ("referToEntry181", 181), ("referToEntry182", 182), ("referToEntry183", 183), ("referToEntry184", 184), ("referToEntry185", 185), ("referToEntry186", 186), ("referToEntry187", 187), ("referToEntry188", 188), ("referToEntry189", 189), ("referToEntry190", 190), ("referToEntry191", 191), ("referToEntry192", 192), ("referToEntry193", 193), ("referToEntry194", 194), ("referToEntry195", 195), ("referToEntry196", 196), ("referToEntry197", 197), ("referToEntry198", 198), ("referToEntry199", 199), ("referToEntry200", 200), ("referToEntry201", 201), ("referToEntry202", 202), ("referToEntry203", 203), ("referToEntry204", 204), ("referToEntry205", 205), ("referToEntry206", 206), ("referToEntry207", 207), ("referToEntry208", 208), ("referToEntry209", 209), ("referToEntry210", 210), ("referToEntry211", 211), ("referToEntry212", 212), ("referToEntry213", 213), ("referToEntry214", 214), ("referToEntry215", 215), ("referToEntry216", 216), ("referToEntry217", 217), ("referToEntry218", 218), ("referToEntry219", 219), ("referToEntry220", 220), ("referToEntry221", 221), ("referToEntry222", 222), ("referToEntry223", 223), ("referToEntry224", 224), ("referToEntry225", 225), ("referToEntry226", 226), ("referToEntry227", 227), ("referToEntry228", 228), ("referToEntry229", 229), ("referToEntry230", 230), ("referToEntry231", 231), ("referToEntry232", 232), ("referToEntry233", 233), ("referToEntry234", 234), ("referToEntry235", 235), ("referToEntry236", 236), ("referToEntry237", 237), ("referToEntry238", 238), ("referToEntry239", 239), ("referToEntry240", 240), ("referToEntry241", 241), ("referToEntry242", 242), ("referToEntry243", 243), ("referToEntry244", 244), ("referToEntry245", 245), ("referToEntry246", 246), ("referToEntry247", 247), ("referToEntry248", 248), ("referToEntry249", 249), ("referToEntry250", 250), ("referToEntry251", 251), ("referToEntry252", 252), ("referToEntry253", 253), ("referToEntry254", 254)) + NamedValues(("referToEntry255", 255))

class DoActionNow(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class RadioType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("radio802dot11A", 1), ("radio802dot11B", 2), ("radio802dot11G", 3), ("radio802dot11FH", 4))

class Password(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class StaticRowEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PartsPer10k(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class ScaleBy100(Unsigned32):
    pass

class AbbrevRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 6))
    namedValues = NamedValues(("createAndGo", 4), ("destroy", 6))

class DoActionShowProgress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class HexPassword(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TransmitRate(Bits):
    namedValues = NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13))

class AllowedChannels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))
    namedValues = NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9), ("channel10", 10), ("channel11", 11), ("channel12", 12), ("channel13", 13), ("channel14", 14), ("channel36", 36), ("channel40", 40), ("channel44", 44), ("channel48", 48), ("channel52", 52), ("channel56", 56), ("channel60", 60), ("channel64", 64), ("channel100", 100), ("channel104", 104), ("channel108", 108), ("channel112", 112), ("channel116", 116), ("channel120", 120), ("channel124", 124), ("channel128", 128), ("channel132", 132), ("channel136", 136), ("channel140", 140), ("channel149", 149), ("channel153", 153), ("channel157", 157), ("channel161", 161), ("channel165", 165))

class RowStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class DateAndTime(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d-1d-1d,1d:1d:1d.1d,1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class EthernetType(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x '
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

symbol = MibIdentifier((1, 3, 6, 1, 4, 1, 388))
wsd = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11))
sysoids = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 1))
ap5131 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 2))
if mibBuilder.loadTexts: ap5131.setStatus('current')
ap5181 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 3))
if mibBuilder.loadTexts: ap5181.setStatus('current')
ap7131 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 4))
if mibBuilder.loadTexts: ap7131.setStatus('current')
ap7181 = ObjectIdentity((1, 3, 6, 1, 4, 1, 388, 11, 1, 5))
if mibBuilder.loadTexts: ap7181.setStatus('current')
abgAP = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3))
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 3))
dot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1))
dot1xAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dot1xAuthConfigTable.setStatus('current')
dot1xAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigEntry.setStatus('current')
dot1xPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dot1xPaePortNumber.setStatus('current')
dot1xPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("intialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPaeState.setStatus('current')
dot1xAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthState.setStatus('current')
dot1xAuthAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAdminControlledDirections.setStatus('current')
dot1xAuthOperControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthOperControlledDirections.setStatus('current')
dot1xAuthAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortStatus.setStatus('current')
dot1xAuthAuthControlledPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthControlledPortControl.setStatus('current')
dot1xAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setStatus('current')
dot1xAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setStatus('current')
dot1xAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setStatus('current')
dot1xAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setStatus('current')
dot1xAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setStatus('current')
dot1xAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setStatus('current')
dot1xAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setStatus('current')
dot1xAuthKeyTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthKeyTxEnabled.setStatus('current')
dot1xAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2), )
if mibBuilder.loadTexts: dot1xAuthStatsTable.setStatus('current')
dot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthStatsEntry.setStatus('current')
dot1xAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesRx.setStatus('current')
dot1xAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolFramesTx.setStatus('current')
dot1xAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolStartFramesRx.setStatus('current')
dot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolLogoffFramesRx.setStatus('current')
dot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespIdFramesRx.setStatus('current')
dot1xAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolRespFramesRx.setStatus('current')
dot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqIdFramesTx.setStatus('current')
dot1xAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapolReqFramesTx.setStatus('current')
dot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthInvalidEapolFramesRx.setStatus('current')
dot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLengthErrorFramesRx.setStatus('current')
dot1xAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameVersion.setStatus('current')
dot1xAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 2, 1, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthLastEapolFrameSource.setStatus('current')
dot1xAuthDiagTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3), )
if mibBuilder.loadTexts: dot1xAuthDiagTable.setStatus('current')
dot1xAuthDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthDiagEntry.setStatus('current')
dot1xAuthEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersConnecting.setStatus('current')
dot1xAuthEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEapLogoffsWhileConnecting.setStatus('current')
dot1xAuthEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthEntersAuthenticating.setStatus('current')
dot1xAuthAuthSuccessWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthSuccessWhileAuthenticating.setStatus('current')
dot1xAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthTimeoutsWhileAuthenticating.setStatus('current')
dot1xAuthAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthFailWhileAuthenticating.setStatus('current')
dot1xAuthAuthReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticating.setStatus('current')
dot1xAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticating.setStatus('current')
dot1xAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticating.setStatus('current')
dot1xAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthReauthsWhileAuthenticated.setStatus('current')
dot1xAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapStartsWhileAuthenticated.setStatus('current')
dot1xAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthAuthEapLogoffWhileAuthenticated.setStatus('current')
dot1xAuthBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendResponses.setStatus('current')
dot1xAuthBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAccessChallenges.setStatus('current')
dot1xAuthBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendOtherRequestsToSupplicant.setStatus('current')
dot1xAuthBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendNonNakResponsesFromSupplicant.setStatus('current')
dot1xAuthBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthSuccesses.setStatus('current')
dot1xAuthBackendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthBackendAuthFails.setStatus('current')
dot1xAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4), )
if mibBuilder.loadTexts: dot1xAuthSessionStatsTable.setStatus('current')
dot1xAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: dot1xAuthSessionStatsEntry.setStatus('current')
dot1xAuthSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsRx.setStatus('current')
dot1xAuthSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionOctetsTx.setStatus('current')
dot1xAuthSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesRx.setStatus('current')
dot1xAuthSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionFramesTx.setStatus('current')
dot1xAuthSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionId.setStatus('current')
dot1xAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionAuthenticMethod.setStatus('current')
dot1xAuthSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTime.setStatus('current')
dot1xAuthSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionTerminateCause.setStatus('current')
dot1xAuthSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 3, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthSessionUserName.setStatus('current')
apRf = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4))
apRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1))
apRadioSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1), )
if mibBuilder.loadTexts: apRadioSettingsTable.setStatus('current')
apRadioSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioSettingsEntry.setStatus('current')
apRadioSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioSettingsIndex.setStatus('current')
apRadioSettingsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsEnable.setStatus('current')
apRadioSettingsBand = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aRadio", 1), ("bgRadio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBand.setStatus('current')
apRadioSettingsPointersToWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsPointersToWlans.setStatus('current')
apRadioSettingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("radio802dt11a", 1), ("radio802dt11bg", 2), ("radio802dt11n2400MHz", 3), ("radio802dt11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsName.setStatus('current')
apRadioSettingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsMacAddress.setStatus('current')
apRadioSettingsAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDiversity", 1), ("primaryOnly", 2), ("secondaryOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsAntenna.setStatus('current')
apRadioSettingsShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsShortPreamble.setStatus('current')
apRadioSettingsRtsThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsRtsThresh.setStatus('current')
apRadioSettingsBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBeaconInt.setStatus('current')
apRadioSettingsDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsDtimPrd.setStatus('current')
apRadioSettingsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBasicRates.setStatus('current')
apRadioSettingsSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("null", 0), ("rate1Mb", 1), ("rate2Mb", 2), ("rate5pt5Mb", 3), ("rate6Mb", 4), ("rate9Mb", 5), ("rate11Mb", 6), ("rate12Mb", 7), ("rate18Mb", 8), ("rate22Mb", 9), ("rate24Mb", 10), ("rate36Mb", 11), ("rate48Mb", 12), ("rate54Mb", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsSupportedRates.setStatus('current')
apRadioSettingsBGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modeBandG", 1), ("modeG", 2), ("modeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBGMode.setStatus('current')
apRadioSettingsBackgroundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundMode.setStatus('obsolete')
apRadioSettingsBackgroundCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMin.setStatus('current')
apRadioSettingsBackgroundCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundCwMax.setStatus('current')
apRadioSettingsBackgroundAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundAifsn.setStatus('current')
apRadioSettingsBackgroundTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTime.setStatus('current')
apRadioSettingsBackgroundTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsBackgroundTxopsTimeInMS.setStatus('current')
apRadioSettingsBestEffortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortMode.setStatus('obsolete')
apRadioSettingsBestEffortCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMin.setStatus('current')
apRadioSettingsBestEffortCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortCwMax.setStatus('current')
apRadioSettingsBestEffortAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortAifsn.setStatus('current')
apRadioSettingsBestEffortTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTime.setStatus('current')
apRadioSettingsBestEffortTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsBestEffortTxopsTimeInMS.setStatus('current')
apRadioSettingsVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoMode.setStatus('obsolete')
apRadioSettingsVideoCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoCwMin.setStatus('current')
apRadioSettingsVideoCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoCwMax.setStatus('current')
apRadioSettingsVideoAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoAifsn.setStatus('current')
apRadioSettingsVideoTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTime.setStatus('current')
apRadioSettingsVideoTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsVideoTxopsTimeInMS.setStatus('current')
apRadioSettingsVoiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceMode.setStatus('obsolete')
apRadioSettingsVoiceCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMin.setStatus('current')
apRadioSettingsVoiceCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceCwMax.setStatus('current')
apRadioSettingsVoiceAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceAifsn.setStatus('current')
apRadioSettingsVoiceTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTime.setStatus('current')
apRadioSettingsVoiceTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsVoiceTxopsTimeInMS.setStatus('current')
apRadioSettingsE2BMapMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsE2BMapMessage.setStatus('current')
apRadioSettingsERPProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioSettingsERPProtectionStatus.setStatus('current')
apRadioSettingsWMMQosParam = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("manual", 1), ("wifi11agn", 2), ("wifi11b", 3), ("default11agn", 4), ("default11b", 5), ("voice11agn", 6), ("voice11b", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsWMMQosParam.setStatus('current')
apRadioSettingsQBSSChannelBeaconInt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsQBSSChannelBeaconInt.setStatus('current')
apRadioSettingsQBSSLoadElementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioSettingsQBSSLoadElementMode.setStatus('current')
apRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2), )
if mibBuilder.loadTexts: apRadioCfgTable.setStatus('current')
apRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioCfgEntry.setStatus('current')
apRadioCfgChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("userSelect", 1), ("autoSelect", 2), ("uniformSpreading", 3), ("autoSelect40", 4), ("uniformSpreading40", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgChannelMode.setStatus('current')
apRadioCfgDesPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesPlacement.setStatus('current')
apRadioCfgPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 15), ("achannel40", 16), ("achannel44", 17), ("achannel48", 18), ("achannel52", 19), ("achannel56", 20), ("achannel60", 21), ("achannel64", 22), ("achannel149", 23), ("achannel153", 24), ("achannel157", 25), ("achannel161", 26), ("achannel165", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPosChannel.setStatus('current')
apRadioCfgDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161), ("achannel165", 165)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesChannel.setStatus('current')
apRadioCfgPosPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPosPowerLevel.setStatus('current')
apRadioCfgDesPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgDesPowerLevel.setStatus('current')
apRadioCfgDesPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgDesPowerInMW.setStatus('current')
apRadioCfgSet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 8), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgSet.setStatus('current')
apRadioCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 9), DoActionShowProgress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgReset.setStatus('current')
apRadioCfgPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPlacement.setStatus('current')
apRadioCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 40, 44, 48, 52, 56, 60, 64, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("achannel36", 36), ("achannel40", 40), ("achannel44", 44), ("achannel48", 48), ("achannel52", 52), ("achannel56", 56), ("achannel60", 60), ("achannel64", 64), ("achannel149", 149), ("achannel153", 153), ("achannel157", 157), ("achannel161", 161), ("achannel165", 165)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgChannel.setStatus('current')
apRadioCfgPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPowerLevel.setStatus('current')
apRadioCfgPowerInMW = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioCfgPowerInMW.setStatus('current')
apRadioCfgRfFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wlan", 1), ("wips", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgRfFunction.setStatus('current')
apRadioCfgExceptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 2, 1, 15), Bits().clone(namedValues=NamedValues(("null", 0), ("bchannel01", 1), ("bchannel02", 2), ("bchannel03", 3), ("bchannel04", 4), ("bchannel05", 5), ("bchannel06", 6), ("bchannel07", 7), ("bchannel08", 8), ("bchannel09", 9), ("bchannel10", 10), ("bchannel11", 11), ("bchannel12", 12), ("bchannel13", 13), ("bchannel14", 14), ("achannel36", 15), ("achannel40", 16), ("achannel44", 17), ("achannel48", 18), ("achannel52", 19), ("achannel56", 20), ("achannel60", 21), ("achannel64", 22), ("achannel149", 23), ("achannel153", 24), ("achannel157", 25), ("achannel161", 26), ("achannel165", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioCfgExceptionChannel.setStatus('current')
apRadioWlanBssTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3), )
if mibBuilder.loadTexts: apRadioWlanBssTable.setStatus('current')
apRadioWlanBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioWlanBssEntry.setStatus('current')
apRadioWlanBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioWlanBssid.setStatus('current')
apRadioBssTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4), )
if mibBuilder.loadTexts: apRadioBssTable.setStatus('current')
apRadioBssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioBssIndex"))
if mibBuilder.loadTexts: apRadioBssEntry.setStatus('current')
apRadioBssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioBssIndex.setStatus('current')
apRadioBssPrimaryWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioBssPrimaryWlan.setStatus('current')
apRadioBssDtimPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioBssDtimPrd.setStatus('current')
apRadioE2BMapStatusTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5), )
if mibBuilder.loadTexts: apRadioE2BMapStatusTable.setStatus('current')
apRadioE2BMapStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioE2BMapStatusEntry.setStatus('current')
apRadioE2BMapStatusBcMcEncCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("open", 1), ("wep64", 2), ("wep128", 3), ("keyguard", 4), ("wpaTkip", 5), ("wpa2Ccmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatusBcMcEncCipher.setStatus('current')
apRadioE2BMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("warning", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatus.setStatus('current')
apRadioE2BMapStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioE2BMapStatusMessage.setStatus('current')
apRadioMesh = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6))
apRadioMeshTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1), )
if mibBuilder.loadTexts: apRadioMeshTable.setStatus('current')
apRadioMeshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioMeshEntry.setStatus('current')
apRadioMeshBaseBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshBaseBridgeMode.setStatus('current')
apRadioMeshMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshMaxClients.setStatus('current')
apRadioMeshClientBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshClientBridgeMode.setStatus('current')
apRadioMeshWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 4), SinglePointer().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshWlanPtr.setStatus('current')
apRadioMeshConnAutoSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshConnAutoSelect.setStatus('current')
apRadioMeshTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("uplinkDetect", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshTimeout.setStatus('current')
apRadioMeshTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshTimeoutValue.setStatus('current')
apRadioMeshAvailableConnTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2), )
if mibBuilder.loadTexts: apRadioMeshAvailableConnTable.setStatus('current')
apRadioMeshAvailableConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioMeshAvailableConnIndex"))
if mibBuilder.loadTexts: apRadioMeshAvailableConnEntry.setStatus('current')
apRadioMeshAvailableConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioMeshAvailableConnIndex.setStatus('current')
apRadioMeshAvailableConnMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnMac.setStatus('current')
apRadioMeshAvailableConnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnChannel.setStatus('current')
apRadioMeshAvailableConnRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioMeshAvailableConnRssi.setStatus('current')
apRadioMeshPreferredConnTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3), )
if mibBuilder.loadTexts: apRadioMeshPreferredConnTable.setStatus('current')
apRadioMeshPreferredConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioMeshPreferredConnIndex"))
if mibBuilder.loadTexts: apRadioMeshPreferredConnEntry.setStatus('current')
apRadioMeshPreferredConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apRadioMeshPreferredConnIndex.setStatus('current')
apRadioMeshPreferredConnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnPriority.setStatus('current')
apRadioMeshPreferredConnMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnMac.setStatus('current')
apRadioMeshPreferredConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 6, 3, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioMeshPreferredConnRowStatus.setStatus('current')
apRadioWlanBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7), )
if mibBuilder.loadTexts: apRadioWlanBandwidthTable.setStatus('current')
apRadioWlanBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apRadioWlanBandwidthEntry.setStatus('current')
apRadioWlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioWlanWeight.setStatus('current')
apRadioNSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8), )
if mibBuilder.loadTexts: apRadioNSettingsTable.setStatus('current')
apRadioNSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioNSettingsEntry.setStatus('current')
apRadioNSettingsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("modeA", 1), ("modeB", 2), ("modeG", 3), ("modeN2400MHz", 4), ("modeN5000MHz", 5), ("modeAandN", 6), ("modeBandG", 7), ("modeGandN", 8), ("modeBGandN", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNSettingsMode.setStatus('current')
apRadioNSettingsHTProtectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pureHt", 1), ("nonHtStaOnChannel", 2), ("htWith20MHzOnlySta", 3), ("nonHtStaAssociated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNSettingsHTProtectionStatus.setStatus('current')
apRadioNSettingsBasicRates = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1and2Mbps", 1), ("rate1and2and5point5and11Mbps", 2), ("rate1and2and5point5and11and6and12and24Mbps", 3), ("rate6and12and24Mbps", 4), ("rateMCS0to7", 5), ("rate6and12and24MbpsandMCS0to7", 6), ("rate1and2and5point5and11and6and12and24MbpsandMCS0to7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNSettingsBasicRates.setStatus('current')
apRadioNCfgTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9), )
if mibBuilder.loadTexts: apRadioNCfgTable.setStatus('current')
apRadioNCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apRadioNCfgEntry.setStatus('current')
apRadioNCfgPosChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 1), Bits().clone(namedValues=NamedValues(("null", 0), ("bgnChannel1", 1), ("bgnChannel2", 2), ("bgnChannel3", 3), ("bgnChannel4", 4), ("bgnChannel5", 5), ("bgnChannel6", 6), ("bgnChannel7", 7), ("bgnChannel8", 8), ("bgnChannel9", 9), ("bgnChannel10", 10), ("bgnChannel11", 11), ("bgnChannel12", 12), ("bgnChannel13", 13), ("bgnChannel14", 14), ("anChannel36", 15), ("anChannel40", 16), ("anChannel44", 17), ("anChannel48", 18), ("anChannel52", 19), ("anChannel56", 20), ("anChannel60", 21), ("anChannel64", 22), ("anChannel100", 23), ("anChannel104", 24), ("anChannel108", 25), ("anChannel112", 26), ("anChannel116", 27), ("anChannel120", 28), ("anChannel124", 29), ("anChannel128", 30), ("anChannel132", 31), ("anChannel136", 32), ("anChannel140", 33), ("anChannel149", 34), ("anChannel153", 35), ("anChannel157", 36), ("anChannel161", 37), ("anChannel165", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgPosChannel.setStatus('current')
apRadioNCfgDesChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 2), AllowedChannels()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgDesChannel.setStatus('current')
apRadioNCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgChannel.setStatus('current')
apRadioNCfgChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twentyMHz", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgChannelWidth.setStatus('current')
apRadioNCfgAmsduAggregationMaxRecvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3839))).clone(namedValues=NamedValues(("size3839", 3839)))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgAmsduAggregationMaxRecvSize.setStatus('current')
apRadioNCfgAmsduTransmitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNCfgAmsduTransmitEnabled.setStatus('current')
apRadioNCfgAmpduAggregationMaxRecvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8191, 16383, 32767, 65535))).clone(namedValues=NamedValues(("size0", 0), ("size8191", 8191), ("size16383", 16383), ("size32767", 32767), ("size65535", 65535)))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationMaxRecvSize.setStatus('current')
apRadioNCfgAmpduAggregationDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 250, 500, 1000, 2000, 4000, 8000))).clone(namedValues=NamedValues(("zero", 0), ("onefourth", 250), ("onehalf", 500), ("one", 1000), ("two", 2000), ("four", 4000), ("eight", 8000)))).setUnits('nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduAggregationDensity.setStatus('current')
apRadioNCfgAmpduTransmitSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitSizeLimit.setStatus('current')
apRadioNCfgShortGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgShortGuardInterval.setStatus('current')
apRadioNCfgAmpduTransmitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgAmpduTransmitEnabled.setStatus('current')
apRadioNCfgChannelOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("above", 2), ("below", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNCfgChannelOffset.setStatus('current')
apRadioNMcsRateTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10), )
if mibBuilder.loadTexts: apRadioNMcsRateTable.setStatus('current')
apRadioNMcsRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"), (0, "SYMBOL-AP-MIB", "apRadioNMcsRateIndex"))
if mibBuilder.loadTexts: apRadioNMcsRateEntry.setStatus('current')
apRadioNMcsRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRateIndex.setStatus('current')
apRadioNMcsRate20MHzChanSgiDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiDisabled.setStatus('current')
apRadioNMcsRate20MHzChanSgiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 3), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate20MHzChanSgiEnabled.setStatus('deprecated')
apRadioNMcsRate40MHzChanSgiDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 4), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiDisabled.setStatus('current')
apRadioNMcsRate40MHzChanSgiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 5), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadioNMcsRate40MHzChanSgiEnabled.setStatus('current')
apRadioNMcsRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNMcsRateType.setStatus('current')
apRadioNMcsRateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 1, 10, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioNMcsRateEnabled.setStatus('current')
apWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2))
apWlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1), )
if mibBuilder.loadTexts: apWlanTable.setStatus('current')
apWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apWlanEntry.setStatus('current')
apWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanIndex.setStatus('current')
apWlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanName.setStatus('current')
apWlanEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEssid.setStatus('current')
apWlanUseRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noneBand", 0), ("bgRadio", 1), ("aRadio", 2), ("bothBand", 3), ("nRadio2400MHz", 4), ("nRadio5000MHz", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanUseRadio.setStatus('current')
apWlanMaxMus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMaxMus.setStatus('current')
apWlanAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 6), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAclPolicy.setStatus('current')
apWlanSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 7), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecurityPolicy.setStatus('current')
apWlanQosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 8), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicy.setStatus('current')
apWlanAuthKerberosUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanAuthKerberosUsername.setStatus('current')
apWlanAuthKerberosPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 10), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosPassword.setStatus('current')
apWlanDisallowMuToMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanDisallowMuToMu.setStatus('current')
apWlanUseSecureBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanUseSecureBeacon.setStatus('current')
apWlanAnswerBroadcastEss = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAnswerBroadcastEss.setStatus('current')
apWlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanWeight.setStatus('obsolete')
apWlanVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeDynamic", 1), ("modeStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVlanMode.setStatus('current')
apWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 16), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVlanId.setStatus('current')
apWlanSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSubnet.setStatus('current')
apWlanClientBackHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanClientBackHaul.setStatus('current')
apWlanHotspot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanHotspot.setStatus('current')
apWlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEnable.setStatus('current')
apWlanMuIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuIdleTimeout.setStatus('current')
apWlanSecPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2), )
if mibBuilder.loadTexts: apWlanSecPolicyTable.setStatus('current')
apWlanSecPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanSecPolicyEntry.setStatus('current')
apWlanSecPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanSecPolicyIndex.setStatus('current')
apWlanSecPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyName.setStatus('current')
apWlanSecPolicyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authNone", 1), ("auth802dot1xEap", 2), ("authKerberos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyAuthentication.setStatus('current')
apWlanSecPolicyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cryptoNone", 1), ("cryptoWep40", 2), ("cryptoWep128", 3), ("cryptoKeyguardMcm", 4), ("cryptoWpaTkip", 5), ("cryptoCcmp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyEncryption.setStatus('current')
apWlanSecPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 5), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanSecPolicyPointerToWlan.setStatus('current')
apWlanSecPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 2, 1, 6), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanSecPolicyRowStatus.setStatus('current')
apWlanAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3))
apWlanAuthEapTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1), )
if mibBuilder.loadTexts: apWlanAuthEapTable.setStatus('current')
apWlanAuthEapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanAuthEapEntry.setStatus('current')
apWlanAuthEapReauthenticationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationEnable.setStatus('current')
apWlanAuthEapReauthenticationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationPeriod.setStatus('current')
apWlanAuthEapReauthenticationMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapReauthenticationMaxRetries.setStatus('current')
apWlanAuthEapRadius1Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1Server.setStatus('current')
apWlanAuthEapRadius1Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1Port.setStatus('current')
apWlanAuthEapRadius1SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 6), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius1SharedSecret.setStatus('current')
apWlanAuthEapRadius2Server = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2Server.setStatus('current')
apWlanAuthEapRadius2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2Port.setStatus('current')
apWlanAuthEapRadius2SharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 9), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadius2SharedSecret.setStatus('current')
apWlanAuthEapMuQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuQuietPeriod.setStatus('current')
apWlanAuthEapMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuTimeout.setStatus('current')
apWlanAuthEapMuTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuTxPeriod.setStatus('current')
apWlanAuthEapMuMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapMuMaxRetries.setStatus('current')
apWlanAuthEapServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapServerTimeout.setStatus('current')
apWlanAuthEapServerMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapServerMaxRetries.setStatus('current')
apWlanAuthEapRadiusAcctMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMode.setStatus('current')
apWlanAuthEapRadiusAcctMuTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuTimeout.setStatus('current')
apWlanAuthEapRadiusAcctMuRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusAcctMuRetries.setStatus('current')
apWlanAuthEapSyslogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapSyslogMode.setStatus('current')
apWlanAuthEapSyslogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapSyslogServerIp.setStatus('current')
apWlanAuthEapRadiusExtAcctServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtAcctServer.setStatus('current')
apWlanAuthEapRadiusExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtPort.setStatus('current')
apWlanAuthEapRadiusExtSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 1, 1, 23), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthEapRadiusExtSharedSecret.setStatus('current')
apWlanAuthKerberosTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2), )
if mibBuilder.loadTexts: apWlanAuthKerberosTable.setStatus('current')
apWlanAuthKerberosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanAuthKerberosEntry.setStatus('current')
apWlanAuthKerberosRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosRealmName.setStatus('current')
apWlanAuthKerberosKdcServerIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp1.setStatus('current')
apWlanAuthKerberosKdcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort1.setStatus('current')
apWlanAuthKerberosKdcServerIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIp2.setStatus('current')
apWlanAuthKerberosKdcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPort2.setStatus('current')
apWlanAuthKerberosKdcServerIpR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcServerIpR.setStatus('current')
apWlanAuthKerberosKdcPortR = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanAuthKerberosKdcPortR.setStatus('current')
apWlanCrypto = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4))
apWlanCryptoWepTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1), )
if mibBuilder.loadTexts: apWlanCryptoWepTable.setStatus('current')
apWlanCryptoWepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoWepEntry.setStatus('current')
apWlanCryptoWepPassKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 1), Password().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepPassKey.setStatus('current')
apWlanCryptoWepKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey1.setStatus('current')
apWlanCryptoWepKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey2.setStatus('current')
apWlanCryptoWepKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey3.setStatus('current')
apWlanCryptoWepKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKey4.setStatus('current')
apWlanCryptoWepKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepKeyToUse.setStatus('current')
apWlanCryptoWepMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoWepMixedMode.setStatus('current')
apWlanCryptoTkipTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2), )
if mibBuilder.loadTexts: apWlanCryptoTkipTable.setStatus('current')
apWlanCryptoTkipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoTkipEntry.setStatus('current')
apWlanCryptoTkipBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipBcastKeyRotation.setStatus('current')
apWlanCryptoTkipKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKeyRotationInterval.setStatus('current')
apWlanCryptoTkipKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useAsciiPassphrase", 1), ("use256bitKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKeyToUse.setStatus('current')
apWlanCryptoTkipPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipPassphrase.setStatus('current')
apWlanCryptoTkipKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipKey.setStatus('current')
apWlanCryptoTkipAllowWpa2Client = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipAllowWpa2Client.setStatus('current')
apWlanCryptoTkipFastRoamPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoTkipFastRoamPreAuth.setStatus('current')
apWlanCryptoCcmpTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3), )
if mibBuilder.loadTexts: apWlanCryptoCcmpTable.setStatus('current')
apWlanCryptoCcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoCcmpEntry.setStatus('current')
apWlanCryptoCcmpBcastKeyRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpBcastKeyRotation.setStatus('current')
apWlanCryptoCcmpKeyRotationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyRotationInterval.setStatus('current')
apWlanCryptoCcmpKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useAsciiPassphrase", 1), ("use256bitKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKeyToUse.setStatus('current')
apWlanCryptoCcmpPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpPassphrase.setStatus('current')
apWlanCryptoCcmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpKey.setStatus('current')
apWlanCryptoCcmpMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpMixedMode.setStatus('current')
apWlanCryptoCcmpFastRoamPreAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoCcmpFastRoamPreAuth.setStatus('current')
apWlanCryptoKeyguardTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4), )
if mibBuilder.loadTexts: apWlanCryptoKeyguardTable.setStatus('current')
apWlanCryptoKeyguardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanSecPolicyIndex"))
if mibBuilder.loadTexts: apWlanCryptoKeyguardEntry.setStatus('current')
apWlanCryptoKeyguardPassKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardPassKey.setStatus('current')
apWlanCryptoKeyguardKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey1.setStatus('current')
apWlanCryptoKeyguardKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey2.setStatus('current')
apWlanCryptoKeyguardKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey3.setStatus('current')
apWlanCryptoKeyguardKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKey4.setStatus('current')
apWlanCryptoKeyguardKeyToUse = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardKeyToUse.setStatus('current')
apWlanCryptoKeyguardMixedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 4, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanCryptoKeyguardMixedMode.setStatus('current')
apWlanMuAclPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5), )
if mibBuilder.loadTexts: apWlanMuAclPolicyTable.setStatus('current')
apWlanMuAclPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanMuAclPolicyIndex"))
if mibBuilder.loadTexts: apWlanMuAclPolicyEntry.setStatus('current')
apWlanMuAclPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanMuAclPolicyIndex.setStatus('current')
apWlanMuAclPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyName.setStatus('current')
apWlanMuAclPolicyAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyAccessMode.setStatus('current')
apWlanMuAclPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanMuAclPolicyPointerToWlan.setStatus('current')
apWlanMuAclPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 5, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPolicyRowStatus.setStatus('current')
apWlanMuAclTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6), )
if mibBuilder.loadTexts: apWlanMuAclTable.setStatus('current')
apWlanMuAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanMuAclIndex"))
if mibBuilder.loadTexts: apWlanMuAclEntry.setStatus('current')
apWlanMuAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanMuAclIndex.setStatus('current')
apWlanMuAclStartingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclStartingMac.setStatus('current')
apWlanMuAclEndingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclEndingMac.setStatus('current')
apWlanMuAclPointerToAclPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 4), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclPointerToAclPolicy.setStatus('current')
apWlanMuAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 6, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMuAclRowStatus.setStatus('current')
apWlanQosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7), )
if mibBuilder.loadTexts: apWlanQosPolicyTable.setStatus('current')
apWlanQosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanQosPolicyIndex"))
if mibBuilder.loadTexts: apWlanQosPolicyEntry.setStatus('current')
apWlanQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWlanQosPolicyIndex.setStatus('current')
apWlanQosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyName.setStatus('current')
apWlanEnableWMM = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanEnableWMM.setStatus('current')
apWlanWMMQosParam = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("manual", 1), ("wifi11agn", 2), ("wifi11b", 3), ("default11agn", 4), ("default11b", 5), ("voice11agn", 6), ("voice11b", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanWMMQosParam.setStatus('current')
apWlanQosPolicyBackgroundCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMin.setStatus('current')
apWlanQosPolicyBackgroundCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundCwMax.setStatus('current')
apWlanQosPolicyBackgroundAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundAifsn.setStatus('current')
apWlanQosPolicyBackgroundTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTime.setStatus('current')
apWlanQosPolicyBackgroundTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyBackgroundTxopsTimeInMS.setStatus('current')
apWlanQosPolicyBestEffortCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMin.setStatus('current')
apWlanQosPolicyBestEffortCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortCwMax.setStatus('current')
apWlanQosPolicyBestEffortAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortAifsn.setStatus('current')
apWlanQosPolicyBestEffortTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTime.setStatus('current')
apWlanQosPolicyBestEffortTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyBestEffortTxopsTimeInMS.setStatus('current')
apWlanQosPolicyVideoCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMin.setStatus('current')
apWlanQosPolicyVideoCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoCwMax.setStatus('current')
apWlanQosPolicyVideoAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoAifsn.setStatus('current')
apWlanQosPolicyVideoTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTime.setStatus('current')
apWlanQosPolicyVideoTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyVideoTxopsTimeInMS.setStatus('current')
apWlanQosPolicyVoiceCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMin.setStatus('current')
apWlanQosPolicyVoiceCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceCwMax.setStatus('current')
apWlanQosPolicyVoiceAifsn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceAifsn.setStatus('current')
apWlanQosPolicyVoiceTxopsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTime.setStatus('current')
apWlanQosPolicyVoiceTxopsTimeInMS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyVoiceTxopsTimeInMS.setStatus('current')
apWlanVoicePrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanVoicePrioritization.setStatus('current')
apWlanMulticastAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 26), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMulticastAddr1.setStatus('current')
apWlanMulticastAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 27), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanMulticastAddr2.setStatus('current')
apWlanQosPolicyPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 28), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanQosPolicyPointerToWlan.setStatus('current')
apWlanQosPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 7, 1, 29), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanQosPolicyRowStatus.setStatus('current')
apWlanBwShareModeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8), )
if mibBuilder.loadTexts: apWlanBwShareModeTable.setStatus('current')
apWlanBwShareModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadioSettingsIndex"))
if mibBuilder.loadTexts: apWlanBwShareModeEntry.setStatus('current')
apWlanBwShareMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("firstInFirstOut", 0), ("roundRobin", 1), ("weightedRoundRobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanBwShareMode.setStatus('current')
apHotSpot = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3))
apHotSpotWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2), )
if mibBuilder.loadTexts: apHotSpotWhiteListTable.setStatus('current')
apHotSpotWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"), (0, "SYMBOL-AP-MIB", "apHotSpotWhiteListIndex"))
if mibBuilder.loadTexts: apHotSpotWhiteListEntry.setStatus('current')
apHotSpotWhiteListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apHotSpotWhiteListIndex.setStatus('current')
apHotSpotWhiteListWalledGardenIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotWhiteListWalledGardenIp.setStatus('current')
apHotSpotWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 2, 1, 3), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotWhiteListRowStatus.setStatus('current')
apHotSpotTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1), )
if mibBuilder.loadTexts: apHotSpotTable.setStatus('current')
apHotSpotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apHotSpotEntry.setStatus('current')
apHotSpotDefaultFileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("externalURL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotDefaultFileMode.setStatus('current')
apHotSpotExternalLoginPageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalLoginPageUrl.setStatus('current')
apHotSpotExternalWelomePageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalWelomePageUrl.setStatus('current')
apHotSpotExternalFailPageUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotExternalFailPageUrl.setStatus('current')
apHotSpotPriRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusServerIp.setStatus('current')
apHotSpotPriRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusPort.setStatus('current')
apHotSpotPriRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 7), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotPriRadiusSecret.setStatus('current')
apHotSpotSecRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusServerIp.setStatus('current')
apHotSpotSecRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusPort.setStatus('current')
apHotSpotSecRadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 10), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotSecRadiusSecret.setStatus('current')
apHotSpotRadiusAcctMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctMode.setStatus('current')
apHotSpotRadiusAcctServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctServerIp.setStatus('current')
apHotSpotRadiusAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctPort.setStatus('current')
apHotSpotRadiusAcctSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 14), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctSecret.setStatus('current')
apHotSpotRadiusAcctTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctTimeout.setStatus('current')
apHotSpotRadiusAcctRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusAcctRetryCount.setStatus('current')
apHotSpotRadiusSessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusSessMode.setStatus('current')
apHotSpotRadiusSessTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 3, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHotSpotRadiusSessTimeout.setStatus('current')
apMus = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4))
apMuLocationing = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1))
apMuLocationingEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingEnable.setStatus('current')
apMuLocationingClear = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 2), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingClear.setStatus('current')
apMuLocationingMaxMus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingMaxMus.setStatus('current')
apMuLocationingTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4), )
if mibBuilder.loadTexts: apMuLocationingTable.setStatus('current')
apMuLocationingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMuLocationingIndex"))
if mibBuilder.loadTexts: apMuLocationingEntry.setStatus('current')
apMuLocationingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2400))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMuLocationingIndex.setStatus('current')
apMuLocationingMuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingMuMac.setStatus('current')
apMuLocationingPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingPortalMac.setStatus('current')
apMuLocationingSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingSignalStrength.setStatus('current')
apMuLocationingHeardChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingHeardChannel.setStatus('current')
apMuLocationingHeardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMuLocationingHeardTime.setStatus('current')
apMuLocationingAddEntryToTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5), )
if mibBuilder.loadTexts: apMuLocationingAddEntryToTable.setStatus('current')
apMuLocationingAddEntryToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMuLocationingIndex"))
if mibBuilder.loadTexts: apMuLocationingAddEntryToEntry.setStatus('current')
apMuLocationingAddMuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddMuMac.setStatus('current')
apMuLocationingAddPortalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddPortalMac.setStatus('current')
apMuLocationingAddSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddSignalStrength.setStatus('current')
apMuLocationingAddHeardChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddHeardChannel.setStatus('current')
apMuLocationingAddHeardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 4, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuLocationingAddHeardTime.setStatus('current')
apIpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5))
apIpFilterPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1), )
if mibBuilder.loadTexts: apIpFilterPolicyTable.setStatus('current')
apIpFilterPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterPolicyEntry.setStatus('current')
apIpFilterPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterPolicyIndex.setStatus('current')
apIpFilterPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyName.setStatus('current')
apIpFilterPolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 103, 108, 255, 256))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("pim", 103), ("comp", 108), ("rawip", 255), ("all", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyProtocol.setStatus('current')
apIpFilterPolicyStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyStartPort.setStatus('current')
apIpFilterPolicyEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyEndPort.setStatus('current')
apIpFilterPolicySrcStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcStartIp.setStatus('current')
apIpFilterPolicySrcEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcEndIp.setStatus('current')
apIpFilterPolicyDestStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyDestStartIp.setStatus('current')
apIpFilterPolicyDestEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyDestEndIp.setStatus('current')
apIpFilterPolicyUseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterPolicyUseStatus.setStatus('current')
apIpFilterPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 11), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicyRowStatus.setStatus('current')
apIpFilterPolicySrcStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcStartPort.setStatus('current')
apIpFilterPolicySrcEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterPolicySrcEndPort.setStatus('current')
apIpFilterWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2))
apIpFilterWlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1), )
if mibBuilder.loadTexts: apIpFilterWlanTable.setStatus('current')
apIpFilterWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"))
if mibBuilder.loadTexts: apIpFilterWlanEntry.setStatus('current')
apIpFilterWlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanMode.setStatus('current')
apIpFilterWlanDefInAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanDefInAction.setStatus('current')
apIpFilterWlanDefOutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanDefOutAction.setStatus('current')
apIpFilterWlanInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanInPackets.setStatus('current')
apIpFilterWlanOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanOutPackets.setStatus('current')
apIpFilterWlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2), )
if mibBuilder.loadTexts: apIpFilterWlanPolicyTable.setStatus('current')
apIpFilterWlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWlanIndex"), (0, "SYMBOL-AP-MIB", "apIpFilterWlanPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterWlanPolicyEntry.setStatus('current')
apIpFilterWlanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterWlanPolicyIndex.setStatus('current')
apIpFilterWlanPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyPolicy.setStatus('current')
apIpFilterWlanPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyDirection.setStatus('current')
apIpFilterWlanPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyAction.setStatus('current')
apIpFilterWlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterWlanPolicyRowStatus.setStatus('current')
apIpFilterWlanPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterWlanPolicyPackets.setStatus('current')
apIpFilterLan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3))
apIpFilterLanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1), )
if mibBuilder.loadTexts: apIpFilterLanTable.setStatus('current')
apIpFilterLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterLanIndex"))
if mibBuilder.loadTexts: apIpFilterLanEntry.setStatus('current')
apIpFilterLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterLanIndex.setStatus('current')
apIpFilterLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanMode.setStatus('current')
apIpFilterLanDefInAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanDefInAction.setStatus('current')
apIpFilterLanDefOutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanDefOutAction.setStatus('current')
apIpFilterLanInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanInPackets.setStatus('current')
apIpFilterLanOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanOutPackets.setStatus('current')
apIpFilterLanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2), )
if mibBuilder.loadTexts: apIpFilterLanPolicyTable.setStatus('current')
apIpFilterLanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apIpFilterLanIndex"), (0, "SYMBOL-AP-MIB", "apIpFilterLanPolicyIndex"))
if mibBuilder.loadTexts: apIpFilterLanPolicyEntry.setStatus('current')
apIpFilterLanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apIpFilterLanPolicyIndex.setStatus('current')
apIpFilterLanPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyPolicy.setStatus('current')
apIpFilterLanPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyDirection.setStatus('current')
apIpFilterLanPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyAction.setStatus('current')
apIpFilterLanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIpFilterLanPolicyRowStatus.setStatus('current')
apIpFilterLanPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIpFilterLanPolicyPackets.setStatus('current')
apReliableMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6))
apReliableMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastMode.setStatus('current')
apReliableMulticastWlan = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastWlan.setStatus('current')
apReliableMulticastMaxStreams = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastMaxStreams.setStatus('current')
apReliableMulticastStandaloneMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastStandaloneMode.setStatus('current')
apReliableMulticastIgmpQueryVersion = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryVersion.setStatus('current')
apReliableMulticastIgmpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastIgmpQueryInterval.setStatus('current')
apReliableMulticastTxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastTxMulticast.setStatus('current')
apReliableMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8), )
if mibBuilder.loadTexts: apReliableMulticastTable.setStatus('current')
apReliableMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apReliableMulticastAddrIndex"))
if mibBuilder.loadTexts: apReliableMulticastEntry.setStatus('current')
apReliableMulticastAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apReliableMulticastAddrIndex.setStatus('current')
apReliableMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastAddress.setStatus('current')
apReliableMulticastTableRowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 8, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReliableMulticastTableRowEnable.setStatus('current')
apReliableMulticastMUTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9), )
if mibBuilder.loadTexts: apReliableMulticastMUTable.setStatus('current')
apReliableMulticastMUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apReliableMulticastMUStatsIndex"))
if mibBuilder.loadTexts: apReliableMulticastMUEntry.setStatus('current')
apReliableMulticastMUStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apReliableMulticastMUStatsIndex.setStatus('current')
apReliableMulticastMUStatsIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReliableMulticastMUStatsIPAddr.setStatus('current')
apReliableMulticastMUMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 4, 6, 9, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apReliableMulticastMUMacAddr.setStatus('current')
apSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5))
apWan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1))
apWanVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1))
apWanVpnTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1))
apWanVpnKeyAutoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1), )
if mibBuilder.loadTexts: apWanVpnKeyAutoTable.setStatus('current')
apWanVpnKeyAutoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1, 1), )
ccWanVpnEntry.registerAugmentions(("SYMBOL-AP-MIB", "apWanVpnKeyAutoEntry"))
apWanVpnKeyAutoEntry.setIndexNames(*ccWanVpnEntry.getIndexNames())
if mibBuilder.loadTexts: apWanVpnKeyAutoEntry.setStatus('current')
apWanVpnKeyAutoSALifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 4294967295)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanVpnKeyAutoSALifeTime.setStatus('current')
apWanPppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2))
apWanPppoeClientTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1), )
if mibBuilder.loadTexts: apWanPppoeClientTable.setStatus('current')
apWanPppoeClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanPppoeClientIndex"))
if mibBuilder.loadTexts: apWanPppoeClientEntry.setStatus('current')
apWanPppoeClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanPppoeClientIndex.setStatus('current')
apWanPppoeClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientIp.setStatus('current')
apWanPppoeClientGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientGateway.setStatus('current')
apWanPppoeClientPrimaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientPrimaryDNSServer.setStatus('current')
apWanPppoeClientSecondaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanPppoeClientSecondaryDNSServer.setStatus('current')
apWanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3))
apWanPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortAutoNegotiation.setStatus('current')
apWanPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tenMbps", 0), ("hundredMbps", 1), ("oneGbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortSpeed.setStatus('current')
apWanPortDuplex = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanPortDuplex.setStatus('current')
apWanDynDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4))
apWanDynDNSMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSMode.setStatus('current')
apWanDynDNSTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2), )
if mibBuilder.loadTexts: apWanDynDNSTable.setStatus('current')
apWanDynDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanDynDNSIndex"))
if mibBuilder.loadTexts: apWanDynDNSEntry.setStatus('current')
apWanDynDNSUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSUsername.setStatus('current')
apWanDynDNSPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSPassword.setStatus('current')
apWanDynDNSHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSHostname.setStatus('current')
apWanDynDNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanDynDNSIndex.setStatus('current')
apWanDynDNSUpdateResponseTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3), )
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseTable.setStatus('current')
apWanDynDNSUpdateResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apWanDynDNSUpdateResponseIndex"))
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseEntry.setStatus('current')
apWanDynDNSUpdateHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateHostname.setStatus('current')
apWanDynDNSUpdateIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateIp.setStatus('current')
apWanDynDNSUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWanDynDNSUpdateStatus.setStatus('current')
apWanDynDNSUpdateResponseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apWanDynDNSUpdateResponseIndex.setStatus('current')
apWanDynDNSPerformUpdate = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 1, 4, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanDynDNSPerformUpdate.setStatus('current')
apLan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2))
apLanEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanEnable.setStatus('deprecated')
apLanTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("hardwareDefect", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTimeOut.setStatus('current')
apLanTimeOutValue = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTimeOutValue.setStatus('current')
apLanVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanVlanEnable.setStatus('obsolete')
apLanAdminVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanAdminVlanTag.setStatus('obsolete')
apLanNativeVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanNativeVlanTag.setStatus('obsolete')
apLan802dt1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17))
apLan802dt1xAuthLogin = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLan802dt1xAuthLogin.setStatus('current')
apLan802dt1xAuthPass = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 17, 3), Password()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLan802dt1xAuthPass.setStatus('current')
apLanVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18))
apVlanTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1), )
if mibBuilder.loadTexts: apVlanTable.setStatus('current')
apVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apVlanIndex"))
if mibBuilder.loadTexts: apVlanEntry.setStatus('current')
apVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apVlanIndex.setStatus('current')
apVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanId.setStatus('current')
apVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanName.setStatus('current')
apVlanPointerToWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 4), MultiPointer63()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apVlanPointerToWlan.setStatus('current')
apVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 18, 1, 1, 5), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apVlanRowStatus.setStatus('current')
apSubnet = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19))
apSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1), )
if mibBuilder.loadTexts: apSubnetTable.setStatus('current')
apSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apSubnetEntry"))
apSubnetEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apSubnetEntry.setStatus('current')
apSubnetDhcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dhcpClient", 1), ("dhcpServer", 2), ("dhcpNone", 3), ("dhcpBootp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetDhcpState.setStatus('current')
apSubnetVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetVlanEnable.setStatus('current')
apSubnetTypeFilterAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetTypeFilterAccessMode.setStatus('current')
apSubnetAdminVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetAdminVlanTag.setStatus('current')
apSubnetNativeVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetNativeVlanTag.setStatus('current')
apLanTypeFilterAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilterAccessMode.setStatus('obsolete')
apLanTypeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21), )
if mibBuilder.loadTexts: apLanTypeFilterTable.setStatus('current')
apLanTypeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanTypeFilterSubnetIndex"), (0, "SYMBOL-AP-MIB", "apLanTypeFilterIndex"))
if mibBuilder.loadTexts: apLanTypeFilterEntry.setStatus('current')
apLanTypeFilterSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanTypeFilterSubnetIndex.setStatus('current')
apLanTypeFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanTypeFilterIndex.setStatus('current')
apLanTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 3), EthernetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilter.setStatus('current')
apLanTypeFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 21, 1, 4), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanTypeFilterRowStatus.setStatus('current')
apLanEthernetPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanEthernetPort.setStatus('current')
apLanBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23), )
if mibBuilder.loadTexts: apLanBridgeTable.setStatus('current')
apLanBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apLanBridgeEntry"))
apLanBridgeEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apLanBridgeEntry.setStatus('current')
apLanBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgePriority.setStatus('current')
apLanBridgeMaxMsgAge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeMaxMsgAge.setStatus('current')
apLanBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeHelloTime.setStatus('current')
apLanBridgeFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeFwdDelay.setStatus('current')
apLanBridgeEntryAgeout = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanBridgeEntryAgeout.setStatus('current')
apLanPort = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24))
apLanPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortAutoNegotiation.setStatus('current')
apLanPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tenMbps", 0), ("hundredMbps", 1), ("oneGbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortSpeed.setStatus('current')
apLanPortDuplex = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 2, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanPortDuplex.setStatus('current')
apWnmpPing = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3))
apWnmpPingDestMu = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDestMu.setStatus('current')
apWnmpPingDestAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDestAP.setStatus('current')
apWnmpPingDest = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu", 1), ("ap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingDest.setStatus('current')
apWnmpPingNum = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 539))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingNum.setStatus('current')
apWnmpPingPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 539))).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingPacketLength.setStatus('current')
apWnmpPingPacketData = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingPacketData.setStatus('current')
apWnmpPingAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWnmpPingAction.setStatus('current')
apWnmpPingNumResponses = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWnmpPingNumResponses.setStatus('current')
apFlashLed = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4))
apFlashLedDestAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlashLedDestAP.setStatus('current')
apFlashLedAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlashLedAction.setStatus('current')
apKnownAPList = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5))
apKnownApTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1), )
if mibBuilder.loadTexts: apKnownApTable.setStatus('current')
apKnownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apKnownApIndex"))
if mibBuilder.loadTexts: apKnownApEntry.setStatus('current')
apKnownApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apKnownApIndex.setStatus('current')
apKnownApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApMac.setStatus('current')
apKnownApIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApIp.setStatus('current')
apKnownApChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApChannel1.setStatus('current')
apKnownApChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApChannel2.setStatus('current')
apKnownApMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApMu.setStatus('current')
apKnownApKbPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApKbPerSec.setStatus('current')
apKnownApPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApPktsPerSec.setStatus('current')
apKnownApRadioType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("radioA", 1), ("radioB", 2), ("radioBG", 3), ("radioFH", 4), ("radioN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadioType1.setStatus('current')
apKnownApRadioType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("radioA", 1), ("radioB", 2), ("radioBG", 3), ("radioFH", 4), ("radioN", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadioType2.setStatus('current')
apKnownApType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("ap5131", 1), ("ap4131", 2), ("ap41x1", 3), ("ap302x", 4), ("ap71x1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApType.setStatus('current')
apKnownApFwVers = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApFwVers.setStatus('current')
apKnownApUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApUnitName.setStatus('current')
apKnownApEssName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApEssName.setStatus('current')
apKnownApSendCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 15), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKnownApSendCfg.setStatus('current')
apKnownApSendCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApSendCfgStatus.setStatus('current')
apKnownApRadio1ClientBridgeMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 17), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac1.setStatus('current')
apKnownApRadio1ClientBridgeMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 18), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac2.setStatus('current')
apKnownApRadio1ClientBridgeMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 19), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio1ClientBridgeMac3.setStatus('current')
apKnownApRadio2ClientBridgeMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 20), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac1.setStatus('current')
apKnownApRadio2ClientBridgeMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 21), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac2.setStatus('current')
apKnownApRadio2ClientBridgeMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 5, 1, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKnownApRadio2ClientBridgeMac3.setStatus('current')
apAap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6))
apAapSwitchAutoDiscoveryEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchAutoDiscoveryEnable.setStatus('current')
apAapSwitchDiscoveryInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("lan1", 2), ("lan2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryInterface.setStatus('current')
apAapSwitchDiscoveryIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3), )
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressTable.setStatus('current')
apAapSwitchDiscoveryIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressIndex"))
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressEntry.setStatus('current')
apAapSwitchDiscoveryIPAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressIndex.setStatus('current')
apAapSwitchDiscoveryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddress.setStatus('current')
apAapSwitchDiscoveryIPAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destroy", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryIPAddressRowStatus.setStatus('current')
apAapSwitchDiscoveryDomainName = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryDomainName.setStatus('current')
apAapSwitchDiscoveryPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapSwitchDiscoveryPort.setStatus('current')
apAapPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 6), Password().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapPassphrase.setStatus('current')
apAapTunnelToSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapTunnelToSwitchEnable.setStatus('current')
apAapAcKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAapAcKeepAlive.setStatus('current')
apAapAdoptionState = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standAlone", 1), ("waiting", 2), ("adoptionFailed", 3), ("adopted", 4), ("connectionLoss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAapAdoptionState.setStatus('current')
apAapAdoptingSwitchIP = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 5, 6, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAapAdoptingSwitchIP.setStatus('current')
apNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6))
apMuVlan = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1)).setObjects(("SYMBOL-AP-MIB", "apTrapMuMac"), ("SYMBOL-AP-MIB", "apTrapRadioMac"), ("SYMBOL-AP-MIB", "apTrapVlanId"))
if mibBuilder.loadTexts: apMuVlan.setStatus('current')
apLanMonitor = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 2)).setObjects(("SYMBOL-AP-MIB", "apTrapLanMonitorMode"), ("SYMBOL-AP-MIB", "apTrapLanMonitorReason"))
if mibBuilder.loadTexts: apLanMonitor.setStatus('current')
apWpaCounterMeasure = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 3)).setObjects(("SYMBOL-AP-MIB", "apTrapWpaCounterMeasureEssid"))
if mibBuilder.loadTexts: apWpaCounterMeasure.setStatus('current')
apMuHotspotState = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 4)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlMuMac"), ("SYMBOL-AP-MIB", "apTrapCtrlMuHotspotStateChange"))
if mibBuilder.loadTexts: apMuHotspotState.setStatus('current')
apDynDNSUpdate = NotificationType((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 5)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateStatus"))
if mibBuilder.loadTexts: apDynDNSUpdate.setStatus('current')
apTrapCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000))
apTrapCtrlEnableTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1), )
if mibBuilder.loadTexts: apTrapCtrlEnableTable.setStatus('current')
apTrapCtrlEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrapCtrlEnableIndex"))
if mibBuilder.loadTexts: apTrapCtrlEnableEntry.setStatus('current')
apTrapCtrlEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlEnableIndex.setStatus('current')
apTrapCtrlEnableName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlEnableName.setStatus('current')
apTrapCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlEnable.setStatus('current')
apTrapCtrlRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlRateLimit.setStatus('current')
apTrapCtrlSumStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3))
apTrapCtrlSumStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1), )
if mibBuilder.loadTexts: apTrapCtrlSumStatsTable.setStatus('current')
apTrapCtrlSumStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrapCtrlSumStatsIndex"))
if mibBuilder.loadTexts: apTrapCtrlSumStatsEntry.setStatus('current')
apTrapCtrlSumStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unusedTimestamp", 1), ("unusedNumPkts", 2), ("thresholdsPktsPerSec", 3), ("unusedPktsPerSecTx", 4), ("unusedPktsPerSecRx", 5), ("thresholdsThroughput", 6), ("unusedThroughputTx", 7), ("unusedThroughputRx", 8), ("thresholdsAvgBitSpeed", 9), ("thresholdsAvgMuSignal", 10), ("thresholdsAvgMuNoise", 11), ("thresholdsAvgMuSnr", 12), ("thresholdsPctNUcastPkts", 13), ("thresholdsPpmTxWithRetires", 14), ("thresholdsPpmTxDropped", 15), ("thresholdsTxAvgRetries", 16), ("thresholdsPpmRxUndecrypt", 17), ("thresholdsTotalMus", 18), ("thresholdsPctRfUtil", 19), ("thresholdsPctDropped", 20)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlSumStatsIndex.setStatus('current')
apTrapCtrlSumStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsDescr.setStatus('current')
apTrapCtrlSumStatsUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsUnits.setStatus('current')
apTrapCtrlSumStatsCanBeSetMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetMu.setStatus('current')
apTrapCtrlSumStatsThresholdMu = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdMu.setStatus('current')
apTrapCtrlSumStatsCanBeSetRadioA = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioA.setStatus('current')
apTrapCtrlSumStatsThresholdRadioA = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioA.setStatus('current')
apTrapCtrlSumStatsCanBeSetRadioBG = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioBG.setStatus('current')
apTrapCtrlSumStatsThresholdRadioBG = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioBG.setStatus('current')
apTrapCtrlSumStatsCanBeSetWlan = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetWlan.setStatus('current')
apTrapCtrlSumStatsThresholdWlans = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdWlans.setStatus('current')
apTrapCtrlSumStatsCanBeSetAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetAccessPoint.setStatus('current')
apTrapCtrlSumStatsThresholdAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdAccessPoint.setStatus('current')
apTrapCtrlSumStatsCanBeSetRadioN5000MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN5000MHz.setStatus('current')
apTrapCtrlSumStatsThresholdRadioN5000MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN5000MHz.setStatus('current')
apTrapCtrlSumStatsCanBeSetRadioN2400MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTrapCtrlSumStatsCanBeSetRadioN2400MHz.setStatus('current')
apTrapCtrlSumStatsThresholdRadioN2400MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlSumStatsThresholdRadioN2400MHz.setStatus('current')
apTrapMuVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4))
apTrapMuMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 1), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapMuMac.setStatus('current')
apTrapRadioMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 2), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapRadioMac.setStatus('current')
apTrapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapVlanId.setStatus('current')
apTrapLanMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5))
apTrapLanMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radioShutdown", 1), ("radioRestore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapLanMonitorMode.setStatus('current')
apTrapLanMonitorReason = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("hardwareDetect", 2), ("timeout", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapLanMonitorReason.setStatus('current')
apTrapWpaCounterMeasure = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 6))
apTrapWpaCounterMeasureEssid = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 6, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapWpaCounterMeasureEssid.setStatus('current')
apTrapCtrlMuHotspotState = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7))
apTrapCtrlMuMac = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7, 1), PhysAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlMuMac.setStatus('current')
apTrapCtrlMuHotspotStateChange = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fromHotspotToDataReady", 1), ("fromDataReadyToHotspot", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrapCtrlMuHotspotStateChange.setStatus('current')
apTrapCtrlDynDNSUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8))
apTrapCtrlDynDNSUpdateIp = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateIp.setStatus('current')
apTrapCtrlDynDNSUpdateHostname = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateHostname.setStatus('current')
apTrapCtrlDynDNSUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 6, 1000, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapCtrlDynDNSUpdateStatus.setStatus('current')
apRap = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7))
apRapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1))
apRapControlDetectors = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1))
apRapDetectorMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scanDisable", 1), ("scanA", 2), ("scanBG", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRapDetectorMode.setStatus('current')
apRapDetectorABGMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRapDetectorABGMode.setStatus('current')
apLoadCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 8))
apLoadCfgOperation = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unspecified", 1), ("ftpConfigServerToAP", 2), ("ftpConfigAPToServer", 3), ("tftpConfigServerToAP", 4), ("tftpConfigAPToServer", 5), ("sftpConfigServerToAP", 6), ("sftpConfigAPToServer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgOperation.setStatus('current')
apLoadCfgServerPath = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerPath.setStatus('current')
apLoadCfgServerFilename = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerFilename.setStatus('current')
apLoadCfgServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgServerIpAddr.setStatus('current')
apLoadCfgFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgFtpUsername.setStatus('current')
apLoadCfgFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgFtpPassword.setStatus('current')
apLoadCfgStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoadCfgStart.setStatus('current')
apLoadCfgOperationsDone = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgOperationsDone.setStatus('current')
apLoadCfgResult = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgResult.setStatus('current')
apLoadCfgSuccess = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 8, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLoadCfgSuccess.setStatus('current')
apStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9))
apWanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 1), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWanClearStats.setStatus('current')
apLanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanClearStats.setStatus('current')
apRadioClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioClearStats.setStatus('current')
apWlanClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 4), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanClearStats.setStatus('current')
apMuClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 5), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMuClearStats.setStatus('current')
apKnownAPClearStats = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 6), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKnownAPClearStats.setStatus('current')
apWirelessAPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7))
apMeshStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1), )
if mibBuilder.loadTexts: apMeshStatsTable.setStatus('current')
apMeshStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMeshStatsIndex"))
if mibBuilder.loadTexts: apMeshStatsEntry.setStatus('current')
apMeshStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMeshStatsIndex.setStatus('current')
apMeshStatsConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("baseBridge", 2), ("clientBridge", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsConnType.setStatus('current')
apMeshStatsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsMac.setStatus('current')
apMeshStatsWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 4), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsWlanPtr.setStatus('current')
apMeshStatsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11bg", 2), ("dot11n2400MHz", 3), ("dot11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsRadioType.setStatus('current')
apMeshStatsThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsThroughput.setStatus('current')
apMeshStatsAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsAvgBitSpeed.setStatus('current')
apMeshStatsRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshStatsRetries.setStatus('current')
apMeshBridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2), )
if mibBuilder.loadTexts: apMeshBridgeStatsTable.setStatus('current')
apMeshBridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apMeshBridgeStatsIndex"))
if mibBuilder.loadTexts: apMeshBridgeStatsEntry.setStatus('current')
apMeshBridgeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apMeshBridgeStatsIndex.setStatus('current')
apMeshBridgeStatsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsMac.setStatus('current')
apMeshBridgeStatsWlanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 3), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsWlanPtr.setStatus('current')
apMeshBridgeStatsLanPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 4), SinglePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsLanPtr.setStatus('current')
apMeshBridgeStatsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11bg", 2), ("dot11n2400MHz", 3), ("dot11n5000MHz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsRadioType.setStatus('current')
apMeshBridgeStatsAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eap", 2), ("kerberos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAuthType.setStatus('current')
apMeshBridgeStatsEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("wep64", 2), ("wep128", 3), ("keyguard", 4), ("wpaTkip", 5), ("wpa2Ccmp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsEncType.setStatus('current')
apMeshBridgeStatsPktsPerSecRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecRx.setStatus('current')
apMeshBridgeStatsPksPerSecTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPksPerSecTx.setStatus('current')
apMeshBridgeStatsPktsPerSecTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsPerSecTotal.setStatus('current')
apMeshBridgeStatsThroughputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputRx.setStatus('current')
apMeshBridgeStatsThroughputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTx.setStatus('current')
apMeshBridgeStatsThroughputTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsThroughputTotal.setStatus('current')
apMeshBridgeStatsAvgBitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgBitSpeed.setStatus('current')
apMeshBridgeStatsAvgMuSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSignal.setStatus('current')
apMeshBridgeStatsAvgMuNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuNoise.setStatus('current')
apMeshBridgeStatsAvgMuSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgMuSnr.setStatus('current')
apMeshBridgeStatsAvgRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsAvgRetries.setStatus('current')
apMeshBridgeStatsPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsPktsDropped.setStatus('current')
apMeshBridgeStatsUndecryptablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMeshBridgeStatsUndecryptablePkts.setStatus('current')
apLanSTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3), )
if mibBuilder.loadTexts: apLanSTPStatsTable.setStatus('current')
apLanSTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1), )
ccSubnetEntry.registerAugmentions(("SYMBOL-AP-MIB", "apLanSTPStatsEntry"))
apLanSTPStatsEntry.setIndexNames(*ccSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: apLanSTPStatsEntry.setStatus('current')
apLanSTPStatsDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsDesignatedRoot.setStatus('current')
apLanSTPStatsBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeId.setStatus('current')
apLanSTPStatsRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsRootPort.setStatus('current')
apLanSTPStatsRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsRootPathCost.setStatus('current')
apLanSTPStatsBridgeMaxMsgAge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeMaxMsgAge.setStatus('current')
apLanSTPStatsBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeHelloTime.setStatus('current')
apLanSTPStatsBridgeFwDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsBridgeFwDelay.setStatus('current')
apLanSTPStatsPortIntfTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4), )
if mibBuilder.loadTexts: apLanSTPStatsPortIntfTable.setStatus('current')
apLanSTPStatsPortIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanSTPStatsPortIntfLanIndex"), (0, "SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortIndex"))
if mibBuilder.loadTexts: apLanSTPStatsPortIntfEntry.setStatus('current')
apLanSTPStatsPortIntfLanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfLanIndex.setStatus('current')
apLanSTPStatsPortIntfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortIndex.setStatus('current')
apLanSTPStatsPortIntfPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPortName.setStatus('current')
apLanSTPStatsPortIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blocking", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfState.setStatus('current')
apLanSTPStatsPortIntfPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfPathCost.setStatus('current')
apLanSTPStatsPortIntfDsgRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgRoot.setStatus('current')
apLanSTPStatsPortIntfDsgBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgBridge.setStatus('current')
apLanSTPStatsPortIntfDsgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgPort.setStatus('current')
apLanSTPStatsPortIntfDsgCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 7, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanSTPStatsPortIntfDsgCost.setStatus('current')
apnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8))
apnRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1), )
if mibBuilder.loadTexts: apnRadioStatsTable.setStatus('current')
apnRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apnRadioStatsIndex"))
if mibBuilder.loadTexts: apnRadioStatsEntry.setStatus('current')
apnRadioStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsIndex.setStatus('current')
apnRadioStatsBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsBssid.setStatus('current')
apnRadioStatsApSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsApSsid.setStatus('current')
apnRadioStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsChannel.setStatus('current')
apnRadioStatsExtnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsExtnChannel.setStatus('current')
apnRadioStatsRssiAvgAcrossAntennas = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsRssiAvgAcrossAntennas.setStatus('current')
apnRadioStatsChannelWidthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twentyMHz", 1), ("fortyMHz", 2), ("pco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsChannelWidthMode.setStatus('current')
apnRadioStatsOpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("freq2400MHz", 1), ("freq5000MHz", 2), ("freq2400MHzAnd5000MHz", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsOpFreq.setStatus('current')
apnRadioStatsNumPktsRxSGI400ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI400ns.setStatus('current')
apnRadioStatsNumPktsRxSGI800ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxSGI800ns.setStatus('current')
apnRadioStatsNumPktsTxSGI400ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI400ns.setStatus('current')
apnRadioStatsNumPktsTxSGI800ns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxSGI800ns.setStatus('current')
apnRadioStatsNumPktsRxChanWidth20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth20MHz.setStatus('current')
apnRadioStatsNumPktsRxChanWidth40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsRxChanWidth40MHz.setStatus('current')
apnRadioStatsNumPktsTxChanWidth20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth20MHz.setStatus('current')
apnRadioStatsNumPktsTxChanWidth40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnRadioStatsNumPktsTxChanWidth40MHz.setStatus('current')
apnPortalRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2), )
if mibBuilder.loadTexts: apnPortalRxPktsTable.setStatus('current')
apnPortalRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalRxPktsEntry.setStatus('current')
apnPortalRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt1Mb.setStatus('current')
apnPortalRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt2Mb.setStatus('current')
apnPortalRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt5pt5Mb.setStatus('current')
apnPortalRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt6Mb.setStatus('current')
apnPortalRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt9Mb.setStatus('current')
apnPortalRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt11Mb.setStatus('current')
apnPortalRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt12Mb.setStatus('current')
apnPortalRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt18Mb.setStatus('current')
apnPortalRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt24Mb.setStatus('current')
apnPortalRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt36Mb.setStatus('current')
apnPortalRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt48Mb.setStatus('current')
apnPortalRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAt54Mb.setStatus('current')
apnPortalRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS0.setStatus('current')
apnPortalRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS1.setStatus('current')
apnPortalRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS2.setStatus('current')
apnPortalRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS3.setStatus('current')
apnPortalRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS4.setStatus('current')
apnPortalRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS5.setStatus('current')
apnPortalRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS6.setStatus('current')
apnPortalRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS7.setStatus('current')
apnPortalRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS8.setStatus('current')
apnPortalRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS9.setStatus('current')
apnPortalRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS10.setStatus('current')
apnPortalRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS11.setStatus('current')
apnPortalRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS12.setStatus('current')
apnPortalRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS13.setStatus('current')
apnPortalRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS14.setStatus('current')
apnPortalRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxPktsAtMCS15.setStatus('current')
apnPortalTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3), )
if mibBuilder.loadTexts: apnPortalTxPktsTable.setStatus('current')
apnPortalTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalTxPktsEntry.setStatus('current')
apnPortalTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt1Mb.setStatus('current')
apnPortalTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt2Mb.setStatus('current')
apnPortalTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt5pt5Mb.setStatus('current')
apnPortalTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt6Mb.setStatus('current')
apnPortalTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt9Mb.setStatus('current')
apnPortalTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt11Mb.setStatus('current')
apnPortalTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt12Mb.setStatus('current')
apnPortalTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt18Mb.setStatus('current')
apnPortalTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt24Mb.setStatus('current')
apnPortalTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt36Mb.setStatus('current')
apnPortalTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt48Mb.setStatus('current')
apnPortalTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAt54Mb.setStatus('current')
apnPortalTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS0.setStatus('current')
apnPortalTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS1.setStatus('current')
apnPortalTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS2.setStatus('current')
apnPortalTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS3.setStatus('current')
apnPortalTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS4.setStatus('current')
apnPortalTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS5.setStatus('current')
apnPortalTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS6.setStatus('current')
apnPortalTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS7.setStatus('current')
apnPortalTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS8.setStatus('current')
apnPortalTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS9.setStatus('current')
apnPortalTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS10.setStatus('current')
apnPortalTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS11.setStatus('current')
apnPortalTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS12.setStatus('current')
apnPortalTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS13.setStatus('current')
apnPortalTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS14.setStatus('current')
apnPortalTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxPktsAtMCS15.setStatus('current')
apnPortalRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4), )
if mibBuilder.loadTexts: apnPortalRxOctetsTable.setStatus('current')
apnPortalRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalRxOctetsEntry.setStatus('current')
apnPortalRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt1Mb.setStatus('current')
apnPortalRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt2Mb.setStatus('current')
apnPortalRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt5pt5Mb.setStatus('current')
apnPortalRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt6Mb.setStatus('current')
apnPortalRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt9Mb.setStatus('current')
apnPortalRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt11Mb.setStatus('current')
apnPortalRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt12Mb.setStatus('current')
apnPortalRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt18Mb.setStatus('current')
apnPortalRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt24Mb.setStatus('current')
apnPortalRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt36Mb.setStatus('current')
apnPortalRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt48Mb.setStatus('current')
apnPortalRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAt54Mb.setStatus('current')
apnPortalRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS0.setStatus('current')
apnPortalRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS1.setStatus('current')
apnPortalRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS2.setStatus('current')
apnPortalRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS3.setStatus('current')
apnPortalRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS4.setStatus('current')
apnPortalRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS5.setStatus('current')
apnPortalRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS6.setStatus('current')
apnPortalRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS7.setStatus('current')
apnPortalRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS8.setStatus('current')
apnPortalRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS9.setStatus('current')
apnPortalRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS10.setStatus('current')
apnPortalRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS11.setStatus('current')
apnPortalRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS12.setStatus('current')
apnPortalRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS13.setStatus('current')
apnPortalRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS14.setStatus('current')
apnPortalRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalRxOctetsAtMCS15.setStatus('current')
apnPortalTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5), )
if mibBuilder.loadTexts: apnPortalTxOctetsTable.setStatus('current')
apnPortalTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccPortalIndex"))
if mibBuilder.loadTexts: apnPortalTxOctetsEntry.setStatus('current')
apnPortalTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt1Mb.setStatus('current')
apnPortalTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt2Mb.setStatus('current')
apnPortalTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt5pt5Mb.setStatus('current')
apnPortalTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt6Mb.setStatus('current')
apnPortalTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt9Mb.setStatus('current')
apnPortalTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt11Mb.setStatus('current')
apnPortalTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt12Mb.setStatus('current')
apnPortalTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt18Mb.setStatus('current')
apnPortalTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt24Mb.setStatus('current')
apnPortalTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt36Mb.setStatus('current')
apnPortalTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt48Mb.setStatus('current')
apnPortalTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAt54Mb.setStatus('current')
apnPortalTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS0.setStatus('current')
apnPortalTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS1.setStatus('current')
apnPortalTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS2.setStatus('current')
apnPortalTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS3.setStatus('current')
apnPortalTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS4.setStatus('current')
apnPortalTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS5.setStatus('current')
apnPortalTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS6.setStatus('current')
apnPortalTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS7.setStatus('current')
apnPortalTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS8.setStatus('current')
apnPortalTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS9.setStatus('current')
apnPortalTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS10.setStatus('current')
apnPortalTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS11.setStatus('current')
apnPortalTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS12.setStatus('current')
apnPortalTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS13.setStatus('current')
apnPortalTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS14.setStatus('current')
apnPortalTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnPortalTxOctetsAtMCS15.setStatus('current')
apnMuRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6), )
if mibBuilder.loadTexts: apnMuRxPktsTable.setStatus('current')
apnMuRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuRxPktsEntry.setStatus('current')
apnMuRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt1Mb.setStatus('current')
apnMuRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt2Mb.setStatus('current')
apnMuRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt5pt5Mb.setStatus('current')
apnMuRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt6Mb.setStatus('current')
apnMuRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt9Mb.setStatus('current')
apnMuRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt11Mb.setStatus('current')
apnMuRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt12Mb.setStatus('current')
apnMuRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt18Mb.setStatus('current')
apnMuRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt24Mb.setStatus('current')
apnMuRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt36Mb.setStatus('current')
apnMuRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt48Mb.setStatus('current')
apnMuRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAt54Mb.setStatus('current')
apnMuRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS0.setStatus('current')
apnMuRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS1.setStatus('current')
apnMuRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS2.setStatus('current')
apnMuRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS3.setStatus('current')
apnMuRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS4.setStatus('current')
apnMuRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS5.setStatus('current')
apnMuRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS6.setStatus('current')
apnMuRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS7.setStatus('current')
apnMuRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS8.setStatus('current')
apnMuRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS9.setStatus('current')
apnMuRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS10.setStatus('current')
apnMuRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS11.setStatus('current')
apnMuRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS12.setStatus('current')
apnMuRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS13.setStatus('current')
apnMuRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS14.setStatus('current')
apnMuRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxPktsAtMCS15.setStatus('current')
apnMuTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7), )
if mibBuilder.loadTexts: apnMuTxPktsTable.setStatus('current')
apnMuTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuTxPktsEntry.setStatus('current')
apnMuTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt1Mb.setStatus('current')
apnMuTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt2Mb.setStatus('current')
apnMuTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt5pt5Mb.setStatus('current')
apnMuTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt6Mb.setStatus('current')
apnMuTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt9Mb.setStatus('current')
apnMuTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt11Mb.setStatus('current')
apnMuTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt12Mb.setStatus('current')
apnMuTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt18Mb.setStatus('current')
apnMuTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt24Mb.setStatus('current')
apnMuTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt36Mb.setStatus('current')
apnMuTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt48Mb.setStatus('current')
apnMuTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAt54Mb.setStatus('current')
apnMuTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS0.setStatus('current')
apnMuTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS1.setStatus('current')
apnMuTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS2.setStatus('current')
apnMuTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS3.setStatus('current')
apnMuTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS4.setStatus('current')
apnMuTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS5.setStatus('current')
apnMuTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS6.setStatus('current')
apnMuTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS7.setStatus('current')
apnMuTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS8.setStatus('current')
apnMuTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS9.setStatus('current')
apnMuTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS10.setStatus('current')
apnMuTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS11.setStatus('current')
apnMuTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS12.setStatus('current')
apnMuTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS13.setStatus('current')
apnMuTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS14.setStatus('current')
apnMuTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxPktsAtMCS15.setStatus('current')
apnMuRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8), )
if mibBuilder.loadTexts: apnMuRxOctetsTable.setStatus('current')
apnMuRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuRxOctetsEntry.setStatus('current')
apnMuRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt1Mb.setStatus('current')
apnMuRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt2Mb.setStatus('current')
apnMuRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt5pt5Mb.setStatus('current')
apnMuRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt6Mb.setStatus('current')
apnMuRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt9Mb.setStatus('current')
apnMuRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt11Mb.setStatus('current')
apnMuRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt12Mb.setStatus('current')
apnMuRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt18Mb.setStatus('current')
apnMuRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt24Mb.setStatus('current')
apnMuRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt36Mb.setStatus('current')
apnMuRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt48Mb.setStatus('current')
apnMuRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAt54Mb.setStatus('current')
apnMuRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS0.setStatus('current')
apnMuRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS1.setStatus('current')
apnMuRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS2.setStatus('current')
apnMuRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS3.setStatus('current')
apnMuRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS4.setStatus('current')
apnMuRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS5.setStatus('current')
apnMuRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS6.setStatus('current')
apnMuRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS7.setStatus('current')
apnMuRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS8.setStatus('current')
apnMuRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS9.setStatus('current')
apnMuRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS10.setStatus('current')
apnMuRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS11.setStatus('current')
apnMuRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS12.setStatus('current')
apnMuRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS13.setStatus('current')
apnMuRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS14.setStatus('current')
apnMuRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuRxOctetsAtMCS15.setStatus('current')
apnMuTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9), )
if mibBuilder.loadTexts: apnMuTxOctetsTable.setStatus('current')
apnMuTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccMuMac"))
if mibBuilder.loadTexts: apnMuTxOctetsEntry.setStatus('current')
apnMuTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt1Mb.setStatus('current')
apnMuTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt2Mb.setStatus('current')
apnMuTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt5pt5Mb.setStatus('current')
apnMuTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt6Mb.setStatus('current')
apnMuTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt9Mb.setStatus('current')
apnMuTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt11Mb.setStatus('current')
apnMuTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt12Mb.setStatus('current')
apnMuTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt18Mb.setStatus('current')
apnMuTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt24Mb.setStatus('current')
apnMuTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt36Mb.setStatus('current')
apnMuTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt48Mb.setStatus('current')
apnMuTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAt54Mb.setStatus('current')
apnMuTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS0.setStatus('current')
apnMuTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS1.setStatus('current')
apnMuTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS2.setStatus('current')
apnMuTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS3.setStatus('current')
apnMuTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS4.setStatus('current')
apnMuTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS5.setStatus('current')
apnMuTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS6.setStatus('current')
apnMuTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS7.setStatus('current')
apnMuTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS8.setStatus('current')
apnMuTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS9.setStatus('current')
apnMuTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS10.setStatus('current')
apnMuTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS11.setStatus('current')
apnMuTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS12.setStatus('current')
apnMuTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS13.setStatus('current')
apnMuTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS14.setStatus('current')
apnMuTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnMuTxOctetsAtMCS15.setStatus('current')
apnWlanRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10), )
if mibBuilder.loadTexts: apnWlanRxPktsTable.setStatus('current')
apnWlanRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanRxPktsEntry.setStatus('current')
apnWlanRxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt1Mb.setStatus('current')
apnWlanRxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt2Mb.setStatus('current')
apnWlanRxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt5pt5Mb.setStatus('current')
apnWlanRxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt6Mb.setStatus('current')
apnWlanRxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt9Mb.setStatus('current')
apnWlanRxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt11Mb.setStatus('current')
apnWlanRxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt12Mb.setStatus('current')
apnWlanRxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt18Mb.setStatus('current')
apnWlanRxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt24Mb.setStatus('current')
apnWlanRxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt36Mb.setStatus('current')
apnWlanRxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt48Mb.setStatus('current')
apnWlanRxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAt54Mb.setStatus('current')
apnWlanRxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS0.setStatus('current')
apnWlanRxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS1.setStatus('current')
apnWlanRxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS2.setStatus('current')
apnWlanRxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS3.setStatus('current')
apnWlanRxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS4.setStatus('current')
apnWlanRxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS5.setStatus('current')
apnWlanRxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS6.setStatus('current')
apnWlanRxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS7.setStatus('current')
apnWlanRxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS8.setStatus('current')
apnWlanRxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS9.setStatus('current')
apnWlanRxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS10.setStatus('current')
apnWlanRxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS11.setStatus('current')
apnWlanRxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS12.setStatus('current')
apnWlanRxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS13.setStatus('current')
apnWlanRxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS14.setStatus('current')
apnWlanRxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxPktsAtMCS15.setStatus('current')
apnWlanTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11), )
if mibBuilder.loadTexts: apnWlanTxPktsTable.setStatus('current')
apnWlanTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanTxPktsEntry.setStatus('current')
apnWlanTxPktsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt1Mb.setStatus('current')
apnWlanTxPktsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt2Mb.setStatus('current')
apnWlanTxPktsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt5pt5Mb.setStatus('current')
apnWlanTxPktsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt6Mb.setStatus('current')
apnWlanTxPktsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt9Mb.setStatus('current')
apnWlanTxPktsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt11Mb.setStatus('current')
apnWlanTxPktsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt12Mb.setStatus('current')
apnWlanTxPktsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt18Mb.setStatus('current')
apnWlanTxPktsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt24Mb.setStatus('current')
apnWlanTxPktsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt36Mb.setStatus('current')
apnWlanTxPktsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt48Mb.setStatus('current')
apnWlanTxPktsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAt54Mb.setStatus('current')
apnWlanTxPktsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS0.setStatus('current')
apnWlanTxPktsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS1.setStatus('current')
apnWlanTxPktsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS2.setStatus('current')
apnWlanTxPktsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS3.setStatus('current')
apnWlanTxPktsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS4.setStatus('current')
apnWlanTxPktsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS5.setStatus('current')
apnWlanTxPktsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS6.setStatus('current')
apnWlanTxPktsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS7.setStatus('current')
apnWlanTxPktsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS8.setStatus('current')
apnWlanTxPktsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS9.setStatus('current')
apnWlanTxPktsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS10.setStatus('current')
apnWlanTxPktsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS11.setStatus('current')
apnWlanTxPktsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS12.setStatus('current')
apnWlanTxPktsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS13.setStatus('current')
apnWlanTxPktsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS14.setStatus('current')
apnWlanTxPktsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 11, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxPktsAtMCS15.setStatus('current')
apnWlanRxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12), )
if mibBuilder.loadTexts: apnWlanRxOctetsTable.setStatus('current')
apnWlanRxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanRxOctetsEntry.setStatus('current')
apnWlanRxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt1Mb.setStatus('current')
apnWlanRxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt2Mb.setStatus('current')
apnWlanRxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt5pt5Mb.setStatus('current')
apnWlanRxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt6Mb.setStatus('current')
apnWlanRxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt9Mb.setStatus('current')
apnWlanRxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt11Mb.setStatus('current')
apnWlanRxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt12Mb.setStatus('current')
apnWlanRxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt18Mb.setStatus('current')
apnWlanRxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt24Mb.setStatus('current')
apnWlanRxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt36Mb.setStatus('current')
apnWlanRxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt48Mb.setStatus('current')
apnWlanRxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAt54Mb.setStatus('current')
apnWlanRxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS0.setStatus('current')
apnWlanRxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS1.setStatus('current')
apnWlanRxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS2.setStatus('current')
apnWlanRxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS3.setStatus('current')
apnWlanRxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS4.setStatus('current')
apnWlanRxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS5.setStatus('current')
apnWlanRxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS6.setStatus('current')
apnWlanRxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS7.setStatus('current')
apnWlanRxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS8.setStatus('current')
apnWlanRxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS9.setStatus('current')
apnWlanRxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS10.setStatus('current')
apnWlanRxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS11.setStatus('current')
apnWlanRxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS12.setStatus('current')
apnWlanRxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS13.setStatus('current')
apnWlanRxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS14.setStatus('current')
apnWlanRxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanRxOctetsAtMCS15.setStatus('current')
apnWlanTxOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13), )
if mibBuilder.loadTexts: apnWlanTxOctetsTable.setStatus('current')
apnWlanTxOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1), ).setIndexNames((0, "SYMBOL-CC-WS2000-MIB", "ccWlanIndex"))
if mibBuilder.loadTexts: apnWlanTxOctetsEntry.setStatus('current')
apnWlanTxOctetsAt1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt1Mb.setStatus('current')
apnWlanTxOctetsAt2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt2Mb.setStatus('current')
apnWlanTxOctetsAt5pt5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt5pt5Mb.setStatus('current')
apnWlanTxOctetsAt6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt6Mb.setStatus('current')
apnWlanTxOctetsAt9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt9Mb.setStatus('current')
apnWlanTxOctetsAt11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt11Mb.setStatus('current')
apnWlanTxOctetsAt12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt12Mb.setStatus('current')
apnWlanTxOctetsAt18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt18Mb.setStatus('current')
apnWlanTxOctetsAt24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt24Mb.setStatus('current')
apnWlanTxOctetsAt36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt36Mb.setStatus('current')
apnWlanTxOctetsAt48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt48Mb.setStatus('current')
apnWlanTxOctetsAt54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAt54Mb.setStatus('current')
apnWlanTxOctetsAtMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS0.setStatus('current')
apnWlanTxOctetsAtMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS1.setStatus('current')
apnWlanTxOctetsAtMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS2.setStatus('current')
apnWlanTxOctetsAtMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS3.setStatus('current')
apnWlanTxOctetsAtMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS4.setStatus('current')
apnWlanTxOctetsAtMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS5.setStatus('current')
apnWlanTxOctetsAtMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS6.setStatus('current')
apnWlanTxOctetsAtMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS7.setStatus('current')
apnWlanTxOctetsAtMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS8.setStatus('current')
apnWlanTxOctetsAtMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS9.setStatus('current')
apnWlanTxOctetsAtMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS10.setStatus('current')
apnWlanTxOctetsAtMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS11.setStatus('current')
apnWlanTxOctetsAtMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS12.setStatus('current')
apnWlanTxOctetsAtMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS13.setStatus('current')
apnWlanTxOctetsAtMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS14.setStatus('current')
apnWlanTxOctetsAtMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 8, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apnWlanTxOctetsAtMCS15.setStatus('current')
apDiagStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9))
apDiagCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1))
apDiagCpuLoad1Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad1Min.setStatus('current')
apDiagCpuLoad5Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad5Min.setStatus('current')
apDiagCpuLoad15Min = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagCpuLoad15Min.setStatus('current')
apDiagRamStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2))
apDiagRamTotal = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 1), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamTotal.setStatus('current')
apDiagRamUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 2), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamUsed.setStatus('current')
apDiagRamPercentageUsed = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 9, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('0.1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apDiagRamPercentageUsed.setStatus('current')
apLanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10))
apLanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1), )
if mibBuilder.loadTexts: apLanInfoTable.setStatus('current')
apLanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanInfoEntry.setStatus('current')
apLanInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLanInfoIndex.setStatus('current')
apLanInfoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoEnabled.setStatus('current')
apLanInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoIpAddress.setStatus('current')
apLanInfoNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoNetworkMask.setStatus('current')
apLanInfoEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoEthernetAddress.setStatus('current')
apLanInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 6), Unsigned32()).setUnits('mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoSpeed.setStatus('current')
apLanInfoDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanInfoDuplexMode.setStatus('current')
apLanRxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2), )
if mibBuilder.loadTexts: apLanRxPktsTable.setStatus('current')
apLanRxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanRxPktsEntry.setStatus('current')
apLanRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxPkts.setStatus('current')
apLanRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxBytes.setStatus('current')
apLanRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxErrors.setStatus('current')
apLanRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxDropped.setStatus('current')
apLanRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRxFrameErrors.setStatus('current')
apLanTxPktsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4), )
if mibBuilder.loadTexts: apLanTxPktsTable.setStatus('current')
apLanTxPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apLanInfoIndex"))
if mibBuilder.loadTexts: apLanTxPktsEntry.setStatus('current')
apLanTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxPkts.setStatus('current')
apLanTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxBytes.setStatus('current')
apLanTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxErrors.setStatus('current')
apLanTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxDropped.setStatus('current')
apLanTxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 9, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTxFrameErrors.setStatus('current')
apMgmtAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 10))
apMgmtAccessToAllow = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 1), Bits().clone(namedValues=NamedValues(("fromLan1AppletHttp", 0), ("fromLan1AppletHttps", 1), ("fromLan1CliTelnet", 2), ("fromLan1Ssh", 3), ("fromLan1Snmp", 4), ("fromLan2AppletHttp", 5), ("fromLan2AppletHttps", 6), ("fromLan2CliTelnet", 7), ("fromLan2Ssh", 8), ("fromLan2Snmp", 9), ("fromWanAppletHttp", 10), ("fromWanAppletHttps", 11), ("fromWanCliTelnet", 12), ("fromWanSsh", 13), ("fromWanSnmp", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMgmtAccessToAllow.setStatus('current')
apTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2))
apTrustedHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostEnable.setStatus('current')
apTrustedHostRangeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2), )
if mibBuilder.loadTexts: apTrustedHostRangeTable.setStatus('current')
apTrustedHostRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apTrustedHostRangeIndex"))
if mibBuilder.loadTexts: apTrustedHostRangeEntry.setStatus('current')
apTrustedHostRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apTrustedHostRangeIndex.setStatus('current')
apTrustedHostRangeLowerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostRangeLowerIp.setStatus('current')
apTrustedHostRangeUpperIp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 10, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrustedHostRangeUpperIp.setStatus('current')
apRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 11))
apRouterDefaultGatewayInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lan1", 1), ("lan2", 2), ("wan", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRouterDefaultGatewayInterface.setStatus('current')
apManualTime = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12))
apManualCurrSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apManualCurrSystemDateTime.setStatus('current')
apManualTimeZoneSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2))
apManualTimeZoneTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1), )
if mibBuilder.loadTexts: apManualTimeZoneTable.setStatus('current')
apManualTimeZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apManualTimeZoneIndex"))
if mibBuilder.loadTexts: apManualTimeZoneEntry.setStatus('current')
apManualTimeZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 550))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apManualTimeZoneIndex.setStatus('current')
apManualTimeZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apManualTimeZoneName.setStatus('current')
apManualExpectedTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 2), SinglePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedTimeZone.setStatus('current')
apManualTimeZoneSet = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 2, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualTimeZoneSet.setStatus('current')
apManualDateTimeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3))
apManualExpectedYear = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1970, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedYear.setStatus('current')
apManualExpectedMonth = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedMonth.setStatus('current')
apManualExpectedDay = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedDay.setStatus('current')
apManualExpectedHour = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedHour.setStatus('current')
apManualExpectedMinutes = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedMinutes.setStatus('current')
apManualExpectedSeconds = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualExpectedSeconds.setStatus('current')
apManualDateTimeSet = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 12, 3, 7), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apManualDateTimeSet.setStatus('current')
apAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 13))
apLoginMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1))
apLoginMessageMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoginMessageMode.setStatus('current')
apLoginMessageText = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLoginMessageText.setStatus('current')
apRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14))
apRadiusUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1))
apRadiusUsersGroupTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1), )
if mibBuilder.loadTexts: apRadiusUsersGroupTable.setStatus('current')
apRadiusUsersGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadiusUsersGroup"))
if mibBuilder.loadTexts: apRadiusUsersGroupEntry.setStatus('current')
apRadiusUsersGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroup.setStatus('current')
apRadiusUsersGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 2), AbbrevRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroupRowStatus.setStatus('current')
apRadiusUsersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusUsersGroupId.setStatus('current')
apRadiusAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2))
apRadiusAccessTable = MibTable((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1), )
if mibBuilder.loadTexts: apRadiusAccessTable.setStatus('current')
apRadiusAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1), ).setIndexNames((0, "SYMBOL-AP-MIB", "apRadiusUsersGroup"))
if mibBuilder.loadTexts: apRadiusAccessEntry.setStatus('current')
apRadiusAccessWlanPtrs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("null", 0), ("wlan1", 1), ("wlan2", 2), ("wlan3", 3), ("wlan4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusAccessWlanPtrs.setStatus('current')
apRadiusAccessTimeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 11, 3, 14, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusAccessTimeRule.setStatus('current')
apWips = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 15))
apWipsPrimaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWipsPrimaryServerAddr.setStatus('current')
apWipsSecondaryServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWipsSecondaryServerAddr.setStatus('current')
apPower = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 16))
apPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeAuto", 1), ("mode3af", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPowerMode.setStatus('current')
apPowerDefRadio = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radio1", 1), ("radio2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPowerDefRadio.setStatus('current')
apPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 11, 3, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("power3af", 1), ("mid", 2), ("fullAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPowerStatus.setStatus('current')
apGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000))
apGroupsV1dot0 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1))
dot1xGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 1)).setObjects(("SYMBOL-AP-MIB", "dot1xPaePortNumber"), ("SYMBOL-AP-MIB", "dot1xPaeState"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthState"), ("SYMBOL-AP-MIB", "dot1xAuthAdminControlledDirections"), ("SYMBOL-AP-MIB", "dot1xAuthOperControlledDirections"), ("SYMBOL-AP-MIB", "dot1xAuthAuthControlledPortStatus"), ("SYMBOL-AP-MIB", "dot1xAuthAuthControlledPortControl"), ("SYMBOL-AP-MIB", "dot1xAuthQuietPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthTxPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthSuppTimeout"), ("SYMBOL-AP-MIB", "dot1xAuthServerTimeout"), ("SYMBOL-AP-MIB", "dot1xAuthMaxReq"), ("SYMBOL-AP-MIB", "dot1xAuthReAuthPeriod"), ("SYMBOL-AP-MIB", "dot1xAuthReAuthEnabled"), ("SYMBOL-AP-MIB", "dot1xAuthKeyTxEnabled"), ("SYMBOL-AP-MIB", "dot1xAuthEapolFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolStartFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolLogoffFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolRespIdFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolRespFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolReqIdFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthEapolReqFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthInvalidEapolFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthEapLengthErrorFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthLastEapolFrameVersion"), ("SYMBOL-AP-MIB", "dot1xAuthLastEapolFrameSource"), ("SYMBOL-AP-MIB", "dot1xAuthEntersConnecting"), ("SYMBOL-AP-MIB", "dot1xAuthEapLogoffsWhileConnecting"), ("SYMBOL-AP-MIB", "dot1xAuthEntersAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthSuccessWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthTimeoutsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthFailWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthReauthsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapStartsWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticating"), ("SYMBOL-AP-MIB", "dot1xAuthAuthReauthsWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapStartsWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthAuthEapLogoffWhileAuthenticated"), ("SYMBOL-AP-MIB", "dot1xAuthBackendResponses"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAccessChallenges"), ("SYMBOL-AP-MIB", "dot1xAuthBackendOtherRequestsToSupplicant"), ("SYMBOL-AP-MIB", "dot1xAuthBackendNonNakResponsesFromSupplicant"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthSuccesses"), ("SYMBOL-AP-MIB", "dot1xAuthBackendAuthFails"), ("SYMBOL-AP-MIB", "dot1xAuthSessionOctetsRx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionOctetsTx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionFramesRx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionFramesTx"), ("SYMBOL-AP-MIB", "dot1xAuthSessionId"), ("SYMBOL-AP-MIB", "dot1xAuthSessionAuthenticMethod"), ("SYMBOL-AP-MIB", "dot1xAuthSessionTime"), ("SYMBOL-AP-MIB", "dot1xAuthSessionTerminateCause"), ("SYMBOL-AP-MIB", "dot1xAuthSessionUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot1xGroup = dot1xGroup.setStatus('current')
apRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 2)).setObjects(("SYMBOL-AP-MIB", "apRadioSettingsIndex"), ("SYMBOL-AP-MIB", "apRadioSettingsName"), ("SYMBOL-AP-MIB", "apRadioSettingsMacAddress"), ("SYMBOL-AP-MIB", "apRadioSettingsAntenna"), ("SYMBOL-AP-MIB", "apRadioSettingsShortPreamble"), ("SYMBOL-AP-MIB", "apRadioSettingsRtsThresh"), ("SYMBOL-AP-MIB", "apRadioSettingsBeaconInt"), ("SYMBOL-AP-MIB", "apRadioSettingsEnable"), ("SYMBOL-AP-MIB", "apRadioSettingsBand"), ("SYMBOL-AP-MIB", "apRadioSettingsPointersToWlans"), ("SYMBOL-AP-MIB", "apRadioCfgDesPlacement"), ("SYMBOL-AP-MIB", "apRadioCfgPosChannel"), ("SYMBOL-AP-MIB", "apRadioCfgDesChannel"), ("SYMBOL-AP-MIB", "apRadioCfgPosPowerLevel"), ("SYMBOL-AP-MIB", "apRadioCfgDesPowerLevel"), ("SYMBOL-AP-MIB", "apRadioCfgPowerInMW"), ("SYMBOL-AP-MIB", "apRadioCfgSet"), ("SYMBOL-AP-MIB", "apRadioCfgReset"), ("SYMBOL-AP-MIB", "apRadioCfgPlacement"), ("SYMBOL-AP-MIB", "apRadioCfgChannel"), ("SYMBOL-AP-MIB", "apRadioCfgPowerLevel"), ("SYMBOL-AP-MIB", "apRadioBssIndex"), ("SYMBOL-AP-MIB", "apRadioBssPrimaryWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPointerToAclPolicy"), ("SYMBOL-AP-MIB", "apRadioSettingsBasicRates"), ("SYMBOL-AP-MIB", "apRadioSettingsSupportedRates"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoTxopsTime"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceCwMin"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceCwMax"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceAifsn"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceTxopsTime"), ("SYMBOL-AP-MIB", "apWlanIndex"), ("SYMBOL-AP-MIB", "apWlanName"), ("SYMBOL-AP-MIB", "apWlanEssid"), ("SYMBOL-AP-MIB", "apWlanEnable"), ("SYMBOL-AP-MIB", "apWlanUseRadio"), ("SYMBOL-AP-MIB", "apWlanMaxMus"), ("SYMBOL-AP-MIB", "apWlanAclPolicy"), ("SYMBOL-AP-MIB", "apWlanSecurityPolicy"), ("SYMBOL-AP-MIB", "apWlanQosPolicy"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosPassword"), ("SYMBOL-AP-MIB", "apWlanDisallowMuToMu"), ("SYMBOL-AP-MIB", "apWlanUseSecureBeacon"), ("SYMBOL-AP-MIB", "apWlanAnswerBroadcastEss"), ("SYMBOL-AP-MIB", "apWlanSecPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanSecPolicyName"), ("SYMBOL-AP-MIB", "apWlanSecPolicyAuthentication"), ("SYMBOL-AP-MIB", "apWlanSecPolicyEncryption"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationEnable"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapReauthenticationMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1Server"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1Port"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius1SharedSecret"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2Server"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2Port"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadius2SharedSecret"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuQuietPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuTxPeriod"), ("SYMBOL-AP-MIB", "apWlanAuthEapMuMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapServerTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapServerMaxRetries"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosRealmName"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIp1"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPort1"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIp2"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPort2"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcServerIpR"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosKdcPortR"), ("SYMBOL-AP-MIB", "apWlanCryptoWepPassKey"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey1"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey2"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey3"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKey4"), ("SYMBOL-AP-MIB", "apWlanCryptoWepKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipBcastKeyRotation"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKeyRotationInterval"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipPassphrase"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipKey"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpBcastKeyRotation"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKeyRotationInterval"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKeyToUse"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpPassphrase"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpKey"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey1"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey2"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey3"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKey4"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardKeyToUse"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyName"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyAccessMode"), ("SYMBOL-AP-MIB", "apWlanMuAclIndex"), ("SYMBOL-AP-MIB", "apWlanMuAclStartingMac"), ("SYMBOL-AP-MIB", "apWlanMuAclEndingMac"), ("SYMBOL-AP-MIB", "apWlanMuAclRowStatus"), ("SYMBOL-AP-MIB", "apWlanQosPolicyIndex"), ("SYMBOL-AP-MIB", "apWlanQosPolicyName"), ("SYMBOL-AP-MIB", "apWlanEnableWMM"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoTxopsTime"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceCwMin"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceCwMax"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceAifsn"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceTxopsTime"), ("SYMBOL-AP-MIB", "apWlanVoicePrioritization"), ("SYMBOL-AP-MIB", "apWlanMulticastAddr1"), ("SYMBOL-AP-MIB", "apWlanVlanId"), ("SYMBOL-AP-MIB", "apWlanSecPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanMulticastAddr2"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMode"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMuTimeout"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusAcctMuRetries"), ("SYMBOL-AP-MIB", "apWlanAuthEapSyslogMode"), ("SYMBOL-AP-MIB", "apWlanAuthEapSyslogServerIp"), ("SYMBOL-AP-MIB", "apWlanSecPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanMuAclPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanQosPolicyPointerToWlan"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBackgroundTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyBestEffortTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVideoTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apWlanQosPolicyVoiceTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsBGMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioCfgDesPowerInMW"), ("SYMBOL-AP-MIB", "apWlanQosPolicyRowStatus"), ("SYMBOL-AP-MIB", "apWlanBwShareMode"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatus"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatusMessage"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpFastRoamPreAuth"), ("SYMBOL-AP-MIB", "apWlanCryptoCcmpMixedMode"), ("SYMBOL-AP-MIB", "apRadioCfgChannelMode"), ("SYMBOL-AP-MIB", "apWlanAuthKerberosUsername"), ("SYMBOL-AP-MIB", "apRadioWlanBssid"), ("SYMBOL-AP-MIB", "apRadioSettingsE2BMapMessage"), ("SYMBOL-AP-MIB", "apRadioCfgRfFunction"), ("SYMBOL-AP-MIB", "apIpFilterPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterPolicyName"), ("SYMBOL-AP-MIB", "apIpFilterPolicyProtocol"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcStartIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcEndIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyDestStartIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyDestEndIp"), ("SYMBOL-AP-MIB", "apIpFilterPolicyUseStatus"), ("SYMBOL-AP-MIB", "apIpFilterPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterWlanMode"), ("SYMBOL-AP-MIB", "apIpFilterWlanDefInAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanDefOutAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyPolicy"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyDirection"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyAction"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterLanMode"), ("SYMBOL-AP-MIB", "apIpFilterLanDefInAction"), ("SYMBOL-AP-MIB", "apIpFilterLanDefOutAction"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyIndex"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyPolicy"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyDirection"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyAction"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyRowStatus"), ("SYMBOL-AP-MIB", "apIpFilterLanIndex"), ("SYMBOL-AP-MIB", "apWlanMuIdleTimeout"), ("SYMBOL-AP-MIB", "apRadioCfgExceptionChannel"), ("SYMBOL-AP-MIB", "apRadioNSettingsMode"), ("SYMBOL-AP-MIB", "apRadioNSettingsHTProtectionStatus"), ("SYMBOL-AP-MIB", "apRadioNSettingsBasicRates"), ("SYMBOL-AP-MIB", "apRadioNCfgPosChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgDesChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgChannel"), ("SYMBOL-AP-MIB", "apRadioNCfgChannelWidth"), ("SYMBOL-AP-MIB", "apRadioNCfgAmsduAggregationMaxRecvSize"), ("SYMBOL-AP-MIB", "apRadioNCfgAmsduTransmitEnabled"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduAggregationMaxRecvSize"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduAggregationDensity"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduTransmitSizeLimit"), ("SYMBOL-AP-MIB", "apRadioNCfgShortGuardInterval"), ("SYMBOL-AP-MIB", "apRadioNCfgAmpduTransmitEnabled"), ("SYMBOL-AP-MIB", "apRadioNCfgChannelOffset"), ("SYMBOL-AP-MIB", "apRadioNMcsRateIndex"), ("SYMBOL-AP-MIB", "apRadioNMcsRate20MHzChanSgiDisabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRate40MHzChanSgiDisabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRate40MHzChanSgiEnabled"), ("SYMBOL-AP-MIB", "apRadioNMcsRateType"), ("SYMBOL-AP-MIB", "apRadioNMcsRateEnabled"), ("SYMBOL-AP-MIB", "apPowerMode"), ("SYMBOL-AP-MIB", "apPowerDefRadio"), ("SYMBOL-AP-MIB", "apPowerStatus"), ("SYMBOL-AP-MIB", "apIpFilterWlanInPackets"), ("SYMBOL-AP-MIB", "apIpFilterWlanOutPackets"), ("SYMBOL-AP-MIB", "apIpFilterWlanPolicyPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanInPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanOutPackets"), ("SYMBOL-AP-MIB", "apIpFilterLanPolicyPackets"), ("SYMBOL-AP-MIB", "apWlanVlanMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceTxopsTimeInMS"), ("SYMBOL-AP-MIB", "apRadioE2BMapStatusBcMcEncCipher"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardPassKey"), ("SYMBOL-AP-MIB", "apIpFilterPolicyStartPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicyEndPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcStartPort"), ("SYMBOL-AP-MIB", "apIpFilterPolicySrcEndPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRfGroup = apRfGroup.setStatus('current')
apSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 3)).setObjects(("SYMBOL-AP-MIB", "apVlanIndex"), ("SYMBOL-AP-MIB", "apVlanId"), ("SYMBOL-AP-MIB", "apVlanRowStatus"), ("SYMBOL-AP-MIB", "apVlanPointerToWlan"), ("SYMBOL-AP-MIB", "apVlanName"), ("SYMBOL-AP-MIB", "apWnmpPingDestMu"), ("SYMBOL-AP-MIB", "apWnmpPingDestAP"), ("SYMBOL-AP-MIB", "apWnmpPingDest"), ("SYMBOL-AP-MIB", "apWnmpPingNum"), ("SYMBOL-AP-MIB", "apWnmpPingPacketLength"), ("SYMBOL-AP-MIB", "apWnmpPingPacketData"), ("SYMBOL-AP-MIB", "apWnmpPingAction"), ("SYMBOL-AP-MIB", "apWnmpPingNumResponses"), ("SYMBOL-AP-MIB", "apFlashLedDestAP"), ("SYMBOL-AP-MIB", "apFlashLedAction"), ("SYMBOL-AP-MIB", "apKnownApMac"), ("SYMBOL-AP-MIB", "apKnownApIndex"), ("SYMBOL-AP-MIB", "apKnownApIp"), ("SYMBOL-AP-MIB", "apKnownApMu"), ("SYMBOL-AP-MIB", "apKnownApType"), ("SYMBOL-AP-MIB", "apKnownApUnitName"), ("SYMBOL-AP-MIB", "apKnownApPktsPerSec"), ("SYMBOL-AP-MIB", "apSubnetDhcpState"), ("SYMBOL-AP-MIB", "apLan802dt1xAuthLogin"), ("SYMBOL-AP-MIB", "apLan802dt1xAuthPass"), ("SYMBOL-AP-MIB", "apKnownApKbPerSec"), ("SYMBOL-AP-MIB", "apKnownApFwVers"), ("SYMBOL-AP-MIB", "apLanTypeFilterIndex"), ("SYMBOL-AP-MIB", "apLanTypeFilter"), ("SYMBOL-AP-MIB", "apLanTypeFilterRowStatus"), ("SYMBOL-AP-MIB", "apWanVpnKeyAutoSALifeTime"), ("SYMBOL-AP-MIB", "apLanTimeOutValue"), ("SYMBOL-AP-MIB", "apLanTimeOut"), ("SYMBOL-AP-MIB", "apKnownApEssName"), ("SYMBOL-AP-MIB", "apKnownApRadioType1"), ("SYMBOL-AP-MIB", "apKnownApRadioType2"), ("SYMBOL-AP-MIB", "apKnownApChannel1"), ("SYMBOL-AP-MIB", "apKnownApChannel2"), ("SYMBOL-AP-MIB", "apKnownApSendCfgStatus"), ("SYMBOL-AP-MIB", "apKnownApSendCfg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSwitchGroup = apSwitchGroup.setStatus('current')
apTrapCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 4)).setObjects(("SYMBOL-AP-MIB", "apTrapCtrlRateLimit"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsIndex"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsDescr"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsUnits"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetMu"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdMu"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioA"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioA"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioBG"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioBG"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetWlan"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdWlans"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetAccessPoint"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdAccessPoint"), ("SYMBOL-AP-MIB", "apTrapCtrlEnableIndex"), ("SYMBOL-AP-MIB", "apTrapCtrlEnableName"), ("SYMBOL-AP-MIB", "apTrapCtrlEnable"), ("SYMBOL-AP-MIB", "apTrapRadioMac"), ("SYMBOL-AP-MIB", "apTrapLanMonitorReason"), ("SYMBOL-AP-MIB", "apTrapWpaCounterMeasureEssid"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioN2400MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioN2400MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsCanBeSetRadioN5000MHz"), ("SYMBOL-AP-MIB", "apTrapCtrlSumStatsThresholdRadioN5000MHz"), ("SYMBOL-AP-MIB", "apTrapLanMonitorMode"), ("SYMBOL-AP-MIB", "apTrapMuMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apTrapCtrlGroup = apTrapCtrlGroup.setStatus('current')
apRapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 5)).setObjects(("SYMBOL-AP-MIB", "apRapDetectorMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRapGroup = apRapGroup.setStatus('current')
apLoadCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 6)).setObjects(("SYMBOL-AP-MIB", "apLoadCfgOperation"), ("SYMBOL-AP-MIB", "apLoadCfgServerPath"), ("SYMBOL-AP-MIB", "apLoadCfgServerFilename"), ("SYMBOL-AP-MIB", "apLoadCfgServerIpAddr"), ("SYMBOL-AP-MIB", "apLoadCfgFtpUsername"), ("SYMBOL-AP-MIB", "apLoadCfgFtpPassword"), ("SYMBOL-AP-MIB", "apLoadCfgStart"), ("SYMBOL-AP-MIB", "apLoadCfgOperationsDone"), ("SYMBOL-AP-MIB", "apLoadCfgResult"), ("SYMBOL-AP-MIB", "apLoadCfgSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLoadCfgGroup = apLoadCfgGroup.setStatus('current')
apStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 7))
for _apStatsGroup_obj in [[("SYMBOL-AP-MIB", "apWanClearStats"), ("SYMBOL-AP-MIB", "apLanClearStats"), ("SYMBOL-AP-MIB", "apRadioClearStats"), ("SYMBOL-AP-MIB", "apWlanClearStats"), ("SYMBOL-AP-MIB", "apMuClearStats"), ("SYMBOL-AP-MIB", "apKnownAPClearStats"), ("SYMBOL-AP-MIB", "apDiagRamTotal"), ("SYMBOL-AP-MIB", "apnRadioStatsIndex"), ("SYMBOL-AP-MIB", "apnRadioStatsBssid"), ("SYMBOL-AP-MIB", "apnRadioStatsApSsid"), ("SYMBOL-AP-MIB", "apnRadioStatsChannel"), ("SYMBOL-AP-MIB", "apnRadioStatsExtnChannel"), ("SYMBOL-AP-MIB", "apnRadioStatsRssiAvgAcrossAntennas"), ("SYMBOL-AP-MIB", "apnRadioStatsChannelWidthMode"), ("SYMBOL-AP-MIB", "apnRadioStatsOpFreq"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxSGI400ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxSGI800ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxSGI400ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxSGI800ns"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxChanWidth20MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsRxChanWidth40MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxChanWidth20MHz"), ("SYMBOL-AP-MIB", "apnRadioStatsNumPktsTxChanWidth40MHz"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnPortalTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnMuTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt18Mb")], [("SYMBOL-AP-MIB", "apnWlanRxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanRxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanTxPktsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanRxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt1Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt2Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt5pt5Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt6Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt9Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt11Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt12Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt18Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt24Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt36Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt48Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAt54Mb"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS0"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS1"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS2"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS3"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS4"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS5"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS6"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS7"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS8"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS9"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS10"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS11"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS12"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS13"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS14"), ("SYMBOL-AP-MIB", "apnWlanTxOctetsAtMCS15"), ("SYMBOL-AP-MIB", "apLanRxDropped"), ("SYMBOL-AP-MIB", "apLanRxFrameErrors"), ("SYMBOL-AP-MIB", "apLanInfoSpeed"), ("SYMBOL-AP-MIB", "apLanInfoDuplexMode"), ("SYMBOL-AP-MIB", "apLanRxPkts"), ("SYMBOL-AP-MIB", "apLanRxBytes"), ("SYMBOL-AP-MIB", "apLanRxErrors"), ("SYMBOL-AP-MIB", "apLanInfoIndex"), ("SYMBOL-AP-MIB", "apLanInfoEnabled"), ("SYMBOL-AP-MIB", "apLanInfoIpAddress"), ("SYMBOL-AP-MIB", "apLanInfoNetworkMask"), ("SYMBOL-AP-MIB", "apLanInfoEthernetAddress"), ("SYMBOL-AP-MIB", "apLanTxPkts"), ("SYMBOL-AP-MIB", "apLanTxBytes"), ("SYMBOL-AP-MIB", "apLanTxErrors"), ("SYMBOL-AP-MIB", "apLanTxDropped"), ("SYMBOL-AP-MIB", "apLanTxFrameErrors"), ("SYMBOL-AP-MIB", "apDiagRamUsed"), ("SYMBOL-AP-MIB", "apDiagCpuLoad1Min"), ("SYMBOL-AP-MIB", "apDiagCpuLoad5Min"), ("SYMBOL-AP-MIB", "apDiagCpuLoad15Min"), ("SYMBOL-AP-MIB", "apDiagRamPercentageUsed")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        apStatsGroup = apStatsGroup.setObjects(*_apStatsGroup_obj)
    else:
        apStatsGroup = apStatsGroup.setObjects(*_apStatsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apStatsGroup = apStatsGroup.setStatus('current')
apNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 1, 8)).setObjects(("SYMBOL-AP-MIB", "apWpaCounterMeasure"), ("SYMBOL-AP-MIB", "apLanMonitor"), ("SYMBOL-AP-MIB", "apMuVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNotificationsGroup = apNotificationsGroup.setStatus('current')
apGroupsV1dot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2))
apGroupV1dot1variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 1)).setObjects(("SYMBOL-AP-MIB", "apSubnetTypeFilterAccessMode"), ("SYMBOL-AP-MIB", "apSubnetVlanEnable"), ("SYMBOL-AP-MIB", "apLanTypeFilterSubnetIndex"), ("SYMBOL-AP-MIB", "apMgmtAccessToAllow"), ("SYMBOL-AP-MIB", "apTrapCtrlMuMac"), ("SYMBOL-AP-MIB", "apTrapCtrlMuHotspotStateChange"), ("SYMBOL-AP-MIB", "apHotSpotDefaultFileMode"), ("SYMBOL-AP-MIB", "apHotSpotExternalLoginPageUrl"), ("SYMBOL-AP-MIB", "apHotSpotExternalWelomePageUrl"), ("SYMBOL-AP-MIB", "apHotSpotExternalFailPageUrl"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctMode"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctTimeout"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctRetryCount"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusServerIp"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusPort"), ("SYMBOL-AP-MIB", "apHotSpotPriRadiusSecret"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusServerIp"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusPort"), ("SYMBOL-AP-MIB", "apHotSpotSecRadiusSecret"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListIndex"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListWalledGardenIp"), ("SYMBOL-AP-MIB", "apHotSpotWhiteListRowStatus"), ("SYMBOL-AP-MIB", "apLanEthernetPort"), ("SYMBOL-AP-MIB", "apWlanSubnet"), ("SYMBOL-AP-MIB", "apRouterDefaultGatewayInterface"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtAcctServer"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtPort"), ("SYMBOL-AP-MIB", "apWlanAuthEapRadiusExtSharedSecret"), ("SYMBOL-AP-MIB", "apManualCurrSystemDateTime"), ("SYMBOL-AP-MIB", "apManualTimeZoneIndex"), ("SYMBOL-AP-MIB", "apManualTimeZoneName"), ("SYMBOL-AP-MIB", "apManualExpectedTimeZone"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctServerIp"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctPort"), ("SYMBOL-AP-MIB", "apHotSpotRadiusAcctSecret"), ("SYMBOL-AP-MIB", "apRadioSettingsERPProtectionStatus"), ("SYMBOL-AP-MIB", "apWlanClientBackHaul"), ("SYMBOL-AP-MIB", "apKnownApIndex"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac1"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac2"), ("SYMBOL-AP-MIB", "apKnownApRadio1ClientBridgeMac3"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac1"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac2"), ("SYMBOL-AP-MIB", "apKnownApRadio2ClientBridgeMac3"), ("SYMBOL-AP-MIB", "apWanPppoeClientIndex"), ("SYMBOL-AP-MIB", "apWanPppoeClientIp"), ("SYMBOL-AP-MIB", "apWanPppoeClientGateway"), ("SYMBOL-AP-MIB", "apWanPppoeClientPrimaryDNSServer"), ("SYMBOL-AP-MIB", "apWanPppoeClientSecondaryDNSServer"), ("SYMBOL-AP-MIB", "apSubnetAdminVlanTag"), ("SYMBOL-AP-MIB", "apSubnetNativeVlanTag"), ("SYMBOL-AP-MIB", "apRadioBssDtimPrd"), ("SYMBOL-AP-MIB", "apWlanHotspot"), ("SYMBOL-AP-MIB", "apManualTimeZoneSet"), ("SYMBOL-AP-MIB", "apManualExpectedYear"), ("SYMBOL-AP-MIB", "apManualExpectedMonth"), ("SYMBOL-AP-MIB", "apManualExpectedDay"), ("SYMBOL-AP-MIB", "apManualExpectedHour"), ("SYMBOL-AP-MIB", "apManualExpectedMinutes"), ("SYMBOL-AP-MIB", "apManualExpectedSeconds"), ("SYMBOL-AP-MIB", "apManualDateTimeSet"), ("SYMBOL-AP-MIB", "apWlanWMMQosParam"), ("SYMBOL-AP-MIB", "apRadioSettingsWMMQosParam"), ("SYMBOL-AP-MIB", "apRadioMeshBaseBridgeMode"), ("SYMBOL-AP-MIB", "apRadioMeshMaxClients"), ("SYMBOL-AP-MIB", "apRadioMeshClientBridgeMode"), ("SYMBOL-AP-MIB", "apRadioMeshWlanPtr"), ("SYMBOL-AP-MIB", "apLanBridgePriority"), ("SYMBOL-AP-MIB", "apLanBridgeMaxMsgAge"), ("SYMBOL-AP-MIB", "apMeshStatsIndex"), ("SYMBOL-AP-MIB", "apMeshStatsConnType"), ("SYMBOL-AP-MIB", "apMeshStatsMac"), ("SYMBOL-AP-MIB", "apMeshStatsWlanPtr"), ("SYMBOL-AP-MIB", "apMeshStatsRadioType"), ("SYMBOL-AP-MIB", "apMeshStatsThroughput"), ("SYMBOL-AP-MIB", "apMeshStatsAvgBitSpeed"), ("SYMBOL-AP-MIB", "apMeshStatsRetries"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsIndex"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsMac"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsWlanPtr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsLanPtr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsRadioType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAuthType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsEncType"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsPerSecRx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPksPerSecTx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsPerSecTotal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputRx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputTx"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsThroughputTotal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgBitSpeed"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuSignal"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuNoise"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgMuSnr"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsAvgRetries"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsPktsDropped"), ("SYMBOL-AP-MIB", "apLanSTPStatsDesignatedRoot"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeId"), ("SYMBOL-AP-MIB", "apLanSTPStatsRootPort"), ("SYMBOL-AP-MIB", "apLanSTPStatsRootPathCost"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeMaxMsgAge"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeHelloTime"), ("SYMBOL-AP-MIB", "apLanSTPStatsBridgeFwDelay"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfLanIndex"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortIndex"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPortName"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfState"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfPathCost"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgRoot"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgBridge"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgPort"), ("SYMBOL-AP-MIB", "apLanSTPStatsPortIntfDsgCost"), ("SYMBOL-AP-MIB", "apWlanCryptoKeyguardMixedMode"), ("SYMBOL-AP-MIB", "apWlanCryptoWepMixedMode"), ("SYMBOL-AP-MIB", "apRadioMeshConnAutoSelect"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnIndex"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnMac"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnChannel"), ("SYMBOL-AP-MIB", "apRadioMeshAvailableConnRssi"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnPriority"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnMac"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnRowStatus"), ("SYMBOL-AP-MIB", "apRadioMeshPreferredConnIndex"), ("SYMBOL-AP-MIB", "apTrapVlanId"), ("SYMBOL-AP-MIB", "apHotSpotRadiusSessMode"), ("SYMBOL-AP-MIB", "apHotSpotRadiusSessTimeout"), ("SYMBOL-AP-MIB", "apLanPortDuplex"), ("SYMBOL-AP-MIB", "apLanPortSpeed"), ("SYMBOL-AP-MIB", "apLanPortAutoNegotiation"), ("SYMBOL-AP-MIB", "apWanPortDuplex"), ("SYMBOL-AP-MIB", "apWanPortSpeed"), ("SYMBOL-AP-MIB", "apWanPortAutoNegotiation"), ("SYMBOL-AP-MIB", "apRadioMeshTimeout"), ("SYMBOL-AP-MIB", "apRadioMeshTimeoutValue"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipFastRoamPreAuth"), ("SYMBOL-AP-MIB", "apWlanCryptoTkipAllowWpa2Client"), ("SYMBOL-AP-MIB", "apWanDynDNSMode"), ("SYMBOL-AP-MIB", "apWanDynDNSUsername"), ("SYMBOL-AP-MIB", "apWanDynDNSPassword"), ("SYMBOL-AP-MIB", "apWanDynDNSHostname"), ("SYMBOL-AP-MIB", "apWanDynDNSIndex"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateStatus"), ("SYMBOL-AP-MIB", "apWanDynDNSUpdateResponseIndex"), ("SYMBOL-AP-MIB", "apWanDynDNSPerformUpdate"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateIp"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateHostname"), ("SYMBOL-AP-MIB", "apTrapCtrlDynDNSUpdateStatus"), ("SYMBOL-AP-MIB", "apLoginMessageMode"), ("SYMBOL-AP-MIB", "apLoginMessageText"), ("SYMBOL-AP-MIB", "apRadioSettingsQBSSChannelBeaconInt"), ("SYMBOL-AP-MIB", "apRadioWlanWeight"), ("SYMBOL-AP-MIB", "apRadiusUsersGroup"), ("SYMBOL-AP-MIB", "apRadiusUsersGroupRowStatus"), ("SYMBOL-AP-MIB", "apRadiusUsersGroupId"), ("SYMBOL-AP-MIB", "apRadiusAccessWlanPtrs"), ("SYMBOL-AP-MIB", "apRadiusAccessTimeRule"), ("SYMBOL-AP-MIB", "apRadioSettingsQBSSLoadElementMode"), ("SYMBOL-AP-MIB", "apRapDetectorABGMode"), ("SYMBOL-AP-MIB", "apMeshBridgeStatsUndecryptablePkts"), ("SYMBOL-AP-MIB", "apLanBridgeHelloTime"), ("SYMBOL-AP-MIB", "apLanBridgeFwdDelay"), ("SYMBOL-AP-MIB", "apLanBridgeEntryAgeout"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressRowStatus"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddress"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryIPAddressIndex"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryPort"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryInterface"), ("SYMBOL-AP-MIB", "apAapSwitchDiscoveryDomainName"), ("SYMBOL-AP-MIB", "apAapTunnelToSwitchEnable"), ("SYMBOL-AP-MIB", "apAapAcKeepAlive"), ("SYMBOL-AP-MIB", "apAapAdoptionState"), ("SYMBOL-AP-MIB", "apAapAdoptingSwitchIP"), ("SYMBOL-AP-MIB", "apMuLocationingIndex"), ("SYMBOL-AP-MIB", "apMuLocationingMuMac"), ("SYMBOL-AP-MIB", "apMuLocationingPortalMac"), ("SYMBOL-AP-MIB", "apMuLocationingSignalStrength"), ("SYMBOL-AP-MIB", "apMuLocationingHeardChannel"), ("SYMBOL-AP-MIB", "apMuLocationingHeardTime"), ("SYMBOL-AP-MIB", "apMuLocationingAddMuMac"), ("SYMBOL-AP-MIB", "apMuLocationingAddPortalMac"), ("SYMBOL-AP-MIB", "apMuLocationingAddSignalStrength"), ("SYMBOL-AP-MIB", "apMuLocationingAddHeardChannel"), ("SYMBOL-AP-MIB", "apMuLocationingAddHeardTime"), ("SYMBOL-AP-MIB", "apAapPassphrase"), ("SYMBOL-AP-MIB", "apWipsSecondaryServerAddr"), ("SYMBOL-AP-MIB", "apWipsPrimaryServerAddr"), ("SYMBOL-AP-MIB", "apTrustedHostEnable"), ("SYMBOL-AP-MIB", "apTrustedHostRangeIndex"), ("SYMBOL-AP-MIB", "apTrustedHostRangeLowerIp"), ("SYMBOL-AP-MIB", "apTrustedHostRangeUpperIp"), ("SYMBOL-AP-MIB", "apAapSwitchAutoDiscoveryEnable"), ("SYMBOL-AP-MIB", "apMuLocationingEnable"), ("SYMBOL-AP-MIB", "apMuLocationingClear"), ("SYMBOL-AP-MIB", "apMuLocationingMaxMus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1variables = apGroupV1dot1variables.setStatus('current')
apGroupV1dot1obsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 2)).setObjects(("SYMBOL-AP-MIB", "apLanAdminVlanTag"), ("SYMBOL-AP-MIB", "apLanNativeVlanTag"), ("SYMBOL-AP-MIB", "apRadioSettingsDtimPrd"), ("SYMBOL-AP-MIB", "apRadioSettingsVoiceMode"), ("SYMBOL-AP-MIB", "apRadioSettingsVideoMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBestEffortMode"), ("SYMBOL-AP-MIB", "apRadioSettingsBackgroundMode"), ("SYMBOL-AP-MIB", "apWlanWeight"), ("SYMBOL-AP-MIB", "apLanTypeFilterAccessMode"), ("SYMBOL-AP-MIB", "apLanVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1obsoleted = apGroupV1dot1obsoleted.setStatus('obsolete')
apGroupV1dot1deprecated = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 3)).setObjects(("SYMBOL-AP-MIB", "apLanEnable"), ("SYMBOL-AP-MIB", "apRadioNMcsRate20MHzChanSgiEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1deprecated = apGroupV1dot1deprecated.setStatus('deprecated')
apGroupV1dot1notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 2, 4)).setObjects(("SYMBOL-AP-MIB", "apMuHotspotState"), ("SYMBOL-AP-MIB", "apDynDNSUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV1dot1notifications = apGroupV1dot1notifications.setStatus('current')
apGroupsV2dot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 3))
apGroupV2dot2variables = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 11, 3, 1000, 3, 1)).setObjects(("SYMBOL-AP-MIB", "apReliableMulticastMode"), ("SYMBOL-AP-MIB", "apReliableMulticastWlan"), ("SYMBOL-AP-MIB", "apReliableMulticastStandaloneMode"), ("SYMBOL-AP-MIB", "apReliableMulticastIgmpQueryVersion"), ("SYMBOL-AP-MIB", "apReliableMulticastIgmpQueryInterval"), ("SYMBOL-AP-MIB", "apReliableMulticastAddrIndex"), ("SYMBOL-AP-MIB", "apReliableMulticastAddress"), ("SYMBOL-AP-MIB", "apReliableMulticastMUStatsIPAddr"), ("SYMBOL-AP-MIB", "apReliableMulticastMUMacAddr"), ("SYMBOL-AP-MIB", "apReliableMulticastTxMulticast"), ("SYMBOL-AP-MIB", "apReliableMulticastTableRowEnable"), ("SYMBOL-AP-MIB", "apReliableMulticastMUStatsIndex"), ("SYMBOL-AP-MIB", "apReliableMulticastMaxStreams"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apGroupV2dot2variables = apGroupV2dot2variables.setStatus('current')
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apRadioSettingsMacAddress=apRadioSettingsMacAddress, apnMuTxPktsAtMCS12=apnMuTxPktsAtMCS12, apRadioMeshBaseBridgeMode=apRadioMeshBaseBridgeMode, apLanRxPktsEntry=apLanRxPktsEntry, apnPortalRxOctetsAt5pt5Mb=apnPortalRxOctetsAt5pt5Mb, apLanTxFrameErrors=apLanTxFrameErrors, apnRadioStatsApSsid=apnRadioStatsApSsid, apnMuRxOctetsAtMCS10=apnMuRxOctetsAtMCS10, apnWlanRxOctetsAtMCS11=apnWlanRxOctetsAtMCS11, apTrustedHostEnable=apTrustedHostEnable, apIpFilterWlanPolicyAction=apIpFilterWlanPolicyAction, apWlanAuthEapSyslogServerIp=apWlanAuthEapSyslogServerIp, apAapPassphrase=apAapPassphrase, apMeshBridgeStatsThroughputTotal=apMeshBridgeStatsThroughputTotal, apLanSTPStatsDesignatedRoot=apLanSTPStatsDesignatedRoot, apLanInfoDuplexMode=apLanInfoDuplexMode, apMuLocationingClear=apMuLocationingClear, apHotSpotWhiteListTable=apHotSpotWhiteListTable, apGroupsV2dot2=apGroupsV2dot2, apGroupV1dot1deprecated=apGroupV1dot1deprecated, apKnownApMu=apKnownApMu, apnWlanRxOctetsEntry=apnWlanRxOctetsEntry, apWanVpnKeyAutoTable=apWanVpnKeyAutoTable, apAapSwitchDiscoveryIPAddressIndex=apAapSwitchDiscoveryIPAddressIndex, apnMuRxOctetsAtMCS8=apnMuRxOctetsAtMCS8, apnWlanRxPktsAt2Mb=apnWlanRxPktsAt2Mb, apWlanQosPolicyBackgroundTxopsTime=apWlanQosPolicyBackgroundTxopsTime, apWanPort=apWanPort, apRadiusAccessTimeRule=apRadiusAccessTimeRule, apnWlanTxPktsAtMCS5=apnWlanTxPktsAtMCS5, apTrapCtrlSumStatsUnits=apTrapCtrlSumStatsUnits, apIpFilterLanInPackets=apIpFilterLanInPackets, apTrapCtrlSumStatsThresholdRadioN2400MHz=apTrapCtrlSumStatsThresholdRadioN2400MHz, apnPortalRxOctetsEntry=apnPortalRxOctetsEntry, apnWlanTxPktsAt54Mb=apnWlanTxPktsAt54Mb, apWlanAclPolicy=apWlanAclPolicy, apWlanCryptoCcmpMixedMode=apWlanCryptoCcmpMixedMode, apWlanQosPolicyVideoTxopsTime=apWlanQosPolicyVideoTxopsTime, apRadiusAccessEntry=apRadiusAccessEntry, apRadioSettingsVoiceCwMin=apRadioSettingsVoiceCwMin, apnPortalRxPktsAtMCS9=apnPortalRxPktsAtMCS9, apLoadCfgResult=apLoadCfgResult, apnWlanTxPktsAt2Mb=apnWlanTxPktsAt2Mb, ap7131=ap7131, apnRadioStatsNumPktsRxChanWidth40MHz=apnRadioStatsNumPktsRxChanWidth40MHz, apRadioMeshTimeout=apRadioMeshTimeout, apnWlanRxPktsAtMCS7=apnWlanRxPktsAtMCS7, apnWlanTxOctetsEntry=apnWlanTxOctetsEntry, apLanInfoEnabled=apLanInfoEnabled, apLanTxDropped=apLanTxDropped, apRapDetectorABGMode=apRapDetectorABGMode, apKnownApIp=apKnownApIp, apnPortalTxOctetsEntry=apnPortalTxOctetsEntry, apIpFilterWlanTable=apIpFilterWlanTable, apReliableMulticastMUStatsIPAddr=apReliableMulticastMUStatsIPAddr, apWnmpPingNumResponses=apWnmpPingNumResponses, apRadioCfgSet=apRadioCfgSet, apRadioNCfgChannelOffset=apRadioNCfgChannelOffset, apnPortalTxOctetsTable=apnPortalTxOctetsTable, apnPortalTxOctetsAtMCS6=apnPortalTxOctetsAtMCS6, apRadioBssEntry=apRadioBssEntry, apRadioNMcsRateEnabled=apRadioNMcsRateEnabled, apRadioBssDtimPrd=apRadioBssDtimPrd, apIpFilterPolicyIndex=apIpFilterPolicyIndex, apDiagCpuLoad1Min=apDiagCpuLoad1Min, apnPortalTxPktsAtMCS13=apnPortalTxPktsAtMCS13, apLanTxBytes=apLanTxBytes, apIpFilterWlanPolicyPackets=apIpFilterWlanPolicyPackets, apRadiusAccess=apRadiusAccess, apnPortalRxOctetsAt1Mb=apnPortalRxOctetsAt1Mb, apnWlanRxPktsAtMCS8=apnWlanRxPktsAtMCS8, apRadioBssIndex=apRadioBssIndex, apWlanMulticastAddr2=apWlanMulticastAddr2, apLanSTPStatsPortIntfPortIndex=apLanSTPStatsPortIntfPortIndex, apnPortalRxPktsAt12Mb=apnPortalRxPktsAt12Mb, apWlanQosPolicyBestEffortCwMin=apWlanQosPolicyBestEffortCwMin, apLanSTPStatsTable=apLanSTPStatsTable, apnWlanRxPktsAtMCS5=apnWlanRxPktsAtMCS5, apMuLocationingHeardTime=apMuLocationingHeardTime, apDiagCpuLoad15Min=apDiagCpuLoad15Min, apLanTimeOut=apLanTimeOut, apnPortalRxOctetsAt54Mb=apnPortalRxOctetsAt54Mb, apRadioSettingsRtsThresh=apRadioSettingsRtsThresh, apWlanCryptoKeyguardMixedMode=apWlanCryptoKeyguardMixedMode, apWlanAuthKerberosKdcPortR=apWlanAuthKerberosKdcPortR, apWlanAuthKerberosRealmName=apWlanAuthKerberosRealmName, apIpFilterPolicySrcEndPort=apIpFilterPolicySrcEndPort, apWlanAuthKerberosPassword=apWlanAuthKerberosPassword, apWlanAuthEapEntry=apWlanAuthEapEntry, apLoadCfgOperation=apLoadCfgOperation, apnRadioStatsNumPktsTxSGI400ns=apnRadioStatsNumPktsTxSGI400ns, apLanTypeFilterEntry=apLanTypeFilterEntry, apnMuTxOctetsAt24Mb=apnMuTxOctetsAt24Mb, apnWlanRxOctetsAtMCS13=apnWlanRxOctetsAtMCS13, apRadioNMcsRateTable=apRadioNMcsRateTable, apWlanVlanMode=apWlanVlanMode, apWanDynDNS=apWanDynDNS, apWanDynDNSUpdateIp=apWanDynDNSUpdateIp, apnWlanTxPktsAtMCS14=apnWlanTxPktsAtMCS14, apReliableMulticastAddrIndex=apReliableMulticastAddrIndex, apnPortalRxPktsAt24Mb=apnPortalRxPktsAt24Mb, apnPortalRxOctetsAt6Mb=apnPortalRxOctetsAt6Mb, apnMuRxPktsAtMCS3=apnMuRxPktsAtMCS3, apWanPppoeClientGateway=apWanPppoeClientGateway, apWanPortDuplex=apWanPortDuplex, apRadioSettingsVoiceTxopsTime=apRadioSettingsVoiceTxopsTime, dot1xPaeState=dot1xPaeState, apWlanSecPolicyEntry=apWlanSecPolicyEntry, apWnmpPingAction=apWnmpPingAction, apTrapCtrlSumStatsThresholdRadioN5000MHz=apTrapCtrlSumStatsThresholdRadioN5000MHz, apRadioSettingsBestEffortCwMin=apRadioSettingsBestEffortCwMin, apTrapCtrlDynDNSUpdate=apTrapCtrlDynDNSUpdate, apLoadCfgServerIpAddr=apLoadCfgServerIpAddr, apTrapCtrlSumStatsCanBeSetRadioN2400MHz=apTrapCtrlSumStatsCanBeSetRadioN2400MHz, apTrapWpaCounterMeasureEssid=apTrapWpaCounterMeasureEssid, apLanSTPStatsPortIntfDsgCost=apLanSTPStatsPortIntfDsgCost, apRadioNMcsRate40MHzChanSgiEnabled=apRadioNMcsRate40MHzChanSgiEnabled, apWlanAuthEapRadiusExtPort=apWlanAuthEapRadiusExtPort, apTrapLanMonitor=apTrapLanMonitor, apHotSpotRadiusAcctRetryCount=apHotSpotRadiusAcctRetryCount, apWanDynDNSTable=apWanDynDNSTable, apnPortalRxOctetsAtMCS12=apnPortalRxOctetsAtMCS12, apMgmtAccessToAllow=apMgmtAccessToAllow, apnMuTxPktsAt2Mb=apnMuTxPktsAt2Mb, apWlanAuthEapRadiusAcctMuTimeout=apWlanAuthEapRadiusAcctMuTimeout, apHotSpotRadiusAcctMode=apHotSpotRadiusAcctMode, dot1xAuthSessionId=dot1xAuthSessionId, apRadioMeshTable=apRadioMeshTable, apWlanAuthEapReauthenticationEnable=apWlanAuthEapReauthenticationEnable, apnMuRxOctetsAt6Mb=apnMuRxOctetsAt6Mb, apWlanAuthEapRadius2Server=apWlanAuthEapRadius2Server, DateAndTime=DateAndTime, apIpFilterWlanMode=apIpFilterWlanMode, apRadioSettingsVideoTxopsTimeInMS=apRadioSettingsVideoTxopsTimeInMS, apLanTypeFilterTable=apLanTypeFilterTable, apTrapCtrlEnableTable=apTrapCtrlEnableTable, apnPortalRxPktsAtMCS11=apnPortalRxPktsAtMCS11, apWlanAuthEapReauthenticationMaxRetries=apWlanAuthEapReauthenticationMaxRetries, apnPortalRxOctetsAtMCS9=apnPortalRxOctetsAtMCS9, apnMuRxPktsAt54Mb=apnMuRxPktsAt54Mb, apWlanEnable=apWlanEnable, apnMuTxOctetsAt9Mb=apnMuTxOctetsAt9Mb, apLanInfoSpeed=apLanInfoSpeed, apManualExpectedYear=apManualExpectedYear, apLanVlan=apLanVlan, dot1xAuthEapolStartFramesRx=dot1xAuthEapolStartFramesRx, apWlanMuAclPolicyName=apWlanMuAclPolicyName, apVlanId=apVlanId, symbol=symbol, apnPortalRxPktsAtMCS0=apnPortalRxPktsAtMCS0, apnPortalTxPktsAtMCS12=apnPortalTxPktsAtMCS12, apnWlanRxPktsAt54Mb=apnWlanRxPktsAt54Mb, apWanVpnKeyAutoSALifeTime=apWanVpnKeyAutoSALifeTime, apnMuRxPktsAt6Mb=apnMuRxPktsAt6Mb, apnWlanTxOctetsAtMCS2=apnWlanTxOctetsAtMCS2, apnMuTxPktsAt5pt5Mb=apnMuTxPktsAt5pt5Mb, dot1xAuthAuthEapStartsWhileAuthenticated=dot1xAuthAuthEapStartsWhileAuthenticated, apHotSpotSecRadiusPort=apHotSpotSecRadiusPort, apnMuTxOctetsAtMCS10=apnMuTxOctetsAtMCS10, apRadioE2BMapStatusEntry=apRadioE2BMapStatusEntry, apnMuRxPktsAtMCS14=apnMuRxPktsAtMCS14, apMeshBridgeStatsPktsPerSecTotal=apMeshBridgeStatsPktsPerSecTotal, apRadioSettingsVideoCwMin=apRadioSettingsVideoCwMin, apnMuRxOctetsEntry=apnMuRxOctetsEntry, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, apHotSpotRadiusSessTimeout=apHotSpotRadiusSessTimeout, apHotSpotWhiteListRowStatus=apHotSpotWhiteListRowStatus, apnMuRxPktsAtMCS10=apnMuRxPktsAtMCS10, apMeshBridgeStatsMac=apMeshBridgeStatsMac, apnWlanTxPktsAt11Mb=apnWlanTxPktsAt11Mb, apWlanAuthKerberosKdcServerIp1=apWlanAuthKerberosKdcServerIp1, apWlanVlanId=apWlanVlanId, apnMuTxPktsAtMCS5=apnMuTxPktsAtMCS5, apFlashLed=apFlashLed, apRadioMeshPreferredConnPriority=apRadioMeshPreferredConnPriority, apTrapCtrl=apTrapCtrl, apLanRxFrameErrors=apLanRxFrameErrors, apRadioSettingsBestEffortTxopsTimeInMS=apRadioSettingsBestEffortTxopsTimeInMS, apWlanEnableWMM=apWlanEnableWMM, apnMuTxPktsAt24Mb=apnMuTxPktsAt24Mb, apTrapWpaCounterMeasure=apTrapWpaCounterMeasure, apnMuTxPktsAtMCS14=apnMuTxPktsAtMCS14, dot1xAuthStatsEntry=dot1xAuthStatsEntry, apRadioSettingsBestEffortMode=apRadioSettingsBestEffortMode, apWlanAuthEapMuTimeout=apWlanAuthEapMuTimeout, apReliableMulticastIgmpQueryVersion=apReliableMulticastIgmpQueryVersion, apLanTypeFilterAccessMode=apLanTypeFilterAccessMode, apRadioSettingsBackgroundAifsn=apRadioSettingsBackgroundAifsn, apIpFilterWlanPolicyRowStatus=apIpFilterWlanPolicyRowStatus, apnPortalTxOctetsAt2Mb=apnPortalTxOctetsAt2Mb, apnMuRxOctetsAtMCS3=apnMuRxOctetsAtMCS3, apRadioCfgPowerLevel=apRadioCfgPowerLevel, apWanPppoeClientSecondaryDNSServer=apWanPppoeClientSecondaryDNSServer, apnWlanTxPktsAtMCS2=apnWlanTxPktsAtMCS2, apLanTxPktsTable=apLanTxPktsTable, apnPortalTxOctetsAtMCS9=apnPortalTxOctetsAtMCS9, apWlanSecPolicyTable=apWlanSecPolicyTable, apRadioCfgChannel=apRadioCfgChannel, apRadioSettingsBestEffortCwMax=apRadioSettingsBestEffortCwMax, apWlanAuthEapReauthenticationPeriod=apWlanAuthEapReauthenticationPeriod, apnPortalTxPktsAt2Mb=apnPortalTxPktsAt2Mb, apWips=apWips, dot1xAuthAuthTimeoutsWhileAuthenticating=dot1xAuthAuthTimeoutsWhileAuthenticating, apnPortalTxOctetsAt18Mb=apnPortalTxOctetsAt18Mb, apRadioSettingsBackgroundMode=apRadioSettingsBackgroundMode, apReliableMulticast=apReliableMulticast, apWlanCryptoWepEntry=apWlanCryptoWepEntry, apnMuRxOctetsAt9Mb=apnMuRxOctetsAt9Mb, apnWlanRxOctetsAt24Mb=apnWlanRxOctetsAt24Mb, apLoginMessageMode=apLoginMessageMode, apnMuTxPktsAt11Mb=apnMuTxPktsAt11Mb, apnPortalRxOctetsAtMCS1=apnPortalRxOctetsAtMCS1, apnPortalTxOctetsAtMCS4=apnPortalTxOctetsAtMCS4, apWanDynDNSUpdateResponseEntry=apWanDynDNSUpdateResponseEntry, apnMuRxOctetsAtMCS0=apnMuRxOctetsAtMCS0, apnPortalRxOctetsAtMCS3=apnPortalRxOctetsAtMCS3, dot1xAuthAuthControlledPortStatus=dot1xAuthAuthControlledPortStatus, apIpFilterPolicySrcStartPort=apIpFilterPolicySrcStartPort, dot1xAuthSessionTime=dot1xAuthSessionTime, apHotSpotRadiusAcctSecret=apHotSpotRadiusAcctSecret, apRadioSettingsVoiceTxopsTimeInMS=apRadioSettingsVoiceTxopsTimeInMS, apTrapCtrlEnable=apTrapCtrlEnable, apWlanAuthEapRadius2SharedSecret=apWlanAuthEapRadius2SharedSecret, apnPortalTxPktsAtMCS0=apnPortalTxPktsAtMCS0, apRadioSettingsBestEffortAifsn=apRadioSettingsBestEffortAifsn, apnPortalRxPktsAtMCS15=apnPortalRxPktsAtMCS15, apDiagRamUsed=apDiagRamUsed, apnPortalTxOctetsAtMCS10=apnPortalTxOctetsAtMCS10, apWlanAuthEapServerMaxRetries=apWlanAuthEapServerMaxRetries, apReliableMulticastMode=apReliableMulticastMode, dot1xAuthOperControlledDirections=dot1xAuthOperControlledDirections, apRadioSettingsVideoMode=apRadioSettingsVideoMode, apWlanMuAclPolicyEntry=apWlanMuAclPolicyEntry, apWlanQosPolicyRowStatus=apWlanQosPolicyRowStatus, apnWlanTxPktsAtMCS9=apnWlanTxPktsAtMCS9, apWanClearStats=apWanClearStats, apRadioSettingsE2BMapMessage=apRadioSettingsE2BMapMessage, apWlanCryptoKeyguardKey2=apWlanCryptoKeyguardKey2, apMeshBridgeStatsAvgRetries=apMeshBridgeStatsAvgRetries, apnPortalRxPktsAt48Mb=apnPortalRxPktsAt48Mb, apManualExpectedTimeZone=apManualExpectedTimeZone, apRadioMeshWlanPtr=apRadioMeshWlanPtr, apHotSpotWhiteListWalledGardenIp=apHotSpotWhiteListWalledGardenIp, apnPortalRxPktsAtMCS1=apnPortalRxPktsAtMCS1, apWlanCryptoCcmpKeyRotationInterval=apWlanCryptoCcmpKeyRotationInterval, apWlanCryptoKeyguardKey4=apWlanCryptoKeyguardKey4, apnPortalTxPktsAtMCS7=apnPortalTxPktsAtMCS7, apRadioSettingsVoiceCwMax=apRadioSettingsVoiceCwMax, apWlanAuthEapRadius1SharedSecret=apWlanAuthEapRadius1SharedSecret, apWlanCryptoCcmpKey=apWlanCryptoCcmpKey, apMeshStatsTable=apMeshStatsTable, apnPortalTxOctetsAt54Mb=apnPortalTxOctetsAt54Mb, apWlanCryptoKeyguardTable=apWlanCryptoKeyguardTable, apnPortalTxOctetsAtMCS5=apnPortalTxOctetsAtMCS5)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apWlanMuAclPolicyAccessMode=apWlanMuAclPolicyAccessMode, apRadioNMcsRateType=apRadioNMcsRateType, apRadioSettingsBackgroundCwMax=apRadioSettingsBackgroundCwMax, apIpFilterLanTable=apIpFilterLanTable, apnPortalRxOctetsAtMCS13=apnPortalRxOctetsAtMCS13, apnWlanRxOctetsAt5pt5Mb=apnWlanRxOctetsAt5pt5Mb, apRadioSettingsBGMode=apRadioSettingsBGMode, apRadioSettingsIndex=apRadioSettingsIndex, apnWlanRxOctetsAt11Mb=apnWlanRxOctetsAt11Mb, apWlanCryptoWepKey1=apWlanCryptoWepKey1, apnWlanTxOctetsAt9Mb=apnWlanTxOctetsAt9Mb, apLanRxPktsTable=apLanRxPktsTable, dot1xAuthSessionFramesTx=dot1xAuthSessionFramesTx, apIpFilterLan=apIpFilterLan, apWlanAuthEapRadiusExtAcctServer=apWlanAuthEapRadiusExtAcctServer, apWanDynDNSUsername=apWanDynDNSUsername, apWlanQosPolicyBackgroundCwMax=apWlanQosPolicyBackgroundCwMax, apRadioNCfgAmpduAggregationMaxRecvSize=apRadioNCfgAmpduAggregationMaxRecvSize, apFlashLedAction=apFlashLedAction, RowStatus=RowStatus, apLanSTPStatsBridgeId=apLanSTPStatsBridgeId, apnPortalRxPktsAtMCS4=apnPortalRxPktsAtMCS4, apnMuRxPktsAtMCS12=apnMuRxPktsAtMCS12, apnPortalTxPktsAt1Mb=apnPortalTxPktsAt1Mb, apTrapCtrlSumStatsCanBeSetRadioBG=apTrapCtrlSumStatsCanBeSetRadioBG, apAapSwitchDiscoveryInterface=apAapSwitchDiscoveryInterface, apWlanCryptoTkipAllowWpa2Client=apWlanCryptoTkipAllowWpa2Client, apIpFilterWlanEntry=apIpFilterWlanEntry, dot1xAuthSessionAuthenticMethod=dot1xAuthSessionAuthenticMethod, apHotSpotDefaultFileMode=apHotSpotDefaultFileMode, apnPortalTxOctetsAt24Mb=apnPortalTxOctetsAt24Mb, apnWlanTxPktsAtMCS6=apnWlanTxPktsAtMCS6, apRadioNMcsRate40MHzChanSgiDisabled=apRadioNMcsRate40MHzChanSgiDisabled, apnPortalTxOctetsAtMCS11=apnPortalTxOctetsAtMCS11, apWlanCrypto=apWlanCrypto, apDiagRamPercentageUsed=apDiagRamPercentageUsed, apRapControlDetectors=apRapControlDetectors, abgAP=abgAP, apRadioMeshAvailableConnChannel=apRadioMeshAvailableConnChannel, apnWlanRxOctetsAtMCS3=apnWlanRxOctetsAtMCS3, apWlanUseSecureBeacon=apWlanUseSecureBeacon, apWlanCryptoKeyguardKeyToUse=apWlanCryptoKeyguardKeyToUse, apRadioCfgDesPlacement=apRadioCfgDesPlacement, apnWlanRxPktsTable=apnWlanRxPktsTable, apnWlanRxPktsAtMCS13=apnWlanRxPktsAtMCS13, apLanSTPStatsEntry=apLanSTPStatsEntry, apVlanName=apVlanName, apnPortalRxPktsAtMCS5=apnPortalRxPktsAtMCS5, apTrapCtrlSumStatsThresholdRadioA=apTrapCtrlSumStatsThresholdRadioA, apLanBridgeTable=apLanBridgeTable, apnPortalRxOctetsAt12Mb=apnPortalRxOctetsAt12Mb, apWlan=apWlan, apLanPortDuplex=apLanPortDuplex, apAapSwitchAutoDiscoveryEnable=apAapSwitchAutoDiscoveryEnable, apnMuRxPktsAtMCS2=apnMuRxPktsAtMCS2, apRadioMeshConnAutoSelect=apRadioMeshConnAutoSelect, apMuLocationingAddPortalMac=apMuLocationingAddPortalMac, dot1xAuthEapolReqFramesTx=dot1xAuthEapolReqFramesTx, apTrustedHostRangeUpperIp=apTrustedHostRangeUpperIp, apnWlanTxOctetsAt11Mb=apnWlanTxOctetsAt11Mb, apnWlanTxPktsAtMCS10=apnWlanTxPktsAtMCS10, apWlanMuAclIndex=apWlanMuAclIndex, apKnownApSendCfg=apKnownApSendCfg, apIpFilterLanPolicyPackets=apIpFilterLanPolicyPackets, apnMuTxPktsAtMCS13=apnMuTxPktsAtMCS13, apRf=apRf, apRadioMeshAvailableConnEntry=apRadioMeshAvailableConnEntry, apRadioNSettingsTable=apRadioNSettingsTable, apTrustedHostRangeIndex=apTrustedHostRangeIndex, apRadioSettingsBasicRates=apRadioSettingsBasicRates, apRadioNSettingsEntry=apRadioNSettingsEntry, apIpFilterPolicyEntry=apIpFilterPolicyEntry, apnWlanRxPktsAt36Mb=apnWlanRxPktsAt36Mb, apnPortalRxPktsAt5pt5Mb=apnPortalRxPktsAt5pt5Mb, apKnownApRadioType1=apKnownApRadioType1, apnPortalRxOctetsAt48Mb=apnPortalRxOctetsAt48Mb, apnWlanRxOctetsAt54Mb=apnWlanRxOctetsAt54Mb, apNotificationsGroup=apNotificationsGroup, apMeshBridgeStatsAvgMuNoise=apMeshBridgeStatsAvgMuNoise, apHotSpotRadiusAcctServerIp=apHotSpotRadiusAcctServerIp, apnPortalTxPktsAtMCS10=apnPortalTxPktsAtMCS10, apWlanWMMQosParam=apWlanWMMQosParam, apnWlanTxOctetsAtMCS4=apnWlanTxOctetsAtMCS4, apnPortalTxOctetsAtMCS15=apnPortalTxOctetsAtMCS15, apWlanSecPolicyIndex=apWlanSecPolicyIndex, apKnownApSendCfgStatus=apKnownApSendCfgStatus, dot1xAuthSessionStatsEntry=dot1xAuthSessionStatsEntry, apnWlanRxOctetsAt1Mb=apnWlanRxOctetsAt1Mb, apStats=apStats, apnMuRxPktsAtMCS6=apnMuRxPktsAtMCS6, apnPortalTxOctetsAtMCS0=apnPortalTxOctetsAtMCS0, apnWlanRxPktsAtMCS15=apnWlanRxPktsAtMCS15, apLoadCfgServerFilename=apLoadCfgServerFilename, apnWlanRxPktsAt5pt5Mb=apnWlanRxPktsAt5pt5Mb, ap7181=ap7181, apWanPppoeClientTable=apWanPppoeClientTable, apManualTimeZoneTable=apManualTimeZoneTable, dot1xAuthSessionFramesRx=dot1xAuthSessionFramesRx, AllowedChannels=AllowedChannels, apRadioCfgTable=apRadioCfgTable, apRadioNSettingsBasicRates=apRadioNSettingsBasicRates, apnPortalTxPktsAtMCS1=apnPortalTxPktsAtMCS1, apnRadioStatsNumPktsRxSGI400ns=apnRadioStatsNumPktsRxSGI400ns, apWpaCounterMeasure=apWpaCounterMeasure, dot1xAuthAuthFailWhileAuthenticating=dot1xAuthAuthFailWhileAuthenticating, apLanEthernetPort=apLanEthernetPort, apnRadioStatsBssid=apnRadioStatsBssid, apMeshBridgeStatsIndex=apMeshBridgeStatsIndex, apRouterDefaultGatewayInterface=apRouterDefaultGatewayInterface, apRadioNCfgAmpduAggregationDensity=apRadioNCfgAmpduAggregationDensity, dot1xAuthEapolLogoffFramesRx=dot1xAuthEapolLogoffFramesRx, apWlanMuAclStartingMac=apWlanMuAclStartingMac, apnPortalTxPktsAtMCS8=apnPortalTxPktsAtMCS8, apRadioSettingsEnable=apRadioSettingsEnable, apnPortalTxPktsAt9Mb=apnPortalTxPktsAt9Mb, apnPortalTxOctetsAtMCS8=apnPortalTxOctetsAtMCS8, apWlanSubnet=apWlanSubnet, apIpFilterWlanOutPackets=apIpFilterWlanOutPackets, apnWlanTxOctetsAt12Mb=apnWlanTxOctetsAt12Mb, apnMuRxOctetsAt2Mb=apnMuRxOctetsAt2Mb, apRadiusAccessWlanPtrs=apRadiusAccessWlanPtrs, apnMuRxPktsAt12Mb=apnMuRxPktsAt12Mb, apnPortalTxPktsAt11Mb=apnPortalTxPktsAt11Mb, apnWlanTxOctetsAt24Mb=apnWlanTxOctetsAt24Mb, apRadioWlanBandwidthEntry=apRadioWlanBandwidthEntry, apManualExpectedMinutes=apManualExpectedMinutes, apLanTypeFilterRowStatus=apLanTypeFilterRowStatus, apRadiusUsersGroup=apRadiusUsersGroup, dot1xAuthAdminControlledDirections=dot1xAuthAdminControlledDirections, apnPortalTxPktsAtMCS5=apnPortalTxPktsAtMCS5, dot1xAuthMaxReq=dot1xAuthMaxReq, apWlanTable=apWlanTable, apMeshStatsIndex=apMeshStatsIndex, apMeshBridgeStatsPktsPerSecRx=apMeshBridgeStatsPktsPerSecRx, apMeshBridgeStatsUndecryptablePkts=apMeshBridgeStatsUndecryptablePkts, apnMuRxOctetsAtMCS4=apnMuRxOctetsAtMCS4, apWanPortAutoNegotiation=apWanPortAutoNegotiation, Password=Password, apSubnetVlanEnable=apSubnetVlanEnable, apAapSwitchDiscoveryPort=apAapSwitchDiscoveryPort, apManualExpectedHour=apManualExpectedHour, apMeshBridgeStatsAuthType=apMeshBridgeStatsAuthType, apManualTimeZoneSet=apManualTimeZoneSet, apRadioMeshAvailableConnMac=apRadioMeshAvailableConnMac, apWlanAuthEapSyslogMode=apWlanAuthEapSyslogMode, apTrapCtrlSumStatsThresholdMu=apTrapCtrlSumStatsThresholdMu, apnPortalTxPktsAt18Mb=apnPortalTxPktsAt18Mb, apnMuTxPktsAt18Mb=apnMuTxPktsAt18Mb, apWlanCryptoTkipFastRoamPreAuth=apWlanCryptoTkipFastRoamPreAuth, apnMuTxOctetsAtMCS12=apnMuTxOctetsAtMCS12, apWlanQosPolicyVoiceAifsn=apWlanQosPolicyVoiceAifsn, apTrapLanMonitorMode=apTrapLanMonitorMode, apKnownApRadioType2=apKnownApRadioType2, apnMuTxPktsAtMCS6=apnMuTxPktsAtMCS6, apnRadioStatsChannel=apnRadioStatsChannel, apRadioMeshPreferredConnIndex=apRadioMeshPreferredConnIndex, apRadioSettingsBand=apRadioSettingsBand, apRadioE2BMapStatusTable=apRadioE2BMapStatusTable, dot1xAuthServerTimeout=dot1xAuthServerTimeout, apLanSTPStatsPortIntfDsgBridge=apLanSTPStatsPortIntfDsgBridge, apWnmpPingNum=apWnmpPingNum, apLanSTPStatsBridgeFwDelay=apLanSTPStatsBridgeFwDelay, apWlanWeight=apWlanWeight, apnPortalTxPktsAtMCS6=apnPortalTxPktsAtMCS6, apnWlanTxPktsAtMCS11=apnWlanTxPktsAtMCS11, apWlanQosPolicyBackgroundCwMin=apWlanQosPolicyBackgroundCwMin, apnRadioStatsIndex=apnRadioStatsIndex, apnMuRxOctetsAtMCS1=apnMuRxOctetsAtMCS1, apWlanClientBackHaul=apWlanClientBackHaul, apnWlanRxPktsAtMCS14=apnWlanRxPktsAtMCS14, apIpFilterPolicyRowStatus=apIpFilterPolicyRowStatus, apIpFilterWlanDefInAction=apIpFilterWlanDefInAction, apnWlanTxOctetsAtMCS7=apnWlanTxOctetsAtMCS7, dot1xAuthDiagTable=dot1xAuthDiagTable, apLanRxBytes=apLanRxBytes, apWlanAuthKerberosKdcServerIpR=apWlanAuthKerberosKdcServerIpR, apWlanSecPolicyRowStatus=apWlanSecPolicyRowStatus, apnMuRxOctetsAt12Mb=apnMuRxOctetsAt12Mb, apLanSTPStatsPortIntfLanIndex=apLanSTPStatsPortIntfLanIndex, apTrapRadioMac=apTrapRadioMac, apnPortalRxOctetsAt11Mb=apnPortalRxOctetsAt11Mb, apnMuRxOctetsAtMCS2=apnMuRxOctetsAtMCS2, apRadioCfgPosPowerLevel=apRadioCfgPosPowerLevel, apWlanQosPolicyPointerToWlan=apWlanQosPolicyPointerToWlan, apReliableMulticastMUTable=apReliableMulticastMUTable, apnPortalRxPktsAtMCS7=apnPortalRxPktsAtMCS7, apWlanQosPolicyTable=apWlanQosPolicyTable, apWlanCryptoWepKey2=apWlanCryptoWepKey2, apMuLocationingEnable=apMuLocationingEnable, apMeshBridgeStatsEncType=apMeshBridgeStatsEncType, apHotSpotRadiusAcctTimeout=apHotSpotRadiusAcctTimeout, apRadioCfgRfFunction=apRadioCfgRfFunction, apIpFilterWlanDefOutAction=apIpFilterWlanDefOutAction, apKnownApMac=apKnownApMac, apLoadCfgGroup=apLoadCfgGroup, apAdmin=apAdmin, apPowerDefRadio=apPowerDefRadio, apRadioMeshAvailableConnTable=apRadioMeshAvailableConnTable, apWanDynDNSUpdateHostname=apWanDynDNSUpdateHostname, apLanAdminVlanTag=apLanAdminVlanTag, apLanBridgeEntryAgeout=apLanBridgeEntryAgeout, apRadioNCfgChannel=apRadioNCfgChannel, apnMuRxPktsAt2Mb=apnMuRxPktsAt2Mb, apnMuRxPktsAtMCS11=apnMuRxPktsAtMCS11, apLanTypeFilterIndex=apLanTypeFilterIndex, apHotSpotSecRadiusSecret=apHotSpotSecRadiusSecret, apnWlanTxPktsAt6Mb=apnWlanTxPktsAt6Mb, apnWlanTxPktsAtMCS12=apnWlanTxPktsAtMCS12, apIpFilterLanPolicyRowStatus=apIpFilterLanPolicyRowStatus, apnWlanRxPktsEntry=apnWlanRxPktsEntry, apHotSpotWhiteListIndex=apHotSpotWhiteListIndex, apMeshBridgeStatsWlanPtr=apMeshBridgeStatsWlanPtr, apRadioSettingsVoiceAifsn=apRadioSettingsVoiceAifsn, apLanMonitor=apLanMonitor, DoActionShowProgress=DoActionShowProgress, apRadioSettingsVideoTxopsTime=apRadioSettingsVideoTxopsTime, apnWlanTxPktsAtMCS13=apnWlanTxPktsAtMCS13, apHotSpotExternalWelomePageUrl=apHotSpotExternalWelomePageUrl, apKnownApEssName=apKnownApEssName, apnMuTxOctetsAtMCS1=apnMuTxOctetsAtMCS1, apnPortalTxPktsAt5pt5Mb=apnPortalTxPktsAt5pt5Mb, apnWlanRxOctetsAtMCS6=apnWlanRxOctetsAtMCS6, apnWlanTxOctetsAt6Mb=apnWlanTxOctetsAt6Mb, apRadiusUsersGroupTable=apRadiusUsersGroupTable, dot1xAuthBackendAuthFails=dot1xAuthBackendAuthFails, apRapGroup=apRapGroup, apHotSpotExternalFailPageUrl=apHotSpotExternalFailPageUrl, apReliableMulticastMaxStreams=apReliableMulticastMaxStreams, dot1xAuthBackendAuthSuccesses=dot1xAuthBackendAuthSuccesses, apTrapCtrlGroup=apTrapCtrlGroup, apLanRxErrors=apLanRxErrors, apRadioNMcsRateEntry=apRadioNMcsRateEntry, apGroups=apGroups, PYSNMP_MODULE_ID=moduleid, apLanEnable=apLanEnable, apnPortalRxOctetsAtMCS11=apnPortalRxOctetsAtMCS11, apLanPortSpeed=apLanPortSpeed, apnPortalTxPktsAtMCS14=apnPortalTxPktsAtMCS14, dot1xAuthEapolFramesRx=dot1xAuthEapolFramesRx, apWlanUseRadio=apWlanUseRadio, apMuLocationing=apMuLocationing, apWanDynDNSUpdateResponseIndex=apWanDynDNSUpdateResponseIndex, apMuLocationingAddEntryToEntry=apMuLocationingAddEntryToEntry, apSubnet=apSubnet, apWlanClearStats=apWlanClearStats, apnMuRxOctetsAt18Mb=apnMuRxOctetsAt18Mb, apnWlanRxPktsAt48Mb=apnWlanRxPktsAt48Mb, dot1xPaeAuthenticator=dot1xPaeAuthenticator, apWlanMuAclPolicyRowStatus=apWlanMuAclPolicyRowStatus, apKnownApKbPerSec=apKnownApKbPerSec, apnMuRxOctetsAtMCS6=apnMuRxOctetsAtMCS6, apnMuTxOctetsAt2Mb=apnMuTxOctetsAt2Mb, apTrapMuMac=apTrapMuMac, apWlanAuthKerberosKdcPort1=apWlanAuthKerberosKdcPort1)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apReliableMulticastEntry=apReliableMulticastEntry, apLanSTPStatsPortIntfState=apLanSTPStatsPortIntfState, apnWlanRxPktsAtMCS6=apnWlanRxPktsAtMCS6, apVlanPointerToWlan=apVlanPointerToWlan, apnMuTxOctetsAt54Mb=apnMuTxOctetsAt54Mb, apRadioMeshAvailableConnIndex=apRadioMeshAvailableConnIndex, dot1xAuthEapolFramesTx=dot1xAuthEapolFramesTx, apRadioMeshPreferredConnTable=apRadioMeshPreferredConnTable, apTrapCtrlSumStatsIndex=apTrapCtrlSumStatsIndex, apWlanAuthEapRadius2Port=apWlanAuthEapRadius2Port, apnWlanTxOctetsAt48Mb=apnWlanTxOctetsAt48Mb, apTrapCtrlSumStats=apTrapCtrlSumStats, apIpFilterWlanPolicyPolicy=apIpFilterWlanPolicyPolicy, apWlanCryptoWepKey4=apWlanCryptoWepKey4, apnMuTxPktsAtMCS4=apnMuTxPktsAtMCS4, apWlanQosPolicyVideoCwMin=apWlanQosPolicyVideoCwMin, apnMuTxOctetsAtMCS2=apnMuTxOctetsAtMCS2, apReliableMulticastMUMacAddr=apReliableMulticastMUMacAddr, apTrustedHostRangeLowerIp=apTrustedHostRangeLowerIp, apAapAcKeepAlive=apAapAcKeepAlive, apIpFilterPolicyDestEndIp=apIpFilterPolicyDestEndIp, apnWlanTxPktsAtMCS4=apnWlanTxPktsAtMCS4, apnMuTxPktsAtMCS3=apnMuTxPktsAtMCS3, apLanInfoIpAddress=apLanInfoIpAddress, apWlanMuAclPolicyIndex=apWlanMuAclPolicyIndex, apLanPortAutoNegotiation=apLanPortAutoNegotiation, apnWlanRxPktsAt1Mb=apnWlanRxPktsAt1Mb, apWlanCryptoWepMixedMode=apWlanCryptoWepMixedMode, apTrapCtrlSumStatsCanBeSetMu=apTrapCtrlSumStatsCanBeSetMu, apWlanCryptoWepPassKey=apWlanCryptoWepPassKey, apnPortalTxOctetsAt48Mb=apnPortalTxOctetsAt48Mb, apnWlanTxPktsAtMCS15=apnWlanTxPktsAtMCS15, apWlanSecPolicyEncryption=apWlanSecPolicyEncryption, apnWlanRxPktsAt24Mb=apnWlanRxPktsAt24Mb, apRadiusServer=apRadiusServer, apnPortalRxPktsAtMCS14=apnPortalRxPktsAtMCS14, apLanTimeOutValue=apLanTimeOutValue, apReliableMulticastWlan=apReliableMulticastWlan, apRadioE2BMapStatusMessage=apRadioE2BMapStatusMessage, apWnmpPingPacketLength=apWnmpPingPacketLength, apnMuTxPktsEntry=apnMuTxPktsEntry, apTrapCtrlSumStatsDescr=apTrapCtrlSumStatsDescr, apWlanQosPolicy=apWlanQosPolicy, apWlanCryptoTkipPassphrase=apWlanCryptoTkipPassphrase, apnPortalTxOctetsAtMCS14=apnPortalTxOctetsAtMCS14, apnPortalTxOctetsAt36Mb=apnPortalTxOctetsAt36Mb, apMuLocationingMaxMus=apMuLocationingMaxMus, apWlanQosPolicyBestEffortTxopsTimeInMS=apWlanQosPolicyBestEffortTxopsTimeInMS, apMuLocationingAddSignalStrength=apMuLocationingAddSignalStrength, apReliableMulticastTable=apReliableMulticastTable, apnPortalTxOctetsAtMCS13=apnPortalTxOctetsAtMCS13, apIpFilterLanPolicyPolicy=apIpFilterLanPolicyPolicy, apnMuTxOctetsAt6Mb=apnMuTxOctetsAt6Mb, apnWlanRxPktsAtMCS3=apnWlanRxPktsAtMCS3, apWlanQosPolicyVoiceCwMin=apWlanQosPolicyVoiceCwMin, apWlanBwShareModeTable=apWlanBwShareModeTable, apLoadCfgServerPath=apLoadCfgServerPath, apLanSTPStatsPortIntfDsgPort=apLanSTPStatsPortIntfDsgPort, apWlanCryptoCcmpFastRoamPreAuth=apWlanCryptoCcmpFastRoamPreAuth, apHotSpotPriRadiusServerIp=apHotSpotPriRadiusServerIp, dot1xAuthBackendNonNakResponsesFromSupplicant=dot1xAuthBackendNonNakResponsesFromSupplicant, apDynDNSUpdate=apDynDNSUpdate, apMeshBridgeStatsAvgMuSignal=apMeshBridgeStatsAvgMuSignal, apnWlanRxOctetsAtMCS14=apnWlanRxOctetsAtMCS14, apRadioSettingsSupportedRates=apRadioSettingsSupportedRates, apnPortalRxPktsAt1Mb=apnPortalRxPktsAt1Mb, dot1xAuthConfigTable=dot1xAuthConfigTable, apWlanAuthEapRadius1Port=apWlanAuthEapRadius1Port, apTrapCtrlDynDNSUpdateIp=apTrapCtrlDynDNSUpdateIp, apnPortalTxOctetsAtMCS12=apnPortalTxOctetsAtMCS12, apRadioMeshAvailableConnRssi=apRadioMeshAvailableConnRssi, apnMuRxPktsAt5pt5Mb=apnMuRxPktsAt5pt5Mb, apWlanCryptoCcmpKeyToUse=apWlanCryptoCcmpKeyToUse, apManualExpectedDay=apManualExpectedDay, apnMuTxOctetsAtMCS13=apnMuTxOctetsAtMCS13, apTrapCtrlDynDNSUpdateStatus=apTrapCtrlDynDNSUpdateStatus, apRadioNCfgPosChannel=apRadioNCfgPosChannel, apnMuRxOctetsAtMCS7=apnMuRxOctetsAtMCS7, apnPortalTxOctetsAt9Mb=apnPortalTxOctetsAt9Mb, apLanSTPStatsPortIntfTable=apLanSTPStatsPortIntfTable, apnWlanRxOctetsAtMCS9=apnWlanRxOctetsAtMCS9, apLanTxPkts=apLanTxPkts, apKnownApTable=apKnownApTable, apnMuRxOctetsAt36Mb=apnMuRxOctetsAt36Mb, dot1xAuthAuthEapLogoffWhileAuthenticating=dot1xAuthAuthEapLogoffWhileAuthenticating, apRadioSettingsAntenna=apRadioSettingsAntenna, apTrapCtrlSumStatsCanBeSetAccessPoint=apTrapCtrlSumStatsCanBeSetAccessPoint, apnWlanRxOctetsAtMCS8=apnWlanRxOctetsAtMCS8, apWlanCryptoKeyguardKey3=apWlanCryptoKeyguardKey3, apnPortalRxOctetsAtMCS7=apnPortalRxOctetsAtMCS7, apRadiusUsers=apRadiusUsers, apRadioNCfgEntry=apRadioNCfgEntry, apnWlanTxPktsEntry=apnWlanTxPktsEntry, apRadioBssTable=apRadioBssTable, apLanRxDropped=apLanRxDropped, apWlanCryptoCcmpBcastKeyRotation=apWlanCryptoCcmpBcastKeyRotation, apnMuTxOctetsAt5pt5Mb=apnMuTxOctetsAt5pt5Mb, apnWlanRxOctetsAt36Mb=apnWlanRxOctetsAt36Mb, apWan=apWan, apnWlanTxOctetsAtMCS1=apnWlanTxOctetsAtMCS1, apWanPppoe=apWanPppoe, apLanVlanEnable=apLanVlanEnable, apVlanIndex=apVlanIndex, moduleid=moduleid, apWlanAuthEapRadius1Server=apWlanAuthEapRadius1Server, apAap=apAap, apnMuTxPktsAtMCS7=apnMuTxPktsAtMCS7, apMeshBridgeStatsPksPerSecTx=apMeshBridgeStatsPksPerSecTx, apnPortalTxPktsAtMCS4=apnPortalTxPktsAtMCS4, apLanSTPStatsPortIntfEntry=apLanSTPStatsPortIntfEntry, apnMuRxOctetsAtMCS14=apnMuRxOctetsAtMCS14, apnPortalRxPktsAtMCS6=apnPortalRxPktsAtMCS6, apRadioWlanBssEntry=apRadioWlanBssEntry, apnMuRxPktsAtMCS0=apnMuRxPktsAtMCS0, apnWlanTxOctetsAt18Mb=apnWlanTxOctetsAt18Mb, apnPortalRxOctetsAtMCS4=apnPortalRxOctetsAtMCS4, apnPortalTxOctetsAtMCS3=apnPortalTxOctetsAtMCS3, apnMuTxOctetsAtMCS9=apnMuTxOctetsAtMCS9, MultiPointer255=MultiPointer255, dot1xAuthAuthReauthsWhileAuthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apSubnetEntry=apSubnetEntry, apWlanCryptoKeyguardEntry=apWlanCryptoKeyguardEntry, apWlanQosPolicyBestEffortTxopsTime=apWlanQosPolicyBestEffortTxopsTime, apRadioCfgChannelMode=apRadioCfgChannelMode, apKnownApType=apKnownApType, apHotSpotEntry=apHotSpotEntry, apnMuRxPktsTable=apnMuRxPktsTable, apIpFilterWlanPolicyEntry=apIpFilterWlanPolicyEntry, apRadioMeshMaxClients=apRadioMeshMaxClients, apKnownApRadio2ClientBridgeMac3=apKnownApRadio2ClientBridgeMac3, apVlanEntry=apVlanEntry, apWlanAuthEapMuTxPeriod=apWlanAuthEapMuTxPeriod, apRadioNSettingsMode=apRadioNSettingsMode, apWlanQosPolicyIndex=apWlanQosPolicyIndex, apRadioSettingsBestEffortTxopsTime=apRadioSettingsBestEffortTxopsTime, apnPortalRxPktsAt36Mb=apnPortalRxPktsAt36Mb, apnMuTxPktsTable=apnMuTxPktsTable, apnMuRxOctetsAt48Mb=apnMuRxOctetsAt48Mb, apnMuRxOctetsAtMCS11=apnMuRxOctetsAtMCS11, apnPortalRxPktsAt11Mb=apnPortalRxPktsAt11Mb, apMeshStatsWlanPtr=apMeshStatsWlanPtr, apnPortalRxPktsAtMCS13=apnPortalRxPktsAtMCS13, apSubnetTypeFilterAccessMode=apSubnetTypeFilterAccessMode, apnPortalTxOctetsAt5pt5Mb=apnPortalTxOctetsAt5pt5Mb, apWlanAuthEapMuQuietPeriod=apWlanAuthEapMuQuietPeriod, apnWlanTxPktsAt48Mb=apnWlanTxPktsAt48Mb, apnPortalTxPktsEntry=apnPortalTxPktsEntry, apRadioMeshPreferredConnRowStatus=apRadioMeshPreferredConnRowStatus, apRadioNCfgShortGuardInterval=apRadioNCfgShortGuardInterval, apVlanRowStatus=apVlanRowStatus, apWlanQosPolicyVideoTxopsTimeInMS=apWlanQosPolicyVideoTxopsTimeInMS, apMuLocationingPortalMac=apMuLocationingPortalMac, apRouter=apRouter, apWanDynDNSIndex=apWanDynDNSIndex, apHotSpotExternalLoginPageUrl=apHotSpotExternalLoginPageUrl, apMeshBridgeStatsTable=apMeshBridgeStatsTable, apnPortalTxPktsAt54Mb=apnPortalTxPktsAt54Mb, apSwitch=apSwitch, apnMuTxPktsAt1Mb=apnMuTxPktsAt1Mb, apRadioCfgPlacement=apRadioCfgPlacement, apnMuTxOctetsAt18Mb=apnMuTxOctetsAt18Mb, apDiagCpuLoad5Min=apDiagCpuLoad5Min, apRfGroup=apRfGroup, apnMuRxOctetsAtMCS12=apnMuRxOctetsAtMCS12, apMeshStatsAvgBitSpeed=apMeshStatsAvgBitSpeed, apMuLocationingIndex=apMuLocationingIndex, apVlanTable=apVlanTable, apLanTxPktsEntry=apLanTxPktsEntry, apRadioMeshPreferredConnMac=apRadioMeshPreferredConnMac, apWanPppoeClientIndex=apWanPppoeClientIndex, apRadioCfgDesPowerLevel=apRadioCfgDesPowerLevel, apAapSwitchDiscoveryIPAddressTable=apAapSwitchDiscoveryIPAddressTable, apnPortalTxPktsAtMCS15=apnPortalTxPktsAtMCS15, apPowerStatus=apPowerStatus, apRadioWlanBandwidthTable=apRadioWlanBandwidthTable, apLoadCfg=apLoadCfg, apnWlanTxPktsAtMCS7=apnWlanTxPktsAtMCS7, apnWlanRxOctetsAtMCS0=apnWlanRxOctetsAtMCS0, apWlanAuthEapRadiusAcctMuRetries=apWlanAuthEapRadiusAcctMuRetries, apRadioNMcsRate20MHzChanSgiEnabled=apRadioNMcsRate20MHzChanSgiEnabled, apIpFilterWlanInPackets=apIpFilterWlanInPackets, apLanPort=apLanPort, apnMuRxPktsEntry=apnMuRxPktsEntry, apnMuTxPktsAtMCS2=apnMuTxPktsAtMCS2, apLan=apLan, apnPortalTxOctetsAtMCS7=apnPortalTxOctetsAtMCS7, apPowerMode=apPowerMode, apRadioSettingsBackgroundTxopsTime=apRadioSettingsBackgroundTxopsTime, apWanVpnTunnelConfig=apWanVpnTunnelConfig, apnPortalTxPktsAtMCS3=apnPortalTxPktsAtMCS3, apWlanQosPolicyBestEffortCwMax=apWlanQosPolicyBestEffortCwMax, apnPortalTxPktsTable=apnPortalTxPktsTable, apRadioSettingsVoiceMode=apRadioSettingsVoiceMode, apnWlanRxPktsAtMCS0=apnWlanRxPktsAtMCS0, EthernetType=EthernetType, apMuLocationingAddHeardChannel=apMuLocationingAddHeardChannel, apHotSpotPriRadiusPort=apHotSpotPriRadiusPort, apIpFilterWlanPolicyDirection=apIpFilterWlanPolicyDirection, apnRadioStatsChannelWidthMode=apnRadioStatsChannelWidthMode, apnMuRxOctetsAt1Mb=apnMuRxOctetsAt1Mb, apnWlanRxOctetsAtMCS2=apnWlanRxOctetsAtMCS2, apLoadCfgStart=apLoadCfgStart, dot1xAuthAuthSuccessWhileAuthenticating=dot1xAuthAuthSuccessWhileAuthenticating, apWlanAuthEapMuMaxRetries=apWlanAuthEapMuMaxRetries, apMgmtAccess=apMgmtAccess, apnPortalTxOctetsAt1Mb=apnPortalTxOctetsAt1Mb, apnWlanTxOctetsTable=apnWlanTxOctetsTable, apnPortalTxPktsAtMCS9=apnPortalTxPktsAtMCS9, dot1xAuthDiagEntry=dot1xAuthDiagEntry, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, apTrapCtrlSumStatsCanBeSetRadioA=apTrapCtrlSumStatsCanBeSetRadioA, apnRadioStatsEntry=apnRadioStatsEntry, apLanBridgeEntry=apLanBridgeEntry, apnMuRxOctetsAt54Mb=apnMuRxOctetsAt54Mb, apnMuTxOctetsAtMCS3=apnMuTxOctetsAtMCS3, dot1xAuthBackendAccessChallenges=dot1xAuthBackendAccessChallenges, apWlanAuthKerberosTable=apWlanAuthKerberosTable, apWanDynDNSUpdateResponseTable=apWanDynDNSUpdateResponseTable, apGroupV2dot2variables=apGroupV2dot2variables, apnMuTxPktsAt48Mb=apnMuTxPktsAt48Mb, ap5181=ap5181, apTrapMuVlan=apTrapMuVlan, apLanSTPStatsPortIntfDsgRoot=apLanSTPStatsPortIntfDsgRoot, RadioType=RadioType, apTrapCtrlSumStatsEntry=apTrapCtrlSumStatsEntry, apWlanQosPolicyVideoCwMax=apWlanQosPolicyVideoCwMax, apRapControl=apRapControl, apLoadCfgFtpUsername=apLoadCfgFtpUsername, apnWlanTxPktsAt18Mb=apnWlanTxPktsAt18Mb, apWanDynDNSEntry=apWanDynDNSEntry, apnPortalTxPktsAtMCS11=apnPortalTxPktsAtMCS11, apReliableMulticastMUStatsIndex=apReliableMulticastMUStatsIndex, apnMuRxPktsAt36Mb=apnMuRxPktsAt36Mb, apWlanAuthKerberosKdcServerIp2=apWlanAuthKerberosKdcServerIp2, apnWlanTxPktsAt36Mb=apnWlanTxPktsAt36Mb, apIpFilter=apIpFilter, dot1xAuthEapolReqIdFramesTx=dot1xAuthEapolReqIdFramesTx, apIpFilterLanPolicyTable=apIpFilterLanPolicyTable, apWanDynDNSPerformUpdate=apWanDynDNSPerformUpdate, apWnmpPingDest=apWnmpPingDest, apWlanHotspot=apWlanHotspot, apIpFilterPolicyEndPort=apIpFilterPolicyEndPort, apRadioSettingsName=apRadioSettingsName, apTrapCtrlEnableIndex=apTrapCtrlEnableIndex, apRadiusUsersGroupRowStatus=apRadiusUsersGroupRowStatus, apWlanQosPolicyVoiceCwMax=apWlanQosPolicyVoiceCwMax, apWlanBwShareModeEntry=apWlanBwShareModeEntry, apnMuTxPktsAtMCS1=apnMuTxPktsAtMCS1, apHotSpotSecRadiusServerIp=apHotSpotSecRadiusServerIp, apnWlanTxOctetsAtMCS12=apnWlanTxOctetsAtMCS12, apWlanMuAclEndingMac=apWlanMuAclEndingMac, apnMuTxOctetsAt11Mb=apnMuTxOctetsAt11Mb, apnPortalRxPktsAtMCS2=apnPortalRxPktsAtMCS2, apnMuTxOctetsAtMCS4=apnMuTxOctetsAtMCS4)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", dot1xAuthBackendAuthState=dot1xAuthBackendAuthState, apDiagRamStats=apDiagRamStats, apReliableMulticastTxMulticast=apReliableMulticastTxMulticast, apWnmpPing=apWnmpPing, dot1xAuthEntersAuthenticating=dot1xAuthEntersAuthenticating, apWlanSecurityPolicy=apWlanSecurityPolicy, apWlanDisallowMuToMu=apWlanDisallowMuToMu, apAapSwitchDiscoveryIPAddress=apAapSwitchDiscoveryIPAddress, apWnmpPingPacketData=apWnmpPingPacketData, apAapSwitchDiscoveryDomainName=apAapSwitchDiscoveryDomainName, apRadioCfgDesPowerInMW=apRadioCfgDesPowerInMW, apnPortalTxOctetsAt6Mb=apnPortalTxOctetsAt6Mb, apnRadioStatsNumPktsRxChanWidth20MHz=apnRadioStatsNumPktsRxChanWidth20MHz, apnMuRxPktsAtMCS4=apnMuRxPktsAtMCS4, apnRadioStatsRssiAvgAcrossAntennas=apnRadioStatsRssiAvgAcrossAntennas, apnWlanTxOctetsAtMCS14=apnWlanTxOctetsAtMCS14, apnWlanTxOctetsAtMCS15=apnWlanTxOctetsAtMCS15, apMuVlan=apMuVlan, apnPortalRxOctetsAtMCS8=apnPortalRxOctetsAtMCS8, apnMuRxPktsAt1Mb=apnMuRxPktsAt1Mb, sysoids=sysoids, apnWlanTxOctetsAtMCS3=apnWlanTxOctetsAtMCS3, apMeshStatsMac=apMeshStatsMac, apGroupsV1dot0=apGroupsV1dot0, apnWlanRxPktsAtMCS4=apnWlanRxPktsAtMCS4, apRadioSettingsDtimPrd=apRadioSettingsDtimPrd, apnMuTxOctetsEntry=apnMuTxOctetsEntry, apnWlanTxPktsAtMCS8=apnWlanTxPktsAtMCS8, apKnownApRadio1ClientBridgeMac2=apKnownApRadio1ClientBridgeMac2, apAapAdoptionState=apAapAdoptionState, apReliableMulticastTableRowEnable=apReliableMulticastTableRowEnable, apnMuTxOctetsAtMCS0=apnMuTxOctetsAtMCS0, apWipsSecondaryServerAddr=apWipsSecondaryServerAddr, apHotSpot=apHotSpot, apnPortalTxPktsAt36Mb=apnPortalTxPktsAt36Mb, apnWlanTxPktsTable=apnWlanTxPktsTable, apReliableMulticastStandaloneMode=apReliableMulticastStandaloneMode, apnWlanRxOctetsAtMCS12=apnWlanRxOctetsAtMCS12, apMeshStatsEntry=apMeshStatsEntry, apnPortalRxPktsAtMCS3=apnPortalRxPktsAtMCS3, apnMuRxPktsAtMCS8=apnMuRxPktsAtMCS8, apRadioNSettingsHTProtectionStatus=apRadioNSettingsHTProtectionStatus, apnMuRxPktsAtMCS7=apnMuRxPktsAtMCS7, apnPortalRxOctetsAtMCS14=apnPortalRxOctetsAtMCS14, apKnownApRadio1ClientBridgeMac3=apKnownApRadio1ClientBridgeMac3, apIpFilterPolicyUseStatus=apIpFilterPolicyUseStatus, dot1xAuthSessionOctetsRx=dot1xAuthSessionOctetsRx, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, apWanPortSpeed=apWanPortSpeed, apnMuRxOctetsAtMCS9=apnMuRxOctetsAtMCS9, apWlanAnswerBroadcastEss=apWlanAnswerBroadcastEss, apKnownApRadio2ClientBridgeMac1=apKnownApRadio2ClientBridgeMac1, apIpFilterPolicyName=apIpFilterPolicyName, apnRadioStatsNumPktsTxChanWidth20MHz=apnRadioStatsNumPktsTxChanWidth20MHz, apWlanAuthEapServerTimeout=apWlanAuthEapServerTimeout, apWanVpn=apWanVpn, apKnownAPList=apKnownAPList, apnRadioStatsNumPktsRxSGI800ns=apnRadioStatsNumPktsRxSGI800ns, apWlanQosPolicyBackgroundAifsn=apWlanQosPolicyBackgroundAifsn, apWanPppoeClientIp=apWanPppoeClientIp, apnMuTxOctetsAt36Mb=apnMuTxOctetsAt36Mb, apRadioSettingsPointersToWlans=apRadioSettingsPointersToWlans, apWlanMuAclPolicyPointerToWlan=apWlanMuAclPolicyPointerToWlan, dot1xAuthEapLogoffsWhileConnecting=dot1xAuthEapLogoffsWhileConnecting, apnWlanRxPktsAtMCS11=apnWlanRxPktsAtMCS11, apnWlanRxOctetsAt12Mb=apnWlanRxOctetsAt12Mb, apLanTxErrors=apLanTxErrors, apLanSTPStatsPortIntfPortName=apLanSTPStatsPortIntfPortName, apnPortalTxPktsAt12Mb=apnPortalTxPktsAt12Mb, apWipsPrimaryServerAddr=apWipsPrimaryServerAddr, apnRadioStatsExtnChannel=apnRadioStatsExtnChannel, apRadioMeshEntry=apRadioMeshEntry, apnWlanTxOctetsAtMCS6=apnWlanTxOctetsAtMCS6, apLanSTPStatsBridgeHelloTime=apLanSTPStatsBridgeHelloTime, apRadioNCfgAmpduTransmitSizeLimit=apRadioNCfgAmpduTransmitSizeLimit, apKnownApPktsPerSec=apKnownApPktsPerSec, apHotSpotRadiusAcctPort=apHotSpotRadiusAcctPort, apHotSpotWhiteListEntry=apHotSpotWhiteListEntry, apWlanIndex=apWlanIndex, apnStats=apnStats, apnWlanRxPktsAtMCS10=apnWlanRxPktsAtMCS10, apnWlanTxOctetsAt1Mb=apnWlanTxOctetsAt1Mb, apRadioNMcsRate20MHzChanSgiDisabled=apRadioNMcsRate20MHzChanSgiDisabled, apnPortalRxPktsAtMCS8=apnPortalRxPktsAtMCS8, apRadioMeshClientBridgeMode=apRadioMeshClientBridgeMode, dot1xAuthStatsTable=dot1xAuthStatsTable, apWlanAuthEapRadiusExtSharedSecret=apWlanAuthEapRadiusExtSharedSecret, apTrapCtrlSumStatsTable=apTrapCtrlSumStatsTable, apnWlanTxPktsAtMCS1=apnWlanTxPktsAtMCS1, apGroupsV1dot1=apGroupsV1dot1, apnPortalRxOctetsAtMCS6=apnPortalRxOctetsAtMCS6, apnPortalRxOctetsAt24Mb=apnPortalRxOctetsAt24Mb, apGroupV1dot1notifications=apGroupV1dot1notifications, apWlanCryptoTkipKey=apWlanCryptoTkipKey, apIpFilterWlan=apIpFilterWlan, apLanBridgeMaxMsgAge=apLanBridgeMaxMsgAge, apKnownApRadio2ClientBridgeMac2=apKnownApRadio2ClientBridgeMac2, apMeshBridgeStatsAvgMuSnr=apMeshBridgeStatsAvgMuSnr, apnMuRxPktsAtMCS15=apnMuRxPktsAtMCS15, dot1xPaePortNumber=dot1xPaePortNumber, apRadioWlanWeight=apRadioWlanWeight, apMeshStatsThroughput=apMeshStatsThroughput, apManualDateTimeSet=apManualDateTimeSet, apnMuTxPktsAt54Mb=apnMuTxPktsAt54Mb, apWlanCryptoTkipKeyRotationInterval=apWlanCryptoTkipKeyRotationInterval, apIpFilterLanPolicyAction=apIpFilterLanPolicyAction, apRadio=apRadio, apTrapLanMonitorReason=apTrapLanMonitorReason, apnRadioStatsOpFreq=apnRadioStatsOpFreq, apIpFilterPolicyTable=apIpFilterPolicyTable, dot1xAuthAuthReauthsWhileAuthenticating=dot1xAuthAuthReauthsWhileAuthenticating, apnMuTxOctetsAtMCS11=apnMuTxOctetsAtMCS11, apHotSpotTable=apHotSpotTable, apnRadioStatsTable=apnRadioStatsTable, apnWlanTxPktsAtMCS3=apnWlanTxPktsAtMCS3, apnWlanTxOctetsAtMCS5=apnWlanTxOctetsAtMCS5, apWlanCryptoKeyguardKey1=apWlanCryptoKeyguardKey1, apnMuTxPktsAtMCS11=apnMuTxPktsAtMCS11, apnMuRxOctetsAt5pt5Mb=apnMuRxOctetsAt5pt5Mb, apRadioNCfgTable=apRadioNCfgTable, apManualTimeZoneSetting=apManualTimeZoneSetting, apReliableMulticastMUEntry=apReliableMulticastMUEntry, apHotSpotPriRadiusSecret=apHotSpotPriRadiusSecret, apLoadCfgOperationsDone=apLoadCfgOperationsDone, apnPortalTxPktsAtMCS2=apnPortalTxPktsAtMCS2, apIpFilterLanPolicyIndex=apIpFilterLanPolicyIndex, apLanBridgePriority=apLanBridgePriority, apnPortalTxOctetsAt11Mb=apnPortalTxOctetsAt11Mb, apMeshStatsRetries=apMeshStatsRetries, apRadioSettingsVideoAifsn=apRadioSettingsVideoAifsn, apLan802dt1xAuth=apLan802dt1xAuth, apTrapCtrlDynDNSUpdateHostname=apTrapCtrlDynDNSUpdateHostname, apnMuRxOctetsAtMCS15=apnMuRxOctetsAtMCS15, apManualDateTimeSetting=apManualDateTimeSetting, apGroupV1dot1obsoleted=apGroupV1dot1obsoleted, apWlanAuthEapRadiusAcctMode=apWlanAuthEapRadiusAcctMode, apWlanMuIdleTimeout=apWlanMuIdleTimeout, apWlanAuthKerberosUsername=apWlanAuthKerberosUsername, apRadioNMcsRateIndex=apRadioNMcsRateIndex, apSubnetDhcpState=apSubnetDhcpState, dot1xAuthBackendResponses=dot1xAuthBackendResponses, apIpFilterLanIndex=apIpFilterLanIndex, apLanSTPStatsPortIntfPathCost=apLanSTPStatsPortIntfPathCost, apnPortalRxOctetsAt9Mb=apnPortalRxOctetsAt9Mb, wsd=wsd, apTrapCtrlMuHotspotState=apTrapCtrlMuHotspotState, apRadioNCfgAmsduAggregationMaxRecvSize=apRadioNCfgAmsduAggregationMaxRecvSize, apnPortalRxPktsAt18Mb=apnPortalRxPktsAt18Mb, apWirelessAPStats=apWirelessAPStats, apnWlanRxOctetsAtMCS7=apnWlanRxOctetsAtMCS7, apManualExpectedSeconds=apManualExpectedSeconds, apLanSTPStatsBridgeMaxMsgAge=apLanSTPStatsBridgeMaxMsgAge, apLanClearStats=apLanClearStats, apTrapCtrlEnableEntry=apTrapCtrlEnableEntry, apnMuTxPktsAtMCS8=apnMuTxPktsAtMCS8, apnPortalRxPktsAtMCS10=apnPortalRxPktsAtMCS10, dot1xAuthSessionStatsTable=dot1xAuthSessionStatsTable, apnWlanRxPktsAt9Mb=apnWlanRxPktsAt9Mb, dot1xAuthAuthControlledPortControl=dot1xAuthAuthControlledPortControl, dot1xAuthKeyTxEnabled=dot1xAuthKeyTxEnabled, apnMuRxOctetsTable=apnMuRxOctetsTable, apRadioClearStats=apRadioClearStats, apDiagRamTotal=apDiagRamTotal, apMeshBridgeStatsThroughputRx=apMeshBridgeStatsThroughputRx, apnPortalRxOctetsAtMCS0=apnPortalRxOctetsAtMCS0, apLanBridgeHelloTime=apLanBridgeHelloTime, apWanDynDNSPassword=apWanDynDNSPassword, apIpFilterLanDefOutAction=apIpFilterLanDefOutAction, apWlanSecPolicyName=apWlanSecPolicyName, apWlanAuth=apWlanAuth, apKnownApEntry=apKnownApEntry, apGroupV1dot1variables=apGroupV1dot1variables, apnPortalTxOctetsAt12Mb=apnPortalTxOctetsAt12Mb, apnMuTxPktsAt36Mb=apnMuTxPktsAt36Mb, apnWlanRxOctetsAtMCS4=apnWlanRxOctetsAtMCS4, apRadioSettingsBackgroundTxopsTimeInMS=apRadioSettingsBackgroundTxopsTimeInMS, apWanPppoeClientPrimaryDNSServer=apWanPppoeClientPrimaryDNSServer, apTrapCtrlMuHotspotStateChange=apTrapCtrlMuHotspotStateChange, apTrapCtrlSumStatsThresholdAccessPoint=apTrapCtrlSumStatsThresholdAccessPoint, apnPortalTxPktsAt48Mb=apnPortalTxPktsAt48Mb, apRadiusAccessTable=apRadiusAccessTable, apWlanQosPolicyName=apWlanQosPolicyName, dot1xAuthEapolRespFramesRx=dot1xAuthEapolRespFramesRx, apnPortalRxOctetsAtMCS5=apnPortalRxOctetsAtMCS5, apWlanCryptoCcmpPassphrase=apWlanCryptoCcmpPassphrase, apWnmpPingDestAP=apWnmpPingDestAP, dot1xAuthEapLengthErrorFramesRx=dot1xAuthEapLengthErrorFramesRx, apReliableMulticastAddress=apReliableMulticastAddress, apnMuTxOctetsAt1Mb=apnMuTxOctetsAt1Mb, apRadioWlanBssid=apRadioWlanBssid, apWlanAuthEapTable=apWlanAuthEapTable, apnWlanRxOctetsAt18Mb=apnWlanRxOctetsAt18Mb, apnWlanRxOctetsAtMCS10=apnWlanRxOctetsAtMCS10, apnMuRxPktsAtMCS13=apnMuRxPktsAtMCS13, apRadioSettingsQBSSChannelBeaconInt=apRadioSettingsQBSSChannelBeaconInt, apWlanMuAclRowStatus=apWlanMuAclRowStatus, apLanRxPkts=apLanRxPkts, apMuLocationingEntry=apMuLocationingEntry, apSwitchGroup=apSwitchGroup, apnWlanRxPktsAtMCS2=apnWlanRxPktsAtMCS2, dot1x=dot1x, apRadioSettingsEntry=apRadioSettingsEntry, apRadioMeshPreferredConnEntry=apRadioMeshPreferredConnEntry, apRadioSettingsQBSSLoadElementMode=apRadioSettingsQBSSLoadElementMode, apKnownApChannel1=apKnownApChannel1, apWlanAuthKerberosKdcPort2=apWlanAuthKerberosKdcPort2, apTrapCtrlSumStatsCanBeSetWlan=apTrapCtrlSumStatsCanBeSetWlan, apnMuTxOctetsAtMCS7=apnMuTxOctetsAtMCS7, apLoginMessage=apLoginMessage, apnWlanRxPktsAt11Mb=apnWlanRxPktsAt11Mb, apAapAdoptingSwitchIP=apAapAdoptingSwitchIP, apWnmpPingDestMu=apWnmpPingDestMu, ScaleBy100=ScaleBy100, apWlanMuAclTable=apWlanMuAclTable, apIpFilterWlanPolicyIndex=apIpFilterWlanPolicyIndex, apnMuRxPktsAtMCS9=apnMuRxPktsAtMCS9, apnMuRxOctetsAtMCS13=apnMuRxOctetsAtMCS13, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, apnWlanRxOctetsAtMCS5=apnWlanRxOctetsAtMCS5, apIpFilterLanEntry=apIpFilterLanEntry, DoActionNow=DoActionNow, apLan802dt1xAuthPass=apLan802dt1xAuthPass, apRadioCfgDesChannel=apRadioCfgDesChannel, apManualTimeZoneName=apManualTimeZoneName, apnWlanTxPktsAtMCS0=apnWlanTxPktsAtMCS0, apMuHotspotState=apMuHotspotState, apStatsGroup=apStatsGroup, dot1xAuthLastEapolFrameVersion=dot1xAuthLastEapolFrameVersion, apnWlanTxPktsAt24Mb=apnWlanTxPktsAt24Mb, PartsPer10k=PartsPer10k, apIpFilterPolicySrcEndIp=apIpFilterPolicySrcEndIp, apnWlanRxPktsAtMCS1=apnWlanRxPktsAtMCS1, apnMuRxOctetsAt24Mb=apnMuRxOctetsAt24Mb, apnWlanTxOctetsAtMCS10=apnWlanTxOctetsAtMCS10, apWanPppoeClientEntry=apWanPppoeClientEntry, apnWlanTxOctetsAtMCS8=apnWlanTxOctetsAtMCS8, apnPortalRxPktsAt6Mb=apnPortalRxPktsAt6Mb, apMuLocationingAddMuMac=apMuLocationingAddMuMac, apIpFilterWlanPolicyTable=apIpFilterWlanPolicyTable, apnPortalRxOctetsAtMCS15=apnPortalRxOctetsAtMCS15, apnPortalTxOctetsAtMCS1=apnPortalTxOctetsAtMCS1, apRadiusUsersGroupEntry=apRadiusUsersGroupEntry, apLoadCfgSuccess=apLoadCfgSuccess, apnWlanTxOctetsAt5pt5Mb=apnWlanTxOctetsAt5pt5Mb, apnWlanTxOctetsAtMCS9=apnWlanTxOctetsAtMCS9, apWlanSecPolicyPointerToWlan=apWlanSecPolicyPointerToWlan, apLanTypeFilter=apLanTypeFilter, apTrapCtrlSumStatsThresholdWlans=apTrapCtrlSumStatsThresholdWlans, apTrapVlanId=apTrapVlanId, apnWlanTxOctetsAt2Mb=apnWlanTxOctetsAt2Mb, apNotifications=apNotifications, ap5131=ap5131, apWanDynDNSHostname=apWanDynDNSHostname, apnMuTxOctetsAtMCS5=apnMuTxOctetsAtMCS5)
mibBuilder.exportSymbols("SYMBOL-AP-MIB", apWlanQosPolicyVoiceTxopsTimeInMS=apWlanQosPolicyVoiceTxopsTimeInMS, apTrapCtrlMuMac=apTrapCtrlMuMac, apWlanCryptoTkipKeyToUse=apWlanCryptoTkipKeyToUse, apRadioSettingsERPProtectionStatus=apRadioSettingsERPProtectionStatus, SinglePointer=SinglePointer, apIpFilterLanDefInAction=apIpFilterLanDefInAction, apWlanSecPolicyAuthentication=apWlanSecPolicyAuthentication, apKnownApChannel2=apKnownApChannel2, apRadioSettingsBackgroundCwMin=apRadioSettingsBackgroundCwMin, apRadioSettingsBeaconInt=apRadioSettingsBeaconInt, apnWlanRxPktsAt6Mb=apnWlanRxPktsAt6Mb, apnWlanRxOctetsAt48Mb=apnWlanRxOctetsAt48Mb, apnMuTxOctetsAtMCS8=apnMuTxOctetsAtMCS8, apTrustedHostRangeTable=apTrustedHostRangeTable, apMeshBridgeStatsPktsDropped=apMeshBridgeStatsPktsDropped, apnPortalRxOctetsTable=apnPortalRxOctetsTable, apnMuRxPktsAt11Mb=apnMuRxPktsAt11Mb, apnPortalRxPktsTable=apnPortalRxPktsTable, HexPassword=HexPassword, apMeshBridgeStatsEntry=apMeshBridgeStatsEntry, apnMuTxPktsAt9Mb=apnMuTxPktsAt9Mb, apLan802dt1xAuthLogin=apLan802dt1xAuthLogin, apnWlanRxPktsAtMCS9=apnWlanRxPktsAtMCS9, apRadioSettingsTable=apRadioSettingsTable, apLanTypeFilterSubnetIndex=apLanTypeFilterSubnetIndex, apWlanMulticastAddr1=apWlanMulticastAddr1, apMuLocationingMuMac=apMuLocationingMuMac, apnMuRxPktsAtMCS5=apnMuRxPktsAtMCS5, apRadioSettingsWMMQosParam=apRadioSettingsWMMQosParam, apnMuTxPktsAtMCS0=apnMuTxPktsAtMCS0, apnWlanRxOctetsTable=apnWlanRxOctetsTable, apWlanQosPolicyBackgroundTxopsTimeInMS=apWlanQosPolicyBackgroundTxopsTimeInMS, apnMuTxPktsAt6Mb=apnMuTxPktsAt6Mb, apWlanMuAclPointerToAclPolicy=apWlanMuAclPointerToAclPolicy, apMuLocationingAddHeardTime=apMuLocationingAddHeardTime, apIpFilterPolicyProtocol=apIpFilterPolicyProtocol, apWlanQosPolicyVideoAifsn=apWlanQosPolicyVideoAifsn, apIpFilterPolicyDestStartIp=apIpFilterPolicyDestStartIp, apnWlanRxPktsAtMCS12=apnWlanRxPktsAtMCS12, apnMuTxPktsAt12Mb=apnMuTxPktsAt12Mb, apnWlanTxOctetsAtMCS13=apnWlanTxOctetsAtMCS13, apIpFilterLanPolicyEntry=apIpFilterLanPolicyEntry, apnPortalRxOctetsAtMCS10=apnPortalRxOctetsAtMCS10, apWanDynDNSUpdateStatus=apWanDynDNSUpdateStatus, apMeshStatsRadioType=apMeshStatsRadioType, apnMuTxPktsAtMCS9=apnMuTxPktsAtMCS9, apWlanAuthKerberosEntry=apWlanAuthKerberosEntry, dot1xAuthSessionOctetsTx=dot1xAuthSessionOctetsTx, apnPortalRxOctetsAt2Mb=apnPortalRxOctetsAt2Mb, apnWlanRxOctetsAt6Mb=apnWlanRxOctetsAt6Mb, apLoadCfgFtpPassword=apLoadCfgFtpPassword, apnRadioStatsNumPktsTxChanWidth40MHz=apnRadioStatsNumPktsTxChanWidth40MHz, apSubnetTable=apSubnetTable, apMuLocationingSignalStrength=apMuLocationingSignalStrength, apLanBridgeFwdDelay=apLanBridgeFwdDelay, apnPortalTxPktsAt6Mb=apnPortalTxPktsAt6Mb, apKnownAPClearStats=apKnownAPClearStats, apnMuRxPktsAt24Mb=apnMuRxPktsAt24Mb, apLanNativeVlanTag=apLanNativeVlanTag, apMuLocationingHeardChannel=apMuLocationingHeardChannel, apWlanCryptoTkipBcastKeyRotation=apWlanCryptoTkipBcastKeyRotation, apnMuTxPktsAtMCS10=apnMuTxPktsAtMCS10, apnMuTxOctetsAtMCS15=apnMuTxOctetsAtMCS15, dot1xAuthBackendOtherRequestsToSupplicant=dot1xAuthBackendOtherRequestsToSupplicant, apRadioSettingsVideoCwMax=apRadioSettingsVideoCwMax, apWlanBwShareMode=apWlanBwShareMode, apRapDetectorMode=apRapDetectorMode, apnWlanRxPktsAt12Mb=apnWlanRxPktsAt12Mb, apPower=apPower, dot1xAuthAuthEapLogoffWhileAuthenticated=dot1xAuthAuthEapLogoffWhileAuthenticated, apnWlanRxOctetsAtMCS15=apnWlanRxOctetsAtMCS15, apTrustedHostRangeEntry=apTrustedHostRangeEntry, apRadioE2BMapStatusBcMcEncCipher=apRadioE2BMapStatusBcMcEncCipher, apnMuRxPktsAt18Mb=apnMuRxPktsAt18Mb, dot1xAuthLastEapolFrameSource=dot1xAuthLastEapolFrameSource, apWlanCryptoTkipTable=apWlanCryptoTkipTable, apnMuRxPktsAt48Mb=apnMuRxPktsAt48Mb, apnWlanTxPktsAt1Mb=apnWlanTxPktsAt1Mb, apWanVpnKeyAutoEntry=apWanVpnKeyAutoEntry, apRadiusUsersGroupId=apRadiusUsersGroupId, apWanDynDNSMode=apWanDynDNSMode, apKnownApFwVers=apKnownApFwVers, apnPortalRxOctetsAtMCS2=apnPortalRxOctetsAtMCS2, apSubnetNativeVlanTag=apSubnetNativeVlanTag, apnMuRxOctetsAtMCS5=apnMuRxOctetsAtMCS5, StaticRowEnable=StaticRowEnable, dot1xAuthAuthEapStartsWhileAuthenticating=dot1xAuthAuthEapStartsWhileAuthenticating, apWlanQosPolicyVoiceTxopsTime=apWlanQosPolicyVoiceTxopsTime, apnPortalRxPktsEntry=apnPortalRxPktsEntry, apKnownApRadio1ClientBridgeMac1=apKnownApRadio1ClientBridgeMac1, apnPortalRxPktsAt2Mb=apnPortalRxPktsAt2Mb, dot1xAuthSessionUserName=dot1xAuthSessionUserName, apnPortalRxPktsAtMCS12=apnPortalRxPktsAtMCS12, apnWlanTxPktsAt9Mb=apnWlanTxPktsAt9Mb, apAapTunnelToSwitchEnable=apAapTunnelToSwitchEnable, apMeshBridgeStatsThroughputTx=apMeshBridgeStatsThroughputTx, apMeshBridgeStatsAvgBitSpeed=apMeshBridgeStatsAvgBitSpeed, apLanInfoNetworkMask=apLanInfoNetworkMask, apRadioSettingsShortPreamble=apRadioSettingsShortPreamble, apMus=apMus, apnWlanTxOctetsAt36Mb=apnWlanTxOctetsAt36Mb, apRadioCfgReset=apRadioCfgReset, apRap=apRap, apWlanCryptoCcmpTable=apWlanCryptoCcmpTable, apLanInfoEthernetAddress=apLanInfoEthernetAddress, apManualTime=apManualTime, dot1xAuthEapolRespIdFramesRx=dot1xAuthEapolRespIdFramesRx, apnMuTxPktsAtMCS15=apnMuTxPktsAtMCS15, apFlashLedDestAP=apFlashLedDestAP, apnMuTxOctetsAt12Mb=apnMuTxOctetsAt12Mb, apWlanCryptoCcmpEntry=apWlanCryptoCcmpEntry, apRadioMesh=apRadioMesh, apDiagStats=apDiagStats, apLanStats=apLanStats, apManualTimeZoneIndex=apManualTimeZoneIndex, apWlanCryptoWepKey3=apWlanCryptoWepKey3, apnPortalRxPktsAt54Mb=apnPortalRxPktsAt54Mb, apWlanMuAclPolicyTable=apWlanMuAclPolicyTable, dot1xAuthTxPeriod=dot1xAuthTxPeriod, apWlanMaxMus=apWlanMaxMus, apWlanEntry=apWlanEntry, apnWlanRxOctetsAtMCS1=apnWlanRxOctetsAtMCS1, apAapSwitchDiscoveryIPAddressRowStatus=apAapSwitchDiscoveryIPAddressRowStatus, apLoginMessageText=apLoginMessageText, apnRadioStatsNumPktsTxSGI800ns=apnRadioStatsNumPktsTxSGI800ns, apRadioCfgPosChannel=apRadioCfgPosChannel, apRadioMeshTimeoutValue=apRadioMeshTimeoutValue, apWlanMuAclEntry=apWlanMuAclEntry, apnMuTxOctetsAtMCS6=apnMuTxOctetsAtMCS6, apRadioNCfgChannelWidth=apRadioNCfgChannelWidth, apIpFilterLanOutPackets=apIpFilterLanOutPackets, MultiPointer63=MultiPointer63, apWlanQosPolicyEntry=apWlanQosPolicyEntry, apnMuRxPktsAtMCS1=apnMuRxPktsAtMCS1, apnMuTxOctetsAtMCS14=apnMuTxOctetsAtMCS14, apManualExpectedMonth=apManualExpectedMonth, apRadioBssPrimaryWlan=apRadioBssPrimaryWlan, apRadioNCfgAmpduTransmitEnabled=apRadioNCfgAmpduTransmitEnabled, apWlanCryptoWepKeyToUse=apWlanCryptoWepKeyToUse, apnWlanRxOctetsAt9Mb=apnWlanRxOctetsAt9Mb, dot1xAuthConfigEntry=dot1xAuthConfigEntry, apIpFilterPolicySrcStartIp=apIpFilterPolicySrcStartIp, apMuClearStats=apMuClearStats, apReliableMulticastIgmpQueryInterval=apReliableMulticastIgmpQueryInterval, apLanInfoIndex=apLanInfoIndex, dot1xGroup=dot1xGroup, apRadioCfgExceptionChannel=apRadioCfgExceptionChannel, apLanSTPStatsRootPort=apLanSTPStatsRootPort, apnPortalRxOctetsAt36Mb=apnPortalRxOctetsAt36Mb, apRadioWlanBssTable=apRadioWlanBssTable, apMeshStatsConnType=apMeshStatsConnType, apnWlanRxPktsAt18Mb=apnWlanRxPktsAt18Mb, apDiagCpuStats=apDiagCpuStats, apnWlanTxPktsAt5pt5Mb=apnWlanTxPktsAt5pt5Mb, apMuLocationingTable=apMuLocationingTable, TransmitRate=TransmitRate, apSubnetAdminVlanTag=apSubnetAdminVlanTag, apKnownApIndex=apKnownApIndex, apAapSwitchDiscoveryIPAddressEntry=apAapSwitchDiscoveryIPAddressEntry, apHotSpotRadiusSessMode=apHotSpotRadiusSessMode, apTrapCtrlRateLimit=apTrapCtrlRateLimit, apnPortalRxOctetsAt18Mb=apnPortalRxOctetsAt18Mb, dot1xAuthSessionTerminateCause=dot1xAuthSessionTerminateCause, apRadioCfgPowerInMW=apRadioCfgPowerInMW, apWlanVoicePrioritization=apWlanVoicePrioritization, apLanSTPStatsRootPathCost=apLanSTPStatsRootPathCost, apMuLocationingAddEntryToTable=apMuLocationingAddEntryToTable, apnMuRxPktsAt9Mb=apnMuRxPktsAt9Mb, apRadioNCfgDesChannel=apRadioNCfgDesChannel, apTrapCtrlEnableName=apTrapCtrlEnableName, apnMuRxOctetsAt11Mb=apnMuRxOctetsAt11Mb, apWlanCryptoKeyguardPassKey=apWlanCryptoKeyguardPassKey, apnWlanTxPktsAt12Mb=apnWlanTxPktsAt12Mb, apRadioCfgEntry=apRadioCfgEntry, apnWlanTxOctetsAtMCS11=apnWlanTxOctetsAtMCS11, apLanInfoTable=apLanInfoTable, apWlanEssid=apWlanEssid, apnPortalTxPktsAt24Mb=apnPortalTxPktsAt24Mb, apManualCurrSystemDateTime=apManualCurrSystemDateTime, apRadioNCfgAmsduTransmitEnabled=apRadioNCfgAmsduTransmitEnabled, apnPortalTxOctetsAtMCS2=apnPortalTxOctetsAtMCS2, apMeshBridgeStatsRadioType=apMeshBridgeStatsRadioType, apIpFilterLanPolicyDirection=apIpFilterLanPolicyDirection, dot1xAuthInvalidEapolFramesRx=dot1xAuthInvalidEapolFramesRx, apWlanName=apWlanName, apLanInfoEntry=apLanInfoEntry, apWlanCryptoTkipEntry=apWlanCryptoTkipEntry, apTrapCtrlSumStatsThresholdRadioBG=apTrapCtrlSumStatsThresholdRadioBG, apRadioE2BMapStatus=apRadioE2BMapStatus, apKnownApUnitName=apKnownApUnitName, apnPortalRxPktsAt9Mb=apnPortalRxPktsAt9Mb, apIpFilterLanMode=apIpFilterLanMode, apManualTimeZoneEntry=apManualTimeZoneEntry, dot1xAuthEntersConnecting=dot1xAuthEntersConnecting, apnMuTxOctetsTable=apnMuTxOctetsTable, apTrustedHost=apTrustedHost, apTrapCtrlSumStatsCanBeSetRadioN5000MHz=apTrapCtrlSumStatsCanBeSetRadioN5000MHz, apWlanCryptoWepTable=apWlanCryptoWepTable, apnWlanTxOctetsAtMCS0=apnWlanTxOctetsAtMCS0, apnWlanTxOctetsAt54Mb=apnWlanTxOctetsAt54Mb, AbbrevRowStatus=AbbrevRowStatus, apnMuTxOctetsAt48Mb=apnMuTxOctetsAt48Mb, apIpFilterPolicyStartPort=apIpFilterPolicyStartPort, apnWlanRxOctetsAt2Mb=apnWlanRxOctetsAt2Mb, apWlanQosPolicyBestEffortAifsn=apWlanQosPolicyBestEffortAifsn, apMeshBridgeStatsLanPtr=apMeshBridgeStatsLanPtr)
