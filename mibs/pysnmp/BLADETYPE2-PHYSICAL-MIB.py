#
# PySNMP MIB module BLADETYPE2-PHYSICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-PHYSICAL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:22:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Counter64, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Unsigned32, NotificationType, TimeTicks, Integer32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "ObjectIdentity")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
layer2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2))
if mibBuilder.loadTexts: layer2.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: layer2.setOrganization('Hewlett Packard Company ')
layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6))
thash = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7))
l2GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8))
ufd = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9))
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11))
fdb = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12))
hotlinksCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14))
hotlinksCurCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgOnState.setStatus('current')
hotlinksNewCfgOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgOnState.setStatus('current')
hotlinksCurCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgFdbUpdateState.setStatus('current')
hotlinksNewCfgFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgFdbUpdateState.setStatus('current')
hotlinksMaxTriggerEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksMaxTriggerEntries.setStatus('current')
hotlinksCurCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6), )
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTable.setStatus('current')
hotlinksCurCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksCurCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksCurCfgTriggerTableEntry.setStatus('current')
hotlinksCurCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerId.setStatus('current')
hotlinksCurCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerState.setStatus('current')
hotlinksCurCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerPreemptState.setStatus('current')
hotlinksCurCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerFdelay.setStatus('current')
hotlinksCurCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterPort.setStatus('current')
hotlinksCurCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerMasterTrunk.setStatus('current')
hotlinksCurCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupPort.setStatus('current')
hotlinksCurCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksCurCfgTriggerBackupTrunk.setStatus('current')
hotlinksNewCfgTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7), )
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTable.setStatus('current')
hotlinksNewCfgTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksNewCfgTriggerId"))
if mibBuilder.loadTexts: hotlinksNewCfgTriggerTableEntry.setStatus('current')
hotlinksNewCfgTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerId.setStatus('current')
hotlinksNewCfgTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerState.setStatus('current')
hotlinksNewCfgTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerPreemptState.setStatus('current')
hotlinksNewCfgTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerFdelay.setStatus('current')
hotlinksNewCfgTriggerMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterPort.setStatus('current')
hotlinksNewCfgTriggerMasterTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerMasterTrunk.setStatus('current')
hotlinksNewCfgTriggerBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupPort.setStatus('current')
hotlinksNewCfgTriggerBackupTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hotlinksNewCfgTriggerBackupTrunk.setStatus('current')
thashL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2))
ufdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1))
fdbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1))
dot1xCurCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5))
dot1xNewCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6))
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2))
lacpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3))
ufdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4))
hotlinksStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6))
hotlinksStatsTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1), )
if mibBuilder.loadTexts: hotlinksStatsTriggerTable.setStatus('current')
hotlinksStatsTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksStatsTriggerId"))
if mibBuilder.loadTexts: hotlinksStatsTriggerTableEntry.setStatus('current')
hotlinksStatsTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerId.setStatus('current')
hotlinksStatsTriggerMasterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerMasterActive.setStatus('current')
hotlinksStatsTriggerBackupActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerBackupActive.setStatus('current')
hotlinksStatsTriggerFdbUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbUpdate.setStatus('current')
hotlinksStatsTriggerFdbFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksStatsTriggerFdbFailed.setStatus('current')
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4))
dot1xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5))
dot1pInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6))
genInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8))
trunkGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9))
hotlinksInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10))
hotlinksInfoOnState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoOnState.setStatus('current')
hotlinksInfoFdbUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoFdbUpdateState.setStatus('current')
hotlinksInfoTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3), )
if mibBuilder.loadTexts: hotlinksInfoTriggerTable.setStatus('current')
hotlinksInfoTriggerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "hotlinksInfoTriggerId"))
if mibBuilder.loadTexts: hotlinksInfoTriggerTableEntry.setStatus('current')
hotlinksInfoTriggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerId.setStatus('current')
hotlinksInfoTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerState.setStatus('current')
hotlinksInfoTriggerPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerPreemptState.setStatus('current')
hotlinksInfoTriggerFdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerFdelay.setStatus('current')
hotlinksInfoTriggerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hotlinksInfoTriggerActive.setStatus('current')
dot1xSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
l2ThashCurCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setStatus('current')
l2ThashNewCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setStatus('current')
l2ThashCurCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setStatus('current')
l2ThashNewCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setStatus('current')
l2ThashCurCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setStatus('current')
l2ThashNewCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setStatus('current')
l2ThashCurCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setStatus('current')
l2ThashNewCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setStatus('current')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
stgCurCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap1.setStatus('obsolete')
stgCurCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap2.setStatus('obsolete')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
stgCurCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgAgingTime.setStatus('current')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
stgNewCfgVlanBmap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap1.setStatus('obsolete')
stgNewCfgVlanBmap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap2.setStatus('obsolete')
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
stgNewCfgAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgAgingTime.setStatus('current')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgStgIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
stgCurCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortLink.setStatus('current')
stgCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortEdge.setStatus('current')
stgCurCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortFastFwd.setStatus('current')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgStgIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
stgNewCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortLink.setStatus('current')
stgNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortEdge.setStatus('current')
stgNewCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortFastFwd.setStatus('current')
mstCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgState.setStatus('current')
mstNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgState.setStatus('current')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
mstCurCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setStatus('current')
mstNewCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setStatus('current')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
mstCistCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setStatus('current')
mstCistNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setStatus('current')
mstCistNewCfgAddVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 2, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setStatus('current')
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
mstCistNewCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setStatus('current')
mstCistNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setStatus('current')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
pmNewCfgPmonDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 4, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setStatus('current')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
upfastCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upfastCurCfgState.setStatus('current')
upfastNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upfastNewCfgState.setStatus('current')
updateCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateCurCfgState.setStatus('current')
updateNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateNewCfgState.setStatus('current')
fdbStatsCreates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCreates.setStatus('current')
fdbStatsDeletes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsDeletes.setStatus('current')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
fdbStatsLookups = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookups.setStatus('current')
fdbStatsLookupFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsLookupFails.setStatus('current')
fdbStatsFinds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFinds.setStatus('current')
fdbStatsFindFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindFails.setStatus('current')
fdbStatsFindOrCreates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsFindOrCreates.setStatus('current')
fdbStatsOverflows = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsOverflows.setStatus('current')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stgStatsStpIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
lacpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: lacpStatsTable.setStatus('current')
lacpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpStatsIndex"))
if mibBuilder.loadTexts: lacpStatsTableEntry.setStatus('current')
lacpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpStatsIndex.setStatus('current')
lacpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusRx.setStatus('current')
markerpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusRx.setStatus('current')
markerresponsepdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusRx.setStatus('current')
unknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownRx.setStatus('current')
illegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: illegalRx.setStatus('current')
lacpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusTx.setStatus('current')
markerpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusTx.setStatus('current')
markerresponsepdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusTx.setStatus('current')
ufdNoLtMLinkFailure = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkFailure.setStatus('current')
ufdNoLtMLinkBlockingState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkBlockingState.setStatus('current')
ufdNoLtDAutoDisabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtDAutoDisabled.setStatus('current')
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ignore", 2), ("forward", 3), ("flood", 4), ("ffd", 5), ("trunk", 6), ("vir", 7), ("vsr", 8), ("vpr", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
fdbRefSps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbRefSps.setStatus('current')
fdbLearnedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbLearnedPort.setStatus('current')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
stpInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoState.setStatus('current')
stgInfoVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgInfoVlanBmap.setStatus('current')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
stpInfoBrgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgPriority.setStatus('current')
stpInfoBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgHelloTime.setStatus('current')
stpInfoBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgForwardDelay.setStatus('current')
stpInfoBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgMaxAge.setStatus('current')
stpInfoAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoAgingTime.setStatus('current')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoPortStpIndex"), (0, "BLADETYPE2-PHYSICAL-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
cistRootHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootHelloTime.setStatus('current')
cistRootMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootMaxAge.setStatus('current')
cistRootForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootForwardDelay.setStatus('current')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
cistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgePriority.setStatus('current')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
cistMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistMaxHopCount.setStatus('current')
mstpDigest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpDigest.setStatus('current')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
cistInfoPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortHelloTime.setStatus('current')
lacpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1), )
if mibBuilder.loadTexts: lacpInfoPortTable.setStatus('current')
lacpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "lacpInfoPortIndex"))
if mibBuilder.loadTexts: lacpInfoPortTableEntry.setStatus('current')
lacpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndex.setStatus('current')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
ufdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgState.setStatus('current')
ufdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgState.setStatus('current')
ufdCurCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMPorts.setStatus('current')
ufdNewCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtMPorts.setStatus('current')
ufdCurCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMTrunks.setStatus('current')
ufdNewCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtMTrunks.setStatus('current')
ufdCurCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDPorts.setStatus('current')
ufdNewCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtDPorts.setStatus('current')
ufdCurCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDTrunks.setStatus('current')
ufdNewCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtDTrunks.setStatus('current')
ufdNewCfgAddLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMPort.setStatus('current')
ufdNewCfgRemoveLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMPort.setStatus('current')
ufdNewCfgAddLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMTrunk.setStatus('current')
ufdNewCfgRemoveLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMTrunk.setStatus('current')
ufdNewCfgAddLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDPort.setStatus('current')
ufdNewCfgRemoveLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDPort.setStatus('current')
ufdNewCfgAddLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDTrunk.setStatus('current')
ufdNewCfgRemoveLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDTrunk.setStatus('current')
ufdCurCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgGlobalState.setStatus('current')
ufdNewCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgGlobalState.setStatus('current')
dot1xCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurStatus.setStatus('current')
dot1xNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xNewStatus.setStatus('current')
dot1xCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3), )
if mibBuilder.loadTexts: dot1xCurCfgPortTable.setStatus('current')
dot1xCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xCurCfgPortIndex"))
if mibBuilder.loadTexts: dot1xCurCfgPortEntry.setStatus('current')
dot1xCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortIndex.setStatus('current')
dot1xCurCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMode.setStatus('current')
dot1xCurCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortQtPeriod.setStatus('current')
dot1xCurCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortTxPeriod.setStatus('current')
dot1xCurCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSupTmout.setStatus('current')
dot1xCurCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSrvTmout.setStatus('current')
dot1xCurCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMaxRq.setStatus('current')
dot1xCurCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortRaPeriod.setStatus('current')
dot1xCurCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortReAuth.setStatus('current')
dot1xNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4), )
if mibBuilder.loadTexts: dot1xNewCfgPortTable.setStatus('current')
dot1xNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xNewCfgPortIndex"))
if mibBuilder.loadTexts: dot1xNewCfgPortEntry.setStatus('current')
dot1xNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xNewCfgPortIndex.setStatus('current')
dot1xNewCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMode.setStatus('current')
dot1xNewCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortQtPeriod.setStatus('current')
dot1xNewCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortTxPeriod.setStatus('current')
dot1xNewCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSupTmout.setStatus('current')
dot1xNewCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSrvTmout.setStatus('current')
dot1xNewCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMaxRq.setStatus('current')
dot1xNewCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortRaPeriod.setStatus('current')
dot1xNewCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortReAuth.setStatus('current')
dot1xNewCfgPortDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortDefault.setStatus('current')
dot1xNewCfgPortApplyGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortApplyGlobal.setStatus('current')
dot1xCurCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMode.setStatus('current')
dot1xCurCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalQtPeriod.setStatus('current')
dot1xCurCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalTxPeriod.setStatus('current')
dot1xCurCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSupTmout.setStatus('current')
dot1xCurCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSrvTmout.setStatus('current')
dot1xCurCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMaxRq.setStatus('current')
dot1xCurCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalRaPeriod.setStatus('current')
dot1xCurCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalReAuth.setStatus('current')
dot1xNewCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMode.setStatus('current')
dot1xNewCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalQtPeriod.setStatus('current')
dot1xNewCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalTxPeriod.setStatus('current')
dot1xNewCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSupTmout.setStatus('current')
dot1xNewCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSrvTmout.setStatus('current')
dot1xNewCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMaxRq.setStatus('current')
dot1xNewCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalRaPeriod.setStatus('current')
dot1xNewCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 11, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalReAuth.setStatus('current')
dot1xInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: dot1xInfoPortTable.setStatus('current')
dot1xInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1xInfoPortIndex"))
if mibBuilder.loadTexts: dot1xInfoPortEntry.setStatus('current')
dot1xInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortIndex.setStatus('current')
dot1xInfoPortAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthMode.setStatus('current')
dot1xInfoPortAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authorized", 0), ("unauthorized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthStatus.setStatus('current')
dot1xInfoPortCtrlDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortCtrlDir.setStatus('current')
dot1xInfoPortAuthPAEState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initialize", 0), ("disconnected", 1), ("connecting", 2), ("authenticating", 3), ("authenticated", 4), ("aborting", 5), ("held", 6), ("forceauth", 7), ("forceunauth", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthPAEState.setStatus('current')
dot1xInfoPortBackAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("request", 0), ("response", 1), ("success", 2), ("fail", 3), ("timeout", 4), ("idle", 5), ("initialize", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortBackAuthState.setStatus('current')
dot1xSystemCapability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("authenticator", 0), ("supplicant", 1), ("authenticatorAndSupplicant", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemCapability.setStatus('current')
dot1xSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemStatus.setStatus('current')
dot1xSystemProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemProtoVersion.setStatus('current')
fdbCurCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setStatus('current')
fdbNewCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setStatus('current')
fdbNewCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2), )
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setStatus('current')
fdbNewCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "fdbNewCfgEntryIndex"))
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setStatus('current')
fdbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setStatus('current')
fdbNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setStatus('current')
fdbNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddPort.setStatus('current')
fdbNewCfgAddMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddMac.setStatus('current')
fdbNewCfgDelStaticEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setStatus('current')
dot1pInfoPriorityCOSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: dot1pInfoPriorityCOSTable.setStatus('current')
dot1pInfoPriorityCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1pInfoPriorityIndex"))
if mibBuilder.loadTexts: dot1pInfoPriorityCOSEntry.setStatus('current')
dot1pInfoPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityIndex.setStatus('current')
dot1pInfoPriorityCOSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSQueue.setStatus('current')
dot1pInfoPriorityCOSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSWeight.setStatus('current')
dot1pInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2), )
if mibBuilder.loadTexts: dot1pInfoPortTable.setStatus('current')
dot1pInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "dot1pInfoPortIndex"))
if mibBuilder.loadTexts: dot1pInfoPortEntry.setStatus('current')
dot1pInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortIndex.setStatus('current')
dot1pInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortPriority.setStatus('current')
dot1pInfoPortCOSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortCOSq.setStatus('current')
dot1pInfoPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortWeight.setStatus('current')
generalInfoStpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoStpUplinkFast.setStatus('current')
generalInfoUplinkFastRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoUplinkFastRate.setStatus('current')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
trunkGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1), )
if mibBuilder.loadTexts: trunkGroupInfoTable.setStatus('current')
trunkGroupInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1), ).setIndexNames((0, "BLADETYPE2-PHYSICAL-MIB", "trunkGroupInfoIndex"))
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setStatus('current')
trunkGroupInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoIndex.setStatus('current')
trunkGroupInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoState.setStatus('current')
trunkGroupInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 2, 3, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPorts.setStatus('current')
mibBuilder.exportSymbols("BLADETYPE2-PHYSICAL-MIB", mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, dot1xNewCfgGlobalSrvTmout=dot1xNewCfgGlobalSrvTmout, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, dot1xCurCfgPortTable=dot1xCurCfgPortTable, hotlinksNewCfgTriggerMasterPort=hotlinksNewCfgTriggerMasterPort, cistInfoPortRole=cistInfoPortRole, stgCurCfgStgIndex=stgCurCfgStgIndex, ufdNewCfgGlobalState=ufdNewCfgGlobalState, lacpNewPortCfgTable=lacpNewPortCfgTable, lacpdusTx=lacpdusTx, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, stpInfoPortPathCost=stpInfoPortPathCost, fdbNewCfgStaticTable=fdbNewCfgStaticTable, trunkGroupInfoIndex=trunkGroupInfoIndex, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, ufdNewCfgRemoveLtDTrunk=ufdNewCfgRemoveLtDTrunk, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, stgCurCfgPortPriority=stgCurCfgPortPriority, stgCurCfgPortLink=stgCurCfgPortLink, stgCurCfgPortState=stgCurCfgPortState, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, trunkGroupInfoState=trunkGroupInfoState, lacpCurSystemPriority=lacpCurSystemPriority, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, vlanNewCfgStg=vlanNewCfgStg, stgNewCfgPortTable=stgNewCfgPortTable, hotlinksStatsTriggerFdbFailed=hotlinksStatsTriggerFdbFailed, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, vlanNewCfgRemovePort=vlanNewCfgRemovePort, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, fdbTable=fdbTable, stgNewCfgTableEntry=stgNewCfgTableEntry, lacpNewPortCfgTableId=lacpNewPortCfgTableId, ufdNewCfgAddLtDPort=ufdNewCfgAddLtDPort, dot1xCurCfgGlobalTable=dot1xCurCfgGlobalTable, vlanNewCfgPorts=vlanNewCfgPorts, dot1xCurCfgPortEntry=dot1xCurCfgPortEntry, vlanCurCfgState=vlanCurCfgState, l2ThashCurCfgSipState=l2ThashCurCfgSipState, ufdNewCfgAddLtMTrunk=ufdNewCfgAddLtMTrunk, fdbSrcPort=fdbSrcPort, ufdNewCfgRemoveLtMPort=ufdNewCfgRemoveLtMPort, mstCfg=mstCfg, hotlinksCurCfgTriggerTable=hotlinksCurCfgTriggerTable, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, stpInfoBrgMaxAge=stpInfoBrgMaxAge, hotlinksNewCfgTriggerPreemptState=hotlinksNewCfgTriggerPreemptState, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, dot1xCurCfgGlobalSrvTmout=dot1xCurCfgGlobalSrvTmout, stgNewCfgStgIndex=stgNewCfgStgIndex, lacpStatsIndex=lacpStatsIndex, dot1xCurCfgGlobalReAuth=dot1xCurCfgGlobalReAuth, stgCurCfgPriority=stgCurCfgPriority, lacpInfoPortNtt=lacpInfoPortNtt, stpStats=stpStats, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, l2ThashCurCfgSmacState=l2ThashCurCfgSmacState, pmNewCfgPortMirrState=pmNewCfgPortMirrState, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, ufdNewCfgLtDPorts=ufdNewCfgLtDPorts, stpInfoPortStpIndex=stpInfoPortStpIndex, dot1xCurCfgGlobalTxPeriod=dot1xCurCfgGlobalTxPeriod, hotlinksStatsTriggerId=hotlinksStatsTriggerId, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, fdbStatsDeletes=fdbStatsDeletes, stgNewCfgIndex=stgNewCfgIndex, updateNewCfgState=updateNewCfgState, updateCurCfgState=updateCurCfgState, ufdCurCfgLtMPorts=ufdCurCfgLtMPorts, dot1xInfoPortAuthStatus=dot1xInfoPortAuthStatus, cistRootPort=cistRootPort, cistRootMaxAge=cistRootMaxAge, vlanNewCfgTableEntry=vlanNewCfgTableEntry, mstCistCfg=mstCistCfg, stgCurCfgIndex=stgCurCfgIndex, fdbCurCfgAgingTime=fdbCurCfgAgingTime, stgInfoVlanBmap=stgInfoVlanBmap, stpInfoForwardDelay=stpInfoForwardDelay, stgNewCfgPortPathCost=stgNewCfgPortPathCost, layer2Info=layer2Info, lacpCurPortCfgTableId=lacpCurPortCfgTableId, trunkGroupTableMaxSize=trunkGroupTableMaxSize, hotlinksStatsTriggerFdbUpdate=hotlinksStatsTriggerFdbUpdate, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, dot1xCurCfgGlobalMaxRq=dot1xCurCfgGlobalMaxRq, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, dot1pInfo=dot1pInfo, stgCurCfgVlanBmap2=stgCurCfgVlanBmap2, dot1xNewCfgPortSrvTmout=dot1xNewCfgPortSrvTmout, stgCurCfgPortEdge=stgCurCfgPortEdge, stgNewCfgPortLink=stgNewCfgPortLink, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, hotlinksInfo=hotlinksInfo, stpInfoRootPort=stpInfoRootPort, thash=thash, l2ThashNewCfgDipState=l2ThashNewCfgDipState, dot1xCurCfgPortMode=dot1xCurCfgPortMode, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, stgNewCfgPriority=stgNewCfgPriority, fdbGeneralCfg=fdbGeneralCfg, l2ThashNewCfgSipState=l2ThashNewCfgSipState, vlanCurCfgTableEntry=vlanCurCfgTableEntry, cistBridgeMaxAge=cistBridgeMaxAge, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, hotlinksNewCfgTriggerFdelay=hotlinksNewCfgTriggerFdelay, mstCistBridgeCfg=mstCistBridgeCfg, stgCurCfgAgingTime=stgCurCfgAgingTime, lacpdusRx=lacpdusRx, vlanCurCfgStg=vlanCurCfgStg, fdbStatsFindFails=fdbStatsFindFails, dot1xInfoPortBackAuthState=dot1xInfoPortBackAuthState, dot1xCurCfgPortMaxRq=dot1xCurCfgPortMaxRq, pmNewCfgPmonDelete=pmNewCfgPmonDelete, ufdNewCfgLtMPorts=ufdNewCfgLtMPorts, fdbClear=fdbClear, cistInfoPortPathCost=cistInfoPortPathCost, hotlinksStatsTriggerMasterActive=hotlinksStatsTriggerMasterActive, mstGeneralCfg=mstGeneralCfg, lacpInfo=lacpInfo, mstNewCfgRegionName=mstNewCfgRegionName, vlanCurCfgVlanName=vlanCurCfgVlanName, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, stgCfg=stgCfg, vlanInfoTableEntry=vlanInfoTableEntry, stgCurCfgState=stgCurCfgState, mstCistCurCfgVlanBmap=mstCistCurCfgVlanBmap, ufdStats=ufdStats, stpInfoMaxAge=stpInfoMaxAge, hotlinksInfoTriggerFdelay=hotlinksInfoTriggerFdelay, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, dot1xSystemProtoVersion=dot1xSystemProtoVersion, PYSNMP_MODULE_ID=layer2, stpInfoHoldTime=stpInfoHoldTime, dot1xNewCfgPortTxPeriod=dot1xNewCfgPortTxPeriod, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, ufdNoLtDAutoDisabled=ufdNoLtDAutoDisabled, mstCistDefaultCfg=mstCistDefaultCfg, dot1xCurCfgPortTxPeriod=dot1xCurCfgPortTxPeriod, hotlinksCurCfgTriggerBackupTrunk=hotlinksCurCfgTriggerBackupTrunk, hotlinksInfoTriggerId=hotlinksInfoTriggerId, dot1xInfoPortAuthPAEState=dot1xInfoPortAuthPAEState, cistInfoPortLinkType=cistInfoPortLinkType, ufdCurCfgState=ufdCurCfgState, stpInfoPortIndex=stpInfoPortIndex, dot1xNewCfgPortMode=dot1xNewCfgPortMode, lacpInfoPortIndex=lacpInfoPortIndex, hotlinksInfoFdbUpdateState=hotlinksInfoFdbUpdateState, dot1xNewCfgPortTable=dot1xNewCfgPortTable, fdbStatsLookups=fdbStatsLookups, dot1xNewCfgPortEntry=dot1xNewCfgPortEntry, dot1pInfoPortPriority=dot1pInfoPortPriority, cistRoot=cistRoot, layer2Configs=layer2Configs, lacpCurPortCfgTable=lacpCurPortCfgTable, dot1xInfoPortIndex=dot1xInfoPortIndex, ufd=ufd, stgCurCfgPortIndex=stgCurCfgPortIndex, fdbNewCfgEntryIndex=fdbNewCfgEntryIndex, stpInfoHelloTime=stpInfoHelloTime, vlanInfoId=vlanInfoId, hotlinksNewCfgTriggerBackupPort=hotlinksNewCfgTriggerBackupPort, illegalRx=illegalRx, markerpdusTx=markerpdusTx, l2ThashNewCfgSmacState=l2ThashNewCfgSmacState, mstNewCfgStpMode=mstNewCfgStpMode, thashL2=thashL2, ufdNewCfgLtMTrunks=ufdNewCfgLtMTrunks, dot1xCurCfgPortQtPeriod=dot1xCurCfgPortQtPeriod, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, dot1xNewCfgPortQtPeriod=dot1xNewCfgPortQtPeriod, ufdNewCfgState=ufdNewCfgState, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, markerpdusRx=markerpdusRx, ufdNewCfgAddLtDTrunk=ufdNewCfgAddLtDTrunk, fdbNewCfgDelStaticEntry=fdbNewCfgDelStaticEntry, fdbVlan=fdbVlan, l2ThashCurCfgDmacState=l2ThashCurCfgDmacState, cistInfoPortTableEntry=cistInfoPortTableEntry, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, dot1xCurCfgGlobalQtPeriod=dot1xCurCfgGlobalQtPeriod, layer2Stats=layer2Stats, hotlinksNewCfgTriggerTable=hotlinksNewCfgTriggerTable, trunkGroupInfoTableEntry=trunkGroupInfoTableEntry, dot1xNewCfgGlobalReAuth=dot1xNewCfgGlobalReAuth, hotlinksStatsTriggerTable=hotlinksStatsTriggerTable, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, vlanNewCfgVlanName=vlanNewCfgVlanName, mstCistNewCfgVlanBmap=mstCistNewCfgVlanBmap, stpInfoTopChanges=stpInfoTopChanges, vlanNewCfgDelete=vlanNewCfgDelete, vlanCurCfgVlanId=vlanCurCfgVlanId, dot1xSystemStatus=dot1xSystemStatus, ufdCurCfgLtMTrunks=ufdCurCfgLtMTrunks, stgNewCfgState=stgNewCfgState, dot1xNewCfgGlobalQtPeriod=dot1xNewCfgGlobalQtPeriod, stgNewCfgVlanBmap2=stgNewCfgVlanBmap2, fdbSrcTrunk=fdbSrcTrunk, dot1xCurCfgGlobalMode=dot1xCurCfgGlobalMode, cistInfoPortHelloTime=cistInfoPortHelloTime, lacpInfoPortTable=lacpInfoPortTable, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, hotlinksMaxTriggerEntries=hotlinksMaxTriggerEntries, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, dot1xNewCfgGlobalSupTmout=dot1xNewCfgGlobalSupTmout, stgNewCfgAddVlan=stgNewCfgAddVlan, stgCurCfgVlanBmap=stgCurCfgVlanBmap, dot1xNewCfgPortMaxRq=dot1xNewCfgPortMaxRq, fdbStatsFindOrCreates=fdbStatsFindOrCreates, mstCistNewCfgPortTable=mstCistNewCfgPortTable, dot1xCurCfgPortIndex=dot1xCurCfgPortIndex, stgStatsPortIndex=stgStatsPortIndex, vlanNewCfgAddPort=vlanNewCfgAddPort, stpInfoPortState=stpInfoPortState, stgNewCfgPortFastFwd=stgNewCfgPortFastFwd, trunkGroupInfoPorts=trunkGroupInfoPorts, stpInfoBrgHelloTime=stpInfoBrgHelloTime, vlanInfo=vlanInfo, cistInfoPortTable=cistInfoPortTable, markerresponsepdusRx=markerresponsepdusRx, l2GeneralCfg=l2GeneralCfg, hotlinksCurCfgTriggerTableEntry=hotlinksCurCfgTriggerTableEntry, vlanNewCfgTable=vlanNewCfgTable, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, stpInfoPortTable=stpInfoPortTable, vlanMaxEnt=vlanMaxEnt, dot1xCurCfgGlobalRaPeriod=dot1xCurCfgGlobalRaPeriod, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, stgCurCfgPortTable=stgCurCfgPortTable, fdbStatsOverflows=fdbStatsOverflows, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, dot1xNewStatus=dot1xNewStatus, fdbNewCfgAgingTime=fdbNewCfgAgingTime, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, hotlinksInfoTriggerActive=hotlinksInfoTriggerActive, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, stpInfoPortTableEntry=stpInfoPortTableEntry, hotlinksStatsTriggerBackupActive=hotlinksStatsTriggerBackupActive, hotlinksInfoTriggerState=hotlinksInfoTriggerState, ufdNewCfgRemoveLtDPort=ufdNewCfgRemoveLtDPort, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, lacpNewSystemPriority=lacpNewSystemPriority, hotlinksCurCfgTriggerId=hotlinksCurCfgTriggerId, trunkGroupInfo=trunkGroupInfo, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, hotlinksCurCfgTriggerFdelay=hotlinksCurCfgTriggerFdelay, dot1xSystemCapability=dot1xSystemCapability, stgNewCfgPortPriority=stgNewCfgPortPriority, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, stgNewCfgPortState=stgNewCfgPortState, lacpStatsTable=lacpStatsTable)
mibBuilder.exportSymbols("BLADETYPE2-PHYSICAL-MIB", dot1xNewCfgGlobalRaPeriod=dot1xNewCfgGlobalRaPeriod, l2ThashNewCfgDmacState=l2ThashNewCfgDmacState, stgNewCfgPortEdge=stgNewCfgPortEdge, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, lacpInfoPortSelected=lacpInfoPortSelected, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, lacpInfoPortMoved=lacpInfoPortMoved, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, fdbStatsCreates=fdbStatsCreates, ufdNewCfgLtDTrunks=ufdNewCfgLtDTrunks, trunkGroupNewCfgTable=trunkGroupNewCfgTable, upfastNewCfgState=upfastNewCfgState, fdbEntry=fdbEntry, layer2Oper=layer2Oper, fdbStatsFinds=fdbStatsFinds, mstCistCurCfgPortTable=mstCistCurCfgPortTable, vlanInfoPorts=vlanInfoPorts, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, dot1x=dot1x, hotlinksStatsTriggerTableEntry=hotlinksStatsTriggerTableEntry, trunkGroupNewCfgState=trunkGroupNewCfgState, dot1xCurStatus=dot1xCurStatus, stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, stgStatsPortTable=stgStatsPortTable, dot1xNewCfgPortSupTmout=dot1xNewCfgPortSupTmout, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, dot1xNewCfgPortRaPeriod=dot1xNewCfgPortRaPeriod, dot1pInfoPortTable=dot1pInfoPortTable, ufdCurCfgLtDTrunks=ufdCurCfgLtDTrunks, stpInfoAgingTime=stpInfoAgingTime, stgNewCfgVlanBmap1=stgNewCfgVlanBmap1, hotlinksStats=hotlinksStats, vlanInfoStatus=vlanInfoStatus, vlanCurCfgTable=vlanCurCfgTable, dot1xNewCfgPortReAuth=dot1xNewCfgPortReAuth, hotlinksNewCfgTriggerTableEntry=hotlinksNewCfgTriggerTableEntry, ufdNoLtMLinkBlockingState=ufdNoLtMLinkBlockingState, fdbLearnedPort=fdbLearnedPort, dot1xNewCfgGlobalMode=dot1xNewCfgGlobalMode, dot1xNewCfgGlobalTable=dot1xNewCfgGlobalTable, dot1pInfoPortWeight=dot1pInfoPortWeight, dot1pInfoPortEntry=dot1pInfoPortEntry, cistInfoPortState=cistInfoPortState, trunkGroupCurCfgState=trunkGroupCurCfgState, stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, dot1xNewCfgGlobalTxPeriod=dot1xNewCfgGlobalTxPeriod, cistGeneralInfo=cistGeneralInfo, stgStatsStpIndex=stgStatsStpIndex, dot1pInfoPortCOSq=dot1pInfoPortCOSq, fdbStatsCurrent=fdbStatsCurrent, hotlinksInfoTriggerTableEntry=hotlinksInfoTriggerTableEntry, ufdGeneralCfg=ufdGeneralCfg, cistBridgePriority=cistBridgePriority, genInfo=genInfo, vlanNewCfgState=vlanNewCfgState, stpInfoDesignatedRoot=stpInfoDesignatedRoot, stgCurCfgVlanBmap1=stgCurCfgVlanBmap1, dot1xCurCfgPortReAuth=dot1xCurCfgPortReAuth, vlanInfoName=vlanInfoName, stgCurCfgTable=stgCurCfgTable, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, hotlinksInfoOnState=hotlinksInfoOnState, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, ufdCurCfgGlobalState=ufdCurCfgGlobalState, hotlinksCurCfgTriggerMasterPort=hotlinksCurCfgTriggerMasterPort, lacpInfoPortTableEntry=lacpInfoPortTableEntry, hotlinksCurCfgOnState=hotlinksCurCfgOnState, stgCurCfgPortPathCost=stgCurCfgPortPathCost, stgNewCfgTable=stgNewCfgTable, hotlinksNewCfgTriggerMasterTrunk=hotlinksNewCfgTriggerMasterTrunk, unknownRx=unknownRx, dot1xInfoPortEntry=dot1xInfoPortEntry, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, hotlinksCurCfgFdbUpdateState=hotlinksCurCfgFdbUpdateState, stpInfoIndex=stpInfoIndex, mirrPortMirr=mirrPortMirr, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, cistRootPathCost=cistRootPathCost, cistInfoPortIndex=cistInfoPortIndex, ufdCurCfgLtDPorts=ufdCurCfgLtDPorts, mstCurCfgState=mstCurCfgState, mstCistNewCfgAddVlan=mstCistNewCfgAddVlan, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, trunkGroupInfoTable=trunkGroupInfoTable, fdb=fdb, dot1pInfoPriorityIndex=dot1pInfoPriorityIndex, dot1xCurCfgGlobalSupTmout=dot1xCurCfgGlobalSupTmout, vlanCurCfgPorts=vlanCurCfgPorts, hotlinksNewCfgOnState=hotlinksNewCfgOnState, cistRegionalRoot=cistRegionalRoot, dot1pInfoPortIndex=dot1pInfoPortIndex, stpInfoState=stpInfoState, hotlinksCurCfgTriggerPreemptState=hotlinksCurCfgTriggerPreemptState, cistRootForwardDelay=cistRootForwardDelay, dot1xNewCfgPortApplyGlobal=dot1xNewCfgPortApplyGlobal, stpInfoTable=stpInfoTable, trunkgroup=trunkgroup, dot1xCurCfgPortSupTmout=dot1xCurCfgPortSupTmout, hotlinksCurCfgTriggerBackupPort=hotlinksCurCfgTriggerBackupPort, vlan=vlan, hotlinksInfoTriggerTable=hotlinksInfoTriggerTable, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, l2ThashCurCfgDipState=l2ThashCurCfgDipState, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, hotlinksNewCfgTriggerId=hotlinksNewCfgTriggerId, lacpNewPortState=lacpNewPortState, cistRootHelloTime=cistRootHelloTime, stgCurCfgTableEntry=stgCurCfgTableEntry, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, dot1pInfoPriorityCOSWeight=dot1pInfoPriorityCOSWeight, ufdNoLtMLinkFailure=ufdNoLtMLinkFailure, hotlinksNewCfgTriggerBackupTrunk=hotlinksNewCfgTriggerBackupTrunk, cistBridgeForwardDelay=cistBridgeForwardDelay, mirroring=mirroring, dot1xCurCfgPortRaPeriod=dot1xCurCfgPortRaPeriod, cistRegionalPathCost=cistRegionalPathCost, mstCistNewCfgPortLinkType=mstCistNewCfgPortLinkType, lacp=lacp, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, cistInfo=cistInfo, mstNewCfgRegionVersion=mstNewCfgRegionVersion, lacpInfoPortReadyN=lacpInfoPortReadyN, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, hotlinksCurCfgTriggerState=hotlinksCurCfgTriggerState, trunkGroupCurCfgTable=trunkGroupCurCfgTable, mstCurCfgRegionName=mstCurCfgRegionName, stgNewCfgPortIndex=stgNewCfgPortIndex, layer2=layer2, fdbNewCfgAddVlan=fdbNewCfgAddVlan, fdbNewCfgAddPort=fdbNewCfgAddPort, lacpStatsTableEntry=lacpStatsTableEntry, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, fdbStatsLookupFails=fdbStatsLookupFails, hotlinksCurCfgTriggerMasterTrunk=hotlinksCurCfgTriggerMasterTrunk, generalInfoStpUplinkFast=generalInfoStpUplinkFast, mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, mstpDigest=mstpDigest, fdbMacAddr=fdbMacAddr, fdbInfo=fdbInfo, cistInfoPortPriority=cistInfoPortPriority, lacpStats=lacpStats, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, vlanInfoTable=vlanInfoTable, hotlinksNewCfgTriggerState=hotlinksNewCfgTriggerState, mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, hotlinksCfg=hotlinksCfg, stgCurCfgPortFastFwd=stgCurCfgPortFastFwd, cistMaxHopCount=cistMaxHopCount, dot1xInfoPortTable=dot1xInfoPortTable, fdbNewCfgAddMac=fdbNewCfgAddMac, stgStatsPortTableEntry=stgStatsPortTableEntry, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, pmCurCfgPortMirrState=pmCurCfgPortMirrState, upfastCurCfgState=upfastCurCfgState, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, fdbStats=fdbStats, generalInfoUplinkFastRate=generalInfoUplinkFastRate, dot1pInfoPriorityCOSTable=dot1pInfoPriorityCOSTable, fdbRefSps=fdbRefSps, fdbNewCfgStaticEntry=fdbNewCfgStaticEntry, ufdNewCfgRemoveLtMTrunk=ufdNewCfgRemoveLtMTrunk, dot1xNewCfgPortIndex=dot1xNewCfgPortIndex, fdbStatsHiwat=fdbStatsHiwat, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, dot1xInfoPortCtrlDir=dot1xInfoPortCtrlDir, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, lacpCurPortState=lacpCurPortState, stpInfoBrgPriority=stpInfoBrgPriority, hotlinksNewCfgFdbUpdateState=hotlinksNewCfgFdbUpdateState, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, mstNewCfgState=mstNewCfgState, stpInfoRootCost=stpInfoRootCost, stpInfoTableEntry=stpInfoTableEntry, dot1xCurCfgPortSrvTmout=dot1xCurCfgPortSrvTmout, stpInfoBrgForwardDelay=stpInfoBrgForwardDelay, dot1xSystemInfo=dot1xSystemInfo, dot1xInfo=dot1xInfo, dot1xInfoPortAuthMode=dot1xInfoPortAuthMode, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, mstCurCfgStpMode=mstCurCfgStpMode, stgNewCfgAgingTime=stgNewCfgAgingTime, stgNewCfgVlanBmap=stgNewCfgVlanBmap, dot1pInfoPriorityCOSEntry=dot1pInfoPriorityCOSEntry, stpInfo=stpInfo, fdbState=fdbState, markerresponsepdusTx=markerresponsepdusTx, ufdNewCfgAddLtMPort=ufdNewCfgAddLtMPort, dot1pInfoPriorityCOSQueue=dot1pInfoPriorityCOSQueue, hotlinksInfoTriggerPreemptState=hotlinksInfoTriggerPreemptState, dot1xNewCfgPortDefault=dot1xNewCfgPortDefault, mstCurCfgRegionVersion=mstCurCfgRegionVersion, dot1xNewCfgGlobalMaxRq=dot1xNewCfgGlobalMaxRq, mstCistNewCfgPortEdge=mstCistNewCfgPortEdge, vlanNewCfgVlanId=vlanNewCfgVlanId)
