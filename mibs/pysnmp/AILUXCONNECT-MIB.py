#
# PySNMP MIB module AILUXCONNECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AILUXCONNECT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AIIConnType, = mibBuilder.importSymbols("AISYSTEM-MIB", "AIIConnType")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, Gauge32, enterprises, ObjectIdentity, NotificationType, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, IpAddress, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Gauge32", "enterprises", "ObjectIdentity", "NotificationType", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "IpAddress", "iso", "MibIdentifier")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiLuxConnect = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 33))
aiLuxConnect.setRevisions(('2001-04-30 17:00',))
if mibBuilder.loadTexts: aiLuxConnect.setLastUpdated('200104301700Z')
if mibBuilder.loadTexts: aiLuxConnect.setOrganization('Applied Innovation Inc.')
aiLCTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 33, 0))
aiLCTrapGtranSwitch = NotificationType((1, 3, 6, 1, 4, 1, 539, 33, 0, 1)).setObjects(("AILUXCONNECT-MIB", "aiLCGtranActiveIndex"), ("AILUXCONNECT-MIB", "aiLCGtranActiveSpan"))
if mibBuilder.loadTexts: aiLCTrapGtranSwitch.setStatus('current')
aiLCTrapGbicInserted = NotificationType((1, 3, 6, 1, 4, 1, 539, 33, 0, 2)).setObjects(("AILUXCONNECT-MIB", "aiLCGbicIndex"), ("AILUXCONNECT-MIB", "aiLCGbicConnectorType"))
if mibBuilder.loadTexts: aiLCTrapGbicInserted.setStatus('current')
aiLCTrapGbicRemoved = NotificationType((1, 3, 6, 1, 4, 1, 539, 33, 0, 3)).setObjects(("AILUXCONNECT-MIB", "aiLCGbicIndex"), ("AILUXCONNECT-MIB", "aiLCGbicConnectorType"))
if mibBuilder.loadTexts: aiLCTrapGbicRemoved.setStatus('current')
aiLCGtranActiveTable = MibTable((1, 3, 6, 1, 4, 1, 539, 33, 1), )
if mibBuilder.loadTexts: aiLCGtranActiveTable.setStatus('current')
aiLCGtranActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 33, 1, 1), ).setIndexNames((0, "AILUXCONNECT-MIB", "aiLCGtranActiveIndex"))
if mibBuilder.loadTexts: aiLCGtranActiveEntry.setStatus('current')
aiLCGtranActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveIndex.setStatus('current')
aiLCGtranActiveBackupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveBackupIndex.setStatus('current')
aiLCGtranActiveSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("protect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLCGtranActiveSpan.setStatus('current')
aiLCGtranActiveRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveRxUtilization.setStatus('current')
aiLCGtranActiveTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveTxUtilization.setStatus('current')
aiLCGtranActiveClockSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLCGtranActiveClockSlave.setStatus('current')
aiLCGtranActiveCoolerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLCGtranActiveCoolerStatus.setStatus('current')
aiLCGtranActiveTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("trouble", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveTemperature.setStatus('current')
aiLCGtranActiveRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("under", 2), ("over", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveRxPower.setStatus('current')
aiLCGtranActiveTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("under", 2), ("over", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranActiveTxPower.setStatus('current')
aiLCGtranBackupTable = MibTable((1, 3, 6, 1, 4, 1, 539, 33, 2), )
if mibBuilder.loadTexts: aiLCGtranBackupTable.setStatus('current')
aiLCGtranBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 33, 2, 1), ).setIndexNames((0, "AILUXCONNECT-MIB", "aiLCGtranBackupIndex"))
if mibBuilder.loadTexts: aiLCGtranBackupEntry.setStatus('current')
aiLCGtranBackupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranBackupIndex.setStatus('current')
aiLCGtranBackupActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGtranBackupActiveIndex.setStatus('current')
aiLcGbicTable = MibTable((1, 3, 6, 1, 4, 1, 539, 33, 3), )
if mibBuilder.loadTexts: aiLcGbicTable.setStatus('current')
aiLCGbicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 33, 3, 1), ).setIndexNames((0, "AILUXCONNECT-MIB", "aiLCGbicIndex"))
if mibBuilder.loadTexts: aiLCGbicEntry.setStatus('current')
aiLCGbicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGbicIndex.setStatus('current')
aiLCGbicConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 3, 1, 2), AIIConnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGbicConnectorType.setStatus('current')
aiLCGbicTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("gtran", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiLCGbicTxMode.setStatus('current')
aiLCGbicRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGbicRxUtilization.setStatus('current')
aiLCGbicTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiLCGbicTxUtilization.setStatus('current')
mibBuilder.exportSymbols("AILUXCONNECT-MIB", aiLCGtranActiveBackupIndex=aiLCGtranActiveBackupIndex, aiLCGbicConnectorType=aiLCGbicConnectorType, aiLCGtranActiveEntry=aiLCGtranActiveEntry, aiLCGtranActiveClockSlave=aiLCGtranActiveClockSlave, aiLCTrapGbicInserted=aiLCTrapGbicInserted, aiLCGbicEntry=aiLCGbicEntry, aiLCGtranBackupIndex=aiLCGtranBackupIndex, aiLCGtranActiveTxPower=aiLCGtranActiveTxPower, aiLCTrapGbicRemoved=aiLCTrapGbicRemoved, aiLCGtranBackupEntry=aiLCGtranBackupEntry, aiLCTrapGtranSwitch=aiLCTrapGtranSwitch, aiLuxConnect=aiLuxConnect, aii=aii, aiLCGtranActiveRxUtilization=aiLCGtranActiveRxUtilization, aiLCGtranBackupTable=aiLCGtranBackupTable, aiLCGtranActiveIndex=aiLCGtranActiveIndex, aiLCTrapInfo=aiLCTrapInfo, aiLCGtranActiveTable=aiLCGtranActiveTable, aiLCGtranActiveTxUtilization=aiLCGtranActiveTxUtilization, aiLCGtranBackupActiveIndex=aiLCGtranBackupActiveIndex, PYSNMP_MODULE_ID=aiLuxConnect, aiLCGbicTxUtilization=aiLCGbicTxUtilization, aiLCGtranActiveRxPower=aiLCGtranActiveRxPower, aiLcGbicTable=aiLcGbicTable, aiLCGbicIndex=aiLCGbicIndex, aiLCGtranActiveSpan=aiLCGtranActiveSpan, aiLCGtranActiveTemperature=aiLCGtranActiveTemperature, aiLCGbicRxUtilization=aiLCGbicRxUtilization, aiLCGbicTxMode=aiLCGbicTxMode, aiLCGtranActiveCoolerStatus=aiLCGtranActiveCoolerStatus)
