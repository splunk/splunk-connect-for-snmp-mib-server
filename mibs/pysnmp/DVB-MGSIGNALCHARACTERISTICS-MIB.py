#
# PySNMP MIB module DVB-MGSIGNALCHARACTERISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DVB-MGSIGNALCHARACTERISTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:40:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
PIDPlusOne, FloatingPoint, DeliverySystemType, ServiceId, InputNumber, Modulation, RateStatus = mibBuilder.importSymbols("DVB-MGTR101290-MIB", "PIDPlusOne", "FloatingPoint", "DeliverySystemType", "ServiceId", "InputNumber", "Modulation", "RateStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, enterprises, NotificationType, iso, Counter32, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "enterprises", "NotificationType", "iso", "Counter32", "IpAddress", "Unsigned32")
DateAndTime, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention")
mgSignalCharacteristics = ModuleIdentity((1, 3, 6, 1, 4, 1, 2696, 3, 3))
if mibBuilder.loadTexts: mgSignalCharacteristics.setLastUpdated('200111071400Z')
if mibBuilder.loadTexts: mgSignalCharacteristics.setOrganization('DVB')
class CASystemID(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class EncryptionState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unencrypted", 1), ("encrypted", 2), ("unknown", 3))

class GuardInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("guard1over32", 1), ("guard1over16", 2), ("guard1over8", 3), ("guard1over4", 4))

class InnerCodeRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("rateNone", 1), ("rate1over2", 2), ("rate2over3", 3), ("rate3over4", 4), ("rate5over6", 5), ("rate7over8", 6))

class NetworkID(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class PID(TextualConvention, Integer32):
    reference = 'ISO 13818-1 2.1.32'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8191)

class ReadableString(TextualConvention, OctetString):
    reference = 'RFC 2279'
    status = 'current'
    displayHint = '255t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TerrestrialTransmissionMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("carriers2k", 1), ("carriers8k", 2))

dvb = MibIdentifier((1, 3, 6, 1, 4, 1, 2696))
mg = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3))
mgSignalCharacteristicsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1))
mgTSStructure = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1))
mgTSStructureTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1))
structureTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 0))
tsStructureChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 0, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlChangeTime"))
if mibBuilder.loadTexts: tsStructureChangeTrap.setStatus('current')
structureTrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: structureTrapControlTable.setStatus('current')
structureTrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlInputNumber"))
if mibBuilder.loadTexts: structureTrapControlEntry.setStatus('current')
structureTrapControlInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: structureTrapControlInputNumber.setStatus('current')
structureTrapControlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapControlOID.setStatus('current')
structureTrapControlChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapControlChangeTime.setStatus('current')
structureTrapControlRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 4), RateStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: structureTrapControlRateStatus.setStatus('current')
structureTrapControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: structureTrapControlPeriod.setStatus('current')
structureTrapInput = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 2), InputNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapInput.setStatus('current')
mgTSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: mgTSTable.setStatus('current')
mgTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSInputNumber"))
if mibBuilder.loadTexts: mgTSEntry.setStatus('current')
mgTSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgTSInputNumber.setStatus('current')
mgTSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSId.setStatus('current')
mgTSOriginalNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 3), NetworkID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSOriginalNetworkID.setStatus('current')
mgTSNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 4), NetworkID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSNetworkID.setStatus('current')
mgTSNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 5), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSNetworkName.setStatus('current')
mgServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3), )
if mibBuilder.loadTexts: mgServiceTable.setStatus('current')
mgServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceInputNumber"))
if mibBuilder.loadTexts: mgServiceEntry.setStatus('current')
mgServiceInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgServiceInputNumber.setStatus('current')
mgServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgServiceNumber.setStatus('current')
mgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceType.setStatus('current')
mgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 4), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceName.setStatus('current')
mgServiceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 5), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceProviderName.setStatus('current')
mgServicePMTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 6), PID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServicePMTPID.setStatus('current')
mgServicePCRPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 7), PID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServicePCRPID.setStatus('current')
mgServiceCondAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 8), EncryptionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceCondAccess.setStatus('current')
mgServiceEITComponentDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 9), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceEITComponentDescriptor.setStatus('current')
mgPIDTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4), )
if mibBuilder.loadTexts: mgPIDTable.setStatus('current')
mgPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDInputNumber"))
if mibBuilder.loadTexts: mgPIDEntry.setStatus('current')
mgPIDInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgPIDInputNumber.setStatus('current')
mgPIDServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgPIDServiceNumber.setStatus('current')
mgPIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDNumber.setStatus('current')
mgPIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDType.setStatus('current')
mgPIDCondAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 5), EncryptionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDCondAccess.setStatus('current')
mgEMMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5), )
if mibBuilder.loadTexts: mgEMMTable.setStatus('current')
mgEMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMCaPID"))
if mibBuilder.loadTexts: mgEMMEntry.setStatus('current')
mgEMMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgEMMInputNumber.setStatus('current')
mgEMMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: mgEMMCaPID.setStatus('current')
mgEMMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 3), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgEMMCASystemID.setStatus('current')
mgServiceECMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6), )
if mibBuilder.loadTexts: mgServiceECMTable.setStatus('current')
mgServiceECMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMServiceNumber"))
if mibBuilder.loadTexts: mgServiceECMEntry.setStatus('current')
mgServiceECMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgServiceECMInputNumber.setStatus('current')
mgServiceECMServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgServiceECMServiceNumber.setStatus('current')
mgServiceECMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgServiceECMCaPID.setStatus('current')
mgServiceECMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 4), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceECMCASystemID.setStatus('current')
mgPIDECMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7), )
if mibBuilder.loadTexts: mgPIDECMTable.setStatus('current')
mgPIDECMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMPID"))
if mibBuilder.loadTexts: mgPIDECMEntry.setStatus('current')
mgPIDECMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgPIDECMInputNumber.setStatus('current')
mgPIDECMServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgPIDECMServiceNumber.setStatus('current')
mgPIDECMPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDECMPID.setStatus('current')
mgPIDECMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 4), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDECMCaPID.setStatus('current')
mgPIDECMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 5), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDECMCASystemID.setStatus('current')
mgNITDeliverySystemTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8), )
if mibBuilder.loadTexts: mgNITDeliverySystemTable.setStatus('current')
mgNITDeliverySystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSInputNumber"))
if mibBuilder.loadTexts: mgNITDeliverySystemEntry.setStatus('current')
mgNITDSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgNITDSInputNumber.setStatus('current')
mgNITDSSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 2), DeliverySystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSystemType.setStatus('current')
mgNITDSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 3), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFrequency.setStatus('current')
mgNITDSFecOuter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFecOuter.setStatus('current')
mgNITDSCableModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCableModulation.setStatus('current')
mgNITDSSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 6), Unsigned32()).setUnits('symbol/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSymbolRate.setStatus('current')
mgNITDSFecInner = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFecInner.setStatus('current')
mgNITDSOrbitalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 8), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSOrbitalPosition.setStatus('current')
mgNITDSWestEastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("west", 0), ("east", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSWestEastFlag.setStatus('current')
mgNITDSPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSPolarization.setStatus('current')
mgNITDSSatelliteModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSatelliteModulation.setStatus('current')
mgNITDSBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSBandwidth.setStatus('current')
mgNITDSConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSConstellation.setStatus('current')
mgNITDSHierarchyInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSHierarchyInformation.setStatus('current')
mgNITDSCodeRateHPStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCodeRateHPStream.setStatus('current')
mgNITDSCodeRateLPStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCodeRateLPStream.setStatus('current')
mgNITDSGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSGuardInterval.setStatus('current')
mgNITDSTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSTransmissionMode.setStatus('current')
mgNITDSOtherFrequencyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSOtherFrequencyFlag.setStatus('current')
mgRFCharacteristics = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2))
mgRFCharacteristicsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1))
rfTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 0))
rfCharacteristicsChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 0, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlChangeTime"))
if mibBuilder.loadTexts: rfCharacteristicsChangeTrap.setStatus('current')
rfCharacteristicsTrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1), )
if mibBuilder.loadTexts: rfCharacteristicsTrapControlTable.setStatus('current')
rfCharacteristicsTrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlInputNumber"))
if mibBuilder.loadTexts: rfCharacteristicsTrapControlEntry.setStatus('current')
rfCharacteristicsTrapControlInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfCharacteristicsTrapControlInputNumber.setStatus('current')
rfCharacteristicsTrapControlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlOID.setStatus('current')
rfCharacteristicsTrapControlChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlChangeTime.setStatus('current')
rfCharacteristicsTrapControlRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 4), RateStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlRateStatus.setStatus('current')
rfCharacteristicsTrapControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlPeriod.setStatus('current')
rfCharacteristicsTrapInput = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 2), InputNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapInput.setStatus('current')
mgRFCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2), )
if mibBuilder.loadTexts: mgRFCharacteristicsTable.setStatus('current')
mgRFCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFInputNumber"))
if mibBuilder.loadTexts: mgRFCharacteristicsEntry.setStatus('current')
mgRFInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgRFInputNumber.setStatus('current')
mgRFSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 2), DeliverySystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFSystemType.setStatus('current')
mgRFCentreFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 3), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFCentreFrequency.setStatus('current')
mgRFModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 4), Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFModulation.setStatus('current')
mgRFFecInner = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 5), InnerCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFFecInner.setStatus('current')
mgRFFecInnerLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 6), InnerCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFFecInnerLP.setStatus('current')
mgRFSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 7), FloatingPoint()).setUnits('Msymbol/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFSymbolRate.setStatus('current')
mgRFBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 8), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFBandwidth.setStatus('current')
mgRFTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 9), TerrestrialTransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFTransmissionMode.setStatus('current')
mgRFIsHierarchical = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFIsHierarchical.setStatus('current')
mgRFGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 11), GuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFGuardInterval.setStatus('current')
mgSignalCharacteristicsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2))
mgSignalCharacteristicsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1))
mgSCTransportStreamCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCTransportStreamGroup"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCTransportStreamTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamCompliance = mgSCTransportStreamCompliance.setStatus('current')
mgSCRadioFrequencyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1, 2)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCRadioFrequencyGroup"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCRadioFrequencyTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyCompliance = mgSCRadioFrequencyCompliance.setStatus('current')
mgSignalCharacteristicsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3))
mgSCTransportStreamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlChangeTime"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlRateStatus"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlPeriod"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSId"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSOriginalNetworkID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSNetworkID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSNetworkName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceProviderName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServicePMTPID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServicePCRPID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceCondAccess"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceEITComponentDescriptor"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDCondAccess"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSystemType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFrequency"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFecOuter"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCableModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSymbolRate"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFecInner"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSOrbitalPosition"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSWestEastFlag"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSPolarization"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSatelliteModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSBandwidth"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSConstellation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSHierarchyInformation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCodeRateHPStream"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCodeRateLPStream"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSGuardInterval"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSTransmissionMode"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSOtherFrequencyFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamGroup = mgSCTransportStreamGroup.setStatus('current')
mgSCRadioFrequencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 2)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlChangeTime"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlRateStatus"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlPeriod"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFSystemType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFCentreFrequency"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFFecInner"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFFecInnerLP"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFSymbolRate"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFBandwidth"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFTransmissionMode"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFIsHierarchical"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFGuardInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyGroup = mgSCRadioFrequencyGroup.setStatus('current')
mgSCTransportStreamTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 3)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "tsStructureChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamTrapGroup = mgSCTransportStreamTrapGroup.setStatus('current')
mgSCRadioFrequencyTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 4)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyTrapGroup = mgSCRadioFrequencyTrapGroup.setStatus('current')
mibBuilder.exportSymbols("DVB-MGSIGNALCHARACTERISTICS-MIB", structureTrapControlEntry=structureTrapControlEntry, mgServiceCondAccess=mgServiceCondAccess, mgServiceECMTable=mgServiceECMTable, mgPIDECMTable=mgPIDECMTable, mgTSInputNumber=mgTSInputNumber, mgTSStructure=mgTSStructure, CASystemID=CASystemID, rfCharacteristicsTrapControlPeriod=rfCharacteristicsTrapControlPeriod, mgPIDECMServiceNumber=mgPIDECMServiceNumber, mgTSNetworkName=mgTSNetworkName, mgNITDeliverySystemTable=mgNITDeliverySystemTable, mgNITDSGuardInterval=mgNITDSGuardInterval, mgSignalCharacteristics=mgSignalCharacteristics, mgNITDSOrbitalPosition=mgNITDSOrbitalPosition, rfCharacteristicsTrapControlOID=rfCharacteristicsTrapControlOID, mgRFIsHierarchical=mgRFIsHierarchical, mgRFCharacteristicsEntry=mgRFCharacteristicsEntry, mgSignalCharacteristicsConformance=mgSignalCharacteristicsConformance, mgNITDSFecOuter=mgNITDSFecOuter, mgTSNetworkID=mgTSNetworkID, mgNITDSCodeRateLPStream=mgNITDSCodeRateLPStream, structureTrapControlTable=structureTrapControlTable, mgRFTransmissionMode=mgRFTransmissionMode, mgNITDSHierarchyInformation=mgNITDSHierarchyInformation, mgRFSymbolRate=mgRFSymbolRate, mgSCTransportStreamGroup=mgSCTransportStreamGroup, mgServiceECMCaPID=mgServiceECMCaPID, mgEMMTable=mgEMMTable, mgPIDCondAccess=mgPIDCondAccess, structureTrapPrefix=structureTrapPrefix, mgNITDSCodeRateHPStream=mgNITDSCodeRateHPStream, tsStructureChangeTrap=tsStructureChangeTrap, mgPIDInputNumber=mgPIDInputNumber, mgPIDNumber=mgPIDNumber, mgEMMInputNumber=mgEMMInputNumber, mgServiceECMServiceNumber=mgServiceECMServiceNumber, mgEMMCASystemID=mgEMMCASystemID, mgNITDSSatelliteModulation=mgNITDSSatelliteModulation, ReadableString=ReadableString, mgPIDEntry=mgPIDEntry, mgNITDSFecInner=mgNITDSFecInner, mgRFFecInnerLP=mgRFFecInnerLP, mgRFCentreFrequency=mgRFCentreFrequency, mgPIDECMPID=mgPIDECMPID, rfCharacteristicsTrapControlInputNumber=rfCharacteristicsTrapControlInputNumber, mgEMMCaPID=mgEMMCaPID, structureTrapControlChangeTime=structureTrapControlChangeTime, mgRFCharacteristicsTrap=mgRFCharacteristicsTrap, TerrestrialTransmissionMode=TerrestrialTransmissionMode, rfCharacteristicsTrapControlRateStatus=rfCharacteristicsTrapControlRateStatus, mg=mg, mgServiceECMCASystemID=mgServiceECMCASystemID, mgNITDSConstellation=mgNITDSConstellation, mgRFSystemType=mgRFSystemType, mgNITDSWestEastFlag=mgNITDSWestEastFlag, GuardInterval=GuardInterval, mgPIDECMCaPID=mgPIDECMCaPID, PYSNMP_MODULE_ID=mgSignalCharacteristics, mgServicePMTPID=mgServicePMTPID, mgSCRadioFrequencyCompliance=mgSCRadioFrequencyCompliance, mgPIDServiceNumber=mgPIDServiceNumber, mgRFFecInner=mgRFFecInner, mgServiceEntry=mgServiceEntry, rfTrapPrefix=rfTrapPrefix, mgSCRadioFrequencyGroup=mgSCRadioFrequencyGroup, mgTSStructureTrap=mgTSStructureTrap, mgServicePCRPID=mgServicePCRPID, mgServiceType=mgServiceType, mgNITDSSystemType=mgNITDSSystemType, mgNITDSBandwidth=mgNITDSBandwidth, EncryptionState=EncryptionState, mgRFInputNumber=mgRFInputNumber, NetworkID=NetworkID, mgServiceProviderName=mgServiceProviderName, rfCharacteristicsTrapControlChangeTime=rfCharacteristicsTrapControlChangeTime, mgServiceEITComponentDescriptor=mgServiceEITComponentDescriptor, mgRFCharacteristics=mgRFCharacteristics, mgRFCharacteristicsTable=mgRFCharacteristicsTable, mgServiceECMInputNumber=mgServiceECMInputNumber, mgSignalCharacteristicsObjects=mgSignalCharacteristicsObjects, rfCharacteristicsTrapInput=rfCharacteristicsTrapInput, structureTrapControlPeriod=structureTrapControlPeriod, rfCharacteristicsTrapControlEntry=rfCharacteristicsTrapControlEntry, mgTSTable=mgTSTable, rfCharacteristicsTrapControlTable=rfCharacteristicsTrapControlTable, mgSCTransportStreamTrapGroup=mgSCTransportStreamTrapGroup, mgRFGuardInterval=mgRFGuardInterval, mgServiceTable=mgServiceTable, mgTSOriginalNetworkID=mgTSOriginalNetworkID, mgPIDTable=mgPIDTable, mgSignalCharacteristicsCompliances=mgSignalCharacteristicsCompliances, mgServiceInputNumber=mgServiceInputNumber, mgServiceECMEntry=mgServiceECMEntry, mgNITDSFrequency=mgNITDSFrequency, mgRFBandwidth=mgRFBandwidth, PID=PID, mgServiceNumber=mgServiceNumber, mgNITDSCableModulation=mgNITDSCableModulation, mgSCRadioFrequencyTrapGroup=mgSCRadioFrequencyTrapGroup, structureTrapControlOID=structureTrapControlOID, mgNITDSOtherFrequencyFlag=mgNITDSOtherFrequencyFlag, structureTrapControlRateStatus=structureTrapControlRateStatus, structureTrapControlInputNumber=structureTrapControlInputNumber, mgServiceName=mgServiceName, mgNITDSSymbolRate=mgNITDSSymbolRate, mgSCTransportStreamCompliance=mgSCTransportStreamCompliance, mgNITDSInputNumber=mgNITDSInputNumber, mgNITDSPolarization=mgNITDSPolarization, mgEMMEntry=mgEMMEntry, mgTSId=mgTSId, mgNITDSTransmissionMode=mgNITDSTransmissionMode, mgNITDeliverySystemEntry=mgNITDeliverySystemEntry, rfCharacteristicsChangeTrap=rfCharacteristicsChangeTrap, mgTSEntry=mgTSEntry, mgPIDECMEntry=mgPIDECMEntry, structureTrapInput=structureTrapInput, mgRFModulation=mgRFModulation, mgPIDECMInputNumber=mgPIDECMInputNumber, mgSignalCharacteristicsGroups=mgSignalCharacteristicsGroups, mgPIDECMCASystemID=mgPIDECMCASystemID, InnerCodeRate=InnerCodeRate, mgPIDType=mgPIDType, dvb=dvb)
