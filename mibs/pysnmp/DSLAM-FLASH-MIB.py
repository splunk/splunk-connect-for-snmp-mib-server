#
# PySNMP MIB module DSLAM-FLASH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSLAM-FLASH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter32, MibIdentifier, Integer32, TimeTicks, Unsigned32, Counter64, IpAddress, NotificationType, Bits, Gauge32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "Counter64", "IpAddress", "NotificationType", "Bits", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pgDSLAMFlashMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 5))
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setLastUpdated('9803260000Z')
if mibBuilder.loadTexts: pgDSLAMFlashMIB.setOrganization('Pairgain Technology')
pgDSLAMFlashObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1))
pgDSLAMFlashOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFlashOperStatus.setStatus('mandatory')
pgDSLAMFlashDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashDownLoad.setStatus('mandatory')
pgDSLAMFlashUpLoad = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashUpLoad.setStatus('mandatory')
pgDSLAMFlashCopyFile = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFlashCopyFile.setStatus('mandatory')
pgModemXferTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5), )
if mibBuilder.loadTexts: pgModemXferTable.setStatus('mandatory')
pgModemXferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgModemXferEntry.setStatus('mandatory')
pgModemXferOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgModemXferOperStatus.setStatus('mandatory')
pgModemXferSourceFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgModemXferSourceFilename.setStatus('mandatory')
pgModemXferDestinationFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgModemXferDestinationFilename.setStatus('optional')
pgModemXferAction = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 5, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("abort", 1), ("download", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pgModemXferAction.setStatus('mandatory')
mibBuilder.exportSymbols("DSLAM-FLASH-MIB", pgModemXferSourceFilename=pgModemXferSourceFilename, pgModemXferEntry=pgModemXferEntry, PYSNMP_MODULE_ID=pgDSLAMFlashMIB, pgModemXferDestinationFilename=pgModemXferDestinationFilename, pgDSLAMFlashMIB=pgDSLAMFlashMIB, pgDSLAMFlashOperStatus=pgDSLAMFlashOperStatus, pgDSLAMFlashCopyFile=pgDSLAMFlashCopyFile, pgModemXferTable=pgModemXferTable, pgModemXferAction=pgModemXferAction, pgModemXferOperStatus=pgModemXferOperStatus, pgDSLAMFlashDownLoad=pgDSLAMFlashDownLoad, pgDSLAMFlashUpLoad=pgDSLAMFlashUpLoad, pgDSLAMFlashObjects=pgDSLAMFlashObjects)
