#
# PySNMP MIB module INFORMANT-SQLSERVER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-SQLSERVER
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, NotificationType, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Integer32, Bits, Gauge32, Counter64, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Integer32", "Bits", "Gauge32", "Counter64", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
InstanceName, informant = mibBuilder.importSymbols("WTCS", "InstanceName", "informant")
sqlServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3))
sqlServer.setRevisions(('2004-09-10 20:47', '2004-02-29 06:23', '2004-01-20 08:55',))
if mibBuilder.loadTexts: sqlServer.setLastUpdated('200409102047Z')
if mibBuilder.loadTexts: sqlServer.setOrganization('Informant Systems, Inc.')
analysisServerAggCache = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1))
if mibBuilder.loadTexts: analysisServerAggCache.setStatus('current')
asacBytesAddedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacBytesAddedPerSec.setStatus('current')
asacCurrentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacCurrentBytes.setStatus('current')
asacCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacCurrentEntries.setStatus('current')
asacDirectHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacDirectHitRatio.setStatus('current')
asacDirectHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacDirectHitsPerSec.setStatus('current')
asacEvictionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacEvictionsPerSec.setStatus('current')
asacFilterHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacFilterHitRatio.setStatus('current')
asacFilterHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacFilterHitsPerSec.setStatus('current')
asacInsertsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacInsertsPerSec.setStatus('current')
asacLookupsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacLookupsPerSec.setStatus('current')
asacMissesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacMissesPerSec.setStatus('current')
asacTotalDirectHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalDirectHits.setStatus('current')
asacTotalEvictions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalEvictions.setStatus('current')
asacTotalFilterHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalFilterHits.setStatus('current')
asacTotalInserts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalInserts.setStatus('current')
asacTotalLookups = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalLookups.setStatus('current')
asacTotalMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asacTotalMisses.setStatus('current')
analysisServerConnection = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2))
if mibBuilder.loadTexts: analysisServerConnection.setStatus('current')
ascAuthenticationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascAuthenticationsPerSec.setStatus('current')
ascCompletionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCompletionsPerSec.setStatus('current')
ascCurrentAgents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentAgents.setStatus('current')
ascCurrentAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentAuthentications.setStatus('current')
ascCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentConnections.setStatus('current')
ascCurrentConnectionsInProgress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentConnectionsInProgress.setStatus('current')
ascCurrentHttpConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascCurrentHttpConnections.setStatus('current')
ascFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascFailuresPerSec.setStatus('current')
ascRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascRequestsPerSec.setStatus('current')
ascSuccessesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascSuccessesPerSec.setStatus('current')
ascTotalAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalAuthentications.setStatus('current')
ascTotalCompletions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalCompletions.setStatus('current')
ascTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalFailures.setStatus('current')
ascTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalRequests.setStatus('current')
ascTotalSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascTotalSuccesses.setStatus('current')
analysisServerLastQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3))
if mibBuilder.loadTexts: analysisServerLastQuery.setStatus('current')
aslqAnswerFromCacheDirect = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromCacheDirect.setStatus('current')
aslqAnswerFromCacheFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromCacheFiltered.setStatus('current')
aslqAnswerFromFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqAnswerFromFile.setStatus('current')
aslqDSNRequested = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDSNRequested.setStatus('current')
aslqDSNUsed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDSNUsed.setStatus('current')
aslqDataAvgBytesPerRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgBytesPerRead.setStatus('current')
aslqDataAvgBytesPerRow = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgBytesPerRow.setStatus('current')
aslqDataAvgRowsPerRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataAvgRowsPerRead.setStatus('current')
aslqDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataBytes.setStatus('current')
aslqDataReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqDataReads.setStatus('current')
aslqIndexBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqIndexBytes.setStatus('current')
aslqIndexReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqIndexReads.setStatus('current')
aslqMapBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqMapBytes.setStatus('current')
aslqMapReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqMapReads.setStatus('current')
aslqQueryNum = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqQueryNum.setStatus('current')
aslqRowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsCreated.setStatus('current')
aslqRowsFilterExcluded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFilterExcluded.setStatus('current')
aslqRowsFilterIncluded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFilterIncluded.setStatus('current')
aslqRowsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsFiltered.setStatus('current')
aslqRowsRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqRowsRead.setStatus('current')
aslqTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTimeMs.setStatus('current')
aslqTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTotalBytes.setStatus('current')
aslqTotalReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 3, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslqTotalReads.setStatus('current')
analysisServerLocks = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4))
if mibBuilder.loadTexts: analysisServerLocks.setStatus('current')
aslCurrentLatchWaits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLatchWaits.setStatus('current')
aslCurrentLockWaits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLockWaits.setStatus('current')
aslCurrentLocks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslCurrentLocks.setStatus('current')
aslLatchWaitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLatchWaitsPerSec.setStatus('current')
aslLockDenialsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockDenialsPerSec.setStatus('current')
aslLockGrantsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockGrantsPerSec.setStatus('current')
aslLockRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockRequestsPerSec.setStatus('current')
aslLockWaitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslLockWaitsPerSec.setStatus('current')
aslUnlockRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 4, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aslUnlockRequestsPerSec.setStatus('current')
analysisServerProc = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5))
if mibBuilder.loadTexts: analysisServerProc.setStatus('current')
aspCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentPartitions.setStatus('current')
aspCurrentThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreads.setStatus('current')
aspCurrentThreadsMerging = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsMerging.setStatus('current')
aspCurrentThreadsReading = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsReading.setStatus('current')
aspCurrentThreadsWriting = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspCurrentThreadsWriting.setStatus('current')
aspFileBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspFileBytesWrittenPerSec.setStatus('current')
aspFileRowsWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspFileRowsWrittenPerSec.setStatus('current')
aspMemorySizeBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspMemorySizeBytes.setStatus('current')
aspMemorySizeRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspMemorySizeRows.setStatus('current')
aspRowsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsCreatedPerSec.setStatus('current')
aspRowsMergedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsMergedPerSec.setStatus('current')
aspRowsReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspRowsReadPerSec.setStatus('current')
aspTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTotalPartitions.setStatus('current')
aspTotalRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 5, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspTotalRows.setStatus('current')
analysisServerProcAggs = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6))
if mibBuilder.loadTexts: analysisServerProcAggs.setStatus('current')
aspaCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaCurrentPartitions.setStatus('current')
aspaMemorySizeBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaMemorySizeBytes.setStatus('current')
aspaMemorySizeRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaMemorySizeRows.setStatus('current')
aspaRowsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaRowsCreatedPerSec.setStatus('current')
aspaRowsMergedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaRowsMergedPerSec.setStatus('current')
aspaTempFileBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTempFileBytesWrittenPerSec.setStatus('current')
aspaTempFileRowsWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTempFileRowsWrittenPerSec.setStatus('current')
aspaTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspaTotalPartitions.setStatus('current')
analysisServerProcIndexes = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7))
if mibBuilder.loadTexts: analysisServerProcIndexes.setStatus('current')
aspiCurrentPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiCurrentPartitions.setStatus('current')
aspiRowsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiRowsPerSec.setStatus('current')
aspiTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiTotalPartitions.setStatus('current')
aspiTotalRows = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspiTotalRows.setStatus('current')
analysisServerQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8))
if mibBuilder.loadTexts: analysisServerQuery.setStatus('current')
asqAvgTimePerQuery = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqAvgTimePerQuery.setStatus('current')
asqBytesSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqBytesSentPerSec.setStatus('current')
asqCurrentProcessThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadPool.setStatus('current')
asqCurrentProcessThreadQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadQueueLen.setStatus('current')
asqCurrentProcessThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentProcessThreadsActive.setStatus('current')
asqCurrentPyramidOperations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentPyramidOperations.setStatus('current')
asqCurrentQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentQueries.setStatus('current')
asqCurrentThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentThreads.setStatus('current')
asqCurrentWorkerThreadPool = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentWorkerThreadPool.setStatus('current')
asqCurrentWorkerThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqCurrentWorkerThreadsActive.setStatus('current')
asqDataBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqDataBytesPerSec.setStatus('current')
asqDataReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqDataReadsPerSec.setStatus('current')
asqFilterRowsExcludedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilterRowsExcludedPerSec.setStatus('current')
asqFilterRowsIncludedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilterRowsIncludedPerSec.setStatus('current')
asqFilteredRowsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqFilteredRowsPerSec.setStatus('current')
asqIndexBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqIndexBytesPerSec.setStatus('current')
asqIndexReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqIndexReadsPerSec.setStatus('current')
asqMapBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqMapBytesPerSec.setStatus('current')
asqMapReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqMapReadsPerSec.setStatus('current')
asqNetworkRoundTripsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqNetworkRoundTripsPerSec.setStatus('current')
asqPyramidOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqPyramidOperationsPerSec.setStatus('current')
asqQueriesAnsweredPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesAnsweredPerSec.setStatus('current')
asqQueriesFromCacheDirectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromCacheDirectPerSec.setStatus('current')
asqQueriesFromCacheFilterPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromCacheFilterPerSec.setStatus('current')
asqQueriesFromFilePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesFromFilePerSec.setStatus('current')
asqQueriesRequestedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqQueriesRequestedPerSec.setStatus('current')
asqRowsReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqRowsReadPerSec.setStatus('current')
asqRowsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqRowsSentPerSec.setStatus('current')
asqTotalBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalBytesSent.setStatus('current')
asqTotalNetworkRoundTrips = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalNetworkRoundTrips.setStatus('current')
asqTotalPyramidOperations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalPyramidOperations.setStatus('current')
asqTotalQueriesAnswered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesAnswered.setStatus('current')
asqTotalQueriesFromCacheDirect = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromCacheDirect.setStatus('current')
asqTotalQueriesFromCacheFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromCacheFiltered.setStatus('current')
asqTotalQueriesFromFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesFromFile.setStatus('current')
asqTotalQueriesRequested = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalQueriesRequested.setStatus('current')
asqTotalRowsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 8, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqTotalRowsSent.setStatus('current')
analysisServerQueryDims = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9))
if mibBuilder.loadTexts: analysisServerQueryDims.setStatus('current')
asqdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdBytesPerSec.setStatus('current')
asqdCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdCurrentRequests.setStatus('current')
asqdMembersPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdMembersPerSec.setStatus('current')
asqdRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdRequestsPerSec.setStatus('current')
asqdTotalVLDMRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalVLDMRequests.setStatus('current')
asqdTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalBytes.setStatus('current')
asqdTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalMembers.setStatus('current')
asqdTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdTotalRequests.setStatus('current')
asqdVLDMRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 9, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asqdVLDMRequestsPerSec.setStatus('current')
analysisServerStartup = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10))
if mibBuilder.loadTexts: analysisServerStartup.setStatus('current')
assBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assBytesPerSec.setStatus('current')
assMembersPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assMembersPerSec.setStatus('current')
assPropertiesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assPropertiesPerSec.setStatus('current')
assServerUptime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assServerUptime.setStatus('current')
assTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalBytes.setStatus('current')
assTotalDimensions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalDimensions.setStatus('current')
assTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalMembers.setStatus('current')
assTotalProperties = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assTotalProperties.setStatus('current')
microsoftGatherer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11))
mgAccessingRobotsTxtFile = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAccessingRobotsTxtFile.setStatus('current')
mgActiveQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgActiveQueueLength.setStatus('current')
mgAdminClients = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAdminClients.setStatus('current')
mgAllNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgAllNotificationsReceived.setStatus('current')
mgDelayedDocuments = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDelayedDocuments.setStatus('current')
mgDocumentEntries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentEntries.setStatus('current')
mgDocumentsDelayedRetry = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsDelayedRetry.setStatus('current')
mgDocumentsFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsFiltered.setStatus('current')
mgDocumentsFilteredRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsFilteredRate.setStatus('current')
mgDocumentsSuccessfullyFiltered = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsSuccessfullyFiltered.setStatus('current')
mgDocumentsSuccessfulFilterRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgDocumentsSuccessfulFilterRate.setStatus('current')
mgExtNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgExtNotificationsRate.setStatus('current')
mgExtNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgExtNotificationsReceived.setStatus('current')
mgFilterObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterObjects.setStatus('current')
mgFilterProcessCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcessCreated.setStatus('current')
mgFilterProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcesses.setStatus('current')
mgFilterProcessesMax = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilterProcessesMax.setStatus('current')
mgFilteringThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgFilteringThreads.setStatus('current')
mgHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgHeartbeats.setStatus('current')
mgHeartbeatsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgHeartbeatsRate.setStatus('current')
mgIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgIdleThreads.setStatus('current')
mgNotificationSources = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNotificationSources.setStatus('current')
mgNotificationsRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNotificationsRate.setStatus('current')
mgPerformanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPerformanceLevel.setStatus('current')
mgReasonToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgReasonToBackOff.setStatus('current')
mgRobotsTxtRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRobotsTxtRequests.setStatus('current')
mgServerObjects = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServerObjects.setStatus('current')
mgServerObjectsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServerObjectsCreated.setStatus('current')
mgServersCurrentlyUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServersCurrentlyUnavailable.setStatus('current')
mgServersUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServersUnavailable.setStatus('current')
mgStemmersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgStemmersCached.setStatus('current')
mgSystemIOTrafficRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgSystemIOTrafficRate.setStatus('current')
mgThreadsAccessingNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsAccessingNetwork.setStatus('current')
mgThreadsInPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsInPlugIns.setStatus('current')
mgThreadsBlockedDueToBackOff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgThreadsBlockedDueToBackOff.setStatus('current')
mgTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTimeOuts.setStatus('current')
mgWordBreakersCached = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 11, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgWordBreakersCached.setStatus('current')
microsoftGathererProjectsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12), )
if mibBuilder.loadTexts: microsoftGathererProjectsTable.setStatus('current')
microsoftGathererProjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "mgpInstance"))
if mibBuilder.loadTexts: microsoftGathererProjectsEntry.setStatus('current')
mgpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpInstance.setStatus('current')
mgpAccessedFileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedFileRate.setStatus('current')
mgpAccessedFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedFiles.setStatus('current')
mgpAccessedHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedHTTP.setStatus('current')
mgpAccessedHTTPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAccessedHTTPRate.setStatus('current')
mgpAdaptiveCrawlAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlAccepts.setStatus('current')
mgpAdaptiveCrawlErrorSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrorSamples.setStatus('current')
mgpAdaptiveCrawlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlErrors.setStatus('current')
mgpAdaptiveCrawlExcludes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlExcludes.setStatus('current')
mgpAdaptiveCrawlFalsePositives = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlFalsePositives.setStatus('current')
mgpAdaptiveCrawlTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpAdaptiveCrawlTotal.setStatus('current')
mgpChangedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpChangedDocuments.setStatus('current')
mgpDelayedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDelayedDocuments.setStatus('current')
mgpDocumentAddRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentAddRate.setStatus('current')
mgpDocumentAdditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentAdditions.setStatus('current')
mgpDocumentDeleteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentDeleteRate.setStatus('current')
mgpDocumentDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentDeletes.setStatus('current')
mgpDocumentModifies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentModifies.setStatus('current')
mgpDocumentModifiesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentModifiesRate.setStatus('current')
mgpDocumentMoveAndRenameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentMoveAndRenameRate.setStatus('current')
mgpDocumentMovesPerRenames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentMovesPerRenames.setStatus('current')
mgpDocumentsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentsInProgress.setStatus('current')
mgpDocumentsOnHold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpDocumentsOnHold.setStatus('current')
mgpErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpErrorRate.setStatus('current')
mgpFileErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFileErrors.setStatus('current')
mgpFileErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFileErrorsRate.setStatus('current')
mgpFilteredHTML = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredHTML.setStatus('current')
mgpFilteredHTMLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredHTMLRate.setStatus('current')
mgpFilteredOffice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredOffice.setStatus('current')
mgpFilteredOfficeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredOfficeRate.setStatus('current')
mgpFilteredText = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredText.setStatus('current')
mgpFilteredTextRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteredTextRate.setStatus('current')
mgpFilteringDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpFilteringDocuments.setStatus('current')
mgpGathererPausedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpGathererPausedFlag.setStatus('current')
mgpHTTPErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHTTPErrors.setStatus('current')
mgpHTTPErrorsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHTTPErrorsRate.setStatus('current')
mgpHistoryRecoveryProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpHistoryRecoveryProgress.setStatus('current')
mgpIterateHistoryInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpIterateHistoryInProgressFlag.setStatus('current')
mgpNotModified = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpNotModified.setStatus('current')
mgpProcessedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpProcessedDocuments.setStatus('current')
mgpProcessedDocumentsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpProcessedDocumentsRate.setStatus('current')
mgpRecoveryInProgressFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRecoveryInProgressFlag.setStatus('current')
mgpRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRetries.setStatus('current')
mgpRetriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpRetriesRate.setStatus('current')
mgpStartedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStartedDocuments.setStatus('current')
mgpStatusError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStatusError.setStatus('current')
mgpStatusSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpStatusSuccess.setStatus('current')
mgpSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpSuccessRate.setStatus('current')
mgpURLsInHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpURLsInHistory.setStatus('current')
mgpUniqueDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpUniqueDocuments.setStatus('current')
mgpWaitingDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 12, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgpWaitingDocuments.setStatus('current')
microsoftSearch = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13))
if mibBuilder.loadTexts: microsoftSearch.setStatus('current')
msActiveThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msActiveThreads.setStatus('current')
msCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msCurrentConnections.setStatus('current')
msFailedQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msFailedQueries.setStatus('current')
msFailedQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msFailedQueryRate.setStatus('current')
msQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msQueries.setStatus('current')
msQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msQueryRate.setStatus('current')
msResultRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msResultRate.setStatus('current')
msResults = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msResults.setStatus('current')
msSucceededQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSucceededQueries.setStatus('current')
msSucceededQueryRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSucceededQueryRate.setStatus('current')
msThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 3, 13, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msThreads.setStatus('current')
microsoftSearchCatalogsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14), )
if mibBuilder.loadTexts: microsoftSearchCatalogsTable.setStatus('current')
microsoftSearchCatalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "mscInstance"))
if mibBuilder.loadTexts: microsoftSearchCatalogsEntry.setStatus('current')
mscInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscInstance.setStatus('current')
mscCatalogSizeMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCatalogSizeMBytes.setStatus('current')
mscFailedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFailedQueries.setStatus('current')
mscFailedQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFailedQueriesRate.setStatus('current')
mscNumberOfDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNumberOfDocuments.setStatus('current')
mscPersistentIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscPersistentIndexes.setStatus('current')
mscQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscQueries.setStatus('current')
mscQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscQueriesRate.setStatus('current')
mscResults = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscResults.setStatus('current')
mscResultsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscResultsRate.setStatus('current')
mscSuccessfulQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSuccessfulQueries.setStatus('current')
mscSuccessfulQueriesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSuccessfulQueriesRate.setStatus('current')
mscUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 14, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscUniqueKeys.setStatus('current')
microsoftSearchIndexCatalogTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15), )
if mibBuilder.loadTexts: microsoftSearchIndexCatalogTable.setStatus('current')
microsoftSearchIndexCatalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "msicInstance"))
if mibBuilder.loadTexts: microsoftSearchIndexCatalogEntry.setStatus('current')
msicInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicInstance.setStatus('current')
msicActiveDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicActiveDocuments.setStatus('current')
msicBuildInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicBuildInProgress.setStatus('current')
msicDocumentsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicDocumentsFiltered.setStatus('current')
msicDocumentsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicDocumentsInProgress.setStatus('current')
msicFilesToBeFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicFilesToBeFiltered.setStatus('current')
msicIndexSizeMBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicIndexSizeMBytes.setStatus('current')
msicMergeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicMergeProgress.setStatus('current')
msicNumberOfPropagations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicNumberOfPropagations.setStatus('current')
msicNumberOfDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicNumberOfDocuments.setStatus('current')
msicPersistentIndexes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicPersistentIndexes.setStatus('current')
msicUniqueKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicUniqueKeys.setStatus('current')
msicWordlists = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 15, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msicWordlists.setStatus('current')
sqlServerNameTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16), )
if mibBuilder.loadTexts: sqlServerNameTable.setStatus('current')
sqlServerNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerNameEntry.setStatus('current')
sqlServerNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlServerNameIndex.setStatus('current')
sqlServerNameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 16, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlServerNameInstance.setStatus('current')
sqlServerAccessMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17), )
if mibBuilder.loadTexts: sqlServerAccessMethodsTable.setStatus('current')
sqlServerAccessMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerAccessMethodsEntry.setStatus('current')
ssamAUCleanupBatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamAUCleanupBatchesPerSec.setStatus('current')
ssamAUCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamAUCleanupsPerSec.setStatus('current')
ssamDeferredDroppedRowsets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDeferredDroppedRowsets.setStatus('current')
ssamDeferredDroppedAUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDeferredDroppedAUs.setStatus('current')
ssamDroppedRowsetCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDroppedRowsetCleanupsPerSec.setStatus('current')
ssamDroppedRowsetsSkippedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamDroppedRowsetsSkippedPerSec.setStatus('current')
ssamExtentDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamExtentDeallocationsPerSec.setStatus('current')
ssamExtentsAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamExtentsAllocatedPerSec.setStatus('current')
ssamFailedAUCleanupBatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedAUCleanupBatchesPerSec.setStatus('current')
ssamFailedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedLeafPageCookie.setStatus('current')
ssamFailedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFailedTreePageCookie.setStatus('current')
ssamForwardedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamForwardedRecordsPerSec.setStatus('current')
ssamFreeSpacePageFetchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFreeSpacePageFetchesPerSec.setStatus('current')
ssamFreeSpaceScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFreeSpaceScansPerSec.setStatus('current')
ssamFullScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamFullScansPerSec.setStatus('current')
ssamIndexSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamIndexSearchesPerSec.setStatus('current')
ssamMixedPageAllocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamMixedPageAllocationsPerSec.setStatus('current')
ssamPageDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPageDeallocationsPerSec.setStatus('current')
ssamPageSplitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPageSplitsPerSec.setStatus('current')
ssamPagesAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamPagesAllocatedPerSec.setStatus('current')
ssamProbeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamProbeScansPerSec.setStatus('current')
ssamRangeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamRangeScansPerSec.setStatus('current')
ssamScanPointRevalidationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamScanPointRevalidationsPerSec.setStatus('current')
ssamSkippedGhostedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamSkippedGhostedRecordsPerSec.setStatus('current')
ssamTableLockEscalationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamTableLockEscalationsPerSec.setStatus('current')
ssamUsedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamUsedLeafPageCookie.setStatus('current')
ssamUsedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamUsedTreePageCookie.setStatus('current')
ssamWorkfilesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorkfilesCreatedPerSec.setStatus('current')
ssamWorktablesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorktablesCreatedPerSec.setStatus('current')
ssamWorktablesFromCacheRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 17, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssamWorktablesFromCacheRatio.setStatus('current')
sqlServerBackupDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18), )
if mibBuilder.loadTexts: sqlServerBackupDeviceTable.setStatus('current')
sqlServerBackupDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbdInstance"))
if mibBuilder.loadTexts: sqlServerBackupDeviceEntry.setStatus('current')
ssbdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbdInstance.setStatus('current')
ssbdDeviceThroughputBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbdDeviceThroughputBytesPerSec.setStatus('current')
sqlServerBrokerActivationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19), )
if mibBuilder.loadTexts: sqlServerBrokerActivationTable.setStatus('current')
sqlServerBrokerActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbaInstance"))
if mibBuilder.loadTexts: sqlServerBrokerActivationEntry.setStatus('current')
ssbaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaInstance.setStatus('current')
ssbaStoredProceduresInvokedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaStoredProceduresInvokedPerSec.setStatus('current')
ssbaTaskLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTaskLimitReached.setStatus('current')
ssbaTaskLimitReachedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTaskLimitReachedPerSec.setStatus('current')
ssbaTasksAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksAbortedPerSec.setStatus('current')
ssbaTasksRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksRunning.setStatus('current')
ssbaTasksStartedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbaTasksStartedPerSec.setStatus('current')
sqlServerBrokerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20), )
if mibBuilder.loadTexts: sqlServerBrokerStatisticsTable.setStatus('current')
sqlServerBrokerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBrokerStatisticsEntry.setStatus('current')
ssbsBrokerTransactionRollbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsBrokerTransactionRollbacks.setStatus('current')
ssbsDialogTimerEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsDialogTimerEventCount.setStatus('current')
ssbsEnqueuedLocalMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesTotal.setStatus('current')
ssbsEnqueuedLocalMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedLocalMessagesPerSec.setStatus('current')
ssbsEnqueuedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedMessagesTotal.setStatus('current')
ssbsEnqueuedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedMessagesPerSec.setStatus('current')
ssbsEnqueuedTransportMsgFragTot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragTot.setStatus('current')
ssbsEnqueuedTransportMsgFragsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgFragsPerSec.setStatus('current')
ssbsEnqueuedTransportMsgsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsTotal.setStatus('current')
ssbsEnqueuedTransportMsgsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsEnqueuedTransportMsgsPerSec.setStatus('current')
ssbsForwardedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMessagesTotal.setStatus('current')
ssbsForwardedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMessagesPerSec.setStatus('current')
ssbsForwardedMsgByteTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgByteTotal.setStatus('current')
ssbsForwardedMsgBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgBytesPerSec.setStatus('current')
ssbsForwardedMsgDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgDiscardedTotal.setStatus('current')
ssbsForwardedMsgsDiscardedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedMsgsDiscardedPerSec.setStatus('current')
ssbsForwardedPendingMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedPendingMsgBytes.setStatus('current')
ssbsForwardedPendingMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsForwardedPendingMsgCount.setStatus('current')
ssbsSQLRECEIVETotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLRECEIVETotal.setStatus('current')
ssbsSQLRECEIVEsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLRECEIVEsPerSec.setStatus('current')
ssbsSQLSENDTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLSENDTotal.setStatus('current')
ssbsSQLSENDsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsSQLSENDsPerSec.setStatus('current')
ssbsTransportTimerEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 20, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbsTransportTimerEventCount.setStatus('current')
sqlServerBrokerTransportTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21), )
if mibBuilder.loadTexts: sqlServerBrokerTransportTable.setStatus('current')
sqlServerBrokerTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBrokerTransportEntry.setStatus('current')
ssbtCurrentBytesForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentBytesForRecvIO.setStatus('current')
ssbtCurrentBytesForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentBytesForSendIO.setStatus('current')
ssbtCurrentMsgFragsForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtCurrentMsgFragsForSendIO.setStatus('current')
ssbtMessageFragmentReceiveTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentReceiveTotal.setStatus('current')
ssbtMessageFragmentReceivesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentReceivesPerSec.setStatus('current')
ssbtMessageFragmentSendTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentSendTotal.setStatus('current')
ssbtMessageFragmentSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMessageFragmentSendsPerSec.setStatus('current')
ssbtMsgFragmentRecvSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMsgFragmentRecvSizeAvg.setStatus('current')
ssbtMsgFragmentSendSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtMsgFragmentSendSizeAvg.setStatus('current')
ssbtOpenConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtOpenConnectionCount.setStatus('current')
ssbtPendingBytesForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingBytesForRecvIO.setStatus('current')
ssbtPendingBytesForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingBytesForSendIO.setStatus('current')
ssbtPendingMsgFragsForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingMsgFragsForRecvIO.setStatus('current')
ssbtPendingMsgFragsForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtPendingMsgFragsForSendIO.setStatus('current')
ssbtReceiveIOBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOBytesTotal.setStatus('current')
ssbtReceiveIOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOLenAvg.setStatus('current')
ssbtReceiveIOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOBytesPerSec.setStatus('current')
ssbtReceiveIOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtReceiveIOsPerSec.setStatus('current')
ssbtSendIOBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOBytesTotal.setStatus('current')
ssbtSendIOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOLenAvg.setStatus('current')
ssbtSendIOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOBytesPerSec.setStatus('current')
ssbtSendIOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 21, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbtSendIOsPerSec.setStatus('current')
sqlServerBufferManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22), )
if mibBuilder.loadTexts: sqlServerBufferManagerTable.setStatus('current')
sqlServerBufferManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerBufferManagerEntry.setStatus('current')
ssbmAWELookupMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWELookupMapsPerSec.setStatus('current')
ssbmAWEStolenMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEStolenMapsPerSec.setStatus('current')
ssbmAWEUnmapCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEUnmapCallsPerSec.setStatus('current')
ssbmAWEUnmapPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEUnmapPagesPerSec.setStatus('current')
ssbmAWEWriteMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmAWEWriteMapsPerSec.setStatus('current')
ssbmBufferCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmBufferCacheHitRatio.setStatus('current')
ssbmCheckpointPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmCheckpointPagesPerSec.setStatus('current')
ssbmDatabasePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmDatabasePages.setStatus('current')
ssbmFreeListStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmFreeListStallsPerSec.setStatus('current')
ssbmFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmFreePages.setStatus('current')
ssbmLazyWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmLazyWritesPerSec.setStatus('current')
ssbmPageLifeExpectancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageLifeExpectancy.setStatus('current')
ssbmPageLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageLookupsPerSec.setStatus('current')
ssbmPageReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageReadsPerSec.setStatus('current')
ssbmPageWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmPageWritesPerSec.setStatus('current')
ssbmProcedureCachePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmProcedureCachePages.setStatus('current')
ssbmReadaheadPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmReadaheadPagesPerSec.setStatus('current')
ssbmReservedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmReservedPages.setStatus('current')
ssbmStolenPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmStolenPages.setStatus('current')
ssbmTargetPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmTargetPages.setStatus('current')
ssbmTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 22, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbmTotalPages.setStatus('current')
sqlServerBufferPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23), )
if mibBuilder.loadTexts: sqlServerBufferPartitionTable.setStatus('current')
sqlServerBufferPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssbpInstance"))
if mibBuilder.loadTexts: sqlServerBufferPartitionEntry.setStatus('current')
ssbpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpInstance.setStatus('current')
ssbpFreeListEmptyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreeListEmptyPerSec.setStatus('current')
ssbpFreeListRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreeListRequestsPerSec.setStatus('current')
ssbpFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssbpFreePages.setStatus('current')
sqlServerCacheManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24), )
if mibBuilder.loadTexts: sqlServerCacheManagerTable.setStatus('current')
sqlServerCacheManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sscmInstance"))
if mibBuilder.loadTexts: sqlServerCacheManagerEntry.setStatus('current')
sscmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmInstance.setStatus('current')
sscmCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheHitRatio.setStatus('current')
sscmCacheObjectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheObjectCounts.setStatus('current')
sscmCachePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCachePages.setStatus('current')
sscmCacheUseCountsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 24, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmCacheUseCountsPerSec.setStatus('current')
sqlServerCursorManagerTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25), )
if mibBuilder.loadTexts: sqlServerCursorManagerTotalTable.setStatus('current')
sqlServerCursorManagerTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerCursorManagerTotalEntry.setStatus('current')
sscmtAsyncPopulationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtAsyncPopulationCount.setStatus('current')
sscmtCursorConversionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtCursorConversionRate.setStatus('current')
sscmtCursorFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmtCursorFlushes.setStatus('current')
sqlServerCursorManagerByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26), )
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeTable.setStatus('current')
sqlServerCursorManagerByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sscmbtInstance"))
if mibBuilder.loadTexts: sqlServerCursorManagerByTypeEntry.setStatus('current')
sscmbtInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtInstance.setStatus('current')
sscmbtActiveCursors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtActiveCursors.setStatus('current')
sscmbtCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCacheHitRatio.setStatus('current')
sscmbtCachedCursorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCachedCursorCounts.setStatus('current')
sscmbtCursorCacheUseCountsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorCacheUseCountsPerSec.setStatus('current')
sscmbtCursorRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorRequestsPerSec.setStatus('current')
sscmbtCursorMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorMemoryUsage.setStatus('current')
sscmbtCursorWorktableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtCursorWorktableUsage.setStatus('current')
sscmbtNumberOfActiveCursorPlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 26, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sscmbtNumberOfActiveCursorPlans.setStatus('current')
sqlServerDatabasesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27), )
if mibBuilder.loadTexts: sqlServerDatabasesTable.setStatus('current')
sqlServerDatabasesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssdInstance"))
if mibBuilder.loadTexts: sqlServerDatabasesEntry.setStatus('current')
ssdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdInstance.setStatus('current')
ssdActiveTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdActiveTransactions.setStatus('current')
ssdBackupPerRestoreThroughputPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBackupPerRestoreThroughputPerSec.setStatus('current')
ssdBulkCopyRowsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBulkCopyRowsPerSec.setStatus('current')
ssdBulkCopyThroughputPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdBulkCopyThroughputPerSec.setStatus('current')
ssdDBCCLogicalScanBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdDBCCLogicalScanBytesPerSec.setStatus('current')
ssdDataFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdDataFileSSizeKB.setStatus('current')
ssdLogBytesFlushedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogBytesFlushedPerSec.setStatus('current')
ssdLogCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogCacheHitRatio.setStatus('current')
ssdLogCacheReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogCacheReadsPerSec.setStatus('current')
ssdLogFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFileSSizeKB.setStatus('current')
ssdLogFileSUsedSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFileSUsedSizeKB.setStatus('current')
ssdLogFlushWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushWaitTime.setStatus('current')
ssdLogFlushWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushWaitsPerSec.setStatus('current')
ssdLogFlushesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogFlushesPerSec.setStatus('current')
ssdLogGrowths = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogGrowths.setStatus('current')
ssdLogShrinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogShrinks.setStatus('current')
ssdLogTruncations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdLogTruncations.setStatus('current')
ssdMirroringAcksReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringAcksReceivedPerSec.setStatus('current')
ssdMirroringBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringBytesSentPerSec.setStatus('current')
ssdMirroringPagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringPagesSentPerSec.setStatus('current')
ssdMirroringSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringSendsPerSec.setStatus('current')
ssdMirroringTotalAcksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalAcksReceived.setStatus('current')
ssdMirroringTotalBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalBytesSent.setStatus('current')
ssdMirroringTotalPagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalPagesSent.setStatus('current')
ssdMirroringTotalSends = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTotalSends.setStatus('current')
ssdMirroringTransactionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdMirroringTransactionDelay.setStatus('current')
ssdPercentLogUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdPercentLogUsed.setStatus('current')
ssdReplPendingXacts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdReplPendingXacts.setStatus('current')
ssdReplTransRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdReplTransRate.setStatus('current')
ssdShrinkDataMovementBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdShrinkDataMovementBytesPerSec.setStatus('current')
ssdTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 27, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssdTransactionsPerSec.setStatus('current')
sqlServerExecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28), )
if mibBuilder.loadTexts: sqlServerExecStatisticsTable.setStatus('current')
sqlServerExecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssesInstance"))
if mibBuilder.loadTexts: sqlServerExecStatisticsEntry.setStatus('current')
ssesInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesInstance.setStatus('current')
ssesDTCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesDTCCalls.setStatus('current')
ssesDistributedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesDistributedQuery.setStatus('current')
ssesExtendedProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesExtendedProcedures.setStatus('current')
ssesOLEDBCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssesOLEDBCalls.setStatus('current')
sqlServerGeneralStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29), )
if mibBuilder.loadTexts: sqlServerGeneralStatisticsTable.setStatus('current')
sqlServerGeneralStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerGeneralStatisticsEntry.setStatus('current')
ssgsHTTPAnonymousRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsHTTPAnonymousRequests.setStatus('current')
ssgsHTTPAuthenticatedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsHTTPAuthenticatedRequests.setStatus('current')
ssgsLogicalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLogicalConnections.setStatus('current')
ssgsLoginsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLoginsPerSec.setStatus('current')
ssgsLogoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsLogoutsPerSec.setStatus('current')
ssgsMarsDeadlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsMarsDeadlocks.setStatus('current')
ssgsNonAtomicYieldRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsNonAtomicYieldRate.setStatus('current')
ssgsProcessesBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsProcessesBlocked.setStatus('current')
ssgsSOAPEmptyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPEmptyRequests.setStatus('current')
ssgsSOAPMethodInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPMethodInvocations.setStatus('current')
ssgsSOAPSQLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSQLRequests.setStatus('current')
ssgsSOAPSessionInitiateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSessionInitiateRequests.setStatus('current')
ssgsSOAPSessionTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPSessionTerminateRequests.setStatus('current')
ssgsSOAPWSDLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsSOAPWSDLRequests.setStatus('current')
ssgsTempTablesCreationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsTempTablesCreationRate.setStatus('current')
ssgsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsTransactions.setStatus('current')
ssgsUserConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 29, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssgsUserConnections.setStatus('current')
sqlServerLatchesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30), )
if mibBuilder.loadTexts: sqlServerLatchesTable.setStatus('current')
sqlServerLatchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerLatchesEntry.setStatus('current')
ssltAverageLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltAverageLatchWaitTimeMs.setStatus('current')
ssltLatchWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltLatchWaitsPerSec.setStatus('current')
ssltTotalLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssltTotalLatchWaitTimeMs.setStatus('current')
sqlServerLocksTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31), )
if mibBuilder.loadTexts: sqlServerLocksTable.setStatus('current')
sqlServerLocksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sslkInstance"))
if mibBuilder.loadTexts: sqlServerLocksEntry.setStatus('current')
sslkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkInstance.setStatus('current')
sslkAverageWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkAverageWaitTimeMs.setStatus('current')
sslkLockRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockRequestsPerSec.setStatus('current')
sslkLockTimeoutsTimeoutGT0PerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockTimeoutsTimeoutGT0PerSec.setStatus('current')
sslkLockTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockTimeoutsPerSec.setStatus('current')
sslkLockWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockWaitTimeMs.setStatus('current')
sslkLockWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkLockWaitsPerSec.setStatus('current')
sslkNumberOfDeadlocksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 31, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslkNumberOfDeadlocksPerSec.setStatus('current')
sqlServerMemoryManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32), )
if mibBuilder.loadTexts: sqlServerMemoryManagerTable.setStatus('current')
sqlServerMemoryManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerMemoryManagerEntry.setStatus('current')
ssmmConnectionMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmConnectionMemoryKB.setStatus('current')
ssmmGrantedWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmGrantedWorkspaceMemoryKB.setStatus('current')
ssmmLockBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockBlocks.setStatus('current')
ssmmLockBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockBlocksAllocated.setStatus('current')
ssmmLockMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockMemoryKB.setStatus('current')
ssmmLockOwnerBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockOwnerBlocks.setStatus('current')
ssmmLockOwnerBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmLockOwnerBlocksAllocated.setStatus('current')
ssmmMaximumWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMaximumWorkspaceMemoryKB.setStatus('current')
ssmmMemoryGrantsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMemoryGrantsOutstanding.setStatus('current')
ssmmMemoryGrantsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmMemoryGrantsPending.setStatus('current')
ssmmOptimizerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmOptimizerMemoryKB.setStatus('current')
ssmmSQLCacheMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmSQLCacheMemoryKB.setStatus('current')
ssmmTargetServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmTargetServerMemoryKB.setStatus('current')
ssmmTotalServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmmTotalServerMemoryKB.setStatus('current')
sqlServerReplicateLogreaderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33), )
if mibBuilder.loadTexts: sqlServerReplicateLogreaderTable.setStatus('current')
sqlServerReplicateLogreaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrlInstance"))
if mibBuilder.loadTexts: sqlServerReplicateLogreaderEntry.setStatus('current')
ssrlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlInstance.setStatus('current')
ssrlLogreaderDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDeliveredCmdsPerSec.setStatus('current')
ssrlLogreaderDelivereTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDelivereTransPerSec.setStatus('current')
ssrlLogreaderDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 33, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrlLogreaderDeliveryLatency.setStatus('current')
sqlServerReplicateSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34), )
if mibBuilder.loadTexts: sqlServerReplicateSnapshotTable.setStatus('current')
sqlServerReplicateSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrsInstance"))
if mibBuilder.loadTexts: sqlServerReplicateSnapshotEntry.setStatus('current')
ssrsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsInstance.setStatus('current')
ssrsSnapshotDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsSnapshotDeliveredCmdsPerSec.setStatus('current')
ssrsSnapshotDeliveredTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 34, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrsSnapshotDeliveredTransPerSec.setStatus('current')
sqlServerReplicationAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35), )
if mibBuilder.loadTexts: sqlServerReplicationAgentsTable.setStatus('current')
sqlServerReplicationAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssraInstance"))
if mibBuilder.loadTexts: sqlServerReplicationAgentsEntry.setStatus('current')
ssraInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssraInstance.setStatus('current')
ssraRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 35, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssraRunning.setStatus('current')
sqlServerReplicationDistTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36), )
if mibBuilder.loadTexts: sqlServerReplicationDistTable.setStatus('current')
sqlServerReplicationDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrdInstance"))
if mibBuilder.loadTexts: sqlServerReplicationDistEntry.setStatus('current')
ssrdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdInstance.setStatus('current')
ssrdDistDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveredCmdsPerSec.setStatus('current')
ssrdDistDeliveredTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveredTransPerSec.setStatus('current')
ssrdDistDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrdDistDeliveryLatency.setStatus('current')
sqlServerReplicationMergeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37), )
if mibBuilder.loadTexts: sqlServerReplicationMergeTable.setStatus('current')
sqlServerReplicationMergeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssrmInstance"))
if mibBuilder.loadTexts: sqlServerReplicationMergeEntry.setStatus('current')
ssrmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmInstance.setStatus('current')
ssrmConflictsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmConflictsPerSec.setStatus('current')
ssrmDownloadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmDownloadedChangesPerSec.setStatus('current')
ssrmUploadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 37, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssrmUploadedChangesPerSec.setStatus('current')
sqlServerSQLErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38), )
if mibBuilder.loadTexts: sqlServerSQLErrorsTable.setStatus('current')
sqlServerSQLErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sseInstance"))
if mibBuilder.loadTexts: sqlServerSQLErrorsEntry.setStatus('current')
sseInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseInstance.setStatus('current')
sseErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 38, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sseErrorsPerSec.setStatus('current')
sqlServerSQLStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39), )
if mibBuilder.loadTexts: sqlServerSQLStatisticsTable.setStatus('current')
sqlServerSQLStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerSQLStatisticsEntry.setStatus('current')
ssssAutoParamAttemptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssAutoParamAttemptsPerSec.setStatus('current')
ssssBatchRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssBatchRequestsPerSec.setStatus('current')
ssssFailedAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssFailedAutoParamsPerSec.setStatus('current')
ssssSQLAttentionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLAttentionRate.setStatus('current')
ssssSQLCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLCompilationsPerSec.setStatus('current')
ssssSQLReCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSQLReCompilationsPerSec.setStatus('current')
ssssSafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssSafeAutoParamsPerSec.setStatus('current')
ssssUnsafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 39, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssssUnsafeAutoParamsPerSec.setStatus('current')
sqlServerTransactionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40), )
if mibBuilder.loadTexts: sqlServerTransactionsTable.setStatus('current')
sqlServerTransactionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"))
if mibBuilder.loadTexts: sqlServerTransactionsEntry.setStatus('current')
sstFreeSpaceInTempdbKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstFreeSpaceInTempdbKB.setStatus('current')
sstLongestTransactionRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstLongestTransactionRunningTime.setStatus('current')
sstNonSnapshotVersionTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstNonSnapshotVersionTransactions.setStatus('current')
sstSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstSnapshotTransactions.setStatus('current')
sstTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstTransactions.setStatus('current')
sstUpdateSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstUpdateSnapshotTransactions.setStatus('current')
sstUpdateConflictRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstUpdateConflictRatio.setStatus('current')
sstVersionCleanupRateKBPerS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionCleanupRateKBPerS.setStatus('current')
sstVersionGenerationRateKBPerS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionGenerationRateKBPerS.setStatus('current')
sstVersionStoreSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreSizeKB.setStatus('current')
sstVersionStoreUnitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitCount.setStatus('current')
sstVersionStoreUnitCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitCreation.setStatus('current')
sstVersionStoreUnitTruncation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 40, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sstVersionStoreUnitTruncation.setStatus('current')
sqlServerUserSettableTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41), )
if mibBuilder.loadTexts: sqlServerUserSettableTable.setStatus('current')
sqlServerUserSettableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "ssusInstance"))
if mibBuilder.loadTexts: sqlServerUserSettableEntry.setStatus('current')
ssusInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssusInstance.setStatus('current')
ssusQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 41, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssusQuery.setStatus('current')
sqlServerWaitStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42), )
if mibBuilder.loadTexts: sqlServerWaitStatisticsTable.setStatus('current')
sqlServerWaitStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER", "sqlServerNameIndex"), (0, "INFORMANT-SQLSERVER", "sswsInstance"))
if mibBuilder.loadTexts: sqlServerWaitStatisticsEntry.setStatus('current')
sswsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsInstance.setStatus('current')
sswsLockWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLockWaits.setStatus('current')
sswsLogBufferWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLogBufferWaits.setStatus('current')
sswsLogWriteWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsLogWriteWaits.setStatus('current')
sswsMemoryGrantQueueWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsMemoryGrantQueueWaits.setStatus('current')
sswsNetworkIOWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsNetworkIOWaits.setStatus('current')
sswsNonPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsNonPageLatchWaits.setStatus('current')
sswsPageIOLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsPageIOLatchWaits.setStatus('current')
sswsPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsPageLatchWaits.setStatus('current')
sswsThreadSafeMemoryObjectsWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsThreadSafeMemoryObjectsWaits.setStatus('current')
sswsTransactionOwnershipWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsTransactionOwnershipWaits.setStatus('current')
sswsWaitForTheWorker = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsWaitForTheWorker.setStatus('current')
sswsWorkspaceSyncronizationWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 3, 42, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sswsWorkspaceSyncronizationWaits.setStatus('current')
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", ssdMirroringSendsPerSec=ssdMirroringSendsPerSec, aspaRowsMergedPerSec=aspaRowsMergedPerSec, ascAuthenticationsPerSec=ascAuthenticationsPerSec, mgpAccessedHTTP=mgpAccessedHTTP, ssmmMemoryGrantsOutstanding=ssmmMemoryGrantsOutstanding, ssdInstance=ssdInstance, ssbpFreeListEmptyPerSec=ssbpFreeListEmptyPerSec, ssbsForwardedPendingMsgBytes=ssbsForwardedPendingMsgBytes, ssdMirroringTotalAcksReceived=ssdMirroringTotalAcksReceived, ssmmMemoryGrantsPending=ssmmMemoryGrantsPending, msicActiveDocuments=msicActiveDocuments, sqlServerBufferPartitionTable=sqlServerBufferPartitionTable, asqCurrentProcessThreadQueueLen=asqCurrentProcessThreadQueueLen, ssbsEnqueuedTransportMsgFragTot=ssbsEnqueuedTransportMsgFragTot, assTotalProperties=assTotalProperties, sslkNumberOfDeadlocksPerSec=sslkNumberOfDeadlocksPerSec, ssssSQLAttentionRate=ssssSQLAttentionRate, mgFilteringThreads=mgFilteringThreads, microsoftGatherer=microsoftGatherer, mgExtNotificationsRate=mgExtNotificationsRate, PYSNMP_MODULE_ID=sqlServer, asqdTotalVLDMRequests=asqdTotalVLDMRequests, mgpRetries=mgpRetries, ssbsForwardedPendingMsgCount=ssbsForwardedPendingMsgCount, sqlServerLocksTable=sqlServerLocksTable, aslLockGrantsPerSec=aslLockGrantsPerSec, aslqDataAvgBytesPerRow=aslqDataAvgBytesPerRow, ssmmLockBlocks=ssmmLockBlocks, sqlServerExecStatisticsEntry=sqlServerExecStatisticsEntry, ssdReplPendingXacts=ssdReplPendingXacts, aslUnlockRequestsPerSec=aslUnlockRequestsPerSec, ssbmStolenPages=ssbmStolenPages, mgpErrorRate=mgpErrorRate, sslkAverageWaitTimeMs=sslkAverageWaitTimeMs, ssdLogCacheReadsPerSec=ssdLogCacheReadsPerSec, ascCurrentAgents=ascCurrentAgents, ssbpInstance=ssbpInstance, ssdLogFileSUsedSizeKB=ssdLogFileSUsedSizeKB, ascFailuresPerSec=ascFailuresPerSec, ssdLogCacheHitRatio=ssdLogCacheHitRatio, ascTotalSuccesses=ascTotalSuccesses, aslCurrentLockWaits=aslCurrentLockWaits, ssamIndexSearchesPerSec=ssamIndexSearchesPerSec, sswsLogBufferWaits=sswsLogBufferWaits, asqRowsSentPerSec=asqRowsSentPerSec, sqlServerReplicationMergeTable=sqlServerReplicationMergeTable, sqlServerBrokerStatisticsEntry=sqlServerBrokerStatisticsEntry, ascTotalRequests=ascTotalRequests, ssbtCurrentBytesForSendIO=ssbtCurrentBytesForSendIO, sswsWaitForTheWorker=sswsWaitForTheWorker, ssgsLogicalConnections=ssgsLogicalConnections, sscmbtInstance=sscmbtInstance, ssgsSOAPSessionInitiateRequests=ssgsSOAPSessionInitiateRequests, ssbmReadaheadPagesPerSec=ssbmReadaheadPagesPerSec, sscmtCursorFlushes=sscmtCursorFlushes, aspaMemorySizeRows=aspaMemorySizeRows, mscQueries=mscQueries, sscmbtActiveCursors=sscmbtActiveCursors, ssmmLockBlocksAllocated=ssmmLockBlocksAllocated, asacCurrentBytes=asacCurrentBytes, aslqMapReads=aslqMapReads, sqlServerBufferPartitionEntry=sqlServerBufferPartitionEntry, ssdLogFlushWaitTime=ssdLogFlushWaitTime, sstNonSnapshotVersionTransactions=sstNonSnapshotVersionTransactions, mscResultsRate=mscResultsRate, sqlServerAccessMethodsTable=sqlServerAccessMethodsTable, mgpAdaptiveCrawlFalsePositives=mgpAdaptiveCrawlFalsePositives, sstVersionStoreUnitCount=sstVersionStoreUnitCount, ssamFullScansPerSec=ssamFullScansPerSec, aspCurrentThreadsWriting=aspCurrentThreadsWriting, ssrlLogreaderDeliveredCmdsPerSec=ssrlLogreaderDeliveredCmdsPerSec, ssrlLogreaderDelivereTransPerSec=ssrlLogreaderDelivereTransPerSec, ssbtReceiveIOBytesTotal=ssbtReceiveIOBytesTotal, ssdMirroringTotalPagesSent=ssdMirroringTotalPagesSent, ssssSQLCompilationsPerSec=ssssSQLCompilationsPerSec, aspaTempFileRowsWrittenPerSec=aspaTempFileRowsWrittenPerSec, ascCompletionsPerSec=ascCompletionsPerSec, ssbtOpenConnectionCount=ssbtOpenConnectionCount, aslCurrentLatchWaits=aslCurrentLatchWaits, ssbsEnqueuedMessagesPerSec=ssbsEnqueuedMessagesPerSec, mgpInstance=mgpInstance, ssbsSQLSENDTotal=ssbsSQLSENDTotal, asacDirectHitsPerSec=asacDirectHitsPerSec, ssbaStoredProceduresInvokedPerSec=ssbaStoredProceduresInvokedPerSec, ssbpFreeListRequestsPerSec=ssbpFreeListRequestsPerSec, ssbtMessageFragmentSendsPerSec=ssbtMessageFragmentSendsPerSec, sswsNetworkIOWaits=sswsNetworkIOWaits, sqlServerCacheManagerEntry=sqlServerCacheManagerEntry, sscmtCursorConversionRate=sscmtCursorConversionRate, sstUpdateSnapshotTransactions=sstUpdateSnapshotTransactions, msCurrentConnections=msCurrentConnections, sqlServerUserSettableEntry=sqlServerUserSettableEntry, ssgsSOAPEmptyRequests=ssgsSOAPEmptyRequests, ssmmLockOwnerBlocks=ssmmLockOwnerBlocks, sqlServerReplicateSnapshotTable=sqlServerReplicateSnapshotTable, ssamWorkfilesCreatedPerSec=ssamWorkfilesCreatedPerSec, mgpAdaptiveCrawlExcludes=mgpAdaptiveCrawlExcludes, sswsMemoryGrantQueueWaits=sswsMemoryGrantQueueWaits, ssbtMessageFragmentSendTotal=ssbtMessageFragmentSendTotal, asacTotalMisses=asacTotalMisses, sqlServerAccessMethodsEntry=sqlServerAccessMethodsEntry, ssbtPendingMsgFragsForSendIO=ssbtPendingMsgFragsForSendIO, ssesOLEDBCalls=ssesOLEDBCalls, sqlServerWaitStatisticsTable=sqlServerWaitStatisticsTable, mgStemmersCached=mgStemmersCached, microsoftGathererProjectsTable=microsoftGathererProjectsTable, sqlServerReplicationMergeEntry=sqlServerReplicationMergeEntry, ssdBulkCopyRowsPerSec=ssdBulkCopyRowsPerSec, msicIndexSizeMBytes=msicIndexSizeMBytes, ssamDroppedRowsetCleanupsPerSec=ssamDroppedRowsetCleanupsPerSec, ssbtReceiveIOsPerSec=ssbtReceiveIOsPerSec, ssamFreeSpacePageFetchesPerSec=ssamFreeSpacePageFetchesPerSec, aspFileBytesWrittenPerSec=aspFileBytesWrittenPerSec, sslkLockTimeoutsTimeoutGT0PerSec=sslkLockTimeoutsTimeoutGT0PerSec, aspMemorySizeBytes=aspMemorySizeBytes, ssrdDistDeliveryLatency=ssrdDistDeliveryLatency, ssbsForwardedMsgsDiscardedPerSec=ssbsForwardedMsgsDiscardedPerSec, ssamUsedLeafPageCookie=ssamUsedLeafPageCookie, mgpAdaptiveCrawlErrors=mgpAdaptiveCrawlErrors, sswsPageIOLatchWaits=sswsPageIOLatchWaits, ssbmCheckpointPagesPerSec=ssbmCheckpointPagesPerSec, sswsWorkspaceSyncronizationWaits=sswsWorkspaceSyncronizationWaits, mgpAccessedHTTPRate=mgpAccessedHTTPRate, microsoftSearchIndexCatalogTable=microsoftSearchIndexCatalogTable, aslqRowsFilterExcluded=aslqRowsFilterExcluded, asqdTotalRequests=asqdTotalRequests, ssltLatchWaitsPerSec=ssltLatchWaitsPerSec, sqlServerMemoryManagerTable=sqlServerMemoryManagerTable, mgpDelayedDocuments=mgpDelayedDocuments, ssmmConnectionMemoryKB=ssmmConnectionMemoryKB, ssltTotalLatchWaitTimeMs=ssltTotalLatchWaitTimeMs, ssmmLockOwnerBlocksAllocated=ssmmLockOwnerBlocksAllocated, ssbaTaskLimitReachedPerSec=ssbaTaskLimitReachedPerSec, ssbsEnqueuedLocalMessagesTotal=ssbsEnqueuedLocalMessagesTotal, ascTotalAuthentications=ascTotalAuthentications, sqlServerReplicateSnapshotEntry=sqlServerReplicateSnapshotEntry, asacCurrentEntries=asacCurrentEntries, aspaRowsCreatedPerSec=aspaRowsCreatedPerSec, ssamFailedTreePageCookie=ssamFailedTreePageCookie, sslkLockWaitTimeMs=sslkLockWaitTimeMs, aspRowsCreatedPerSec=aspRowsCreatedPerSec, asqTotalBytesSent=asqTotalBytesSent, ssrdDistDeliveredCmdsPerSec=ssrdDistDeliveredCmdsPerSec, sscmCacheObjectCounts=sscmCacheObjectCounts, ssamAUCleanupBatchesPerSec=ssamAUCleanupBatchesPerSec, ssbsDialogTimerEventCount=ssbsDialogTimerEventCount, asacBytesAddedPerSec=asacBytesAddedPerSec, asacTotalFilterHits=asacTotalFilterHits, ssraInstance=ssraInstance, aslCurrentLocks=aslCurrentLocks, ssamRangeScansPerSec=ssamRangeScansPerSec, ssdLogFileSSizeKB=ssdLogFileSSizeKB, sqlServerSQLErrorsEntry=sqlServerSQLErrorsEntry, aspCurrentThreadsReading=aspCurrentThreadsReading, ssssSQLReCompilationsPerSec=ssssSQLReCompilationsPerSec, ssamDeferredDroppedRowsets=ssamDeferredDroppedRowsets, sqlServerReplicateLogreaderTable=sqlServerReplicateLogreaderTable, microsoftSearchCatalogsTable=microsoftSearchCatalogsTable, msQueryRate=msQueryRate, asqTotalRowsSent=asqTotalRowsSent, asacFilterHitsPerSec=asacFilterHitsPerSec, asqTotalQueriesFromCacheFiltered=asqTotalQueriesFromCacheFiltered, ssgsHTTPAuthenticatedRequests=ssgsHTTPAuthenticatedRequests, ascCurrentAuthentications=ascCurrentAuthentications, asqRowsReadPerSec=asqRowsReadPerSec, aslLockDenialsPerSec=aslLockDenialsPerSec, assTotalBytes=assTotalBytes, ssbtPendingBytesForRecvIO=ssbtPendingBytesForRecvIO, ssrmInstance=ssrmInstance, analysisServerStartup=analysisServerStartup, analysisServerProcAggs=analysisServerProcAggs, sstUpdateConflictRatio=sstUpdateConflictRatio, aspaCurrentPartitions=aspaCurrentPartitions, asqFilteredRowsPerSec=asqFilteredRowsPerSec, asqTotalNetworkRoundTrips=asqTotalNetworkRoundTrips, msicNumberOfDocuments=msicNumberOfDocuments, ssssFailedAutoParamsPerSec=ssssFailedAutoParamsPerSec, analysisServerLocks=analysisServerLocks, asacInsertsPerSec=asacInsertsPerSec, sstVersionStoreSizeKB=sstVersionStoreSizeKB, sswsLogWriteWaits=sswsLogWriteWaits, mgpChangedDocuments=mgpChangedDocuments, sqlServerNameTable=sqlServerNameTable, ssbmAWELookupMapsPerSec=ssbmAWELookupMapsPerSec, aslqMapBytes=aslqMapBytes, mgpWaitingDocuments=mgpWaitingDocuments, microsoftSearchCatalogsEntry=microsoftSearchCatalogsEntry, ssamDeferredDroppedAUs=ssamDeferredDroppedAUs, mgpHistoryRecoveryProgress=mgpHistoryRecoveryProgress, mgpDocumentMovesPerRenames=mgpDocumentMovesPerRenames, aspCurrentThreadsMerging=aspCurrentThreadsMerging, ssbsForwardedMsgBytesPerSec=ssbsForwardedMsgBytesPerSec, aslqDataBytes=aslqDataBytes, ssbmAWEWriteMapsPerSec=ssbmAWEWriteMapsPerSec, ssbmLazyWritesPerSec=ssbmLazyWritesPerSec, aspaTempFileBytesWrittenPerSec=aspaTempFileBytesWrittenPerSec, aspMemorySizeRows=aspMemorySizeRows, asqdVLDMRequestsPerSec=asqdVLDMRequestsPerSec, msicMergeProgress=msicMergeProgress, ssmmTargetServerMemoryKB=ssmmTargetServerMemoryKB, mgpStatusSuccess=mgpStatusSuccess, ssltAverageLatchWaitTimeMs=ssltAverageLatchWaitTimeMs, sqlServerBufferManagerEntry=sqlServerBufferManagerEntry, mgDocumentsFilteredRate=mgDocumentsFilteredRate, ssdLogFlushesPerSec=ssdLogFlushesPerSec, mscSuccessfulQueriesRate=mscSuccessfulQueriesRate, ssrdInstance=ssrdInstance, sqlServerWaitStatisticsEntry=sqlServerWaitStatisticsEntry, aslLockWaitsPerSec=aslLockWaitsPerSec, analysisServerAggCache=analysisServerAggCache, ssbtMsgFragmentRecvSizeAvg=ssbtMsgFragmentRecvSizeAvg, asqPyramidOperationsPerSec=asqPyramidOperationsPerSec, asqdTotalMembers=asqdTotalMembers, ssamForwardedRecordsPerSec=ssamForwardedRecordsPerSec, msQueries=msQueries, aslqTotalBytes=aslqTotalBytes, ssgsNonAtomicYieldRate=ssgsNonAtomicYieldRate, aslqIndexReads=aslqIndexReads, asqTotalPyramidOperations=asqTotalPyramidOperations, mgDelayedDocuments=mgDelayedDocuments, sslkLockWaitsPerSec=sslkLockWaitsPerSec, asqDataReadsPerSec=asqDataReadsPerSec, ssssAutoParamAttemptsPerSec=ssssAutoParamAttemptsPerSec, ssamExtentDeallocationsPerSec=ssamExtentDeallocationsPerSec, mgpProcessedDocuments=mgpProcessedDocuments, ssdLogBytesFlushedPerSec=ssdLogBytesFlushedPerSec, msSucceededQueries=msSucceededQueries, sswsNonPageLatchWaits=sswsNonPageLatchWaits, ssesDistributedQuery=ssesDistributedQuery, ssdBulkCopyThroughputPerSec=ssdBulkCopyThroughputPerSec, aslLatchWaitsPerSec=aslLatchWaitsPerSec, sqlServerGeneralStatisticsTable=sqlServerGeneralStatisticsTable, ssrsSnapshotDeliveredTransPerSec=ssrsSnapshotDeliveredTransPerSec, mgHeartbeatsRate=mgHeartbeatsRate, asqTotalQueriesRequested=asqTotalQueriesRequested, sscmbtCursorCacheUseCountsPerSec=sscmbtCursorCacheUseCountsPerSec, mgpDocumentAddRate=mgpDocumentAddRate, ssbaTasksStartedPerSec=ssbaTasksStartedPerSec, msFailedQueryRate=msFailedQueryRate, ssbtMsgFragmentSendSizeAvg=ssbtMsgFragmentSendSizeAvg, ssgsLoginsPerSec=ssgsLoginsPerSec, ssgsSOAPSessionTerminateRequests=ssgsSOAPSessionTerminateRequests, mgFilterObjects=mgFilterObjects, assServerUptime=assServerUptime, ssamPageDeallocationsPerSec=ssamPageDeallocationsPerSec, ssamAUCleanupsPerSec=ssamAUCleanupsPerSec, aslqDataAvgRowsPerRead=aslqDataAvgRowsPerRead, mgpFilteredHTML=mgpFilteredHTML, sqlServerTransactionsEntry=sqlServerTransactionsEntry, ssbsBrokerTransactionRollbacks=ssbsBrokerTransactionRollbacks, ascTotalCompletions=ascTotalCompletions, ssgsUserConnections=ssgsUserConnections, sswsPageLatchWaits=sswsPageLatchWaits, mgNotificationsRate=mgNotificationsRate)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", ssdMirroringPagesSentPerSec=ssdMirroringPagesSentPerSec, analysisServerLastQuery=analysisServerLastQuery, sscmbtCursorRequestsPerSec=sscmbtCursorRequestsPerSec, mscNumberOfDocuments=mscNumberOfDocuments, sswsThreadSafeMemoryObjectsWaits=sswsThreadSafeMemoryObjectsWaits, mgpStatusError=mgpStatusError, sqlServerReplicationDistEntry=sqlServerReplicationDistEntry, mscFailedQueriesRate=mscFailedQueriesRate, aslqIndexBytes=aslqIndexBytes, ssdDBCCLogicalScanBytesPerSec=ssdDBCCLogicalScanBytesPerSec, ssdMirroringTotalBytesSent=ssdMirroringTotalBytesSent, msicBuildInProgress=msicBuildInProgress, ssssBatchRequestsPerSec=ssssBatchRequestsPerSec, ssamTableLockEscalationsPerSec=ssamTableLockEscalationsPerSec, sscmbtCacheHitRatio=sscmbtCacheHitRatio, mgpNotModified=mgpNotModified, asacTotalEvictions=asacTotalEvictions, mscPersistentIndexes=mscPersistentIndexes, asacTotalDirectHits=asacTotalDirectHits, mgpDocumentAdditions=mgpDocumentAdditions, asacFilterHitRatio=asacFilterHitRatio, ssamPageSplitsPerSec=ssamPageSplitsPerSec, ssamDroppedRowsetsSkippedPerSec=ssamDroppedRowsetsSkippedPerSec, asqdRequestsPerSec=asqdRequestsPerSec, aspCurrentThreads=aspCurrentThreads, mgpGathererPausedFlag=mgpGathererPausedFlag, assBytesPerSec=assBytesPerSec, msThreads=msThreads, mgpURLsInHistory=mgpURLsInHistory, ssusQuery=ssusQuery, ssesInstance=ssesInstance, ssgsHTTPAnonymousRequests=ssgsHTTPAnonymousRequests, mgpFileErrors=mgpFileErrors, ssbsSQLRECEIVETotal=ssbsSQLRECEIVETotal, ascCurrentConnectionsInProgress=ascCurrentConnectionsInProgress, ssamFailedLeafPageCookie=ssamFailedLeafPageCookie, aspiRowsPerSec=aspiRowsPerSec, ssbmBufferCacheHitRatio=ssbmBufferCacheHitRatio, sqlServerReplicationDistTable=sqlServerReplicationDistTable, ssbmTargetPages=ssbmTargetPages, analysisServerQuery=analysisServerQuery, asqMapReadsPerSec=asqMapReadsPerSec, ssbsSQLSENDsPerSec=ssbsSQLSENDsPerSec, sqlServerSQLErrorsTable=sqlServerSQLErrorsTable, sqlServerSQLStatisticsTable=sqlServerSQLStatisticsTable, asqCurrentProcessThreadPool=asqCurrentProcessThreadPool, asqTotalQueriesFromCacheDirect=asqTotalQueriesFromCacheDirect, aspiCurrentPartitions=aspiCurrentPartitions, sqlServerDatabasesTable=sqlServerDatabasesTable, sstVersionStoreUnitTruncation=sstVersionStoreUnitTruncation, ssbsEnqueuedLocalMessagesPerSec=ssbsEnqueuedLocalMessagesPerSec, mgNotificationSources=mgNotificationSources, sqlServerBrokerStatisticsTable=sqlServerBrokerStatisticsTable, sqlServerReplicationAgentsEntry=sqlServerReplicationAgentsEntry, mgpFilteredText=mgpFilteredText, ssbdInstance=ssbdInstance, ssbsEnqueuedTransportMsgsTotal=ssbsEnqueuedTransportMsgsTotal, asqQueriesRequestedPerSec=asqQueriesRequestedPerSec, mgTimeOuts=mgTimeOuts, assPropertiesPerSec=assPropertiesPerSec, mgpFileErrorsRate=mgpFileErrorsRate, mgpDocumentsInProgress=mgpDocumentsInProgress, msResultRate=msResultRate, asqCurrentWorkerThreadsActive=asqCurrentWorkerThreadsActive, ssbtSendIOBytesPerSec=ssbtSendIOBytesPerSec, ssbmPageWritesPerSec=ssbmPageWritesPerSec, mscResults=mscResults, sqlServerNameEntry=sqlServerNameEntry, asqCurrentWorkerThreadPool=asqCurrentWorkerThreadPool, mgReasonToBackOff=mgReasonToBackOff, ssbaInstance=ssbaInstance, sqlServerBufferManagerTable=sqlServerBufferManagerTable, ssesDTCCalls=ssesDTCCalls, mgDocumentsSuccessfullyFiltered=mgDocumentsSuccessfullyFiltered, ssdTransactionsPerSec=ssdTransactionsPerSec, sqlServerSQLStatisticsEntry=sqlServerSQLStatisticsEntry, ssdLogFlushWaitsPerSec=ssdLogFlushWaitsPerSec, ssbmAWEUnmapCallsPerSec=ssbmAWEUnmapCallsPerSec, sstVersionStoreUnitCreation=sstVersionStoreUnitCreation, sqlServerLatchesTable=sqlServerLatchesTable, asqTotalQueriesAnswered=asqTotalQueriesAnswered, ssmmSQLCacheMemoryKB=ssmmSQLCacheMemoryKB, asqFilterRowsExcludedPerSec=asqFilterRowsExcludedPerSec, mgAdminClients=mgAdminClients, ssbaTasksRunning=ssbaTasksRunning, ssamUsedTreePageCookie=ssamUsedTreePageCookie, aslqDataReads=aslqDataReads, ssbtCurrentMsgFragsForSendIO=ssbtCurrentMsgFragsForSendIO, sqlServerDatabasesEntry=sqlServerDatabasesEntry, mgpProcessedDocumentsRate=mgpProcessedDocumentsRate, ssbmTotalPages=ssbmTotalPages, aslqQueryNum=aslqQueryNum, sscmbtCursorWorktableUsage=sscmbtCursorWorktableUsage, sqlServerCursorManagerTotalTable=sqlServerCursorManagerTotalTable, ssdPercentLogUsed=ssdPercentLogUsed, sqlServerLatchesEntry=sqlServerLatchesEntry, ssbsForwardedMessagesTotal=ssbsForwardedMessagesTotal, mscCatalogSizeMBytes=mscCatalogSizeMBytes, mgpFilteredTextRate=mgpFilteredTextRate, asqdMembersPerSec=asqdMembersPerSec, mscInstance=mscInstance, ssgsTransactions=ssgsTransactions, sqlServerReplicateLogreaderEntry=sqlServerReplicateLogreaderEntry, mgpAdaptiveCrawlTotal=mgpAdaptiveCrawlTotal, ssgsSOAPMethodInvocations=ssgsSOAPMethodInvocations, mgpUniqueDocuments=mgpUniqueDocuments, mgThreadsBlockedDueToBackOff=mgThreadsBlockedDueToBackOff, aslqTotalReads=aslqTotalReads, mgpRetriesRate=mgpRetriesRate, sswsTransactionOwnershipWaits=sswsTransactionOwnershipWaits, sswsLockWaits=sswsLockWaits, mgFilterProcesses=mgFilterProcesses, assTotalMembers=assTotalMembers, asqMapBytesPerSec=asqMapBytesPerSec, aspTotalRows=aspTotalRows, msActiveThreads=msActiveThreads, sswsInstance=sswsInstance, ssgsSOAPWSDLRequests=ssgsSOAPWSDLRequests, aslqRowsFilterIncluded=aslqRowsFilterIncluded, ssbmReservedPages=ssbmReservedPages, ssdMirroringAcksReceivedPerSec=ssdMirroringAcksReceivedPerSec, sscmCachePages=sscmCachePages, ssdBackupPerRestoreThroughputPerSec=ssdBackupPerRestoreThroughputPerSec, mgFilterProcessesMax=mgFilterProcessesMax, ssbmFreePages=ssbmFreePages, ssamWorktablesCreatedPerSec=ssamWorktablesCreatedPerSec, ssmmTotalServerMemoryKB=ssmmTotalServerMemoryKB, mgRobotsTxtRequests=mgRobotsTxtRequests, sscmCacheHitRatio=sscmCacheHitRatio, ssbtSendIOLenAvg=ssbtSendIOLenAvg, aspiTotalPartitions=aspiTotalPartitions, asqdTotalBytes=asqdTotalBytes, mgpFilteringDocuments=mgpFilteringDocuments, asacTotalLookups=asacTotalLookups, msResults=msResults, asqNetworkRoundTripsPerSec=asqNetworkRoundTripsPerSec, mgServersUnavailable=mgServersUnavailable, mgAccessingRobotsTxtFile=mgAccessingRobotsTxtFile, mgpIterateHistoryInProgressFlag=mgpIterateHistoryInProgressFlag, sqlServerCursorManagerByTypeEntry=sqlServerCursorManagerByTypeEntry, ssbmAWEStolenMapsPerSec=ssbmAWEStolenMapsPerSec, ssusInstance=ssusInstance, ssbsSQLRECEIVEsPerSec=ssbsSQLRECEIVEsPerSec, mgpFilteredOffice=mgpFilteredOffice, ssbmProcedureCachePages=ssbmProcedureCachePages, microsoftSearchIndexCatalogEntry=microsoftSearchIndexCatalogEntry, ssgsSOAPSQLRequests=ssgsSOAPSQLRequests, ssrlLogreaderDeliveryLatency=ssrlLogreaderDeliveryLatency, aspaTotalPartitions=aspaTotalPartitions, aslqDSNRequested=aslqDSNRequested, asacLookupsPerSec=asacLookupsPerSec, sslkInstance=sslkInstance, sqlServerReplicationAgentsTable=sqlServerReplicationAgentsTable, sqlServerBackupDeviceTable=sqlServerBackupDeviceTable, ssbtSendIOBytesTotal=ssbtSendIOBytesTotal, ssrdDistDeliveredTransPerSec=ssrdDistDeliveredTransPerSec, aspaMemorySizeBytes=aspaMemorySizeBytes, mgServersCurrentlyUnavailable=mgServersCurrentlyUnavailable, ssbpFreePages=ssbpFreePages, ssamWorktablesFromCacheRatio=ssamWorktablesFromCacheRatio, ssdMirroringBytesSentPerSec=ssdMirroringBytesSentPerSec, ssraRunning=ssraRunning, mgpHTTPErrors=mgpHTTPErrors, sqlServerNameIndex=sqlServerNameIndex, sqlServerBrokerTransportEntry=sqlServerBrokerTransportEntry, aslqAnswerFromFile=aslqAnswerFromFile, analysisServerConnection=analysisServerConnection, sqlServerBrokerActivationTable=sqlServerBrokerActivationTable, sqlServerGeneralStatisticsEntry=sqlServerGeneralStatisticsEntry, mgDocumentsFiltered=mgDocumentsFiltered, ssbmAWEUnmapPagesPerSec=ssbmAWEUnmapPagesPerSec, ssrmDownloadedChangesPerSec=ssrmDownloadedChangesPerSec, asqdCurrentRequests=asqdCurrentRequests, ssdDataFileSSizeKB=ssdDataFileSSizeKB, ssrlInstance=ssrlInstance, aspTotalPartitions=aspTotalPartitions, ssamExtentsAllocatedPerSec=ssamExtentsAllocatedPerSec, sqlServerLocksEntry=sqlServerLocksEntry, ssbsEnqueuedTransportMsgFragsPerSec=ssbsEnqueuedTransportMsgFragsPerSec, mgActiveQueueLength=mgActiveQueueLength, ssamScanPointRevalidationsPerSec=ssamScanPointRevalidationsPerSec, ssamSkippedGhostedRecordsPerSec=ssamSkippedGhostedRecordsPerSec, sqlServerTransactionsTable=sqlServerTransactionsTable, microsoftGathererProjectsEntry=microsoftGathererProjectsEntry, ssbsEnqueuedMessagesTotal=ssbsEnqueuedMessagesTotal, ssbmDatabasePages=ssbmDatabasePages, sqlServerCacheManagerTable=sqlServerCacheManagerTable, mgThreadsInPlugIns=mgThreadsInPlugIns, sslkLockTimeoutsPerSec=sslkLockTimeoutsPerSec, ssamMixedPageAllocationsPerSec=ssamMixedPageAllocationsPerSec, mgpAccessedFileRate=mgpAccessedFileRate, ssbtReceiveIOLenAvg=ssbtReceiveIOLenAvg, mgHeartbeats=mgHeartbeats, aslqRowsCreated=aslqRowsCreated, aslqDataAvgBytesPerRead=aslqDataAvgBytesPerRead, ssdLogTruncations=ssdLogTruncations, ssdLogGrowths=ssdLogGrowths, sscmbtNumberOfActiveCursorPlans=sscmbtNumberOfActiveCursorPlans, mscSuccessfulQueries=mscSuccessfulQueries, msicNumberOfPropagations=msicNumberOfPropagations, msFailedQueries=msFailedQueries, msicFilesToBeFiltered=msicFilesToBeFiltered, ssbaTaskLimitReached=ssbaTaskLimitReached, asacEvictionsPerSec=asacEvictionsPerSec, mgpAccessedFiles=mgpAccessedFiles, ssrsSnapshotDeliveredCmdsPerSec=ssrsSnapshotDeliveredCmdsPerSec, aslqRowsRead=aslqRowsRead, mgpSuccessRate=mgpSuccessRate, sqlServerExecStatisticsTable=sqlServerExecStatisticsTable, mgAllNotificationsReceived=mgAllNotificationsReceived, asqIndexBytesPerSec=asqIndexBytesPerSec, sqlServerNameInstance=sqlServerNameInstance, mscQueriesRate=mscQueriesRate, ssbsForwardedMessagesPerSec=ssbsForwardedMessagesPerSec, aspiTotalRows=aspiTotalRows, mgIdleThreads=mgIdleThreads, ssdMirroringTransactionDelay=ssdMirroringTransactionDelay, asqFilterRowsIncludedPerSec=asqFilterRowsIncludedPerSec, asqCurrentQueries=asqCurrentQueries, aslLockRequestsPerSec=aslLockRequestsPerSec, ssbtMessageFragmentReceiveTotal=ssbtMessageFragmentReceiveTotal, ssbdDeviceThroughputBytesPerSec=ssbdDeviceThroughputBytesPerSec, mgpDocumentsOnHold=mgpDocumentsOnHold, ascSuccessesPerSec=ascSuccessesPerSec, ssbtPendingMsgFragsForRecvIO=ssbtPendingMsgFragsForRecvIO, asacMissesPerSec=asacMissesPerSec, ssbsForwardedMsgDiscardedTotal=ssbsForwardedMsgDiscardedTotal, mgpDocumentModifiesRate=mgpDocumentModifiesRate, msicDocumentsInProgress=msicDocumentsInProgress, ssbmPageLifeExpectancy=ssbmPageLifeExpectancy, ssrmConflictsPerSec=ssrmConflictsPerSec, sstVersionCleanupRateKBPerS=sstVersionCleanupRateKBPerS, ssbtMessageFragmentReceivesPerSec=ssbtMessageFragmentReceivesPerSec, mgpHTTPErrorsRate=mgpHTTPErrorsRate, ssbaTasksAbortedPerSec=ssbaTasksAbortedPerSec, sqlServerCursorManagerByTypeTable=sqlServerCursorManagerByTypeTable, ascCurrentConnections=ascCurrentConnections, asqBytesSentPerSec=asqBytesSentPerSec, sscmCacheUseCountsPerSec=sscmCacheUseCountsPerSec, mgWordBreakersCached=mgWordBreakersCached, aspCurrentPartitions=aspCurrentPartitions, ssmmOptimizerMemoryKB=ssmmOptimizerMemoryKB, ssssSafeAutoParamsPerSec=ssssSafeAutoParamsPerSec, asqQueriesAnsweredPerSec=asqQueriesAnsweredPerSec, analysisServerProcIndexes=analysisServerProcIndexes, mgDocumentsDelayedRetry=mgDocumentsDelayedRetry, mgpDocumentDeleteRate=mgpDocumentDeleteRate, sscmInstance=sscmInstance, asqQueriesFromCacheFilterPerSec=asqQueriesFromCacheFilterPerSec, ssdReplTransRate=ssdReplTransRate, ssbmFreeListStallsPerSec=ssbmFreeListStallsPerSec, msicDocumentsFiltered=msicDocumentsFiltered, sqlServerMemoryManagerEntry=sqlServerMemoryManagerEntry, ssbmPageLookupsPerSec=ssbmPageLookupsPerSec)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER", ssdActiveTransactions=ssdActiveTransactions, sscmbtCursorMemoryUsage=sscmbtCursorMemoryUsage, asqdBytesPerSec=asqdBytesPerSec, ssbtReceiveIOBytesPerSec=ssbtReceiveIOBytesPerSec, asqQueriesFromCacheDirectPerSec=asqQueriesFromCacheDirectPerSec, msicPersistentIndexes=msicPersistentIndexes, mgPerformanceLevel=mgPerformanceLevel, aslqRowsFiltered=aslqRowsFiltered, ssmmGrantedWorkspaceMemoryKB=ssmmGrantedWorkspaceMemoryKB, sqlServer=sqlServer, aslqAnswerFromCacheDirect=aslqAnswerFromCacheDirect, ssamFreeSpaceScansPerSec=ssamFreeSpaceScansPerSec, ssbtSendIOsPerSec=ssbtSendIOsPerSec, ssmmMaximumWorkspaceMemoryKB=ssmmMaximumWorkspaceMemoryKB, sqlServerBrokerTransportTable=sqlServerBrokerTransportTable, ssmmLockMemoryKB=ssmmLockMemoryKB, ascCurrentHttpConnections=ascCurrentHttpConnections, ssrsInstance=ssrsInstance, ssamPagesAllocatedPerSec=ssamPagesAllocatedPerSec, ssdLogShrinks=ssdLogShrinks, sstLongestTransactionRunningTime=sstLongestTransactionRunningTime, ssbsTransportTimerEventCount=ssbsTransportTimerEventCount, asacTotalInserts=asacTotalInserts, asqTotalQueriesFromFile=asqTotalQueriesFromFile, microsoftSearch=microsoftSearch, ssgsTempTablesCreationRate=ssgsTempTablesCreationRate, mgDocumentEntries=mgDocumentEntries, mgExtNotificationsReceived=mgExtNotificationsReceived, ssbtCurrentBytesForRecvIO=ssbtCurrentBytesForRecvIO, ssgsLogoutsPerSec=ssgsLogoutsPerSec, mgpFilteredOfficeRate=mgpFilteredOfficeRate, ssrmUploadedChangesPerSec=ssrmUploadedChangesPerSec, ssdMirroringTotalSends=ssdMirroringTotalSends, mgpAdaptiveCrawlAccepts=mgpAdaptiveCrawlAccepts, sqlServerBrokerActivationEntry=sqlServerBrokerActivationEntry, asqCurrentThreads=asqCurrentThreads, ssamFailedAUCleanupBatchesPerSec=ssamFailedAUCleanupBatchesPerSec, ssbtPendingBytesForSendIO=ssbtPendingBytesForSendIO, asqCurrentPyramidOperations=asqCurrentPyramidOperations, ssbmPageReadsPerSec=ssbmPageReadsPerSec, analysisServerQueryDims=analysisServerQueryDims, aspRowsMergedPerSec=aspRowsMergedPerSec, msicInstance=msicInstance, aspFileRowsWrittenPerSec=aspFileRowsWrittenPerSec, msicUniqueKeys=msicUniqueKeys, sstTransactions=sstTransactions, mgThreadsAccessingNetwork=mgThreadsAccessingNetwork, ssbsEnqueuedTransportMsgsPerSec=ssbsEnqueuedTransportMsgsPerSec, assMembersPerSec=assMembersPerSec, sscmtAsyncPopulationCount=sscmtAsyncPopulationCount, aslqAnswerFromCacheFiltered=aslqAnswerFromCacheFiltered, mgpFilteredHTMLRate=mgpFilteredHTMLRate, sqlServerBackupDeviceEntry=sqlServerBackupDeviceEntry, sqlServerCursorManagerTotalEntry=sqlServerCursorManagerTotalEntry, mgpAdaptiveCrawlErrorSamples=mgpAdaptiveCrawlErrorSamples, mscFailedQueries=mscFailedQueries, mgpRecoveryInProgressFlag=mgpRecoveryInProgressFlag, mgDocumentsSuccessfulFilterRate=mgDocumentsSuccessfulFilterRate, ssgsMarsDeadlocks=ssgsMarsDeadlocks, sseErrorsPerSec=sseErrorsPerSec, msSucceededQueryRate=msSucceededQueryRate, assTotalDimensions=assTotalDimensions, analysisServerProc=analysisServerProc, asqIndexReadsPerSec=asqIndexReadsPerSec, sscmbtCachedCursorCounts=sscmbtCachedCursorCounts, asqAvgTimePerQuery=asqAvgTimePerQuery, ascRequestsPerSec=ascRequestsPerSec, mgServerObjects=mgServerObjects, ssesExtendedProcedures=ssesExtendedProcedures, aslqDSNUsed=aslqDSNUsed, mgFilterProcessCreated=mgFilterProcessCreated, mgpDocumentMoveAndRenameRate=mgpDocumentMoveAndRenameRate, mgpDocumentModifies=mgpDocumentModifies, ssssUnsafeAutoParamsPerSec=ssssUnsafeAutoParamsPerSec, mgServerObjectsCreated=mgServerObjectsCreated, asacDirectHitRatio=asacDirectHitRatio, sstSnapshotTransactions=sstSnapshotTransactions, asqCurrentProcessThreadsActive=asqCurrentProcessThreadsActive, mgpStartedDocuments=mgpStartedDocuments, mgSystemIOTrafficRate=mgSystemIOTrafficRate, aspRowsReadPerSec=aspRowsReadPerSec, ssgsProcessesBlocked=ssgsProcessesBlocked, ascTotalFailures=ascTotalFailures, sstFreeSpaceInTempdbKB=sstFreeSpaceInTempdbKB, sstVersionGenerationRateKBPerS=sstVersionGenerationRateKBPerS, ssdShrinkDataMovementBytesPerSec=ssdShrinkDataMovementBytesPerSec, ssamProbeScansPerSec=ssamProbeScansPerSec, mgpDocumentDeletes=mgpDocumentDeletes, asqQueriesFromFilePerSec=asqQueriesFromFilePerSec, sqlServerUserSettableTable=sqlServerUserSettableTable, ssbsForwardedMsgByteTotal=ssbsForwardedMsgByteTotal, asqDataBytesPerSec=asqDataBytesPerSec, sslkLockRequestsPerSec=sslkLockRequestsPerSec, sseInstance=sseInstance, mscUniqueKeys=mscUniqueKeys, aslqTimeMs=aslqTimeMs, msicWordlists=msicWordlists)
