#
# PySNMP MIB module CIG-CLIENTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIG-CLIENTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:32:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, Bits, Counter32, Counter64, TimeTicks, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ObjectIdentity, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "Counter32", "Counter64", "TimeTicks", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ObjectIdentity", "Unsigned32", "iso")
TimeInterval, TruthValue, DisplayString, RowStatus, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TruthValue", "DisplayString", "RowStatus", "DateAndTime", "TextualConvention")
cigClients = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17))
if mibBuilder.loadTexts: cigClients.setLastUpdated('200910251352Z')
if mibBuilder.loadTexts: cigClients.setOrganization('Avaya')
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
lsg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1))
cigDhcpClients = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1))
cigDnsResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2))
cigDhcpClientsNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 0))
cigDhcpClientsConflictDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 0, 1)).setObjects(("CIG-CLIENTS-MIB", "cigDhcpClientsIfAlias"), ("CIG-CLIENTS-MIB", "cigDhcpClientsIPAddress"), ("CIG-CLIENTS-MIB", "cigDhcpClientsHostName"), ("CIG-CLIENTS-MIB", "cigDhcpClientsClientId"), ("CIG-CLIENTS-MIB", "cigDhcpClientsServerIpAddr"))
if mibBuilder.loadTexts: cigDhcpClientsConflictDetectionTrap.setStatus('current')
cigDhcpClientsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1), )
if mibBuilder.loadTexts: cigDhcpClientsTable.setStatus('current')
cigDhcpClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDhcpClientsIfIndex"))
if mibBuilder.loadTexts: cigDhcpClientsEntry.setStatus('current')
cigDhcpClientsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIfIndex.setStatus('current')
cigDhcpClientsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRowStatus.setStatus('current')
cigDhcpClientsIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIfAlias.setStatus('current')
cigDhcpClientsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIPAddress.setStatus('current')
cigDhcpClientsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsSubnetMask.setStatus('current')
cigDhcpClientsClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsClientId.setStatus('current')
cigDhcpClientsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsHostName.setStatus('current')
cigDhcpClientsRequestLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRequestLeaseTime.setStatus('current')
cigDhcpClientsReceiveLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsReceiveLeaseTime.setStatus('current')
cigDhcpClientsRemainLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRemainLeaseTime.setStatus('current')
cigDhcpClientsRenewLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRenewLeaseTime.setStatus('current')
cigDhcpClientsRebindLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRebindLeaseTime.setStatus('current')
cigDhcpClientsDefaultGatewayList = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDefaultGatewayList.setStatus('current')
cigDhcpClientsDnsServerList = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDnsServerList.setStatus('current')
cigDhcpClientsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDomainName.setStatus('current')
cigDhcpClientsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsServerIpAddr.setStatus('current')
cigDhcpClientsOperations = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("release", 2), ("renew", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsOperations.setStatus('current')
cigDhcpClientsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("select", 1), ("request", 2), ("bound", 3), ("rebind", 4), ("renew", 5), ("release", 6), ("decline", 7), ("reboot", 8), ("idle", 9), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsStatus.setStatus('current')
cigDhcpClientsRequestBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRequestBitmap.setStatus('current')
cigDhcpClientsDefaultRouterTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsDefaultRouterTrackId.setStatus('current')
cigDnsResolverGenConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1))
cigDnsResolverMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverMode.setStatus('current')
cigDnsResolverRetry = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 2), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverRetry.setStatus('current')
cigDnsResolverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 3), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverTimeout.setStatus('current')
cigDnsResolverOperations = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("clearDynamicServers", 2), ("clearDNSCache", 3))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverOperations.setStatus('current')
cigDnsResolverDnsServersListTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: cigDnsResolverDnsServersListTable.setStatus('current')
cigDnsResolverDnsServersListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServersListIndex"))
if mibBuilder.loadTexts: cigDnsResolverDnsServersListEntry.setStatus('current')
cigDnsResolverDnsServersListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListIndex.setStatus('current')
cigDnsResolverDnsServersListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListDescription.setStatus('current')
cigDnsResolverDnsServersListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListRowStatus.setStatus('current')
cigDnsResolverDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3), )
if mibBuilder.loadTexts: cigDnsResolverDnsServerTable.setStatus('current')
cigDnsResolverDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServerListIndex"), (0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServerIndex"))
if mibBuilder.loadTexts: cigDnsResolverDnsServerEntry.setStatus('current')
cigDnsResolverDnsServerListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerListIndex.setStatus('current')
cigDnsResolverDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIndex.setStatus('current')
cigDnsResolverDnsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIpAddress.setStatus('current')
cigDnsResolverDnsServerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIfIndex.setStatus('current')
cigDnsResolverDnsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic-dhcp", 2), ("dynamic-ppp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerType.setStatus('current')
cigDnsResolverDnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerRowStatus.setStatus('current')
cigDnsResolverDnsServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddressType.setStatus('current')
cigDnsResolverDnsServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddress.setStatus('current')
cigDnsResolverDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4), )
if mibBuilder.loadTexts: cigDnsResolverDomainTable.setStatus('current')
cigDnsResolverDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDomainIndex"))
if mibBuilder.loadTexts: cigDnsResolverDomainEntry.setStatus('current')
cigDnsResolverDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDomainIndex.setStatus('current')
cigDnsResolverDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDomain.setStatus('current')
cigDnsResolverDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDomainRowStatus.setStatus('current')
mibBuilder.exportSymbols("CIG-CLIENTS-MIB", cigDnsResolverDomainEntry=cigDnsResolverDomainEntry, cigDnsResolverDomainIndex=cigDnsResolverDomainIndex, cigDhcpClients=cigDhcpClients, cigDhcpClientsEntry=cigDhcpClientsEntry, cigDhcpClientsOperations=cigDhcpClientsOperations, cigDhcpClientsIPAddress=cigDhcpClientsIPAddress, cigDhcpClientsNotification=cigDhcpClientsNotification, cigDnsResolverMode=cigDnsResolverMode, cigDnsResolverGenConfig=cigDnsResolverGenConfig, cigDnsResolverDomainTable=cigDnsResolverDomainTable, cigDnsResolverDnsServerListIndex=cigDnsResolverDnsServerListIndex, cigDnsResolver=cigDnsResolver, cigDnsResolverDnsServerIndex=cigDnsResolverDnsServerIndex, cigDnsResolverDomainRowStatus=cigDnsResolverDomainRowStatus, cigDhcpClientsReceiveLeaseTime=cigDhcpClientsReceiveLeaseTime, mibs=mibs, cigDnsResolverDnsServerTable=cigDnsResolverDnsServerTable, cigDnsResolverDomain=cigDnsResolverDomain, cigDhcpClientsRequestLeaseTime=cigDhcpClientsRequestLeaseTime, cigDnsResolverDnsServerEntry=cigDnsResolverDnsServerEntry, cigDnsResolverTimeout=cigDnsResolverTimeout, cigDnsResolverDnsServerRowStatus=cigDnsResolverDnsServerRowStatus, cigDnsResolverDnsServerIpAddress=cigDnsResolverDnsServerIpAddress, cigDhcpClientsTable=cigDhcpClientsTable, cigDnsResolverDnsServersListDescription=cigDnsResolverDnsServersListDescription, cigDnsResolverDnsServerInetAddress=cigDnsResolverDnsServerInetAddress, cigDnsResolverDnsServersListTable=cigDnsResolverDnsServersListTable, cigDhcpClientsSubnetMask=cigDhcpClientsSubnetMask, cigDnsResolverDnsServersListEntry=cigDnsResolverDnsServersListEntry, cigDhcpClientsRowStatus=cigDhcpClientsRowStatus, cigDhcpClientsIfIndex=cigDhcpClientsIfIndex, cigDnsResolverDnsServersListRowStatus=cigDnsResolverDnsServersListRowStatus, avaya=avaya, cigDhcpClientsRebindLeaseTime=cigDhcpClientsRebindLeaseTime, cigClients=cigClients, cigDnsResolverDnsServerIfIndex=cigDnsResolverDnsServerIfIndex, cigDhcpClientsIfAlias=cigDhcpClientsIfAlias, cigDhcpClientsRequestBitmap=cigDhcpClientsRequestBitmap, cigDhcpClientsHostName=cigDhcpClientsHostName, cigDhcpClientsClientId=cigDhcpClientsClientId, cigDhcpClientsDnsServerList=cigDhcpClientsDnsServerList, cigDnsResolverOperations=cigDnsResolverOperations, cigDhcpClientsStatus=cigDhcpClientsStatus, cigDhcpClientsRemainLeaseTime=cigDhcpClientsRemainLeaseTime, lsg=lsg, cigDhcpClientsConflictDetectionTrap=cigDhcpClientsConflictDetectionTrap, PYSNMP_MODULE_ID=cigClients, cigDnsResolverDnsServersListIndex=cigDnsResolverDnsServersListIndex, cigDhcpClientsDomainName=cigDhcpClientsDomainName, cigDhcpClientsServerIpAddr=cigDhcpClientsServerIpAddr, cigDhcpClientsRenewLeaseTime=cigDhcpClientsRenewLeaseTime, cigDnsResolverDnsServerInetAddressType=cigDnsResolverDnsServerInetAddressType, cigDhcpClientsDefaultGatewayList=cigDhcpClientsDefaultGatewayList, cigDhcpClientsDefaultRouterTrackId=cigDhcpClientsDefaultRouterTrackId, cigDnsResolverDnsServerType=cigDnsResolverDnsServerType, cigDnsResolverRetry=cigDnsResolverRetry)
