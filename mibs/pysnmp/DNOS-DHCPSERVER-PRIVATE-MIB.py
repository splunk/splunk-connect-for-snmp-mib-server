#
# PySNMP MIB module DNOS-DHCPSERVER-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-DHCPSERVER-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:36:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, ModuleIdentity, MibIdentifier, NotificationType, TimeTicks, Bits, iso, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "ModuleIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "iso", "Integer32", "Unsigned32")
RowPointer, StorageType, TextualConvention, MacAddress, RowStatus, TruthValue, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "StorageType", "TextualConvention", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "PhysAddress")
fastPathDHCPServerPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12))
fastPathDHCPServerPrivate.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00',))
if mibBuilder.loadTexts: fastPathDHCPServerPrivate.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathDHCPServerPrivate.setOrganization('Dell, Inc.')
agentDhcpServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1))
agentDhcpServerAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerAdminMode.setStatus('current')
agentDhcpServerPingPktNos = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 10), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPingPktNos.setStatus('current')
agentDhcpServerAutomaticBindingsNos = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerAutomaticBindingsNos.setStatus('current')
agentDhcpServerExpiredBindingsNos = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerExpiredBindingsNos.setStatus('current')
agentDhcpServerMalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerMalformedMessagesReceived.setStatus('current')
agentDhcpServerDISCOVERMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerDISCOVERMessagesReceived.setStatus('current')
agentDhcpServerREQUESTMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerREQUESTMessagesReceived.setStatus('current')
agentDhcpServerDECLINEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerDECLINEMessagesReceived.setStatus('current')
agentDhcpServerRELEASEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerRELEASEMessagesReceived.setStatus('current')
agentDhcpServerINFORMMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerINFORMMessagesReceived.setStatus('current')
agentDhcpServerOFFERMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerOFFERMessagesSent.setStatus('current')
agentDhcpServerACKMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerACKMessagesSent.setStatus('current')
agentDhcpServerNAKMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerNAKMessagesSent.setStatus('current')
agentDhcpServerClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerClearStatistics.setStatus('current')
agentDhcpServerBootpAutomatic = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerBootpAutomatic.setStatus('current')
agentDhcpServerDISCOVERMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerDISCOVERMessagesDiscarded.setStatus('current')
agentDhcpServerPoolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2))
agentDhcpServerPoolNameCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 31), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolNameCreate.setStatus('current')
agentDhcpServerPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2), )
if mibBuilder.loadTexts: agentDhcpServerPoolConfigTable.setStatus('current')
agentDhcpServerPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1), ).setIndexNames((0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerPoolIndex"))
if mibBuilder.loadTexts: agentDhcpServerPoolConfigEntry.setStatus('current')
agentDhcpServerPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolIndex.setStatus('current')
agentDhcpServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolName.setStatus('current')
agentDhcpServerPoolDefRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolDefRouter.setStatus('current')
agentDhcpServerPoolDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolDNSServer.setStatus('current')
agentDhcpServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolLeaseTime.setStatus('current')
agentDhcpServerPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("un-allocated", 0), ("dynamic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolType.setStatus('current')
agentDhcpServerPoolNetbiosNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolNetbiosNameServer.setStatus('current')
agentDhcpServerPoolNetbiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("none", 0), ("b-node", 1), ("p-node", 2), ("m-node", 4), ("h-node", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolNetbiosNodeType.setStatus('current')
agentDhcpServerPoolSNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolSNTPServer.setStatus('current')
agentDhcpServerPoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolNextServer.setStatus('current')
agentDhcpServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolDomainName.setStatus('current')
agentDhcpServerPoolBootfile = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolBootfile.setStatus('current')
agentDhcpServerPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolRowStatus.setStatus('current')
agentDhcpServerPoolAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3), )
if mibBuilder.loadTexts: agentDhcpServerPoolAllocationTable.setStatus('current')
agentDhcpServerPoolAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1), )
agentDhcpServerPoolConfigEntry.registerAugmentions(("DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerPoolAllocationEntry"))
agentDhcpServerPoolAllocationEntry.setIndexNames(*agentDhcpServerPoolConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentDhcpServerPoolAllocationEntry.setStatus('current')
agentDhcpServerPoolAllocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolAllocationName.setStatus('current')
agentDhcpServerDynamicPoolIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerDynamicPoolIpAddress.setStatus('current')
agentDhcpServerDynamicPoolIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerDynamicPoolIpMask.setStatus('current')
agentDhcpServerDynamicPoolIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerDynamicPoolIpPrefixLength.setStatus('current')
agentDhcpServerPoolAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("un-allocated", 0), ("dynamic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolAllocationType.setStatus('current')
agentDhcpServerManualPoolClientIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolClientIdentifier.setStatus('current')
agentDhcpServerManualPoolClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolClientName.setStatus('current')
agentDhcpServerManualPoolClientHWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolClientHWAddr.setStatus('current')
agentDhcpServerManualPoolClientHWType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802", 6))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolClientHWType.setStatus('current')
agentDhcpServerManualPoolIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolIpAddress.setStatus('current')
agentDhcpServerManualPoolIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolIpMask.setStatus('current')
agentDhcpServerManualPoolIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerManualPoolIpPrefixLength.setStatus('current')
agentDhcpServerExcludedAddressRangeCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerExcludedAddressRangeCreate.setStatus('current')
agentDhcpServerExcludedAddressRangeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5), )
if mibBuilder.loadTexts: agentDhcpServerExcludedAddressRangeTable.setStatus('current')
agentDhcpServerExcludedAddressRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5, 1), ).setIndexNames((0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerExcludedRangeIndex"))
if mibBuilder.loadTexts: agentDhcpServerExcludedAddressRangeEntry.setStatus('current')
agentDhcpServerExcludedRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerExcludedRangeIndex.setStatus('current')
agentDhcpServerExcludedStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerExcludedStartIpAddress.setStatus('current')
agentDhcpServerExcludedEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerExcludedEndIpAddress.setStatus('current')
agentDhcpServerExcludedAddressRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerExcludedAddressRangeStatus.setStatus('current')
agentDhcpServerPoolOptionCreate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionCreate.setStatus('current')
agentDhcpServerPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7), )
if mibBuilder.loadTexts: agentDhcpServerPoolOptionTable.setStatus('current')
agentDhcpServerPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1), ).setIndexNames((0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerPoolOptionIndex"), (0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerPoolOptionCode"))
if mibBuilder.loadTexts: agentDhcpServerPoolOptionEntry.setStatus('current')
agentDhcpServerPoolOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionIndex.setStatus('current')
agentDhcpServerPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionCode.setStatus('current')
agentDhcpServerOptionPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerOptionPoolName.setStatus('current')
agentDhcpServerPoolOptionAsciiData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 441))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionAsciiData.setStatus('current')
agentDhcpServerPoolOptionHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1324))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionHexData.setStatus('current')
agentDhcpServerPoolOptionIpAddressData = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionIpAddressData.setStatus('current')
agentDhcpServerPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 2, 7, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerPoolOptionStatus.setStatus('current')
agentDhcpServerLeaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3))
agentDhcpServerLeaseClearAllBindings = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerLeaseClearAllBindings.setStatus('current')
agentDhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2), )
if mibBuilder.loadTexts: agentDhcpServerLeaseTable.setStatus('current')
agentDhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1), ).setIndexNames((0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerLeaseIPAddress"))
if mibBuilder.loadTexts: agentDhcpServerLeaseEntry.setStatus('current')
agentDhcpServerLeaseIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerLeaseIPAddress.setStatus('current')
agentDhcpServerLeaseIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerLeaseIPMask.setStatus('current')
agentDhcpServerLeaseHWAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerLeaseHWAddress.setStatus('current')
agentDhcpServerLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerLeaseRemainingTime.setStatus('current')
agentDhcpServerLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerLeaseType.setStatus('current')
agentDhcpServerLeaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 3, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerLeaseStatus.setStatus('current')
agentDhcpServerAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4))
agentDhcpServerClearAllAddressConflicts = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerClearAllAddressConflicts.setStatus('current')
agentDhcpServerAddressConflictLogging = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerAddressConflictLogging.setStatus('current')
agentDhcpServerAddressConflictTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3), )
if mibBuilder.loadTexts: agentDhcpServerAddressConflictTable.setStatus('current')
agentDhcpServerAddressConflictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3, 1), ).setIndexNames((0, "DNOS-DHCPSERVER-PRIVATE-MIB", "agentDhcpServerAddressConflictIP"))
if mibBuilder.loadTexts: agentDhcpServerAddressConflictEntry.setStatus('current')
agentDhcpServerAddressConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerAddressConflictIP.setStatus('current')
agentDhcpServerAddressConflictDetectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("gratuitousArp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerAddressConflictDetectionType.setStatus('current')
agentDhcpServerAddressConflictDetectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpServerAddressConflictDetectionTime.setStatus('current')
agentDhcpServerAddressConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 12, 4, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpServerAddressConflictStatus.setStatus('current')
mibBuilder.exportSymbols("DNOS-DHCPSERVER-PRIVATE-MIB", agentDhcpServerMalformedMessagesReceived=agentDhcpServerMalformedMessagesReceived, agentDhcpServerPoolOptionStatus=agentDhcpServerPoolOptionStatus, agentDhcpServerLeaseTable=agentDhcpServerLeaseTable, agentDhcpServerDECLINEMessagesReceived=agentDhcpServerDECLINEMessagesReceived, agentDhcpServerDISCOVERMessagesReceived=agentDhcpServerDISCOVERMessagesReceived, agentDhcpServerManualPoolClientHWType=agentDhcpServerManualPoolClientHWType, agentDhcpServerPoolOptionHexData=agentDhcpServerPoolOptionHexData, agentDhcpServerPoolName=agentDhcpServerPoolName, agentDhcpServerAutomaticBindingsNos=agentDhcpServerAutomaticBindingsNos, agentDhcpServerRELEASEMessagesReceived=agentDhcpServerRELEASEMessagesReceived, agentDhcpServerManualPoolClientIdentifier=agentDhcpServerManualPoolClientIdentifier, agentDhcpServerPoolConfigGroup=agentDhcpServerPoolConfigGroup, agentDhcpServerBootpAutomatic=agentDhcpServerBootpAutomatic, agentDhcpServerManualPoolClientHWAddr=agentDhcpServerManualPoolClientHWAddr, agentDhcpServerPoolNetbiosNodeType=agentDhcpServerPoolNetbiosNodeType, agentDhcpServerDynamicPoolIpAddress=agentDhcpServerDynamicPoolIpAddress, agentDhcpServerLeaseGroup=agentDhcpServerLeaseGroup, agentDhcpServerLeaseEntry=agentDhcpServerLeaseEntry, agentDhcpServerExcludedRangeIndex=agentDhcpServerExcludedRangeIndex, agentDhcpServerDynamicPoolIpPrefixLength=agentDhcpServerDynamicPoolIpPrefixLength, agentDhcpServerAddressConflictTable=agentDhcpServerAddressConflictTable, agentDhcpServerPoolOptionCode=agentDhcpServerPoolOptionCode, agentDhcpServerPoolOptionIpAddressData=agentDhcpServerPoolOptionIpAddressData, agentDhcpServerPoolNameCreate=agentDhcpServerPoolNameCreate, agentDhcpServerOptionPoolName=agentDhcpServerOptionPoolName, agentDhcpServerExcludedEndIpAddress=agentDhcpServerExcludedEndIpAddress, agentDhcpServerClearAllAddressConflicts=agentDhcpServerClearAllAddressConflicts, agentDhcpServerAddressConflictGroup=agentDhcpServerAddressConflictGroup, agentDhcpServerPoolDomainName=agentDhcpServerPoolDomainName, agentDhcpServerPoolLeaseTime=agentDhcpServerPoolLeaseTime, agentDhcpServerPoolConfigEntry=agentDhcpServerPoolConfigEntry, agentDhcpServerExcludedAddressRangeTable=agentDhcpServerExcludedAddressRangeTable, agentDhcpServerPoolBootfile=agentDhcpServerPoolBootfile, agentDhcpServerPoolOptionAsciiData=agentDhcpServerPoolOptionAsciiData, agentDhcpServerExpiredBindingsNos=agentDhcpServerExpiredBindingsNos, agentDhcpServerExcludedAddressRangeStatus=agentDhcpServerExcludedAddressRangeStatus, agentDhcpServerGroup=agentDhcpServerGroup, agentDhcpServerPoolDNSServer=agentDhcpServerPoolDNSServer, agentDhcpServerExcludedAddressRangeCreate=agentDhcpServerExcludedAddressRangeCreate, agentDhcpServerPoolType=agentDhcpServerPoolType, agentDhcpServerDynamicPoolIpMask=agentDhcpServerDynamicPoolIpMask, agentDhcpServerLeaseStatus=agentDhcpServerLeaseStatus, agentDhcpServerAddressConflictIP=agentDhcpServerAddressConflictIP, agentDhcpServerPoolIndex=agentDhcpServerPoolIndex, agentDhcpServerPoolSNTPServer=agentDhcpServerPoolSNTPServer, agentDhcpServerAddressConflictLogging=agentDhcpServerAddressConflictLogging, agentDhcpServerPoolNextServer=agentDhcpServerPoolNextServer, agentDhcpServerOFFERMessagesSent=agentDhcpServerOFFERMessagesSent, agentDhcpServerLeaseRemainingTime=agentDhcpServerLeaseRemainingTime, agentDhcpServerLeaseIPAddress=agentDhcpServerLeaseIPAddress, agentDhcpServerManualPoolIpAddress=agentDhcpServerManualPoolIpAddress, agentDhcpServerPoolDefRouter=agentDhcpServerPoolDefRouter, agentDhcpServerClearStatistics=agentDhcpServerClearStatistics, agentDhcpServerPingPktNos=agentDhcpServerPingPktNos, agentDhcpServerExcludedStartIpAddress=agentDhcpServerExcludedStartIpAddress, agentDhcpServerINFORMMessagesReceived=agentDhcpServerINFORMMessagesReceived, agentDhcpServerPoolOptionCreate=agentDhcpServerPoolOptionCreate, agentDhcpServerPoolAllocationTable=agentDhcpServerPoolAllocationTable, agentDhcpServerREQUESTMessagesReceived=agentDhcpServerREQUESTMessagesReceived, agentDhcpServerManualPoolIpMask=agentDhcpServerManualPoolIpMask, agentDhcpServerAddressConflictDetectionType=agentDhcpServerAddressConflictDetectionType, agentDhcpServerLeaseClearAllBindings=agentDhcpServerLeaseClearAllBindings, agentDhcpServerAdminMode=agentDhcpServerAdminMode, PYSNMP_MODULE_ID=fastPathDHCPServerPrivate, agentDhcpServerPoolAllocationEntry=agentDhcpServerPoolAllocationEntry, agentDhcpServerPoolOptionEntry=agentDhcpServerPoolOptionEntry, agentDhcpServerACKMessagesSent=agentDhcpServerACKMessagesSent, agentDhcpServerDISCOVERMessagesDiscarded=agentDhcpServerDISCOVERMessagesDiscarded, agentDhcpServerPoolConfigTable=agentDhcpServerPoolConfigTable, agentDhcpServerPoolAllocationType=agentDhcpServerPoolAllocationType, agentDhcpServerAddressConflictDetectionTime=agentDhcpServerAddressConflictDetectionTime, agentDhcpServerManualPoolIpPrefixLength=agentDhcpServerManualPoolIpPrefixLength, agentDhcpServerAddressConflictEntry=agentDhcpServerAddressConflictEntry, agentDhcpServerLeaseIPMask=agentDhcpServerLeaseIPMask, agentDhcpServerNAKMessagesSent=agentDhcpServerNAKMessagesSent, agentDhcpServerExcludedAddressRangeEntry=agentDhcpServerExcludedAddressRangeEntry, agentDhcpServerPoolAllocationName=agentDhcpServerPoolAllocationName, agentDhcpServerManualPoolClientName=agentDhcpServerManualPoolClientName, agentDhcpServerPoolOptionTable=agentDhcpServerPoolOptionTable, agentDhcpServerPoolNetbiosNameServer=agentDhcpServerPoolNetbiosNameServer, agentDhcpServerPoolRowStatus=agentDhcpServerPoolRowStatus, agentDhcpServerLeaseHWAddress=agentDhcpServerLeaseHWAddress, agentDhcpServerLeaseType=agentDhcpServerLeaseType, agentDhcpServerPoolOptionIndex=agentDhcpServerPoolOptionIndex, fastPathDHCPServerPrivate=fastPathDHCPServerPrivate, agentDhcpServerAddressConflictStatus=agentDhcpServerAddressConflictStatus)
