#
# PySNMP MIB module NSCDXCDA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCDXCDA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Unsigned32, IpAddress, Counter64, iso, ModuleIdentity, NotificationType, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Unsigned32", "IpAddress", "Counter64", "iso", "ModuleIdentity", "NotificationType", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nscDxCda = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3))
nscDxCdaTraceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: nscDxCdaTraceInfoTable.setStatus('mandatory')
nscDxCdaTraceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaTraceInfoEntKeyId"))
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntry.setStatus('mandatory')
nscDxCdaTraceInfoEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntKeyId.setStatus('mandatory')
nscDxCdaTraceInfoEntTraceSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceSeverity.setStatus('mandatory')
nscDxCdaTraceInfoEntTraceFacilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTraceFacilityMask.setStatus('mandatory')
nscDxCdaTraceInfoEntTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapSeverity.setStatus('mandatory')
nscDxCdaTraceInfoEntTrapFacilityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTrapFacilityMask.setStatus('mandatory')
nscDxCdaTraceInfoEntFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("executive", 0), ("console", 1), ("packets", 2), ("bridge", 3), ("localip", 4), ("dlcx", 5), ("xport", 17), ("session", 18), ("device", 19), ("bus-tag", 20), ("escon", 21), ("greenline", 22), ("ho15", 23), ("isr", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntFacility.setStatus('mandatory')
nscDxCdaTraceInfoEntSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntSeverity.setStatus('mandatory')
nscDxCdaTraceInfoEntMsgnum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsgnum.setStatus('mandatory')
nscDxCdaTraceInfoEntTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntTimestamp.setStatus('mandatory')
nscDxCdaTraceInfoEntMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceInfoEntMsg.setStatus('mandatory')
nscDxCdaTraceTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: nscDxCdaTraceTable.setStatus('mandatory')
nscDxCdaTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaTraceEntKeyId"), (0, "NSCDXCDA-MIB", "nscDxCdaTraceEntNum"))
if mibBuilder.loadTexts: nscDxCdaTraceEntry.setStatus('mandatory')
nscDxCdaTraceEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntKeyId.setStatus('mandatory')
nscDxCdaTraceEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntNum.setStatus('mandatory')
nscDxCdaTraceEntFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("executive", 0), ("console", 1), ("packets", 2), ("bridge", 3), ("localip", 4), ("dlcx", 5), ("xport", 17), ("session", 18), ("device", 19), ("bus-tag", 20), ("escon", 21), ("greenline", 22), ("ho15", 23), ("isr", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntFacility.setStatus('mandatory')
nscDxCdaTraceEntSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntSeverity.setStatus('mandatory')
nscDxCdaTraceEntMsgnum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntMsgnum.setStatus('mandatory')
nscDxCdaTraceEntTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntTimestamp.setStatus('mandatory')
nscDxCdaTraceEntMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaTraceEntMsg.setStatus('mandatory')
nscDxCdaProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3), )
if mibBuilder.loadTexts: nscDxCdaProfilesTable.setStatus('mandatory')
nscDxCdaProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1), ).setIndexNames((0, "NSCDXCDA-MIB", "nscDxCdaProfilesEntKeyId"))
if mibBuilder.loadTexts: nscDxCdaProfilesEntry.setStatus('mandatory')
nscDxCdaProfilesEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntKeyId.setStatus('mandatory')
nscDxCdaProfilesEntDateWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntDateWritten.setStatus('mandatory')
nscDxCdaProfilesEntTimeWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntTimeWritten.setStatus('mandatory')
nscDxCdaProfilesEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaProfilesEntName.setStatus('mandatory')
nscDxCdaProfilesEntSaveProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modified", 1), ("up-to-date", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxCdaProfilesEntSaveProfiles.setStatus('mandatory')
nscDxCdaProfilesEntProcessorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 3, 3, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxCdaProfilesEntProcessorSpecific.setStatus('mandatory')
nscDxTrace = NotificationType((1, 3, 6, 1, 4, 1, 10, 2, 1, 3) + (0,1)).setObjects(("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntKeyId"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntFacility"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntSeverity"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntMsgnum"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntTimestamp"), ("NSCDXCDA-MIB", "nscDxCdaTraceInfoEntMsg"))
mibBuilder.exportSymbols("NSCDXCDA-MIB", nscDxCdaTraceInfoEntKeyId=nscDxCdaTraceInfoEntKeyId, nscDxCdaTraceEntSeverity=nscDxCdaTraceEntSeverity, nscDxCdaTraceEntMsg=nscDxCdaTraceEntMsg, nscDxCdaTraceInfoEntTrapFacilityMask=nscDxCdaTraceInfoEntTrapFacilityMask, nscDxCdaProfilesEntTimeWritten=nscDxCdaProfilesEntTimeWritten, nscDxCdaProfilesEntSaveProfiles=nscDxCdaProfilesEntSaveProfiles, nscDxCdaTraceInfoEntMsgnum=nscDxCdaTraceInfoEntMsgnum, nscDxCdaTraceInfoEntry=nscDxCdaTraceInfoEntry, nscDxCdaProfilesEntProcessorSpecific=nscDxCdaProfilesEntProcessorSpecific, nscDxCdaTraceInfoEntTrapSeverity=nscDxCdaTraceInfoEntTrapSeverity, nscDxCdaTraceInfoEntTraceFacilityMask=nscDxCdaTraceInfoEntTraceFacilityMask, nscDxCdaTraceInfoEntFacility=nscDxCdaTraceInfoEntFacility, nscDxCdaTraceInfoEntSeverity=nscDxCdaTraceInfoEntSeverity, nscDxCdaTraceInfoEntMsg=nscDxCdaTraceInfoEntMsg, nscDxCdaProfilesEntKeyId=nscDxCdaProfilesEntKeyId, nscDxCdaProfilesEntDateWritten=nscDxCdaProfilesEntDateWritten, nscDxCda=nscDxCda, nscDxCdaProfilesEntry=nscDxCdaProfilesEntry, nscDxTrace=nscDxTrace, nscDxCdaTraceTable=nscDxCdaTraceTable, nscDxCdaTraceInfoEntTraceSeverity=nscDxCdaTraceInfoEntTraceSeverity, nscDxCdaProfilesEntName=nscDxCdaProfilesEntName, nscDxCdaTraceEntry=nscDxCdaTraceEntry, nscDxCdaTraceEntMsgnum=nscDxCdaTraceEntMsgnum, nscDxCdaTraceEntFacility=nscDxCdaTraceEntFacility, nscDxCdaTraceEntNum=nscDxCdaTraceEntNum, nscDxCdaProfilesTable=nscDxCdaProfilesTable, nscDxCdaTraceEntKeyId=nscDxCdaTraceEntKeyId, nscDxCdaTraceInfoTable=nscDxCdaTraceInfoTable, nscDxCdaTraceEntTimestamp=nscDxCdaTraceEntTimestamp, nscDxCdaTraceInfoEntTimestamp=nscDxCdaTraceInfoEntTimestamp)
