#
# PySNMP MIB module HPN-ICF-SPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-SPB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
IEEE8021SpbmSPsourceId, = mibBuilder.importSymbols("IEEE8021-SPB-MIB", "IEEE8021SpbmSPsourceId")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Gauge32, Counter64, Integer32, TimeTicks, ObjectIdentity, NotificationType, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Gauge32", "Counter64", "Integer32", "TimeTicks", "ObjectIdentity", "NotificationType", "MibIdentifier", "Unsigned32", "ModuleIdentity")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
hpnicfSpb = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128))
hpnicfSpb.setRevisions(('2012-11-22 00:00',))
if mibBuilder.loadTexts: hpnicfSpb.setLastUpdated('201211220000Z')
if mibBuilder.loadTexts: hpnicfSpb.setOrganization('')
hpnicfSpbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1))
hpnicfSpbSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1))
hpnicfSpbSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSysStatus.setStatus('current')
hpnicfSpbMulticastBVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbMulticastBVlanStatus.setStatus('current')
hpnicfSpbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2))
hpnicfSpbIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfSpbIfTable.setStatus('current')
hpnicfSpbIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfSpbIfEntry.setStatus('current')
hpnicfSpbIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbIfStatus.setStatus('current')
hpnicfSpbSrvTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfSpbSrvTable.setStatus('current')
hpnicfSpbSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-SPB-MIB", "hpnicfSpbSrvTableEntryTopIx"), (0, "HPN-ICF-SPB-MIB", "hpnicfSpbSrvTableEntryIsid"))
if mibBuilder.loadTexts: hpnicfSpbSrvEntry.setStatus('current')
hpnicfSpbSrvTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryTopIx.setStatus('current')
hpnicfSpbSrvTableEntryIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(255, 16777215)))
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryIsid.setStatus('current')
hpnicfSpbSrvTableEntryBaseVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 3), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryBaseVid.setStatus('current')
hpnicfSpbSrvTableEntryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("headEnd", 1), ("tandem", 2))).clone('headEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryMode.setStatus('current')
hpnicfSpbTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3))
hpnicfSpbTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0))
hpnicfSpbTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1))
hpnicfSpbSPSourceConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0, 1)).setObjects(("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSysID"), ("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSPSourceID"))
if mibBuilder.loadTexts: hpnicfSpbSPSourceConflictTrap.setStatus('current')
hpnicfSpbBMacConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0, 2)).setObjects(("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSysID"), ("HPN-ICF-SPB-MIB", "hpnicfSpbConflictBMac"))
if mibBuilder.loadTexts: hpnicfSpbBMacConflictTrap.setStatus('current')
hpnicfSpbConflictSysID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictSysID.setStatus('current')
hpnicfSpbConflictSPSourceID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 2), IEEE8021SpbmSPsourceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictSPSourceID.setStatus('current')
hpnicfSpbConflictBMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictBMac.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-SPB-MIB", hpnicfSpbSrvTableEntryTopIx=hpnicfSpbSrvTableEntryTopIx, hpnicfSpbObjects=hpnicfSpbObjects, hpnicfSpbSrvEntry=hpnicfSpbSrvEntry, hpnicfSpbIfTable=hpnicfSpbIfTable, hpnicfSpbConflictSysID=hpnicfSpbConflictSysID, hpnicfSpbSysObjects=hpnicfSpbSysObjects, hpnicfSpbConfig=hpnicfSpbConfig, hpnicfSpbTraps=hpnicfSpbTraps, hpnicfSpbIfStatus=hpnicfSpbIfStatus, hpnicfSpbSrvTable=hpnicfSpbSrvTable, hpnicfSpbTrap=hpnicfSpbTrap, hpnicfSpbTrapsObjects=hpnicfSpbTrapsObjects, hpnicfSpbSPSourceConflictTrap=hpnicfSpbSPSourceConflictTrap, PYSNMP_MODULE_ID=hpnicfSpb, hpnicfSpbSysStatus=hpnicfSpbSysStatus, hpnicfSpbConflictBMac=hpnicfSpbConflictBMac, hpnicfSpbSrvTableEntryIsid=hpnicfSpbSrvTableEntryIsid, hpnicfSpbMulticastBVlanStatus=hpnicfSpbMulticastBVlanStatus, hpnicfSpbSrvTableEntryMode=hpnicfSpbSrvTableEntryMode, hpnicfSpbBMacConflictTrap=hpnicfSpbBMacConflictTrap, hpnicfSpbSrvTableEntryBaseVid=hpnicfSpbSrvTableEntryBaseVid, hpnicfSpbConflictSPSourceID=hpnicfSpbConflictSPSourceID, hpnicfSpbIfEntry=hpnicfSpbIfEntry, hpnicfSpb=hpnicfSpb)
