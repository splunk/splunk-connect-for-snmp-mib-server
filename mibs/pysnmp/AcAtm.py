#
# PySNMP MIB module AcAtm (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AcAtm
# Produced by pysmi-0.3.4 at Mon Apr 29 17:16:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
AtmAddr, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmAddr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Bits, Unsigned32, MibIdentifier, enterprises, IpAddress, Counter32, Gauge32, ObjectIdentity, ModuleIdentity, NotificationType, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Bits", "Unsigned32", "MibIdentifier", "enterprises", "IpAddress", "Counter32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TAddress, TextualConvention, DisplayString, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "TextualConvention", "DisplayString", "DateAndTime", "RowStatus")
audioCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003))
acRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 7))
acGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 8))
acProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9))
acBoardMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10))
acAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6))
acAtm.setRevisions(('2003-10-16 00:00', '2006-03-21 10:48',))
if mibBuilder.loadTexts: acAtm.setLastUpdated('200603211048Z')
if mibBuilder.loadTexts: acAtm.setOrganization('AudioCodes Ltd')
acAtmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1))
atmGeneralParams = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 1))
atmGeneralParamsAtmDefaultApplicationType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal1", 1), ("aal2-i-366-2", 2), ("aal2-umts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGeneralParamsAtmDefaultApplicationType.setStatus('current')
atmGeneralParamsAtmTransmissionMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sdh", 0), ("sonet", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGeneralParamsAtmTransmissionMode.setStatus('current')
atmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2))
atmPortTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1), )
if mibBuilder.loadTexts: atmPortTable.setStatus('current')
atmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1), ).setIndexNames((0, "AcAtm", "atmPortNumber"))
if mibBuilder.loadTexts: atmPortEntry.setStatus('current')
atmPortAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("shuttingDown", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortAdministrativeState.setStatus('current')
atmPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortOperationalState.setStatus('current')
atmPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortNumber.setStatus('current')
atmPortAdminAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 4), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortAdminAddress.setStatus('current')
atmPortOperationalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 5), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortOperationalAddress.setStatus('current')
atmPortAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("cleared", 0), ("los", 1), ("ais", 2), ("rdi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortAlarmStatus.setStatus('current')
atmPortAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("addrModeNone", 0), ("addrModeManual", 1), ("addrModeILMI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortAddressMode.setStatus('current')
atmRemoteGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3))
atmRemoteGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1), )
if mibBuilder.loadTexts: atmRemoteGatewayTable.setStatus('current')
atmRemoteGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1), ).setIndexNames((0, "AcAtm", "atmRemoteGatewayIndex"))
if mibBuilder.loadTexts: atmRemoteGatewayEntry.setStatus('current')
atmRemoteGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmRemoteGatewayRowStatus.setStatus('current')
atmRemoteGatewayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmRemoteGatewayAction.setStatus('current')
atmRemoteGatewayActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmRemoteGatewayActionResult.setStatus('current')
atmRemoteGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmRemoteGatewayIndex.setStatus('current')
atmRemoteGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmRemoteGatewayName.setStatus('current')
atmRemoteGatewayNSAPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 6), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmRemoteGatewayNSAPAddress.setStatus('current')
atmRemoteGatewayALCAPInstanceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmRemoteGatewayALCAPInstanceNum.setStatus('current')
aal2PVC = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4))
aal2PVCTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1), )
if mibBuilder.loadTexts: aal2PVCTable.setStatus('current')
aal2PVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1), ).setIndexNames((0, "AcAtm", "aal2PVCRemoteGatewayIndex"), (0, "AcAtm", "aal2PVCVCCIPATHID"))
if mibBuilder.loadTexts: aal2PVCEntry.setStatus('current')
aal2PVCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aal2PVCRowStatus.setStatus('current')
aal2PVCAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2PVCAction.setStatus('current')
aal2PVCActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2PVCActionResult.setStatus('current')
aal2PVCRemoteGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCRemoteGatewayIndex.setStatus('current')
aal2PVCVCCIPATHID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCVCCIPATHID.setStatus('current')
aal2PVCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCPortNumber.setStatus('current')
aal2PVCVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCVpi.setStatus('current')
aal2PVCVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCVci.setStatus('current')
aal2PVCMaxNumOfCid = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCMaxNumOfCid.setStatus('current')
aal2PVCNumOfCidInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2PVCNumOfCidInUse.setStatus('current')
aal2PVCServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("rtVbr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCServiceCategory.setStatus('current')
aal2PVCPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCPCR.setStatus('current')
aal2PVCSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCSCR.setStatus('current')
aal2PVCMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2PVCMBS.setStatus('current')
atmPortLoopbackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5))
atmPortLoopbackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1), )
if mibBuilder.loadTexts: atmPortLoopbackConfigTable.setStatus('current')
atmPortLoopbackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1), ).setIndexNames((0, "AcAtm", "atmPortLoopbackConfigPortNumber"))
if mibBuilder.loadTexts: atmPortLoopbackConfigEntry.setStatus('current')
atmPortLoopbackConfigIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigIsUsed.setStatus('current')
atmPortLoopbackConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortLoopbackConfigAction.setStatus('current')
atmPortLoopbackConfigActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortLoopbackConfigActionResult.setStatus('current')
atmPortLoopbackConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigPortNumber.setStatus('current')
atmPortLoopbackConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("uni", 1), ("vp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigMode.setStatus('current')
atmPortLoopbackConfigOutBoundVirtualPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigOutBoundVirtualPath.setStatus('current')
atmPortLoopbackConfigInBoundVirtualPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigInBoundVirtualPath.setStatus('current')
atmPortLoopbackConfigVciRangeFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigVciRangeFirst.setStatus('current')
atmPortLoopbackConfigVciRangeLast = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigVciRangeLast.setStatus('current')
atmPortLoopbackConfigServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("rtVbr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigServiceCategory.setStatus('current')
atmPortLoopbackConfigPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(171, 59600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigPCR.setStatus('current')
atmPortLoopbackConfigSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(171, 59600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigSCR.setStatus('current')
atmPortLoopbackConfigMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLoopbackConfigMBS.setStatus('current')
atmSvcProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6))
atmSvcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1), )
if mibBuilder.loadTexts: atmSvcProfileTable.setStatus('current')
atmSvcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1), ).setIndexNames((0, "AcAtm", "atmSvcProfileIndex"))
if mibBuilder.loadTexts: atmSvcProfileEntry.setStatus('current')
atmSvcProfileIsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileIsUsed.setStatus('current')
atmSvcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileIndex.setStatus('current')
atmSvcProfileMaxNumOfCids = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileMaxNumOfCids.setStatus('current')
atmSvcProfilePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(171, 59600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfilePCR.setStatus('current')
atmSvcProfileSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(171, 59600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileSCR.setStatus('current')
atmSvcProfileMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileMBS.setStatus('current')
atmSvcProfilePersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfilePersistence.setStatus('current')
atmSvcProfileServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("rtVbr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSvcProfileServiceCategory.setStatus('current')
acAtmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2))
atmSvcConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1))
atmSvcConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1), )
if mibBuilder.loadTexts: atmSvcConnectionTable.setStatus('current')
atmSvcConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1), ).setIndexNames((0, "AcAtm", "atmSvcConnectionIndex"))
if mibBuilder.loadTexts: atmSvcConnectionEntry.setStatus('current')
atmSvcConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionIndex.setStatus('current')
atmSvcConnectionRemoteGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 2), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionRemoteGatewayAddress.setStatus('current')
atmSvcConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("port0", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionPort.setStatus('current')
atmSvcConnectionVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionVpi.setStatus('current')
atmSvcConnectionVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionVci.setStatus('current')
atmSvcConnectionAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal1", 1), ("aal2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionAALType.setStatus('current')
atmSvcConnectionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("incoming", 0), ("outgoing", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionDirection.setStatus('current')
atmSvcConnectionEecid = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionEecid.setStatus('current')
atmSvcConnectionVcci = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionVcci.setStatus('current')
atmSvcConnectionMaxNumOfCid = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionMaxNumOfCid.setStatus('current')
atmSvcConnectionNumOfCidInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 6, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSvcConnectionNumOfCidInUse.setStatus('current')
mibBuilder.exportSymbols("AcAtm", atmPortLoopbackConfigPortNumber=atmPortLoopbackConfigPortNumber, atmSvcProfileEntry=atmSvcProfileEntry, aal2PVCRowStatus=aal2PVCRowStatus, aal2PVCEntry=aal2PVCEntry, atmSvcConnectionVcci=atmSvcConnectionVcci, atmPortAddressMode=atmPortAddressMode, atmSvcConnectionRemoteGatewayAddress=atmSvcConnectionRemoteGatewayAddress, atmSvcProfileIndex=atmSvcProfileIndex, atmSvcConnectionEecid=atmSvcConnectionEecid, atmPortAdminAddress=atmPortAdminAddress, atmRemoteGatewayIndex=atmRemoteGatewayIndex, atmSvcProfileSCR=atmSvcProfileSCR, atmRemoteGatewayName=atmRemoteGatewayName, atmPortLoopbackConfigIsUsed=atmPortLoopbackConfigIsUsed, atmPortLoopbackConfigVciRangeLast=atmPortLoopbackConfigVciRangeLast, atmPortAlarmStatus=atmPortAlarmStatus, atmSvcProfilePersistence=atmSvcProfilePersistence, acAtmStatus=acAtmStatus, atmRemoteGatewayRowStatus=atmRemoteGatewayRowStatus, aal2PVCPCR=aal2PVCPCR, atmSvcConnectionIndex=atmSvcConnectionIndex, atmSvcConnectionEntry=atmSvcConnectionEntry, aal2PVCSCR=aal2PVCSCR, atmSvcConnectionVci=atmSvcConnectionVci, atmGeneralParamsAtmDefaultApplicationType=atmGeneralParamsAtmDefaultApplicationType, atmRemoteGateway=atmRemoteGateway, atmPortLoopbackConfigMode=atmPortLoopbackConfigMode, atmPortLoopbackConfigOutBoundVirtualPath=atmPortLoopbackConfigOutBoundVirtualPath, aal2PVCVci=aal2PVCVci, aal2PVC=aal2PVC, atmSvcProfileServiceCategory=atmSvcProfileServiceCategory, aal2PVCRemoteGatewayIndex=aal2PVCRemoteGatewayIndex, atmSvcProfilePCR=atmSvcProfilePCR, atmPortLoopbackConfig=atmPortLoopbackConfig, atmRemoteGatewayALCAPInstanceNum=atmRemoteGatewayALCAPInstanceNum, audioCodes=audioCodes, acAtm=acAtm, aal2PVCVCCIPATHID=aal2PVCVCCIPATHID, atmPortLoopbackConfigTable=atmPortLoopbackConfigTable, atmPortAdministrativeState=atmPortAdministrativeState, atmSvcConnectionDirection=atmSvcConnectionDirection, atmPortNumber=atmPortNumber, atmRemoteGatewayActionResult=atmRemoteGatewayActionResult, aal2PVCActionResult=aal2PVCActionResult, atmSvcProfileIsUsed=atmSvcProfileIsUsed, atmSvcConnectionAALType=atmSvcConnectionAALType, atmPortOperationalAddress=atmPortOperationalAddress, atmPortLoopbackConfigInBoundVirtualPath=atmPortLoopbackConfigInBoundVirtualPath, atmSvcProfileMaxNumOfCids=atmSvcProfileMaxNumOfCids, atmPort=atmPort, atmPortLoopbackConfigAction=atmPortLoopbackConfigAction, atmPortLoopbackConfigMBS=atmPortLoopbackConfigMBS, atmSvcConnectionPort=atmSvcConnectionPort, atmPortLoopbackConfigVciRangeFirst=atmPortLoopbackConfigVciRangeFirst, atmPortLoopbackConfigSCR=atmPortLoopbackConfigSCR, aal2PVCNumOfCidInUse=aal2PVCNumOfCidInUse, atmPortLoopbackConfigActionResult=atmPortLoopbackConfigActionResult, acProducts=acProducts, atmPortLoopbackConfigServiceCategory=atmPortLoopbackConfigServiceCategory, aal2PVCVpi=aal2PVCVpi, atmPortLoopbackConfigPCR=atmPortLoopbackConfigPCR, atmSvcConnection=atmSvcConnection, atmSvcProfileMBS=atmSvcProfileMBS, aal2PVCServiceCategory=aal2PVCServiceCategory, atmSvcConnectionTable=atmSvcConnectionTable, atmPortTable=atmPortTable, acRegistrations=acRegistrations, atmSvcConnectionMaxNumOfCid=atmSvcConnectionMaxNumOfCid, atmPortEntry=atmPortEntry, atmRemoteGatewayAction=atmRemoteGatewayAction, PYSNMP_MODULE_ID=acAtm, acAtmConfiguration=acAtmConfiguration, aal2PVCTable=aal2PVCTable, atmRemoteGatewayNSAPAddress=atmRemoteGatewayNSAPAddress, aal2PVCMaxNumOfCid=aal2PVCMaxNumOfCid, atmRemoteGatewayTable=atmRemoteGatewayTable, atmPortLoopbackConfigEntry=atmPortLoopbackConfigEntry, atmSvcProfile=atmSvcProfile, atmGeneralParamsAtmTransmissionMode=atmGeneralParamsAtmTransmissionMode, aal2PVCMBS=aal2PVCMBS, aal2PVCAction=aal2PVCAction, atmRemoteGatewayEntry=atmRemoteGatewayEntry, atmSvcConnectionNumOfCidInUse=atmSvcConnectionNumOfCidInUse, acBoardMibs=acBoardMibs, aal2PVCPortNumber=aal2PVCPortNumber, atmSvcConnectionVpi=atmSvcConnectionVpi, acGeneric=acGeneric, atmGeneralParams=atmGeneralParams, atmSvcProfileTable=atmSvcProfileTable, atmPortOperationalState=atmPortOperationalState)
