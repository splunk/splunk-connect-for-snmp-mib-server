#
# PySNMP MIB module ST2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ST2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, ModuleIdentity, MibIdentifier, IpAddress, Counter64, Bits, Counter32, iso, Integer32, NotificationType, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "IpAddress", "Counter64", "Bits", "Counter32", "iso", "Integer32", "NotificationType", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSt2Group, = mibBuilder.importSymbols("Wellfleet-ST2-MIB", "wfSt2Group")
stii = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5))
st2AgentCopyright = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2AgentCopyright.setStatus('mandatory')
st2ProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ProtoVersion.setStatus('mandatory')
st2FlowSpecVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2FlowSpecVersion.setStatus('mandatory')
st2AgentType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("intermediateSystem", 2), ("endSystem", 3), ("intermediateAndEndSystem", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2AgentType.setStatus('mandatory')
st2RoutingDerived = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fixed", 2), ("regularIP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2RoutingDerived.setStatus('mandatory')
st2ToAccept = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToAccept.setStatus('mandatory')
st2NAccept = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NAccept.setStatus('mandatory')
st2ToConnect = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToConnect.setStatus('mandatory')
st2NConnect = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NConnect.setStatus('mandatory')
st2ToDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToDisconnect.setStatus('mandatory')
st2NDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NDisconnect.setStatus('mandatory')
st2ToHidAck = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToHidAck.setStatus('mandatory')
st2NHidAck = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NHidAck.setStatus('mandatory')
st2ToHidChange = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToHidChange.setStatus('mandatory')
st2NHidChange = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NHidChange.setStatus('mandatory')
st2ToNotify = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 16), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToNotify.setStatus('mandatory')
st2NNotify = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NNotify.setStatus('mandatory')
st2ToRefuse = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 18), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToRefuse.setStatus('mandatory')
st2NRefuse = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NRefuse.setStatus('mandatory')
st2ToReroute = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 20), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToReroute.setStatus('mandatory')
st2NReroute = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NReroute.setStatus('mandatory')
st2ToEnd2End = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 22), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2ToEnd2End.setStatus('mandatory')
st2NEnd2End = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NEnd2End.setStatus('mandatory')
st2NHidAbort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2NHidAbort.setStatus('mandatory')
st2HelloTimerHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 25), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2HelloTimerHoldDown.setStatus('mandatory')
st2HelloLossFactor = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2HelloLossFactor.setStatus('mandatory')
st2DefaultRecoveryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 27), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2DefaultRecoveryTimeout.setStatus('mandatory')
st2DefaultHelloFactor = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2DefaultHelloFactor.setStatus('mandatory')
st2ScmpRcvdOctets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdOctets.setStatus('mandatory')
st2ScmpSentOctets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentOctets.setStatus('mandatory')
st2ScmpRcvdBadTypes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdBadTypes.setStatus('mandatory')
st2ScmpRcvdBadCks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdBadCks.setStatus('mandatory')
st2ScmpSentAccepts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentAccepts.setStatus('mandatory')
st2ScmpSentAcks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentAcks.setStatus('mandatory')
st2ScmpSentChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentChanges.setStatus('mandatory')
st2ScmpSentChangeReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentChangeReqs.setStatus('mandatory')
st2ScmpSentConnects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentConnects.setStatus('mandatory')
st2ScmpSentDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentDisconnects.setStatus('mandatory')
st2ScmpSentErrorInReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentErrorInReqs.setStatus('mandatory')
st2ScmpSentErrorInResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentErrorInResps.setStatus('mandatory')
st2ScmpSentHellos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentHellos.setStatus('mandatory')
st2ScmpSentHidApproves = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentHidApproves.setStatus('mandatory')
st2ScmpSentHidChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentHidChanges.setStatus('mandatory')
st2ScmpSentHidChangeReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentHidChangeReqs.setStatus('mandatory')
st2ScmpSentHidRejects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentHidRejects.setStatus('mandatory')
st2ScmpSentNotifys = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentNotifys.setStatus('mandatory')
st2ScmpSentRefuses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentRefuses.setStatus('mandatory')
st2ScmpSentStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentStatus.setStatus('mandatory')
st2ScmpSentStatusResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpSentStatusResps.setStatus('mandatory')
st2ScmpRcvdAccepts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdAccepts.setStatus('mandatory')
st2ScmpRcvdAcks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdAcks.setStatus('mandatory')
st2ScmpRcvdChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdChanges.setStatus('mandatory')
st2ScmpRcvdChangeReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdChangeReqs.setStatus('mandatory')
st2ScmpRcvdConnects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdConnects.setStatus('mandatory')
st2ScmpRcvdDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdDisconnects.setStatus('mandatory')
st2ScmpRcvdErrorInReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdErrorInReqs.setStatus('mandatory')
st2ScmpRcvdErrorInResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdErrorInResps.setStatus('mandatory')
st2ScmpRcvdHellos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdHellos.setStatus('mandatory')
st2ScmpRcvdHidApproves = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdHidApproves.setStatus('mandatory')
st2ScmpRcvdHidChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdHidChanges.setStatus('mandatory')
st2ScmpRcvdHidChangeReqs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdHidChangeReqs.setStatus('mandatory')
st2ScmpRcvdHidRejects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdHidRejects.setStatus('mandatory')
st2ScmpRcvdNotifys = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdNotifys.setStatus('mandatory')
st2ScmpRcvdRefuses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdRefuses.setStatus('mandatory')
st2ScmpRcvdStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdStatus.setStatus('mandatory')
st2ScmpRcvdStatusResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdStatusResps.setStatus('mandatory')
st2ScmpRcvdErrorSnap = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdErrorSnap.setStatus('mandatory')
st2ScmpRcvdBadTypeTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 68), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdBadTypeTime.setStatus('mandatory')
st2ScmpRcvdBadCksTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 69), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRcvdBadCksTime.setStatus('mandatory')
st2OriginOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2OriginOpens.setStatus('mandatory')
st2IntermedOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2IntermedOpens.setStatus('mandatory')
st2TargetOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2TargetOpens.setStatus('mandatory')
st2FailOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2FailOpens.setStatus('mandatory')
st2AcceptTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2AcceptTimeouts.setStatus('mandatory')
st2ParamChangeFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ParamChangeFails.setStatus('mandatory')
st2NumStreamEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumStreamEntries.setStatus('mandatory')
st2NumOpenStreams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumOpenStreams.setStatus('mandatory')
st2NumOpenOriginStreams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumOpenOriginStreams.setStatus('mandatory')
st2NumHops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumHops.setStatus('mandatory')
st2NumNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumNeighbors.setStatus('mandatory')
st2NumTargets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumTargets.setStatus('mandatory')
st2NumGroups = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumGroups.setStatus('mandatory')
st2NumSubgroups = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NumSubgroups.setStatus('mandatory')
st2RouteFailures = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2RouteFailures.setStatus('mandatory')
st2RouteLoops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2RouteLoops.setStatus('mandatory')
st2ScmpRetrans = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2ScmpRetrans.setStatus('mandatory')
st2StreamTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87), )
if mibBuilder.loadTexts: st2StreamTable.setStatus('mandatory')
st2StreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1), ).setIndexNames((0, "ST2-MIB", "st2StreamName"), (0, "ST2-MIB", "st2StreamPrevHopAddr"), (0, "ST2-MIB", "st2StreamPrevHopVlid"))
if mibBuilder.loadTexts: st2StreamEntry.setStatus('mandatory')
st2StreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamName.setStatus('mandatory')
st2StreamPrevHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamPrevHopAddr.setStatus('mandatory')
st2StreamPrevHopVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamPrevHopVlid.setStatus('mandatory')
st2StreamStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamStartTime.setStatus('mandatory')
st2StreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("hidNotOk", 3), ("acceptable", 4), ("active", 5), ("activeReduced", 6), ("passive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamState.setStatus('mandatory')
st2StreamStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamStateTime.setStatus('mandatory')
st2StreamRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("origin", 2), ("target", 3), ("intermediate", 4), ("intermediateAndTarget", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamRole.setStatus('mandatory')
st2StreamGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamGroup.setStatus('mandatory')
st2StreamNumSubgroups = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamNumSubgroups.setStatus('mandatory')
st2StreamNumNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamNumNextHops.setStatus('mandatory')
st2StreamNumTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamNumTargets.setStatus('mandatory')
st2StreamRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamRefuses.setStatus('mandatory')
st2StreamFlowspecChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowspecChanges.setStatus('mandatory')
st2StreamFlowPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowPrecedence.setStatus('mandatory')
st2StreamFlowDutyFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowDutyFactor.setStatus('mandatory')
st2StreamFlowErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowErrorRate.setStatus('mandatory')
st2StreamFlowReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowReliability.setStatus('mandatory')
st2StreamFlowTradeoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowTradeoffs.setStatus('mandatory')
st2StreamFlowRecoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowRecoveryTimeout.setStatus('mandatory')
st2StreamFlowLimitOnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowLimitOnCost.setStatus('mandatory')
st2StreamFlowLimitOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowLimitOnDelay.setStatus('mandatory')
st2StreamFlowLimitOnPduBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowLimitOnPduBytes.setStatus('mandatory')
st2StreamFlowLimitOnPduRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowLimitOnPduRate.setStatus('mandatory')
st2StreamFlowMinBytesXRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowMinBytesXRate.setStatus('mandatory')
st2StreamFlowMeanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowMeanDelay.setStatus('mandatory')
st2StreamFlowDelayVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowDelayVariance.setStatus('mandatory')
st2StreamFlowDesPduBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowDesPduBytes.setStatus('mandatory')
st2StreamFlowDesPduRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamFlowDesPduRate.setStatus('mandatory')
st2StreamOptionPtp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamOptionPtp.setStatus('mandatory')
st2StreamOptionFdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamOptionFdx.setStatus('mandatory')
st2StreamOptionRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamOptionRecover.setStatus('mandatory')
st2StreamOptionReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamOptionReverseCharge.setStatus('mandatory')
st2StreamOptionTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 87, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2StreamOptionTimestamp.setStatus('mandatory')
st2HopTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88), )
if mibBuilder.loadTexts: st2HopTable.setStatus('mandatory')
st2HopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1), ).setIndexNames((0, "ST2-MIB", "st2StreamName"), (0, "ST2-MIB", "st2StreamPrevHopAddr"), (0, "ST2-MIB", "st2StreamPrevHopVlid"), (0, "ST2-MIB", "st2HopNeighborAddr"))
if mibBuilder.loadTexts: st2HopEntry.setStatus('mandatory')
st2HopHid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopHid.setStatus('mandatory')
st2HopMyVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopMyVlid.setStatus('mandatory')
st2HopYourVlid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopYourVlid.setStatus('mandatory')
st2HopState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("open", 2), ("negotiating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopState.setStatus('mandatory')
st2HopStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopStateTime.setStatus('mandatory')
st2HopNumTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopNumTargets.setStatus('mandatory')
st2HopMcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopMcastAddr.setStatus('mandatory')
st2HopErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopErrorCode.setStatus('mandatory')
st2HopDetectorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopDetectorAddr.setStatus('mandatory')
st2HopNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopNeighborAddr.setStatus('mandatory')
st2HopStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopStreamName.setStatus('mandatory')
st2HopPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopPkts.setStatus('mandatory')
st2HopOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopOctets.setStatus('mandatory')
st2HopDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopDiscards.setStatus('mandatory')
st2HopIpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopIpEncap.setStatus('mandatory')
st2HopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopIpAddr.setStatus('mandatory')
st2HopRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nexthop", 1), ("prevhop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopRole.setStatus('mandatory')
st2HopInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopInterfaceIndex.setStatus('mandatory')
st2HopErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 88, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2HopErrorTime.setStatus('mandatory')
st2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89), )
if mibBuilder.loadTexts: st2NeighborTable.setStatus('mandatory')
st2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1), ).setIndexNames((0, "ST2-MIB", "st2NeighborAddr"))
if mibBuilder.loadTexts: st2NeighborEntry.setStatus('mandatory')
st2NeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborAddr.setStatus('mandatory')
st2NeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborState.setStatus('mandatory')
st2NeighborStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborStateTime.setStatus('mandatory')
st2NeighborNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborNumHops.setStatus('mandatory')
st2NeighborHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborHelloTimer.setStatus('mandatory')
st2NeighborHelloRcvdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborHelloRcvdTime.setStatus('mandatory')
st2NeighborDataRcvdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborDataRcvdTime.setStatus('mandatory')
st2NeighborAckRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborAckRequested.setStatus('mandatory')
st2NeighborRestarted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborRestarted.setStatus('mandatory')
st2NeighborSentHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborSentHellos.setStatus('mandatory')
st2NeighborRcvdHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborRcvdHellos.setStatus('mandatory')
st2NeighborMissedHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborMissedHellos.setStatus('mandatory')
st2NeighborRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborRoundTripTime.setStatus('mandatory')
st2NeighborInterfaceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborInterfaceIdx.setStatus('mandatory')
st2NeighborStBadMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborStBadMsgs.setStatus('mandatory')
st2NeighborScmpBadMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 89, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2NeighborScmpBadMsgs.setStatus('mandatory')
st2TargetTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 90), )
if mibBuilder.loadTexts: st2TargetTable.setStatus('mandatory')
st2TargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 90, 1), ).setIndexNames((0, "ST2-MIB", "st2StreamName"), (0, "ST2-MIB", "st2TargetAddr"))
if mibBuilder.loadTexts: st2TargetEntry.setStatus('mandatory')
st2TargetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 90, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2TargetAddr.setStatus('mandatory')
st2TargetHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 90, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2TargetHop.setStatus('mandatory')
st2TargetStreamName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 90, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2TargetStreamName.setStatus('mandatory')
st2GroupTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91), )
if mibBuilder.loadTexts: st2GroupTable.setStatus('mandatory')
st2GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91, 1), ).setIndexNames((0, "ST2-MIB", "st2GroupName"))
if mibBuilder.loadTexts: st2GroupEntry.setStatus('mandatory')
st2GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2GroupName.setStatus('mandatory')
st2GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2GroupId.setStatus('mandatory')
st2GroupNumStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2GroupNumStreams.setStatus('mandatory')
st2GroupNumSubgroups = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 91, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2GroupNumSubgroups.setStatus('mandatory')
st2SubgroupTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 92), )
if mibBuilder.loadTexts: st2SubgroupTable.setStatus('mandatory')
st2SubgroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 92, 1), ).setIndexNames((0, "ST2-MIB", "st2SubgroupIndex"))
if mibBuilder.loadTexts: st2SubgroupEntry.setStatus('mandatory')
st2SubgroupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 92, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2SubgroupGroup.setStatus('mandatory')
st2SubgroupNumStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 92, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2SubgroupNumStreams.setStatus('mandatory')
st2SubgroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 92, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2SubgroupIndex.setStatus('mandatory')
st2InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93), )
if mibBuilder.loadTexts: st2InterfaceTable.setStatus('mandatory')
st2InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1), ).setIndexNames((0, "ST2-MIB", "st2InterfaceIndex"))
if mibBuilder.loadTexts: st2InterfaceEntry.setStatus('mandatory')
st2InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceIndex.setStatus('mandatory')
st2InterfaceNumInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceNumInStreams.setStatus('mandatory')
st2InterfaceNumOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceNumOutStreams.setStatus('mandatory')
st2InterfaceNumNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceNumNeighbors.setStatus('mandatory')
st2InterfaceInBwReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceInBwReserved.setStatus('mandatory')
st2InterfaceInBwReservable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2InterfaceInBwReservable.setStatus('mandatory')
st2InterfaceOutBwReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceOutBwReserved.setStatus('mandatory')
st2InterfaceOutBwReservable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: st2InterfaceOutBwReservable.setStatus('mandatory')
st2InterfaceTotRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceTotRcvdPkts.setStatus('mandatory')
st2InterfaceTotSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceTotSentPkts.setStatus('mandatory')
st2InterfaceTotRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceTotRcvdOctets.setStatus('mandatory')
st2InterfaceTotSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceTotSentOctets.setStatus('mandatory')
st2InterfaceRcvdHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdHdrErrors.setStatus('mandatory')
st2InterfaceRcvdHidErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdHidErrors.setStatus('mandatory')
st2InterfaceRcvdLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdLenErrors.setStatus('mandatory')
st2InterfaceRcvdHdrErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdHdrErrorTime.setStatus('mandatory')
st2InterfaceRcvdHidErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdHidErrorTime.setStatus('mandatory')
st2InterfaceRcvdLenErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdLenErrorTime.setStatus('mandatory')
st2InterfaceRcvdErrorSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdErrorSnap.setStatus('mandatory')
st2InterfaceRcvdPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceRcvdPktDrops.setStatus('mandatory')
st2InterfaceSentPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceSentPktDrops.setStatus('mandatory')
st2InterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 93, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2InterfaceIpAddr.setStatus('mandatory')
st2LastCloseStreamName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 94), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2LastCloseStreamName.setStatus('mandatory')
st2LastClosePrevHopIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 95), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2LastClosePrevHopIpAddr.setStatus('mandatory')
st2LastCloseReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2LastCloseReasonCode.setStatus('mandatory')
st2LastCloseDetectorIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 97), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2LastCloseDetectorIpAddress.setStatus('mandatory')
st2LastCloseTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 2, 5, 98), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st2LastCloseTime.setStatus('mandatory')
mibBuilder.exportSymbols("ST2-MIB", st2ScmpRcvdErrorSnap=st2ScmpRcvdErrorSnap, st2InterfaceOutBwReserved=st2InterfaceOutBwReserved, st2ScmpSentOctets=st2ScmpSentOctets, st2NumOpenStreams=st2NumOpenStreams, st2ScmpSentErrorInReqs=st2ScmpSentErrorInReqs, st2InterfaceNumNeighbors=st2InterfaceNumNeighbors, st2StreamFlowTradeoffs=st2StreamFlowTradeoffs, st2LastClosePrevHopIpAddr=st2LastClosePrevHopIpAddr, st2GroupNumStreams=st2GroupNumStreams, st2ScmpSentHidApproves=st2ScmpSentHidApproves, st2NeighborAddr=st2NeighborAddr, st2GroupName=st2GroupName, st2ScmpRetrans=st2ScmpRetrans, st2StreamOptionReverseCharge=st2StreamOptionReverseCharge, st2StreamEntry=st2StreamEntry, st2ScmpSentRefuses=st2ScmpSentRefuses, st2SubgroupEntry=st2SubgroupEntry, st2InterfaceRcvdHidErrors=st2InterfaceRcvdHidErrors, st2FlowSpecVersion=st2FlowSpecVersion, st2InterfaceTable=st2InterfaceTable, st2HopMcastAddr=st2HopMcastAddr, st2InterfaceRcvdPktDrops=st2InterfaceRcvdPktDrops, st2ScmpSentChangeReqs=st2ScmpSentChangeReqs, st2StreamPrevHopAddr=st2StreamPrevHopAddr, st2ScmpSentAccepts=st2ScmpSentAccepts, st2InterfaceNumOutStreams=st2InterfaceNumOutStreams, st2RouteLoops=st2RouteLoops, st2NDisconnect=st2NDisconnect, st2GroupEntry=st2GroupEntry, st2SubgroupNumStreams=st2SubgroupNumStreams, st2LastCloseStreamName=st2LastCloseStreamName, st2StreamPrevHopVlid=st2StreamPrevHopVlid, st2ToAccept=st2ToAccept, st2NeighborNumHops=st2NeighborNumHops, st2HopErrorCode=st2HopErrorCode, st2SubgroupGroup=st2SubgroupGroup, st2NeighborDataRcvdTime=st2NeighborDataRcvdTime, st2HopRole=st2HopRole, st2ToDisconnect=st2ToDisconnect, st2StreamRefuses=st2StreamRefuses, st2ScmpSentConnects=st2ScmpSentConnects, st2NeighborInterfaceIdx=st2NeighborInterfaceIdx, st2NumSubgroups=st2NumSubgroups, st2InterfaceNumInStreams=st2InterfaceNumInStreams, st2InterfaceTotRcvdOctets=st2InterfaceTotRcvdOctets, st2TargetTable=st2TargetTable, st2ScmpRcvdAcks=st2ScmpRcvdAcks, st2IntermedOpens=st2IntermedOpens, st2NeighborHelloRcvdTime=st2NeighborHelloRcvdTime, st2TargetEntry=st2TargetEntry, st2LastCloseDetectorIpAddress=st2LastCloseDetectorIpAddress, st2InterfaceIpAddr=st2InterfaceIpAddr, st2ScmpRcvdBadCks=st2ScmpRcvdBadCks, st2HopIpAddr=st2HopIpAddr, st2NNotify=st2NNotify, st2HopStreamName=st2HopStreamName, st2HopNumTargets=st2HopNumTargets, st2InterfaceTotRcvdPkts=st2InterfaceTotRcvdPkts, st2NeighborMissedHellos=st2NeighborMissedHellos, st2InterfaceIndex=st2InterfaceIndex, st2NEnd2End=st2NEnd2End, st2ScmpRcvdErrorInResps=st2ScmpRcvdErrorInResps, st2HopPkts=st2HopPkts, st2ScmpRcvdAccepts=st2ScmpRcvdAccepts, st2StreamGroup=st2StreamGroup, st2SubgroupTable=st2SubgroupTable, st2ScmpRcvdHidRejects=st2ScmpRcvdHidRejects, st2StreamName=st2StreamName, st2InterfaceRcvdHidErrorTime=st2InterfaceRcvdHidErrorTime, st2HopEntry=st2HopEntry, st2StreamFlowDelayVariance=st2StreamFlowDelayVariance, st2StreamFlowPrecedence=st2StreamFlowPrecedence, st2AcceptTimeouts=st2AcceptTimeouts, st2ScmpSentStatusResps=st2ScmpSentStatusResps, st2ScmpRcvdBadCksTime=st2ScmpRcvdBadCksTime, st2StreamOptionTimestamp=st2StreamOptionTimestamp, st2NeighborAckRequested=st2NeighborAckRequested, st2StreamNumTargets=st2StreamNumTargets, st2StreamFlowLimitOnPduBytes=st2StreamFlowLimitOnPduBytes, st2StreamFlowMeanDelay=st2StreamFlowMeanDelay, st2StreamStartTime=st2StreamStartTime, st2ScmpRcvdHidChanges=st2ScmpRcvdHidChanges, st2ScmpRcvdBadTypeTime=st2ScmpRcvdBadTypeTime, st2StreamFlowspecChanges=st2StreamFlowspecChanges, st2NReroute=st2NReroute, st2InterfaceRcvdLenErrorTime=st2InterfaceRcvdLenErrorTime, st2HopTable=st2HopTable, st2NeighborRestarted=st2NeighborRestarted, st2InterfaceRcvdHdrErrors=st2InterfaceRcvdHdrErrors, st2DefaultRecoveryTimeout=st2DefaultRecoveryTimeout, st2StreamOptionFdx=st2StreamOptionFdx, st2StreamFlowMinBytesXRate=st2StreamFlowMinBytesXRate, st2ScmpRcvdHidChangeReqs=st2ScmpRcvdHidChangeReqs, st2StreamRole=st2StreamRole, st2NumTargets=st2NumTargets, st2InterfaceTotSentPkts=st2InterfaceTotSentPkts, st2ScmpRcvdChangeReqs=st2ScmpRcvdChangeReqs, st2ScmpRcvdNotifys=st2ScmpRcvdNotifys, st2StreamNumNextHops=st2StreamNumNextHops, st2ScmpRcvdStatus=st2ScmpRcvdStatus, st2InterfaceInBwReservable=st2InterfaceInBwReservable, st2TargetOpens=st2TargetOpens, st2StreamStateTime=st2StreamStateTime, st2InterfaceRcvdErrorSnap=st2InterfaceRcvdErrorSnap, st2ScmpRcvdOctets=st2ScmpRcvdOctets, st2ScmpRcvdHidApproves=st2ScmpRcvdHidApproves, st2RoutingDerived=st2RoutingDerived, st2StreamFlowLimitOnDelay=st2StreamFlowLimitOnDelay, st2ScmpSentHidRejects=st2ScmpSentHidRejects, st2NeighborTable=st2NeighborTable, st2InterfaceTotSentOctets=st2InterfaceTotSentOctets, st2ScmpRcvdErrorInReqs=st2ScmpRcvdErrorInReqs, st2InterfaceSentPktDrops=st2InterfaceSentPktDrops, st2ScmpSentHellos=st2ScmpSentHellos, st2HopState=st2HopState, st2NeighborRoundTripTime=st2NeighborRoundTripTime, st2ScmpRcvdChanges=st2ScmpRcvdChanges, st2SubgroupIndex=st2SubgroupIndex, st2ToNotify=st2ToNotify, st2AgentType=st2AgentType, st2HopYourVlid=st2HopYourVlid, st2NeighborEntry=st2NeighborEntry, st2StreamTable=st2StreamTable, st2HopDiscards=st2HopDiscards, st2InterfaceRcvdHdrErrorTime=st2InterfaceRcvdHdrErrorTime, st2AgentCopyright=st2AgentCopyright, st2StreamFlowLimitOnPduRate=st2StreamFlowLimitOnPduRate, st2NeighborStateTime=st2NeighborStateTime, st2NeighborStBadMsgs=st2NeighborStBadMsgs, st2NeighborState=st2NeighborState, st2ScmpRcvdStatusResps=st2ScmpRcvdStatusResps, st2HopHid=st2HopHid, st2HopOctets=st2HopOctets, st2ScmpRcvdBadTypes=st2ScmpRcvdBadTypes, st2NRefuse=st2NRefuse, st2StreamFlowDesPduBytes=st2StreamFlowDesPduBytes, st2HelloTimerHoldDown=st2HelloTimerHoldDown, st2NumStreamEntries=st2NumStreamEntries, st2StreamFlowDutyFactor=st2StreamFlowDutyFactor, st2TargetHop=st2TargetHop, st2DefaultHelloFactor=st2DefaultHelloFactor, st2LastCloseReasonCode=st2LastCloseReasonCode, st2HopStateTime=st2HopStateTime, stii=stii, st2InterfaceInBwReserved=st2InterfaceInBwReserved, st2ScmpSentStatus=st2ScmpSentStatus, st2ScmpSentDisconnects=st2ScmpSentDisconnects, st2ScmpRcvdRefuses=st2ScmpRcvdRefuses, st2NumOpenOriginStreams=st2NumOpenOriginStreams, st2HopNeighborAddr=st2HopNeighborAddr, st2StreamFlowLimitOnCost=st2StreamFlowLimitOnCost, st2StreamFlowRecoveryTimeout=st2StreamFlowRecoveryTimeout, st2NumNeighbors=st2NumNeighbors, st2ScmpSentHidChangeReqs=st2ScmpSentHidChangeReqs, st2ProtoVersion=st2ProtoVersion, st2StreamFlowDesPduRate=st2StreamFlowDesPduRate, st2GroupNumSubgroups=st2GroupNumSubgroups, st2TargetStreamName=st2TargetStreamName, st2FailOpens=st2FailOpens, st2InterfaceEntry=st2InterfaceEntry, st2HopInterfaceIndex=st2HopInterfaceIndex, st2ScmpRcvdConnects=st2ScmpRcvdConnects, st2StreamOptionRecover=st2StreamOptionRecover, st2StreamOptionPtp=st2StreamOptionPtp, st2ScmpRcvdDisconnects=st2ScmpRcvdDisconnects, st2RouteFailures=st2RouteFailures, st2InterfaceOutBwReservable=st2InterfaceOutBwReservable, st2InterfaceRcvdLenErrors=st2InterfaceRcvdLenErrors, st2LastCloseTime=st2LastCloseTime, st2NumGroups=st2NumGroups, st2NHidAbort=st2NHidAbort, st2StreamFlowErrorRate=st2StreamFlowErrorRate, st2HopIpEncap=st2HopIpEncap, st2ToRefuse=st2ToRefuse, st2TargetAddr=st2TargetAddr, st2NHidAck=st2NHidAck, st2ScmpSentHidChanges=st2ScmpSentHidChanges, st2NHidChange=st2NHidChange, st2NConnect=st2NConnect, st2ScmpSentNotifys=st2ScmpSentNotifys, st2StreamNumSubgroups=st2StreamNumSubgroups, st2StreamFlowReliability=st2StreamFlowReliability, st2GroupTable=st2GroupTable, st2NeighborRcvdHellos=st2NeighborRcvdHellos, st2HelloLossFactor=st2HelloLossFactor, st2ScmpSentErrorInResps=st2ScmpSentErrorInResps, st2StreamState=st2StreamState, st2NeighborScmpBadMsgs=st2NeighborScmpBadMsgs, st2NeighborHelloTimer=st2NeighborHelloTimer, st2NeighborSentHellos=st2NeighborSentHellos, st2NAccept=st2NAccept, st2ParamChangeFails=st2ParamChangeFails, st2ToHidChange=st2ToHidChange, st2ToReroute=st2ToReroute, st2ScmpSentChanges=st2ScmpSentChanges, st2ScmpSentAcks=st2ScmpSentAcks, st2NumHops=st2NumHops, st2HopDetectorAddr=st2HopDetectorAddr, st2OriginOpens=st2OriginOpens, st2ToHidAck=st2ToHidAck, st2ToConnect=st2ToConnect, st2HopMyVlid=st2HopMyVlid, st2HopErrorTime=st2HopErrorTime, st2ToEnd2End=st2ToEnd2End, st2GroupId=st2GroupId, st2ScmpRcvdHellos=st2ScmpRcvdHellos)
