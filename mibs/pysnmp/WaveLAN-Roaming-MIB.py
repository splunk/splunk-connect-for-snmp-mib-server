#
# PySNMP MIB module WaveLAN-Roaming-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WaveLAN-Roaming-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ModuleIdentity, Counter32, Integer32, ObjectIdentity, MibIdentifier, Bits, enterprises, iso, Counter64, IpAddress, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter32", "Integer32", "ObjectIdentity", "MibIdentifier", "Bits", "enterprises", "iso", "Counter64", "IpAddress", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
att_mgmt, wavelan, att_2 = mibBuilder.importSymbols("WaveLAN-MIB", "att-mgmt", "wavelan", "att-2")
wavelanRoaming = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 21, 3))
class Timeout(Integer32):
    pass

wlrGenTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1), )
if mibBuilder.loadTexts: wlrGenTable.setStatus('mandatory')
wlrGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrGenIndex"))
if mibBuilder.loadTexts: wlrGenEntry.setStatus('mandatory')
wlrGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrGenIndex.setStatus('mandatory')
wlrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrDomainId.setStatus('mandatory')
wlrBeaconKey = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconKey.setStatus('mandatory')
wlrMsTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2), )
if mibBuilder.loadTexts: wlrMsTable.setStatus('mandatory')
wlrMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrMsIndex"))
if mibBuilder.loadTexts: wlrMsEntry.setStatus('mandatory')
wlrMsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsIndex.setStatus('mandatory')
wlrRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrRetryLimit.setStatus('mandatory')
wlrNumberOfRecovers = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrNumberOfRecovers.setStatus('mandatory')
wlrCommsQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrCommsQuality.setStatus('mandatory')
wlrCurrentApName = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrCurrentApName.setStatus('mandatory')
wlrMsSignOnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsSignOnFailures.setStatus('mandatory')
wlrMsHandovers = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsHandovers.setStatus('mandatory')
wlrMsHandoverFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsHandoverFailures.setStatus('mandatory')
wlrMsBeaconsMissedNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsBeaconsMissedNormal.setStatus('mandatory')
wlrMsBeaconsMissedSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsBeaconsMissedSearch.setStatus('mandatory')
wlrMsRegularCellSearchEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsRegularCellSearchEntered.setStatus('mandatory')
wlrMsFastCellSearchEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsFastCellSearchEntered.setStatus('mandatory')
wlrMsTimeInNormalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInNormalMode.setStatus('mandatory')
wlrMsTimeInRegularSearchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInRegularSearchMode.setStatus('mandatory')
wlrMsTimeInFastSearchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInFastSearchMode.setStatus('mandatory')
wlrApTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3), )
if mibBuilder.loadTexts: wlrApTable.setStatus('mandatory')
wlrApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrApIndex"))
if mibBuilder.loadTexts: wlrApEntry.setStatus('mandatory')
wlrApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApIndex.setStatus('mandatory')
wlrStopCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrStopCellSearchThreshold.setStatus('mandatory')
wlrRegularCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrRegularCellSearchThreshold.setStatus('mandatory')
wlrFastCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrFastCellSearchThreshold.setStatus('mandatory')
wlrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconInterval.setStatus('mandatory')
wlrBeaconTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 6), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconTimeout.setStatus('mandatory')
wlrApSignOnRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApSignOnRequests.setStatus('mandatory')
wlrApHandoversSent = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApHandoversSent.setStatus('mandatory')
wlrApHandoversReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApHandoversReceived.setStatus('mandatory')
mibBuilder.exportSymbols("WaveLAN-Roaming-MIB", wlrMsTimeInRegularSearchMode=wlrMsTimeInRegularSearchMode, wlrMsSignOnFailures=wlrMsSignOnFailures, wlrMsBeaconsMissedSearch=wlrMsBeaconsMissedSearch, wlrBeaconKey=wlrBeaconKey, wlrRetryLimit=wlrRetryLimit, wlrApHandoversReceived=wlrApHandoversReceived, wlrGenIndex=wlrGenIndex, wlrMsHandoverFailures=wlrMsHandoverFailures, wlrNumberOfRecovers=wlrNumberOfRecovers, wlrApIndex=wlrApIndex, wlrMsTimeInNormalMode=wlrMsTimeInNormalMode, Timeout=Timeout, wlrMsBeaconsMissedNormal=wlrMsBeaconsMissedNormal, wlrMsIndex=wlrMsIndex, wlrMsTable=wlrMsTable, wlrRegularCellSearchThreshold=wlrRegularCellSearchThreshold, wlrMsFastCellSearchEntered=wlrMsFastCellSearchEntered, wlrCommsQuality=wlrCommsQuality, wlrFastCellSearchThreshold=wlrFastCellSearchThreshold, wlrGenEntry=wlrGenEntry, wlrCurrentApName=wlrCurrentApName, wlrDomainId=wlrDomainId, wlrBeaconTimeout=wlrBeaconTimeout, wlrApTable=wlrApTable, wlrApSignOnRequests=wlrApSignOnRequests, wlrStopCellSearchThreshold=wlrStopCellSearchThreshold, wlrMsRegularCellSearchEntered=wlrMsRegularCellSearchEntered, wlrApHandoversSent=wlrApHandoversSent, wlrMsHandovers=wlrMsHandovers, wlrMsEntry=wlrMsEntry, wavelanRoaming=wavelanRoaming, wlrApEntry=wlrApEntry, wlrGenTable=wlrGenTable, wlrMsTimeInFastSearchMode=wlrMsTimeInFastSearchMode, wlrBeaconInterval=wlrBeaconInterval)
