#
# PySNMP MIB module BIANCA-BRICK-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Counter64, ObjectIdentity, Gauge32, iso, TimeTicks, MibIdentifier, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Counter64", "ObjectIdentity", "Gauge32", "iso", "TimeTicks", "MibIdentifier", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ipExtIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 3), )
if mibBuilder.loadTexts: ipExtIfTable.setStatus('mandatory')
ipExtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipExtIfIndex"))
if mibBuilder.loadTexts: ipExtIfEntry.setStatus('mandatory')
ipExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIfIndex.setStatus('mandatory')
ipExtIfRipSend = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ripV1", 1), ("ripV2", 2), ("both", 3), ("none", 4), ("ripV2mcast", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfRipSend.setStatus('mandatory')
ipExtIfRipReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ripV1", 1), ("ripV2", 2), ("both", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfRipReceive.setStatus('mandatory')
ipExtIfProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("up-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfProxyArp.setStatus('mandatory')
ipExtIfNat = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("reverse", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNat.setStatus('mandatory')
ipExtIfNatRmvFin = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNatRmvFin.setStatus('mandatory')
ipExtIfNatTcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNatTcpTimeout.setStatus('mandatory')
ipExtIfNatOtherTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNatOtherTimeout.setStatus('mandatory')
ipExtIfNatOutXlat = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNatOutXlat.setStatus('mandatory')
ipExtIfAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAccounting.setStatus('mandatory')
ipExtIfTcpSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfTcpSpoofing.setStatus('mandatory')
ipExtIfAccessAction = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("refuse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAccessAction.setStatus('mandatory')
ipExtIfAccessReport = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("info", 2), ("dump", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAccessReport.setStatus('mandatory')
ipExtIfOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passive", 1), ("active", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfOspf.setStatus('mandatory')
ipExtIfOspfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2), ("auto-adjust", 3), ("fixed-adjust", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfOspfMetric.setStatus('mandatory')
ipExtIfTcpCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("check", 1), ("dont-check", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfTcpCksum.setStatus('mandatory')
ipExtIfBackRtVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfBackRtVerify.setStatus('mandatory')
ipExtIfRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfRuleIndex.setStatus('mandatory')
ipExtIfAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("securID", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAuthentication.setStatus('mandatory')
ipExtIfAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAuthMode.setStatus('mandatory')
ipExtIfAuthLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAuthLifeTime.setStatus('mandatory')
ipExtIfAuthKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfAuthKeepalive.setStatus('mandatory')
ipExtIfRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up-only", 1), ("up-dormant", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfRouteAnnounce.setStatus('mandatory')
ipExtIfIpFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("equal", 3), ("reverse", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfIpFragmentation.setStatus('mandatory')
ipExtIfRerouting = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfRerouting.setStatus('mandatory')
ipExtIfBodRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfBodRuleIndex.setStatus('mandatory')
ipExtIfQosRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfQosRuleIndex.setStatus('mandatory')
ipExtIfIpsecAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipsec", 1), ("clear", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfIpsecAccounting.setStatus('mandatory')
ipExtIfMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfMulticast.setStatus('mandatory')
ipExtIfNatSilentDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtIfNatSilentDeny.setStatus('mandatory')
ipExtRtTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 4), )
if mibBuilder.loadTexts: ipExtRtTable.setStatus('mandatory')
ipExtRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipExtRtProtocol"))
if mibBuilder.loadTexts: ipExtRtEntry.setStatus('mandatory')
ipExtRtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 8, 12, 17, 20, 22, 27, 46, 47, 50, 51, 88, 89, 115, 256))).clone(namedValues=NamedValues(("icmp", 1), ("ggp", 3), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("hmp", 20), ("xns-idp", 22), ("rdp", 27), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("igrp", 88), ("ospf", 89), ("l2tp", 115), ("dont-verify", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtProtocol.setStatus('mandatory')
ipExtRtSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtSrcIfIndex.setStatus('mandatory')
ipExtRtSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtSrcAddr.setStatus('mandatory')
ipExtRtSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtSrcMask.setStatus('mandatory')
ipExtRtSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtSrcPort.setStatus('mandatory')
ipExtRtSrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtSrcPortRange.setStatus('mandatory')
ipExtRtDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstAddr.setStatus('mandatory')
ipExtRtDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstMask.setStatus('mandatory')
ipExtRtDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstPort.setStatus('mandatory')
ipExtRtDstPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstPortRange.setStatus('mandatory')
ipExtRtTos = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtTos.setStatus('mandatory')
ipExtRtTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtTosMask.setStatus('mandatory')
ipExtRtDstIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dialup-wait", 1), ("dialup-continue", 2), ("up-only", 3), ("always", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstIfMode.setStatus('mandatory')
ipExtRtDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtDstIfIndex.setStatus('mandatory')
ipExtRtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtNextHop.setStatus('mandatory')
ipExtRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtType.setStatus('mandatory')
ipExtRtMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtMetric1.setStatus('mandatory')
ipExtRtMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtMetric2.setStatus('mandatory')
ipExtRtMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtMetric3.setStatus('mandatory')
ipExtRtMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtMetric4.setStatus('mandatory')
ipExtRtMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtMetric5.setStatus('mandatory')
ipExtRtProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtProto.setStatus('mandatory')
ipExtRtAge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 4, 1, 23), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipExtRtAge.setStatus('mandatory')
ipNatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 5), )
if mibBuilder.loadTexts: ipNatTable.setStatus('mandatory')
ipNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipNatIfIndex"), (0, "BIANCA-BRICK-IP-MIB", "ipNatProtocol"), (0, "BIANCA-BRICK-IP-MIB", "ipNatIntAddr"), (0, "BIANCA-BRICK-IP-MIB", "ipNatIntPort"))
if mibBuilder.loadTexts: ipNatEntry.setStatus('mandatory')
ipNatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatIfIndex.setStatus('mandatory')
ipNatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 47, 50, 51, 89, 115))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("l2tp", 115)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatProtocol.setStatus('mandatory')
ipNatIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatIntAddr.setStatus('mandatory')
ipNatIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatIntPort.setStatus('mandatory')
ipNatExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatExtAddr.setStatus('mandatory')
ipNatExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatExtPort.setStatus('mandatory')
ipNatRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatRemoteAddr.setStatus('mandatory')
ipNatRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatRemotePort.setStatus('mandatory')
ipNatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatDirection.setStatus('mandatory')
ipNatAge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 5, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatAge.setStatus('mandatory')
ipNatPresetTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 6), )
if mibBuilder.loadTexts: ipNatPresetTable.setStatus('mandatory')
ipNatPresetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipNatPrIfIndex"), (0, "BIANCA-BRICK-IP-MIB", "ipNatPrProtocol"), (0, "BIANCA-BRICK-IP-MIB", "ipNatPrExtPort"))
if mibBuilder.loadTexts: ipNatPresetEntry.setStatus('mandatory')
ipNatPrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrIfIndex.setStatus('mandatory')
ipNatPrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 47, 50, 51, 89, 94, 115, 256))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("ipinip", 94), ("l2tp", 115), ("delete", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrProtocol.setStatus('mandatory')
ipNatPrRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrRemoteAddr.setStatus('mandatory')
ipNatPrRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrRemoteMask.setStatus('mandatory')
ipNatPrExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrExtAddr.setStatus('mandatory')
ipNatPrExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrExtMask.setStatus('mandatory')
ipNatPrExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrExtPort.setStatus('mandatory')
ipNatPrExtPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrExtPortRange.setStatus('mandatory')
ipNatPrIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrIntAddr.setStatus('mandatory')
ipNatPrIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatPrIntPort.setStatus('mandatory')
ipSessionTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 7), )
if mibBuilder.loadTexts: ipSessionTable.setStatus('mandatory')
ipSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipSessionProtocol"), (0, "BIANCA-BRICK-IP-MIB", "ipSessionSrcAddr"), (0, "BIANCA-BRICK-IP-MIB", "ipSessionSrcPort"), (0, "BIANCA-BRICK-IP-MIB", "ipSessionDstAddr"), (0, "BIANCA-BRICK-IP-MIB", "ipSessionDstPort"))
if mibBuilder.loadTexts: ipSessionEntry.setStatus('mandatory')
ipSessionSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionSrcAddr.setStatus('mandatory')
ipSessionSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionSrcPort.setStatus('mandatory')
ipSessionDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionDstAddr.setStatus('mandatory')
ipSessionDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionDstPort.setStatus('mandatory')
ipSessionOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionOutPkts.setStatus('mandatory')
ipSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionOutOctets.setStatus('mandatory')
ipSessionInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionInPkts.setStatus('mandatory')
ipSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionInOctets.setStatus('mandatory')
ipSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 8, 12, 17, 20, 22, 27, 46, 47, 50, 51, 88, 89, 115))).clone(namedValues=NamedValues(("icmp", 1), ("ggp", 3), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("hmp", 20), ("xns-idp", 22), ("rdp", 27), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("igrp", 88), ("ospf", 89), ("l2tp", 115)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionProtocol.setStatus('mandatory')
ipSessionAge = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionAge.setStatus('mandatory')
ipSessionIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionIdle.setStatus('mandatory')
ipSessionSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionSrcIfIndex.setStatus('mandatory')
ipSessionDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionDstIfIndex.setStatus('mandatory')
ipImportTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 12), )
if mibBuilder.loadTexts: ipImportTable.setStatus('mandatory')
ipImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipImportSrcProto"), (0, "BIANCA-BRICK-IP-MIB", "ipImportDstProto"))
if mibBuilder.loadTexts: ipImportEntry.setStatus('mandatory')
ipImportSrcProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default-route", 1), ("direct", 2), ("static", 3), ("rip", 4), ("ospf", 5), ("special", 6), ("radius", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportSrcProto.setStatus('mandatory')
ipImportDstProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delete", 1), ("rip", 2), ("ospf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportDstProto.setStatus('mandatory')
ipImportMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportMetric1.setStatus('mandatory')
ipImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportType.setStatus('mandatory')
ipImportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportAddr.setStatus('mandatory')
ipImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportMask.setStatus('mandatory')
ipImportEffect = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("doNotImport", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportEffect.setStatus('mandatory')
ipImportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipImportIfIndex.setStatus('mandatory')
ipPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 13), )
if mibBuilder.loadTexts: ipPriorityTable.setStatus('mandatory')
ipPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 13, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipPriorityProto"))
if mibBuilder.loadTexts: ipPriorityEntry.setStatus('mandatory')
ipPriorityProto = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("rip", 3), ("ospf", 4), ("ospf-ext", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPriorityProto.setStatus('mandatory')
ipPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPriorityValue.setStatus('mandatory')
ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 15), )
if mibBuilder.loadTexts: ipFilterTable.setStatus('mandatory')
ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipFilterProtocol"))
if mibBuilder.loadTexts: ipFilterEntry.setStatus('mandatory')
ipFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilterIndex.setStatus('mandatory')
ipFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDescr.setStatus('mandatory')
ipFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 8, 9, 12, 16, 17, 20, 22, 27, 46, 47, 50, 51, 56, 57, 65, 80, 88, 89, 94, 111, 112, 115, 255, 256))).clone(namedValues=NamedValues(("icmp", 1), ("ggp", 3), ("ip", 4), ("tcp", 6), ("egp", 8), ("igp", 9), ("pup", 12), ("chaos", 16), ("udp", 17), ("hmp", 20), ("xns-idp", 22), ("rdp", 27), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("tlsp", 56), ("skip", 57), ("kryptolan", 65), ("iso-ip", 80), ("igrp", 88), ("ospf", 89), ("ipip", 94), ("ipx-in-ip", 111), ("vrrp", 112), ("l2tp", 115), ("delete", 255), ("dont-verify", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterProtocol.setStatus('mandatory')
ipFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcAddr.setStatus('mandatory')
ipFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcMask.setStatus('mandatory')
ipFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcPort.setStatus('mandatory')
ipFilterSrcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterSrcPortRange.setStatus('mandatory')
ipFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstAddr.setStatus('mandatory')
ipFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstMask.setStatus('mandatory')
ipFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstPort.setStatus('mandatory')
ipFilterDstPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterDstPortRange.setStatus('mandatory')
ipFilterTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dont-verify", 1), ("established", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterTcpConnState.setStatus('mandatory')
ipFilterIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31, 1, 4, 5, 6, 9, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("dont-verify", 31), ("echoRep", 1), ("destUnreach", 4), ("srcQuench", 5), ("redirect", 6), ("echo", 9), ("timeExcds", 12), ("parmProb", 13), ("timestamp", 14), ("timestampRep", 15), ("addrMask", 16), ("addrMaskRep", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterIcmpType.setStatus('mandatory')
ipFilterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterTos.setStatus('mandatory')
ipFilterTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterTosMask.setStatus('mandatory')
ipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 16), )
if mibBuilder.loadTexts: ipRuleTable.setStatus('mandatory')
ipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 16, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipRuleFilterIndex"))
if mibBuilder.loadTexts: ipRuleEntry.setStatus('mandatory')
ipRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRuleIndex.setStatus('mandatory')
ipRuleFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleFilterIndex.setStatus('mandatory')
ipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("allow", 1), ("allow-if-not", 2), ("deny", 3), ("deny-if-not", 4), ("ignore", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleAction.setStatus('mandatory')
ipRuleNextRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleNextRuleIndex.setStatus('mandatory')
ipNatOutTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 18), )
if mibBuilder.loadTexts: ipNatOutTable.setStatus('mandatory')
ipNatOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipNatOutIfIndex"), (0, "BIANCA-BRICK-IP-MIB", "ipNatOutIntAddr"), (0, "BIANCA-BRICK-IP-MIB", "ipNatOutExtAddr"))
if mibBuilder.loadTexts: ipNatOutEntry.setStatus('mandatory')
ipNatOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutIfIndex.setStatus('mandatory')
ipNatOutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 47, 50, 51, 115, 255, 256))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17), ("gre", 47), ("esp", 50), ("ah", 51), ("l2tp", 115), ("any", 255), ("delete", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutProtocol.setStatus('mandatory')
ipNatOutRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutRemoteAddr.setStatus('mandatory')
ipNatOutRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutRemoteMask.setStatus('mandatory')
ipNatOutExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutExtAddr.setStatus('mandatory')
ipNatOutRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutRemotePort.setStatus('mandatory')
ipNatOutRemotePortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutRemotePortRange.setStatus('mandatory')
ipNatOutIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutIntAddr.setStatus('mandatory')
ipNatOutIntMask = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutIntMask.setStatus('mandatory')
ipNatOutIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutIntPort.setStatus('mandatory')
ipNatOutExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatOutExtPort.setStatus('mandatory')
ipHostsAliveTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 19), )
if mibBuilder.loadTexts: ipHostsAliveTable.setStatus('mandatory')
ipHostsAliveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipHostsAliveIPAddress"))
if mibBuilder.loadTexts: ipHostsAliveEntry.setStatus('mandatory')
ipHostsAliveGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveGroup.setStatus('mandatory')
ipHostsAliveIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveIPAddress.setStatus('mandatory')
ipHostsAliveState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipHostsAliveState.setStatus('mandatory')
ipHostsAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveInterval.setStatus('mandatory')
ipHostsAliveDownAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveDownAction.setStatus('mandatory')
ipHostsAliveFirstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveFirstIfIndex.setStatus('mandatory')
ipHostsAliveRange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostsAliveRange.setStatus('mandatory')
ipBodRuleTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 21), )
if mibBuilder.loadTexts: ipBodRuleTable.setStatus('mandatory')
ipBodRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipBodRuleFilterIndex"))
if mibBuilder.loadTexts: ipBodRuleEntry.setStatus('mandatory')
ipBodRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBodRuleIndex.setStatus('mandatory')
ipBodRuleFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleFilterIndex.setStatus('mandatory')
ipBodRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invoke", 1), ("invoke-if-not", 2), ("deny", 3), ("deny-if-not", 4), ("ignore", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleAction.setStatus('mandatory')
ipBodRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleDirection.setStatus('mandatory')
ipBodRuleChannels = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleChannels.setStatus('mandatory')
ipBodRuleNextRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleNextRuleIndex.setStatus('mandatory')
ipBodRuleIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBodRuleIdleTime.setStatus('mandatory')
ipQoSTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 22), )
if mibBuilder.loadTexts: ipQoSTable.setStatus('mandatory')
ipQoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1), ).setIndexNames((0, "BIANCA-BRICK-IP-MIB", "ipQoSFilterIndex"))
if mibBuilder.loadTexts: ipQoSEntry.setStatus('mandatory')
ipQoSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipQoSIndex.setStatus('mandatory')
ipQoSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSFilterIndex.setStatus('mandatory')
ipQoSNextRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSNextRuleIndex.setStatus('mandatory')
ipQoSAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("classify", 1), ("classify-if-not", 2), ("disabled", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSAction.setStatus('mandatory')
ipQoSTos = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSTos.setStatus('mandatory')
ipQoSTosSetRate = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSTosSetRate.setStatus('mandatory')
ipQoSTosSetBurst = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSTosSetBurst.setStatus('mandatory')
ipQoSServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSServiceClass.setStatus('mandatory')
ipQoSClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSClassId.setStatus('mandatory')
ipQoSDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 22, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipQoSDirection.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-IP-MIB", ipQoSServiceClass=ipQoSServiceClass, ipExtIfRipReceive=ipExtIfRipReceive, ipExtIfAuthMode=ipExtIfAuthMode, ipNatOutTable=ipNatOutTable, ipFilterSrcPortRange=ipFilterSrcPortRange, ipFilterDescr=ipFilterDescr, ipBodRuleChannels=ipBodRuleChannels, private=private, ipExtIfNatSilentDeny=ipExtIfNatSilentDeny, ipFilterDstAddr=ipFilterDstAddr, ipNatOutExtAddr=ipNatOutExtAddr, ipBodRuleDirection=ipBodRuleDirection, ipExtRtSrcAddr=ipExtRtSrcAddr, ipHostsAliveGroup=ipHostsAliveGroup, ipHostsAliveIPAddress=ipHostsAliveIPAddress, ipFilterSrcPort=ipFilterSrcPort, ipExtIfIpFragmentation=ipExtIfIpFragmentation, enterprises=enterprises, ipSessionSrcAddr=ipSessionSrcAddr, ipNatOutEntry=ipNatOutEntry, org=org, ipExtRtDstMask=ipExtRtDstMask, ipNatIfIndex=ipNatIfIndex, ipExtRtSrcMask=ipExtRtSrcMask, ipNatPresetEntry=ipNatPresetEntry, ipSessionDstPort=ipSessionDstPort, ipSessionDstIfIndex=ipSessionDstIfIndex, ipSessionOutPkts=ipSessionOutPkts, ipExtIfProxyArp=ipExtIfProxyArp, ipRuleEntry=ipRuleEntry, ipNatOutRemotePort=ipNatOutRemotePort, ipExtIfNatTcpTimeout=ipExtIfNatTcpTimeout, ipPriorityTable=ipPriorityTable, ipExtIfAccounting=ipExtIfAccounting, ipExtIfNatRmvFin=ipExtIfNatRmvFin, ipNatPresetTable=ipNatPresetTable, ipRuleFilterIndex=ipRuleFilterIndex, ipExtIfRuleIndex=ipExtIfRuleIndex, ipQoSTos=ipQoSTos, ipNatProtocol=ipNatProtocol, ipFilterDstPortRange=ipFilterDstPortRange, ipBodRuleEntry=ipBodRuleEntry, ipNatPrIfIndex=ipNatPrIfIndex, ipQoSClassId=ipQoSClassId, ipNatExtAddr=ipNatExtAddr, ipExtRtMetric5=ipExtRtMetric5, ipNatOutRemoteMask=ipNatOutRemoteMask, ipFilterDstMask=ipFilterDstMask, ipHostsAliveFirstIfIndex=ipHostsAliveFirstIfIndex, ipExtIfAccessAction=ipExtIfAccessAction, ipNatEntry=ipNatEntry, ipImportMask=ipImportMask, ipHostsAliveInterval=ipHostsAliveInterval, ipQoSTosSetRate=ipQoSTosSetRate, ipNatAge=ipNatAge, ipExtIfNat=ipExtIfNat, ipSessionDstAddr=ipSessionDstAddr, ipPriorityEntry=ipPriorityEntry, ipNatIntAddr=ipNatIntAddr, ipNatPrExtAddr=ipNatPrExtAddr, ipNatOutRemoteAddr=ipNatOutRemoteAddr, ipQoSTable=ipQoSTable, ipQoSAction=ipQoSAction, ipExtRtDstPort=ipExtRtDstPort, ipNatIntPort=ipNatIntPort, ipHostsAliveTable=ipHostsAliveTable, ipPriorityValue=ipPriorityValue, ipNatRemotePort=ipNatRemotePort, ipQoSIndex=ipQoSIndex, ipExtRtMetric3=ipExtRtMetric3, ipNatOutIntMask=ipNatOutIntMask, biboip=biboip, ipQoSEntry=ipQoSEntry, ipNatOutProtocol=ipNatOutProtocol, ipFilterSrcAddr=ipFilterSrcAddr, ipNatPrProtocol=ipNatPrProtocol, ipExtIfIpsecAccounting=ipExtIfIpsecAccounting, ipNatOutIntAddr=ipNatOutIntAddr, ipExtRtAge=ipExtRtAge, ipExtRtEntry=ipExtRtEntry, ipImportEntry=ipImportEntry, ipImportType=ipImportType, ipExtIfRouteAnnounce=ipExtIfRouteAnnounce, ipExtRtTos=ipExtRtTos, ipExtRtDstIfMode=ipExtRtDstIfMode, ipFilterSrcMask=ipFilterSrcMask, ipFilterTcpConnState=ipFilterTcpConnState, ipImportTable=ipImportTable, ipExtRtType=ipExtRtType, ipNatPrIntAddr=ipNatPrIntAddr, ipExtIfBackRtVerify=ipExtIfBackRtVerify, ipNatExtPort=ipNatExtPort, ipFilterDstPort=ipFilterDstPort, ipHostsAliveDownAction=ipHostsAliveDownAction, ipBodRuleAction=ipBodRuleAction, ipRuleNextRuleIndex=ipRuleNextRuleIndex, ipExtIfNatOutXlat=ipExtIfNatOutXlat, ipSessionTable=ipSessionTable, ipExtIfOspfMetric=ipExtIfOspfMetric, ipExtRtMetric2=ipExtRtMetric2, ipSessionSrcIfIndex=ipSessionSrcIfIndex, ipImportIfIndex=ipImportIfIndex, ipPriorityProto=ipPriorityProto, ipBodRuleIdleTime=ipBodRuleIdleTime, ipSessionIdle=ipSessionIdle, ipExtRtDstAddr=ipExtRtDstAddr, ipRuleIndex=ipRuleIndex, ipRuleTable=ipRuleTable, ipExtIfTcpCksum=ipExtIfTcpCksum, ipExtRtNextHop=ipExtRtNextHop, ipNatPrRemoteMask=ipNatPrRemoteMask, ipImportEffect=ipImportEffect, ipFilterTos=ipFilterTos, ipExtIfBodRuleIndex=ipExtIfBodRuleIndex, ipExtRtMetric1=ipExtRtMetric1, ipExtRtDstIfIndex=ipExtRtDstIfIndex, ipFilterIcmpType=ipFilterIcmpType, ipImportDstProto=ipImportDstProto, ipExtRtSrcIfIndex=ipExtRtSrcIfIndex, ipSessionOutOctets=ipSessionOutOctets, ipExtIfOspf=ipExtIfOspf, ipHostsAliveState=ipHostsAliveState, ipExtIfEntry=ipExtIfEntry, ipExtRtMetric4=ipExtRtMetric4, ipNatOutIfIndex=ipNatOutIfIndex, ipNatRemoteAddr=ipNatRemoteAddr, ipExtIfAccessReport=ipExtIfAccessReport, ipExtIfAuthKeepalive=ipExtIfAuthKeepalive, ipFilterProtocol=ipFilterProtocol, ipExtRtDstPortRange=ipExtRtDstPortRange, ipSessionEntry=ipSessionEntry, ipQoSNextRuleIndex=ipQoSNextRuleIndex, ipNatOutExtPort=ipNatOutExtPort, bibo=bibo, ipExtIfNatOtherTimeout=ipExtIfNatOtherTimeout, ipExtIfAuthentication=ipExtIfAuthentication, ipExtIfRerouting=ipExtIfRerouting, ipQoSTosSetBurst=ipQoSTosSetBurst, ipExtRtTable=ipExtRtTable, ipHostsAliveRange=ipHostsAliveRange, bintec=bintec, ipNatOutRemotePortRange=ipNatOutRemotePortRange, ipBodRuleIndex=ipBodRuleIndex, ipImportAddr=ipImportAddr, ipBodRuleNextRuleIndex=ipBodRuleNextRuleIndex, ipSessionInPkts=ipSessionInPkts, ipFilterIndex=ipFilterIndex, ipFilterEntry=ipFilterEntry, ipExtIfIndex=ipExtIfIndex, ipExtIfRipSend=ipExtIfRipSend, ipExtRtProto=ipExtRtProto, ipNatPrExtPortRange=ipNatPrExtPortRange, ipExtRtTosMask=ipExtRtTosMask, ipExtRtProtocol=ipExtRtProtocol, ipExtIfMulticast=ipExtIfMulticast, ipQoSDirection=ipQoSDirection, ipNatPrExtPort=ipNatPrExtPort, ipNatPrIntPort=ipNatPrIntPort, ipNatTable=ipNatTable, ipSessionInOctets=ipSessionInOctets, ipSessionProtocol=ipSessionProtocol, ipExtRtSrcPort=ipExtRtSrcPort, ipExtIfAuthLifeTime=ipExtIfAuthLifeTime, ipFilterTosMask=ipFilterTosMask, ipHostsAliveEntry=ipHostsAliveEntry, ipNatOutIntPort=ipNatOutIntPort, internet=internet, ipNatPrRemoteAddr=ipNatPrRemoteAddr, ipSessionAge=ipSessionAge, ipImportMetric1=ipImportMetric1, ipExtIfQosRuleIndex=ipExtIfQosRuleIndex, ipExtRtSrcPortRange=ipExtRtSrcPortRange, ipBodRuleTable=ipBodRuleTable, ipExtIfTcpSpoofing=ipExtIfTcpSpoofing, ipBodRuleFilterIndex=ipBodRuleFilterIndex, ipSessionSrcPort=ipSessionSrcPort, ipFilterTable=ipFilterTable, ipRuleAction=ipRuleAction, ipQoSFilterIndex=ipQoSFilterIndex, ipImportSrcProto=ipImportSrcProto, ipExtIfTable=ipExtIfTable, dod=dod, ipNatDirection=ipNatDirection, ipNatPrExtMask=ipNatPrExtMask)
