#
# PySNMP MIB module DES3828DC-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3828DC-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, NotificationType, iso, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, ObjectIdentity, Counter32, IpAddress, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "NotificationType", "iso", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "ObjectIdentity", "Counter32", "IpAddress", "Integer32", "Gauge32")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
des3828DC, = mibBuilder.importSymbols("SW3800PRIMGMT-MIB", "des3828DC")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0805220000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class VlanIndex(Unsigned32):
    pass

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 9))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1))
swDevInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setStatus('current')
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevInfoConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setStatus('current')
swDevInfoModuleType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoModuleType.setStatus('current')
swDevInfoFrontPanelLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portStatusMode", 1), ("poeStatusMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedMode.setStatus('current')
swDevInfoPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 8), )
if mibBuilder.loadTexts: swDevInfoPowerTable.setStatus('current')
swDevInfoPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 8, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), (0, "DES3828DC-L2MGMT-MIB", "swDevInfoPowerID"))
if mibBuilder.loadTexts: swDevInfoPowerEntry.setStatus('current')
swDevInfoPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerUnitIndex.setStatus('current')
swDevInfoPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerID.setStatus('current')
swDevInfoPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("lowVoltage", 1), ("overCurrent", 2), ("working", 3), ("fail", 4), ("connect", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerStatus.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 10))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2VlanAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3, 1), )
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setStatus('current')
swL2VlanAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3, 1, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
swL2VlanAdvertiseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('obsolete')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2PortInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('obsolete')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('obsolete')
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('obsolete')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('obsolete')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('obsolete')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('obsolete')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1000T", 2), ("moduleType-BaseModule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('obsolete')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("unknow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('obsolete')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('obsolete')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2PortCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('obsolete')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('obsolete')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('obsolete')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('obsolete')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('obsolete')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('obsolete')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('obsolete')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('obsolete')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4), )
if mibBuilder.loadTexts: swL2PortInformationTable.setStatus('current')
swL2PortInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2PortInformationPortIndex"), (0, "DES3828DC-L2MGMT-MIB", "swL2PortInformationMediumType"))
if mibBuilder.loadTexts: swL2PortInformationEntry.setStatus('current')
swL2PortInformationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationPortIndex.setStatus('current')
swL2PortInformationMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationMediumType.setStatus('current')
swL2PortInformationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationUnitID.setStatus('current')
swL2PortInformationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationType.setStatus('current')
swL2PortInformationLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationLinkStatus.setStatus('current')
swL2PortInformationNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 0), ("empty", 1), ("link-down", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8), ("full-10Gigabps", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationNwayStatus.setStatus('current')
swL2PortInformationModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationModuleType.setStatus('current')
swL2PortInformationErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("unknow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationErrorDisabled.setStatus('current')
swL2PortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5), )
if mibBuilder.loadTexts: swL2PortControlTable.setStatus('current')
swL2PortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2PortControlPortIndex"), (0, "DES3828DC-L2MGMT-MIB", "swL2PortControlMediumType"))
if mibBuilder.loadTexts: swL2PortControlEntry.setStatus('current')
swL2PortControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlPortIndex.setStatus('current')
swL2PortControlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlMediumType.setStatus('current')
swL2PortControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlUnitIndex.setStatus('current')
swL2PortControlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlAdminState.setStatus('current')
swL2PortControlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlNwayState.setStatus('current')
swL2PortControlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlFlowCtrlState.setStatus('current')
swL2PortControlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlLearningState.setStatus('current')
swL2PortControlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMACNotifyState.setStatus('current')
swL2PortControlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMulticastfilter.setStatus('current')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 2, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 3, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 4, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 9, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 4, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3828DC-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 10, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 1, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2BroadcastSegCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 2))
swL2BroadcastSegFilterPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2BroadcastSegFilterPorts.setStatus('current')
swL2BroadcastSegARPForwardPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 13, 2, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2BroadcastSegARPForwardPorts.setStatus('current')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1, 1), ).setIndexNames((0, "DES3828DC-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
swL2MgmtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0))
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0, 3)).setObjects(("DES3828DC-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2porttypechgNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0, 4)).setObjects(("DES3828DC-L2MGMT-MIB", "swL2PortInfoPortIndex"), ("DES3828DC-L2MGMT-MIB", "swL2PortInfoType"))
if mibBuilder.loadTexts: swL2porttypechgNotification.setStatus('current')
swPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0, 5)).setObjects(("DES3828DC-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChg.setStatus('current')
swPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0, 6)).setObjects(("DES3828DC-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerFailure.setStatus('current')
swPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 0, 7)).setObjects(("DES3828DC-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3828DC-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerRecover.setStatus('current')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swl2NotifyPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 2))
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 69, 2, 2, 15, 2, 2)).setObjects(("DES3828DC-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3828DC-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
mibBuilder.exportSymbols("DES3828DC-L2MGMT-MIB", swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2PortControlTable=swL2PortControlTable, swL2PortInformationModuleType=swL2PortInformationModuleType, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2MgmtMIB=swL2MgmtMIB, swL2PortInformationPortIndex=swL2PortInformationPortIndex, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2PortInformationType=swL2PortInformationType, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2PortControlNwayState=swL2PortControlNwayState, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2TrunkName=swL2TrunkName, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2BroadcastSegCtrl=swL2BroadcastSegCtrl, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2PortControlMediumType=swL2PortControlMediumType, swL2PortInfoEntry=swL2PortInfoEntry, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2DevAlarm=swL2DevAlarm, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swDevInfoSystemUpTime=swDevInfoSystemUpTime, swL2PortSecurityMode=swL2PortSecurityMode, swL2PortControlMACNotifyState=swL2PortControlMACNotifyState, swL2VlanMgmt=swL2VlanMgmt, swL2PortControlUnitIndex=swL2PortControlUnitIndex, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2macNotification=swL2macNotification, swL2TrunkIndex=swL2TrunkIndex, swL2PortInformationNwayStatus=swL2PortInformationNwayStatus, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2IGMPPortMap=swL2IGMPPortMap, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2macNotifyInfo=swL2macNotifyInfo, swDevInfoFrontPanelLedMode=swDevInfoFrontPanelLedMode, swL2PortControlFlowCtrlState=swL2PortControlFlowCtrlState, swL2QOSMgmt=swL2QOSMgmt, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2PortInfoTable=swL2PortInfoTable, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2MgmtMIBTrapPrefix=swL2MgmtMIBTrapPrefix, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2IGMPInfoVid=swL2IGMPInfoVid, swDevInfoPowerID=swDevInfoPowerID, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2TrunkState=swL2TrunkState, swL2TrunkType=swL2TrunkType, swL2MirrorMgmt=swL2MirrorMgmt, swL2DevMgmt=swL2DevMgmt, swL2PortControlAdminState=swL2PortControlAdminState, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2PortControlMulticastfilter=swL2PortControlMulticastfilter, swL2VlanAdvertisementEntry=swL2VlanAdvertisementEntry, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2MirrorPortState=swL2MirrorPortState, swL2TrafficSegTable=swL2TrafficSegTable, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swDevInfoModuleType=swDevInfoModuleType, swL2PortCtrlLockState=swL2PortCtrlLockState, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2VlanAdvertiseState=swL2VlanAdvertiseState, swPowerFailure=swPowerFailure, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, PYSNMP_MODULE_ID=swL2MgmtMIB, PortList=PortList, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2VlanIndex=swL2VlanIndex, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2PortControlEntry=swL2PortControlEntry, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2TrunkMgmt=swL2TrunkMgmt, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swl2NotificationBidings=swl2NotificationBidings, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, VlanIndex=VlanIndex, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2TrafficSegEntry=swL2TrafficSegEntry, VlanId=VlanId, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2DevInfo=swL2DevInfo, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2PortInformationEntry=swL2PortInformationEntry, swL2TrunkMember=swL2TrunkMember, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2DevCtrl=swL2DevCtrl, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2PortControlLearningState=swL2PortControlLearningState, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swDevInfoPowerTable=swDevInfoPowerTable, swDevInfoPowerEntry=swDevInfoPowerEntry, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2BroadcastSegARPForwardPorts=swL2BroadcastSegARPForwardPorts, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swl2NotifyPortSecurity=swl2NotifyPortSecurity, swL2IGMPMgmt=swL2IGMPMgmt, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swDevInfoPowerUnitIndex=swDevInfoPowerUnitIndex, swL2PortControlPortIndex=swL2PortControlPortIndex, swPowerRecover=swPowerRecover, swL2IGMPRobustness=swL2IGMPRobustness, swL2PortInformationMediumType=swL2PortInformationMediumType, swL2IGMPVid=swL2IGMPVid, swL2PortInfoType=swL2PortInfoType, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2PortMgmt=swL2PortMgmt, swL2porttypechgNotification=swL2porttypechgNotification, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2PortInformationLinkStatus=swL2PortInformationLinkStatus, swL2IGMPQueryState=swL2IGMPQueryState, swL2TrafficSegPort=swL2TrafficSegPort, swL2BroadcastSegFilterPorts=swL2BroadcastSegFilterPorts, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2MACNotifyState=swL2MACNotifyState, swDevInfoPowerStatus=swDevInfoPowerStatus, swL2PortInformationUnitID=swL2PortInformationUnitID, swL2PortInformationTable=swL2PortInformationTable, swPowerStatusChg=swPowerStatusChg, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2PortInformationErrorDisabled=swL2PortInformationErrorDisabled, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2PortCtrlTable=swL2PortCtrlTable, swL2VlanName=swL2VlanName, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swDevInfoConsoleInUse=swDevInfoConsoleInUse, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2VlanAdvertisementTable=swL2VlanAdvertisementTable)
