#
# PySNMP MIB module ANIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, Counter32, enterprises, IpAddress, Gauge32, Bits, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, experimental, Unsigned32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Counter32", "enterprises", "IpAddress", "Gauge32", "Bits", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "experimental", "Unsigned32", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
anic = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 7))
anicCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 7, 1))
anicCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1), )
if mibBuilder.loadTexts: anicCmdTable.setStatus('mandatory')
anicCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1), ).setIndexNames((0, "ANIC-MIB", "anicCmdIndex"))
if mibBuilder.loadTexts: anicCmdEntry.setStatus('mandatory')
anicCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCmdIndex.setStatus('mandatory')
anicCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCmdMgtStationId.setStatus('mandatory')
anicCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCmdReqId.setStatus('mandatory')
anicCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCommand", 1), ("nonDisruptSelfTest", 2), ("busyOutPhoneLine", 3), ("restorePhoneLine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCmdFunction.setStatus('mandatory')
anicCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCmdForce.setStatus('mandatory')
anicCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCmdParam.setStatus('mandatory')
anicCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCmdResult.setStatus('mandatory')
anicCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("slotEmpty", 3), ("noResponse", 4), ("deviceDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCmdCode.setStatus('mandatory')
anicCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 7, 2))
anicCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1), )
if mibBuilder.loadTexts: anicCfgTable.setStatus('mandatory')
anicCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1), ).setIndexNames((0, "ANIC-MIB", "anicCfgIndex"))
if mibBuilder.loadTexts: anicCfgEntry.setStatus('mandatory')
anicCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCfgIndex.setStatus('mandatory')
anicCfgMdmRingNATrapEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCfgMdmRingNATrapEna.setStatus('mandatory')
anicCfgDteRingNATrapEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCfgDteRingNATrapEna.setStatus('mandatory')
anicCfgRingThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anicCfgRingThresh.setStatus('mandatory')
anicCfgLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anicCfgLineStatus.setStatus('mandatory')
mibBuilder.exportSymbols("ANIC-MIB", anicCfgIndex=anicCfgIndex, anicCmdParam=anicCmdParam, anicCfgRingThresh=anicCfgRingThresh, anic=anic, anicCfgLineStatus=anicCfgLineStatus, anicCmdTable=anicCmdTable, anicCmdMgtStationId=anicCmdMgtStationId, anicCmd=anicCmd, anicCmdCode=anicCmdCode, anicCmdReqId=anicCmdReqId, anicCmdFunction=anicCmdFunction, anicCmdEntry=anicCmdEntry, anicCmdForce=anicCmdForce, anicCfgTable=anicCfgTable, anicCfg=anicCfg, nas=nas, anicCfgMdmRingNATrapEna=anicCfgMdmRingNATrapEna, anicCfgDteRingNATrapEna=anicCfgDteRingNATrapEna, anicCfgEntry=anicCfgEntry, usr=usr, anicCmdResult=anicCmdResult, anicCmdIndex=anicCmdIndex)
