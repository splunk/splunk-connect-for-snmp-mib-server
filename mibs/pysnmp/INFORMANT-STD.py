#
# PySNMP MIB module INFORMANT-STD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-STD
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Counter64, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Bits, MibIdentifier, TimeTicks, Integer32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Counter64", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Bits", "MibIdentifier", "TimeTicks", "Integer32", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
informant, InstanceName = mibBuilder.importSymbols("WTCS", "informant", "InstanceName")
standard = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 1))
standard.setRevisions(('2008-07-11 23:59', '2008-03-21 23:08', '2005-07-19 18:26', '2004-02-29 06:27', '2004-01-17 16:02',))
if mibBuilder.loadTexts: standard.setLastUpdated('200807112359Z')
if mibBuilder.loadTexts: standard.setOrganization('Informant Systems, Inc.')
logicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1), )
if mibBuilder.loadTexts: logicalDiskTable.setStatus('current')
logicalDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1), ).setIndexNames((0, "INFORMANT-STD", "lDiskInstance"))
if mibBuilder.loadTexts: logicalDiskEntry.setStatus('current')
lDiskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskInstance.setStatus('current')
lDiskPercentDiskReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskReadTime.setStatus('current')
lDiskPercentDiskTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskTime.setStatus('current')
lDiskPercentDiskWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentDiskWriteTime.setStatus('current')
lDiskPercentFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentFreeSpace.setStatus('current')
lDiskPercentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskPercentIdleTime.setStatus('current')
lDiskAvgDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskQueueLength.setStatus('current')
lDiskAvgDiskReadQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskReadQueueLength.setStatus('current')
lDiskAvgDiskWriteQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskWriteQueueLength.setStatus('current')
lDiskAvgDiskSecPerRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerRead.setStatus('current')
lDiskAvgDiskSecPerTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerTransfer.setStatus('current')
lDiskAvgDiskSecPerWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskAvgDiskSecPerWrite.setStatus('current')
lDiskCurrentDiskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskCurrentDiskQueueLength.setStatus('current')
lDiskDiskBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskBytesPerSec.setStatus('current')
lDiskDiskReadBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskReadBytesPerSec.setStatus('current')
lDiskDiskReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskReadsPerSec.setStatus('current')
lDiskDiskTransfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskTransfersPerSec.setStatus('current')
lDiskDiskWriteBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskWriteBytesPerSec.setStatus('current')
lDiskDiskWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskDiskWritesPerSec.setStatus('current')
lDiskFreeMegabytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskFreeMegabytes.setStatus('current')
lDiskSplitIOPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lDiskSplitIOPerSec.setStatus('current')
memory = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2))
if mibBuilder.loadTexts: memory.setStatus('current')
memoryAvailableBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableBytes.setStatus('current')
memoryAvailableKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableKBytes.setStatus('current')
memoryAvailableMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailableMBytes.setStatus('current')
memoryCommittedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedBytes.setStatus('current')
memoryCacheBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheBytes.setStatus('current')
memoryCacheBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheBytesPeak.setStatus('current')
memoryPageFaultsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPageFaultsPerSec.setStatus('current')
memoryPagesInputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesInputPerSec.setStatus('current')
memoryPagesOutputPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesOutputPerSec.setStatus('current')
memoryPagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPagesPerSec.setStatus('current')
memoryPoolNonpagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedBytes.setStatus('current')
memoryPoolPagedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedBytes.setStatus('current')
memoryPoolPagedResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentBytes.setStatus('current')
memorySystemCacheResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentBytes.setStatus('current')
memorySystemCodeResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentBytes.setStatus('current')
memorySystemCodeTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalBytes.setStatus('current')
memorySystemDriverResidentBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentBytes.setStatus('current')
memorySystemDriverTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalBytes.setStatus('current')
memoryCommittedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedKBytes.setStatus('current')
memoryCacheKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheKBytes.setStatus('current')
memoryCacheKBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheKBytesPeak.setStatus('current')
memoryPoolNonpagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedKBytes.setStatus('current')
memoryPoolPagedKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedKBytes.setStatus('current')
memoryPoolPagedResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentKBytes.setStatus('current')
memorySystemCacheResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentKBytes.setStatus('current')
memorySystemCodeResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentKBytes.setStatus('current')
memorySystemCodeTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalKBytes.setStatus('current')
memorySystemDriverResidentKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentKBytes.setStatus('current')
memorySystemDriverTotalKBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalKBytes.setStatus('current')
memoryCommittedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCommittedMBytes.setStatus('current')
memoryCacheMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheMBytes.setStatus('current')
memoryCacheMBytesPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryCacheMBytesPeak.setStatus('current')
memoryPoolNonpagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolNonpagedMBytes.setStatus('current')
memoryPoolPagedMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedMBytes.setStatus('current')
memoryPoolPagedResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryPoolPagedResidentMBytes.setStatus('current')
memorySystemCacheResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCacheResidentMBytes.setStatus('current')
memorySystemCodeResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeResidentMBytes.setStatus('current')
memorySystemCodeTotalMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemCodeTotalMBytes.setStatus('current')
memorySystemDriverResidentMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverResidentMBytes.setStatus('current')
memorySystemDriverTotalMBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 2, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySystemDriverTotalMBytes.setStatus('current')
networkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3), )
if mibBuilder.loadTexts: networkInterfaceTable.setStatus('current')
networkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1), ).setIndexNames((0, "INFORMANT-STD", "netInstance"))
if mibBuilder.loadTexts: networkInterfaceEntry.setStatus('current')
netInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netInstance.setStatus('current')
netBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesReceivedPerSec.setStatus('current')
netBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesSentPerSec.setStatus('current')
netBytesTotalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBytesTotalPerSec.setStatus('current')
netCurrentBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCurrentBandwidth.setStatus('current')
netOutputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netOutputQueueLength.setStatus('current')
netPacketsOutboundDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsOutboundDiscarded.setStatus('current')
netPacketsOutboundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsOutboundErrors.setStatus('current')
netPacketsReceivedDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedDiscarded.setStatus('current')
netPacketsReceivedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedErrors.setStatus('current')
netPacketsReceivedUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedUnknown.setStatus('current')
netPacketsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsReceivedPerSec.setStatus('current')
netPacketsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsSentPerSec.setStatus('current')
netPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPacketsPerSec.setStatus('current')
objects = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 1, 4))
if mibBuilder.loadTexts: objects.setStatus('current')
objectsProcesses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsProcesses.setStatus('current')
objectsThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectsThreads.setStatus('current')
processorTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5), )
if mibBuilder.loadTexts: processorTable.setStatus('current')
processorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1), ).setIndexNames((0, "INFORMANT-STD", "cpuInstance"))
if mibBuilder.loadTexts: processorEntry.setStatus('current')
cpuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInstance.setStatus('current')
cpuPercentDPCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentDPCTime.setStatus('current')
cpuPercentInterruptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentInterruptTime.setStatus('current')
cpuPercentPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentPrivilegedTime.setStatus('current')
cpuPercentProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentProcessorTime.setStatus('current')
cpuPercentUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPercentUserTime.setStatus('current')
cpuAPCBypassesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuAPCBypassesPerSec.setStatus('current')
cpuDPCBypassesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDPCBypassesPerSec.setStatus('current')
cpuDPCRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDPCRate.setStatus('current')
cpuDPCsQueuedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDPCsQueuedPerSec.setStatus('current')
cpuInterruptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 1, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterruptsPerSec.setStatus('current')
system = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 1, 6))
if mibBuilder.loadTexts: system.setStatus('current')
systemSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemUpTime.setStatus('current')
mibBuilder.exportSymbols("INFORMANT-STD", lDiskDiskTransfersPerSec=lDiskDiskTransfersPerSec, memoryCacheBytesPeak=memoryCacheBytesPeak, memoryCommittedKBytes=memoryCommittedKBytes, lDiskPercentDiskReadTime=lDiskPercentDiskReadTime, netPacketsReceivedDiscarded=netPacketsReceivedDiscarded, memorySystemDriverResidentBytes=memorySystemDriverResidentBytes, netInstance=netInstance, lDiskDiskWritesPerSec=lDiskDiskWritesPerSec, lDiskAvgDiskWriteQueueLength=lDiskAvgDiskWriteQueueLength, memoryPoolPagedResidentMBytes=memoryPoolPagedResidentMBytes, memorySystemDriverResidentKBytes=memorySystemDriverResidentKBytes, netPacketsReceivedUnknown=netPacketsReceivedUnknown, netCurrentBandwidth=netCurrentBandwidth, memorySystemCacheResidentKBytes=memorySystemCacheResidentKBytes, lDiskAvgDiskReadQueueLength=lDiskAvgDiskReadQueueLength, memoryPoolPagedBytes=memoryPoolPagedBytes, lDiskAvgDiskSecPerWrite=lDiskAvgDiskSecPerWrite, cpuAPCBypassesPerSec=cpuAPCBypassesPerSec, netBytesTotalPerSec=netBytesTotalPerSec, lDiskPercentDiskWriteTime=lDiskPercentDiskWriteTime, memoryPageFaultsPerSec=memoryPageFaultsPerSec, memoryAvailableBytes=memoryAvailableBytes, memorySystemCodeResidentKBytes=memorySystemCodeResidentKBytes, memoryPoolNonpagedMBytes=memoryPoolNonpagedMBytes, memorySystemCodeTotalMBytes=memorySystemCodeTotalMBytes, cpuPercentProcessorTime=cpuPercentProcessorTime, PYSNMP_MODULE_ID=standard, netBytesSentPerSec=netBytesSentPerSec, lDiskAvgDiskSecPerTransfer=lDiskAvgDiskSecPerTransfer, memorySystemCacheResidentBytes=memorySystemCacheResidentBytes, system=system, lDiskDiskWriteBytesPerSec=lDiskDiskWriteBytesPerSec, processorEntry=processorEntry, memoryCommittedMBytes=memoryCommittedMBytes, objects=objects, lDiskAvgDiskQueueLength=lDiskAvgDiskQueueLength, memoryCacheKBytes=memoryCacheKBytes, memoryCacheMBytes=memoryCacheMBytes, netPacketsOutboundDiscarded=netPacketsOutboundDiscarded, memorySystemCodeTotalBytes=memorySystemCodeTotalBytes, cpuPercentPrivilegedTime=cpuPercentPrivilegedTime, networkInterfaceEntry=networkInterfaceEntry, memoryCommittedBytes=memoryCommittedBytes, cpuDPCBypassesPerSec=cpuDPCBypassesPerSec, netPacketsPerSec=netPacketsPerSec, systemSystemUpTime=systemSystemUpTime, lDiskAvgDiskSecPerRead=lDiskAvgDiskSecPerRead, memorySystemCodeResidentBytes=memorySystemCodeResidentBytes, cpuPercentDPCTime=cpuPercentDPCTime, lDiskInstance=lDiskInstance, networkInterfaceTable=networkInterfaceTable, memorySystemDriverTotalBytes=memorySystemDriverTotalBytes, cpuDPCRate=cpuDPCRate, memory=memory, memoryPagesInputPerSec=memoryPagesInputPerSec, lDiskPercentFreeSpace=lDiskPercentFreeSpace, netPacketsReceivedErrors=netPacketsReceivedErrors, lDiskDiskReadBytesPerSec=lDiskDiskReadBytesPerSec, standard=standard, logicalDiskEntry=logicalDiskEntry, lDiskFreeMegabytes=lDiskFreeMegabytes, cpuPercentUserTime=cpuPercentUserTime, processorTable=processorTable, memoryPagesPerSec=memoryPagesPerSec, memorySystemCacheResidentMBytes=memorySystemCacheResidentMBytes, cpuPercentInterruptTime=cpuPercentInterruptTime, memoryPoolPagedMBytes=memoryPoolPagedMBytes, netBytesReceivedPerSec=netBytesReceivedPerSec, lDiskCurrentDiskQueueLength=lDiskCurrentDiskQueueLength, cpuInterruptsPerSec=cpuInterruptsPerSec, cpuDPCsQueuedPerSec=cpuDPCsQueuedPerSec, memoryPoolNonpagedKBytes=memoryPoolNonpagedKBytes, memoryCacheKBytesPeak=memoryCacheKBytesPeak, objectsProcesses=objectsProcesses, memoryPoolPagedResidentKBytes=memoryPoolPagedResidentKBytes, memorySystemCodeResidentMBytes=memorySystemCodeResidentMBytes, lDiskDiskBytesPerSec=lDiskDiskBytesPerSec, memoryPoolPagedResidentBytes=memoryPoolPagedResidentBytes, logicalDiskTable=logicalDiskTable, netPacketsSentPerSec=netPacketsSentPerSec, memorySystemDriverResidentMBytes=memorySystemDriverResidentMBytes, memoryPoolPagedKBytes=memoryPoolPagedKBytes, memorySystemDriverTotalMBytes=memorySystemDriverTotalMBytes, memoryAvailableMBytes=memoryAvailableMBytes, netPacketsReceivedPerSec=netPacketsReceivedPerSec, memoryCacheBytes=memoryCacheBytes, memorySystemDriverTotalKBytes=memorySystemDriverTotalKBytes, netPacketsOutboundErrors=netPacketsOutboundErrors, lDiskDiskReadsPerSec=lDiskDiskReadsPerSec, lDiskSplitIOPerSec=lDiskSplitIOPerSec, cpuInstance=cpuInstance, memoryPagesOutputPerSec=memoryPagesOutputPerSec, memorySystemCodeTotalKBytes=memorySystemCodeTotalKBytes, netOutputQueueLength=netOutputQueueLength, memoryAvailableKBytes=memoryAvailableKBytes, memoryCacheMBytesPeak=memoryCacheMBytesPeak, lDiskPercentIdleTime=lDiskPercentIdleTime, objectsThreads=objectsThreads, memoryPoolNonpagedBytes=memoryPoolNonpagedBytes, lDiskPercentDiskTime=lDiskPercentDiskTime)
