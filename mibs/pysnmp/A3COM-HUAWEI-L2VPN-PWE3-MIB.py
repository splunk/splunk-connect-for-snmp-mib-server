#
# PySNMP MIB module A3COM-HUAWEI-L2VPN-PWE3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-L2VPN-PWE3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:50:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, IpAddress, Bits, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, MibIdentifier, Gauge32, Counter32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "IpAddress", "Bits", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter32", "iso", "Counter64")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
h3cL2VpnPwe3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78))
if mibBuilder.loadTexts: h3cL2VpnPwe3.setLastUpdated('200703310000Z')
if mibBuilder.loadTexts: h3cL2VpnPwe3.setOrganization('Huawei 3Com Technologies Co., Ltd.')
class H3cL2VpnVcEncapsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 255))
    namedValues = NamedValues(("frameRelayDlciMartini", 1), ("atmAal5SduVccTransport", 2), ("atmTransparentCellTransport", 3), ("ethernetTagged", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("cem", 8), ("atmN2OneVccCellTransport", 9), ("atmN2OneVpcCellTransport", 10), ("ipLayer2Transport", 11), ("atmOne2OneVccCellMode", 12), ("atmOne2OneVpcCellMode", 13), ("atmAal5PduVccTransport", 14), ("frameRelayPortMode", 15), ("cep", 16), ("saE1oP", 17), ("saT1oP", 18), ("saE3oP", 19), ("saT3oP", 20), ("cESoPsnBasicMode", 21), ("tDMoIPbasicMode", 22), ("l2VpnCESoPSNTDMwithCAS", 23), ("l2VpnTDMoIPTDMwithCAS", 24), ("frameRelayDlci", 25), ("ipInterworking", 64), ("unknown", 255))

h3cL2VpnPwe3ScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 1))
h3cPwVcTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPwVcTrapOpen.setStatus('current')
h3cL2VpnPwe3Table = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2))
h3cPwVcTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1), )
if mibBuilder.loadTexts: h3cPwVcTable.setStatus('current')
h3cPwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcIndex"))
if mibBuilder.loadTexts: h3cPwVcEntry.setStatus('current')
h3cPwVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cPwVcIndex.setStatus('current')
h3cPwVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcID.setStatus('current')
h3cPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 3), H3cL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcType.setStatus('current')
h3cPwVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcPeerAddr.setStatus('current')
h3cPwVcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcMtu.setStatus('current')
hwPwVcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("multiPort", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPwVcCfgType.setStatus('current')
h3cPwVcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPwVcInboundLabel.setStatus('current')
h3cPwVcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPwVcOutboundLabel.setStatus('current')
h3cPwVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcIfIndex.setStatus('current')
h3cPwVcAcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPwVcAcStatus.setStatus('current')
h3cPwVcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPwVcStatus.setStatus('current')
h3cPwVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPwVcRowStatus.setStatus('current')
h3cL2VpnPwe3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3))
h3cPwVcSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3, 1)).setObjects(("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"))
if mibBuilder.loadTexts: h3cPwVcSwitchWtoP.setStatus('current')
h3cPwVcSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3, 2)).setObjects(("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"))
if mibBuilder.loadTexts: h3cPwVcSwitchPtoW.setStatus('current')
h3cPwVcDown = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3, 3)).setObjects(("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"))
if mibBuilder.loadTexts: h3cPwVcDown.setStatus('current')
h3cPwVcUp = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3, 4)).setObjects(("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"))
if mibBuilder.loadTexts: h3cPwVcUp.setStatus('current')
h3cPwVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 78, 3, 5)).setObjects(("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcID"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcType"), ("A3COM-HUAWEI-L2VPN-PWE3-MIB", "h3cPwVcPeerAddr"))
if mibBuilder.loadTexts: h3cPwVcDeleted.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-L2VPN-PWE3-MIB", h3cL2VpnPwe3ScalarGroup=h3cL2VpnPwe3ScalarGroup, h3cPwVcInboundLabel=h3cPwVcInboundLabel, h3cPwVcUp=h3cPwVcUp, h3cPwVcDeleted=h3cPwVcDeleted, h3cPwVcIfIndex=h3cPwVcIfIndex, h3cPwVcAcStatus=h3cPwVcAcStatus, h3cPwVcRowStatus=h3cPwVcRowStatus, h3cPwVcMtu=h3cPwVcMtu, h3cL2VpnPwe3=h3cL2VpnPwe3, h3cPwVcType=h3cPwVcType, h3cPwVcOutboundLabel=h3cPwVcOutboundLabel, h3cPwVcTable=h3cPwVcTable, h3cPwVcPeerAddr=h3cPwVcPeerAddr, h3cPwVcSwitchPtoW=h3cPwVcSwitchPtoW, h3cPwVcEntry=h3cPwVcEntry, h3cPwVcDown=h3cPwVcDown, h3cPwVcTrapOpen=h3cPwVcTrapOpen, h3cL2VpnPwe3Table=h3cL2VpnPwe3Table, h3cPwVcID=h3cPwVcID, hwPwVcCfgType=hwPwVcCfgType, h3cPwVcIndex=h3cPwVcIndex, h3cL2VpnPwe3Notifications=h3cL2VpnPwe3Notifications, PYSNMP_MODULE_ID=h3cL2VpnPwe3, h3cPwVcStatus=h3cPwVcStatus, h3cPwVcSwitchWtoP=h3cPwVcSwitchWtoP, H3cL2VpnVcEncapsType=H3cL2VpnVcEncapsType)
