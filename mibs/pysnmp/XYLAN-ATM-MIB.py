#
# PySNMP MIB module XYLAN-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
LecDataFrameSize, lecIndex = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "LecDataFrameSize", "lecIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Counter64, Bits, Counter32, Unsigned32, IpAddress, iso, TimeTicks, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Counter64", "Bits", "Counter32", "Unsigned32", "IpAddress", "iso", "TimeTicks", "MibIdentifier", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanAtmArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanAtmArch")
class AtmAdminStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("delete", 3), ("create", 4))

class AtmOperStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("inService", 2), ("outOfService", 3), ("loopBack", 4))

class AtmServiceOperStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("enabling", 2), ("enabled", 3), ("unknown", 4))

class AtmConnectionOperStatCodes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("end2EndUp", 2), ("end2EndDown", 3), ("localUpEnd2EndUnknown", 4), ("localDown", 5))

class AtmTransmissionTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("sonetSTS3c", 2), ("ds3", 3), ("atm4b5b", 4), ("atm8b10b", 5), ("e3", 6), ("sonetSTS12c", 7))

class AtmMediaTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("coaxCable", 2), ("singleMode", 3), ("multiMode", 4), ("stp", 5), ("utp", 6))

class AtmTrafficDescrTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("peakrate", 2), ("noClpNoScr", 3), ("clpNoTaggingNoScr", 4), ("clpTaggingNoScr", 5), ("noClpScr", 6), ("clpNoTaggingScr", 7), ("clpTaggingScr", 8))

class XylanAtmLaneAddress(DisplayString):
    pass

class VpiInteger(Integer32):
    pass

class VciInteger(Integer32):
    pass

class LecState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7))

class LecDataFrameFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unspecified", 1), ("aflane8023", 2), ("aflane8025", 3))

class LeArpTableEntryType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("learnedViaControl", 2), ("learnedViaData", 3), ("staticVolatile", 4), ("staticNonVolatile", 5))

class LeArpType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("arpRdType", 2), ("arpEsiType", 3))

atmxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 1))
atmxServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 2))
atmxLayerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 3))
atmxVccStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 4))
atmxVccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 5))
atmxAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 6))
atmxArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 7))
atmxLaneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 8))
atmxCIPstatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 9))
atmxSahiBWGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 11))
atmxLsmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 13))
atmx1483ScaleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 12))
atmxPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1), )
if mibBuilder.loadTexts: atmxPortTable.setStatus('mandatory')
atmxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxPortSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxPortPortIndex"))
if mibBuilder.loadTexts: atmxPortEntry.setStatus('mandatory')
atmxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSlotIndex.setStatus('mandatory')
atmxPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortPortIndex.setStatus('mandatory')
atmxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortDescription.setStatus('mandatory')
atmxPortConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortConnectionType.setStatus('mandatory')
atmxPortTransmissionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 5), AtmTransmissionTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortTransmissionType.setStatus('mandatory')
atmxPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 6), AtmMediaTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMediaType.setStatus('mandatory')
atmxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 7), AtmOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortOperStatus.setStatus('mandatory')
atmxPortUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortUniType.setStatus('mandatory')
atmxPortMaxVCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVCCs.setStatus('mandatory')
atmxPortMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVciBits.setStatus('mandatory')
atmxPortTxSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortTxSegmentSize.setStatus('mandatory')
atmxPortRxSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortRxSegmentSize.setStatus('mandatory')
atmxPortTxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortTxBufferSize.setStatus('mandatory')
atmxPortRxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortRxBufferSize.setStatus('mandatory')
atmxPortUniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortUniPortIndex.setStatus('deprecated')
atmxPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortAddress.setStatus('mandatory')
atmxPortSignalingVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ver30", 1), ("ver31", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingVersion.setStatus('mandatory')
atmxPortSignalingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingVci.setStatus('mandatory')
atmxPortILMIVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortILMIVci.setStatus('mandatory')
atmxPortEnableILMI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnableILMI.setStatus('mandatory')
atmxPortPlScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortPlScramble.setStatus('mandatory')
atmxPortTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortTimingMode.setStatus('mandatory')
atmxPortProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortProtocolType.setStatus('mandatory')
atmxPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortLoopbackConfig.setStatus('mandatory')
atmxPortSSCOPstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSSCOPstatus.setStatus('mandatory')
atmxPortILMIstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortILMIstatus.setStatus('mandatory')
atmxServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1), )
if mibBuilder.loadTexts: atmxServiceTable.setStatus('mandatory')
atmxServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxServiceSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxServicePortIndex"), (0, "XYLAN-ATM-MIB", "atmxServiceNumber"))
if mibBuilder.loadTexts: atmxServiceEntry.setStatus('mandatory')
atmxServiceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceSlotIndex.setStatus('mandatory')
atmxServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServicePortIndex.setStatus('mandatory')
atmxServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceNumber.setStatus('mandatory')
atmxServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceDescription.setStatus('mandatory')
atmxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lanEmulation", 1), ("scaling1483", 2), ("trunking", 4), ("classicalIP", 5), ("ptopBridging", 6), ("vlanCluster", 7), ("laneServiceModule", 8), ("mpoaClient", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceType.setStatus('mandatory')
atmxServiceConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceConnectionType.setStatus('mandatory')
atmxServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 7), AtmServiceOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxServiceOperStatus.setStatus('mandatory')
atmxServiceAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 8), AtmAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceAdmStatus.setStatus('mandatory')
atmxServiceEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("private", 1), ("rfc1483", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceEncapsType.setStatus('mandatory')
atmxServiceArpRequestServer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceArpRequestServer.setStatus('mandatory')
atmxServiceConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceConnections.setStatus('mandatory')
atmxServiceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceAddress.setStatus('mandatory')
atmxServiceAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceAddresses.setStatus('mandatory')
atmxServiceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceVlan.setStatus('mandatory')
atmxServiceSEL = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceSEL.setStatus('mandatory')
atmxServiceLaneCfgTblIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceLaneCfgTblIdx.setStatus('mandatory')
atmxServiceMulticastOutVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceMulticastOutVcc.setStatus('mandatory')
atmxServiceNumVclMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceNumVclMembers.setStatus('mandatory')
atmxServiceVclEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceVclEncapType.setStatus('mandatory')
atmxServiceSahiBwgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxServiceSahiBwgNum.setStatus('mandatory')
atmxLayerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1), )
if mibBuilder.loadTexts: atmxLayerStatsTable.setStatus('mandatory')
atmxLayerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLayerStatsSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxLayerStatsPortIndex"))
if mibBuilder.loadTexts: atmxLayerStatsEntry.setStatus('mandatory')
atmxLayerStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsSlotIndex.setStatus('mandatory')
atmxLayerStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsPortIndex.setStatus('mandatory')
atmxLayerStatsTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxSDUs.setStatus('mandatory')
atmxLayerStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCells.setStatus('mandatory')
atmxLayerStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxOctets.setStatus('mandatory')
atmxLayerStatsRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUs.setStatus('mandatory')
atmxLayerStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCells.setStatus('mandatory')
atmxLayerStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxOctets.setStatus('mandatory')
atmxLayerStatsTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxSDUDiscards.setStatus('mandatory')
atmxLayerStatsTxSDUErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxSDUErrors.setStatus('mandatory')
atmxLayerStatsTxSDUNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxSDUNoBuffers.setStatus('mandatory')
atmxLayerStatsTxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCellDiscards.setStatus('mandatory')
atmxLayerStatsTxCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCellErrors.setStatus('mandatory')
atmxLayerStatsTxCellNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCellNoBuffers.setStatus('mandatory')
atmxLayerStatsRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUDiscards.setStatus('mandatory')
atmxLayerStatsRxSDUErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUErrors.setStatus('mandatory')
atmxLayerStatsRxSDUInvalidSz = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUInvalidSz.setStatus('mandatory')
atmxLayerStatsRxSDUNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUNoBuffers.setStatus('mandatory')
atmxLayerStatsRxSDUTrash = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUTrash.setStatus('mandatory')
atmxLayerStatsRxSDUCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxSDUCrcErrors.setStatus('mandatory')
atmxLayerStatsRxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellDiscards.setStatus('mandatory')
atmxLayerStatsRxCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellErrors.setStatus('mandatory')
atmxLayerStatsRxCellNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellNoBuffers.setStatus('mandatory')
atmxLayerStatsRxCellTrash = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellTrash.setStatus('mandatory')
atmxLayerStatsRxCellCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellCrcErrors.setStatus('mandatory')
atmxVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1), )
if mibBuilder.loadTexts: atmxVccStatsTable.setStatus('mandatory')
atmxVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxVccStatsSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxVccStatsPortIndex"), (0, "XYLAN-ATM-MIB", "atmxVccStatsVci"))
if mibBuilder.loadTexts: atmxVccStatsEntry.setStatus('mandatory')
atmxVccStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsSlotIndex.setStatus('mandatory')
atmxVccStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsPortIndex.setStatus('mandatory')
atmxVccStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsVci.setStatus('mandatory')
atmxVccStatsTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUs.setStatus('mandatory')
atmxVccStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCells.setStatus('mandatory')
atmxVccStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxOctets.setStatus('mandatory')
atmxVccStatsRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUs.setStatus('mandatory')
atmxVccStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCells.setStatus('mandatory')
atmxVccStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxOctets.setStatus('mandatory')
atmxVccStatsTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUDiscards.setStatus('mandatory')
atmxVccStatsTxSDUErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUErrors.setStatus('mandatory')
atmxVccStatsTxSDUNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUNoBuffers.setStatus('mandatory')
atmxVccStatsTxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCellDiscards.setStatus('mandatory')
atmxVccStatsTxCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCellErrors.setStatus('mandatory')
atmxVccStatsTxCellNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCellNoBuffers.setStatus('mandatory')
atmxVccStatsRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUDiscards.setStatus('mandatory')
atmxVccStatsRxSDUErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUErrors.setStatus('mandatory')
atmxVccStatsRxSDUInvalidSz = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUInvalidSz.setStatus('mandatory')
atmxVccStatsRxSDUNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUNoBuffers.setStatus('mandatory')
atmxVccStatsRxSDUTrash = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUTrash.setStatus('mandatory')
atmxVccStatsRxSDUCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUCrcErrors.setStatus('mandatory')
atmxVccStatsRxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCellDiscards.setStatus('mandatory')
atmxVccStatsRxCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCellErrors.setStatus('mandatory')
atmxVccStatsRxCellNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCellNoBuffers.setStatus('mandatory')
atmxVccStatsRxCellTrash = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCellTrash.setStatus('mandatory')
atmxVccStatsRxCellCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCellCrcErrors.setStatus('mandatory')
atmxVccTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1), )
if mibBuilder.loadTexts: atmxVccTable.setStatus('mandatory')
atmxVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxVccSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxVccPortIndex"), (0, "XYLAN-ATM-MIB", "atmxVccVci"))
if mibBuilder.loadTexts: atmxVccEntry.setStatus('mandatory')
atmxVccSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccSlotIndex.setStatus('mandatory')
atmxVccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccPortIndex.setStatus('mandatory')
atmxVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccVpi.setStatus('mandatory')
atmxVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccVci.setStatus('mandatory')
atmxVccDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccDescription.setStatus('mandatory')
atmxVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcc", 1), ("vpc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccConnType.setStatus('mandatory')
atmxVccCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccCircuitType.setStatus('mandatory')
atmxVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 8), AtmConnectionOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccOperStatus.setStatus('mandatory')
atmxVccUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccUpTime.setStatus('mandatory')
atmxVccDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccDownTime.setStatus('mandatory')
atmxVccTransmitMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccTransmitMaxFrameSize.setStatus('mandatory')
atmxVccReceiveMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 32678))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccReceiveMaxFrameSize.setStatus('mandatory')
atmxVccRequestedTransmitTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 13), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficDescriptor.setStatus('mandatory')
atmxVccRequestedTransmitTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficDescriptorParam1.setStatus('mandatory')
atmxVccRequestedTransmitTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficDescriptorParam2.setStatus('mandatory')
atmxVccRequestedTransmitTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficDescriptorParam3.setStatus('mandatory')
atmxVccRequestedTransmitTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficQoSClass.setStatus('mandatory')
atmxVccRequestedTransmitTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedTransmitTrafficBestEffort.setStatus('mandatory')
atmxVccRequestedReceiveTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 19), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficDescriptor.setStatus('mandatory')
atmxVccRequestedReceiveTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficDescriptorParam1.setStatus('mandatory')
atmxVccRequestedReceiveTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficDescriptorParam2.setStatus('mandatory')
atmxVccRequestedReceiveTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficDescriptorParam3.setStatus('mandatory')
atmxVccRequestedReceiveTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficQoSClass.setStatus('mandatory')
atmxVccRequestedReceiveTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccRequestedReceiveTrafficBestEffort.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 25), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficDescriptor.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficDescriptorParam1.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficDescriptorParam2.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficDescriptorParam3.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficQoSClass.setStatus('mandatory')
atmxVccAcceptableTransmitTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableTransmitTrafficBestEffort.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 31), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficDescriptor.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficDescriptorParam1.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficDescriptorParam2.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficDescriptorParam3.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficQoSClass.setStatus('mandatory')
atmxVccAcceptableReceiveTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAcceptableReceiveTrafficBestEffort.setStatus('mandatory')
atmxVccActualTransmitTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 37), AtmTrafficDescrTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficDescriptor.setStatus('mandatory')
atmxVccActualTransmitTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficDescriptorParam1.setStatus('mandatory')
atmxVccActualTransmitTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficDescriptorParam2.setStatus('mandatory')
atmxVccActualTransmitTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficDescriptorParam3.setStatus('mandatory')
atmxVccActualTransmitTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficQoSClass.setStatus('mandatory')
atmxVccActualTransmitTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualTransmitTrafficBestEffort.setStatus('mandatory')
atmxVccActualReceiveTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 43), AtmTrafficDescrTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficDescriptor.setStatus('mandatory')
atmxVccActualReceiveTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficDescriptorParam1.setStatus('mandatory')
atmxVccActualReceiveTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficDescriptorParam2.setStatus('mandatory')
atmxVccActualReceiveTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficDescriptorParam3.setStatus('mandatory')
atmxVccActualReceiveTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficQoSClass.setStatus('mandatory')
atmxVccActualReceiveTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccActualReceiveTrafficBestEffort.setStatus('mandatory')
atmxVccAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 49), AtmAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxVccAdmStatus.setStatus('mandatory')
atmxVccServiceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccServiceUsed.setStatus('mandatory')
atmxVccConnectionUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccConnectionUsed.setStatus('mandatory')
atmxAddressTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1), )
if mibBuilder.loadTexts: atmxAddressTable.setStatus('mandatory')
atmxAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxAddressIndex"))
if mibBuilder.loadTexts: atmxAddressEntry.setStatus('mandatory')
atmxAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxAddressIndex.setStatus('mandatory')
atmxAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAtmAddress.setStatus('mandatory')
atmxAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("arpServer", 1), ("nonArpServer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressType.setStatus('mandatory')
atmxAddressVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxAddressVpi.setStatus('mandatory')
atmxAddressVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressVci.setStatus('mandatory')
atmxAddressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressDescription.setStatus('mandatory')
atmxAddressTransmitMaxSDU = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 32678))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressTransmitMaxSDU.setStatus('mandatory')
atmxAddressReceiveMaxSDU = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 32678))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressReceiveMaxSDU.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 9), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficDescriptor.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficDescriptorParam1.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficDescriptorParam2.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficDescriptorParam3.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficQoSClass.setStatus('mandatory')
atmxAddressRequestedTransmitTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedTransmitTrafficBestEffort.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 15), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficDescriptor.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficDescriptorParam1.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficDescriptorParam2.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficDescriptorParam3.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficQoSClass.setStatus('mandatory')
atmxAddressRequestedReceiveTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressRequestedReceiveTrafficBestEffort.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 21), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficDescriptor.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficDescriptorParam1.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficDescriptorParam2.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficDescriptorParam3.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficQoSClass.setStatus('mandatory')
atmxAddressAcceptableTransmitTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableTransmitTrafficBestEffort.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 27), AtmTrafficDescrTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficDescriptor.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficDescriptorParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficDescriptorParam1.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficDescriptorParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficDescriptorParam2.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficDescriptorParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficDescriptorParam3.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficQoSClass.setStatus('mandatory')
atmxAddressAcceptableReceiveTrafficBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAcceptableReceiveTrafficBestEffort.setStatus('mandatory')
atmxAddressAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 33), AtmAdminStatCodes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxAddressAdmStatus.setStatus('mandatory')
atmxAddressServiceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxAddressServiceUsed.setStatus('mandatory')
atmxAddressAddrUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 6, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxAddressAddrUsed.setStatus('mandatory')
atmxArpTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1), )
if mibBuilder.loadTexts: atmxArpTable.setStatus('mandatory')
atmxArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxArpIndex"))
if mibBuilder.loadTexts: atmxArpEntry.setStatus('mandatory')
atmxArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpIndex.setStatus('mandatory')
atmxArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpIPAddress.setStatus('mandatory')
atmxArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpAtmAddress.setStatus('mandatory')
atmxArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpVci.setStatus('mandatory')
atmxArpTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpTimeToLive.setStatus('mandatory')
atmxArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxArpType.setStatus('mandatory')
atmLecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1), )
if mibBuilder.loadTexts: atmLecConfigTable.setStatus('mandatory')
atmLecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLecConfigIndex"))
if mibBuilder.loadTexts: atmLecConfigEntry.setStatus('mandatory')
atmxLecConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecConfigIndex.setStatus('mandatory')
atmLecConfigLecsAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 2), XylanAtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigLecsAtmAddress.setStatus('mandatory')
atmLecConfigUseDefaultLecsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigUseDefaultLecsAddr.setStatus('mandatory')
atmLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecRowStatus.setStatus('mandatory')
atmLecRowInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecRowInUse.setStatus('mandatory')
atmLecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigMode.setStatus('mandatory')
atmLecConfigLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 7), LecDataFrameFormat().clone('aflane8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigLanType.setStatus('mandatory')
atmLecConfigMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 8), LecDataFrameSize().clone('max4544')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigMaxDataFrameSize.setStatus('mandatory')
atmLecConfigLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigLanName.setStatus('mandatory')
atmLecConfigLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 10), XylanAtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecConfigLesAtmAddress.setStatus('mandatory')
atmLecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecControlTimeout.setStatus('mandatory')
atmLecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecMaxUnknownFrameCount.setStatus('mandatory')
atmLecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecMaxUnknownFrameTime.setStatus('mandatory')
atmLecVccTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 14), Integer32().clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecVccTimeoutPeriod.setStatus('mandatory')
atmLecMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecMaxRetryCount.setStatus('mandatory')
atmLecAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecAgingTime.setStatus('mandatory')
atmLecForwardDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecForwardDelayTime.setStatus('mandatory')
atmLecExpectedArpResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecExpectedArpResponseTime.setStatus('mandatory')
atmLecFlushTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecFlushTimeOut.setStatus('mandatory')
atmLecPathSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecPathSwitchingDelay.setStatus('mandatory')
atmLecUseForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecUseForwardDelay.setStatus('mandatory')
atmLecUseTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecUseTranslation.setStatus('mandatory')
atmLecSrBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecSrBridgeNum.setStatus('mandatory')
atmLecSrRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLecSrRingNum.setStatus('mandatory')
atmLecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2), )
if mibBuilder.loadTexts: atmLecStatusTable.setStatus('mandatory')
atmLecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLecStatusSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxLecStatusPortIndex"), (0, "XYLAN-ATM-MIB", "atmxLecStatusServiceNum"))
if mibBuilder.loadTexts: atmLecStatusEntry.setStatus('mandatory')
atmxLecStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatusSlotIndex.setStatus('mandatory')
atmxLecStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatusPortIndex.setStatus('mandatory')
atmxLecStatusServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatusServiceNum.setStatus('mandatory')
atmLecPrimaryAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 4), XylanAtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecPrimaryAtmAddress.setStatus('mandatory')
atmLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecID.setStatus('mandatory')
atmLecInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 6), LecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecInterfaceState.setStatus('mandatory')
atmLecLastFailureRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("undefinedError", 3), ("versionNotSupported", 4), ("invalidRequestParameters", 5), ("duplicateLanDestination", 6), ("duplicateAtmAddress", 7), ("insufficientResources", 8), ("accessDenied", 9), ("invalidRequesterId", 10), ("invalidLanDestination", 11), ("invalidAtmAddress", 12), ("noConfiguration", 13), ("leConfigureError", 14), ("insufficientInformation", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecLastFailureRespCode.setStatus('mandatory')
atmLecLastFailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 8), LecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecLastFailureState.setStatus('mandatory')
atmLecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecProtocol.setStatus('mandatory')
atmLecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecVersion.setStatus('mandatory')
atmLecTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecTopologyChange.setStatus('mandatory')
atmLecConfigServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 12), XylanAtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecConfigServerAtmAddress.setStatus('mandatory')
atmLecConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gotAddressViaIlmi", 1), ("usedWellKnownAddress", 2), ("usedLecsPvc", 3), ("didNotUseLecs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecConfigSource.setStatus('mandatory')
atmLecActualLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 14), LecDataFrameFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecActualLanType.setStatus('mandatory')
atmLecActualMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 15), LecDataFrameSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecActualMaxDataFrameSize.setStatus('mandatory')
atmLecActualLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecActualLanName.setStatus('mandatory')
atmLecActualLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 17), XylanAtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecActualLesAtmAddress.setStatus('mandatory')
atmLecProxyClient = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecProxyClient.setStatus('mandatory')
atmLecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3), )
if mibBuilder.loadTexts: atmLecStatisticsTable.setStatus('mandatory')
atmLecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLecStatsSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxLecStatsPortIndex"), (0, "XYLAN-ATM-MIB", "atmxLecStatsServiceNum"))
if mibBuilder.loadTexts: atmLecStatisticsEntry.setStatus('mandatory')
atmxLecStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsSlotIndex.setStatus('mandatory')
atmxLecStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsPortIndex.setStatus('mandatory')
atmxLecStatsServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsServiceNum.setStatus('mandatory')
atmLecArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecArpRequestsOut.setStatus('mandatory')
atmLecArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecArpRequestsIn.setStatus('mandatory')
atmLecArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecArpRepliesOut.setStatus('mandatory')
atmLecArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecArpRepliesIn.setStatus('mandatory')
atmLecControlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlFramesOut.setStatus('mandatory')
atmLecControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlFramesIn.setStatus('mandatory')
atmLecSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecSvcFailures.setStatus('mandatory')
atmLecServerVccTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4), )
if mibBuilder.loadTexts: atmLecServerVccTable.setStatus('mandatory')
atmLecServerVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLecSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxLecPortIndex"), (0, "XYLAN-ATM-MIB", "atmxLecServiceNum"))
if mibBuilder.loadTexts: atmLecServerVccEntry.setStatus('mandatory')
atmxLecSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecSlotIndex.setStatus('mandatory')
atmxLecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecPortIndex.setStatus('mandatory')
atmxLecServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecServiceNum.setStatus('mandatory')
atmLecConfigDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 4), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecConfigDirectVpi.setStatus('mandatory')
atmLecConfigDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 5), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecConfigDirectVci.setStatus('mandatory')
atmLecControlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 6), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlDirectVpi.setStatus('mandatory')
atmLecControlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 7), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlDirectVci.setStatus('mandatory')
atmLecControlDistributeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 8), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlDistributeVpi.setStatus('mandatory')
atmLecControlDistributeVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 9), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecControlDistributeVci.setStatus('mandatory')
atmLecMulticastSendVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 10), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecMulticastSendVpi.setStatus('mandatory')
atmLecMulticastSendVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 11), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecMulticastSendVci.setStatus('mandatory')
atmLecMulticastForwardVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 12), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecMulticastForwardVpi.setStatus('mandatory')
atmLecMulticastForwardVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 4, 1, 13), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLecMulticastForwardVci.setStatus('mandatory')
atmLeArpTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5), )
if mibBuilder.loadTexts: atmLeArpTable.setStatus('mandatory')
atmLeArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxLeArpSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxLeArpPortIndex"), (0, "XYLAN-ATM-MIB", "atmxLeArpServiceNum"), (0, "XYLAN-ATM-MIB", "atmLeArpIndex"))
if mibBuilder.loadTexts: atmLeArpEntry.setStatus('mandatory')
atmxLeArpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLeArpSlotIndex.setStatus('mandatory')
atmxLeArpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLeArpPortIndex.setStatus('mandatory')
atmxLeArpServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLeArpServiceNum.setStatus('mandatory')
atmLeArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpIndex.setStatus('mandatory')
atmLeArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpMacAddress.setStatus('mandatory')
atmLeArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 6), XylanAtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpAtmAddress.setStatus('mandatory')
atmLeArpIsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpIsRemoteAddress.setStatus('mandatory')
atmLeArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 8), LeArpTableEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpEntryType.setStatus('mandatory')
atmLeArpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 9), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpVpi.setStatus('mandatory')
atmLeArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 10), VciInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpVci.setStatus('mandatory')
atmLeArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpAge.setStatus('mandatory')
atmLeArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 5, 1, 12), LeArpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLeArpType.setStatus('mandatory')
xylanLecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6), )
if mibBuilder.loadTexts: xylanLecConfigTable.setStatus('mandatory')
xylanLecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6, 1), ).setIndexNames((0, "LAN-EMULATION-CLIENT-MIB", "lecIndex"))
if mibBuilder.loadTexts: xylanLecConfigEntry.setStatus('mandatory')
xylanLecSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanLecSlotNumber.setStatus('mandatory')
xylanLecPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanLecPortNumber.setStatus('mandatory')
xylanLecServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanLecServiceNumber.setStatus('mandatory')
xylanLecGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 8, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanLecGroupNumber.setStatus('mandatory')
atmCIPStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1), )
if mibBuilder.loadTexts: atmCIPStatisticsTable.setStatus('mandatory')
atmCIPStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxCIPSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxCIPPortIndex"), (0, "XYLAN-ATM-MIB", "atmxCIPServiceNum"))
if mibBuilder.loadTexts: atmCIPStatisticsEntry.setStatus('mandatory')
atmxCIPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCIPSlotIndex.setStatus('mandatory')
atmxCIPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCIPPortIndex.setStatus('mandatory')
atmxCIPServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCIPServiceNum.setStatus('mandatory')
atmCIPpktsFromIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPpktsFromIP.setStatus('mandatory')
atmCIPBroadcastPktFromIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPBroadcastPktFromIP.setStatus('mandatory')
atmCIPPktsFromIPDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsFromIPDiscard.setStatus('mandatory')
atmCIPPktsToIP = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsToIP.setStatus('mandatory')
atmCIPPktsFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsFromNet.setStatus('mandatory')
atmCIPPktsFromNetDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsFromNetDiscard.setStatus('mandatory')
atmCIPArpRespFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPArpRespFromNet.setStatus('mandatory')
atmCIPArpReqFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPArpReqFromNet.setStatus('mandatory')
atmCIPInvArpRespFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpRespFromNet.setStatus('mandatory')
atmCIPInvArpReqFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpReqFromNet.setStatus('mandatory')
atmCIPInvArpNakFromNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpNakFromNet.setStatus('mandatory')
atmCIPPktsToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsToNet.setStatus('mandatory')
atmCIPPktsToNetDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPPktsToNetDiscard.setStatus('mandatory')
atmCIPArpRespToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPArpRespToNet.setStatus('mandatory')
atmCIPArpReqToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPArpReqToNet.setStatus('mandatory')
atmCIPInvArpRespToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpRespToNet.setStatus('mandatory')
atmCIPInvArpReqToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpReqToNet.setStatus('mandatory')
atmCIPInvArpNakToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 9, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCIPInvArpNakToNet.setStatus('mandatory')
atmGpToVcMappingTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1), )
if mibBuilder.loadTexts: atmGpToVcMappingTable.setStatus('mandatory')
atmGpToVcMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxGpToVcSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxGpToVcPortIndex"), (0, "XYLAN-ATM-MIB", "atmxGpToVcServiceNum"), (0, "XYLAN-ATM-MIB", "atmxGpToVcGroupId"))
if mibBuilder.loadTexts: atmGpToVcMappingEntry.setStatus('mandatory')
atmxGpToVcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcSlotIndex.setStatus('mandatory')
atmxGpToVcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcPortIndex.setStatus('mandatory')
atmxGpToVcServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcServiceNum.setStatus('mandatory')
atmxGpToVcGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcGroupId.setStatus('mandatory')
atmxGpToVcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxGpToVcVpi.setStatus('mandatory')
atmxGpToVcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxGpToVcVci.setStatus('mandatory')
atmxGpToVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxGpToVcRowStatus.setStatus('mandatory')
atmGpToVcBulkMappingTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2), )
if mibBuilder.loadTexts: atmGpToVcBulkMappingTable.setStatus('mandatory')
atmGpToVcBulkMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxGpToVcBulkSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxGpToVcBulkPortIndex"), (0, "XYLAN-ATM-MIB", "atmxGpToVcBulkServiceNum"))
if mibBuilder.loadTexts: atmGpToVcBulkMappingEntry.setStatus('mandatory')
atmxGpToVcBulkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcBulkSlotIndex.setStatus('mandatory')
atmxGpToVcBulkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcBulkPortIndex.setStatus('mandatory')
atmxGpToVcBulkServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcBulkServiceNum.setStatus('mandatory')
atmxGpToVcBulkNumOfNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxGpToVcBulkNumOfNodes.setStatus('mandatory')
atmxGpToVcBulkMappingList = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 12, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxGpToVcBulkMappingList.setStatus('mandatory')
atmxBwgTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1), )
if mibBuilder.loadTexts: atmxBwgTable.setStatus('mandatory')
atmxBwgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxBwgSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxBwgPortIndex"), (0, "XYLAN-ATM-MIB", "atmxBwgNum"))
if mibBuilder.loadTexts: atmxBwgEntry.setStatus('mandatory')
atmxBwgSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxBwgSlotIndex.setStatus('mandatory')
atmxBwgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxBwgPortIndex.setStatus('mandatory')
atmxBwgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxBwgNum.setStatus('mandatory')
atmxBwgBE = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxBwgBE.setStatus('mandatory')
atmxBwgPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(535, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxBwgPcr.setStatus('mandatory')
atmxBwgScr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxBwgScr.setStatus('mandatory')
atmxBwgMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxBwgMbs.setStatus('mandatory')
atmxBwgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 1, 1, 8), AtmOperStatCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxBwgOperStatus.setStatus('mandatory')
atmxBwgServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 2), )
if mibBuilder.loadTexts: atmxBwgServiceTable.setStatus('mandatory')
atmxBwgServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 2, 1), ).setIndexNames((0, "XYLAN-ATM-MIB", "atmxBwgSlotIndex"), (0, "XYLAN-ATM-MIB", "atmxBwgPortIndex"), (0, "XYLAN-ATM-MIB", "atmxBwgNum"), (0, "XYLAN-ATM-MIB", "atmxBwgServiceNum"))
if mibBuilder.loadTexts: atmxBwgServiceEntry.setStatus('mandatory')
atmxBwgServiceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxBwgServiceNum.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-ATM-MIB", atmxVccActualReceiveTrafficDescriptorParam2=atmxVccActualReceiveTrafficDescriptorParam2, atmxGpToVcGroupId=atmxGpToVcGroupId, atmxLayerStatsTxCellDiscards=atmxLayerStatsTxCellDiscards, atmxVccVci=atmxVccVci, atmxAddressTransmitMaxSDU=atmxAddressTransmitMaxSDU, atmxLayerStatsRxCellTrash=atmxLayerStatsRxCellTrash, atmxVccActualTransmitTrafficDescriptor=atmxVccActualTransmitTrafficDescriptor, atmxVccReceiveMaxFrameSize=atmxVccReceiveMaxFrameSize, atmCIPInvArpRespToNet=atmCIPInvArpRespToNet, atmLecArpRequestsOut=atmLecArpRequestsOut, atmxServicePortIndex=atmxServicePortIndex, atmxServiceNumber=atmxServiceNumber, atmxPortDescription=atmxPortDescription, atmxVccSlotIndex=atmxVccSlotIndex, atmxVccAcceptableTransmitTrafficQoSClass=atmxVccAcceptableTransmitTrafficQoSClass, atmxVccStatsRxCellTrash=atmxVccStatsRxCellTrash, atmLecStatusEntry=atmLecStatusEntry, atmxAddressRequestedReceiveTrafficDescriptorParam3=atmxAddressRequestedReceiveTrafficDescriptorParam3, atmxVccActualReceiveTrafficQoSClass=atmxVccActualReceiveTrafficQoSClass, VciInteger=VciInteger, atmLeArpTable=atmLeArpTable, atmxLayerStatsTable=atmxLayerStatsTable, atmxVccActualReceiveTrafficDescriptorParam3=atmxVccActualReceiveTrafficDescriptorParam3, atmxLayerStatsTxSDUs=atmxLayerStatsTxSDUs, atmxServiceSahiBwgNum=atmxServiceSahiBwgNum, atmxAddressRequestedTransmitTrafficDescriptorParam1=atmxAddressRequestedTransmitTrafficDescriptorParam1, atmxPortMaxVCCs=atmxPortMaxVCCs, atmLecRowInUse=atmLecRowInUse, atmxVccAcceptableReceiveTrafficDescriptor=atmxVccAcceptableReceiveTrafficDescriptor, atmxLayerStatsTxCells=atmxLayerStatsTxCells, atmxLayerStatsTxCellNoBuffers=atmxLayerStatsTxCellNoBuffers, atmxAddressRequestedTransmitTrafficDescriptorParam3=atmxAddressRequestedTransmitTrafficDescriptorParam3, atmLeArpMacAddress=atmLeArpMacAddress, atmLecProtocol=atmLecProtocol, atmxVccAcceptableReceiveTrafficQoSClass=atmxVccAcceptableReceiveTrafficQoSClass, atmxAddressType=atmxAddressType, atmxVccTransmitMaxFrameSize=atmxVccTransmitMaxFrameSize, atmxServiceTable=atmxServiceTable, atmxAddressAcceptableReceiveTrafficBestEffort=atmxAddressAcceptableReceiveTrafficBestEffort, atmxPortAddress=atmxPortAddress, atmxVccStatsEntry=atmxVccStatsEntry, atmxVccRequestedTransmitTrafficDescriptor=atmxVccRequestedTransmitTrafficDescriptor, atmxLayerStatsTxCellErrors=atmxLayerStatsTxCellErrors, atmLecMulticastSendVci=atmLecMulticastSendVci, atmxVccStatsSlotIndex=atmxVccStatsSlotIndex, atmCIPArpRespFromNet=atmCIPArpRespFromNet, atmxVccAcceptableReceiveTrafficDescriptorParam3=atmxVccAcceptableReceiveTrafficDescriptorParam3, xylanLecPortNumber=xylanLecPortNumber, atmxServiceLaneCfgTblIdx=atmxServiceLaneCfgTblIdx, atmxVccAdmStatus=atmxVccAdmStatus, atmLecAgingTime=atmLecAgingTime, atmxPortProtocolType=atmxPortProtocolType, atmCIPInvArpReqToNet=atmCIPInvArpReqToNet, atmLecConfigSource=atmLecConfigSource, atmxLayerStatsRxSDUInvalidSz=atmxLayerStatsRxSDUInvalidSz, atmLecID=atmLecID, atmxVccRequestedReceiveTrafficQoSClass=atmxVccRequestedReceiveTrafficQoSClass, atmLecServerVccTable=atmLecServerVccTable, atmLecRowStatus=atmLecRowStatus, atmxAddressRequestedReceiveTrafficDescriptor=atmxAddressRequestedReceiveTrafficDescriptor, LeArpTableEntryType=LeArpTableEntryType, atmxBwgScr=atmxBwgScr, atmxVccStatsRxCellNoBuffers=atmxVccStatsRxCellNoBuffers, atmxLecStatusPortIndex=atmxLecStatusPortIndex, atmxLayerStatsRxCellCrcErrors=atmxLayerStatsRxCellCrcErrors, atmxCIPPortIndex=atmxCIPPortIndex, atmxAddressRequestedReceiveTrafficDescriptorParam1=atmxAddressRequestedReceiveTrafficDescriptorParam1, atmLecConfigLecsAtmAddress=atmLecConfigLecsAtmAddress, atmLecActualLanType=atmLecActualLanType, atmxBwgPortIndex=atmxBwgPortIndex, atmxVccStatsTxSDUs=atmxVccStatsTxSDUs, atmxVccRequestedTransmitTrafficDescriptorParam2=atmxVccRequestedTransmitTrafficDescriptorParam2, atmxServiceArpRequestServer=atmxServiceArpRequestServer, atmxVccAcceptableReceiveTrafficBestEffort=atmxVccAcceptableReceiveTrafficBestEffort, atmxVccActualReceiveTrafficDescriptor=atmxVccActualReceiveTrafficDescriptor, atmCIPPktsToIP=atmCIPPktsToIP, atmxServiceNumVclMembers=atmxServiceNumVclMembers, atmxPortUniType=atmxPortUniType, atmxVccRequestedTransmitTrafficDescriptorParam1=atmxVccRequestedTransmitTrafficDescriptorParam1, atmxVccRequestedReceiveTrafficDescriptorParam2=atmxVccRequestedReceiveTrafficDescriptorParam2, atmxAddressIndex=atmxAddressIndex, atmxVccActualTransmitTrafficBestEffort=atmxVccActualTransmitTrafficBestEffort, atmxVccUpTime=atmxVccUpTime, atmLecConfigUseDefaultLecsAddr=atmLecConfigUseDefaultLecsAddr, atmxVccActualReceiveTrafficDescriptorParam1=atmxVccActualReceiveTrafficDescriptorParam1, atmLecConfigLanType=atmLecConfigLanType, atmxAddressRequestedTransmitTrafficDescriptorParam2=atmxAddressRequestedTransmitTrafficDescriptorParam2, atmxGpToVcSlotIndex=atmxGpToVcSlotIndex, atmxLayerStatsTxSDUDiscards=atmxLayerStatsTxSDUDiscards, atmGpToVcMappingTable=atmGpToVcMappingTable, atmxVccStatsRxCellDiscards=atmxVccStatsRxCellDiscards, atmxLayerStatsEntry=atmxLayerStatsEntry, atmxVccStatsRxSDUNoBuffers=atmxVccStatsRxSDUNoBuffers, atmxAddressAdmStatus=atmxAddressAdmStatus, atmxLayerStatsRxCellNoBuffers=atmxLayerStatsRxCellNoBuffers, atmxLayerStatsRxCellDiscards=atmxLayerStatsRxCellDiscards, atmLeArpVpi=atmLeArpVpi, atmCIPPktsToNet=atmCIPPktsToNet, atmLecMulticastForwardVpi=atmLecMulticastForwardVpi, atmLecControlDistributeVpi=atmLecControlDistributeVpi, atmCIPPktsFromNetDiscard=atmCIPPktsFromNetDiscard, AtmServiceOperStatCodes=AtmServiceOperStatCodes, atmx1483ScaleGroup=atmx1483ScaleGroup, atmxPortMaxVciBits=atmxPortMaxVciBits, atmxAddressVpi=atmxAddressVpi, atmxAddressRequestedTransmitTrafficQoSClass=atmxAddressRequestedTransmitTrafficQoSClass, atmxPortSignalingVersion=atmxPortSignalingVersion, atmxServiceDescription=atmxServiceDescription, atmxVccRequestedReceiveTrafficDescriptor=atmxVccRequestedReceiveTrafficDescriptor, atmxLayerStatsRxSDUTrash=atmxLayerStatsRxSDUTrash, atmxLayerStatsTxOctets=atmxLayerStatsTxOctets, atmxVccStatsTxSDUDiscards=atmxVccStatsTxSDUDiscards, atmxVccRequestedTransmitTrafficBestEffort=atmxVccRequestedTransmitTrafficBestEffort, atmxVccStatsRxCellCrcErrors=atmxVccStatsRxCellCrcErrors, atmxLayerStatsGroup=atmxLayerStatsGroup, atmxBwgNum=atmxBwgNum, atmCIPInvArpNakToNet=atmCIPInvArpNakToNet, atmxLeArpPortIndex=atmxLeArpPortIndex, atmxPortTable=atmxPortTable, atmxLayerStatsRxCellErrors=atmxLayerStatsRxCellErrors, LecState=LecState, atmxAddressAcceptableReceiveTrafficDescriptor=atmxAddressAcceptableReceiveTrafficDescriptor, atmCIPpktsFromIP=atmCIPpktsFromIP, atmLecActualLanName=atmLecActualLanName, atmxLecStatusServiceNum=atmxLecStatusServiceNum, atmxAddressEntry=atmxAddressEntry, atmxArpIndex=atmxArpIndex, atmLecStatusTable=atmLecStatusTable, atmxAddressRequestedReceiveTrafficBestEffort=atmxAddressRequestedReceiveTrafficBestEffort, atmxLecSlotIndex=atmxLecSlotIndex, atmxAddressAcceptableTransmitTrafficBestEffort=atmxAddressAcceptableTransmitTrafficBestEffort, atmxLsmGroup=atmxLsmGroup, atmxGpToVcBulkPortIndex=atmxGpToVcBulkPortIndex, atmxAddressReceiveMaxSDU=atmxAddressReceiveMaxSDU, atmLecMulticastSendVpi=atmLecMulticastSendVpi, atmxVccAcceptableTransmitTrafficDescriptorParam3=atmxVccAcceptableTransmitTrafficDescriptorParam3, atmGpToVcMappingEntry=atmGpToVcMappingEntry, atmLecControlFramesOut=atmLecControlFramesOut, atmxVccActualTransmitTrafficQoSClass=atmxVccActualTransmitTrafficQoSClass, atmxVccStatsGroup=atmxVccStatsGroup, atmLeArpAtmAddress=atmLeArpAtmAddress, atmxPortRxBufferSize=atmxPortRxBufferSize, atmxVccStatsRxCellErrors=atmxVccStatsRxCellErrors, AtmTransmissionTypes=AtmTransmissionTypes, atmxPortEnableILMI=atmxPortEnableILMI, atmCIPInvArpReqFromNet=atmCIPInvArpReqFromNet, atmxVccRequestedReceiveTrafficDescriptorParam3=atmxVccRequestedReceiveTrafficDescriptorParam3, atmxVccRequestedTransmitTrafficDescriptorParam3=atmxVccRequestedTransmitTrafficDescriptorParam3, atmxServiceEntry=atmxServiceEntry, atmxGpToVcVpi=atmxGpToVcVpi, atmxLecConfigIndex=atmxLecConfigIndex, AtmConnectionOperStatCodes=AtmConnectionOperStatCodes, atmxVccActualReceiveTrafficBestEffort=atmxVccActualReceiveTrafficBestEffort, atmLecConfigEntry=atmLecConfigEntry, atmLecConfigDirectVci=atmLecConfigDirectVci, atmLecArpRequestsIn=atmLecArpRequestsIn, atmxVccAcceptableTransmitTrafficDescriptorParam1=atmxVccAcceptableTransmitTrafficDescriptorParam1, atmxAddressAcceptableTransmitTrafficDescriptorParam3=atmxAddressAcceptableTransmitTrafficDescriptorParam3, atmCIPArpRespToNet=atmCIPArpRespToNet, atmLecFlushTimeOut=atmLecFlushTimeOut, XylanAtmLaneAddress=XylanAtmLaneAddress, atmCIPArpReqToNet=atmCIPArpReqToNet, atmxArpGroup=atmxArpGroup, atmLeArpEntryType=atmLeArpEntryType, atmxAddressAcceptableTransmitTrafficDescriptor=atmxAddressAcceptableTransmitTrafficDescriptor, LecDataFrameFormat=LecDataFrameFormat, atmxGpToVcRowStatus=atmxGpToVcRowStatus, atmxBwgBE=atmxBwgBE, atmxVccPortIndex=atmxVccPortIndex, atmxLayerStatsTxSDUNoBuffers=atmxLayerStatsTxSDUNoBuffers, xylanLecSlotNumber=xylanLecSlotNumber, atmLecControlDistributeVci=atmLecControlDistributeVci, atmxLaneGroup=atmxLaneGroup, atmLecStatisticsTable=atmLecStatisticsTable, atmLecVersion=atmLecVersion, atmxBwgServiceNum=atmxBwgServiceNum, atmLecExpectedArpResponseTime=atmLecExpectedArpResponseTime, atmxVccActualTransmitTrafficDescriptorParam2=atmxVccActualTransmitTrafficDescriptorParam2, atmxVccStatsTxSDUErrors=atmxVccStatsTxSDUErrors, atmLecMulticastForwardVci=atmLecMulticastForwardVci, atmLecServerVccEntry=atmLecServerVccEntry, atmxPortSlotIndex=atmxPortSlotIndex, atmxVccAcceptableReceiveTrafficDescriptorParam2=atmxVccAcceptableReceiveTrafficDescriptorParam2, atmxLecServiceNum=atmxLecServiceNum, atmxVccActualTransmitTrafficDescriptorParam1=atmxVccActualTransmitTrafficDescriptorParam1, atmxPortLoopbackConfig=atmxPortLoopbackConfig, atmxBwgServiceTable=atmxBwgServiceTable, atmLecConfigMaxDataFrameSize=atmLecConfigMaxDataFrameSize, atmxPortSignalingVci=atmxPortSignalingVci, atmLecConfigLanName=atmLecConfigLanName, atmxAddressAcceptableReceiveTrafficDescriptorParam3=atmxAddressAcceptableReceiveTrafficDescriptorParam3, atmxAddressRequestedReceiveTrafficQoSClass=atmxAddressRequestedReceiveTrafficQoSClass, atmLecUseTranslation=atmLecUseTranslation, atmLecSrBridgeNum=atmLecSrBridgeNum, atmxLecStatsPortIndex=atmxLecStatsPortIndex, atmxVccRequestedReceiveTrafficBestEffort=atmxVccRequestedReceiveTrafficBestEffort, atmxVccRequestedTransmitTrafficQoSClass=atmxVccRequestedTransmitTrafficQoSClass, atmxServiceSlotIndex=atmxServiceSlotIndex, atmLecPathSwitchingDelay=atmLecPathSwitchingDelay, atmxVccAcceptableTransmitTrafficDescriptorParam2=atmxVccAcceptableTransmitTrafficDescriptorParam2, atmxSahiBWGroup=atmxSahiBWGroup, atmLecActualMaxDataFrameSize=atmLecActualMaxDataFrameSize, atmxServiceVlan=atmxServiceVlan, atmCIPInvArpNakFromNet=atmCIPInvArpNakFromNet, atmxGpToVcVci=atmxGpToVcVci, atmxAddressRequestedTransmitTrafficBestEffort=atmxAddressRequestedTransmitTrafficBestEffort, atmxAddressServiceUsed=atmxAddressServiceUsed, atmxVccDownTime=atmxVccDownTime, atmLecStatisticsEntry=atmLecStatisticsEntry, atmGpToVcBulkMappingEntry=atmGpToVcBulkMappingEntry, atmLecControlTimeout=atmLecControlTimeout, atmCIPPktsFromIPDiscard=atmCIPPktsFromIPDiscard, atmxPortRxSegmentSize=atmxPortRxSegmentSize, atmxVccGroup=atmxVccGroup, atmxVccActualTransmitTrafficDescriptorParam3=atmxVccActualTransmitTrafficDescriptorParam3, atmxServiceAddresses=atmxServiceAddresses, atmxArpIPAddress=atmxArpIPAddress, atmxPortOperStatus=atmxPortOperStatus, atmCIPArpReqFromNet=atmCIPArpReqFromNet, atmxVccStatsPortIndex=atmxVccStatsPortIndex, atmLeArpIsRemoteAddress=atmLeArpIsRemoteAddress, atmLecUseForwardDelay=atmLecUseForwardDelay, atmCIPStatisticsEntry=atmCIPStatisticsEntry, atmxPortTxBufferSize=atmxPortTxBufferSize, atmxVccStatsRxOctets=atmxVccStatsRxOctets, atmLecSvcFailures=atmLecSvcFailures, atmxVccStatsVci=atmxVccStatsVci, atmxVccStatsRxSDUTrash=atmxVccStatsRxSDUTrash, atmxVccStatsRxSDUInvalidSz=atmxVccStatsRxSDUInvalidSz, atmxArpAtmAddress=atmxArpAtmAddress, atmxLecStatsServiceNum=atmxLecStatsServiceNum, atmxAddressAddrUsed=atmxAddressAddrUsed, atmxLeArpServiceNum=atmxLeArpServiceNum, atmxGpToVcPortIndex=atmxGpToVcPortIndex, atmxPortEntry=atmxPortEntry, atmxVccStatsRxSDUCrcErrors=atmxVccStatsRxSDUCrcErrors, atmxVccStatsTxOctets=atmxVccStatsTxOctets, atmLecConfigServerAtmAddress=atmLecConfigServerAtmAddress, atmxBwgEntry=atmxBwgEntry, atmxServiceGroup=atmxServiceGroup, atmLeArpIndex=atmLeArpIndex, atmxVccAcceptableTransmitTrafficBestEffort=atmxVccAcceptableTransmitTrafficBestEffort, atmxLayerStatsRxSDUCrcErrors=atmxLayerStatsRxSDUCrcErrors, VpiInteger=VpiInteger, atmxBwgPcr=atmxBwgPcr, atmxLecPortIndex=atmxLecPortIndex, atmCIPStatisticsTable=atmCIPStatisticsTable, atmxCIPServiceNum=atmxCIPServiceNum, atmLecMaxRetryCount=atmLecMaxRetryCount, atmxServiceAddress=atmxServiceAddress, atmxVccConnectionUsed=atmxVccConnectionUsed, atmCIPInvArpRespFromNet=atmCIPInvArpRespFromNet, atmxVccTable=atmxVccTable, atmxVccAcceptableTransmitTrafficDescriptor=atmxVccAcceptableTransmitTrafficDescriptor)
mibBuilder.exportSymbols("XYLAN-ATM-MIB", atmxVccConnType=atmxVccConnType, atmLecTopologyChange=atmLecTopologyChange, atmLecControlDirectVpi=atmLecControlDirectVpi, atmxLayerStatsRxCells=atmxLayerStatsRxCells, atmxVccStatsTxSDUNoBuffers=atmxVccStatsTxSDUNoBuffers, atmxVccCircuitType=atmxVccCircuitType, atmLecArpRepliesOut=atmLecArpRepliesOut, atmLeArpAge=atmLeArpAge, xylanLecServiceNumber=xylanLecServiceNumber, atmxVccRequestedReceiveTrafficDescriptorParam1=atmxVccRequestedReceiveTrafficDescriptorParam1, atmxAddressAcceptableTransmitTrafficQoSClass=atmxAddressAcceptableTransmitTrafficQoSClass, atmxServiceEncapsType=atmxServiceEncapsType, xylanLecConfigTable=xylanLecConfigTable, atmxVccServiceUsed=atmxVccServiceUsed, atmxLayerStatsRxSDUDiscards=atmxLayerStatsRxSDUDiscards, AtmMediaTypes=AtmMediaTypes, atmLecLastFailureState=atmLecLastFailureState, atmxVccStatsRxCells=atmxVccStatsRxCells, atmxAddressVci=atmxAddressVci, atmxAddressAcceptableReceiveTrafficDescriptorParam2=atmxAddressAcceptableReceiveTrafficDescriptorParam2, atmxLayerStatsRxSDUs=atmxLayerStatsRxSDUs, atmxVccAcceptableReceiveTrafficDescriptorParam1=atmxVccAcceptableReceiveTrafficDescriptorParam1, atmGpToVcBulkMappingTable=atmGpToVcBulkMappingTable, atmxPortConnectionType=atmxPortConnectionType, atmxVccEntry=atmxVccEntry, atmLecActualLesAtmAddress=atmLecActualLesAtmAddress, xylanLecConfigEntry=xylanLecConfigEntry, atmxLeArpSlotIndex=atmxLeArpSlotIndex, atmxLayerStatsSlotIndex=atmxLayerStatsSlotIndex, atmxServiceMulticastOutVcc=atmxServiceMulticastOutVcc, atmxAddressAcceptableReceiveTrafficDescriptorParam1=atmxAddressAcceptableReceiveTrafficDescriptorParam1, atmxBwgMbs=atmxBwgMbs, atmLeArpType=atmLeArpType, atmxAddressRequestedReceiveTrafficDescriptorParam2=atmxAddressRequestedReceiveTrafficDescriptorParam2, atmxLayerStatsTxSDUErrors=atmxLayerStatsTxSDUErrors, atmxArpType=atmxArpType, atmxServiceSEL=atmxServiceSEL, atmxAddressGroup=atmxAddressGroup, atmxVccStatsTable=atmxVccStatsTable, atmxVccStatsRxSDUErrors=atmxVccStatsRxSDUErrors, atmxAddressAcceptableTransmitTrafficDescriptorParam1=atmxAddressAcceptableTransmitTrafficDescriptorParam1, atmLecControlFramesIn=atmLecControlFramesIn, atmxAddressAcceptableTransmitTrafficDescriptorParam2=atmxAddressAcceptableTransmitTrafficDescriptorParam2, atmLecMaxUnknownFrameTime=atmLecMaxUnknownFrameTime, atmxVccDescription=atmxVccDescription, atmLecInterfaceState=atmLecInterfaceState, atmLecControlDirectVci=atmLecControlDirectVci, atmLeArpEntry=atmLeArpEntry, atmLecArpRepliesIn=atmLecArpRepliesIn, atmxPortTxSegmentSize=atmxPortTxSegmentSize, atmxPortILMIVci=atmxPortILMIVci, atmxArpTimeToLive=atmxArpTimeToLive, atmxLecStatsSlotIndex=atmxLecStatsSlotIndex, atmxAddressDescription=atmxAddressDescription, atmxServiceConnections=atmxServiceConnections, atmxBwgServiceEntry=atmxBwgServiceEntry, atmLecPrimaryAtmAddress=atmLecPrimaryAtmAddress, atmCIPBroadcastPktFromIP=atmCIPBroadcastPktFromIP, atmxLayerStatsRxSDUErrors=atmxLayerStatsRxSDUErrors, atmxAddressTable=atmxAddressTable, atmxVccStatsTxCellErrors=atmxVccStatsTxCellErrors, atmxPortTimingMode=atmxPortTimingMode, AtmOperStatCodes=AtmOperStatCodes, LeArpType=LeArpType, atmxAddressRequestedTransmitTrafficDescriptor=atmxAddressRequestedTransmitTrafficDescriptor, atmxServiceOperStatus=atmxServiceOperStatus, atmxPortGroup=atmxPortGroup, atmLecConfigLesAtmAddress=atmLecConfigLesAtmAddress, atmLecConfigTable=atmLecConfigTable, atmxPortILMIstatus=atmxPortILMIstatus, atmxVccOperStatus=atmxVccOperStatus, atmxArpVci=atmxArpVci, atmxAddressAcceptableReceiveTrafficQoSClass=atmxAddressAcceptableReceiveTrafficQoSClass, atmLecForwardDelayTime=atmLecForwardDelayTime, atmxGpToVcBulkServiceNum=atmxGpToVcBulkServiceNum, atmxBwgSlotIndex=atmxBwgSlotIndex, atmxPortPlScramble=atmxPortPlScramble, atmxGpToVcBulkMappingList=atmxGpToVcBulkMappingList, atmCIPPktsToNetDiscard=atmCIPPktsToNetDiscard, atmxLayerStatsRxOctets=atmxLayerStatsRxOctets, atmxArpEntry=atmxArpEntry, atmxServiceType=atmxServiceType, atmxLayerStatsPortIndex=atmxLayerStatsPortIndex, atmxGpToVcBulkNumOfNodes=atmxGpToVcBulkNumOfNodes, atmxVccStatsTxCells=atmxVccStatsTxCells, atmLecSrRingNum=atmLecSrRingNum, atmxVccStatsRxSDUs=atmxVccStatsRxSDUs, atmxPortSSCOPstatus=atmxPortSSCOPstatus, atmLecConfigMode=atmLecConfigMode, atmxPortTransmissionType=atmxPortTransmissionType, atmxArpTable=atmxArpTable, atmxServiceConnectionType=atmxServiceConnectionType, atmLecMaxUnknownFrameCount=atmLecMaxUnknownFrameCount, atmxCIPstatsGroup=atmxCIPstatsGroup, atmxVccStatsTxCellDiscards=atmxVccStatsTxCellDiscards, atmxLayerStatsRxSDUNoBuffers=atmxLayerStatsRxSDUNoBuffers, atmxBwgOperStatus=atmxBwgOperStatus, AtmAdminStatCodes=AtmAdminStatCodes, atmLecConfigDirectVpi=atmLecConfigDirectVpi, atmLecVccTimeoutPeriod=atmLecVccTimeoutPeriod, xylanLecGroupNumber=xylanLecGroupNumber, atmxBwgTable=atmxBwgTable, atmxVccVpi=atmxVccVpi, atmxPortPortIndex=atmxPortPortIndex, atmxPortMediaType=atmxPortMediaType, atmxServiceVclEncapType=atmxServiceVclEncapType, atmxGpToVcBulkSlotIndex=atmxGpToVcBulkSlotIndex, atmxGpToVcServiceNum=atmxGpToVcServiceNum, atmxVccStatsTxCellNoBuffers=atmxVccStatsTxCellNoBuffers, atmxCIPSlotIndex=atmxCIPSlotIndex, AtmTrafficDescrTypes=AtmTrafficDescrTypes, atmxPortUniPortIndex=atmxPortUniPortIndex, atmLeArpVci=atmLeArpVci, atmxServiceAdmStatus=atmxServiceAdmStatus, atmxVccStatsRxSDUDiscards=atmxVccStatsRxSDUDiscards, atmxLecStatusSlotIndex=atmxLecStatusSlotIndex, atmLecProxyClient=atmLecProxyClient, atmLecLastFailureRespCode=atmLecLastFailureRespCode, atmxAddressAtmAddress=atmxAddressAtmAddress, atmCIPPktsFromNet=atmCIPPktsFromNet)
