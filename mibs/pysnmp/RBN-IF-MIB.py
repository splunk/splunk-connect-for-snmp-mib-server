#
# PySNMP MIB module RBN-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, TimeTicks, Counter64, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Unsigned32, Bits, Gauge32, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Counter64", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32", "MibIdentifier", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnIfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 57))
rbnIfMib.setRevisions(('2012-07-18 18:00',))
if mibBuilder.loadTexts: rbnIfMib.setLastUpdated('201207181800Z')
if mibBuilder.loadTexts: rbnIfMib.setOrganization('ERICSSON AM')
rbnIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0))
rbnIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 57, 1))
rbnIfTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1), )
if mibBuilder.loadTexts: rbnIfTable.setStatus('current')
rbnIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1), )
ifEntry.registerAugmentions(("RBN-IF-MIB", "rbnIfEntry"))
rbnIfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: rbnIfEntry.setStatus('current')
rbnIfHCInIPv4Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCInIPv4Octets.setStatus('current')
rbnIfHCOutIPv4Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCOutIPv4Octets.setStatus('current')
rbnIfHCInIPv4MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCInIPv4MulticastPkts.setStatus('current')
rbnIfHCOutIPv4MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCOutIPv4MulticastPkts.setStatus('current')
rbnIfHCInIPv6Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCInIPv6Octets.setStatus('current')
rbnIfHCOutIPv6Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCOutIPv6Octets.setStatus('current')
rbnIfHCInIPv6MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCInIPv6MulticastPkts.setStatus('current')
rbnIfHCOutIPv6MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 57, 0, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIfHCOutIPv6MulticastPkts.setStatus('current')
rbnIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 57, 1, 1))
rbnIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 57, 1, 2))
rbnIfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 57, 1, 1, 1)).setObjects(("RBN-IF-MIB", "rbnIfMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIfCompliance = rbnIfCompliance.setStatus('current')
rbnIfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 57, 1, 2, 1)).setObjects(("RBN-IF-MIB", "rbnIfHCInIPv4Octets"), ("RBN-IF-MIB", "rbnIfHCOutIPv4Octets"), ("RBN-IF-MIB", "rbnIfHCInIPv4MulticastPkts"), ("RBN-IF-MIB", "rbnIfHCOutIPv4MulticastPkts"), ("RBN-IF-MIB", "rbnIfHCInIPv6Octets"), ("RBN-IF-MIB", "rbnIfHCOutIPv6Octets"), ("RBN-IF-MIB", "rbnIfHCInIPv6MulticastPkts"), ("RBN-IF-MIB", "rbnIfHCOutIPv6MulticastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIfMIBGroup = rbnIfMIBGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-IF-MIB", rbnIfMIBObjects=rbnIfMIBObjects, rbnIfEntry=rbnIfEntry, rbnIfHCInIPv4MulticastPkts=rbnIfHCInIPv4MulticastPkts, rbnIfMIBCompliances=rbnIfMIBCompliances, PYSNMP_MODULE_ID=rbnIfMib, rbnIfMib=rbnIfMib, rbnIfHCOutIPv6MulticastPkts=rbnIfHCOutIPv6MulticastPkts, rbnIfTable=rbnIfTable, rbnIfMIBGroup=rbnIfMIBGroup, rbnIfCompliance=rbnIfCompliance, rbnIfMIBGroups=rbnIfMIBGroups, rbnIfHCOutIPv4Octets=rbnIfHCOutIPv4Octets, rbnIfHCOutIPv4MulticastPkts=rbnIfHCOutIPv4MulticastPkts, rbnIfHCInIPv6Octets=rbnIfHCInIPv6Octets, rbnIfMIBConformance=rbnIfMIBConformance, rbnIfHCOutIPv6Octets=rbnIfHCOutIPv6Octets, rbnIfHCInIPv6MulticastPkts=rbnIfHCInIPv6MulticastPkts, rbnIfHCInIPv4Octets=rbnIfHCInIPv4Octets)
