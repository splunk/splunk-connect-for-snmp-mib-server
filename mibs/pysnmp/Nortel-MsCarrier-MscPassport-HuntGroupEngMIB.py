#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-HuntGroupEngMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-HuntGroupEngMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
mscLpEngIndex, mscLpIndex, mscLpEng = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex", "mscLpIndex", "mscLpEng")
RowStatus, Counter32, Unsigned32, DisplayString, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "Counter32", "Unsigned32", "DisplayString", "StorageType")
NonReplicated, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Unsigned32, Gauge32, NotificationType, TimeTicks, ObjectIdentity, Counter64, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Unsigned32", "Gauge32", "NotificationType", "TimeTicks", "ObjectIdentity", "Counter64", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
huntGroupEngMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131))
mscLpEngHgs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4))
mscLpEngHgsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1), )
if mibBuilder.loadTexts: mscLpEngHgsRowStatusTable.setStatus('mandatory')
mscLpEngHgsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-HuntGroupEngMIB", "mscLpEngHgsIndex"))
if mibBuilder.loadTexts: mscLpEngHgsRowStatusEntry.setStatus('mandatory')
mscLpEngHgsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEngHgsRowStatus.setStatus('mandatory')
mscLpEngHgsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngHgsComponentName.setStatus('mandatory')
mscLpEngHgsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngHgsStorageType.setStatus('mandatory')
mscLpEngHgsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEngHgsIndex.setStatus('mandatory')
mscLpEngHgsOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 10), )
if mibBuilder.loadTexts: mscLpEngHgsOperationalTable.setStatus('mandatory')
mscLpEngHgsOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-HuntGroupEngMIB", "mscLpEngHgsIndex"))
if mibBuilder.loadTexts: mscLpEngHgsOperationalEntry.setStatus('mandatory')
mscLpEngHgsHuntGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngHgsHuntGroups.setStatus('mandatory')
mscLpEngHgsHuntAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 4, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngHgsHuntAttempts.setStatus('mandatory')
huntGroupEngGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 1))
huntGroupEngGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 1, 1))
huntGroupEngGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 1, 1, 3))
huntGroupEngGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 1, 1, 3, 2))
huntGroupEngCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 3))
huntGroupEngCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 3, 1))
huntGroupEngCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 3, 1, 3))
huntGroupEngCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 131, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-HuntGroupEngMIB", mscLpEngHgsIndex=mscLpEngHgsIndex, huntGroupEngMIB=huntGroupEngMIB, mscLpEngHgsComponentName=mscLpEngHgsComponentName, huntGroupEngCapabilitiesCA02=huntGroupEngCapabilitiesCA02, huntGroupEngGroupCA02=huntGroupEngGroupCA02, mscLpEngHgsHuntGroups=mscLpEngHgsHuntGroups, huntGroupEngGroupCA=huntGroupEngGroupCA, huntGroupEngGroupCA02A=huntGroupEngGroupCA02A, mscLpEngHgs=mscLpEngHgs, mscLpEngHgsRowStatusTable=mscLpEngHgsRowStatusTable, mscLpEngHgsRowStatusEntry=mscLpEngHgsRowStatusEntry, huntGroupEngCapabilitiesCA=huntGroupEngCapabilitiesCA, mscLpEngHgsStorageType=mscLpEngHgsStorageType, mscLpEngHgsHuntAttempts=mscLpEngHgsHuntAttempts, mscLpEngHgsOperationalEntry=mscLpEngHgsOperationalEntry, mscLpEngHgsRowStatus=mscLpEngHgsRowStatus, huntGroupEngGroup=huntGroupEngGroup, huntGroupEngCapabilities=huntGroupEngCapabilities, huntGroupEngCapabilitiesCA02A=huntGroupEngCapabilitiesCA02A, mscLpEngHgsOperationalTable=mscLpEngHgsOperationalTable)
