#
# PySNMP MIB module HM2-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-NAT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
HmActionValue, hm2ConfigurationMibs, HmTimeSeconds1970 = mibBuilder.importSymbols("HM2-TC-MIB", "HmActionValue", "hm2ConfigurationMibs", "HmTimeSeconds1970")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Bits, Unsigned32, TimeTicks, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, iso, IpAddress, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Bits", "Unsigned32", "TimeTicks", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "iso", "IpAddress", "Counter64", "Counter32")
StorageType, RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
hm2NatMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 80))
hm2NatMib.setRevisions(('2011-11-30 00:00', '2011-10-24 00:00', '2011-09-13 00:00', '2011-07-01 00:00', '2011-05-31 00:00',))
if mibBuilder.loadTexts: hm2NatMib.setLastUpdated('201111300000Z')
if mibBuilder.loadTexts: hm2NatMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2NatNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 0))
hm2NatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1))
hm2NatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 2))
hm2NatGeneralSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1))
hm2DnatMaxRules = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatMaxRules.setStatus('current')
hm2OneToOneNatMaxRules = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2OneToOneNatMaxRules.setStatus('current')
hm2MasqMaxRules = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqMaxRules.setStatus('current')
hm2DoubleNatMaxRules = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DoubleNatMaxRules.setStatus('current')
hm2NatResetStatistics = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 1, 6), HmActionValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2NatResetStatistics.setStatus('current')
hm2DnatRuleAppliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 1)).setObjects(("HM2-NAT-MIB", "hm2DnatRuleIndex"))
if mibBuilder.loadTexts: hm2DnatRuleAppliedTrap.setStatus('current')
hm2DnatRuleAppliedAndLoggedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 2)).setObjects(("HM2-NAT-MIB", "hm2DnatRuleIndex"))
if mibBuilder.loadTexts: hm2DnatRuleAppliedAndLoggedTrap.setStatus('current')
hm2Dnat = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2))
hm2DnatRules = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1))
hm2DnatRulesObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 1))
hm2DnatRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatRuleCount.setStatus('current')
hm2DnatIfMappingRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatIfMappingRuleCount.setStatus('current')
hm2DnatRulePendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatRulePendingActions.setStatus('current')
hm2DnatCommitPendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 1, 4), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DnatCommitPendingActions.setStatus('current')
hm2DnatRulesTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2))
hm2DnatRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: hm2DnatRuleTable.setStatus('current')
hm2DnatRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DnatRuleIndex"))
if mibBuilder.loadTexts: hm2DnatRuleEntry.setStatus('current')
hm2DnatRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DnatRuleIndex.setStatus('current')
hm2DnatSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatSourceAddress.setStatus('current')
hm2DnatSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatSourcePort.setStatus('current')
hm2DnatTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatTargetAddress.setStatus('current')
hm2DnatTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatTargetPort.setStatus('current')
hm2DnatNewTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatNewTargetAddress.setStatus('current')
hm2DnatNewTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatNewTargetPort.setStatus('current')
hm2DnatProto = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("ipip", 3), ("tcp", 4), ("udp", 5), ("esp", 6), ("ah", 7), ("icmpv6", 8), ("any", 9))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatProto.setStatus('current')
hm2DnatRuleParams = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatRuleParams.setStatus('current')
hm2DnatLog = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatLog.setStatus('current')
hm2DnatTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatTrap.setStatus('current')
hm2DnatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatRowStatus.setStatus('current')
hm2DnatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatDescription.setStatus('current')
hm2DnatRuleIfMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hm2DnatRuleIfMappingTable.setStatus('current')
hm2DnatRuleIfMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DnatIfmInterface"), (0, "HM2-NAT-MIB", "hm2DnatIfmDirection"), (0, "HM2-NAT-MIB", "hm2DnatIfmRuleIndex"))
if mibBuilder.loadTexts: hm2DnatRuleIfMappingEntry.setStatus('current')
hm2DnatIfmRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: hm2DnatIfmRuleIndex.setStatus('current')
hm2DnatIfmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))))
if mibBuilder.loadTexts: hm2DnatIfmDirection.setStatus('current')
hm2DnatIfmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatIfmPriority.setStatus('current')
hm2DnatIfmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: hm2DnatIfmInterface.setStatus('current')
hm2DnatIfmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DnatIfmRowStatus.setStatus('current')
hm2DnatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2))
hm2DnatGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 1))
hm2DnatStatsTotalPck = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsTotalPck.setStatus('current')
hm2DnatStatsTotalPckSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsTotalPckSize.setStatus('current')
hm2DnatStatsTotalPckDenDrop = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsTotalPckDenDrop.setStatus('current')
hm2DnatStatsTotalPckAccepted = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsTotalPckAccepted.setStatus('current')
hm2DnatRuleStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2))
hm2DnatStatsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hm2DnatStatsRuleTable.setStatus('current')
hm2DnatStatsRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DnatRuleIndex"))
if mibBuilder.loadTexts: hm2DnatStatsRuleTableEntry.setStatus('current')
hm2DnatStatsPckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsPckCount.setStatus('current')
hm2DnatStatsPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsPckSize.setStatus('current')
hm2DnatStatsLastApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 2, 2, 2, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DnatStatsLastApplied.setStatus('current')
hm21to1RuleAppliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 5)).setObjects(("HM2-NAT-MIB", "hm21to1RuleIndex"))
if mibBuilder.loadTexts: hm21to1RuleAppliedTrap.setStatus('current')
hm21to1RuleAppliedAndLoggedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 6)).setObjects(("HM2-NAT-MIB", "hm21to1RuleIndex"))
if mibBuilder.loadTexts: hm21to1RuleAppliedAndLoggedTrap.setStatus('current')
hm21to1 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4))
hm21to1RuleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1))
hm21to1RuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1RuleCount.setStatus('current')
hm21to1IfMappingRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1IfMappingRuleCount.setStatus('current')
hm21to1RulePendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1RulePendingActions.setStatus('current')
hm21to1CommitPendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 4), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm21to1CommitPendingActions.setStatus('current')
hm21to1Alg = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 5), Bits().clone(namedValues=NamedValues(("ftp", 0), ("icmp", 1))).clone(namedValues=NamedValues(("icmp", 1), ("ftp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm21to1Alg.setStatus('current')
hm21to1PublicIntf = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm21to1PublicIntf.setStatus('current')
hm21to1RuleTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2))
hm21to1RuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1), )
if mibBuilder.loadTexts: hm21to1RuleTable.setStatus('current')
hm21to1RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm21to1RuleIndex"))
if mibBuilder.loadTexts: hm21to1RuleEntry.setStatus('current')
hm21to1RuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm21to1RuleIndex.setStatus('current')
hm21to1TargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1TargetAddress.setStatus('current')
hm21to1NewTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1NewTargetAddress.setStatus('current')
hm21to1RuleParams = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1RuleParams.setStatus('current')
hm21to1Log = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1Log.setStatus('current')
hm21to1Trap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1Trap.setStatus('current')
hm21to1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1RowStatus.setStatus('current')
hm21to1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1Description.setStatus('current')
hm21to1IngressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1IngressIntf.setStatus('current')
hm21to1EgressIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1EgressIntf.setStatus('current')
hm21to1Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1Priority.setStatus('current')
hm21to1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 2, 1, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm21to1StorageType.setStatus('current')
hm21to1Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3))
hm21to1GeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 1))
hm21to1StatsTotalPck = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsTotalPck.setStatus('current')
hm21to1StatsTotalPckSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsTotalPckSize.setStatus('current')
hm21to1StatsTotalPckDenDrop = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsTotalPckDenDrop.setStatus('current')
hm21to1StatsTotalPckAccepted = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsTotalPckAccepted.setStatus('current')
hm21to1StatsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2))
hm21to1StatsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: hm21to1StatsRuleTable.setStatus('current')
hm21to1StatsRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm21to1RuleIndex"))
if mibBuilder.loadTexts: hm21to1StatsRuleTableEntry.setStatus('current')
hm21to1StatsPckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsPckCount.setStatus('current')
hm21to1StatsPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsPckSize.setStatus('current')
hm21to1StatsLastApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 4, 3, 2, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm21to1StatsLastApplied.setStatus('current')
hm2MasqRuleAppliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 7)).setObjects(("HM2-NAT-MIB", "hm2MasqRuleIndex"))
if mibBuilder.loadTexts: hm2MasqRuleAppliedTrap.setStatus('current')
hm2MasqRuleAppliedAndLoggedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 8)).setObjects(("HM2-NAT-MIB", "hm2MasqRuleIndex"))
if mibBuilder.loadTexts: hm2MasqRuleAppliedAndLoggedTrap.setStatus('current')
hm2Masquerading = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5))
hm2MasqRuleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 1))
hm2MasqRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqRuleCount.setStatus('current')
hm2MasqIfMappingRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqIfMappingRuleCount.setStatus('current')
hm2MasqRulePendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqRulePendingActions.setStatus('current')
hm2MasqCommitPendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 1, 4), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2MasqCommitPendingActions.setStatus('current')
hm2MasqRuleTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2))
hm2MasqRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hm2MasqRuleTable.setStatus('current')
hm2MasqRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2MasqRuleIndex"))
if mibBuilder.loadTexts: hm2MasqRuleEntry.setStatus('current')
hm2MasqRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2MasqRuleIndex.setStatus('current')
hm2MasqSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqSourceAddress.setStatus('current')
hm2MasqSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50)).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqSourcePort.setStatus('current')
hm2MasqProto = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 9))).clone(namedValues=NamedValues(("tcp", 4), ("udp", 5), ("any", 9))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqProto.setStatus('current')
hm2MasqRuleParams = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqRuleParams.setStatus('current')
hm2MasqLog = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqLog.setStatus('current')
hm2MasqTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqTrap.setStatus('current')
hm2MasqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqRowStatus.setStatus('current')
hm2MasqDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqDescription.setStatus('current')
hm2MasqIpsecExempt = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqIpsecExempt.setStatus('current')
hm2MasqRuleIfMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hm2MasqRuleIfMappingTable.setStatus('current')
hm2MasqRuleIfMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2MasqIfmInterface"), (0, "HM2-NAT-MIB", "hm2MasqIfmDirection"), (0, "HM2-NAT-MIB", "hm2MasqIfmRuleIndex"))
if mibBuilder.loadTexts: hm2MasqRuleIfMappingEntry.setStatus('current')
hm2MasqIfmRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: hm2MasqIfmRuleIndex.setStatus('current')
hm2MasqIfmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))))
if mibBuilder.loadTexts: hm2MasqIfmDirection.setStatus('current')
hm2MasqIfmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqIfmPriority.setStatus('current')
hm2MasqIfmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: hm2MasqIfmInterface.setStatus('current')
hm2MasqIfmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MasqIfmRowStatus.setStatus('current')
hm2MasqStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3))
hm2MasqGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 1))
hm2MasqStatsTotalPck = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsTotalPck.setStatus('current')
hm2MasqStatsTotalPckSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsTotalPckSize.setStatus('current')
hm2MasqStatsTotalPckDenDrop = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsTotalPckDenDrop.setStatus('current')
hm2MasqStatsTotalPckAccepted = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsTotalPckAccepted.setStatus('current')
hm2MasqStatsRuleTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2))
hm2MasqStatsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2, 1), )
if mibBuilder.loadTexts: hm2MasqStatsRuleTable.setStatus('current')
hm2MasqStatsRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2MasqRuleIndex"))
if mibBuilder.loadTexts: hm2MasqStatsRuleTableEntry.setStatus('current')
hm2MasqStatsPckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsPckCount.setStatus('current')
hm2MasqStatsPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsPckSize.setStatus('current')
hm2MasqStatsLastApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 5, 3, 2, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MasqStatsLastApplied.setStatus('current')
hm2DonatRuleAppliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 9)).setObjects(("HM2-NAT-MIB", "hm2DonatRuleIndex"))
if mibBuilder.loadTexts: hm2DonatRuleAppliedTrap.setStatus('current')
hm2DonatRuleAppliedAndLoggedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 80, 0, 10)).setObjects(("HM2-NAT-MIB", "hm2DonatRuleIndex"))
if mibBuilder.loadTexts: hm2DonatRuleAppliedAndLoggedTrap.setStatus('current')
hm2DoubleNat = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6))
hm2DoubleNatRuleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 1))
hm2DoubleNatRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DoubleNatRuleCount.setStatus('current')
hm2DoubleNatIfMappingRuleCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DoubleNatIfMappingRuleCount.setStatus('current')
hm2DoubleNatRulePendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DoubleNatRulePendingActions.setStatus('current')
hm2DoubleNatCommitPendingActions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 1, 4), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DoubleNatCommitPendingActions.setStatus('current')
hm2DoubleNatRuleTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2))
hm2DoubleNatRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1), )
if mibBuilder.loadTexts: hm2DoubleNatRuleTable.setStatus('current')
hm2DoubleNatRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DonatRuleIndex"))
if mibBuilder.loadTexts: hm2DoubleNatRuleEntry.setStatus('current')
hm2DonatRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DonatRuleIndex.setStatus('current')
hm2DonatLocalInternalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatLocalInternalIp.setStatus('current')
hm2DonatLocalExternalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatLocalExternalIp.setStatus('current')
hm2DonatRemoteInternalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatRemoteInternalIp.setStatus('current')
hm2DonatRemoteExternalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatRemoteExternalIp.setStatus('current')
hm2DonatRuleParams = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatRuleParams.setStatus('current')
hm2DonatLog = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatLog.setStatus('current')
hm2DonatTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatTrap.setStatus('current')
hm2DonatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatRowStatus.setStatus('current')
hm2DonatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatDescription.setStatus('current')
hm2DonatRuleIfMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2), )
if mibBuilder.loadTexts: hm2DonatRuleIfMappingTable.setStatus('current')
hm2DonatRuleIfMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DonatIfmInterface"), (0, "HM2-NAT-MIB", "hm2DonatIfmDirection"), (0, "HM2-NAT-MIB", "hm2DonatIfmRuleIndex"))
if mibBuilder.loadTexts: hm2DonatRuleIfMappingEntry.setStatus('current')
hm2DonatIfmRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: hm2DonatIfmRuleIndex.setStatus('current')
hm2DonatIfmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("both", 3))))
if mibBuilder.loadTexts: hm2DonatIfmDirection.setStatus('current')
hm2DonatIfmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatIfmPriority.setStatus('current')
hm2DonatIfmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: hm2DonatIfmInterface.setStatus('current')
hm2DonatIfmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DonatIfmRowStatus.setStatus('current')
hm2DonatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3))
hm2DonatGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 1))
hm2DonatStatsTotalPck = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsTotalPck.setStatus('current')
hm2DonatStatsTotalPckSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsTotalPckSize.setStatus('current')
hm2DonatStatsTotalPckDenDrop = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsTotalPckDenDrop.setStatus('current')
hm2DonatStatsTotalPckAcc = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsTotalPckAcc.setStatus('current')
hm2DonatStatsRuleTables = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2))
hm2DonatStatsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2, 1), )
if mibBuilder.loadTexts: hm2DonatStatsRuleTable.setStatus('current')
hm2DonatStatsRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2, 1, 1), ).setIndexNames((0, "HM2-NAT-MIB", "hm2DonatRuleIndex"))
if mibBuilder.loadTexts: hm2DonatStatsRuleTableEntry.setStatus('current')
hm2DonatStatsPckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsPckCount.setStatus('current')
hm2DonatStatsPckSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsPckSize.setStatus('current')
hm2DonatStatsLastApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 80, 1, 6, 3, 2, 1, 1, 3), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DonatStatsLastApplied.setStatus('current')
hm2NatCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 2, 1))
hm2NatGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 80, 2, 2))
hm2NatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 248, 11, 80, 2, 1, 1)).setObjects(("HM2-NAT-MIB", "hm2NatGeneralGroup"), ("HM2-NAT-MIB", "hm2NatNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2NatCompliance = hm2NatCompliance.setStatus('current')
hm2NatGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 248, 11, 80, 2, 2, 1)).setObjects(("HM2-NAT-MIB", "hm2DnatMaxRules"), ("HM2-NAT-MIB", "hm2OneToOneNatMaxRules"), ("HM2-NAT-MIB", "hm2DoubleNatMaxRules"), ("HM2-NAT-MIB", "hm2MasqMaxRules"), ("HM2-NAT-MIB", "hm2NatResetStatistics"), ("HM2-NAT-MIB", "hm2DnatIfMappingRuleCount"), ("HM2-NAT-MIB", "hm2DnatRulePendingActions"), ("HM2-NAT-MIB", "hm2DnatCommitPendingActions"), ("HM2-NAT-MIB", "hm2DnatRuleCount"), ("HM2-NAT-MIB", "hm2DnatRuleIndex"), ("HM2-NAT-MIB", "hm2DnatSourceAddress"), ("HM2-NAT-MIB", "hm2DnatSourcePort"), ("HM2-NAT-MIB", "hm2DnatTargetAddress"), ("HM2-NAT-MIB", "hm2DnatTargetPort"), ("HM2-NAT-MIB", "hm2DnatNewTargetAddress"), ("HM2-NAT-MIB", "hm2DnatNewTargetPort"), ("HM2-NAT-MIB", "hm2DnatProto"), ("HM2-NAT-MIB", "hm2DnatRuleParams"), ("HM2-NAT-MIB", "hm2DnatLog"), ("HM2-NAT-MIB", "hm2DnatTrap"), ("HM2-NAT-MIB", "hm2DnatDescription"), ("HM2-NAT-MIB", "hm2DnatRowStatus"), ("HM2-NAT-MIB", "hm2DnatIfmPriority"), ("HM2-NAT-MIB", "hm2DnatIfmRowStatus"), ("HM2-NAT-MIB", "hm2DnatStatsPckCount"), ("HM2-NAT-MIB", "hm2DnatStatsPckSize"), ("HM2-NAT-MIB", "hm2DnatStatsLastApplied"), ("HM2-NAT-MIB", "hm2DnatStatsTotalPck"), ("HM2-NAT-MIB", "hm2DnatStatsTotalPckSize"), ("HM2-NAT-MIB", "hm2DnatStatsTotalPckDenDrop"), ("HM2-NAT-MIB", "hm2DnatStatsTotalPckAccepted"), ("HM2-NAT-MIB", "hm21to1IfMappingRuleCount"), ("HM2-NAT-MIB", "hm21to1RulePendingActions"), ("HM2-NAT-MIB", "hm21to1CommitPendingActions"), ("HM2-NAT-MIB", "hm21to1RuleCount"), ("HM2-NAT-MIB", "hm21to1RuleIndex"), ("HM2-NAT-MIB", "hm21to1TargetAddress"), ("HM2-NAT-MIB", "hm21to1NewTargetAddress"), ("HM2-NAT-MIB", "hm21to1RuleParams"), ("HM2-NAT-MIB", "hm21to1Log"), ("HM2-NAT-MIB", "hm21to1Trap"), ("HM2-NAT-MIB", "hm21to1Description"), ("HM2-NAT-MIB", "hm21to1IngressIntf"), ("HM2-NAT-MIB", "hm21to1EgressIntf"), ("HM2-NAT-MIB", "hm21to1Priority"), ("HM2-NAT-MIB", "hm21to1RowStatus"), ("HM2-NAT-MIB", "hm21to1StatsPckCount"), ("HM2-NAT-MIB", "hm21to1StatsPckSize"), ("HM2-NAT-MIB", "hm21to1StatsLastApplied"), ("HM2-NAT-MIB", "hm21to1StatsTotalPck"), ("HM2-NAT-MIB", "hm21to1StatsTotalPckSize"), ("HM2-NAT-MIB", "hm21to1StatsTotalPckDenDrop"), ("HM2-NAT-MIB", "hm21to1StatsTotalPckAccepted"), ("HM2-NAT-MIB", "hm2MasqIfMappingRuleCount"), ("HM2-NAT-MIB", "hm2MasqRulePendingActions"), ("HM2-NAT-MIB", "hm2MasqCommitPendingActions"), ("HM2-NAT-MIB", "hm2MasqRuleCount"), ("HM2-NAT-MIB", "hm2MasqRuleIndex"), ("HM2-NAT-MIB", "hm2MasqSourceAddress"), ("HM2-NAT-MIB", "hm2MasqSourcePort"), ("HM2-NAT-MIB", "hm2MasqProto"), ("HM2-NAT-MIB", "hm2MasqRuleParams"), ("HM2-NAT-MIB", "hm2MasqLog"), ("HM2-NAT-MIB", "hm2MasqTrap"), ("HM2-NAT-MIB", "hm2MasqDescription"), ("HM2-NAT-MIB", "hm2MasqRowStatus"), ("HM2-NAT-MIB", "hm2MasqIfmPriority"), ("HM2-NAT-MIB", "hm2MasqIfmRowStatus"), ("HM2-NAT-MIB", "hm2MasqStatsPckCount"), ("HM2-NAT-MIB", "hm2MasqStatsPckSize"), ("HM2-NAT-MIB", "hm2MasqStatsLastApplied"), ("HM2-NAT-MIB", "hm2MasqStatsTotalPck"), ("HM2-NAT-MIB", "hm2MasqStatsTotalPckSize"), ("HM2-NAT-MIB", "hm2MasqStatsTotalPckDenDrop"), ("HM2-NAT-MIB", "hm2MasqStatsTotalPckAccepted"), ("HM2-NAT-MIB", "hm2DoubleNatIfMappingRuleCount"), ("HM2-NAT-MIB", "hm2DoubleNatRulePendingActions"), ("HM2-NAT-MIB", "hm2DoubleNatCommitPendingActions"), ("HM2-NAT-MIB", "hm2DoubleNatRuleCount"), ("HM2-NAT-MIB", "hm2DonatRuleIndex"), ("HM2-NAT-MIB", "hm2DonatLocalInternalIp"), ("HM2-NAT-MIB", "hm2DonatLocalExternalIp"), ("HM2-NAT-MIB", "hm2DonatRemoteInternalIp"), ("HM2-NAT-MIB", "hm2DonatRemoteExternalIp"), ("HM2-NAT-MIB", "hm2DonatRuleParams"), ("HM2-NAT-MIB", "hm2DonatLog"), ("HM2-NAT-MIB", "hm2DonatTrap"), ("HM2-NAT-MIB", "hm2DonatDescription"), ("HM2-NAT-MIB", "hm2DonatIfmPriority"), ("HM2-NAT-MIB", "hm2DonatIfmRowStatus"), ("HM2-NAT-MIB", "hm2DonatRowStatus"), ("HM2-NAT-MIB", "hm2DonatStatsPckCount"), ("HM2-NAT-MIB", "hm2DonatStatsPckSize"), ("HM2-NAT-MIB", "hm2DonatStatsLastApplied"), ("HM2-NAT-MIB", "hm2DonatStatsTotalPck"), ("HM2-NAT-MIB", "hm2DonatStatsTotalPckSize"), ("HM2-NAT-MIB", "hm2DonatStatsTotalPckDenDrop"), ("HM2-NAT-MIB", "hm2DonatStatsTotalPckAcc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2NatGeneralGroup = hm2NatGeneralGroup.setStatus('current')
hm2NatNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 248, 11, 80, 2, 2, 2)).setObjects(("HM2-NAT-MIB", "hm2DnatRuleAppliedTrap"), ("HM2-NAT-MIB", "hm2DnatRuleAppliedAndLoggedTrap"), ("HM2-NAT-MIB", "hm21to1RuleAppliedTrap"), ("HM2-NAT-MIB", "hm21to1RuleAppliedAndLoggedTrap"), ("HM2-NAT-MIB", "hm2MasqRuleAppliedTrap"), ("HM2-NAT-MIB", "hm2MasqRuleAppliedAndLoggedTrap"), ("HM2-NAT-MIB", "hm2DonatRuleAppliedTrap"), ("HM2-NAT-MIB", "hm2DonatRuleAppliedAndLoggedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2NatNotificationsGroup = hm2NatNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("HM2-NAT-MIB", hm2DonatRuleParams=hm2DonatRuleParams, hm2NatGeneralGroup=hm2NatGeneralGroup, hm2DnatIfmPriority=hm2DnatIfmPriority, hm2DonatRuleIfMappingTable=hm2DonatRuleIfMappingTable, hm2DnatRuleAppliedTrap=hm2DnatRuleAppliedTrap, hm2DnatRuleEntry=hm2DnatRuleEntry, hm2DnatStats=hm2DnatStats, hm21to1StatsTotalPckSize=hm21to1StatsTotalPckSize, hm21to1StatsRuleTableEntry=hm21to1StatsRuleTableEntry, hm21to1StatsLastApplied=hm21to1StatsLastApplied, hm2DnatIfmRuleIndex=hm2DnatIfmRuleIndex, hm2MasqIfmPriority=hm2MasqIfmPriority, hm2DnatStatsRuleTableEntry=hm2DnatStatsRuleTableEntry, hm21to1PublicIntf=hm21to1PublicIntf, hm21to1EgressIntf=hm21to1EgressIntf, hm2DnatTargetPort=hm2DnatTargetPort, hm21to1StatsPckCount=hm21to1StatsPckCount, hm2MasqIfmRowStatus=hm2MasqIfmRowStatus, hm2DonatRuleAppliedAndLoggedTrap=hm2DonatRuleAppliedAndLoggedTrap, hm2MasqStatsRuleTables=hm2MasqStatsRuleTables, hm2MasqRuleEntry=hm2MasqRuleEntry, hm2DonatLocalExternalIp=hm2DonatLocalExternalIp, hm21to1RuleObjects=hm21to1RuleObjects, hm2MasqRuleCount=hm2MasqRuleCount, hm2DonatRuleIfMappingEntry=hm2DonatRuleIfMappingEntry, hm2DonatRemoteExternalIp=hm2DonatRemoteExternalIp, hm2DonatStatsTotalPckDenDrop=hm2DonatStatsTotalPckDenDrop, hm21to1StatsPckSize=hm21to1StatsPckSize, hm2MasqStatsPckSize=hm2MasqStatsPckSize, hm2DnatStatsTotalPckSize=hm2DnatStatsTotalPckSize, hm2MasqStats=hm2MasqStats, hm2DonatStatsTotalPckSize=hm2DonatStatsTotalPckSize, hm2DnatRulesObjects=hm2DnatRulesObjects, hm21to1NewTargetAddress=hm21to1NewTargetAddress, hm21to1StatsTotalPck=hm21to1StatsTotalPck, hm2DonatStatsLastApplied=hm2DonatStatsLastApplied, hm2DnatMaxRules=hm2DnatMaxRules, hm2MasqDescription=hm2MasqDescription, hm2DonatIfmPriority=hm2DonatIfmPriority, hm21to1IngressIntf=hm21to1IngressIntf, hm2DonatLog=hm2DonatLog, hm2MasqStatsTotalPck=hm2MasqStatsTotalPck, hm2DonatRowStatus=hm2DonatRowStatus, hm2DonatStatsTotalPck=hm2DonatStatsTotalPck, hm2DnatRulesTables=hm2DnatRulesTables, hm2DonatGeneralStats=hm2DonatGeneralStats, hm2MasqStatsTotalPckAccepted=hm2MasqStatsTotalPckAccepted, hm2NatResetStatistics=hm2NatResetStatistics, hm21to1StatsRuleTable=hm21to1StatsRuleTable, hm2MasqRuleAppliedTrap=hm2MasqRuleAppliedTrap, hm2NatGeneralSettings=hm2NatGeneralSettings, hm2MasqIfmInterface=hm2MasqIfmInterface, hm2DoubleNatRuleCount=hm2DoubleNatRuleCount, hm21to1RuleCount=hm21to1RuleCount, hm2DoubleNatMaxRules=hm2DoubleNatMaxRules, hm2DonatLocalInternalIp=hm2DonatLocalInternalIp, hm2MasqRuleTables=hm2MasqRuleTables, hm2DnatTrap=hm2DnatTrap, hm21to1RuleAppliedTrap=hm21to1RuleAppliedTrap, hm21to1CommitPendingActions=hm21to1CommitPendingActions, hm2DonatDescription=hm2DonatDescription, hm2DnatRuleParams=hm2DnatRuleParams, hm2MasqProto=hm2MasqProto, hm2DnatRules=hm2DnatRules, hm21to1Description=hm21to1Description, hm2MasqRuleTable=hm2MasqRuleTable, hm21to1StatsTables=hm21to1StatsTables, hm21to1RuleEntry=hm21to1RuleEntry, hm21to1Stats=hm21to1Stats, hm2DnatRuleTable=hm2DnatRuleTable, hm2NatObjects=hm2NatObjects, hm2DonatStatsTotalPckAcc=hm2DonatStatsTotalPckAcc, hm2DonatStatsPckSize=hm2DonatStatsPckSize, hm21to1RuleTable=hm21to1RuleTable, hm21to1StorageType=hm21to1StorageType, hm2DnatSourcePort=hm2DnatSourcePort, hm2MasqIpsecExempt=hm2MasqIpsecExempt, hm2NatConformance=hm2NatConformance, hm2MasqStatsPckCount=hm2MasqStatsPckCount, hm2DnatStatsTotalPckAccepted=hm2DnatStatsTotalPckAccepted, hm21to1Alg=hm21to1Alg, hm2DonatStats=hm2DonatStats, hm2DonatIfmDirection=hm2DonatIfmDirection, hm2DnatTargetAddress=hm2DnatTargetAddress, hm21to1RulePendingActions=hm21to1RulePendingActions, hm2DnatRuleIfMappingEntry=hm2DnatRuleIfMappingEntry, hm2DnatStatsTotalPckDenDrop=hm2DnatStatsTotalPckDenDrop, hm2DonatTrap=hm2DonatTrap, hm2DonatIfmRuleIndex=hm2DonatIfmRuleIndex, hm2NatCompliances=hm2NatCompliances, hm2MasqGeneralStats=hm2MasqGeneralStats, hm2Dnat=hm2Dnat, hm2NatGroups=hm2NatGroups, hm21to1GeneralStats=hm21to1GeneralStats, hm2MasqRuleIndex=hm2MasqRuleIndex, hm2DnatStatsLastApplied=hm2DnatStatsLastApplied, hm2DnatStatsTotalPck=hm2DnatStatsTotalPck, hm21to1RuleParams=hm21to1RuleParams, hm2DoubleNat=hm2DoubleNat, hm2DoubleNatRuleObjects=hm2DoubleNatRuleObjects, hm2DnatRuleStats=hm2DnatRuleStats, hm21to1Trap=hm21to1Trap, hm21to1StatsTotalPckAccepted=hm21to1StatsTotalPckAccepted, hm21to1RowStatus=hm21to1RowStatus, hm2DoubleNatIfMappingRuleCount=hm2DoubleNatIfMappingRuleCount, hm2DnatRowStatus=hm2DnatRowStatus, hm2DnatRulePendingActions=hm2DnatRulePendingActions, hm21to1Priority=hm21to1Priority, hm21to1StatsTotalPckDenDrop=hm21to1StatsTotalPckDenDrop, hm2Masquerading=hm2Masquerading, hm2MasqLog=hm2MasqLog, hm2DoubleNatCommitPendingActions=hm2DoubleNatCommitPendingActions, hm2DonatIfmRowStatus=hm2DonatIfmRowStatus, hm2DonatStatsPckCount=hm2DonatStatsPckCount, hm2NatNotifications=hm2NatNotifications, hm2MasqRuleParams=hm2MasqRuleParams, hm2NatCompliance=hm2NatCompliance, hm21to1RuleAppliedAndLoggedTrap=hm21to1RuleAppliedAndLoggedTrap, hm2DnatLog=hm2DnatLog, hm2MasqIfMappingRuleCount=hm2MasqIfMappingRuleCount, hm2MasqRulePendingActions=hm2MasqRulePendingActions, hm2MasqStatsRuleTableEntry=hm2MasqStatsRuleTableEntry, hm2MasqCommitPendingActions=hm2MasqCommitPendingActions, hm2DnatStatsPckCount=hm2DnatStatsPckCount, hm2DnatRuleIndex=hm2DnatRuleIndex, hm2MasqIfmRuleIndex=hm2MasqIfmRuleIndex, hm2MasqRuleIfMappingTable=hm2MasqRuleIfMappingTable, hm2MasqStatsRuleTable=hm2MasqStatsRuleTable, hm2DnatRuleAppliedAndLoggedTrap=hm2DnatRuleAppliedAndLoggedTrap, hm21to1TargetAddress=hm21to1TargetAddress, hm2DonatRemoteInternalIp=hm2DonatRemoteInternalIp, hm2DnatGlobalStats=hm2DnatGlobalStats, hm2DnatIfmInterface=hm2DnatIfmInterface, hm2DonatStatsRuleTable=hm2DonatStatsRuleTable, hm2DnatCommitPendingActions=hm2DnatCommitPendingActions, PYSNMP_MODULE_ID=hm2NatMib, hm2DonatRuleAppliedTrap=hm2DonatRuleAppliedTrap, hm2DnatIfmDirection=hm2DnatIfmDirection, hm2DnatRuleCount=hm2DnatRuleCount, hm21to1RuleTables=hm21to1RuleTables, hm21to1RuleIndex=hm21to1RuleIndex, hm2MasqIfmDirection=hm2MasqIfmDirection, hm2DonatIfmInterface=hm2DonatIfmInterface, hm2OneToOneNatMaxRules=hm2OneToOneNatMaxRules, hm2DonatStatsRuleTables=hm2DonatStatsRuleTables, hm2NatNotificationsGroup=hm2NatNotificationsGroup, hm2NatMib=hm2NatMib, hm2DnatNewTargetAddress=hm2DnatNewTargetAddress, hm2MasqRuleObjects=hm2MasqRuleObjects, hm2MasqRowStatus=hm2MasqRowStatus, hm2MasqRuleIfMappingEntry=hm2MasqRuleIfMappingEntry, hm21to1=hm21to1, hm2MasqSourcePort=hm2MasqSourcePort, hm2DnatNewTargetPort=hm2DnatNewTargetPort, hm2DoubleNatRuleEntry=hm2DoubleNatRuleEntry, hm2MasqTrap=hm2MasqTrap, hm2MasqSourceAddress=hm2MasqSourceAddress, hm2DoubleNatRuleTables=hm2DoubleNatRuleTables, hm2DnatIfMappingRuleCount=hm2DnatIfMappingRuleCount, hm2MasqMaxRules=hm2MasqMaxRules, hm2DnatRuleIfMappingTable=hm2DnatRuleIfMappingTable, hm2DnatIfmRowStatus=hm2DnatIfmRowStatus, hm2MasqStatsTotalPckDenDrop=hm2MasqStatsTotalPckDenDrop, hm2DnatSourceAddress=hm2DnatSourceAddress, hm2DnatStatsRuleTable=hm2DnatStatsRuleTable, hm2DnatDescription=hm2DnatDescription, hm2MasqStatsTotalPckSize=hm2MasqStatsTotalPckSize, hm2DnatProto=hm2DnatProto, hm2DonatRuleIndex=hm2DonatRuleIndex, hm2DnatStatsPckSize=hm2DnatStatsPckSize, hm2DoubleNatRuleTable=hm2DoubleNatRuleTable, hm2DoubleNatRulePendingActions=hm2DoubleNatRulePendingActions, hm21to1Log=hm21to1Log, hm2DonatStatsRuleTableEntry=hm2DonatStatsRuleTableEntry, hm2MasqStatsLastApplied=hm2MasqStatsLastApplied, hm2MasqRuleAppliedAndLoggedTrap=hm2MasqRuleAppliedAndLoggedTrap, hm21to1IfMappingRuleCount=hm21to1IfMappingRuleCount)
