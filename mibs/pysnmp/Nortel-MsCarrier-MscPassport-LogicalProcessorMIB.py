#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-LogicalProcessorMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-LogicalProcessorMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
Gauge32, Unsigned32, Integer32, DisplayString, StorageType, RowStatus, RowPointer, Counter32, InterfaceIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Gauge32", "Unsigned32", "Integer32", "DisplayString", "StorageType", "RowStatus", "RowPointer", "Counter32", "InterfaceIndex")
Link, EnterpriseDateAndTime, AsciiString, NonReplicated, Hex, PassportCounter64 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Link", "EnterpriseDateAndTime", "AsciiString", "NonReplicated", "Hex", "PassportCounter64")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, Integer32, Bits, ModuleIdentity, ObjectIdentity, Unsigned32, iso, IpAddress, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Integer32", "Bits", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
logicalProcessorMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11))
mscLp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12))
mscLpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1), )
if mibBuilder.loadTexts: mscLpRowStatusTable.setStatus('mandatory')
mscLpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpRowStatusEntry.setStatus('mandatory')
mscLpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpRowStatus.setStatus('mandatory')
mscLpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpComponentName.setStatus('mandatory')
mscLpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpStorageType.setStatus('mandatory')
mscLpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscLpIndex.setStatus('mandatory')
mscLpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100), )
if mibBuilder.loadTexts: mscLpProvTable.setStatus('mandatory')
mscLpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpProvEntry.setStatus('mandatory')
mscLpMainCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpMainCard.setStatus('mandatory')
mscLpSpareCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSpareCard.setStatus('mandatory')
mscLpLogicalProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpLogicalProcessorType.setStatus('mandatory')
mscLpCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101), )
if mibBuilder.loadTexts: mscLpCidDataTable.setStatus('mandatory')
mscLpCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpCidDataEntry.setStatus('mandatory')
mscLpCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpCustomerIdentifier.setStatus('mandatory')
mscLpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102), )
if mibBuilder.loadTexts: mscLpStateTable.setStatus('mandatory')
mscLpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpStateEntry.setStatus('mandatory')
mscLpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpAdminState.setStatus('mandatory')
mscLpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpOperationalState.setStatus('mandatory')
mscLpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpUsageState.setStatus('mandatory')
mscLpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpAvailabilityStatus.setStatus('mandatory')
mscLpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpProceduralStatus.setStatus('mandatory')
mscLpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpControlStatus.setStatus('mandatory')
mscLpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpAlarmStatus.setStatus('mandatory')
mscLpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpStandbyStatus.setStatus('mandatory')
mscLpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpUnknownStatus.setStatus('mandatory')
mscLpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103), )
if mibBuilder.loadTexts: mscLpOperTable.setStatus('mandatory')
mscLpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpOperEntry.setStatus('mandatory')
mscLpActiveCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpActiveCard.setStatus('mandatory')
mscLpMainCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("notProvisioned", 0), ("notAvailable", 1), ("available", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMainCardStatus.setStatus('mandatory')
mscLpSpareCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notProvisioned", 0), ("notAvailable", 1), ("alreadyInUse", 2), ("available", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSpareCardStatus.setStatus('mandatory')
mscLpRestartOnCpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpRestartOnCpSwitch.setStatus('mandatory')
mscLpScheduledSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpScheduledSwitchover.setStatus('mandatory')
mscLpUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104), )
if mibBuilder.loadTexts: mscLpUtilTable.setStatus('mandatory')
mscLpUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpUtilEntry.setStatus('mandatory')
mscLpTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpTimeInterval.setStatus('mandatory')
mscLpCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpCpuUtil.setStatus('mandatory')
mscLpCpuUtilAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpCpuUtilAvg.setStatus('mandatory')
mscLpCpuUtilAvgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpCpuUtilAvgMin.setStatus('mandatory')
mscLpCpuUtilAvgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpCpuUtilAvgMax.setStatus('mandatory')
mscLpMsgBlockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMsgBlockUsage.setStatus('mandatory')
mscLpMsgBlockUsageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMsgBlockUsageAvg.setStatus('mandatory')
mscLpMsgBlockUsageAvgMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMsgBlockUsageAvgMin.setStatus('mandatory')
mscLpMsgBlockUsageAvgMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMsgBlockUsageAvgMax.setStatus('mandatory')
mscLpLocalMsgBlockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLocalMsgBlockUsage.setStatus('mandatory')
mscLpLocalMsgBlockUsageAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLocalMsgBlockUsageAvg.setStatus('mandatory')
mscLpLocalMsgBlockUsageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLocalMsgBlockUsageMin.setStatus('mandatory')
mscLpLocalMsgBlockUsageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLocalMsgBlockUsageMax.setStatus('mandatory')
mscLpCapTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105), )
if mibBuilder.loadTexts: mscLpCapTable.setStatus('mandatory')
mscLpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"))
if mibBuilder.loadTexts: mscLpCapEntry.setStatus('mandatory')
mscLpMsgBlockCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMsgBlockCapacity.setStatus('mandatory')
mscLpLocalMsgBlockCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLocalMsgBlockCapacity.setStatus('mandatory')
mscLpLinkToApplicationsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242), )
if mibBuilder.loadTexts: mscLpLinkToApplicationsTable.setStatus('mandatory')
mscLpLinkToApplicationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpLinkToApplicationsValue"))
if mibBuilder.loadTexts: mscLpLinkToApplicationsEntry.setStatus('mandatory')
mscLpLinkToApplicationsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242, 1, 1), Link()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpLinkToApplicationsValue.setStatus('mandatory')
mscLpMemoryCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244), )
if mibBuilder.loadTexts: mscLpMemoryCapacityTable.setStatus('mandatory')
mscLpMemoryCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryCapacityIndex"))
if mibBuilder.loadTexts: mscLpMemoryCapacityEntry.setStatus('mandatory')
mscLpMemoryCapacityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: mscLpMemoryCapacityIndex.setStatus('mandatory')
mscLpMemoryCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMemoryCapacityValue.setStatus('mandatory')
mscLpMemoryUsageTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245), )
if mibBuilder.loadTexts: mscLpMemoryUsageTable.setStatus('mandatory')
mscLpMemoryUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageIndex"))
if mibBuilder.loadTexts: mscLpMemoryUsageEntry.setStatus('mandatory')
mscLpMemoryUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: mscLpMemoryUsageIndex.setStatus('mandatory')
mscLpMemoryUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMemoryUsageValue.setStatus('mandatory')
mscLpMemoryUsageAvgTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276), )
if mibBuilder.loadTexts: mscLpMemoryUsageAvgTable.setStatus('mandatory')
mscLpMemoryUsageAvgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgIndex"))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgEntry.setStatus('mandatory')
mscLpMemoryUsageAvgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgIndex.setStatus('mandatory')
mscLpMemoryUsageAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMemoryUsageAvgValue.setStatus('mandatory')
mscLpMemoryUsageAvgMinTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277), )
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMinTable.setStatus('mandatory')
mscLpMemoryUsageAvgMinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgMinIndex"))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMinEntry.setStatus('mandatory')
mscLpMemoryUsageAvgMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMinIndex.setStatus('mandatory')
mscLpMemoryUsageAvgMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMinValue.setStatus('mandatory')
mscLpMemoryUsageAvgMaxTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278), )
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMaxTable.setStatus('mandatory')
mscLpMemoryUsageAvgMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgMaxIndex"))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMaxEntry.setStatus('mandatory')
mscLpMemoryUsageAvgMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fastRam", 0), ("normalRam", 1), ("sharedRam", 2))))
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMaxIndex.setStatus('mandatory')
mscLpMemoryUsageAvgMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpMemoryUsageAvgMaxValue.setStatus('mandatory')
mscLpDS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5))
mscLpDS3RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1), )
if mibBuilder.loadTexts: mscLpDS3RowStatusTable.setStatus('mandatory')
mscLpDS3RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3RowStatusEntry.setStatus('mandatory')
mscLpDS3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3RowStatus.setStatus('mandatory')
mscLpDS3ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ComponentName.setStatus('mandatory')
mscLpDS3StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3StorageType.setStatus('mandatory')
mscLpDS3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: mscLpDS3Index.setStatus('mandatory')
mscLpDS3ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10), )
if mibBuilder.loadTexts: mscLpDS3ProvTable.setStatus('mandatory')
mscLpDS3ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3ProvEntry.setStatus('mandatory')
mscLpDS3CbitParity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CbitParity.setStatus('mandatory')
mscLpDS3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3LineLength.setStatus('mandatory')
mscLpDS3ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ClockingSource.setStatus('mandatory')
mscLpDS3ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3ApplicationFramerName.setStatus('mandatory')
mscLpDS3Mapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("direct", 0), ("plcp", 1))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3Mapping.setStatus('mandatory')
mscLpDS3CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11), )
if mibBuilder.loadTexts: mscLpDS3CidDataTable.setStatus('mandatory')
mscLpDS3CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3CidDataEntry.setStatus('mandatory')
mscLpDS3CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CustomerIdentifier.setStatus('mandatory')
mscLpDS3AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12), )
if mibBuilder.loadTexts: mscLpDS3AdminInfoTable.setStatus('mandatory')
mscLpDS3AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3AdminInfoEntry.setStatus('mandatory')
mscLpDS3Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3Vendor.setStatus('mandatory')
mscLpDS3CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CommentText.setStatus('mandatory')
mscLpDS3IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13), )
if mibBuilder.loadTexts: mscLpDS3IfEntryTable.setStatus('mandatory')
mscLpDS3IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3IfEntryEntry.setStatus('mandatory')
mscLpDS3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3IfAdminStatus.setStatus('mandatory')
mscLpDS3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3IfIndex.setStatus('mandatory')
mscLpDS3OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14), )
if mibBuilder.loadTexts: mscLpDS3OperStatusTable.setStatus('mandatory')
mscLpDS3OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3OperStatusEntry.setStatus('mandatory')
mscLpDS3SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3SnmpOperStatus.setStatus('mandatory')
mscLpDS3StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15), )
if mibBuilder.loadTexts: mscLpDS3StateTable.setStatus('mandatory')
mscLpDS3StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3StateEntry.setStatus('mandatory')
mscLpDS3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3AdminState.setStatus('mandatory')
mscLpDS3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3OperationalState.setStatus('mandatory')
mscLpDS3UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3UsageState.setStatus('mandatory')
mscLpDS3AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3AvailabilityStatus.setStatus('mandatory')
mscLpDS3ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ProceduralStatus.setStatus('mandatory')
mscLpDS3ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ControlStatus.setStatus('mandatory')
mscLpDS3AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3AlarmStatus.setStatus('mandatory')
mscLpDS3StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3StandbyStatus.setStatus('mandatory')
mscLpDS3UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3UnknownStatus.setStatus('mandatory')
mscLpDS3OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16), )
if mibBuilder.loadTexts: mscLpDS3OperTable.setStatus('mandatory')
mscLpDS3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3OperEntry.setStatus('mandatory')
mscLpDS3LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LosAlarm.setStatus('mandatory')
mscLpDS3LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LofAlarm.setStatus('mandatory')
mscLpDS3RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3RxAisAlarm.setStatus('mandatory')
mscLpDS3RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3RxRaiAlarm.setStatus('mandatory')
mscLpDS3RxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3RxIdle.setStatus('mandatory')
mscLpDS3TxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TxAis.setStatus('mandatory')
mscLpDS3TxRai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TxRai.setStatus('mandatory')
mscLpDS3TxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TxIdle.setStatus('mandatory')
mscLpDS3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17), )
if mibBuilder.loadTexts: mscLpDS3StatsTable.setStatus('mandatory')
mscLpDS3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"))
if mibBuilder.loadTexts: mscLpDS3StatsEntry.setStatus('mandatory')
mscLpDS3RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3RunningTime.setStatus('mandatory')
mscLpDS3ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3ErrorFreeSec.setStatus('mandatory')
mscLpDS3LineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LineCodeViolations.setStatus('mandatory')
mscLpDS3LineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LineErroredSec.setStatus('mandatory')
mscLpDS3LineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LineSevErroredSec.setStatus('mandatory')
mscLpDS3LineLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LineLosSec.setStatus('mandatory')
mscLpDS3LineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3LineFailures.setStatus('mandatory')
mscLpDS3PathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathCodeViolations.setStatus('mandatory')
mscLpDS3PathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathErroredSec.setStatus('mandatory')
mscLpDS3PathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathSevErroredSec.setStatus('mandatory')
mscLpDS3PathSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathSefAisSec.setStatus('mandatory')
mscLpDS3PathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathUnavailSec.setStatus('mandatory')
mscLpDS3PathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PathFailures.setStatus('mandatory')
mscLpDS3Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2))
mscLpDS3TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1), )
if mibBuilder.loadTexts: mscLpDS3TestRowStatusTable.setStatus('mandatory')
mscLpDS3TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"))
if mibBuilder.loadTexts: mscLpDS3TestRowStatusEntry.setStatus('mandatory')
mscLpDS3TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestRowStatus.setStatus('mandatory')
mscLpDS3TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestComponentName.setStatus('mandatory')
mscLpDS3TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestStorageType.setStatus('mandatory')
mscLpDS3TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3TestIndex.setStatus('mandatory')
mscLpDS3TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10), )
if mibBuilder.loadTexts: mscLpDS3TestStateTable.setStatus('mandatory')
mscLpDS3TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"))
if mibBuilder.loadTexts: mscLpDS3TestStateEntry.setStatus('mandatory')
mscLpDS3TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestAdminState.setStatus('mandatory')
mscLpDS3TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestOperationalState.setStatus('mandatory')
mscLpDS3TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestUsageState.setStatus('mandatory')
mscLpDS3TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11), )
if mibBuilder.loadTexts: mscLpDS3TestSetupTable.setStatus('mandatory')
mscLpDS3TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"))
if mibBuilder.loadTexts: mscLpDS3TestSetupEntry.setStatus('mandatory')
mscLpDS3TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestPurpose.setStatus('mandatory')
mscLpDS3TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestType.setStatus('mandatory')
mscLpDS3TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestFrmSize.setStatus('mandatory')
mscLpDS3TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestFrmPatternType.setStatus('mandatory')
mscLpDS3TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestCustomizedPattern.setStatus('mandatory')
mscLpDS3TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestDataStartDelay.setStatus('mandatory')
mscLpDS3TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestDisplayInterval.setStatus('mandatory')
mscLpDS3TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3TestDuration.setStatus('mandatory')
mscLpDS3TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12), )
if mibBuilder.loadTexts: mscLpDS3TestResultsTable.setStatus('mandatory')
mscLpDS3TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"))
if mibBuilder.loadTexts: mscLpDS3TestResultsEntry.setStatus('mandatory')
mscLpDS3TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestElapsedTime.setStatus('mandatory')
mscLpDS3TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestTimeRemaining.setStatus('mandatory')
mscLpDS3TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestCauseOfTermination.setStatus('mandatory')
mscLpDS3TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestBitsTx.setStatus('mandatory')
mscLpDS3TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestBytesTx.setStatus('mandatory')
mscLpDS3TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestFrmTx.setStatus('mandatory')
mscLpDS3TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestBitsRx.setStatus('mandatory')
mscLpDS3TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestBytesRx.setStatus('mandatory')
mscLpDS3TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestFrmRx.setStatus('mandatory')
mscLpDS3TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestErroredFrmRx.setStatus('mandatory')
mscLpDS3TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3TestBitErrorRate.setStatus('mandatory')
mscLpDS3CBit = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3))
mscLpDS3CBitRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1), )
if mibBuilder.loadTexts: mscLpDS3CBitRowStatusTable.setStatus('mandatory')
mscLpDS3CBitRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"))
if mibBuilder.loadTexts: mscLpDS3CBitRowStatusEntry.setStatus('mandatory')
mscLpDS3CBitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitRowStatus.setStatus('mandatory')
mscLpDS3CBitComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitComponentName.setStatus('mandatory')
mscLpDS3CBitStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitStorageType.setStatus('mandatory')
mscLpDS3CBitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3CBitIndex.setStatus('mandatory')
mscLpDS3CBitOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10), )
if mibBuilder.loadTexts: mscLpDS3CBitOperationalTable.setStatus('mandatory')
mscLpDS3CBitOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"))
if mibBuilder.loadTexts: mscLpDS3CBitOperationalEntry.setStatus('mandatory')
mscLpDS3CBitFarEndAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("equipmentFailure", 0), ("los", 1), ("sef", 2), ("ais", 3), ("idle", 4), ("none", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndAlarm.setStatus('mandatory')
mscLpDS3CBitLoopedbackToFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitLoopedbackToFarEnd.setStatus('mandatory')
mscLpDS3CBitLoopbackAtFarEndRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitLoopbackAtFarEndRequested.setStatus('mandatory')
mscLpDS3CBitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11), )
if mibBuilder.loadTexts: mscLpDS3CBitStatsTable.setStatus('mandatory')
mscLpDS3CBitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"))
if mibBuilder.loadTexts: mscLpDS3CBitStatsEntry.setStatus('mandatory')
mscLpDS3CBitCbitErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitCbitErrorFreeSec.setStatus('mandatory')
mscLpDS3CBitCbitCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitCbitCodeViolations.setStatus('mandatory')
mscLpDS3CBitCbitErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitCbitErroredSec.setStatus('mandatory')
mscLpDS3CBitCbitSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitCbitSevErroredSec.setStatus('mandatory')
mscLpDS3CBitCbitUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitCbitUnavailSec.setStatus('mandatory')
mscLpDS3CBitFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndErrorFreeSec.setStatus('mandatory')
mscLpDS3CBitFarEndCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndCodeViolations.setStatus('mandatory')
mscLpDS3CBitFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndErroredSec.setStatus('mandatory')
mscLpDS3CBitFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndSevErroredSec.setStatus('mandatory')
mscLpDS3CBitFarEndSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndSefAisSec.setStatus('mandatory')
mscLpDS3CBitFarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndUnavailSec.setStatus('mandatory')
mscLpDS3CBitFarEndFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CBitFarEndFailures.setStatus('mandatory')
mscLpDS3Plcp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4))
mscLpDS3PlcpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1), )
if mibBuilder.loadTexts: mscLpDS3PlcpRowStatusTable.setStatus('mandatory')
mscLpDS3PlcpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"))
if mibBuilder.loadTexts: mscLpDS3PlcpRowStatusEntry.setStatus('mandatory')
mscLpDS3PlcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpRowStatus.setStatus('mandatory')
mscLpDS3PlcpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpComponentName.setStatus('mandatory')
mscLpDS3PlcpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpStorageType.setStatus('mandatory')
mscLpDS3PlcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3PlcpIndex.setStatus('mandatory')
mscLpDS3PlcpOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10), )
if mibBuilder.loadTexts: mscLpDS3PlcpOperationalTable.setStatus('mandatory')
mscLpDS3PlcpOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"))
if mibBuilder.loadTexts: mscLpDS3PlcpOperationalEntry.setStatus('mandatory')
mscLpDS3PlcpLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpLofAlarm.setStatus('mandatory')
mscLpDS3PlcpRxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpRxRaiAlarm.setStatus('mandatory')
mscLpDS3PlcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11), )
if mibBuilder.loadTexts: mscLpDS3PlcpStatsTable.setStatus('mandatory')
mscLpDS3PlcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"))
if mibBuilder.loadTexts: mscLpDS3PlcpStatsEntry.setStatus('mandatory')
mscLpDS3PlcpErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpErrorFreeSec.setStatus('mandatory')
mscLpDS3PlcpCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpCodingViolations.setStatus('mandatory')
mscLpDS3PlcpErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpErroredSec.setStatus('mandatory')
mscLpDS3PlcpSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpSevErroredSec.setStatus('mandatory')
mscLpDS3PlcpSevErroredFramingSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpSevErroredFramingSec.setStatus('mandatory')
mscLpDS3PlcpUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpUnavailSec.setStatus('mandatory')
mscLpDS3PlcpFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpFarEndErrorFreeSec.setStatus('mandatory')
mscLpDS3PlcpFarEndCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpFarEndCodingViolations.setStatus('mandatory')
mscLpDS3PlcpFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpFarEndErroredSec.setStatus('mandatory')
mscLpDS3PlcpFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpFarEndSevErroredSec.setStatus('mandatory')
mscLpDS3PlcpFarEndUnavailableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3PlcpFarEndUnavailableSec.setStatus('mandatory')
mscLpDS3Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5))
mscLpDS3CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1), )
if mibBuilder.loadTexts: mscLpDS3CellRowStatusTable.setStatus('mandatory')
mscLpDS3CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"))
if mibBuilder.loadTexts: mscLpDS3CellRowStatusEntry.setStatus('mandatory')
mscLpDS3CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CellRowStatus.setStatus('mandatory')
mscLpDS3CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellComponentName.setStatus('mandatory')
mscLpDS3CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellStorageType.setStatus('mandatory')
mscLpDS3CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3CellIndex.setStatus('mandatory')
mscLpDS3CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10), )
if mibBuilder.loadTexts: mscLpDS3CellProvTable.setStatus('mandatory')
mscLpDS3CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"))
if mibBuilder.loadTexts: mscLpDS3CellProvEntry.setStatus('mandatory')
mscLpDS3CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CellAlarmActDelay.setStatus('mandatory')
mscLpDS3CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CellScrambleCellPayload.setStatus('mandatory')
mscLpDS3CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpDS3CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11), )
if mibBuilder.loadTexts: mscLpDS3CellOperTable.setStatus('mandatory')
mscLpDS3CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"))
if mibBuilder.loadTexts: mscLpDS3CellOperEntry.setStatus('mandatory')
mscLpDS3CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellLcdAlarm.setStatus('mandatory')
mscLpDS3CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12), )
if mibBuilder.loadTexts: mscLpDS3CellStatsTable.setStatus('mandatory')
mscLpDS3CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"))
if mibBuilder.loadTexts: mscLpDS3CellStatsEntry.setStatus('mandatory')
mscLpDS3CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellUncorrectableHecErrors.setStatus('mandatory')
mscLpDS3CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellSevErroredSec.setStatus('mandatory')
mscLpDS3CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellReceiveCellUtilization.setStatus('mandatory')
mscLpDS3CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellTransmitCellUtilization.setStatus('mandatory')
mscLpDS3CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3CellCorrectableHeaderErrors.setStatus('mandatory')
mscLpDS3DS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6))
mscLpDS3DS1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1RowStatusTable.setStatus('mandatory')
mscLpDS3DS1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1RowStatusEntry.setStatus('mandatory')
mscLpDS3DS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1RowStatus.setStatus('mandatory')
mscLpDS3DS1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ComponentName.setStatus('mandatory')
mscLpDS3DS1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1StorageType.setStatus('mandatory')
mscLpDS3DS1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: mscLpDS3DS1Index.setStatus('mandatory')
mscLpDS3DS1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1ProvTable.setStatus('mandatory')
mscLpDS3DS1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1ProvEntry.setStatus('mandatory')
mscLpDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("d4", 0), ("esf", 1), ("d4Cas", 4), ("esfCas", 5))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1LineType.setStatus('mandatory')
mscLpDS3DS1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("bit7Stuffing", 0), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ZeroCoding.setStatus('mandatory')
mscLpDS3DS1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ClockingSource.setStatus('mandatory')
mscLpDS3DS1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1CidDataTable.setStatus('mandatory')
mscLpDS3DS1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1CidDataEntry.setStatus('mandatory')
mscLpDS3DS1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1CustomerIdentifier.setStatus('mandatory')
mscLpDS3DS1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12), )
if mibBuilder.loadTexts: mscLpDS3DS1AdminInfoTable.setStatus('mandatory')
mscLpDS3DS1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1AdminInfoEntry.setStatus('mandatory')
mscLpDS3DS1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1Vendor.setStatus('mandatory')
mscLpDS3DS1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1CommentText.setStatus('mandatory')
mscLpDS3DS1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13), )
if mibBuilder.loadTexts: mscLpDS3DS1IfEntryTable.setStatus('mandatory')
mscLpDS3DS1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1IfEntryEntry.setStatus('mandatory')
mscLpDS3DS1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1IfAdminStatus.setStatus('mandatory')
mscLpDS3DS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1IfIndex.setStatus('mandatory')
mscLpDS3DS1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14), )
if mibBuilder.loadTexts: mscLpDS3DS1OperStatusTable.setStatus('mandatory')
mscLpDS3DS1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1OperStatusEntry.setStatus('mandatory')
mscLpDS3DS1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1SnmpOperStatus.setStatus('mandatory')
mscLpDS3DS1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15), )
if mibBuilder.loadTexts: mscLpDS3DS1StateTable.setStatus('mandatory')
mscLpDS3DS1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1StateEntry.setStatus('mandatory')
mscLpDS3DS1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1AdminState.setStatus('mandatory')
mscLpDS3DS1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1OperationalState.setStatus('mandatory')
mscLpDS3DS1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1UsageState.setStatus('mandatory')
mscLpDS3DS1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1AvailabilityStatus.setStatus('mandatory')
mscLpDS3DS1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ProceduralStatus.setStatus('mandatory')
mscLpDS3DS1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ControlStatus.setStatus('mandatory')
mscLpDS3DS1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1AlarmStatus.setStatus('mandatory')
mscLpDS3DS1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1StandbyStatus.setStatus('mandatory')
mscLpDS3DS1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1UnknownStatus.setStatus('mandatory')
mscLpDS3DS1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16), )
if mibBuilder.loadTexts: mscLpDS3DS1OperTable.setStatus('mandatory')
mscLpDS3DS1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1OperEntry.setStatus('mandatory')
mscLpDS3DS1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1RxAisAlarm.setStatus('mandatory')
mscLpDS3DS1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1LofAlarm.setStatus('mandatory')
mscLpDS3DS1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1RxRaiAlarm.setStatus('mandatory')
mscLpDS3DS1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TxAisAlarm.setStatus('mandatory')
mscLpDS3DS1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TxRaiAlarm.setStatus('mandatory')
mscLpDS3DS1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17), )
if mibBuilder.loadTexts: mscLpDS3DS1StatsTable.setStatus('mandatory')
mscLpDS3DS1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"))
if mibBuilder.loadTexts: mscLpDS3DS1StatsEntry.setStatus('mandatory')
mscLpDS3DS1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1RunningTime.setStatus('mandatory')
mscLpDS3DS1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ErrorFreeSec.setStatus('mandatory')
mscLpDS3DS1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ErroredSec.setStatus('mandatory')
mscLpDS3DS1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1SevErroredSec.setStatus('mandatory')
mscLpDS3DS1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1SevErroredFrmSec.setStatus('mandatory')
mscLpDS3DS1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1UnavailSec.setStatus('mandatory')
mscLpDS3DS1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1CrcErrors.setStatus('mandatory')
mscLpDS3DS1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1FrmErrors.setStatus('mandatory')
mscLpDS3DS1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1SlipErrors.setStatus('mandatory')
mscLpDS3DS1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2))
mscLpDS3DS1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanRowStatusTable.setStatus('mandatory')
mscLpDS3DS1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanRowStatusEntry.setStatus('mandatory')
mscLpDS3DS1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanRowStatus.setStatus('mandatory')
mscLpDS3DS1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanComponentName.setStatus('mandatory')
mscLpDS3DS1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanStorageType.setStatus('mandatory')
mscLpDS3DS1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpDS3DS1ChanIndex.setStatus('mandatory')
mscLpDS3DS1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanProvTable.setStatus('mandatory')
mscLpDS3DS1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanProvEntry.setStatus('mandatory')
mscLpDS3DS1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTimeslots.setStatus('mandatory')
mscLpDS3DS1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTimeslotDataRate.setStatus('mandatory')
mscLpDS3DS1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanApplicationFramerName.setStatus('mandatory')
mscLpDS3DS1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanCidDataTable.setStatus('mandatory')
mscLpDS3DS1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanCidDataEntry.setStatus('mandatory')
mscLpDS3DS1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCustomerIdentifier.setStatus('mandatory')
mscLpDS3DS1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanIfEntryTable.setStatus('mandatory')
mscLpDS3DS1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanIfEntryEntry.setStatus('mandatory')
mscLpDS3DS1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanIfAdminStatus.setStatus('mandatory')
mscLpDS3DS1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanIfIndex.setStatus('mandatory')
mscLpDS3DS1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanOperStatusTable.setStatus('mandatory')
mscLpDS3DS1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanOperStatusEntry.setStatus('mandatory')
mscLpDS3DS1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanSnmpOperStatus.setStatus('mandatory')
mscLpDS3DS1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanStateTable.setStatus('mandatory')
mscLpDS3DS1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanStateEntry.setStatus('mandatory')
mscLpDS3DS1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanAdminState.setStatus('mandatory')
mscLpDS3DS1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanOperationalState.setStatus('mandatory')
mscLpDS3DS1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanUsageState.setStatus('mandatory')
mscLpDS3DS1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanAvailabilityStatus.setStatus('mandatory')
mscLpDS3DS1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanProceduralStatus.setStatus('mandatory')
mscLpDS3DS1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanControlStatus.setStatus('mandatory')
mscLpDS3DS1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanAlarmStatus.setStatus('mandatory')
mscLpDS3DS1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanStandbyStatus.setStatus('mandatory')
mscLpDS3DS1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanUnknownStatus.setStatus('mandatory')
mscLpDS3DS1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanOperTable.setStatus('mandatory')
mscLpDS3DS1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanOperEntry.setStatus('mandatory')
mscLpDS3DS1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanActualChannelSpeed.setStatus('mandatory')
mscLpDS3DS1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanAdminInfoTable.setStatus('mandatory')
mscLpDS3DS1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanAdminInfoEntry.setStatus('mandatory')
mscLpDS3DS1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanVendor.setStatus('mandatory')
mscLpDS3DS1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCommentText.setStatus('mandatory')
mscLpDS3DS1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2))
mscLpDS3DS1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestRowStatusTable.setStatus('mandatory')
mscLpDS3DS1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestRowStatusEntry.setStatus('mandatory')
mscLpDS3DS1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestRowStatus.setStatus('mandatory')
mscLpDS3DS1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestComponentName.setStatus('mandatory')
mscLpDS3DS1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestStorageType.setStatus('mandatory')
mscLpDS3DS1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestIndex.setStatus('mandatory')
mscLpDS3DS1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestStateTable.setStatus('mandatory')
mscLpDS3DS1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestStateEntry.setStatus('mandatory')
mscLpDS3DS1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestAdminState.setStatus('mandatory')
mscLpDS3DS1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestOperationalState.setStatus('mandatory')
mscLpDS3DS1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestUsageState.setStatus('mandatory')
mscLpDS3DS1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestSetupTable.setStatus('mandatory')
mscLpDS3DS1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestSetupEntry.setStatus('mandatory')
mscLpDS3DS1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestPurpose.setStatus('mandatory')
mscLpDS3DS1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestType.setStatus('mandatory')
mscLpDS3DS1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestFrmSize.setStatus('mandatory')
mscLpDS3DS1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestFrmPatternType.setStatus('mandatory')
mscLpDS3DS1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestCustomizedPattern.setStatus('mandatory')
mscLpDS3DS1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestDataStartDelay.setStatus('mandatory')
mscLpDS3DS1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestDisplayInterval.setStatus('mandatory')
mscLpDS3DS1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestDuration.setStatus('mandatory')
mscLpDS3DS1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestResultsTable.setStatus('mandatory')
mscLpDS3DS1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestResultsEntry.setStatus('mandatory')
mscLpDS3DS1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestElapsedTime.setStatus('mandatory')
mscLpDS3DS1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestTimeRemaining.setStatus('mandatory')
mscLpDS3DS1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestCauseOfTermination.setStatus('mandatory')
mscLpDS3DS1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestBitsTx.setStatus('mandatory')
mscLpDS3DS1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestBytesTx.setStatus('mandatory')
mscLpDS3DS1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestFrmTx.setStatus('mandatory')
mscLpDS3DS1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestBitsRx.setStatus('mandatory')
mscLpDS3DS1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestBytesRx.setStatus('mandatory')
mscLpDS3DS1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestFrmRx.setStatus('mandatory')
mscLpDS3DS1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestErroredFrmRx.setStatus('mandatory')
mscLpDS3DS1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTestBitErrorRate.setStatus('mandatory')
mscLpDS3DS1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3))
mscLpDS3DS1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellRowStatusTable.setStatus('mandatory')
mscLpDS3DS1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellRowStatusEntry.setStatus('mandatory')
mscLpDS3DS1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellRowStatus.setStatus('mandatory')
mscLpDS3DS1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellComponentName.setStatus('mandatory')
mscLpDS3DS1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellStorageType.setStatus('mandatory')
mscLpDS3DS1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellIndex.setStatus('mandatory')
mscLpDS3DS1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellProvTable.setStatus('mandatory')
mscLpDS3DS1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellProvEntry.setStatus('mandatory')
mscLpDS3DS1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellAlarmActDelay.setStatus('mandatory')
mscLpDS3DS1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellScrambleCellPayload.setStatus('mandatory')
mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpDS3DS1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellOperTable.setStatus('mandatory')
mscLpDS3DS1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellOperEntry.setStatus('mandatory')
mscLpDS3DS1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellLcdAlarm.setStatus('mandatory')
mscLpDS3DS1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellStatsTable.setStatus('mandatory')
mscLpDS3DS1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellStatsEntry.setStatus('mandatory')
mscLpDS3DS1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellUncorrectableHecErrors.setStatus('mandatory')
mscLpDS3DS1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellSevErroredSec.setStatus('mandatory')
mscLpDS3DS1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellReceiveCellUtilization.setStatus('mandatory')
mscLpDS3DS1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellTransmitCellUtilization.setStatus('mandatory')
mscLpDS3DS1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
mscLpDS3DS1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4))
mscLpDS3DS1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcRowStatusTable.setStatus('mandatory')
mscLpDS3DS1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcRowStatusEntry.setStatus('mandatory')
mscLpDS3DS1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcRowStatus.setStatus('mandatory')
mscLpDS3DS1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcComponentName.setStatus('mandatory')
mscLpDS3DS1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcStorageType.setStatus('mandatory')
mscLpDS3DS1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcIndex.setStatus('mandatory')
mscLpDS3DS1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcProvTable.setStatus('mandatory')
mscLpDS3DS1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcProvEntry.setStatus('mandatory')
mscLpDS3DS1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcReplacementData.setStatus('mandatory')
mscLpDS3DS1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSignalOneDuration.setStatus('mandatory')
mscLpDS3DS1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcOpTable.setStatus('mandatory')
mscLpDS3DS1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcOpEntry.setStatus('mandatory')
mscLpDS3DS1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcIngressConditioning.setStatus('mandatory')
mscLpDS3DS1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcEgressConditioning.setStatus('mandatory')
mscLpDS3DS1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigOneTable.setStatus('mandatory')
mscLpDS3DS1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigOneEntry.setStatus('mandatory')
mscLpDS3DS1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigOneIndex.setStatus('mandatory')
mscLpDS3DS1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigOneValue.setStatus('mandatory')
mscLpDS3DS1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399), )
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigTwoTable.setStatus('mandatory')
mscLpDS3DS1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigTwoEntry.setStatus('mandatory')
mscLpDS3DS1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigTwoIndex.setStatus('mandatory')
mscLpDS3DS1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1ChanTcSigTwoValue.setStatus('mandatory')
mscLpDS3DS1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3))
mscLpDS3DS1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1), )
if mibBuilder.loadTexts: mscLpDS3DS1TestRowStatusTable.setStatus('mandatory')
mscLpDS3DS1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1TestRowStatusEntry.setStatus('mandatory')
mscLpDS3DS1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestRowStatus.setStatus('mandatory')
mscLpDS3DS1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestComponentName.setStatus('mandatory')
mscLpDS3DS1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestStorageType.setStatus('mandatory')
mscLpDS3DS1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS3DS1TestIndex.setStatus('mandatory')
mscLpDS3DS1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10), )
if mibBuilder.loadTexts: mscLpDS3DS1TestStateTable.setStatus('mandatory')
mscLpDS3DS1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1TestStateEntry.setStatus('mandatory')
mscLpDS3DS1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestAdminState.setStatus('mandatory')
mscLpDS3DS1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestOperationalState.setStatus('mandatory')
mscLpDS3DS1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestUsageState.setStatus('mandatory')
mscLpDS3DS1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11), )
if mibBuilder.loadTexts: mscLpDS3DS1TestSetupTable.setStatus('mandatory')
mscLpDS3DS1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1TestSetupEntry.setStatus('mandatory')
mscLpDS3DS1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestPurpose.setStatus('mandatory')
mscLpDS3DS1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestType.setStatus('mandatory')
mscLpDS3DS1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestFrmSize.setStatus('mandatory')
mscLpDS3DS1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestFrmPatternType.setStatus('mandatory')
mscLpDS3DS1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestCustomizedPattern.setStatus('mandatory')
mscLpDS3DS1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestDataStartDelay.setStatus('mandatory')
mscLpDS3DS1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestDisplayInterval.setStatus('mandatory')
mscLpDS3DS1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS3DS1TestDuration.setStatus('mandatory')
mscLpDS3DS1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12), )
if mibBuilder.loadTexts: mscLpDS3DS1TestResultsTable.setStatus('mandatory')
mscLpDS3DS1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS3DS1TestResultsEntry.setStatus('mandatory')
mscLpDS3DS1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestElapsedTime.setStatus('mandatory')
mscLpDS3DS1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestTimeRemaining.setStatus('mandatory')
mscLpDS3DS1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestCauseOfTermination.setStatus('mandatory')
mscLpDS3DS1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestBitsTx.setStatus('mandatory')
mscLpDS3DS1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestBytesTx.setStatus('mandatory')
mscLpDS3DS1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestFrmTx.setStatus('mandatory')
mscLpDS3DS1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestBitsRx.setStatus('mandatory')
mscLpDS3DS1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestBytesRx.setStatus('mandatory')
mscLpDS3DS1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestFrmRx.setStatus('mandatory')
mscLpDS3DS1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestErroredFrmRx.setStatus('mandatory')
mscLpDS3DS1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS3DS1TestBitErrorRate.setStatus('mandatory')
mscLpE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6))
mscLpE3RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1), )
if mibBuilder.loadTexts: mscLpE3RowStatusTable.setStatus('mandatory')
mscLpE3RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3RowStatusEntry.setStatus('mandatory')
mscLpE3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3RowStatus.setStatus('mandatory')
mscLpE3ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3ComponentName.setStatus('mandatory')
mscLpE3StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3StorageType.setStatus('mandatory')
mscLpE3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: mscLpE3Index.setStatus('mandatory')
mscLpE3ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10), )
if mibBuilder.loadTexts: mscLpE3ProvTable.setStatus('mandatory')
mscLpE3ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3ProvEntry.setStatus('mandatory')
mscLpE3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3LineLength.setStatus('mandatory')
mscLpE3ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3ClockingSource.setStatus('mandatory')
mscLpE3ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3ApplicationFramerName.setStatus('mandatory')
mscLpE3Mapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("direct", 0), ("plcp", 1))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3Mapping.setStatus('mandatory')
mscLpE3Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("g751", 0), ("g832", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3Framing.setStatus('mandatory')
mscLpE3LinkAlarmActivationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 2600)).clone(2200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3LinkAlarmActivationThreshold.setStatus('mandatory')
mscLpE3LinkAlarmScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 250)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3LinkAlarmScanInterval.setStatus('mandatory')
mscLpE3CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11), )
if mibBuilder.loadTexts: mscLpE3CidDataTable.setStatus('mandatory')
mscLpE3CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3CidDataEntry.setStatus('mandatory')
mscLpE3CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CustomerIdentifier.setStatus('mandatory')
mscLpE3AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12), )
if mibBuilder.loadTexts: mscLpE3AdminInfoTable.setStatus('mandatory')
mscLpE3AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3AdminInfoEntry.setStatus('mandatory')
mscLpE3Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3Vendor.setStatus('mandatory')
mscLpE3CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CommentText.setStatus('mandatory')
mscLpE3IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13), )
if mibBuilder.loadTexts: mscLpE3IfEntryTable.setStatus('mandatory')
mscLpE3IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3IfEntryEntry.setStatus('mandatory')
mscLpE3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3IfAdminStatus.setStatus('mandatory')
mscLpE3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3IfIndex.setStatus('mandatory')
mscLpE3OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14), )
if mibBuilder.loadTexts: mscLpE3OperStatusTable.setStatus('mandatory')
mscLpE3OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3OperStatusEntry.setStatus('mandatory')
mscLpE3SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3SnmpOperStatus.setStatus('mandatory')
mscLpE3StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15), )
if mibBuilder.loadTexts: mscLpE3StateTable.setStatus('mandatory')
mscLpE3StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3StateEntry.setStatus('mandatory')
mscLpE3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3AdminState.setStatus('mandatory')
mscLpE3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3OperationalState.setStatus('mandatory')
mscLpE3UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3UsageState.setStatus('mandatory')
mscLpE3AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3AvailabilityStatus.setStatus('mandatory')
mscLpE3ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3ProceduralStatus.setStatus('mandatory')
mscLpE3ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3ControlStatus.setStatus('mandatory')
mscLpE3AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3AlarmStatus.setStatus('mandatory')
mscLpE3StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3StandbyStatus.setStatus('mandatory')
mscLpE3UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3UnknownStatus.setStatus('mandatory')
mscLpE3OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16), )
if mibBuilder.loadTexts: mscLpE3OperTable.setStatus('mandatory')
mscLpE3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3OperEntry.setStatus('mandatory')
mscLpE3LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LosAlarm.setStatus('mandatory')
mscLpE3LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LofAlarm.setStatus('mandatory')
mscLpE3RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3RxAisAlarm.setStatus('mandatory')
mscLpE3RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3RxRaiAlarm.setStatus('mandatory')
mscLpE3TxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TxAis.setStatus('mandatory')
mscLpE3TxRai = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TxRai.setStatus('mandatory')
mscLpE3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17), )
if mibBuilder.loadTexts: mscLpE3StatsTable.setStatus('mandatory')
mscLpE3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"))
if mibBuilder.loadTexts: mscLpE3StatsEntry.setStatus('mandatory')
mscLpE3RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3RunningTime.setStatus('mandatory')
mscLpE3ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3ErrorFreeSec.setStatus('mandatory')
mscLpE3LineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LineCodeViolations.setStatus('mandatory')
mscLpE3LineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LineErroredSec.setStatus('mandatory')
mscLpE3LineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LineSevErroredSec.setStatus('mandatory')
mscLpE3LineLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LineLosSec.setStatus('mandatory')
mscLpE3LineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3LineFailures.setStatus('mandatory')
mscLpE3PathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathCodeViolations.setStatus('mandatory')
mscLpE3PathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathErroredSec.setStatus('mandatory')
mscLpE3PathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathSevErroredSec.setStatus('mandatory')
mscLpE3PathSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathSefAisSec.setStatus('mandatory')
mscLpE3PathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathUnavailSec.setStatus('mandatory')
mscLpE3PathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PathFailures.setStatus('mandatory')
mscLpE3Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2))
mscLpE3TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1), )
if mibBuilder.loadTexts: mscLpE3TestRowStatusTable.setStatus('mandatory')
mscLpE3TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"))
if mibBuilder.loadTexts: mscLpE3TestRowStatusEntry.setStatus('mandatory')
mscLpE3TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestRowStatus.setStatus('mandatory')
mscLpE3TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestComponentName.setStatus('mandatory')
mscLpE3TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestStorageType.setStatus('mandatory')
mscLpE3TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE3TestIndex.setStatus('mandatory')
mscLpE3TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10), )
if mibBuilder.loadTexts: mscLpE3TestStateTable.setStatus('mandatory')
mscLpE3TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"))
if mibBuilder.loadTexts: mscLpE3TestStateEntry.setStatus('mandatory')
mscLpE3TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestAdminState.setStatus('mandatory')
mscLpE3TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestOperationalState.setStatus('mandatory')
mscLpE3TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestUsageState.setStatus('mandatory')
mscLpE3TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11), )
if mibBuilder.loadTexts: mscLpE3TestSetupTable.setStatus('mandatory')
mscLpE3TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"))
if mibBuilder.loadTexts: mscLpE3TestSetupEntry.setStatus('mandatory')
mscLpE3TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestPurpose.setStatus('mandatory')
mscLpE3TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestType.setStatus('mandatory')
mscLpE3TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestFrmSize.setStatus('mandatory')
mscLpE3TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestFrmPatternType.setStatus('mandatory')
mscLpE3TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestCustomizedPattern.setStatus('mandatory')
mscLpE3TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestDataStartDelay.setStatus('mandatory')
mscLpE3TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestDisplayInterval.setStatus('mandatory')
mscLpE3TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3TestDuration.setStatus('mandatory')
mscLpE3TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12), )
if mibBuilder.loadTexts: mscLpE3TestResultsTable.setStatus('mandatory')
mscLpE3TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"))
if mibBuilder.loadTexts: mscLpE3TestResultsEntry.setStatus('mandatory')
mscLpE3TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestElapsedTime.setStatus('mandatory')
mscLpE3TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestTimeRemaining.setStatus('mandatory')
mscLpE3TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestCauseOfTermination.setStatus('mandatory')
mscLpE3TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestBitsTx.setStatus('mandatory')
mscLpE3TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestBytesTx.setStatus('mandatory')
mscLpE3TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestFrmTx.setStatus('mandatory')
mscLpE3TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestBitsRx.setStatus('mandatory')
mscLpE3TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestBytesRx.setStatus('mandatory')
mscLpE3TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestFrmRx.setStatus('mandatory')
mscLpE3TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestErroredFrmRx.setStatus('mandatory')
mscLpE3TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3TestBitErrorRate.setStatus('mandatory')
mscLpE3G832 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3))
mscLpE3G832RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1), )
if mibBuilder.loadTexts: mscLpE3G832RowStatusTable.setStatus('mandatory')
mscLpE3G832RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"))
if mibBuilder.loadTexts: mscLpE3G832RowStatusEntry.setStatus('mandatory')
mscLpE3G832RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3G832RowStatus.setStatus('mandatory')
mscLpE3G832ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832ComponentName.setStatus('mandatory')
mscLpE3G832StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832StorageType.setStatus('mandatory')
mscLpE3G832Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE3G832Index.setStatus('mandatory')
mscLpE3G832ProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10), )
if mibBuilder.loadTexts: mscLpE3G832ProvisionedTable.setStatus('mandatory')
mscLpE3G832ProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"))
if mibBuilder.loadTexts: mscLpE3G832ProvisionedEntry.setStatus('mandatory')
mscLpE3G832TrailTraceTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3G832TrailTraceTransmitted.setStatus('mandatory')
mscLpE3G832TrailTraceExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3G832TrailTraceExpected.setStatus('mandatory')
mscLpE3G832OperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11), )
if mibBuilder.loadTexts: mscLpE3G832OperationalTable.setStatus('mandatory')
mscLpE3G832OperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"))
if mibBuilder.loadTexts: mscLpE3G832OperationalEntry.setStatus('mandatory')
mscLpE3G832UnexpectedPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832UnexpectedPayloadType.setStatus('mandatory')
mscLpE3G832TrailTraceMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832TrailTraceMismatch.setStatus('mandatory')
mscLpE3G832TimingMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notTraceable", 0), ("traceable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832TimingMarker.setStatus('mandatory')
mscLpE3G832TrailTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832TrailTraceReceived.setStatus('mandatory')
mscLpE3G832StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12), )
if mibBuilder.loadTexts: mscLpE3G832StatsTable.setStatus('mandatory')
mscLpE3G832StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"))
if mibBuilder.loadTexts: mscLpE3G832StatsEntry.setStatus('mandatory')
mscLpE3G832FarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndErrorFreeSec.setStatus('mandatory')
mscLpE3G832FarEndCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndCodeViolations.setStatus('mandatory')
mscLpE3G832FarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndErroredSec.setStatus('mandatory')
mscLpE3G832FarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndSevErroredSec.setStatus('mandatory')
mscLpE3G832FarEndSefAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndSefAisSec.setStatus('mandatory')
mscLpE3G832FarEndUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3G832FarEndUnavailSec.setStatus('mandatory')
mscLpE3Plcp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4))
mscLpE3PlcpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1), )
if mibBuilder.loadTexts: mscLpE3PlcpRowStatusTable.setStatus('mandatory')
mscLpE3PlcpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"))
if mibBuilder.loadTexts: mscLpE3PlcpRowStatusEntry.setStatus('mandatory')
mscLpE3PlcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpRowStatus.setStatus('mandatory')
mscLpE3PlcpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpComponentName.setStatus('mandatory')
mscLpE3PlcpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpStorageType.setStatus('mandatory')
mscLpE3PlcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE3PlcpIndex.setStatus('mandatory')
mscLpE3PlcpOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10), )
if mibBuilder.loadTexts: mscLpE3PlcpOperationalTable.setStatus('mandatory')
mscLpE3PlcpOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"))
if mibBuilder.loadTexts: mscLpE3PlcpOperationalEntry.setStatus('mandatory')
mscLpE3PlcpLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpLofAlarm.setStatus('mandatory')
mscLpE3PlcpRxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpRxRaiAlarm.setStatus('mandatory')
mscLpE3PlcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11), )
if mibBuilder.loadTexts: mscLpE3PlcpStatsTable.setStatus('mandatory')
mscLpE3PlcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"))
if mibBuilder.loadTexts: mscLpE3PlcpStatsEntry.setStatus('mandatory')
mscLpE3PlcpErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpErrorFreeSec.setStatus('mandatory')
mscLpE3PlcpCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpCodingViolations.setStatus('mandatory')
mscLpE3PlcpErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpErroredSec.setStatus('mandatory')
mscLpE3PlcpSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpSevErroredSec.setStatus('mandatory')
mscLpE3PlcpSevErroredFramingSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpSevErroredFramingSec.setStatus('mandatory')
mscLpE3PlcpUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpUnavailSec.setStatus('mandatory')
mscLpE3PlcpFarEndErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpFarEndErrorFreeSec.setStatus('mandatory')
mscLpE3PlcpFarEndCodingViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpFarEndCodingViolations.setStatus('mandatory')
mscLpE3PlcpFarEndErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpFarEndErroredSec.setStatus('mandatory')
mscLpE3PlcpFarEndSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpFarEndSevErroredSec.setStatus('mandatory')
mscLpE3PlcpFarEndUnavailableSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3PlcpFarEndUnavailableSec.setStatus('mandatory')
mscLpE3Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5))
mscLpE3CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1), )
if mibBuilder.loadTexts: mscLpE3CellRowStatusTable.setStatus('mandatory')
mscLpE3CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"))
if mibBuilder.loadTexts: mscLpE3CellRowStatusEntry.setStatus('mandatory')
mscLpE3CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CellRowStatus.setStatus('mandatory')
mscLpE3CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellComponentName.setStatus('mandatory')
mscLpE3CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellStorageType.setStatus('mandatory')
mscLpE3CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE3CellIndex.setStatus('mandatory')
mscLpE3CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10), )
if mibBuilder.loadTexts: mscLpE3CellProvTable.setStatus('mandatory')
mscLpE3CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"))
if mibBuilder.loadTexts: mscLpE3CellProvEntry.setStatus('mandatory')
mscLpE3CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CellAlarmActDelay.setStatus('mandatory')
mscLpE3CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CellScrambleCellPayload.setStatus('mandatory')
mscLpE3CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE3CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpE3CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11), )
if mibBuilder.loadTexts: mscLpE3CellOperTable.setStatus('mandatory')
mscLpE3CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"))
if mibBuilder.loadTexts: mscLpE3CellOperEntry.setStatus('mandatory')
mscLpE3CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellLcdAlarm.setStatus('mandatory')
mscLpE3CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12), )
if mibBuilder.loadTexts: mscLpE3CellStatsTable.setStatus('mandatory')
mscLpE3CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"))
if mibBuilder.loadTexts: mscLpE3CellStatsEntry.setStatus('mandatory')
mscLpE3CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellUncorrectableHecErrors.setStatus('mandatory')
mscLpE3CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellSevErroredSec.setStatus('mandatory')
mscLpE3CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellReceiveCellUtilization.setStatus('mandatory')
mscLpE3CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellTransmitCellUtilization.setStatus('mandatory')
mscLpE3CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE3CellCorrectableHeaderErrors.setStatus('mandatory')
mscLpDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7))
mscLpDS1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1), )
if mibBuilder.loadTexts: mscLpDS1RowStatusTable.setStatus('mandatory')
mscLpDS1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1RowStatusEntry.setStatus('mandatory')
mscLpDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1RowStatus.setStatus('mandatory')
mscLpDS1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ComponentName.setStatus('mandatory')
mscLpDS1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1StorageType.setStatus('mandatory')
mscLpDS1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLpDS1Index.setStatus('mandatory')
mscLpDS1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10), )
if mibBuilder.loadTexts: mscLpDS1ProvTable.setStatus('mandatory')
mscLpDS1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1ProvEntry.setStatus('mandatory')
mscLpDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5, 6))).clone(namedValues=NamedValues(("d4", 0), ("esf", 1), ("d4Cas", 4), ("esfCas", 5), ("unframed", 6))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1LineType.setStatus('mandatory')
mscLpDS1ZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bit7Stuffing", 0), ("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ZeroCoding.setStatus('mandatory')
mscLpDS1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 3), ("srtsMode", 4), ("adaptiveMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ClockingSource.setStatus('mandatory')
mscLpDS1RaiAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("sBit", 0), ("bit2", 1), ("fdl", 2))).clone('fdl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1RaiAlarmType.setStatus('mandatory')
mscLpDS1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 655))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1LineLength.setStatus('mandatory')
mscLpDS1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11), )
if mibBuilder.loadTexts: mscLpDS1CidDataTable.setStatus('mandatory')
mscLpDS1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1CidDataEntry.setStatus('mandatory')
mscLpDS1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1CustomerIdentifier.setStatus('mandatory')
mscLpDS1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12), )
if mibBuilder.loadTexts: mscLpDS1AdminInfoTable.setStatus('mandatory')
mscLpDS1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1AdminInfoEntry.setStatus('mandatory')
mscLpDS1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1Vendor.setStatus('mandatory')
mscLpDS1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1CommentText.setStatus('mandatory')
mscLpDS1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13), )
if mibBuilder.loadTexts: mscLpDS1IfEntryTable.setStatus('mandatory')
mscLpDS1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1IfEntryEntry.setStatus('mandatory')
mscLpDS1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1IfAdminStatus.setStatus('mandatory')
mscLpDS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1IfIndex.setStatus('mandatory')
mscLpDS1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14), )
if mibBuilder.loadTexts: mscLpDS1OperStatusTable.setStatus('mandatory')
mscLpDS1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1OperStatusEntry.setStatus('mandatory')
mscLpDS1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1SnmpOperStatus.setStatus('mandatory')
mscLpDS1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15), )
if mibBuilder.loadTexts: mscLpDS1StateTable.setStatus('mandatory')
mscLpDS1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1StateEntry.setStatus('mandatory')
mscLpDS1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AdminState.setStatus('mandatory')
mscLpDS1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1OperationalState.setStatus('mandatory')
mscLpDS1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1UsageState.setStatus('mandatory')
mscLpDS1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AvailabilityStatus.setStatus('mandatory')
mscLpDS1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ProceduralStatus.setStatus('mandatory')
mscLpDS1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ControlStatus.setStatus('mandatory')
mscLpDS1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AlarmStatus.setStatus('mandatory')
mscLpDS1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1StandbyStatus.setStatus('mandatory')
mscLpDS1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1UnknownStatus.setStatus('mandatory')
mscLpDS1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16), )
if mibBuilder.loadTexts: mscLpDS1OperTable.setStatus('mandatory')
mscLpDS1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1OperEntry.setStatus('mandatory')
mscLpDS1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1LosAlarm.setStatus('mandatory')
mscLpDS1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1RxAisAlarm.setStatus('mandatory')
mscLpDS1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1LofAlarm.setStatus('mandatory')
mscLpDS1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1RxRaiAlarm.setStatus('mandatory')
mscLpDS1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TxAisAlarm.setStatus('mandatory')
mscLpDS1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TxRaiAlarm.setStatus('mandatory')
mscLpDS1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17), )
if mibBuilder.loadTexts: mscLpDS1StatsTable.setStatus('mandatory')
mscLpDS1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"))
if mibBuilder.loadTexts: mscLpDS1StatsEntry.setStatus('mandatory')
mscLpDS1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1RunningTime.setStatus('mandatory')
mscLpDS1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ErrorFreeSec.setStatus('mandatory')
mscLpDS1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ErroredSec.setStatus('mandatory')
mscLpDS1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1SevErroredSec.setStatus('mandatory')
mscLpDS1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1SevErroredFrmSec.setStatus('mandatory')
mscLpDS1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1UnavailSec.setStatus('mandatory')
mscLpDS1BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1BpvErrors.setStatus('mandatory')
mscLpDS1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1CrcErrors.setStatus('mandatory')
mscLpDS1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1FrmErrors.setStatus('mandatory')
mscLpDS1LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1LosStateChanges.setStatus('mandatory')
mscLpDS1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1SlipErrors.setStatus('mandatory')
mscLpDS1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2))
mscLpDS1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1), )
if mibBuilder.loadTexts: mscLpDS1ChanRowStatusTable.setStatus('mandatory')
mscLpDS1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanRowStatusEntry.setStatus('mandatory')
mscLpDS1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanRowStatus.setStatus('mandatory')
mscLpDS1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanComponentName.setStatus('mandatory')
mscLpDS1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanStorageType.setStatus('mandatory')
mscLpDS1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: mscLpDS1ChanIndex.setStatus('mandatory')
mscLpDS1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10), )
if mibBuilder.loadTexts: mscLpDS1ChanProvTable.setStatus('mandatory')
mscLpDS1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanProvEntry.setStatus('mandatory')
mscLpDS1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTimeslots.setStatus('mandatory')
mscLpDS1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTimeslotDataRate.setStatus('mandatory')
mscLpDS1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanApplicationFramerName.setStatus('mandatory')
mscLpDS1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11), )
if mibBuilder.loadTexts: mscLpDS1ChanCidDataTable.setStatus('mandatory')
mscLpDS1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanCidDataEntry.setStatus('mandatory')
mscLpDS1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCustomerIdentifier.setStatus('mandatory')
mscLpDS1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12), )
if mibBuilder.loadTexts: mscLpDS1ChanIfEntryTable.setStatus('mandatory')
mscLpDS1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanIfEntryEntry.setStatus('mandatory')
mscLpDS1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanIfAdminStatus.setStatus('mandatory')
mscLpDS1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanIfIndex.setStatus('mandatory')
mscLpDS1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13), )
if mibBuilder.loadTexts: mscLpDS1ChanOperStatusTable.setStatus('mandatory')
mscLpDS1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanOperStatusEntry.setStatus('mandatory')
mscLpDS1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanSnmpOperStatus.setStatus('mandatory')
mscLpDS1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14), )
if mibBuilder.loadTexts: mscLpDS1ChanStateTable.setStatus('mandatory')
mscLpDS1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanStateEntry.setStatus('mandatory')
mscLpDS1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanAdminState.setStatus('mandatory')
mscLpDS1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanOperationalState.setStatus('mandatory')
mscLpDS1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanUsageState.setStatus('mandatory')
mscLpDS1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanAvailabilityStatus.setStatus('mandatory')
mscLpDS1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanProceduralStatus.setStatus('mandatory')
mscLpDS1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanControlStatus.setStatus('mandatory')
mscLpDS1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanAlarmStatus.setStatus('mandatory')
mscLpDS1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanStandbyStatus.setStatus('mandatory')
mscLpDS1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanUnknownStatus.setStatus('mandatory')
mscLpDS1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15), )
if mibBuilder.loadTexts: mscLpDS1ChanOperTable.setStatus('mandatory')
mscLpDS1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanOperEntry.setStatus('mandatory')
mscLpDS1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanActualChannelSpeed.setStatus('mandatory')
mscLpDS1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16), )
if mibBuilder.loadTexts: mscLpDS1ChanAdminInfoTable.setStatus('mandatory')
mscLpDS1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanAdminInfoEntry.setStatus('mandatory')
mscLpDS1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanVendor.setStatus('mandatory')
mscLpDS1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCommentText.setStatus('mandatory')
mscLpDS1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2))
mscLpDS1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpDS1ChanTestRowStatusTable.setStatus('mandatory')
mscLpDS1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTestRowStatusEntry.setStatus('mandatory')
mscLpDS1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestRowStatus.setStatus('mandatory')
mscLpDS1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestComponentName.setStatus('mandatory')
mscLpDS1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestStorageType.setStatus('mandatory')
mscLpDS1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1ChanTestIndex.setStatus('mandatory')
mscLpDS1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpDS1ChanTestStateTable.setStatus('mandatory')
mscLpDS1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTestStateEntry.setStatus('mandatory')
mscLpDS1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestAdminState.setStatus('mandatory')
mscLpDS1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestOperationalState.setStatus('mandatory')
mscLpDS1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestUsageState.setStatus('mandatory')
mscLpDS1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11), )
if mibBuilder.loadTexts: mscLpDS1ChanTestSetupTable.setStatus('mandatory')
mscLpDS1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTestSetupEntry.setStatus('mandatory')
mscLpDS1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestPurpose.setStatus('mandatory')
mscLpDS1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestType.setStatus('mandatory')
mscLpDS1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestFrmSize.setStatus('mandatory')
mscLpDS1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestFrmPatternType.setStatus('mandatory')
mscLpDS1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestCustomizedPattern.setStatus('mandatory')
mscLpDS1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestDataStartDelay.setStatus('mandatory')
mscLpDS1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestDisplayInterval.setStatus('mandatory')
mscLpDS1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTestDuration.setStatus('mandatory')
mscLpDS1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12), )
if mibBuilder.loadTexts: mscLpDS1ChanTestResultsTable.setStatus('mandatory')
mscLpDS1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTestResultsEntry.setStatus('mandatory')
mscLpDS1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestElapsedTime.setStatus('mandatory')
mscLpDS1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestTimeRemaining.setStatus('mandatory')
mscLpDS1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestCauseOfTermination.setStatus('mandatory')
mscLpDS1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestBitsTx.setStatus('mandatory')
mscLpDS1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestBytesTx.setStatus('mandatory')
mscLpDS1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestFrmTx.setStatus('mandatory')
mscLpDS1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestBitsRx.setStatus('mandatory')
mscLpDS1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestBytesRx.setStatus('mandatory')
mscLpDS1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestFrmRx.setStatus('mandatory')
mscLpDS1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestErroredFrmRx.setStatus('mandatory')
mscLpDS1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTestBitErrorRate.setStatus('mandatory')
mscLpDS1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3))
mscLpDS1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpDS1ChanCellRowStatusTable.setStatus('mandatory')
mscLpDS1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanCellRowStatusEntry.setStatus('mandatory')
mscLpDS1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCellRowStatus.setStatus('mandatory')
mscLpDS1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellComponentName.setStatus('mandatory')
mscLpDS1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellStorageType.setStatus('mandatory')
mscLpDS1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1ChanCellIndex.setStatus('mandatory')
mscLpDS1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpDS1ChanCellProvTable.setStatus('mandatory')
mscLpDS1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanCellProvEntry.setStatus('mandatory')
mscLpDS1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCellAlarmActDelay.setStatus('mandatory')
mscLpDS1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCellScrambleCellPayload.setStatus('mandatory')
mscLpDS1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpDS1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11), )
if mibBuilder.loadTexts: mscLpDS1ChanCellOperTable.setStatus('mandatory')
mscLpDS1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanCellOperEntry.setStatus('mandatory')
mscLpDS1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellLcdAlarm.setStatus('mandatory')
mscLpDS1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12), )
if mibBuilder.loadTexts: mscLpDS1ChanCellStatsTable.setStatus('mandatory')
mscLpDS1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanCellStatsEntry.setStatus('mandatory')
mscLpDS1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellUncorrectableHecErrors.setStatus('mandatory')
mscLpDS1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellSevErroredSec.setStatus('mandatory')
mscLpDS1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellReceiveCellUtilization.setStatus('mandatory')
mscLpDS1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellTransmitCellUtilization.setStatus('mandatory')
mscLpDS1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
mscLpDS1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4))
mscLpDS1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpDS1ChanTcRowStatusTable.setStatus('mandatory')
mscLpDS1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTcRowStatusEntry.setStatus('mandatory')
mscLpDS1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTcRowStatus.setStatus('mandatory')
mscLpDS1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTcComponentName.setStatus('mandatory')
mscLpDS1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTcStorageType.setStatus('mandatory')
mscLpDS1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1ChanTcIndex.setStatus('mandatory')
mscLpDS1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpDS1ChanTcProvTable.setStatus('mandatory')
mscLpDS1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTcProvEntry.setStatus('mandatory')
mscLpDS1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTcReplacementData.setStatus('mandatory')
mscLpDS1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTcSignalOneDuration.setStatus('mandatory')
mscLpDS1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11), )
if mibBuilder.loadTexts: mscLpDS1ChanTcOpTable.setStatus('mandatory')
mscLpDS1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTcOpEntry.setStatus('mandatory')
mscLpDS1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTcIngressConditioning.setStatus('mandatory')
mscLpDS1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1ChanTcEgressConditioning.setStatus('mandatory')
mscLpDS1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398), )
if mibBuilder.loadTexts: mscLpDS1ChanTcSigOneTable.setStatus('mandatory')
mscLpDS1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTcSigOneEntry.setStatus('mandatory')
mscLpDS1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpDS1ChanTcSigOneIndex.setStatus('mandatory')
mscLpDS1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTcSigOneValue.setStatus('mandatory')
mscLpDS1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399), )
if mibBuilder.loadTexts: mscLpDS1ChanTcSigTwoTable.setStatus('mandatory')
mscLpDS1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: mscLpDS1ChanTcSigTwoEntry.setStatus('mandatory')
mscLpDS1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpDS1ChanTcSigTwoIndex.setStatus('mandatory')
mscLpDS1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1ChanTcSigTwoValue.setStatus('mandatory')
mscLpDS1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3))
mscLpDS1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1), )
if mibBuilder.loadTexts: mscLpDS1TestRowStatusTable.setStatus('mandatory')
mscLpDS1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS1TestRowStatusEntry.setStatus('mandatory')
mscLpDS1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestRowStatus.setStatus('mandatory')
mscLpDS1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestComponentName.setStatus('mandatory')
mscLpDS1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestStorageType.setStatus('mandatory')
mscLpDS1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1TestIndex.setStatus('mandatory')
mscLpDS1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10), )
if mibBuilder.loadTexts: mscLpDS1TestStateTable.setStatus('mandatory')
mscLpDS1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS1TestStateEntry.setStatus('mandatory')
mscLpDS1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestAdminState.setStatus('mandatory')
mscLpDS1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestOperationalState.setStatus('mandatory')
mscLpDS1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestUsageState.setStatus('mandatory')
mscLpDS1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11), )
if mibBuilder.loadTexts: mscLpDS1TestSetupTable.setStatus('mandatory')
mscLpDS1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS1TestSetupEntry.setStatus('mandatory')
mscLpDS1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestPurpose.setStatus('mandatory')
mscLpDS1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestType.setStatus('mandatory')
mscLpDS1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestFrmSize.setStatus('mandatory')
mscLpDS1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestFrmPatternType.setStatus('mandatory')
mscLpDS1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestCustomizedPattern.setStatus('mandatory')
mscLpDS1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestDataStartDelay.setStatus('mandatory')
mscLpDS1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestDisplayInterval.setStatus('mandatory')
mscLpDS1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpDS1TestDuration.setStatus('mandatory')
mscLpDS1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12), )
if mibBuilder.loadTexts: mscLpDS1TestResultsTable.setStatus('mandatory')
mscLpDS1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"))
if mibBuilder.loadTexts: mscLpDS1TestResultsEntry.setStatus('mandatory')
mscLpDS1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestElapsedTime.setStatus('mandatory')
mscLpDS1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestTimeRemaining.setStatus('mandatory')
mscLpDS1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestCauseOfTermination.setStatus('mandatory')
mscLpDS1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestBitsTx.setStatus('mandatory')
mscLpDS1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestBytesTx.setStatus('mandatory')
mscLpDS1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestFrmTx.setStatus('mandatory')
mscLpDS1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestBitsRx.setStatus('mandatory')
mscLpDS1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestBytesRx.setStatus('mandatory')
mscLpDS1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestFrmRx.setStatus('mandatory')
mscLpDS1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestErroredFrmRx.setStatus('mandatory')
mscLpDS1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1TestBitErrorRate.setStatus('mandatory')
mscLpDS1Dsp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4))
mscLpDS1DspRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1), )
if mibBuilder.loadTexts: mscLpDS1DspRowStatusTable.setStatus('mandatory')
mscLpDS1DspRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1DspIndex"))
if mibBuilder.loadTexts: mscLpDS1DspRowStatusEntry.setStatus('mandatory')
mscLpDS1DspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1DspRowStatus.setStatus('mandatory')
mscLpDS1DspComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1DspComponentName.setStatus('mandatory')
mscLpDS1DspStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1DspStorageType.setStatus('mandatory')
mscLpDS1DspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1DspIndex.setStatus('mandatory')
mscLpDS1Audio = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5))
mscLpDS1AudioRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1), )
if mibBuilder.loadTexts: mscLpDS1AudioRowStatusTable.setStatus('mandatory')
mscLpDS1AudioRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1AudioIndex"))
if mibBuilder.loadTexts: mscLpDS1AudioRowStatusEntry.setStatus('mandatory')
mscLpDS1AudioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AudioRowStatus.setStatus('mandatory')
mscLpDS1AudioComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AudioComponentName.setStatus('mandatory')
mscLpDS1AudioStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpDS1AudioStorageType.setStatus('mandatory')
mscLpDS1AudioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpDS1AudioIndex.setStatus('mandatory')
mscLpE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8))
mscLpE1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1), )
if mibBuilder.loadTexts: mscLpE1RowStatusTable.setStatus('mandatory')
mscLpE1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1RowStatusEntry.setStatus('mandatory')
mscLpE1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1RowStatus.setStatus('mandatory')
mscLpE1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ComponentName.setStatus('mandatory')
mscLpE1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1StorageType.setStatus('mandatory')
mscLpE1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLpE1Index.setStatus('mandatory')
mscLpE1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10), )
if mibBuilder.loadTexts: mscLpE1ProvTable.setStatus('mandatory')
mscLpE1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1ProvEntry.setStatus('mandatory')
mscLpE1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6))).clone(namedValues=NamedValues(("ccs", 2), ("cas", 3), ("unframed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1LineType.setStatus('mandatory')
mscLpE1ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 3), ("srtsMode", 4), ("adaptiveMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ClockingSource.setStatus('mandatory')
mscLpE1Crc4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1Crc4Mode.setStatus('mandatory')
mscLpE1SendRaiOnAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1SendRaiOnAis.setStatus('mandatory')
mscLpE1RaiDeclareAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 20000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1RaiDeclareAlarmTime.setStatus('mandatory')
mscLpE1RaiClearAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 20000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1RaiClearAlarmTime.setStatus('mandatory')
mscLpE1CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11), )
if mibBuilder.loadTexts: mscLpE1CidDataTable.setStatus('mandatory')
mscLpE1CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1CidDataEntry.setStatus('mandatory')
mscLpE1CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1CustomerIdentifier.setStatus('mandatory')
mscLpE1AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12), )
if mibBuilder.loadTexts: mscLpE1AdminInfoTable.setStatus('mandatory')
mscLpE1AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1AdminInfoEntry.setStatus('mandatory')
mscLpE1Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1Vendor.setStatus('mandatory')
mscLpE1CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1CommentText.setStatus('mandatory')
mscLpE1IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13), )
if mibBuilder.loadTexts: mscLpE1IfEntryTable.setStatus('mandatory')
mscLpE1IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1IfEntryEntry.setStatus('mandatory')
mscLpE1IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1IfAdminStatus.setStatus('mandatory')
mscLpE1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1IfIndex.setStatus('mandatory')
mscLpE1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14), )
if mibBuilder.loadTexts: mscLpE1OperStatusTable.setStatus('mandatory')
mscLpE1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1OperStatusEntry.setStatus('mandatory')
mscLpE1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1SnmpOperStatus.setStatus('mandatory')
mscLpE1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15), )
if mibBuilder.loadTexts: mscLpE1StateTable.setStatus('mandatory')
mscLpE1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1StateEntry.setStatus('mandatory')
mscLpE1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AdminState.setStatus('mandatory')
mscLpE1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1OperationalState.setStatus('mandatory')
mscLpE1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1UsageState.setStatus('mandatory')
mscLpE1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AvailabilityStatus.setStatus('mandatory')
mscLpE1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ProceduralStatus.setStatus('mandatory')
mscLpE1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ControlStatus.setStatus('mandatory')
mscLpE1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AlarmStatus.setStatus('mandatory')
mscLpE1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1StandbyStatus.setStatus('mandatory')
mscLpE1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1UnknownStatus.setStatus('mandatory')
mscLpE1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16), )
if mibBuilder.loadTexts: mscLpE1OperTable.setStatus('mandatory')
mscLpE1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1OperEntry.setStatus('mandatory')
mscLpE1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1LosAlarm.setStatus('mandatory')
mscLpE1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1RxAisAlarm.setStatus('mandatory')
mscLpE1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1LofAlarm.setStatus('mandatory')
mscLpE1RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1RxRaiAlarm.setStatus('mandatory')
mscLpE1TxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TxAisAlarm.setStatus('mandatory')
mscLpE1TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TxRaiAlarm.setStatus('mandatory')
mscLpE1E1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17), )
if mibBuilder.loadTexts: mscLpE1E1OperTable.setStatus('mandatory')
mscLpE1E1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1E1OperEntry.setStatus('mandatory')
mscLpE1MultifrmLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1MultifrmLofAlarm.setStatus('mandatory')
mscLpE1RxMultifrmRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1RxMultifrmRaiAlarm.setStatus('mandatory')
mscLpE1TxMultifrmRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TxMultifrmRaiAlarm.setStatus('mandatory')
mscLpE1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18), )
if mibBuilder.loadTexts: mscLpE1StatsTable.setStatus('mandatory')
mscLpE1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"))
if mibBuilder.loadTexts: mscLpE1StatsEntry.setStatus('mandatory')
mscLpE1RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1RunningTime.setStatus('mandatory')
mscLpE1ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ErrorFreeSec.setStatus('mandatory')
mscLpE1ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ErroredSec.setStatus('mandatory')
mscLpE1SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1SevErroredSec.setStatus('mandatory')
mscLpE1SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1SevErroredFrmSec.setStatus('mandatory')
mscLpE1UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1UnavailSec.setStatus('mandatory')
mscLpE1BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1BpvErrors.setStatus('mandatory')
mscLpE1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1CrcErrors.setStatus('mandatory')
mscLpE1FrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1FrmErrors.setStatus('mandatory')
mscLpE1LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1LosStateChanges.setStatus('mandatory')
mscLpE1SlipErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1SlipErrors.setStatus('mandatory')
mscLpE1Chan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2))
mscLpE1ChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1), )
if mibBuilder.loadTexts: mscLpE1ChanRowStatusTable.setStatus('mandatory')
mscLpE1ChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanRowStatusEntry.setStatus('mandatory')
mscLpE1ChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanRowStatus.setStatus('mandatory')
mscLpE1ChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanComponentName.setStatus('mandatory')
mscLpE1ChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanStorageType.setStatus('mandatory')
mscLpE1ChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLpE1ChanIndex.setStatus('mandatory')
mscLpE1ChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10), )
if mibBuilder.loadTexts: mscLpE1ChanProvTable.setStatus('mandatory')
mscLpE1ChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanProvEntry.setStatus('mandatory')
mscLpE1ChanTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTimeslots.setStatus('mandatory')
mscLpE1ChanTimeslotDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n56k", 0), ("doNotOverride", 1))).clone('doNotOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTimeslotDataRate.setStatus('mandatory')
mscLpE1ChanApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanApplicationFramerName.setStatus('mandatory')
mscLpE1ChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11), )
if mibBuilder.loadTexts: mscLpE1ChanCidDataTable.setStatus('mandatory')
mscLpE1ChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanCidDataEntry.setStatus('mandatory')
mscLpE1ChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCustomerIdentifier.setStatus('mandatory')
mscLpE1ChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12), )
if mibBuilder.loadTexts: mscLpE1ChanIfEntryTable.setStatus('mandatory')
mscLpE1ChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanIfEntryEntry.setStatus('mandatory')
mscLpE1ChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanIfAdminStatus.setStatus('mandatory')
mscLpE1ChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanIfIndex.setStatus('mandatory')
mscLpE1ChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13), )
if mibBuilder.loadTexts: mscLpE1ChanOperStatusTable.setStatus('mandatory')
mscLpE1ChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanOperStatusEntry.setStatus('mandatory')
mscLpE1ChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanSnmpOperStatus.setStatus('mandatory')
mscLpE1ChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14), )
if mibBuilder.loadTexts: mscLpE1ChanStateTable.setStatus('mandatory')
mscLpE1ChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanStateEntry.setStatus('mandatory')
mscLpE1ChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanAdminState.setStatus('mandatory')
mscLpE1ChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanOperationalState.setStatus('mandatory')
mscLpE1ChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanUsageState.setStatus('mandatory')
mscLpE1ChanAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanAvailabilityStatus.setStatus('mandatory')
mscLpE1ChanProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanProceduralStatus.setStatus('mandatory')
mscLpE1ChanControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanControlStatus.setStatus('mandatory')
mscLpE1ChanAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanAlarmStatus.setStatus('mandatory')
mscLpE1ChanStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanStandbyStatus.setStatus('mandatory')
mscLpE1ChanUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanUnknownStatus.setStatus('mandatory')
mscLpE1ChanOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15), )
if mibBuilder.loadTexts: mscLpE1ChanOperTable.setStatus('mandatory')
mscLpE1ChanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanOperEntry.setStatus('mandatory')
mscLpE1ChanActualChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanActualChannelSpeed.setStatus('mandatory')
mscLpE1ChanAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16), )
if mibBuilder.loadTexts: mscLpE1ChanAdminInfoTable.setStatus('mandatory')
mscLpE1ChanAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"))
if mibBuilder.loadTexts: mscLpE1ChanAdminInfoEntry.setStatus('mandatory')
mscLpE1ChanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanVendor.setStatus('mandatory')
mscLpE1ChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCommentText.setStatus('mandatory')
mscLpE1ChanTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2))
mscLpE1ChanTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpE1ChanTestRowStatusTable.setStatus('mandatory')
mscLpE1ChanTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTestRowStatusEntry.setStatus('mandatory')
mscLpE1ChanTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestRowStatus.setStatus('mandatory')
mscLpE1ChanTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestComponentName.setStatus('mandatory')
mscLpE1ChanTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestStorageType.setStatus('mandatory')
mscLpE1ChanTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1ChanTestIndex.setStatus('mandatory')
mscLpE1ChanTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpE1ChanTestStateTable.setStatus('mandatory')
mscLpE1ChanTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTestStateEntry.setStatus('mandatory')
mscLpE1ChanTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestAdminState.setStatus('mandatory')
mscLpE1ChanTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestOperationalState.setStatus('mandatory')
mscLpE1ChanTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestUsageState.setStatus('mandatory')
mscLpE1ChanTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11), )
if mibBuilder.loadTexts: mscLpE1ChanTestSetupTable.setStatus('mandatory')
mscLpE1ChanTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTestSetupEntry.setStatus('mandatory')
mscLpE1ChanTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestPurpose.setStatus('mandatory')
mscLpE1ChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestType.setStatus('mandatory')
mscLpE1ChanTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestFrmSize.setStatus('mandatory')
mscLpE1ChanTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestFrmPatternType.setStatus('mandatory')
mscLpE1ChanTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestCustomizedPattern.setStatus('mandatory')
mscLpE1ChanTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestDataStartDelay.setStatus('mandatory')
mscLpE1ChanTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestDisplayInterval.setStatus('mandatory')
mscLpE1ChanTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTestDuration.setStatus('mandatory')
mscLpE1ChanTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12), )
if mibBuilder.loadTexts: mscLpE1ChanTestResultsTable.setStatus('mandatory')
mscLpE1ChanTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTestResultsEntry.setStatus('mandatory')
mscLpE1ChanTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestElapsedTime.setStatus('mandatory')
mscLpE1ChanTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestTimeRemaining.setStatus('mandatory')
mscLpE1ChanTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestCauseOfTermination.setStatus('mandatory')
mscLpE1ChanTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestBitsTx.setStatus('mandatory')
mscLpE1ChanTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestBytesTx.setStatus('mandatory')
mscLpE1ChanTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestFrmTx.setStatus('mandatory')
mscLpE1ChanTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestBitsRx.setStatus('mandatory')
mscLpE1ChanTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestBytesRx.setStatus('mandatory')
mscLpE1ChanTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestFrmRx.setStatus('mandatory')
mscLpE1ChanTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestErroredFrmRx.setStatus('mandatory')
mscLpE1ChanTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTestBitErrorRate.setStatus('mandatory')
mscLpE1ChanCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3))
mscLpE1ChanCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1), )
if mibBuilder.loadTexts: mscLpE1ChanCellRowStatusTable.setStatus('mandatory')
mscLpE1ChanCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpE1ChanCellRowStatusEntry.setStatus('mandatory')
mscLpE1ChanCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCellRowStatus.setStatus('mandatory')
mscLpE1ChanCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellComponentName.setStatus('mandatory')
mscLpE1ChanCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellStorageType.setStatus('mandatory')
mscLpE1ChanCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1ChanCellIndex.setStatus('mandatory')
mscLpE1ChanCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10), )
if mibBuilder.loadTexts: mscLpE1ChanCellProvTable.setStatus('mandatory')
mscLpE1ChanCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpE1ChanCellProvEntry.setStatus('mandatory')
mscLpE1ChanCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCellAlarmActDelay.setStatus('mandatory')
mscLpE1ChanCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCellScrambleCellPayload.setStatus('mandatory')
mscLpE1ChanCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpE1ChanCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11), )
if mibBuilder.loadTexts: mscLpE1ChanCellOperTable.setStatus('mandatory')
mscLpE1ChanCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpE1ChanCellOperEntry.setStatus('mandatory')
mscLpE1ChanCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellLcdAlarm.setStatus('mandatory')
mscLpE1ChanCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12), )
if mibBuilder.loadTexts: mscLpE1ChanCellStatsTable.setStatus('mandatory')
mscLpE1ChanCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"))
if mibBuilder.loadTexts: mscLpE1ChanCellStatsEntry.setStatus('mandatory')
mscLpE1ChanCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellUncorrectableHecErrors.setStatus('mandatory')
mscLpE1ChanCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellSevErroredSec.setStatus('mandatory')
mscLpE1ChanCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellReceiveCellUtilization.setStatus('mandatory')
mscLpE1ChanCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellTransmitCellUtilization.setStatus('mandatory')
mscLpE1ChanCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanCellCorrectableHeaderErrors.setStatus('mandatory')
mscLpE1ChanTc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4))
mscLpE1ChanTcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1), )
if mibBuilder.loadTexts: mscLpE1ChanTcRowStatusTable.setStatus('mandatory')
mscLpE1ChanTcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTcRowStatusEntry.setStatus('mandatory')
mscLpE1ChanTcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTcRowStatus.setStatus('mandatory')
mscLpE1ChanTcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTcComponentName.setStatus('mandatory')
mscLpE1ChanTcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTcStorageType.setStatus('mandatory')
mscLpE1ChanTcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1ChanTcIndex.setStatus('mandatory')
mscLpE1ChanTcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10), )
if mibBuilder.loadTexts: mscLpE1ChanTcProvTable.setStatus('mandatory')
mscLpE1ChanTcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTcProvEntry.setStatus('mandatory')
mscLpE1ChanTcReplacementData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTcReplacementData.setStatus('mandatory')
mscLpE1ChanTcSignalOneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTcSignalOneDuration.setStatus('mandatory')
mscLpE1ChanTcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11), )
if mibBuilder.loadTexts: mscLpE1ChanTcOpTable.setStatus('mandatory')
mscLpE1ChanTcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTcOpEntry.setStatus('mandatory')
mscLpE1ChanTcIngressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTcIngressConditioning.setStatus('mandatory')
mscLpE1ChanTcEgressConditioning = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanTcEgressConditioning.setStatus('mandatory')
mscLpE1ChanTcSigOneTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398), )
if mibBuilder.loadTexts: mscLpE1ChanTcSigOneTable.setStatus('mandatory')
mscLpE1ChanTcSigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcSigOneIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTcSigOneEntry.setStatus('mandatory')
mscLpE1ChanTcSigOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpE1ChanTcSigOneIndex.setStatus('mandatory')
mscLpE1ChanTcSigOneValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTcSigOneValue.setStatus('mandatory')
mscLpE1ChanTcSigTwoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399), )
if mibBuilder.loadTexts: mscLpE1ChanTcSigTwoTable.setStatus('mandatory')
mscLpE1ChanTcSigTwoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcSigTwoIndex"))
if mibBuilder.loadTexts: mscLpE1ChanTcSigTwoEntry.setStatus('mandatory')
mscLpE1ChanTcSigTwoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("d", 0), ("c", 1), ("b", 2), ("a", 3))))
if mibBuilder.loadTexts: mscLpE1ChanTcSigTwoIndex.setStatus('mandatory')
mscLpE1ChanTcSigTwoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanTcSigTwoValue.setStatus('mandatory')
mscLpE1ChanFlm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5))
mscLpE1ChanFlmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1), )
if mibBuilder.loadTexts: mscLpE1ChanFlmRowStatusTable.setStatus('mandatory')
mscLpE1ChanFlmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"))
if mibBuilder.loadTexts: mscLpE1ChanFlmRowStatusEntry.setStatus('mandatory')
mscLpE1ChanFlmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanFlmRowStatus.setStatus('mandatory')
mscLpE1ChanFlmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanFlmComponentName.setStatus('mandatory')
mscLpE1ChanFlmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanFlmStorageType.setStatus('mandatory')
mscLpE1ChanFlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1ChanFlmIndex.setStatus('mandatory')
mscLpE1ChanFlmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10), )
if mibBuilder.loadTexts: mscLpE1ChanFlmProvTable.setStatus('mandatory')
mscLpE1ChanFlmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"))
if mibBuilder.loadTexts: mscLpE1ChanFlmProvEntry.setStatus('mandatory')
mscLpE1ChanFlmABitMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanFlmABitMonitoring.setStatus('mandatory')
mscLpE1ChanFlmHdlcMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1ChanFlmHdlcMonitoring.setStatus('mandatory')
mscLpE1ChanFlmOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11), )
if mibBuilder.loadTexts: mscLpE1ChanFlmOpTable.setStatus('mandatory')
mscLpE1ChanFlmOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"))
if mibBuilder.loadTexts: mscLpE1ChanFlmOpEntry.setStatus('mandatory')
mscLpE1ChanFlmFlmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitoring", 0), ("frameLinkUp", 1), ("frameLinkDown", 2), ("lossOfHdlc", 3), ("lossOfAbit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1ChanFlmFlmStatus.setStatus('mandatory')
mscLpE1Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3))
mscLpE1TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1), )
if mibBuilder.loadTexts: mscLpE1TestRowStatusTable.setStatus('mandatory')
mscLpE1TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"))
if mibBuilder.loadTexts: mscLpE1TestRowStatusEntry.setStatus('mandatory')
mscLpE1TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestRowStatus.setStatus('mandatory')
mscLpE1TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestComponentName.setStatus('mandatory')
mscLpE1TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestStorageType.setStatus('mandatory')
mscLpE1TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1TestIndex.setStatus('mandatory')
mscLpE1TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10), )
if mibBuilder.loadTexts: mscLpE1TestStateTable.setStatus('mandatory')
mscLpE1TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"))
if mibBuilder.loadTexts: mscLpE1TestStateEntry.setStatus('mandatory')
mscLpE1TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestAdminState.setStatus('mandatory')
mscLpE1TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestOperationalState.setStatus('mandatory')
mscLpE1TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestUsageState.setStatus('mandatory')
mscLpE1TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11), )
if mibBuilder.loadTexts: mscLpE1TestSetupTable.setStatus('mandatory')
mscLpE1TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"))
if mibBuilder.loadTexts: mscLpE1TestSetupEntry.setStatus('mandatory')
mscLpE1TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestPurpose.setStatus('mandatory')
mscLpE1TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestType.setStatus('mandatory')
mscLpE1TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestFrmSize.setStatus('mandatory')
mscLpE1TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestFrmPatternType.setStatus('mandatory')
mscLpE1TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestCustomizedPattern.setStatus('mandatory')
mscLpE1TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestDataStartDelay.setStatus('mandatory')
mscLpE1TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestDisplayInterval.setStatus('mandatory')
mscLpE1TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpE1TestDuration.setStatus('mandatory')
mscLpE1TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12), )
if mibBuilder.loadTexts: mscLpE1TestResultsTable.setStatus('mandatory')
mscLpE1TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"))
if mibBuilder.loadTexts: mscLpE1TestResultsEntry.setStatus('mandatory')
mscLpE1TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestElapsedTime.setStatus('mandatory')
mscLpE1TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestTimeRemaining.setStatus('mandatory')
mscLpE1TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestCauseOfTermination.setStatus('mandatory')
mscLpE1TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestBitsTx.setStatus('mandatory')
mscLpE1TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestBytesTx.setStatus('mandatory')
mscLpE1TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestFrmTx.setStatus('mandatory')
mscLpE1TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestBitsRx.setStatus('mandatory')
mscLpE1TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestBytesRx.setStatus('mandatory')
mscLpE1TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestFrmRx.setStatus('mandatory')
mscLpE1TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestErroredFrmRx.setStatus('mandatory')
mscLpE1TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1TestBitErrorRate.setStatus('mandatory')
mscLpE1Dsp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4))
mscLpE1DspRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1), )
if mibBuilder.loadTexts: mscLpE1DspRowStatusTable.setStatus('mandatory')
mscLpE1DspRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1DspIndex"))
if mibBuilder.loadTexts: mscLpE1DspRowStatusEntry.setStatus('mandatory')
mscLpE1DspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1DspRowStatus.setStatus('mandatory')
mscLpE1DspComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1DspComponentName.setStatus('mandatory')
mscLpE1DspStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1DspStorageType.setStatus('mandatory')
mscLpE1DspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1DspIndex.setStatus('mandatory')
mscLpE1Audio = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5))
mscLpE1AudioRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1), )
if mibBuilder.loadTexts: mscLpE1AudioRowStatusTable.setStatus('mandatory')
mscLpE1AudioRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1AudioIndex"))
if mibBuilder.loadTexts: mscLpE1AudioRowStatusEntry.setStatus('mandatory')
mscLpE1AudioRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AudioRowStatus.setStatus('mandatory')
mscLpE1AudioComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AudioComponentName.setStatus('mandatory')
mscLpE1AudioStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpE1AudioStorageType.setStatus('mandatory')
mscLpE1AudioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpE1AudioIndex.setStatus('mandatory')
mscLpV35 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9))
mscLpV35RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1), )
if mibBuilder.loadTexts: mscLpV35RowStatusTable.setStatus('mandatory')
mscLpV35RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35RowStatusEntry.setStatus('mandatory')
mscLpV35RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35RowStatus.setStatus('mandatory')
mscLpV35ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ComponentName.setStatus('mandatory')
mscLpV35StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35StorageType.setStatus('mandatory')
mscLpV35Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: mscLpV35Index.setStatus('mandatory')
mscLpV35ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10), )
if mibBuilder.loadTexts: mscLpV35ProvTable.setStatus('mandatory')
mscLpV35ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35ProvEntry.setStatus('mandatory')
mscLpV35LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35LinkMode.setStatus('mandatory')
mscLpV35ReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35ReadyLineState.setStatus('mandatory')
mscLpV35DataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35DataTransferLineState.setStatus('mandatory')
mscLpV35LineStatusTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35LineStatusTimeOut.setStatus('mandatory')
mscLpV35LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9600, 3840000)).clone(192000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35LineSpeed.setStatus('mandatory')
mscLpV35ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("module", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35ClockingSource.setStatus('mandatory')
mscLpV35DteDataClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("fromDce", 0), ("fromDte", 2))).clone('fromDce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35DteDataClockSource.setStatus('mandatory')
mscLpV35ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 8), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35ApplicationFramerName.setStatus('mandatory')
mscLpV35EnableDynamicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35EnableDynamicSpeed.setStatus('mandatory')
mscLpV35CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11), )
if mibBuilder.loadTexts: mscLpV35CidDataTable.setStatus('mandatory')
mscLpV35CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35CidDataEntry.setStatus('mandatory')
mscLpV35CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35CustomerIdentifier.setStatus('mandatory')
mscLpV35AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12), )
if mibBuilder.loadTexts: mscLpV35AdminInfoTable.setStatus('mandatory')
mscLpV35AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35AdminInfoEntry.setStatus('mandatory')
mscLpV35Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35Vendor.setStatus('mandatory')
mscLpV35CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35CommentText.setStatus('mandatory')
mscLpV35IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13), )
if mibBuilder.loadTexts: mscLpV35IfEntryTable.setStatus('mandatory')
mscLpV35IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35IfEntryEntry.setStatus('mandatory')
mscLpV35IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35IfAdminStatus.setStatus('mandatory')
mscLpV35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35IfIndex.setStatus('mandatory')
mscLpV35OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14), )
if mibBuilder.loadTexts: mscLpV35OperStatusTable.setStatus('mandatory')
mscLpV35OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35OperStatusEntry.setStatus('mandatory')
mscLpV35SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35SnmpOperStatus.setStatus('mandatory')
mscLpV35StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15), )
if mibBuilder.loadTexts: mscLpV35StateTable.setStatus('mandatory')
mscLpV35StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35StateEntry.setStatus('mandatory')
mscLpV35AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35AdminState.setStatus('mandatory')
mscLpV35OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35OperationalState.setStatus('mandatory')
mscLpV35UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35UsageState.setStatus('mandatory')
mscLpV35AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35AvailabilityStatus.setStatus('mandatory')
mscLpV35ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ProceduralStatus.setStatus('mandatory')
mscLpV35ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ControlStatus.setStatus('mandatory')
mscLpV35AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35AlarmStatus.setStatus('mandatory')
mscLpV35StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35StandbyStatus.setStatus('mandatory')
mscLpV35UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35UnknownStatus.setStatus('mandatory')
mscLpV35OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16), )
if mibBuilder.loadTexts: mscLpV35OperTable.setStatus('mandatory')
mscLpV35OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"))
if mibBuilder.loadTexts: mscLpV35OperEntry.setStatus('mandatory')
mscLpV35ActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ActualLinkMode.setStatus('mandatory')
mscLpV35LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35LineState.setStatus('mandatory')
mscLpV35ActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ActualTxLineSpeed.setStatus('mandatory')
mscLpV35ActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35ActualRxLineSpeed.setStatus('mandatory')
mscLpV35DataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35DataXferStateChanges.setStatus('mandatory')
mscLpV35Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2))
mscLpV35TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1), )
if mibBuilder.loadTexts: mscLpV35TestRowStatusTable.setStatus('mandatory')
mscLpV35TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"))
if mibBuilder.loadTexts: mscLpV35TestRowStatusEntry.setStatus('mandatory')
mscLpV35TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestRowStatus.setStatus('mandatory')
mscLpV35TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestComponentName.setStatus('mandatory')
mscLpV35TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestStorageType.setStatus('mandatory')
mscLpV35TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpV35TestIndex.setStatus('mandatory')
mscLpV35TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10), )
if mibBuilder.loadTexts: mscLpV35TestStateTable.setStatus('mandatory')
mscLpV35TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"))
if mibBuilder.loadTexts: mscLpV35TestStateEntry.setStatus('mandatory')
mscLpV35TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestAdminState.setStatus('mandatory')
mscLpV35TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestOperationalState.setStatus('mandatory')
mscLpV35TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestUsageState.setStatus('mandatory')
mscLpV35TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11), )
if mibBuilder.loadTexts: mscLpV35TestSetupTable.setStatus('mandatory')
mscLpV35TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"))
if mibBuilder.loadTexts: mscLpV35TestSetupEntry.setStatus('mandatory')
mscLpV35TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestPurpose.setStatus('mandatory')
mscLpV35TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestType.setStatus('mandatory')
mscLpV35TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestFrmSize.setStatus('mandatory')
mscLpV35TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestFrmPatternType.setStatus('mandatory')
mscLpV35TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestCustomizedPattern.setStatus('mandatory')
mscLpV35TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestDataStartDelay.setStatus('mandatory')
mscLpV35TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestDisplayInterval.setStatus('mandatory')
mscLpV35TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpV35TestDuration.setStatus('mandatory')
mscLpV35TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12), )
if mibBuilder.loadTexts: mscLpV35TestResultsTable.setStatus('mandatory')
mscLpV35TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"))
if mibBuilder.loadTexts: mscLpV35TestResultsEntry.setStatus('mandatory')
mscLpV35TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestElapsedTime.setStatus('mandatory')
mscLpV35TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestTimeRemaining.setStatus('mandatory')
mscLpV35TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestCauseOfTermination.setStatus('mandatory')
mscLpV35TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestBitsTx.setStatus('mandatory')
mscLpV35TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestBytesTx.setStatus('mandatory')
mscLpV35TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestFrmTx.setStatus('mandatory')
mscLpV35TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestBitsRx.setStatus('mandatory')
mscLpV35TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestBytesRx.setStatus('mandatory')
mscLpV35TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestFrmRx.setStatus('mandatory')
mscLpV35TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestErroredFrmRx.setStatus('mandatory')
mscLpV35TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpV35TestBitErrorRate.setStatus('mandatory')
mscLpX21 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10))
mscLpX21RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1), )
if mibBuilder.loadTexts: mscLpX21RowStatusTable.setStatus('mandatory')
mscLpX21RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21RowStatusEntry.setStatus('mandatory')
mscLpX21RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21RowStatus.setStatus('mandatory')
mscLpX21ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ComponentName.setStatus('mandatory')
mscLpX21StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21StorageType.setStatus('mandatory')
mscLpX21Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: mscLpX21Index.setStatus('mandatory')
mscLpX21ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10), )
if mibBuilder.loadTexts: mscLpX21ProvTable.setStatus('mandatory')
mscLpX21ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21ProvEntry.setStatus('mandatory')
mscLpX21LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21LinkMode.setStatus('mandatory')
mscLpX21ReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21ReadyLineState.setStatus('mandatory')
mscLpX21DataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21DataTransferLineState.setStatus('mandatory')
mscLpX21LineStatusTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21LineStatusTimeOut.setStatus('mandatory')
mscLpX21LineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(9600, 7680000)).clone(192000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21LineSpeed.setStatus('mandatory')
mscLpX21ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("module", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21ClockingSource.setStatus('mandatory')
mscLpX21DteDataClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("fromDce", 0), ("fromDte", 2))).clone('fromDce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21DteDataClockSource.setStatus('mandatory')
mscLpX21LineTerminationRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21LineTerminationRequired.setStatus('mandatory')
mscLpX21ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 9), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21ApplicationFramerName.setStatus('mandatory')
mscLpX21EnableDynamicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21EnableDynamicSpeed.setStatus('mandatory')
mscLpX21CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11), )
if mibBuilder.loadTexts: mscLpX21CidDataTable.setStatus('mandatory')
mscLpX21CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21CidDataEntry.setStatus('mandatory')
mscLpX21CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21CustomerIdentifier.setStatus('mandatory')
mscLpX21AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12), )
if mibBuilder.loadTexts: mscLpX21AdminInfoTable.setStatus('mandatory')
mscLpX21AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21AdminInfoEntry.setStatus('mandatory')
mscLpX21Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21Vendor.setStatus('mandatory')
mscLpX21CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21CommentText.setStatus('mandatory')
mscLpX21IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13), )
if mibBuilder.loadTexts: mscLpX21IfEntryTable.setStatus('mandatory')
mscLpX21IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21IfEntryEntry.setStatus('mandatory')
mscLpX21IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21IfAdminStatus.setStatus('mandatory')
mscLpX21IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21IfIndex.setStatus('mandatory')
mscLpX21OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14), )
if mibBuilder.loadTexts: mscLpX21OperStatusTable.setStatus('mandatory')
mscLpX21OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21OperStatusEntry.setStatus('mandatory')
mscLpX21SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21SnmpOperStatus.setStatus('mandatory')
mscLpX21StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15), )
if mibBuilder.loadTexts: mscLpX21StateTable.setStatus('mandatory')
mscLpX21StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21StateEntry.setStatus('mandatory')
mscLpX21AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21AdminState.setStatus('mandatory')
mscLpX21OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21OperationalState.setStatus('mandatory')
mscLpX21UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21UsageState.setStatus('mandatory')
mscLpX21AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21AvailabilityStatus.setStatus('mandatory')
mscLpX21ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ProceduralStatus.setStatus('mandatory')
mscLpX21ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ControlStatus.setStatus('mandatory')
mscLpX21AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21AlarmStatus.setStatus('mandatory')
mscLpX21StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21StandbyStatus.setStatus('mandatory')
mscLpX21UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21UnknownStatus.setStatus('mandatory')
mscLpX21OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16), )
if mibBuilder.loadTexts: mscLpX21OperTable.setStatus('mandatory')
mscLpX21OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"))
if mibBuilder.loadTexts: mscLpX21OperEntry.setStatus('mandatory')
mscLpX21ActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ActualLinkMode.setStatus('mandatory')
mscLpX21LineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21LineState.setStatus('mandatory')
mscLpX21ActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ActualTxLineSpeed.setStatus('mandatory')
mscLpX21ActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21ActualRxLineSpeed.setStatus('mandatory')
mscLpX21DataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21DataXferStateChanges.setStatus('mandatory')
mscLpX21Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2))
mscLpX21TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1), )
if mibBuilder.loadTexts: mscLpX21TestRowStatusTable.setStatus('mandatory')
mscLpX21TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"))
if mibBuilder.loadTexts: mscLpX21TestRowStatusEntry.setStatus('mandatory')
mscLpX21TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestRowStatus.setStatus('mandatory')
mscLpX21TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestComponentName.setStatus('mandatory')
mscLpX21TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestStorageType.setStatus('mandatory')
mscLpX21TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpX21TestIndex.setStatus('mandatory')
mscLpX21TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10), )
if mibBuilder.loadTexts: mscLpX21TestStateTable.setStatus('mandatory')
mscLpX21TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"))
if mibBuilder.loadTexts: mscLpX21TestStateEntry.setStatus('mandatory')
mscLpX21TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestAdminState.setStatus('mandatory')
mscLpX21TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestOperationalState.setStatus('mandatory')
mscLpX21TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestUsageState.setStatus('mandatory')
mscLpX21TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11), )
if mibBuilder.loadTexts: mscLpX21TestSetupTable.setStatus('mandatory')
mscLpX21TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"))
if mibBuilder.loadTexts: mscLpX21TestSetupEntry.setStatus('mandatory')
mscLpX21TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestPurpose.setStatus('mandatory')
mscLpX21TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestType.setStatus('mandatory')
mscLpX21TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestFrmSize.setStatus('mandatory')
mscLpX21TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestFrmPatternType.setStatus('mandatory')
mscLpX21TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestCustomizedPattern.setStatus('mandatory')
mscLpX21TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestDataStartDelay.setStatus('mandatory')
mscLpX21TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestDisplayInterval.setStatus('mandatory')
mscLpX21TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpX21TestDuration.setStatus('mandatory')
mscLpX21TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12), )
if mibBuilder.loadTexts: mscLpX21TestResultsTable.setStatus('mandatory')
mscLpX21TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"))
if mibBuilder.loadTexts: mscLpX21TestResultsEntry.setStatus('mandatory')
mscLpX21TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestElapsedTime.setStatus('mandatory')
mscLpX21TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestTimeRemaining.setStatus('mandatory')
mscLpX21TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestCauseOfTermination.setStatus('mandatory')
mscLpX21TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestBitsTx.setStatus('mandatory')
mscLpX21TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestBytesTx.setStatus('mandatory')
mscLpX21TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestFrmTx.setStatus('mandatory')
mscLpX21TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestBitsRx.setStatus('mandatory')
mscLpX21TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestBytesRx.setStatus('mandatory')
mscLpX21TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestFrmRx.setStatus('mandatory')
mscLpX21TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestErroredFrmRx.setStatus('mandatory')
mscLpX21TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpX21TestBitErrorRate.setStatus('mandatory')
mscLpSonet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14))
mscLpSonetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1), )
if mibBuilder.loadTexts: mscLpSonetRowStatusTable.setStatus('mandatory')
mscLpSonetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetRowStatusEntry.setStatus('mandatory')
mscLpSonetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetRowStatus.setStatus('mandatory')
mscLpSonetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetComponentName.setStatus('mandatory')
mscLpSonetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetStorageType.setStatus('mandatory')
mscLpSonetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscLpSonetIndex.setStatus('mandatory')
mscLpSonetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10), )
if mibBuilder.loadTexts: mscLpSonetProvTable.setStatus('mandatory')
mscLpSonetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetProvEntry.setStatus('mandatory')
mscLpSonetClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetClockingSource.setStatus('mandatory')
mscLpSonetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11), )
if mibBuilder.loadTexts: mscLpSonetCidDataTable.setStatus('mandatory')
mscLpSonetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetCidDataEntry.setStatus('mandatory')
mscLpSonetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetCustomerIdentifier.setStatus('mandatory')
mscLpSonetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12), )
if mibBuilder.loadTexts: mscLpSonetAdminInfoTable.setStatus('mandatory')
mscLpSonetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetAdminInfoEntry.setStatus('mandatory')
mscLpSonetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetVendor.setStatus('mandatory')
mscLpSonetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetCommentText.setStatus('mandatory')
mscLpSonetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13), )
if mibBuilder.loadTexts: mscLpSonetIfEntryTable.setStatus('mandatory')
mscLpSonetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetIfEntryEntry.setStatus('mandatory')
mscLpSonetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetIfAdminStatus.setStatus('mandatory')
mscLpSonetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetIfIndex.setStatus('mandatory')
mscLpSonetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14), )
if mibBuilder.loadTexts: mscLpSonetOperStatusTable.setStatus('mandatory')
mscLpSonetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetOperStatusEntry.setStatus('mandatory')
mscLpSonetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSnmpOperStatus.setStatus('mandatory')
mscLpSonetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15), )
if mibBuilder.loadTexts: mscLpSonetStateTable.setStatus('mandatory')
mscLpSonetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetStateEntry.setStatus('mandatory')
mscLpSonetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetAdminState.setStatus('mandatory')
mscLpSonetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetOperationalState.setStatus('mandatory')
mscLpSonetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetUsageState.setStatus('mandatory')
mscLpSonetAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetAvailabilityStatus.setStatus('mandatory')
mscLpSonetProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetProceduralStatus.setStatus('mandatory')
mscLpSonetControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetControlStatus.setStatus('mandatory')
mscLpSonetAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetAlarmStatus.setStatus('mandatory')
mscLpSonetStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetStandbyStatus.setStatus('mandatory')
mscLpSonetUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetUnknownStatus.setStatus('mandatory')
mscLpSonetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16), )
if mibBuilder.loadTexts: mscLpSonetOperTable.setStatus('mandatory')
mscLpSonetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetOperEntry.setStatus('mandatory')
mscLpSonetLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLosAlarm.setStatus('mandatory')
mscLpSonetLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLofAlarm.setStatus('mandatory')
mscLpSonetRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetRxAisAlarm.setStatus('mandatory')
mscLpSonetRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetRxRfiAlarm.setStatus('mandatory')
mscLpSonetTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTxAis.setStatus('mandatory')
mscLpSonetTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTxRdi.setStatus('mandatory')
mscLpSonetUnusableTxClockRefAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetUnusableTxClockRefAlarm.setStatus('mandatory')
mscLpSonetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17), )
if mibBuilder.loadTexts: mscLpSonetStatsTable.setStatus('mandatory')
mscLpSonetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"))
if mibBuilder.loadTexts: mscLpSonetStatsEntry.setStatus('mandatory')
mscLpSonetRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetRunningTime.setStatus('mandatory')
mscLpSonetErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetErrorFreeSec.setStatus('mandatory')
mscLpSonetSectCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectCodeViolations.setStatus('mandatory')
mscLpSonetSectErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectErroredSec.setStatus('mandatory')
mscLpSonetSectSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectSevErroredSec.setStatus('mandatory')
mscLpSonetSectLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectLosSec.setStatus('mandatory')
mscLpSonetSectSevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectSevErroredFrmSec.setStatus('mandatory')
mscLpSonetSectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetSectFailures.setStatus('mandatory')
mscLpSonetLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineCodeViolations.setStatus('mandatory')
mscLpSonetLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineErroredSec.setStatus('mandatory')
mscLpSonetLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineSevErroredSec.setStatus('mandatory')
mscLpSonetLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineAisSec.setStatus('mandatory')
mscLpSonetLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineUnavailSec.setStatus('mandatory')
mscLpSonetLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetLineFailures.setStatus('mandatory')
mscLpSonetFarEndLineErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineErrorFreeSec.setStatus('mandatory')
mscLpSonetFarEndLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineCodeViolations.setStatus('mandatory')
mscLpSonetFarEndLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineErroredSec.setStatus('mandatory')
mscLpSonetFarEndLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineSevErroredSec.setStatus('mandatory')
mscLpSonetFarEndLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineAisSec.setStatus('mandatory')
mscLpSonetFarEndLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineUnavailSec.setStatus('mandatory')
mscLpSonetFarEndLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetFarEndLineFailures.setStatus('mandatory')
mscLpSonetPath = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2))
mscLpSonetPathRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1), )
if mibBuilder.loadTexts: mscLpSonetPathRowStatusTable.setStatus('mandatory')
mscLpSonetPathRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathRowStatusEntry.setStatus('mandatory')
mscLpSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathRowStatus.setStatus('mandatory')
mscLpSonetPathComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathComponentName.setStatus('mandatory')
mscLpSonetPathStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathStorageType.setStatus('mandatory')
mscLpSonetPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpSonetPathIndex.setStatus('mandatory')
mscLpSonetPathProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10), )
if mibBuilder.loadTexts: mscLpSonetPathProvTable.setStatus('mandatory')
mscLpSonetPathProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathProvEntry.setStatus('mandatory')
mscLpSonetPathApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathApplicationFramerName.setStatus('mandatory')
mscLpSonetPathCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11), )
if mibBuilder.loadTexts: mscLpSonetPathCidDataTable.setStatus('mandatory')
mscLpSonetPathCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathCidDataEntry.setStatus('mandatory')
mscLpSonetPathCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathCustomerIdentifier.setStatus('mandatory')
mscLpSonetPathStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12), )
if mibBuilder.loadTexts: mscLpSonetPathStateTable.setStatus('mandatory')
mscLpSonetPathStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathStateEntry.setStatus('mandatory')
mscLpSonetPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathAdminState.setStatus('mandatory')
mscLpSonetPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathOperationalState.setStatus('mandatory')
mscLpSonetPathUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathUsageState.setStatus('mandatory')
mscLpSonetPathAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathAvailabilityStatus.setStatus('mandatory')
mscLpSonetPathProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathProceduralStatus.setStatus('mandatory')
mscLpSonetPathControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathControlStatus.setStatus('mandatory')
mscLpSonetPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathAlarmStatus.setStatus('mandatory')
mscLpSonetPathStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathStandbyStatus.setStatus('mandatory')
mscLpSonetPathUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathUnknownStatus.setStatus('mandatory')
mscLpSonetPathIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13), )
if mibBuilder.loadTexts: mscLpSonetPathIfEntryTable.setStatus('mandatory')
mscLpSonetPathIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathIfEntryEntry.setStatus('mandatory')
mscLpSonetPathIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathIfAdminStatus.setStatus('mandatory')
mscLpSonetPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathIfIndex.setStatus('mandatory')
mscLpSonetPathOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14), )
if mibBuilder.loadTexts: mscLpSonetPathOperStatusTable.setStatus('mandatory')
mscLpSonetPathOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathOperStatusEntry.setStatus('mandatory')
mscLpSonetPathSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathSnmpOperStatus.setStatus('mandatory')
mscLpSonetPathOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15), )
if mibBuilder.loadTexts: mscLpSonetPathOperTable.setStatus('mandatory')
mscLpSonetPathOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathOperEntry.setStatus('mandatory')
mscLpSonetPathLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathLopAlarm.setStatus('mandatory')
mscLpSonetPathRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathRxAisAlarm.setStatus('mandatory')
mscLpSonetPathRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathRxRfiAlarm.setStatus('mandatory')
mscLpSonetPathSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathSignalLabelMismatch.setStatus('mandatory')
mscLpSonetPathTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathTxAis.setStatus('mandatory')
mscLpSonetPathTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathTxRdi.setStatus('mandatory')
mscLpSonetPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16), )
if mibBuilder.loadTexts: mscLpSonetPathStatsTable.setStatus('mandatory')
mscLpSonetPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"))
if mibBuilder.loadTexts: mscLpSonetPathStatsEntry.setStatus('mandatory')
mscLpSonetPathPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathErrorFreeSec.setStatus('mandatory')
mscLpSonetPathPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathCodeViolations.setStatus('mandatory')
mscLpSonetPathPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathErroredSec.setStatus('mandatory')
mscLpSonetPathPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathSevErroredSec.setStatus('mandatory')
mscLpSonetPathPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathAisLopSec.setStatus('mandatory')
mscLpSonetPathPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathUnavailSec.setStatus('mandatory')
mscLpSonetPathPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathPathFailures.setStatus('mandatory')
mscLpSonetPathFarEndPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathErrorFreeSec.setStatus('mandatory')
mscLpSonetPathFarEndPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathCodeViolations.setStatus('mandatory')
mscLpSonetPathFarEndPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathErroredSec.setStatus('mandatory')
mscLpSonetPathFarEndPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathSevErroredSec.setStatus('mandatory')
mscLpSonetPathFarEndPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathAisLopSec.setStatus('mandatory')
mscLpSonetPathFarEndPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathUnavailSec.setStatus('mandatory')
mscLpSonetPathFarEndPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathFarEndPathFailures.setStatus('mandatory')
mscLpSonetPathCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2))
mscLpSonetPathCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpSonetPathCellRowStatusTable.setStatus('mandatory')
mscLpSonetPathCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"))
if mibBuilder.loadTexts: mscLpSonetPathCellRowStatusEntry.setStatus('mandatory')
mscLpSonetPathCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellRowStatus.setStatus('mandatory')
mscLpSonetPathCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellComponentName.setStatus('mandatory')
mscLpSonetPathCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellStorageType.setStatus('mandatory')
mscLpSonetPathCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpSonetPathCellIndex.setStatus('mandatory')
mscLpSonetPathCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpSonetPathCellProvTable.setStatus('mandatory')
mscLpSonetPathCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"))
if mibBuilder.loadTexts: mscLpSonetPathCellProvEntry.setStatus('mandatory')
mscLpSonetPathCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathCellAlarmActDelay.setStatus('mandatory')
mscLpSonetPathCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathCellScrambleCellPayload.setStatus('mandatory')
mscLpSonetPathCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetPathCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpSonetPathCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11), )
if mibBuilder.loadTexts: mscLpSonetPathCellOperTable.setStatus('mandatory')
mscLpSonetPathCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"))
if mibBuilder.loadTexts: mscLpSonetPathCellOperEntry.setStatus('mandatory')
mscLpSonetPathCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellLcdAlarm.setStatus('mandatory')
mscLpSonetPathCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12), )
if mibBuilder.loadTexts: mscLpSonetPathCellStatsTable.setStatus('mandatory')
mscLpSonetPathCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"))
if mibBuilder.loadTexts: mscLpSonetPathCellStatsEntry.setStatus('mandatory')
mscLpSonetPathCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellUncorrectableHecErrors.setStatus('mandatory')
mscLpSonetPathCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellSevErroredSec.setStatus('mandatory')
mscLpSonetPathCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellReceiveCellUtilization.setStatus('mandatory')
mscLpSonetPathCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellTransmitCellUtilization.setStatus('mandatory')
mscLpSonetPathCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetPathCellCorrectableHeaderErrors.setStatus('mandatory')
mscLpSonetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3))
mscLpSonetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1), )
if mibBuilder.loadTexts: mscLpSonetTestRowStatusTable.setStatus('mandatory')
mscLpSonetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"))
if mibBuilder.loadTexts: mscLpSonetTestRowStatusEntry.setStatus('mandatory')
mscLpSonetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestRowStatus.setStatus('mandatory')
mscLpSonetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestComponentName.setStatus('mandatory')
mscLpSonetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestStorageType.setStatus('mandatory')
mscLpSonetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpSonetTestIndex.setStatus('mandatory')
mscLpSonetTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10), )
if mibBuilder.loadTexts: mscLpSonetTestStateTable.setStatus('mandatory')
mscLpSonetTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"))
if mibBuilder.loadTexts: mscLpSonetTestStateEntry.setStatus('mandatory')
mscLpSonetTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestAdminState.setStatus('mandatory')
mscLpSonetTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestOperationalState.setStatus('mandatory')
mscLpSonetTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestUsageState.setStatus('mandatory')
mscLpSonetTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11), )
if mibBuilder.loadTexts: mscLpSonetTestSetupTable.setStatus('mandatory')
mscLpSonetTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"))
if mibBuilder.loadTexts: mscLpSonetTestSetupEntry.setStatus('mandatory')
mscLpSonetTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestPurpose.setStatus('mandatory')
mscLpSonetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestType.setStatus('mandatory')
mscLpSonetTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestFrmSize.setStatus('mandatory')
mscLpSonetTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestFrmPatternType.setStatus('mandatory')
mscLpSonetTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestCustomizedPattern.setStatus('mandatory')
mscLpSonetTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestDataStartDelay.setStatus('mandatory')
mscLpSonetTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestDisplayInterval.setStatus('mandatory')
mscLpSonetTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSonetTestDuration.setStatus('mandatory')
mscLpSonetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12), )
if mibBuilder.loadTexts: mscLpSonetTestResultsTable.setStatus('mandatory')
mscLpSonetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"))
if mibBuilder.loadTexts: mscLpSonetTestResultsEntry.setStatus('mandatory')
mscLpSonetTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestElapsedTime.setStatus('mandatory')
mscLpSonetTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestTimeRemaining.setStatus('mandatory')
mscLpSonetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestCauseOfTermination.setStatus('mandatory')
mscLpSonetTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestBitsTx.setStatus('mandatory')
mscLpSonetTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestBytesTx.setStatus('mandatory')
mscLpSonetTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestFrmTx.setStatus('mandatory')
mscLpSonetTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestBitsRx.setStatus('mandatory')
mscLpSonetTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestBytesRx.setStatus('mandatory')
mscLpSonetTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestFrmRx.setStatus('mandatory')
mscLpSonetTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestErroredFrmRx.setStatus('mandatory')
mscLpSonetTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSonetTestBitErrorRate.setStatus('mandatory')
mscLpSdh = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15))
mscLpSdhRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1), )
if mibBuilder.loadTexts: mscLpSdhRowStatusTable.setStatus('mandatory')
mscLpSdhRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhRowStatusEntry.setStatus('mandatory')
mscLpSdhRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhRowStatus.setStatus('mandatory')
mscLpSdhComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhComponentName.setStatus('mandatory')
mscLpSdhStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhStorageType.setStatus('mandatory')
mscLpSdhIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscLpSdhIndex.setStatus('mandatory')
mscLpSdhProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10), )
if mibBuilder.loadTexts: mscLpSdhProvTable.setStatus('mandatory')
mscLpSdhProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhProvEntry.setStatus('mandatory')
mscLpSdhClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhClockingSource.setStatus('mandatory')
mscLpSdhCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11), )
if mibBuilder.loadTexts: mscLpSdhCidDataTable.setStatus('mandatory')
mscLpSdhCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhCidDataEntry.setStatus('mandatory')
mscLpSdhCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhCustomerIdentifier.setStatus('mandatory')
mscLpSdhAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12), )
if mibBuilder.loadTexts: mscLpSdhAdminInfoTable.setStatus('mandatory')
mscLpSdhAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhAdminInfoEntry.setStatus('mandatory')
mscLpSdhVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhVendor.setStatus('mandatory')
mscLpSdhCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhCommentText.setStatus('mandatory')
mscLpSdhIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13), )
if mibBuilder.loadTexts: mscLpSdhIfEntryTable.setStatus('mandatory')
mscLpSdhIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhIfEntryEntry.setStatus('mandatory')
mscLpSdhIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhIfAdminStatus.setStatus('mandatory')
mscLpSdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhIfIndex.setStatus('mandatory')
mscLpSdhOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14), )
if mibBuilder.loadTexts: mscLpSdhOperStatusTable.setStatus('mandatory')
mscLpSdhOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhOperStatusEntry.setStatus('mandatory')
mscLpSdhSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSnmpOperStatus.setStatus('mandatory')
mscLpSdhStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15), )
if mibBuilder.loadTexts: mscLpSdhStateTable.setStatus('mandatory')
mscLpSdhStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhStateEntry.setStatus('mandatory')
mscLpSdhAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhAdminState.setStatus('mandatory')
mscLpSdhOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhOperationalState.setStatus('mandatory')
mscLpSdhUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhUsageState.setStatus('mandatory')
mscLpSdhAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhAvailabilityStatus.setStatus('mandatory')
mscLpSdhProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhProceduralStatus.setStatus('mandatory')
mscLpSdhControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhControlStatus.setStatus('mandatory')
mscLpSdhAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhAlarmStatus.setStatus('mandatory')
mscLpSdhStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhStandbyStatus.setStatus('mandatory')
mscLpSdhUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhUnknownStatus.setStatus('mandatory')
mscLpSdhOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16), )
if mibBuilder.loadTexts: mscLpSdhOperTable.setStatus('mandatory')
mscLpSdhOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhOperEntry.setStatus('mandatory')
mscLpSdhLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLosAlarm.setStatus('mandatory')
mscLpSdhLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLofAlarm.setStatus('mandatory')
mscLpSdhRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhRxAisAlarm.setStatus('mandatory')
mscLpSdhRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhRxRfiAlarm.setStatus('mandatory')
mscLpSdhTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTxAis.setStatus('mandatory')
mscLpSdhTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTxRdi.setStatus('mandatory')
mscLpSdhUnusableTxClockRefAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhUnusableTxClockRefAlarm.setStatus('mandatory')
mscLpSdhStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17), )
if mibBuilder.loadTexts: mscLpSdhStatsTable.setStatus('mandatory')
mscLpSdhStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"))
if mibBuilder.loadTexts: mscLpSdhStatsEntry.setStatus('mandatory')
mscLpSdhRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhRunningTime.setStatus('mandatory')
mscLpSdhErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhErrorFreeSec.setStatus('mandatory')
mscLpSdhSectCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectCodeViolations.setStatus('mandatory')
mscLpSdhSectErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectErroredSec.setStatus('mandatory')
mscLpSdhSectSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectSevErroredSec.setStatus('mandatory')
mscLpSdhSectLosSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectLosSec.setStatus('mandatory')
mscLpSdhSectSevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectSevErroredFrmSec.setStatus('mandatory')
mscLpSdhSectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhSectFailures.setStatus('mandatory')
mscLpSdhLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineCodeViolations.setStatus('mandatory')
mscLpSdhLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineErroredSec.setStatus('mandatory')
mscLpSdhLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineSevErroredSec.setStatus('mandatory')
mscLpSdhLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineAisSec.setStatus('mandatory')
mscLpSdhLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineUnavailSec.setStatus('mandatory')
mscLpSdhLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhLineFailures.setStatus('mandatory')
mscLpSdhFarEndLineErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineErrorFreeSec.setStatus('mandatory')
mscLpSdhFarEndLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineCodeViolations.setStatus('mandatory')
mscLpSdhFarEndLineErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineErroredSec.setStatus('mandatory')
mscLpSdhFarEndLineSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineSevErroredSec.setStatus('mandatory')
mscLpSdhFarEndLineAisSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineAisSec.setStatus('mandatory')
mscLpSdhFarEndLineUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineUnavailSec.setStatus('mandatory')
mscLpSdhFarEndLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhFarEndLineFailures.setStatus('mandatory')
mscLpSdhPath = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2))
mscLpSdhPathRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1), )
if mibBuilder.loadTexts: mscLpSdhPathRowStatusTable.setStatus('mandatory')
mscLpSdhPathRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathRowStatusEntry.setStatus('mandatory')
mscLpSdhPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathRowStatus.setStatus('mandatory')
mscLpSdhPathComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathComponentName.setStatus('mandatory')
mscLpSdhPathStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathStorageType.setStatus('mandatory')
mscLpSdhPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpSdhPathIndex.setStatus('mandatory')
mscLpSdhPathProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10), )
if mibBuilder.loadTexts: mscLpSdhPathProvTable.setStatus('mandatory')
mscLpSdhPathProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathProvEntry.setStatus('mandatory')
mscLpSdhPathApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathApplicationFramerName.setStatus('mandatory')
mscLpSdhPathCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11), )
if mibBuilder.loadTexts: mscLpSdhPathCidDataTable.setStatus('mandatory')
mscLpSdhPathCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathCidDataEntry.setStatus('mandatory')
mscLpSdhPathCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathCustomerIdentifier.setStatus('mandatory')
mscLpSdhPathStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12), )
if mibBuilder.loadTexts: mscLpSdhPathStateTable.setStatus('mandatory')
mscLpSdhPathStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathStateEntry.setStatus('mandatory')
mscLpSdhPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathAdminState.setStatus('mandatory')
mscLpSdhPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathOperationalState.setStatus('mandatory')
mscLpSdhPathUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathUsageState.setStatus('mandatory')
mscLpSdhPathAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathAvailabilityStatus.setStatus('mandatory')
mscLpSdhPathProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathProceduralStatus.setStatus('mandatory')
mscLpSdhPathControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathControlStatus.setStatus('mandatory')
mscLpSdhPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathAlarmStatus.setStatus('mandatory')
mscLpSdhPathStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathStandbyStatus.setStatus('mandatory')
mscLpSdhPathUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathUnknownStatus.setStatus('mandatory')
mscLpSdhPathIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13), )
if mibBuilder.loadTexts: mscLpSdhPathIfEntryTable.setStatus('mandatory')
mscLpSdhPathIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathIfEntryEntry.setStatus('mandatory')
mscLpSdhPathIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathIfAdminStatus.setStatus('mandatory')
mscLpSdhPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathIfIndex.setStatus('mandatory')
mscLpSdhPathOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14), )
if mibBuilder.loadTexts: mscLpSdhPathOperStatusTable.setStatus('mandatory')
mscLpSdhPathOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathOperStatusEntry.setStatus('mandatory')
mscLpSdhPathSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathSnmpOperStatus.setStatus('mandatory')
mscLpSdhPathOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15), )
if mibBuilder.loadTexts: mscLpSdhPathOperTable.setStatus('mandatory')
mscLpSdhPathOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathOperEntry.setStatus('mandatory')
mscLpSdhPathLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathLopAlarm.setStatus('mandatory')
mscLpSdhPathRxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathRxAisAlarm.setStatus('mandatory')
mscLpSdhPathRxRfiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathRxRfiAlarm.setStatus('mandatory')
mscLpSdhPathSignalLabelMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathSignalLabelMismatch.setStatus('mandatory')
mscLpSdhPathTxAis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathTxAis.setStatus('mandatory')
mscLpSdhPathTxRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathTxRdi.setStatus('mandatory')
mscLpSdhPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16), )
if mibBuilder.loadTexts: mscLpSdhPathStatsTable.setStatus('mandatory')
mscLpSdhPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"))
if mibBuilder.loadTexts: mscLpSdhPathStatsEntry.setStatus('mandatory')
mscLpSdhPathPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathErrorFreeSec.setStatus('mandatory')
mscLpSdhPathPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathCodeViolations.setStatus('mandatory')
mscLpSdhPathPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathErroredSec.setStatus('mandatory')
mscLpSdhPathPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathSevErroredSec.setStatus('mandatory')
mscLpSdhPathPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathAisLopSec.setStatus('mandatory')
mscLpSdhPathPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathUnavailSec.setStatus('mandatory')
mscLpSdhPathPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathPathFailures.setStatus('mandatory')
mscLpSdhPathFarEndPathErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathErrorFreeSec.setStatus('mandatory')
mscLpSdhPathFarEndPathCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathCodeViolations.setStatus('mandatory')
mscLpSdhPathFarEndPathErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathErroredSec.setStatus('mandatory')
mscLpSdhPathFarEndPathSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathSevErroredSec.setStatus('mandatory')
mscLpSdhPathFarEndPathAisLopSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathAisLopSec.setStatus('mandatory')
mscLpSdhPathFarEndPathUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathUnavailSec.setStatus('mandatory')
mscLpSdhPathFarEndPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathFarEndPathFailures.setStatus('mandatory')
mscLpSdhPathCell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2))
mscLpSdhPathCellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpSdhPathCellRowStatusTable.setStatus('mandatory')
mscLpSdhPathCellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"))
if mibBuilder.loadTexts: mscLpSdhPathCellRowStatusEntry.setStatus('mandatory')
mscLpSdhPathCellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellRowStatus.setStatus('mandatory')
mscLpSdhPathCellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellComponentName.setStatus('mandatory')
mscLpSdhPathCellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellStorageType.setStatus('mandatory')
mscLpSdhPathCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpSdhPathCellIndex.setStatus('mandatory')
mscLpSdhPathCellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpSdhPathCellProvTable.setStatus('mandatory')
mscLpSdhPathCellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"))
if mibBuilder.loadTexts: mscLpSdhPathCellProvEntry.setStatus('mandatory')
mscLpSdhPathCellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathCellAlarmActDelay.setStatus('mandatory')
mscLpSdhPathCellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathCellScrambleCellPayload.setStatus('mandatory')
mscLpSdhPathCellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhPathCellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpSdhPathCellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11), )
if mibBuilder.loadTexts: mscLpSdhPathCellOperTable.setStatus('mandatory')
mscLpSdhPathCellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"))
if mibBuilder.loadTexts: mscLpSdhPathCellOperEntry.setStatus('mandatory')
mscLpSdhPathCellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellLcdAlarm.setStatus('mandatory')
mscLpSdhPathCellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12), )
if mibBuilder.loadTexts: mscLpSdhPathCellStatsTable.setStatus('mandatory')
mscLpSdhPathCellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"))
if mibBuilder.loadTexts: mscLpSdhPathCellStatsEntry.setStatus('mandatory')
mscLpSdhPathCellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellUncorrectableHecErrors.setStatus('mandatory')
mscLpSdhPathCellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellSevErroredSec.setStatus('mandatory')
mscLpSdhPathCellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellReceiveCellUtilization.setStatus('mandatory')
mscLpSdhPathCellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellTransmitCellUtilization.setStatus('mandatory')
mscLpSdhPathCellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhPathCellCorrectableHeaderErrors.setStatus('mandatory')
mscLpSdhTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3))
mscLpSdhTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1), )
if mibBuilder.loadTexts: mscLpSdhTestRowStatusTable.setStatus('mandatory')
mscLpSdhTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"))
if mibBuilder.loadTexts: mscLpSdhTestRowStatusEntry.setStatus('mandatory')
mscLpSdhTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestRowStatus.setStatus('mandatory')
mscLpSdhTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestComponentName.setStatus('mandatory')
mscLpSdhTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestStorageType.setStatus('mandatory')
mscLpSdhTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpSdhTestIndex.setStatus('mandatory')
mscLpSdhTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10), )
if mibBuilder.loadTexts: mscLpSdhTestStateTable.setStatus('mandatory')
mscLpSdhTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"))
if mibBuilder.loadTexts: mscLpSdhTestStateEntry.setStatus('mandatory')
mscLpSdhTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestAdminState.setStatus('mandatory')
mscLpSdhTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestOperationalState.setStatus('mandatory')
mscLpSdhTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestUsageState.setStatus('mandatory')
mscLpSdhTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11), )
if mibBuilder.loadTexts: mscLpSdhTestSetupTable.setStatus('mandatory')
mscLpSdhTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"))
if mibBuilder.loadTexts: mscLpSdhTestSetupEntry.setStatus('mandatory')
mscLpSdhTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestPurpose.setStatus('mandatory')
mscLpSdhTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestType.setStatus('mandatory')
mscLpSdhTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestFrmSize.setStatus('mandatory')
mscLpSdhTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestFrmPatternType.setStatus('mandatory')
mscLpSdhTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestCustomizedPattern.setStatus('mandatory')
mscLpSdhTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestDataStartDelay.setStatus('mandatory')
mscLpSdhTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestDisplayInterval.setStatus('mandatory')
mscLpSdhTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpSdhTestDuration.setStatus('mandatory')
mscLpSdhTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12), )
if mibBuilder.loadTexts: mscLpSdhTestResultsTable.setStatus('mandatory')
mscLpSdhTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"))
if mibBuilder.loadTexts: mscLpSdhTestResultsEntry.setStatus('mandatory')
mscLpSdhTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestElapsedTime.setStatus('mandatory')
mscLpSdhTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestTimeRemaining.setStatus('mandatory')
mscLpSdhTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestCauseOfTermination.setStatus('mandatory')
mscLpSdhTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestBitsTx.setStatus('mandatory')
mscLpSdhTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestBytesTx.setStatus('mandatory')
mscLpSdhTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestFrmTx.setStatus('mandatory')
mscLpSdhTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestBitsRx.setStatus('mandatory')
mscLpSdhTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestBytesRx.setStatus('mandatory')
mscLpSdhTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestFrmRx.setStatus('mandatory')
mscLpSdhTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestErroredFrmRx.setStatus('mandatory')
mscLpSdhTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpSdhTestBitErrorRate.setStatus('mandatory')
mscLpJT2 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16))
mscLpJT2RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1), )
if mibBuilder.loadTexts: mscLpJT2RowStatusTable.setStatus('mandatory')
mscLpJT2RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2RowStatusEntry.setStatus('mandatory')
mscLpJT2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2RowStatus.setStatus('mandatory')
mscLpJT2ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2ComponentName.setStatus('mandatory')
mscLpJT2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2StorageType.setStatus('mandatory')
mscLpJT2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: mscLpJT2Index.setStatus('mandatory')
mscLpJT2CidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10), )
if mibBuilder.loadTexts: mscLpJT2CidDataTable.setStatus('mandatory')
mscLpJT2CidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2CidDataEntry.setStatus('mandatory')
mscLpJT2CustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2CustomerIdentifier.setStatus('mandatory')
mscLpJT2ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11), )
if mibBuilder.loadTexts: mscLpJT2ProvTable.setStatus('mandatory')
mscLpJT2ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2ProvEntry.setStatus('mandatory')
mscLpJT2ClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("local", 0), ("line", 1), ("module", 2), ("otherPort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2ClockingSource.setStatus('mandatory')
mscLpJT2LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2LineLength.setStatus('mandatory')
mscLpJT2ApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2ApplicationFramerName.setStatus('mandatory')
mscLpJT2IfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12), )
if mibBuilder.loadTexts: mscLpJT2IfEntryTable.setStatus('mandatory')
mscLpJT2IfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2IfEntryEntry.setStatus('mandatory')
mscLpJT2IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2IfAdminStatus.setStatus('mandatory')
mscLpJT2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2IfIndex.setStatus('mandatory')
mscLpJT2OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13), )
if mibBuilder.loadTexts: mscLpJT2OperStatusTable.setStatus('mandatory')
mscLpJT2OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2OperStatusEntry.setStatus('mandatory')
mscLpJT2SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2SnmpOperStatus.setStatus('mandatory')
mscLpJT2StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14), )
if mibBuilder.loadTexts: mscLpJT2StateTable.setStatus('mandatory')
mscLpJT2StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2StateEntry.setStatus('mandatory')
mscLpJT2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2AdminState.setStatus('mandatory')
mscLpJT2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2OperationalState.setStatus('mandatory')
mscLpJT2UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2UsageState.setStatus('mandatory')
mscLpJT2AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2AvailabilityStatus.setStatus('mandatory')
mscLpJT2ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2ProceduralStatus.setStatus('mandatory')
mscLpJT2ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2ControlStatus.setStatus('mandatory')
mscLpJT2AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2AlarmStatus.setStatus('mandatory')
mscLpJT2StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2StandbyStatus.setStatus('mandatory')
mscLpJT2UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2UnknownStatus.setStatus('mandatory')
mscLpJT2OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15), )
if mibBuilder.loadTexts: mscLpJT2OperTable.setStatus('mandatory')
mscLpJT2OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2OperEntry.setStatus('mandatory')
mscLpJT2LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2LosAlarm.setStatus('mandatory')
mscLpJT2LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2LofAlarm.setStatus('mandatory')
mscLpJT2RxAisPhysicalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2RxAisPhysicalAlarm.setStatus('mandatory')
mscLpJT2RxAisPayloadAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2RxAisPayloadAlarm.setStatus('mandatory')
mscLpJT2RxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2RxRaiAlarm.setStatus('mandatory')
mscLpJT2TxAisPhysicalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TxAisPhysicalAlarm.setStatus('mandatory')
mscLpJT2TxRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TxRaiAlarm.setStatus('mandatory')
mscLpJT2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16), )
if mibBuilder.loadTexts: mscLpJT2StatsTable.setStatus('mandatory')
mscLpJT2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2StatsEntry.setStatus('mandatory')
mscLpJT2RunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2RunningTime.setStatus('mandatory')
mscLpJT2ErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2ErrorFreeSec.setStatus('mandatory')
mscLpJT2ErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2ErroredSec.setStatus('mandatory')
mscLpJT2SevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2SevErroredSec.setStatus('mandatory')
mscLpJT2SevErroredFrmSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2SevErroredFrmSec.setStatus('mandatory')
mscLpJT2UnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2UnavailSec.setStatus('mandatory')
mscLpJT2BpvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2BpvErrors.setStatus('mandatory')
mscLpJT2CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CrcErrors.setStatus('mandatory')
mscLpJT2FrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2FrameErrors.setStatus('mandatory')
mscLpJT2LosStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2LosStateChanges.setStatus('mandatory')
mscLpJT2AdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17), )
if mibBuilder.loadTexts: mscLpJT2AdminInfoTable.setStatus('mandatory')
mscLpJT2AdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"))
if mibBuilder.loadTexts: mscLpJT2AdminInfoEntry.setStatus('mandatory')
mscLpJT2Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2Vendor.setStatus('mandatory')
mscLpJT2CommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2CommentText.setStatus('mandatory')
mscLpJT2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2))
mscLpJT2TestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1), )
if mibBuilder.loadTexts: mscLpJT2TestRowStatusTable.setStatus('mandatory')
mscLpJT2TestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"))
if mibBuilder.loadTexts: mscLpJT2TestRowStatusEntry.setStatus('mandatory')
mscLpJT2TestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestRowStatus.setStatus('mandatory')
mscLpJT2TestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestComponentName.setStatus('mandatory')
mscLpJT2TestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestStorageType.setStatus('mandatory')
mscLpJT2TestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpJT2TestIndex.setStatus('mandatory')
mscLpJT2TestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10), )
if mibBuilder.loadTexts: mscLpJT2TestStateTable.setStatus('mandatory')
mscLpJT2TestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"))
if mibBuilder.loadTexts: mscLpJT2TestStateEntry.setStatus('mandatory')
mscLpJT2TestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestAdminState.setStatus('mandatory')
mscLpJT2TestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestOperationalState.setStatus('mandatory')
mscLpJT2TestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestUsageState.setStatus('mandatory')
mscLpJT2TestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11), )
if mibBuilder.loadTexts: mscLpJT2TestSetupTable.setStatus('mandatory')
mscLpJT2TestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"))
if mibBuilder.loadTexts: mscLpJT2TestSetupEntry.setStatus('mandatory')
mscLpJT2TestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestPurpose.setStatus('mandatory')
mscLpJT2TestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestType.setStatus('mandatory')
mscLpJT2TestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestFrmSize.setStatus('mandatory')
mscLpJT2TestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestFrmPatternType.setStatus('mandatory')
mscLpJT2TestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestCustomizedPattern.setStatus('mandatory')
mscLpJT2TestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestDataStartDelay.setStatus('mandatory')
mscLpJT2TestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestDisplayInterval.setStatus('mandatory')
mscLpJT2TestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2TestDuration.setStatus('mandatory')
mscLpJT2TestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12), )
if mibBuilder.loadTexts: mscLpJT2TestResultsTable.setStatus('mandatory')
mscLpJT2TestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"))
if mibBuilder.loadTexts: mscLpJT2TestResultsEntry.setStatus('mandatory')
mscLpJT2TestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestElapsedTime.setStatus('mandatory')
mscLpJT2TestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestTimeRemaining.setStatus('mandatory')
mscLpJT2TestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestCauseOfTermination.setStatus('mandatory')
mscLpJT2TestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestBitsTx.setStatus('mandatory')
mscLpJT2TestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestBytesTx.setStatus('mandatory')
mscLpJT2TestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestFrmTx.setStatus('mandatory')
mscLpJT2TestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestBitsRx.setStatus('mandatory')
mscLpJT2TestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestBytesRx.setStatus('mandatory')
mscLpJT2TestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestFrmRx.setStatus('mandatory')
mscLpJT2TestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestErroredFrmRx.setStatus('mandatory')
mscLpJT2TestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2TestBitErrorRate.setStatus('mandatory')
mscLpJT2Cell = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3))
mscLpJT2CellRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1), )
if mibBuilder.loadTexts: mscLpJT2CellRowStatusTable.setStatus('mandatory')
mscLpJT2CellRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"))
if mibBuilder.loadTexts: mscLpJT2CellRowStatusEntry.setStatus('mandatory')
mscLpJT2CellRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellRowStatus.setStatus('mandatory')
mscLpJT2CellComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellComponentName.setStatus('mandatory')
mscLpJT2CellStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellStorageType.setStatus('mandatory')
mscLpJT2CellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpJT2CellIndex.setStatus('mandatory')
mscLpJT2CellProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10), )
if mibBuilder.loadTexts: mscLpJT2CellProvTable.setStatus('mandatory')
mscLpJT2CellProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"))
if mibBuilder.loadTexts: mscLpJT2CellProvEntry.setStatus('mandatory')
mscLpJT2CellAlarmActDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2CellAlarmActDelay.setStatus('mandatory')
mscLpJT2CellScrambleCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2CellScrambleCellPayload.setStatus('mandatory')
mscLpJT2CellCorrectSingleBitHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpJT2CellCorrectSingleBitHeaderErrors.setStatus('mandatory')
mscLpJT2CellOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11), )
if mibBuilder.loadTexts: mscLpJT2CellOperTable.setStatus('mandatory')
mscLpJT2CellOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"))
if mibBuilder.loadTexts: mscLpJT2CellOperEntry.setStatus('mandatory')
mscLpJT2CellLcdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellLcdAlarm.setStatus('mandatory')
mscLpJT2CellStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12), )
if mibBuilder.loadTexts: mscLpJT2CellStatsTable.setStatus('mandatory')
mscLpJT2CellStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"))
if mibBuilder.loadTexts: mscLpJT2CellStatsEntry.setStatus('mandatory')
mscLpJT2CellUncorrectableHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellUncorrectableHecErrors.setStatus('mandatory')
mscLpJT2CellSevErroredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellSevErroredSec.setStatus('mandatory')
mscLpJT2CellReceiveCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellReceiveCellUtilization.setStatus('mandatory')
mscLpJT2CellTransmitCellUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellTransmitCellUtilization.setStatus('mandatory')
mscLpJT2CellCorrectableHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpJT2CellCorrectableHeaderErrors.setStatus('mandatory')
mscLpHssi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17))
mscLpHssiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1), )
if mibBuilder.loadTexts: mscLpHssiRowStatusTable.setStatus('mandatory')
mscLpHssiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiRowStatusEntry.setStatus('mandatory')
mscLpHssiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiRowStatus.setStatus('mandatory')
mscLpHssiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiComponentName.setStatus('mandatory')
mscLpHssiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiStorageType.setStatus('mandatory')
mscLpHssiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: mscLpHssiIndex.setStatus('mandatory')
mscLpHssiProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10), )
if mibBuilder.loadTexts: mscLpHssiProvTable.setStatus('mandatory')
mscLpHssiProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiProvEntry.setStatus('mandatory')
mscLpHssiLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiLinkMode.setStatus('mandatory')
mscLpHssiReadyLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiReadyLineState.setStatus('mandatory')
mscLpHssiDataTransferLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="c0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiDataTransferLineState.setStatus('mandatory')
mscLpHssiLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 50000000)).clone(45000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiLineSpeed.setStatus('mandatory')
mscLpHssiApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 7), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiApplicationFramerName.setStatus('mandatory')
mscLpHssiCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11), )
if mibBuilder.loadTexts: mscLpHssiCidDataTable.setStatus('mandatory')
mscLpHssiCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiCidDataEntry.setStatus('mandatory')
mscLpHssiCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiCustomerIdentifier.setStatus('mandatory')
mscLpHssiAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12), )
if mibBuilder.loadTexts: mscLpHssiAdminInfoTable.setStatus('mandatory')
mscLpHssiAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiAdminInfoEntry.setStatus('mandatory')
mscLpHssiVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiVendor.setStatus('mandatory')
mscLpHssiCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiCommentText.setStatus('mandatory')
mscLpHssiIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13), )
if mibBuilder.loadTexts: mscLpHssiIfEntryTable.setStatus('mandatory')
mscLpHssiIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiIfEntryEntry.setStatus('mandatory')
mscLpHssiIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiIfAdminStatus.setStatus('mandatory')
mscLpHssiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiIfIndex.setStatus('mandatory')
mscLpHssiOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14), )
if mibBuilder.loadTexts: mscLpHssiOperStatusTable.setStatus('mandatory')
mscLpHssiOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiOperStatusEntry.setStatus('mandatory')
mscLpHssiSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiSnmpOperStatus.setStatus('mandatory')
mscLpHssiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15), )
if mibBuilder.loadTexts: mscLpHssiStateTable.setStatus('mandatory')
mscLpHssiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiStateEntry.setStatus('mandatory')
mscLpHssiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiAdminState.setStatus('mandatory')
mscLpHssiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiOperationalState.setStatus('mandatory')
mscLpHssiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiUsageState.setStatus('mandatory')
mscLpHssiAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiAvailabilityStatus.setStatus('mandatory')
mscLpHssiProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiProceduralStatus.setStatus('mandatory')
mscLpHssiControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiControlStatus.setStatus('mandatory')
mscLpHssiAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiAlarmStatus.setStatus('mandatory')
mscLpHssiStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiStandbyStatus.setStatus('mandatory')
mscLpHssiUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiUnknownStatus.setStatus('mandatory')
mscLpHssiOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16), )
if mibBuilder.loadTexts: mscLpHssiOperTable.setStatus('mandatory')
mscLpHssiOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"))
if mibBuilder.loadTexts: mscLpHssiOperEntry.setStatus('mandatory')
mscLpHssiActualLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("dte", 0), ("dce", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiActualLinkMode.setStatus('mandatory')
mscLpHssiLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiLineState.setStatus('mandatory')
mscLpHssiActualTxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiActualTxLineSpeed.setStatus('mandatory')
mscLpHssiActualRxLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiActualRxLineSpeed.setStatus('mandatory')
mscLpHssiDataXferStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiDataXferStateChanges.setStatus('mandatory')
mscLpHssiTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2))
mscLpHssiTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1), )
if mibBuilder.loadTexts: mscLpHssiTestRowStatusTable.setStatus('mandatory')
mscLpHssiTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"))
if mibBuilder.loadTexts: mscLpHssiTestRowStatusEntry.setStatus('mandatory')
mscLpHssiTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestRowStatus.setStatus('mandatory')
mscLpHssiTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestComponentName.setStatus('mandatory')
mscLpHssiTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestStorageType.setStatus('mandatory')
mscLpHssiTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpHssiTestIndex.setStatus('mandatory')
mscLpHssiTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10), )
if mibBuilder.loadTexts: mscLpHssiTestStateTable.setStatus('mandatory')
mscLpHssiTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"))
if mibBuilder.loadTexts: mscLpHssiTestStateEntry.setStatus('mandatory')
mscLpHssiTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestAdminState.setStatus('mandatory')
mscLpHssiTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestOperationalState.setStatus('mandatory')
mscLpHssiTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestUsageState.setStatus('mandatory')
mscLpHssiTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11), )
if mibBuilder.loadTexts: mscLpHssiTestSetupTable.setStatus('mandatory')
mscLpHssiTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"))
if mibBuilder.loadTexts: mscLpHssiTestSetupEntry.setStatus('mandatory')
mscLpHssiTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestPurpose.setStatus('mandatory')
mscLpHssiTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestType.setStatus('mandatory')
mscLpHssiTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestFrmSize.setStatus('mandatory')
mscLpHssiTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestFrmPatternType.setStatus('mandatory')
mscLpHssiTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestCustomizedPattern.setStatus('mandatory')
mscLpHssiTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestDataStartDelay.setStatus('mandatory')
mscLpHssiTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestDisplayInterval.setStatus('mandatory')
mscLpHssiTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpHssiTestDuration.setStatus('mandatory')
mscLpHssiTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12), )
if mibBuilder.loadTexts: mscLpHssiTestResultsTable.setStatus('mandatory')
mscLpHssiTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"))
if mibBuilder.loadTexts: mscLpHssiTestResultsEntry.setStatus('mandatory')
mscLpHssiTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestElapsedTime.setStatus('mandatory')
mscLpHssiTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestTimeRemaining.setStatus('mandatory')
mscLpHssiTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestCauseOfTermination.setStatus('mandatory')
mscLpHssiTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestBitsTx.setStatus('mandatory')
mscLpHssiTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestBytesTx.setStatus('mandatory')
mscLpHssiTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestFrmTx.setStatus('mandatory')
mscLpHssiTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestBitsRx.setStatus('mandatory')
mscLpHssiTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestBytesRx.setStatus('mandatory')
mscLpHssiTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestFrmRx.setStatus('mandatory')
mscLpHssiTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestErroredFrmRx.setStatus('mandatory')
mscLpHssiTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpHssiTestBitErrorRate.setStatus('mandatory')
mscLpEng = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23))
mscLpEngRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1), )
if mibBuilder.loadTexts: mscLpEngRowStatusTable.setStatus('mandatory')
mscLpEngRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"))
if mibBuilder.loadTexts: mscLpEngRowStatusEntry.setStatus('mandatory')
mscLpEngRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngRowStatus.setStatus('mandatory')
mscLpEngComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngComponentName.setStatus('mandatory')
mscLpEngStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngStorageType.setStatus('mandatory')
mscLpEngIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEngIndex.setStatus('mandatory')
mscLpEngDs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2))
mscLpEngDsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1), )
if mibBuilder.loadTexts: mscLpEngDsRowStatusTable.setStatus('mandatory')
mscLpEngDsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"))
if mibBuilder.loadTexts: mscLpEngDsRowStatusEntry.setStatus('mandatory')
mscLpEngDsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEngDsRowStatus.setStatus('mandatory')
mscLpEngDsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngDsComponentName.setStatus('mandatory')
mscLpEngDsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngDsStorageType.setStatus('mandatory')
mscLpEngDsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accounting", 0), ("alarm", 1), ("log", 2), ("debug", 3), ("scn", 4), ("trap", 5), ("stats", 6))))
if mibBuilder.loadTexts: mscLpEngDsIndex.setStatus('mandatory')
mscLpEngDsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10), )
if mibBuilder.loadTexts: mscLpEngDsOperTable.setStatus('mandatory')
mscLpEngDsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"))
if mibBuilder.loadTexts: mscLpEngDsOperEntry.setStatus('mandatory')
mscLpEngDsAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngDsAgentQueueSize.setStatus('mandatory')
mscLpEngDsOv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2))
mscLpEngDsOvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1), )
if mibBuilder.loadTexts: mscLpEngDsOvRowStatusTable.setStatus('mandatory')
mscLpEngDsOvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsOvIndex"))
if mibBuilder.loadTexts: mscLpEngDsOvRowStatusEntry.setStatus('mandatory')
mscLpEngDsOvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEngDsOvRowStatus.setStatus('mandatory')
mscLpEngDsOvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngDsOvComponentName.setStatus('mandatory')
mscLpEngDsOvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEngDsOvStorageType.setStatus('mandatory')
mscLpEngDsOvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLpEngDsOvIndex.setStatus('mandatory')
mscLpEngDsOvProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10), )
if mibBuilder.loadTexts: mscLpEngDsOvProvTable.setStatus('mandatory')
mscLpEngDsOvProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"), (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsOvIndex"))
if mibBuilder.loadTexts: mscLpEngDsOvProvEntry.setStatus('mandatory')
mscLpEngDsOvAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEngDsOvAgentQueueSize.setStatus('mandatory')
logicalProcessorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1))
logicalProcessorGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1))
logicalProcessorGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1, 3))
logicalProcessorGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1, 3, 2))
logicalProcessorCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3))
logicalProcessorCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1))
logicalProcessorCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1, 3))
logicalProcessorCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpDS3DS1ChanTestPurpose=mscLpDS3DS1ChanTestPurpose, mscLpSdhPathLopAlarm=mscLpSdhPathLopAlarm, mscLpV35TestRowStatusTable=mscLpV35TestRowStatusTable, mscLpJT2CellLcdAlarm=mscLpJT2CellLcdAlarm, mscLpX21ProvTable=mscLpX21ProvTable, mscLpDS1ChanTcIndex=mscLpDS1ChanTcIndex, mscLpSonetTestResultsTable=mscLpSonetTestResultsTable, mscLpSonetPathCellOperTable=mscLpSonetPathCellOperTable, mscLpDS1ChanCellRowStatusTable=mscLpDS1ChanCellRowStatusTable, mscLpSonetPathIfEntryEntry=mscLpSonetPathIfEntryEntry, mscLpDS3DS1ChanCidDataEntry=mscLpDS3DS1ChanCidDataEntry, mscLpDS3DS1TestCustomizedPattern=mscLpDS3DS1TestCustomizedPattern, mscLpSdhTestRowStatusEntry=mscLpSdhTestRowStatusEntry, mscLpEngStorageType=mscLpEngStorageType, mscLpSdhOperationalState=mscLpSdhOperationalState, mscLpE1ChanRowStatusEntry=mscLpE1ChanRowStatusEntry, mscLpV35TestResultsEntry=mscLpV35TestResultsEntry, mscLpE3G832OperationalTable=mscLpE3G832OperationalTable, mscLpE1ChanCommentText=mscLpE1ChanCommentText, mscLpE1ChanTcSigOneEntry=mscLpE1ChanTcSigOneEntry, mscLpX21ClockingSource=mscLpX21ClockingSource, mscLpJT2StatsEntry=mscLpJT2StatsEntry, mscLpE1AudioRowStatusEntry=mscLpE1AudioRowStatusEntry, mscLpSdhPathCustomerIdentifier=mscLpSdhPathCustomerIdentifier, mscLpDS3LineLosSec=mscLpDS3LineLosSec, mscLpE3LineFailures=mscLpE3LineFailures, mscLpDS1TestElapsedTime=mscLpDS1TestElapsedTime, mscLpE3TestRowStatusEntry=mscLpE3TestRowStatusEntry, mscLpJT2UnknownStatus=mscLpJT2UnknownStatus, mscLpDS3TestRowStatusTable=mscLpDS3TestRowStatusTable, mscLpJT2UnavailSec=mscLpJT2UnavailSec, mscLpDS3DS1ChanTestSetupEntry=mscLpDS3DS1ChanTestSetupEntry, mscLpE1ChanTcStorageType=mscLpE1ChanTcStorageType, mscLpSdhTestOperationalState=mscLpSdhTestOperationalState, mscLpSdhPathCellUncorrectableHecErrors=mscLpSdhPathCellUncorrectableHecErrors, mscLpEngDsOvAgentQueueSize=mscLpEngDsOvAgentQueueSize, mscLpSdhTestComponentName=mscLpSdhTestComponentName, mscLpE3IfEntryTable=mscLpE3IfEntryTable, mscLpJT2RowStatusEntry=mscLpJT2RowStatusEntry, mscLpDS3LosAlarm=mscLpDS3LosAlarm, mscLpDS3DS1TestBytesRx=mscLpDS3DS1TestBytesRx, mscLpMemoryCapacityValue=mscLpMemoryCapacityValue, mscLpDS3OperTable=mscLpDS3OperTable, mscLpE3LinkAlarmActivationThreshold=mscLpE3LinkAlarmActivationThreshold, mscLpDS3DS1ChanCellLcdAlarm=mscLpDS3DS1ChanCellLcdAlarm, mscLpMainCard=mscLpMainCard, mscLpDS1ChanTestType=mscLpDS1ChanTestType, mscLpDS3DS1ChanTimeslotDataRate=mscLpDS3DS1ChanTimeslotDataRate, mscLpE1ChanFlmProvEntry=mscLpE1ChanFlmProvEntry, mscLpDS3TxIdle=mscLpDS3TxIdle, mscLpDS3DS1AvailabilityStatus=mscLpDS3DS1AvailabilityStatus, mscLpDS1ChanRowStatusEntry=mscLpDS1ChanRowStatusEntry, mscLpSonetPathPathFailures=mscLpSonetPathPathFailures, mscLpSdhFarEndLineSevErroredSec=mscLpSdhFarEndLineSevErroredSec, mscLpSonetSectSevErroredSec=mscLpSonetSectSevErroredSec, mscLpDS3DS1ErroredSec=mscLpDS3DS1ErroredSec, mscLpDS3DS1TestDisplayInterval=mscLpDS3DS1TestDisplayInterval, mscLpSdhPathIndex=mscLpSdhPathIndex, mscLpHssiSnmpOperStatus=mscLpHssiSnmpOperStatus, mscLpE3CellCorrectableHeaderErrors=mscLpE3CellCorrectableHeaderErrors, mscLpDS3DS1ChanCidDataTable=mscLpDS3DS1ChanCidDataTable, mscLpE1ChanTestBitErrorRate=mscLpE1ChanTestBitErrorRate, mscLpDS1=mscLpDS1, mscLpSonetPathPathUnavailSec=mscLpSonetPathPathUnavailSec, mscLpSonetTestFrmPatternType=mscLpSonetTestFrmPatternType, mscLpDS1ChanCellLcdAlarm=mscLpDS1ChanCellLcdAlarm, mscLpSdhPathCidDataTable=mscLpSdhPathCidDataTable, mscLpDS3DS1ChanTcSignalOneDuration=mscLpDS3DS1ChanTcSignalOneDuration, mscLpSdhPathApplicationFramerName=mscLpSdhPathApplicationFramerName, mscLpSonetPathCellComponentName=mscLpSonetPathCellComponentName, mscLpJT2Cell=mscLpJT2Cell, mscLpE1AlarmStatus=mscLpE1AlarmStatus, mscLpSonetAdminInfoTable=mscLpSonetAdminInfoTable, mscLpX21TestBitsTx=mscLpX21TestBitsTx, mscLpE1ChanTcRowStatus=mscLpE1ChanTcRowStatus, mscLpJT2TestBytesTx=mscLpJT2TestBytesTx, mscLpSdhPathControlStatus=mscLpSdhPathControlStatus, mscLpSonetTestCauseOfTermination=mscLpSonetTestCauseOfTermination, mscLpE3CellStorageType=mscLpE3CellStorageType, mscLpDS3DS1ChanCustomerIdentifier=mscLpDS3DS1ChanCustomerIdentifier, mscLpE1TestResultsTable=mscLpE1TestResultsTable, mscLpDS3DS1ChanTestBitsTx=mscLpDS3DS1ChanTestBitsTx, mscLpV35StateTable=mscLpV35StateTable, mscLpDS3DS1AdminState=mscLpDS3DS1AdminState, mscLpE1TestAdminState=mscLpE1TestAdminState, mscLpDS3DS1ChanIfEntryTable=mscLpDS3DS1ChanIfEntryTable, mscLpSonetRowStatusEntry=mscLpSonetRowStatusEntry, mscLpSdhPathCellOperEntry=mscLpSdhPathCellOperEntry, mscLpDS3OperStatusEntry=mscLpDS3OperStatusEntry, mscLpDS3PlcpFarEndErrorFreeSec=mscLpDS3PlcpFarEndErrorFreeSec, mscLpDS3DS1ChanTcStorageType=mscLpDS3DS1ChanTcStorageType, mscLpE1CidDataEntry=mscLpE1CidDataEntry, mscLpSonetRowStatusTable=mscLpSonetRowStatusTable, mscLpV35TestFrmRx=mscLpV35TestFrmRx, mscLpDS3DS1RowStatus=mscLpDS3DS1RowStatus, mscLpDS1TestBytesTx=mscLpDS1TestBytesTx, mscLpEngDs=mscLpEngDs, mscLpSonetPathFarEndPathUnavailSec=mscLpSonetPathFarEndPathUnavailSec, mscLpHssiTestBitErrorRate=mscLpHssiTestBitErrorRate, mscLpE1DspRowStatusTable=mscLpE1DspRowStatusTable, mscLpDS3TestSetupEntry=mscLpDS3TestSetupEntry, mscLpDS1ChanRowStatusTable=mscLpDS1ChanRowStatusTable, mscLpDS3DS1ChanRowStatus=mscLpDS3DS1ChanRowStatus, mscLpE1ChanOperStatusTable=mscLpE1ChanOperStatusTable, mscLpSdhTestStateEntry=mscLpSdhTestStateEntry, mscLpDS3DS1StandbyStatus=mscLpDS3DS1StandbyStatus, mscLpE3CustomerIdentifier=mscLpE3CustomerIdentifier, mscLpE3PlcpRxRaiAlarm=mscLpE3PlcpRxRaiAlarm, mscLpSdhPathFarEndPathSevErroredSec=mscLpSdhPathFarEndPathSevErroredSec, mscLpSonetProvTable=mscLpSonetProvTable, mscLpDS1ChanTcSigTwoValue=mscLpDS1ChanTcSigTwoValue, mscLpDS3DS1ChanTestTimeRemaining=mscLpDS3DS1ChanTestTimeRemaining, mscLpSdhPathCellRowStatus=mscLpSdhPathCellRowStatus, mscLpX21TestIndex=mscLpX21TestIndex, mscLpDS1CommentText=mscLpDS1CommentText, mscLpSonetLosAlarm=mscLpSonetLosAlarm, mscLpE1RowStatusEntry=mscLpE1RowStatusEntry, mscLpDS3RowStatusEntry=mscLpDS3RowStatusEntry, mscLpSdh=mscLpSdh, mscLpSdhIndex=mscLpSdhIndex, mscLpE1TestResultsEntry=mscLpE1TestResultsEntry, mscLpDS3DS1ChanTcRowStatus=mscLpDS3DS1ChanTcRowStatus, mscLpV35CustomerIdentifier=mscLpV35CustomerIdentifier, mscLpSonetPathIfAdminStatus=mscLpSonetPathIfAdminStatus, mscLpSonetAlarmStatus=mscLpSonetAlarmStatus, mscLpDS1ChanTcComponentName=mscLpDS1ChanTcComponentName, mscLpX21Vendor=mscLpX21Vendor, mscLpDS1ChanTestBitErrorRate=mscLpDS1ChanTestBitErrorRate, mscLpE3StateEntry=mscLpE3StateEntry, mscLpSdhTestElapsedTime=mscLpSdhTestElapsedTime, mscLpDS3PlcpIndex=mscLpDS3PlcpIndex, mscLpJT2TestResultsEntry=mscLpJT2TestResultsEntry, mscLpJT2TestUsageState=mscLpJT2TestUsageState, mscLpDS1ErrorFreeSec=mscLpDS1ErrorFreeSec, mscLpE3ClockingSource=mscLpE3ClockingSource, mscLpSdhLosAlarm=mscLpSdhLosAlarm, mscLpSdhPathUsageState=mscLpSdhPathUsageState, mscLpJT2CellUncorrectableHecErrors=mscLpJT2CellUncorrectableHecErrors, mscLpE3Mapping=mscLpE3Mapping, mscLpJT2CellRowStatusEntry=mscLpJT2CellRowStatusEntry, mscLpE1TestCustomizedPattern=mscLpE1TestCustomizedPattern, mscLpE3PlcpFarEndSevErroredSec=mscLpE3PlcpFarEndSevErroredSec, mscLpDS3TestDuration=mscLpDS3TestDuration, mscLpDS3DS1TestFrmPatternType=mscLpDS3DS1TestFrmPatternType, mscLpE3G832UnexpectedPayloadType=mscLpE3G832UnexpectedPayloadType, mscLpE3CellCorrectSingleBitHeaderErrors=mscLpE3CellCorrectSingleBitHeaderErrors, mscLpSonetFarEndLineErroredSec=mscLpSonetFarEndLineErroredSec, mscLpSdhLineAisSec=mscLpSdhLineAisSec, logicalProcessorCapabilitiesCA=logicalProcessorCapabilitiesCA, mscLpE1ChanTcComponentName=mscLpE1ChanTcComponentName, mscLpDS1IfIndex=mscLpDS1IfIndex, mscLpDS3DS1ChanProvEntry=mscLpDS3DS1ChanProvEntry, mscLpDS3PlcpSevErroredSec=mscLpDS3PlcpSevErroredSec, mscLpDS3PathSevErroredSec=mscLpDS3PathSevErroredSec, mscLpDS3DS1CidDataTable=mscLpDS3DS1CidDataTable, mscLpE1TestOperationalState=mscLpE1TestOperationalState, mscLpE1DspRowStatusEntry=mscLpE1DspRowStatusEntry, mscLpE3G832RowStatusEntry=mscLpE3G832RowStatusEntry, mscLpV35DteDataClockSource=mscLpV35DteDataClockSource, mscLpSdhPathCellRowStatusEntry=mscLpSdhPathCellRowStatusEntry, mscLpSonetPathComponentName=mscLpSonetPathComponentName, mscLpSonetPathStateTable=mscLpSonetPathStateTable, mscLpSdhLineSevErroredSec=mscLpSdhLineSevErroredSec, mscLpDS3TestBitErrorRate=mscLpDS3TestBitErrorRate, mscLpJT2OperEntry=mscLpJT2OperEntry, mscLpE1ChanTestRowStatus=mscLpE1ChanTestRowStatus, mscLpDS1ChanProvEntry=mscLpDS1ChanProvEntry, mscLpDS1ChanCellSevErroredSec=mscLpDS1ChanCellSevErroredSec, mscLpDS1ChanTcSigTwoEntry=mscLpDS1ChanTcSigTwoEntry, mscLpDS3CBitStorageType=mscLpDS3CBitStorageType, mscLpX21TestFrmTx=mscLpX21TestFrmTx, mscLpE3G832FarEndErrorFreeSec=mscLpE3G832FarEndErrorFreeSec, mscLpDS1OperationalState=mscLpDS1OperationalState, mscLpDS1ChanAlarmStatus=mscLpDS1ChanAlarmStatus, mscLpE1ChanTcSigTwoEntry=mscLpE1ChanTcSigTwoEntry, mscLpE1TestFrmRx=mscLpE1TestFrmRx, mscLpSonetPathCellScrambleCellPayload=mscLpSonetPathCellScrambleCellPayload, mscLpDS3DS1ChanTcEgressConditioning=mscLpDS3DS1ChanTcEgressConditioning, mscLpX21TestBitErrorRate=mscLpX21TestBitErrorRate, mscLpSdhStorageType=mscLpSdhStorageType, mscLpDS1TestUsageState=mscLpDS1TestUsageState, mscLpSdhPathAlarmStatus=mscLpSdhPathAlarmStatus, mscLpSonetPathAdminState=mscLpSonetPathAdminState, mscLpDS3DS1ChanCellSevErroredSec=mscLpDS3DS1ChanCellSevErroredSec, mscLpDS1ChanAdminState=mscLpDS1ChanAdminState, mscLpDS3DS1ChanSnmpOperStatus=mscLpDS3DS1ChanSnmpOperStatus, mscLpE1ChanCellLcdAlarm=mscLpE1ChanCellLcdAlarm, mscLpDS3CBitStatsEntry=mscLpDS3CBitStatsEntry, mscLpDS1ChanOperTable=mscLpDS1ChanOperTable, mscLpE1ChanTcSigTwoIndex=mscLpE1ChanTcSigTwoIndex, mscLpDS3PlcpRowStatusEntry=mscLpDS3PlcpRowStatusEntry, mscLpJT2StatsTable=mscLpJT2StatsTable, mscLpV35TestSetupEntry=mscLpV35TestSetupEntry, mscLpE3SnmpOperStatus=mscLpE3SnmpOperStatus, mscLpDS1SnmpOperStatus=mscLpDS1SnmpOperStatus, mscLpJT2TestStorageType=mscLpJT2TestStorageType, mscLpSonetAvailabilityStatus=mscLpSonetAvailabilityStatus, mscLpEngComponentName=mscLpEngComponentName, mscLpJT2CidDataTable=mscLpJT2CidDataTable, mscLpE1ChanStateTable=mscLpE1ChanStateTable, mscLpE3G832TrailTraceExpected=mscLpE3G832TrailTraceExpected, mscLpE3PlcpRowStatus=mscLpE3PlcpRowStatus, mscLpV35TestPurpose=mscLpV35TestPurpose, mscLpDS1ChanTcSigTwoTable=mscLpDS1ChanTcSigTwoTable, mscLpDS1TestSetupTable=mscLpDS1TestSetupTable, mscLpX21AdminInfoEntry=mscLpX21AdminInfoEntry, mscLpE1ChanFlmABitMonitoring=mscLpE1ChanFlmABitMonitoring, mscLpIndex=mscLpIndex, mscLpE3RxAisAlarm=mscLpE3RxAisAlarm, mscLpOperationalState=mscLpOperationalState, mscLpDS1ChanTest=mscLpDS1ChanTest, mscLpEngDsOvComponentName=mscLpEngDsOvComponentName, mscLpDS3DS1TestTimeRemaining=mscLpDS3DS1TestTimeRemaining, mscLpSdhPathOperEntry=mscLpSdhPathOperEntry, mscLpDS3TestBitsRx=mscLpDS3TestBitsRx, mscLpDS3AvailabilityStatus=mscLpDS3AvailabilityStatus, mscLpE1SevErroredFrmSec=mscLpE1SevErroredFrmSec, mscLpE3ProvTable=mscLpE3ProvTable, mscLpSdhIfIndex=mscLpSdhIfIndex, mscLpE1ChanTestPurpose=mscLpE1ChanTestPurpose, mscLpX21TestAdminState=mscLpX21TestAdminState, mscLpE1ChanTcOpTable=mscLpE1ChanTcOpTable, mscLpSdhTestPurpose=mscLpSdhTestPurpose, mscLpDS3DS1ChanUnknownStatus=mscLpDS3DS1ChanUnknownStatus, mscLpE1ChanProvEntry=mscLpE1ChanProvEntry, mscLpHssiOperStatusTable=mscLpHssiOperStatusTable, mscLpDS3DS1OperEntry=mscLpDS3DS1OperEntry, mscLpDS3IfIndex=mscLpDS3IfIndex, mscLpSonetStatsEntry=mscLpSonetStatsEntry, mscLpE3TestAdminState=mscLpE3TestAdminState, mscLpDS3CBitRowStatus=mscLpDS3CBitRowStatus, mscLpSdhRowStatusTable=mscLpSdhRowStatusTable, mscLpDS3TestElapsedTime=mscLpDS3TestElapsedTime, mscLpDS1DspIndex=mscLpDS1DspIndex, mscLpDS3DS1ChanAvailabilityStatus=mscLpDS3DS1ChanAvailabilityStatus, mscLpDS1ChanTestUsageState=mscLpDS1ChanTestUsageState, mscLpDS1ChanTestFrmSize=mscLpDS1ChanTestFrmSize, mscLpV35UsageState=mscLpV35UsageState, mscLpDS1AudioRowStatus=mscLpDS1AudioRowStatus, mscLpX21TestFrmSize=mscLpX21TestFrmSize, mscLpE3LineErroredSec=mscLpE3LineErroredSec, mscLpDS3CidDataEntry=mscLpDS3CidDataEntry, mscLpDS3Test=mscLpDS3Test, mscLpSdhPathCellCorrectableHeaderErrors=mscLpSdhPathCellCorrectableHeaderErrors, mscLpSdhTestRowStatus=mscLpSdhTestRowStatus, mscLpX21RowStatusEntry=mscLpX21RowStatusEntry, mscLpDS3TestSetupTable=mscLpDS3TestSetupTable, mscLpSdhTest=mscLpSdhTest, mscLpDS3StateTable=mscLpDS3StateTable, mscLpDS1SevErroredFrmSec=mscLpDS1SevErroredFrmSec, mscLpSonetOperationalState=mscLpSonetOperationalState, mscLpJT2TestRowStatusTable=mscLpJT2TestRowStatusTable, mscLpV35StandbyStatus=mscLpV35StandbyStatus, mscLpSdhPathFarEndPathErroredSec=mscLpSdhPathFarEndPathErroredSec)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpE1DspComponentName=mscLpE1DspComponentName, mscLpSdhIfEntryEntry=mscLpSdhIfEntryEntry, mscLpMemoryUsageAvgTable=mscLpMemoryUsageAvgTable, mscLpDS3DS1ChanTestRowStatus=mscLpDS3DS1ChanTestRowStatus, mscLpE1ChanFlmRowStatus=mscLpE1ChanFlmRowStatus, mscLpV35TestBitsTx=mscLpV35TestBitsTx, mscLpSdhSectCodeViolations=mscLpSdhSectCodeViolations, mscLpDS3DS1ClockingSource=mscLpDS3DS1ClockingSource, mscLpDS3DS1ChanTcProvEntry=mscLpDS3DS1ChanTcProvEntry, mscLpJT2TestAdminState=mscLpJT2TestAdminState, mscLpX21TestStateEntry=mscLpX21TestStateEntry, mscLpSdhTestFrmPatternType=mscLpSdhTestFrmPatternType, mscLpX21TestOperationalState=mscLpX21TestOperationalState, mscLpDS3PlcpCodingViolations=mscLpDS3PlcpCodingViolations, mscLpCpuUtilAvg=mscLpCpuUtilAvg, mscLpDS3TestCustomizedPattern=mscLpDS3TestCustomizedPattern, mscLpSdhOperStatusEntry=mscLpSdhOperStatusEntry, mscLpE3CellOperTable=mscLpE3CellOperTable, mscLpEngRowStatusEntry=mscLpEngRowStatusEntry, mscLpDS3TestRowStatusEntry=mscLpDS3TestRowStatusEntry, mscLpE1ChanControlStatus=mscLpE1ChanControlStatus, mscLpV35EnableDynamicSpeed=mscLpV35EnableDynamicSpeed, mscLpDS3IfEntryEntry=mscLpDS3IfEntryEntry, mscLpDS3DS1ChanTestDisplayInterval=mscLpDS3DS1ChanTestDisplayInterval, mscLpSdhPathStatsEntry=mscLpSdhPathStatsEntry, mscLpDS3RowStatus=mscLpDS3RowStatus, mscLpDS3CidDataTable=mscLpDS3CidDataTable, mscLpDS3CellProvEntry=mscLpDS3CellProvEntry, mscLpDS3DS1ChanTcIngressConditioning=mscLpDS3DS1ChanTcIngressConditioning, mscLpE1ChanTestUsageState=mscLpE1ChanTestUsageState, mscLpE3PlcpLofAlarm=mscLpE3PlcpLofAlarm, mscLpSonetPathFarEndPathErroredSec=mscLpSonetPathFarEndPathErroredSec, mscLpE3PlcpFarEndUnavailableSec=mscLpE3PlcpFarEndUnavailableSec, mscLpSonetVendor=mscLpSonetVendor, mscLpX21IfEntryTable=mscLpX21IfEntryTable, mscLpDS3DS1TestPurpose=mscLpDS3DS1TestPurpose, mscLpDS3DS1ChanTestBitErrorRate=mscLpDS3DS1ChanTestBitErrorRate, mscLpDS3DS1TestFrmRx=mscLpDS3DS1TestFrmRx, mscLpSonetPathPathAisLopSec=mscLpSonetPathPathAisLopSec, mscLpE1ChanFlmRowStatusEntry=mscLpE1ChanFlmRowStatusEntry, mscLpE3OperStatusTable=mscLpE3OperStatusTable, mscLpSdhIfEntryTable=mscLpSdhIfEntryTable, mscLpE1ChanProvTable=mscLpE1ChanProvTable, mscLpX21ApplicationFramerName=mscLpX21ApplicationFramerName, mscLpJT2ClockingSource=mscLpJT2ClockingSource, mscLpSonetPathCellStatsEntry=mscLpSonetPathCellStatsEntry, mscLpAlarmStatus=mscLpAlarmStatus, mscLpJT2AdminInfoEntry=mscLpJT2AdminInfoEntry, mscLpDS3DS1OperTable=mscLpDS3DS1OperTable, mscLpDS1AdminState=mscLpDS1AdminState, mscLpCustomerIdentifier=mscLpCustomerIdentifier, mscLpE3G832FarEndUnavailSec=mscLpE3G832FarEndUnavailSec, mscLpE3TestOperationalState=mscLpE3TestOperationalState, mscLpE1SendRaiOnAis=mscLpE1SendRaiOnAis, mscLpDS3DS1TestRowStatusTable=mscLpDS3DS1TestRowStatusTable, mscLpSdhPathTxAis=mscLpSdhPathTxAis, mscLpDS3DS1ChanCellStatsTable=mscLpDS3DS1ChanCellStatsTable, mscLpDS1ZeroCoding=mscLpDS1ZeroCoding, mscLpE1ChanCellScrambleCellPayload=mscLpE1ChanCellScrambleCellPayload, mscLpDS3DS1ChanComponentName=mscLpDS3DS1ChanComponentName, mscLpDS3CBitFarEndSefAisSec=mscLpDS3CBitFarEndSefAisSec, mscLpJT2TestFrmSize=mscLpJT2TestFrmSize, mscLpDS3DS1RxAisAlarm=mscLpDS3DS1RxAisAlarm, mscLpE1ChanTestCauseOfTermination=mscLpE1ChanTestCauseOfTermination, mscLpDS1TestBitsRx=mscLpDS1TestBitsRx, mscLpE3PlcpErroredSec=mscLpE3PlcpErroredSec, mscLpE1AdminState=mscLpE1AdminState, mscLpHssi=mscLpHssi, mscLpE1TestStorageType=mscLpE1TestStorageType, mscLpE1RowStatus=mscLpE1RowStatus, mscLpDS3TestDisplayInterval=mscLpDS3TestDisplayInterval, mscLpE1MultifrmLofAlarm=mscLpE1MultifrmLofAlarm, mscLpDS1TestBitErrorRate=mscLpDS1TestBitErrorRate, mscLpDS1StateEntry=mscLpDS1StateEntry, mscLpHssiTestBytesTx=mscLpHssiTestBytesTx, mscLpE1ChanStandbyStatus=mscLpE1ChanStandbyStatus, mscLpSdhSectLosSec=mscLpSdhSectLosSec, mscLpDS1ChanCellIndex=mscLpDS1ChanCellIndex, mscLpHssiAdminInfoTable=mscLpHssiAdminInfoTable, mscLpE1StatsTable=mscLpE1StatsTable, mscLpDS1TestErroredFrmRx=mscLpDS1TestErroredFrmRx, mscLpE3PlcpSevErroredSec=mscLpE3PlcpSevErroredSec, mscLpE1ChanFlmProvTable=mscLpE1ChanFlmProvTable, mscLpDS3StandbyStatus=mscLpDS3StandbyStatus, mscLpV35AlarmStatus=mscLpV35AlarmStatus, mscLpJT2LofAlarm=mscLpJT2LofAlarm, mscLpHssiAlarmStatus=mscLpHssiAlarmStatus, mscLpDS1ChanTcRowStatus=mscLpDS1ChanTcRowStatus, mscLpX21TestUsageState=mscLpX21TestUsageState, mscLpDS3CellStatsTable=mscLpDS3CellStatsTable, mscLpE1AvailabilityStatus=mscLpE1AvailabilityStatus, mscLpSdhPathPathErroredSec=mscLpSdhPathPathErroredSec, mscLpMainCardStatus=mscLpMainCardStatus, mscLpV35TestBytesRx=mscLpV35TestBytesRx, mscLpDS3DS1SevErroredSec=mscLpDS3DS1SevErroredSec, mscLpJT2FrameErrors=mscLpJT2FrameErrors, mscLpDS1ChanTcSigOneIndex=mscLpDS1ChanTcSigOneIndex, mscLpDS3PlcpOperationalTable=mscLpDS3PlcpOperationalTable, mscLpV35AdminInfoTable=mscLpV35AdminInfoTable, mscLpDS3CellCorrectSingleBitHeaderErrors=mscLpDS3CellCorrectSingleBitHeaderErrors, mscLpSdhTestFrmSize=mscLpSdhTestFrmSize, mscLpSonetTestSetupEntry=mscLpSonetTestSetupEntry, mscLpJT2StorageType=mscLpJT2StorageType, mscLpMemoryUsageAvgMaxEntry=mscLpMemoryUsageAvgMaxEntry, mscLpX21TestSetupTable=mscLpX21TestSetupTable, mscLpSdhPathFarEndPathUnavailSec=mscLpSdhPathFarEndPathUnavailSec, mscLpControlStatus=mscLpControlStatus, mscLpDS3DS1ChanTestDataStartDelay=mscLpDS3DS1ChanTestDataStartDelay, mscLpDS1UnavailSec=mscLpDS1UnavailSec, mscLpDS1IfAdminStatus=mscLpDS1IfAdminStatus, mscLpV35ApplicationFramerName=mscLpV35ApplicationFramerName, mscLpJT2LineLength=mscLpJT2LineLength, mscLpSonetTestFrmRx=mscLpSonetTestFrmRx, mscLpSdhTestFrmRx=mscLpSdhTestFrmRx, mscLpSdhAvailabilityStatus=mscLpSdhAvailabilityStatus, mscLpMemoryUsageAvgMinIndex=mscLpMemoryUsageAvgMinIndex, mscLpSonetCommentText=mscLpSonetCommentText, mscLpDS3StatsTable=mscLpDS3StatsTable, mscLpSdhPathComponentName=mscLpSdhPathComponentName, mscLpX21RowStatusTable=mscLpX21RowStatusTable, mscLpX21TestErroredFrmRx=mscLpX21TestErroredFrmRx, mscLpCidDataTable=mscLpCidDataTable, mscLpDS3DS1UnknownStatus=mscLpDS3DS1UnknownStatus, mscLpDS1ChanTestFrmTx=mscLpDS1ChanTestFrmTx, mscLpDS1TestStateEntry=mscLpDS1TestStateEntry, mscLpDS3PlcpLofAlarm=mscLpDS3PlcpLofAlarm, mscLpJT2TestFrmPatternType=mscLpJT2TestFrmPatternType, mscLpHssiApplicationFramerName=mscLpHssiApplicationFramerName, mscLpE1TestFrmPatternType=mscLpE1TestFrmPatternType, mscLpSonetPathCellReceiveCellUtilization=mscLpSonetPathCellReceiveCellUtilization, mscLpSonetTestRowStatusTable=mscLpSonetTestRowStatusTable, mscLpE1LineType=mscLpE1LineType, mscLpE1ChanTestFrmSize=mscLpE1ChanTestFrmSize, mscLpDS3RxAisAlarm=mscLpDS3RxAisAlarm, mscLpHssiTestElapsedTime=mscLpHssiTestElapsedTime, mscLpV35CommentText=mscLpV35CommentText, mscLpX21TestResultsTable=mscLpX21TestResultsTable, mscLpDS3CBitLoopbackAtFarEndRequested=mscLpDS3CBitLoopbackAtFarEndRequested, mscLpHssiLineSpeed=mscLpHssiLineSpeed, mscLpDS3DS1TestCauseOfTermination=mscLpDS3DS1TestCauseOfTermination, mscLpDS3TestStateEntry=mscLpDS3TestStateEntry, mscLpX21StorageType=mscLpX21StorageType, mscLpSdhLineFailures=mscLpSdhLineFailures, mscLpE1ChanUnknownStatus=mscLpE1ChanUnknownStatus, mscLpDS1ChanTcProvTable=mscLpDS1ChanTcProvTable, mscLpJT2ErroredSec=mscLpJT2ErroredSec, mscLpE3StateTable=mscLpE3StateTable, mscLpX21OperStatusTable=mscLpX21OperStatusTable, mscLpDS1ChanCustomerIdentifier=mscLpDS1ChanCustomerIdentifier, mscLpSonetTestStorageType=mscLpSonetTestStorageType, mscLpSdhStatsTable=mscLpSdhStatsTable, mscLpDS1DspComponentName=mscLpDS1DspComponentName, mscLpDS3=mscLpDS3, mscLpDS3PlcpErroredSec=mscLpDS3PlcpErroredSec, mscLpDS3DS1TestDuration=mscLpDS3DS1TestDuration, mscLpJT2TestDataStartDelay=mscLpJT2TestDataStartDelay, mscLpV35ComponentName=mscLpV35ComponentName, mscLpE3G832TrailTraceTransmitted=mscLpE3G832TrailTraceTransmitted, mscLpSonetTestDuration=mscLpSonetTestDuration, mscLpDS3DS1ChanOperStatusTable=mscLpDS3DS1ChanOperStatusTable, mscLpEngDsRowStatusEntry=mscLpEngDsRowStatusEntry, mscLpJT2TestPurpose=mscLpJT2TestPurpose, mscLpX21DataXferStateChanges=mscLpX21DataXferStateChanges, mscLpE3TestComponentName=mscLpE3TestComponentName, mscLpX21ProceduralStatus=mscLpX21ProceduralStatus, mscLpE1ChanTestDuration=mscLpE1ChanTestDuration, mscLpProvEntry=mscLpProvEntry, mscLpSdhProvTable=mscLpSdhProvTable, mscLpDS1RowStatusEntry=mscLpDS1RowStatusEntry, mscLpV35ProceduralStatus=mscLpV35ProceduralStatus, mscLpDS1ChanTcSignalOneDuration=mscLpDS1ChanTcSignalOneDuration, mscLpDS3DS1IfEntryEntry=mscLpDS3DS1IfEntryEntry, mscLpDS1ChanTestRowStatusEntry=mscLpDS1ChanTestRowStatusEntry, mscLpJT2AdminInfoTable=mscLpJT2AdminInfoTable, mscLpDS3DS1ChanAdminInfoEntry=mscLpDS3DS1ChanAdminInfoEntry, mscLpV35TestAdminState=mscLpV35TestAdminState, mscLpJT2TxAisPhysicalAlarm=mscLpJT2TxAisPhysicalAlarm, mscLpE1TestPurpose=mscLpE1TestPurpose, mscLpDS1ChanTestComponentName=mscLpDS1ChanTestComponentName, mscLpE3OperEntry=mscLpE3OperEntry, mscLpE3LosAlarm=mscLpE3LosAlarm, mscLpSonetPathCellRowStatus=mscLpSonetPathCellRowStatus, mscLpE3ApplicationFramerName=mscLpE3ApplicationFramerName, mscLpHssiComponentName=mscLpHssiComponentName, mscLpSonetPathCustomerIdentifier=mscLpSonetPathCustomerIdentifier, mscLpDS3DS1ChanControlStatus=mscLpDS3DS1ChanControlStatus, mscLpV35AdminInfoEntry=mscLpV35AdminInfoEntry, mscLpEngDsOvProvTable=mscLpEngDsOvProvTable, mscLpDS1ChanTc=mscLpDS1ChanTc, mscLpJT2CellSevErroredSec=mscLpJT2CellSevErroredSec, mscLpDS3DS1ChanProvTable=mscLpDS3DS1ChanProvTable, mscLpDS3DS1CrcErrors=mscLpDS3DS1CrcErrors, mscLpE1ChanRowStatusTable=mscLpE1ChanRowStatusTable, mscLpE3CellOperEntry=mscLpE3CellOperEntry, mscLpE1AdminInfoEntry=mscLpE1AdminInfoEntry, mscLpDS1ChanStateEntry=mscLpDS1ChanStateEntry, mscLpE1ChanCustomerIdentifier=mscLpE1ChanCustomerIdentifier, mscLpE1ChanCellCorrectSingleBitHeaderErrors=mscLpE1ChanCellCorrectSingleBitHeaderErrors, mscLpMsgBlockUsage=mscLpMsgBlockUsage, mscLpSonetSectSevErroredFrmSec=mscLpSonetSectSevErroredFrmSec, mscLpDS3DS1TestElapsedTime=mscLpDS3DS1TestElapsedTime, mscLpDS1TestResultsTable=mscLpDS1TestResultsTable, mscLpV35CidDataEntry=mscLpV35CidDataEntry, mscLpE1ChanFlmStorageType=mscLpE1ChanFlmStorageType, mscLpDS1ChanCellRowStatusEntry=mscLpDS1ChanCellRowStatusEntry, mscLpDS3CellProvTable=mscLpDS3CellProvTable, mscLpE1ChanCellStatsEntry=mscLpE1ChanCellStatsEntry, mscLpX21ComponentName=mscLpX21ComponentName, mscLpV35TestStateTable=mscLpV35TestStateTable, mscLpDS3DS1ChanTestBytesRx=mscLpDS3DS1ChanTestBytesRx, mscLpE1ChanCellCorrectableHeaderErrors=mscLpE1ChanCellCorrectableHeaderErrors, mscLpSdhPathPathAisLopSec=mscLpSdhPathPathAisLopSec, mscLpV35AdminState=mscLpV35AdminState, mscLpE1ChanTestBitsRx=mscLpE1ChanTestBitsRx, mscLpDS3DS1ChanTcOpEntry=mscLpDS3DS1ChanTcOpEntry, mscLpDS3DS1ChanCellRowStatusEntry=mscLpDS3DS1ChanCellRowStatusEntry, mscLpE3LofAlarm=mscLpE3LofAlarm, mscLpE1ChanOperStatusEntry=mscLpE1ChanOperStatusEntry, mscLpSonetIndex=mscLpSonetIndex, mscLpDS3CellOperTable=mscLpDS3CellOperTable, mscLpE1StandbyStatus=mscLpE1StandbyStatus, mscLpDS3Index=mscLpDS3Index, mscLpDS3DS1ProvTable=mscLpDS3DS1ProvTable, mscLpDS1ChanIndex=mscLpDS1ChanIndex, mscLpDS1AudioIndex=mscLpDS1AudioIndex, mscLpE3TestTimeRemaining=mscLpE3TestTimeRemaining, mscLpE3UsageState=mscLpE3UsageState, mscLpE1Vendor=mscLpE1Vendor, mscLpSdhSectSevErroredFrmSec=mscLpSdhSectSevErroredFrmSec, mscLpDS3DS1IfEntryTable=mscLpDS3DS1IfEntryTable, mscLpSonetPathPathErroredSec=mscLpSonetPathPathErroredSec, mscLpDS3DS1TestErroredFrmRx=mscLpDS3DS1TestErroredFrmRx, mscLpE1ChanCellAlarmActDelay=mscLpE1ChanCellAlarmActDelay, mscLpDS3DS1ChanTestFrmRx=mscLpDS3DS1ChanTestFrmRx, mscLpEngDsOvRowStatus=mscLpEngDsOvRowStatus, mscLpSdhPathFarEndPathCodeViolations=mscLpSdhPathFarEndPathCodeViolations, mscLpDS1ChanTcStorageType=mscLpDS1ChanTcStorageType, mscLpSdhCustomerIdentifier=mscLpSdhCustomerIdentifier, mscLpDS3DS1ChanOperStatusEntry=mscLpDS3DS1ChanOperStatusEntry, mscLpRestartOnCpSwitch=mscLpRestartOnCpSwitch, mscLpDS3SnmpOperStatus=mscLpDS3SnmpOperStatus, mscLpE3PlcpSevErroredFramingSec=mscLpE3PlcpSevErroredFramingSec, mscLpJT2ProvTable=mscLpJT2ProvTable, mscLpDS1RowStatus=mscLpDS1RowStatus, mscLpDS3TestPurpose=mscLpDS3TestPurpose, mscLpDS1ChanTcOpEntry=mscLpDS1ChanTcOpEntry, mscLpHssiTestOperationalState=mscLpHssiTestOperationalState, mscLpSdhUnusableTxClockRefAlarm=mscLpSdhUnusableTxClockRefAlarm, mscLpStateEntry=mscLpStateEntry, mscLpDS1ChanTcEgressConditioning=mscLpDS1ChanTcEgressConditioning, mscLpDS3DS1IfAdminStatus=mscLpDS3DS1IfAdminStatus, mscLpDS3DS1AlarmStatus=mscLpDS3DS1AlarmStatus, mscLpSonetOperStatusEntry=mscLpSonetOperStatusEntry, mscLpE1TestBytesRx=mscLpE1TestBytesRx)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpE3Index=mscLpE3Index, mscLpE3OperStatusEntry=mscLpE3OperStatusEntry, mscLpE1ChanOperationalState=mscLpE1ChanOperationalState, mscLpSonetPathAlarmStatus=mscLpSonetPathAlarmStatus, mscLpDS3LineSevErroredSec=mscLpDS3LineSevErroredSec, mscLpE3ComponentName=mscLpE3ComponentName, mscLpE1TestRowStatus=mscLpE1TestRowStatus, mscLpSdhTxAis=mscLpSdhTxAis, mscLpHssiOperationalState=mscLpHssiOperationalState, mscLpE1AudioIndex=mscLpE1AudioIndex, mscLpE3PathCodeViolations=mscLpE3PathCodeViolations, mscLpE3OperationalState=mscLpE3OperationalState, mscLpDS3TestOperationalState=mscLpDS3TestOperationalState, mscLpDS3DS1ChanTcProvTable=mscLpDS3DS1ChanTcProvTable, mscLpE1ChanTestErroredFrmRx=mscLpE1ChanTestErroredFrmRx, mscLpSdhCidDataTable=mscLpSdhCidDataTable, mscLpDS1DspStorageType=mscLpDS1DspStorageType, mscLpDS3LineErroredSec=mscLpDS3LineErroredSec, mscLpDS1ChanIfIndex=mscLpDS1ChanIfIndex, mscLpJT2CustomerIdentifier=mscLpJT2CustomerIdentifier, mscLpDS3TestComponentName=mscLpDS3TestComponentName, mscLpSonetPathCidDataEntry=mscLpSonetPathCidDataEntry, mscLpV35LineSpeed=mscLpV35LineSpeed, mscLpE3PlcpRowStatusTable=mscLpE3PlcpRowStatusTable, mscLpE3G832StatsTable=mscLpE3G832StatsTable, mscLpV35OperStatusTable=mscLpV35OperStatusTable, mscLpDS3DS1LineType=mscLpDS3DS1LineType, mscLpE1ChanTestSetupTable=mscLpE1ChanTestSetupTable, mscLpE1ChanTcSignalOneDuration=mscLpE1ChanTcSignalOneDuration, mscLpE3CellIndex=mscLpE3CellIndex, mscLpE1Test=mscLpE1Test, mscLpE1OperTable=mscLpE1OperTable, mscLpJT2AdminState=mscLpJT2AdminState, mscLpDS3PlcpRowStatus=mscLpDS3PlcpRowStatus, mscLpE1ChanTimeslots=mscLpE1ChanTimeslots, mscLpDS1ChanCellStatsTable=mscLpDS1ChanCellStatsTable, mscLpE1ChanOperTable=mscLpE1ChanOperTable, mscLpE1ChanFlmIndex=mscLpE1ChanFlmIndex, mscLpEngDsStorageType=mscLpEngDsStorageType, mscLpHssiTestStorageType=mscLpHssiTestStorageType, mscLpE1CrcErrors=mscLpE1CrcErrors, mscLpHssiStorageType=mscLpHssiStorageType, mscLpE1ChanCellIndex=mscLpE1ChanCellIndex, mscLpE1ChanAdminState=mscLpE1ChanAdminState, mscLpDS1CidDataTable=mscLpDS1CidDataTable, mscLpSdhPathCellOperTable=mscLpSdhPathCellOperTable, mscLpDS3DS1StorageType=mscLpDS3DS1StorageType, mscLpDS3DS1RxRaiAlarm=mscLpDS3DS1RxRaiAlarm, mscLpDS3DS1TestResultsEntry=mscLpDS3DS1TestResultsEntry, mscLpE3CellComponentName=mscLpE3CellComponentName, mscLpSdhPathRxRfiAlarm=mscLpSdhPathRxRfiAlarm, mscLpSdhPathStateTable=mscLpSdhPathStateTable, mscLpHssiTest=mscLpHssiTest, mscLpDS3TestFrmTx=mscLpDS3TestFrmTx, mscLpV35RowStatusTable=mscLpV35RowStatusTable, mscLpX21StateTable=mscLpX21StateTable, mscLpDS1ChanTestBytesTx=mscLpDS1ChanTestBytesTx, mscLpSonetSectErroredSec=mscLpSonetSectErroredSec, mscLpJT2ProceduralStatus=mscLpJT2ProceduralStatus, mscLpMemoryUsageAvgMinTable=mscLpMemoryUsageAvgMinTable, mscLpDS1RunningTime=mscLpDS1RunningTime, mscLpDS3RowStatusTable=mscLpDS3RowStatusTable, mscLpE1ChanCellStorageType=mscLpE1ChanCellStorageType, mscLpSdhPathCellReceiveCellUtilization=mscLpSdhPathCellReceiveCellUtilization, mscLpX21TestType=mscLpX21TestType, mscLpDS3DS1ChanTestFrmPatternType=mscLpDS3DS1ChanTestFrmPatternType, mscLpSdhPathUnknownStatus=mscLpSdhPathUnknownStatus, mscLpHssiIfIndex=mscLpHssiIfIndex, mscLpE1ChanApplicationFramerName=mscLpE1ChanApplicationFramerName, mscLpLinkToApplicationsEntry=mscLpLinkToApplicationsEntry, mscLpX21TestPurpose=mscLpX21TestPurpose, mscLpJT2CellRowStatusTable=mscLpJT2CellRowStatusTable, mscLpHssiTestResultsTable=mscLpHssiTestResultsTable, mscLpE3TestStateEntry=mscLpE3TestStateEntry, mscLpJT2CommentText=mscLpJT2CommentText, mscLpDS3CBitStatsTable=mscLpDS3CBitStatsTable, mscLpE3PlcpRowStatusEntry=mscLpE3PlcpRowStatusEntry, mscLpDS1StandbyStatus=mscLpDS1StandbyStatus, mscLpDS1ChanTestResultsTable=mscLpDS1ChanTestResultsTable, mscLpE1ChanTcProvTable=mscLpE1ChanTcProvTable, mscLpHssiOperTable=mscLpHssiOperTable, mscLpJT2TestDisplayInterval=mscLpJT2TestDisplayInterval, mscLpDS3DS1TestStateTable=mscLpDS3DS1TestStateTable, mscLpE1=mscLpE1, mscLpSonetPath=mscLpSonetPath, mscLpDS3CBitRowStatusEntry=mscLpDS3CBitRowStatusEntry, mscLpJT2CellOperEntry=mscLpJT2CellOperEntry, mscLpSonetPathCellSevErroredSec=mscLpSonetPathCellSevErroredSec, mscLpE3G832FarEndCodeViolations=mscLpE3G832FarEndCodeViolations, mscLpHssiTestComponentName=mscLpHssiTestComponentName, mscLpDS1LofAlarm=mscLpDS1LofAlarm, mscLpE3G832Index=mscLpE3G832Index, mscLpSonetPathCellIndex=mscLpSonetPathCellIndex, mscLpSonetTestSetupTable=mscLpSonetTestSetupTable, mscLpJT2TestResultsTable=mscLpJT2TestResultsTable, mscLpDS1ChanTestFrmPatternType=mscLpDS1ChanTestFrmPatternType, mscLpE1ChanIfAdminStatus=mscLpE1ChanIfAdminStatus, mscLpSdhPathCellStorageType=mscLpSdhPathCellStorageType, mscLpLocalMsgBlockUsageMax=mscLpLocalMsgBlockUsageMax, mscLpEngDsComponentName=mscLpEngDsComponentName, mscLpJT2StateEntry=mscLpJT2StateEntry, mscLpEngIndex=mscLpEngIndex, mscLpSdhPathStatsTable=mscLpSdhPathStatsTable, mscLpE3ProceduralStatus=mscLpE3ProceduralStatus, mscLpDS1SevErroredSec=mscLpDS1SevErroredSec, mscLpE1IfAdminStatus=mscLpE1IfAdminStatus, mscLpSonetPathProvEntry=mscLpSonetPathProvEntry, mscLpE1TestDataStartDelay=mscLpE1TestDataStartDelay, mscLpSonetPathRxAisAlarm=mscLpSonetPathRxAisAlarm, mscLpDS1TestIndex=mscLpDS1TestIndex, mscLpJT2TestFrmRx=mscLpJT2TestFrmRx, mscLpX21RowStatus=mscLpX21RowStatus, mscLpE3PlcpOperationalEntry=mscLpE3PlcpOperationalEntry, mscLpEngRowStatus=mscLpEngRowStatus, mscLpDS3DS1ChanTestRowStatusEntry=mscLpDS3DS1ChanTestRowStatusEntry, mscLpE3CellProvTable=mscLpE3CellProvTable, mscLpE1RaiDeclareAlarmTime=mscLpE1RaiDeclareAlarmTime, mscLpHssiRowStatusTable=mscLpHssiRowStatusTable, mscLpX21TestResultsEntry=mscLpX21TestResultsEntry, mscLpSdhFarEndLineErroredSec=mscLpSdhFarEndLineErroredSec, mscLpX21TestStorageType=mscLpX21TestStorageType, mscLpDS1UsageState=mscLpDS1UsageState, mscLpDS3DS1ChanTcSigOneEntry=mscLpDS3DS1ChanTcSigOneEntry, mscLpMsgBlockCapacity=mscLpMsgBlockCapacity, mscLpDS3CBitFarEndCodeViolations=mscLpDS3CBitFarEndCodeViolations, mscLpSonetSectFailures=mscLpSonetSectFailures, mscLpSdhUsageState=mscLpSdhUsageState, mscLpJT2TestBytesRx=mscLpJT2TestBytesRx, mscLpV35TestFrmTx=mscLpV35TestFrmTx, mscLpX21OperEntry=mscLpX21OperEntry, mscLpJT2TestSetupTable=mscLpJT2TestSetupTable, mscLpDS3PlcpStorageType=mscLpDS3PlcpStorageType, mscLpE3PlcpFarEndCodingViolations=mscLpE3PlcpFarEndCodingViolations, mscLpMemoryUsageValue=mscLpMemoryUsageValue, mscLpDS3ClockingSource=mscLpDS3ClockingSource, mscLpE3G832FarEndSevErroredSec=mscLpE3G832FarEndSevErroredSec, mscLpE1ChanTcReplacementData=mscLpE1ChanTcReplacementData, mscLpSdhPathPathCodeViolations=mscLpSdhPathPathCodeViolations, mscLpX21ProvEntry=mscLpX21ProvEntry, mscLpSdhPathStateEntry=mscLpSdhPathStateEntry, mscLpE1ChanCellRowStatusEntry=mscLpE1ChanCellRowStatusEntry, mscLpDS3DS1SlipErrors=mscLpDS3DS1SlipErrors, mscLpDS3DS1TestIndex=mscLpDS3DS1TestIndex, mscLpDS3OperationalState=mscLpDS3OperationalState, mscLpE3TestCauseOfTermination=mscLpE3TestCauseOfTermination, mscLpE3TestDuration=mscLpE3TestDuration, mscLpSdhTestTimeRemaining=mscLpSdhTestTimeRemaining, mscLpE1SnmpOperStatus=mscLpE1SnmpOperStatus, mscLpHssiTestDuration=mscLpHssiTestDuration, mscLpSonetLineUnavailSec=mscLpSonetLineUnavailSec, mscLpE1ChanCell=mscLpE1ChanCell, mscLpJT2TestCauseOfTermination=mscLpJT2TestCauseOfTermination, mscLpE1ChanTestElapsedTime=mscLpE1ChanTestElapsedTime, mscLpJT2TestTimeRemaining=mscLpJT2TestTimeRemaining, mscLpE1ChanTcProvEntry=mscLpE1ChanTcProvEntry, mscLpE3TestBitsTx=mscLpE3TestBitsTx, mscLpDS1ChanTcSigOneTable=mscLpDS1ChanTcSigOneTable, mscLpDS1ChanTestRowStatusTable=mscLpDS1ChanTestRowStatusTable, mscLpE1ComponentName=mscLpE1ComponentName, mscLpSonetTestDataStartDelay=mscLpSonetTestDataStartDelay, mscLpDS1ChanCellCorrectableHeaderErrors=mscLpDS1ChanCellCorrectableHeaderErrors, mscLpDS3PlcpSevErroredFramingSec=mscLpDS3PlcpSevErroredFramingSec, mscLpE1StateEntry=mscLpE1StateEntry, mscLpJT2CellStatsEntry=mscLpJT2CellStatsEntry, mscLpDS1OperStatusTable=mscLpDS1OperStatusTable, mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors=mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors, mscLpE3TestDisplayInterval=mscLpE3TestDisplayInterval, mscLpE3G832FarEndErroredSec=mscLpE3G832FarEndErroredSec, mscLpDS1ChanCellReceiveCellUtilization=mscLpDS1ChanCellReceiveCellUtilization, mscLpX21IfEntryEntry=mscLpX21IfEntryEntry, mscLpDS3DS1ChanIfAdminStatus=mscLpDS3DS1ChanIfAdminStatus, mscLpE1Crc4Mode=mscLpE1Crc4Mode, mscLpDS3DS1ChanTestComponentName=mscLpDS3DS1ChanTestComponentName, mscLpDS1ProceduralStatus=mscLpDS1ProceduralStatus, mscLpV35TestType=mscLpV35TestType, mscLpJT2CidDataEntry=mscLpJT2CidDataEntry, mscLpHssiTestFrmPatternType=mscLpHssiTestFrmPatternType, mscLpDS3DS1TestAdminState=mscLpDS3DS1TestAdminState, mscLpV35LineState=mscLpV35LineState, mscLpDS1Vendor=mscLpDS1Vendor, mscLpE3StorageType=mscLpE3StorageType, mscLpE3TestResultsTable=mscLpE3TestResultsTable, mscLpJT2IfIndex=mscLpJT2IfIndex, mscLpE1ChanTestSetupEntry=mscLpE1ChanTestSetupEntry, mscLpE1OperEntry=mscLpE1OperEntry, mscLpX21TestComponentName=mscLpX21TestComponentName, mscLpX21AvailabilityStatus=mscLpX21AvailabilityStatus, mscLpX21TestDataStartDelay=mscLpX21TestDataStartDelay, mscLpSdhPathFarEndPathErrorFreeSec=mscLpSdhPathFarEndPathErrorFreeSec, mscLpSonetPathTxRdi=mscLpSonetPathTxRdi, mscLpDS3DS1ChanCellRowStatus=mscLpDS3DS1ChanCellRowStatus, mscLpDS1ChanTimeslotDataRate=mscLpDS1ChanTimeslotDataRate, mscLpDS3DS1ChanCommentText=mscLpDS3DS1ChanCommentText, mscLpSonetPathCellStorageType=mscLpSonetPathCellStorageType, mscLpDS3DS1ChanTestDuration=mscLpDS3DS1ChanTestDuration, mscLpDS3CellUncorrectableHecErrors=mscLpDS3CellUncorrectableHecErrors, mscLpDS3CellIndex=mscLpDS3CellIndex, mscLpEngDsOperEntry=mscLpEngDsOperEntry, mscLpSdhTestDisplayInterval=mscLpSdhTestDisplayInterval, mscLpEngDsOvRowStatusTable=mscLpEngDsOvRowStatusTable, mscLpSonetTxRdi=mscLpSonetTxRdi, mscLpDS3DS1ChanIfIndex=mscLpDS3DS1ChanIfIndex, mscLpE3StandbyStatus=mscLpE3StandbyStatus, mscLpE1LosStateChanges=mscLpE1LosStateChanges, mscLpDS3DS1ChanTc=mscLpDS3DS1ChanTc, mscLpE1IfEntryEntry=mscLpE1IfEntryEntry, mscLpE3RunningTime=mscLpE3RunningTime, mscLpSonetTestBytesRx=mscLpSonetTestBytesRx, mscLpX21StandbyStatus=mscLpX21StandbyStatus, mscLpE3TestDataStartDelay=mscLpE3TestDataStartDelay, mscLpE1AudioStorageType=mscLpE1AudioStorageType, mscLpV35TestElapsedTime=mscLpV35TestElapsedTime, mscLpDS3PlcpRowStatusTable=mscLpDS3PlcpRowStatusTable, mscLpSonetPathFarEndPathErrorFreeSec=mscLpSonetPathFarEndPathErrorFreeSec, mscLpE1ControlStatus=mscLpE1ControlStatus, mscLpE1ChanFlmHdlcMonitoring=mscLpE1ChanFlmHdlcMonitoring, mscLpSdhTestErroredFrmRx=mscLpSdhTestErroredFrmRx, mscLpDS3UnknownStatus=mscLpDS3UnknownStatus, mscLpE3PathErroredSec=mscLpE3PathErroredSec, mscLpE3UnknownStatus=mscLpE3UnknownStatus, mscLpSonetPathCellOperEntry=mscLpSonetPathCellOperEntry, mscLpDS1TestFrmPatternType=mscLpDS1TestFrmPatternType, mscLpDS1ChanTestStorageType=mscLpDS1ChanTestStorageType, mscLpSdhPathCell=mscLpSdhPathCell, mscLpDS3DS1ChanTcOpTable=mscLpDS3DS1ChanTcOpTable, mscLpSonetComponentName=mscLpSonetComponentName, mscLpX21OperationalState=mscLpX21OperationalState, mscLpDS1ChanTestRowStatus=mscLpDS1ChanTestRowStatus, mscLpDS3ErrorFreeSec=mscLpDS3ErrorFreeSec, mscLpMemoryUsageAvgValue=mscLpMemoryUsageAvgValue, mscLpDS3TxRai=mscLpDS3TxRai, mscLpJT2RowStatusTable=mscLpJT2RowStatusTable, mscLpE3Plcp=mscLpE3Plcp, mscLpJT2CellCorrectSingleBitHeaderErrors=mscLpJT2CellCorrectSingleBitHeaderErrors, mscLpDS3Mapping=mscLpDS3Mapping, mscLpHssiTestRowStatusTable=mscLpHssiTestRowStatusTable, mscLpDS1ChanTestCauseOfTermination=mscLpDS1ChanTestCauseOfTermination, mscLpDS1ChanCellCorrectSingleBitHeaderErrors=mscLpDS1ChanCellCorrectSingleBitHeaderErrors, mscLpV35OperationalState=mscLpV35OperationalState, mscLpJT2UsageState=mscLpJT2UsageState, mscLpDS3RxIdle=mscLpDS3RxIdle, mscLpDS3CBitCbitCodeViolations=mscLpDS3CBitCbitCodeViolations, mscLpDS3CBitFarEndSevErroredSec=mscLpDS3CBitFarEndSevErroredSec, mscLpX21LineSpeed=mscLpX21LineSpeed, mscLpV35IfIndex=mscLpV35IfIndex, mscLpE3PathSefAisSec=mscLpE3PathSefAisSec, mscLpSdhPathOperStatusEntry=mscLpSdhPathOperStatusEntry, mscLpE3RowStatusEntry=mscLpE3RowStatusEntry, mscLpDS1ProvEntry=mscLpDS1ProvEntry, mscLpE3CidDataTable=mscLpE3CidDataTable, mscLpDS3PlcpStatsTable=mscLpDS3PlcpStatsTable, mscLpV35TestResultsTable=mscLpV35TestResultsTable, mscLpSonetTestAdminState=mscLpSonetTestAdminState, mscLpDS1ChanUsageState=mscLpDS1ChanUsageState)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpSdhTestBitsTx=mscLpSdhTestBitsTx, mscLpE1AdminInfoTable=mscLpE1AdminInfoTable, mscLpAdminState=mscLpAdminState, mscLpSonetPathOperEntry=mscLpSonetPathOperEntry, mscLpE3PlcpStorageType=mscLpE3PlcpStorageType, mscLpDS3OperEntry=mscLpDS3OperEntry, mscLpDS3PlcpFarEndUnavailableSec=mscLpDS3PlcpFarEndUnavailableSec, logicalProcessorCapabilitiesCA02A=logicalProcessorCapabilitiesCA02A, mscLpE3TestBytesTx=mscLpE3TestBytesTx, mscLpE3G832ComponentName=mscLpE3G832ComponentName, mscLpE3TestElapsedTime=mscLpE3TestElapsedTime, mscLpE1ChanActualChannelSpeed=mscLpE1ChanActualChannelSpeed, mscLpSdhRunningTime=mscLpSdhRunningTime, mscLpJT2LosStateChanges=mscLpJT2LosStateChanges, mscLpDS3DS1ChanTcComponentName=mscLpDS3DS1ChanTcComponentName, mscLpSonetPathIndex=mscLpSonetPathIndex, mscLpDS3DS1CidDataEntry=mscLpDS3DS1CidDataEntry, mscLpHssiTestStateEntry=mscLpHssiTestStateEntry, mscLpE3CellReceiveCellUtilization=mscLpE3CellReceiveCellUtilization, mscLpStorageType=mscLpStorageType, mscLpDS1ChanVendor=mscLpDS1ChanVendor, mscLpHssiDataTransferLineState=mscLpHssiDataTransferLineState, mscLpDS1TestCustomizedPattern=mscLpDS1TestCustomizedPattern, mscLpDS1AudioComponentName=mscLpDS1AudioComponentName, mscLpE3TestUsageState=mscLpE3TestUsageState, mscLpE1ChanTestBytesTx=mscLpE1ChanTestBytesTx, mscLpDS3DS1ChanCellStatsEntry=mscLpDS3DS1ChanCellStatsEntry, mscLpDS1ChanTcRowStatusEntry=mscLpDS1ChanTcRowStatusEntry, mscLpSonetRunningTime=mscLpSonetRunningTime, mscLpAvailabilityStatus=mscLpAvailabilityStatus, mscLpDS1TestDisplayInterval=mscLpDS1TestDisplayInterval, mscLpDS3PlcpFarEndSevErroredSec=mscLpDS3PlcpFarEndSevErroredSec, mscLpDS3DS1ChanTcSigOneIndex=mscLpDS3DS1ChanTcSigOneIndex, mscLpDS3DS1ChanTcRowStatusTable=mscLpDS3DS1ChanTcRowStatusTable, mscLpSonetPathIfEntryTable=mscLpSonetPathIfEntryTable, mscLpDS3TestUsageState=mscLpDS3TestUsageState, mscLpE3TestStateTable=mscLpE3TestStateTable, mscLpSonetTestType=mscLpSonetTestType, mscLpE3TestStorageType=mscLpE3TestStorageType, mscLpDS3IfEntryTable=mscLpDS3IfEntryTable, mscLpDS1ChanSnmpOperStatus=mscLpDS1ChanSnmpOperStatus, mscLpE1E1OperTable=mscLpE1E1OperTable, mscLpJT2TestStateTable=mscLpJT2TestStateTable, mscLpSonetStorageType=mscLpSonetStorageType, mscLpDS3DS1ChanOperTable=mscLpDS3DS1ChanOperTable, mscLpJT2IfEntryTable=mscLpJT2IfEntryTable, mscLpE1BpvErrors=mscLpE1BpvErrors, mscLpSonetFarEndLineFailures=mscLpSonetFarEndLineFailures, mscLpSonetOperTable=mscLpSonetOperTable, mscLpDS1ChanUnknownStatus=mscLpDS1ChanUnknownStatus, mscLpJT2RxAisPayloadAlarm=mscLpJT2RxAisPayloadAlarm, mscLpDS1ChanTestResultsEntry=mscLpDS1ChanTestResultsEntry, mscLpE1ChanProceduralStatus=mscLpE1ChanProceduralStatus, mscLpDS3DS1ChanTestCustomizedPattern=mscLpDS3DS1ChanTestCustomizedPattern, mscLpX21DteDataClockSource=mscLpX21DteDataClockSource, mscLpDS1ChanTimeslots=mscLpDS1ChanTimeslots, mscLpDS3DS1ChanTcReplacementData=mscLpDS3DS1ChanTcReplacementData, mscLpDS3DS1ChanCellCorrectableHeaderErrors=mscLpDS3DS1ChanCellCorrectableHeaderErrors, mscLpDS1ChanCellProvEntry=mscLpDS1ChanCellProvEntry, mscLpE3G832RowStatusTable=mscLpE3G832RowStatusTable, mscLpE1ChanTestResultsTable=mscLpE1ChanTestResultsTable, mscLpSonetFarEndLineCodeViolations=mscLpSonetFarEndLineCodeViolations, mscLpE1ChanCellStatsTable=mscLpE1ChanCellStatsTable, mscLpE1ChanTc=mscLpE1ChanTc, mscLpDS3PlcpFarEndErroredSec=mscLpDS3PlcpFarEndErroredSec, mscLpDS3TestBytesRx=mscLpDS3TestBytesRx, mscLpDS3DS1TestResultsTable=mscLpDS3DS1TestResultsTable, mscLpHssiTestDataStartDelay=mscLpHssiTestDataStartDelay, mscLpSonetTestIndex=mscLpSonetTestIndex, mscLpHssiLineState=mscLpHssiLineState, logicalProcessorGroup=logicalProcessorGroup, mscLpUsageState=mscLpUsageState, mscLpSonetProvEntry=mscLpSonetProvEntry, mscLpDS1ChanTestSetupTable=mscLpDS1ChanTestSetupTable, mscLpE1RowStatusTable=mscLpE1RowStatusTable, mscLpE1TestDisplayInterval=mscLpE1TestDisplayInterval, mscLpV35TestComponentName=mscLpV35TestComponentName, mscLpSonetPathOperStatusTable=mscLpSonetPathOperStatusTable, mscLpDS3TestAdminState=mscLpDS3TestAdminState, mscLpDS1ChanIfEntryEntry=mscLpDS1ChanIfEntryEntry, mscLpE3G832StatsEntry=mscLpE3G832StatsEntry, mscLpJT2TestElapsedTime=mscLpJT2TestElapsedTime, mscLpDS3DS1ChanIfEntryEntry=mscLpDS3DS1ChanIfEntryEntry, mscLpSonetPathApplicationFramerName=mscLpSonetPathApplicationFramerName, mscLpDS3LineLength=mscLpDS3LineLength, mscLpDS3CommentText=mscLpDS3CommentText, mscLpDS3DS1TestDataStartDelay=mscLpDS3DS1TestDataStartDelay, mscLpDS1AvailabilityStatus=mscLpDS1AvailabilityStatus, mscLpDS3StorageType=mscLpDS3StorageType, mscLpDS1ChanAvailabilityStatus=mscLpDS1ChanAvailabilityStatus, mscLpHssiTestPurpose=mscLpHssiTestPurpose, mscLpDS3PathCodeViolations=mscLpDS3PathCodeViolations, logicalProcessorCapabilities=logicalProcessorCapabilities, mscLpJT2TestBitsTx=mscLpJT2TestBitsTx, mscLpX21CidDataTable=mscLpX21CidDataTable, mscLpDS1ChanTestOperationalState=mscLpDS1ChanTestOperationalState, mscLpDS3CellAlarmActDelay=mscLpDS3CellAlarmActDelay, mscLpDS3DS1ChanProceduralStatus=mscLpDS3DS1ChanProceduralStatus, mscLpE1UnknownStatus=mscLpE1UnknownStatus, mscLpDS1TestRowStatusEntry=mscLpDS1TestRowStatusEntry, mscLpSdhTestDuration=mscLpSdhTestDuration, mscLpSdhTestFrmTx=mscLpSdhTestFrmTx, mscLpDS3TestErroredFrmRx=mscLpDS3TestErroredFrmRx, mscLpJT2TestDuration=mscLpJT2TestDuration, mscLpE1Dsp=mscLpE1Dsp, mscLpE3Test=mscLpE3Test, mscLpHssiActualRxLineSpeed=mscLpHssiActualRxLineSpeed, mscLpDS3DS1TestComponentName=mscLpDS3DS1TestComponentName, mscLpHssiVendor=mscLpHssiVendor, mscLpHssiCustomerIdentifier=mscLpHssiCustomerIdentifier, mscLpSdhClockingSource=mscLpSdhClockingSource, mscLpX21Test=mscLpX21Test, mscLpE3G832TrailTraceReceived=mscLpE3G832TrailTraceReceived, mscLpE3CellStatsTable=mscLpE3CellStatsTable, mscLpX21TestSetupEntry=mscLpX21TestSetupEntry, mscLpDS3DS1TestFrmTx=mscLpDS3DS1TestFrmTx, mscLpDS3DS1ChanCellReceiveCellUtilization=mscLpDS3DS1ChanCellReceiveCellUtilization, mscLpV35=mscLpV35, mscLpDS1StatsEntry=mscLpDS1StatsEntry, mscLpE3PathSevErroredSec=mscLpE3PathSevErroredSec, mscLpE1ChanCellProvTable=mscLpE1ChanCellProvTable, mscLpDS3DS1RowStatusEntry=mscLpDS3DS1RowStatusEntry, mscLpDS1ChanCellUncorrectableHecErrors=mscLpDS1ChanCellUncorrectableHecErrors, mscLpProceduralStatus=mscLpProceduralStatus, mscLpX21ActualLinkMode=mscLpX21ActualLinkMode, mscLpE1TestBitErrorRate=mscLpE1TestBitErrorRate, mscLpE3IfIndex=mscLpE3IfIndex, mscLpDS3PathSefAisSec=mscLpDS3PathSefAisSec, mscLpDS3DS1AdminInfoEntry=mscLpDS3DS1AdminInfoEntry, mscLpDS3DS1Test=mscLpDS3DS1Test, mscLpJT2AlarmStatus=mscLpJT2AlarmStatus, mscLpDS1TxAisAlarm=mscLpDS1TxAisAlarm, mscLpSdhTestResultsEntry=mscLpSdhTestResultsEntry, mscLpDS1TestBitsTx=mscLpDS1TestBitsTx, mscLpDS3DS1SevErroredFrmSec=mscLpDS3DS1SevErroredFrmSec, mscLpE1ChanAlarmStatus=mscLpE1ChanAlarmStatus, mscLpSonetPathCell=mscLpSonetPathCell, mscLpSonetPathCellStatsTable=mscLpSonetPathCellStatsTable, mscLpSonetPathFarEndPathAisLopSec=mscLpSonetPathFarEndPathAisLopSec, mscLpSdhLineUnavailSec=mscLpSdhLineUnavailSec, mscLpSonetPathPathSevErroredSec=mscLpSonetPathPathSevErroredSec, mscLpEngDsOvStorageType=mscLpEngDsOvStorageType, mscLpE3TestIndex=mscLpE3TestIndex, mscLpSdhTestCauseOfTermination=mscLpSdhTestCauseOfTermination, mscLpSdhUnknownStatus=mscLpSdhUnknownStatus, mscLpDS3ApplicationFramerName=mscLpDS3ApplicationFramerName, mscLpSonetAdminInfoEntry=mscLpSonetAdminInfoEntry, mscLpX21TestRowStatus=mscLpX21TestRowStatus, mscLpDS3DS1StatsTable=mscLpDS3DS1StatsTable, mscLpDS3DS1CustomerIdentifier=mscLpDS3DS1CustomerIdentifier, mscLpV35ClockingSource=mscLpV35ClockingSource, mscLpDS1AudioStorageType=mscLpDS1AudioStorageType, mscLpE1ChanComponentName=mscLpE1ChanComponentName, mscLpDS1ChanApplicationFramerName=mscLpDS1ChanApplicationFramerName, logicalProcessorGroupCA=logicalProcessorGroupCA, mscLpJT2AvailabilityStatus=mscLpJT2AvailabilityStatus, mscLpDS3CBitFarEndFailures=mscLpDS3CBitFarEndFailures, mscLpE3TestBitsRx=mscLpE3TestBitsRx, mscLpDS3CBitCbitErrorFreeSec=mscLpDS3CBitCbitErrorFreeSec, mscLpSonetCidDataTable=mscLpSonetCidDataTable, mscLpDS3PlcpErrorFreeSec=mscLpDS3PlcpErrorFreeSec, mscLpDS3DS1ChanTcSigTwoIndex=mscLpDS3DS1ChanTcSigTwoIndex, mscLpDS3DS1ChanAdminInfoTable=mscLpDS3DS1ChanAdminInfoTable, mscLpE1ChanCellTransmitCellUtilization=mscLpE1ChanCellTransmitCellUtilization, mscLpX21TestStateTable=mscLpX21TestStateTable, mscLpSdhCidDataEntry=mscLpSdhCidDataEntry, mscLpDS3DS1TestSetupEntry=mscLpDS3DS1TestSetupEntry, mscLpLocalMsgBlockUsageAvg=mscLpLocalMsgBlockUsageAvg, mscLpDS1IfEntryTable=mscLpDS1IfEntryTable, mscLpE1TestSetupEntry=mscLpE1TestSetupEntry, mscLpDS3DS1ChanTestUsageState=mscLpDS3DS1ChanTestUsageState, mscLpSdhPathPathErrorFreeSec=mscLpSdhPathPathErrorFreeSec, mscLpDS1FrmErrors=mscLpDS1FrmErrors, mscLpE3PlcpFarEndErroredSec=mscLpE3PlcpFarEndErroredSec, mscLpJT2TestStateEntry=mscLpJT2TestStateEntry, mscLpDS1StateTable=mscLpDS1StateTable, mscLpDS3DS1ComponentName=mscLpDS3DS1ComponentName, mscLpE1ChanUsageState=mscLpE1ChanUsageState, mscLpE3ControlStatus=mscLpE3ControlStatus, mscLpE1ProvTable=mscLpE1ProvTable, mscLpDS1RxRaiAlarm=mscLpDS1RxRaiAlarm, mscLpDS1ChanTestStateEntry=mscLpDS1ChanTestStateEntry, mscLpSdhPathCellTransmitCellUtilization=mscLpSdhPathCellTransmitCellUtilization, mscLpDS1ChanCommentText=mscLpDS1ChanCommentText, mscLpE3TestFrmRx=mscLpE3TestFrmRx, mscLpDS1ChanCellOperTable=mscLpDS1ChanCellOperTable, mscLpE3Framing=mscLpE3Framing, mscLpSonetPathCellRowStatusTable=mscLpSonetPathCellRowStatusTable, mscLpDS3TestRowStatus=mscLpDS3TestRowStatus, mscLpJT2ComponentName=mscLpJT2ComponentName, mscLpE3TestBitErrorRate=mscLpE3TestBitErrorRate, mscLpDS1ChanCidDataTable=mscLpDS1ChanCidDataTable, mscLpDS1ChanOperEntry=mscLpDS1ChanOperEntry, mscLpE3TestFrmPatternType=mscLpE3TestFrmPatternType, mscLpE3TestType=mscLpE3TestType, mscLpSonetTestPurpose=mscLpSonetTestPurpose, mscLpDS1ChanCellTransmitCellUtilization=mscLpDS1ChanCellTransmitCellUtilization, mscLpE1FrmErrors=mscLpE1FrmErrors, mscLpE1LosAlarm=mscLpE1LosAlarm, mscLpE1CommentText=mscLpE1CommentText, mscLpJT2SevErroredSec=mscLpJT2SevErroredSec, mscLpHssiOperStatusEntry=mscLpHssiOperStatusEntry, mscLpJT2StateTable=mscLpJT2StateTable, mscLpLinkToApplicationsTable=mscLpLinkToApplicationsTable, mscLpE1ChanTcSigTwoTable=mscLpE1ChanTcSigTwoTable, mscLpHssiTestAdminState=mscLpHssiTestAdminState, mscLpV35ProvTable=mscLpV35ProvTable, mscLpDS3TestBitsTx=mscLpDS3TestBitsTx, mscLpJT2StandbyStatus=mscLpJT2StandbyStatus, mscLpE1DspStorageType=mscLpE1DspStorageType, mscLpE3G832ProvisionedTable=mscLpE3G832ProvisionedTable, mscLpDS1TestCauseOfTermination=mscLpDS1TestCauseOfTermination, mscLpSdhLofAlarm=mscLpSdhLofAlarm, mscLpDS3ComponentName=mscLpDS3ComponentName, mscLpSonetLineFailures=mscLpSonetLineFailures, logicalProcessorGroupCA02=logicalProcessorGroupCA02, mscLpDS3DS1ChanApplicationFramerName=mscLpDS3DS1ChanApplicationFramerName, mscLpDS3DS1ChanTestRowStatusTable=mscLpDS3DS1ChanTestRowStatusTable, mscLpE1ChanTestFrmTx=mscLpE1ChanTestFrmTx, mscLpHssiAvailabilityStatus=mscLpHssiAvailabilityStatus, mscLpOperTable=mscLpOperTable, mscLpSonetPathCellProvTable=mscLpSonetPathCellProvTable, mscLpSpareCard=mscLpSpareCard, mscLpSdhProceduralStatus=mscLpSdhProceduralStatus, mscLpSdhOperStatusTable=mscLpSdhOperStatusTable, mscLpSonetTestFrmSize=mscLpSonetTestFrmSize, mscLpDS1ChanTestTimeRemaining=mscLpDS1ChanTestTimeRemaining, mscLpHssiTestBitsTx=mscLpHssiTestBitsTx, mscLpDS1TestResultsEntry=mscLpDS1TestResultsEntry, mscLpSonetUnknownStatus=mscLpSonetUnknownStatus, mscLpRowStatusTable=mscLpRowStatusTable, mscLpSonetPathUnknownStatus=mscLpSonetPathUnknownStatus, mscLpDS3DS1StateEntry=mscLpDS3DS1StateEntry, mscLpDS3OperStatusTable=mscLpDS3OperStatusTable, mscLpDS1TestFrmTx=mscLpDS1TestFrmTx, mscLpSonetPathRxRfiAlarm=mscLpSonetPathRxRfiAlarm, mscLpDS3RunningTime=mscLpDS3RunningTime, mscLpV35TestDuration=mscLpV35TestDuration, mscLpDS1Audio=mscLpDS1Audio, mscLpCpuUtilAvgMin=mscLpCpuUtilAvgMin, mscLpDS3AdminState=mscLpDS3AdminState, mscLpE3CellTransmitCellUtilization=mscLpE3CellTransmitCellUtilization, mscLpV35ActualLinkMode=mscLpV35ActualLinkMode, mscLpDS3StatsEntry=mscLpDS3StatsEntry, mscLpX21LinkMode=mscLpX21LinkMode, mscLpDS3DS1TestBitsTx=mscLpDS3DS1TestBitsTx, mscLpDS3DS1TestStateEntry=mscLpDS3DS1TestStateEntry, mscLpDS3DS1TestSetupTable=mscLpDS3DS1TestSetupTable, mscLpE1ChanCellRowStatus=mscLpE1ChanCellRowStatus, mscLpE1CustomerIdentifier=mscLpE1CustomerIdentifier, mscLpE1ChanIfEntryEntry=mscLpE1ChanIfEntryEntry, mscLpV35TestErroredFrmRx=mscLpV35TestErroredFrmRx, mscLpDS1StatsTable=mscLpDS1StatsTable, mscLpSdhPathCellStatsTable=mscLpSdhPathCellStatsTable)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpE3AdminInfoTable=mscLpE3AdminInfoTable, mscLpDS1ChanIfEntryTable=mscLpDS1ChanIfEntryTable, mscLpX21CommentText=mscLpX21CommentText, mscLpX21TestFrmRx=mscLpX21TestFrmRx, mscLpSdhAdminInfoTable=mscLpSdhAdminInfoTable, mscLpDS1ChanCellProvTable=mscLpDS1ChanCellProvTable, mscLpE1ChanFlmOpEntry=mscLpE1ChanFlmOpEntry, mscLpE3TestResultsEntry=mscLpE3TestResultsEntry, mscLpSdhPathRowStatusTable=mscLpSdhPathRowStatusTable, mscLpDS1TestBytesRx=mscLpDS1TestBytesRx, mscLpX21TestDuration=mscLpX21TestDuration, mscLpDS3CellStatsEntry=mscLpDS3CellStatsEntry, mscLpV35StateEntry=mscLpV35StateEntry, mscLpHssiTestDisplayInterval=mscLpHssiTestDisplayInterval, mscLpMsgBlockUsageAvgMax=mscLpMsgBlockUsageAvgMax, mscLp=mscLp, mscLpE1ChanIfIndex=mscLpE1ChanIfIndex, mscLpSdhTestDataStartDelay=mscLpSdhTestDataStartDelay, mscLpE3StatsTable=mscLpE3StatsTable, mscLpE1TxMultifrmRaiAlarm=mscLpE1TxMultifrmRaiAlarm, mscLpE1ChanTestDataStartDelay=mscLpE1ChanTestDataStartDelay, mscLpDS3LineCodeViolations=mscLpDS3LineCodeViolations, mscLpE1ChanAvailabilityStatus=mscLpE1ChanAvailabilityStatus, mscLpDS3DS1TestType=mscLpDS3DS1TestType, mscLpE1ChanTcOpEntry=mscLpE1ChanTcOpEntry, mscLpDS3CBit=mscLpDS3CBit, mscLpSonetPathStatsTable=mscLpSonetPathStatsTable, mscLpE1StateTable=mscLpE1StateTable, mscLpX21TestCauseOfTermination=mscLpX21TestCauseOfTermination, mscLpE3TestPurpose=mscLpE3TestPurpose, mscLpDS3DS1ChanStateTable=mscLpDS3DS1ChanStateTable, mscLpE3PlcpStatsTable=mscLpE3PlcpStatsTable, mscLpDS1Test=mscLpDS1Test, mscLpV35DataXferStateChanges=mscLpV35DataXferStateChanges, mscLpSonetLineSevErroredSec=mscLpSonetLineSevErroredSec, mscLpJT2CellStorageType=mscLpJT2CellStorageType, mscLpDS3CBitFarEndErrorFreeSec=mscLpDS3CBitFarEndErrorFreeSec, mscLpDS1TestType=mscLpDS1TestType, mscLpSonetPathControlStatus=mscLpSonetPathControlStatus, mscLpE1TestStateEntry=mscLpE1TestStateEntry, mscLpSonetPathCellCorrectSingleBitHeaderErrors=mscLpSonetPathCellCorrectSingleBitHeaderErrors, mscLpEngDsOv=mscLpEngDsOv, mscLpSdhFarEndLineCodeViolations=mscLpSdhFarEndLineCodeViolations, mscLpDS3DS1TestRowStatus=mscLpDS3DS1TestRowStatus, mscLpDS1ErroredSec=mscLpDS1ErroredSec, mscLpDS3DS1ChanStorageType=mscLpDS3DS1ChanStorageType, mscLpDS3DS1AdminInfoTable=mscLpDS3DS1AdminInfoTable, mscLpDS3DS1ChanTestType=mscLpDS3DS1ChanTestType, mscLpDS3DS1TxRaiAlarm=mscLpDS3DS1TxRaiAlarm, mscLpDS3DS1ChanTestStorageType=mscLpDS3DS1ChanTestStorageType, mscLpV35TestIndex=mscLpV35TestIndex, mscLpSdhPathRxAisAlarm=mscLpSdhPathRxAisAlarm, mscLpX21UsageState=mscLpX21UsageState, mscLpSonetControlStatus=mscLpSonetControlStatus, mscLpE3TestSetupEntry=mscLpE3TestSetupEntry, mscLpHssiTestResultsEntry=mscLpHssiTestResultsEntry, mscLpSonetPathProvTable=mscLpSonetPathProvTable, mscLpDS3CBitFarEndAlarm=mscLpDS3CBitFarEndAlarm, mscLpE3PlcpComponentName=mscLpE3PlcpComponentName, mscLpSonetTestDisplayInterval=mscLpSonetTestDisplayInterval, mscLpDS3DS1ChanTestBitsRx=mscLpDS3DS1ChanTestBitsRx, mscLpE3TestErroredFrmRx=mscLpE3TestErroredFrmRx, mscLpSonetPathStatsEntry=mscLpSonetPathStatsEntry, mscLpX21LineStatusTimeOut=mscLpX21LineStatusTimeOut, logicalProcessorGroupCA02A=logicalProcessorGroupCA02A, mscLpE1ChanTestIndex=mscLpE1ChanTestIndex, mscLpEngRowStatusTable=mscLpEngRowStatusTable, mscLpDS1ChanCellScrambleCellPayload=mscLpDS1ChanCellScrambleCellPayload, mscLpCidDataEntry=mscLpCidDataEntry, mscLpEngDsAgentQueueSize=mscLpEngDsAgentQueueSize, mscLpE1ChanTcSigTwoValue=mscLpE1ChanTcSigTwoValue, mscLpDS1OperEntry=mscLpDS1OperEntry, mscLpSdhOperTable=mscLpSdhOperTable, mscLpDS1ChanAdminInfoEntry=mscLpDS1ChanAdminInfoEntry, mscLpJT2OperTable=mscLpJT2OperTable, mscLpE1AudioComponentName=mscLpE1AudioComponentName, mscLpV35UnknownStatus=mscLpV35UnknownStatus, mscLpSdhPathCellRowStatusTable=mscLpSdhPathCellRowStatusTable, mscLpE1ChanTcSigOneIndex=mscLpE1ChanTcSigOneIndex, mscLpDS1ChanTestCustomizedPattern=mscLpDS1ChanTestCustomizedPattern, mscLpE3TestFrmSize=mscLpE3TestFrmSize, mscLpV35TestOperationalState=mscLpV35TestOperationalState, mscLpSonetPathAvailabilityStatus=mscLpSonetPathAvailabilityStatus, mscLpDS3CBitComponentName=mscLpDS3CBitComponentName, mscLpDS1AudioRowStatusTable=mscLpDS1AudioRowStatusTable, mscLpDS1ChanCellStatsEntry=mscLpDS1ChanCellStatsEntry, mscLpE3PathFailures=mscLpE3PathFailures, mscLpSdhPathCellComponentName=mscLpSdhPathCellComponentName, mscLpSonetPathStandbyStatus=mscLpSonetPathStandbyStatus, mscLpDS1TxRaiAlarm=mscLpDS1TxRaiAlarm, mscLpEngDsOperTable=mscLpEngDsOperTable, mscLpDS3ControlStatus=mscLpDS3ControlStatus, mscLpSdhTestType=mscLpSdhTestType, mscLpDS3DS1ChanTcSigOneTable=mscLpDS3DS1ChanTcSigOneTable, mscLpX21OperTable=mscLpX21OperTable, mscLpSonetFarEndLineErrorFreeSec=mscLpSonetFarEndLineErrorFreeSec, mscLpJT2IfEntryEntry=mscLpJT2IfEntryEntry, mscLpDS1LosAlarm=mscLpDS1LosAlarm, mscLpV35IfEntryTable=mscLpV35IfEntryTable, mscLpDS3DS1ChanTestBytesTx=mscLpDS3DS1ChanTestBytesTx, mscLpSdhPathTxRdi=mscLpSdhPathTxRdi, mscLpDS1ControlStatus=mscLpDS1ControlStatus, mscLpDS3DS1ChanCellOperEntry=mscLpDS3DS1ChanCellOperEntry, mscLpE1RxRaiAlarm=mscLpE1RxRaiAlarm, mscLpJT2Index=mscLpJT2Index, mscLpE1ChanTestDisplayInterval=mscLpE1ChanTestDisplayInterval, mscLpSonetPathProceduralStatus=mscLpSonetPathProceduralStatus, mscLpE1ChanCellReceiveCellUtilization=mscLpE1ChanCellReceiveCellUtilization, mscLpSdhProvEntry=mscLpSdhProvEntry, mscLpSdhTestRowStatusTable=mscLpSdhTestRowStatusTable, mscLpDS3DS1ProceduralStatus=mscLpDS3DS1ProceduralStatus, mscLpDS3DS1ChanTcSigOneValue=mscLpDS3DS1ChanTcSigOneValue, mscLpSonetUnusableTxClockRefAlarm=mscLpSonetUnusableTxClockRefAlarm, mscLpUnknownStatus=mscLpUnknownStatus, mscLpDS3DS1LofAlarm=mscLpDS3DS1LofAlarm, mscLpSdhSectFailures=mscLpSdhSectFailures, mscLpJT2TestBitsRx=mscLpJT2TestBitsRx, mscLpDS3DS1TestBitsRx=mscLpDS3DS1TestBitsRx, mscLpE1ChanCellOperEntry=mscLpE1ChanCellOperEntry, mscLpDS3CBitFarEndErroredSec=mscLpDS3CBitFarEndErroredSec, mscLpJT2CrcErrors=mscLpJT2CrcErrors, mscLpX21TestTimeRemaining=mscLpX21TestTimeRemaining, mscLpX21TestRowStatusTable=mscLpX21TestRowStatusTable, mscLpHssiUnknownStatus=mscLpHssiUnknownStatus, mscLpDS3TestBytesTx=mscLpDS3TestBytesTx, mscLpDS3DS1Vendor=mscLpDS3DS1Vendor, mscLpDS3ProvTable=mscLpDS3ProvTable, mscLpV35TestFrmPatternType=mscLpV35TestFrmPatternType, mscLpDS1ChanStateTable=mscLpDS1ChanStateTable, mscLpV35TestDataStartDelay=mscLpV35TestDataStartDelay, mscLpDS3CBitOperationalEntry=mscLpDS3CBitOperationalEntry, mscLpSonetPathLopAlarm=mscLpSonetPathLopAlarm, mscLpSdhPathCidDataEntry=mscLpSdhPathCidDataEntry, mscLpSdhPathIfEntryTable=mscLpSdhPathIfEntryTable, mscLpDS3DS1RunningTime=mscLpDS3DS1RunningTime, mscLpV35ReadyLineState=mscLpV35ReadyLineState, mscLpEngDsOvRowStatusEntry=mscLpEngDsOvRowStatusEntry, mscLpE1ChanCellComponentName=mscLpE1ChanCellComponentName, mscLpHssiCidDataTable=mscLpHssiCidDataTable, mscLpJT2OperationalState=mscLpJT2OperationalState, mscLpDS1AdminInfoEntry=mscLpDS1AdminInfoEntry, mscLpE1ChanFlmOpTable=mscLpE1ChanFlmOpTable, mscLpDS3PathErroredSec=mscLpDS3PathErroredSec, mscLpX21ActualRxLineSpeed=mscLpX21ActualRxLineSpeed, mscLpX21TestElapsedTime=mscLpX21TestElapsedTime, mscLpRowStatus=mscLpRowStatus, mscLpDS3DS1ChanUsageState=mscLpDS3DS1ChanUsageState, mscLpE1ChanAdminInfoEntry=mscLpE1ChanAdminInfoEntry, mscLpSdhTestBitsRx=mscLpSdhTestBitsRx, mscLpE1ChanStateEntry=mscLpE1ChanStateEntry, mscLpDS1AudioRowStatusEntry=mscLpDS1AudioRowStatusEntry, mscLpDS1ChanTestFrmRx=mscLpDS1ChanTestFrmRx, mscLpSonetLineCodeViolations=mscLpSonetLineCodeViolations, mscLpDS3DS1ChanTcSigTwoEntry=mscLpDS3DS1ChanTcSigTwoEntry, mscLpDS1TestPurpose=mscLpDS1TestPurpose, mscLpSdhPathProceduralStatus=mscLpSdhPathProceduralStatus, mscLpSpareCardStatus=mscLpSpareCardStatus, mscLpDS3DS1TestBitErrorRate=mscLpDS3DS1TestBitErrorRate, mscLpE1LofAlarm=mscLpE1LofAlarm, mscLpLinkToApplicationsValue=mscLpLinkToApplicationsValue, mscLpE3CidDataEntry=mscLpE3CidDataEntry, mscLpV35ActualRxLineSpeed=mscLpV35ActualRxLineSpeed, mscLpE1ChanOperEntry=mscLpE1ChanOperEntry, mscLpDS3TestResultsTable=mscLpDS3TestResultsTable, mscLpDS3DS1ChanTestStateEntry=mscLpDS3DS1ChanTestStateEntry, mscLpDS1TestSetupEntry=mscLpDS1TestSetupEntry, mscLpSdhPathSnmpOperStatus=mscLpSdhPathSnmpOperStatus, mscLpDS1OperTable=mscLpDS1OperTable, mscLpMemoryCapacityIndex=mscLpMemoryCapacityIndex, mscLpDS3DS1OperStatusEntry=mscLpDS3DS1OperStatusEntry, mscLpSonetStateEntry=mscLpSonetStateEntry, mscLpComponentName=mscLpComponentName, mscLpSonetPathOperStatusEntry=mscLpSonetPathOperStatusEntry, mscLpSonetPathOperationalState=mscLpSonetPathOperationalState, mscLpE3TestBytesRx=mscLpE3TestBytesRx, mscLpJT2ProvEntry=mscLpJT2ProvEntry, mscLpDS1ChanProceduralStatus=mscLpDS1ChanProceduralStatus, mscLpDS1ChanTcSigOneEntry=mscLpDS1ChanTcSigOneEntry, mscLpDS1UnknownStatus=mscLpDS1UnknownStatus, mscLpDS3CellComponentName=mscLpDS3CellComponentName, mscLpDS3DS1TestRowStatusEntry=mscLpDS3DS1TestRowStatusEntry, mscLpDS3DS1ChanActualChannelSpeed=mscLpDS3DS1ChanActualChannelSpeed, mscLpSdhAlarmStatus=mscLpSdhAlarmStatus, mscLpE1ChanTestOperationalState=mscLpE1ChanTestOperationalState, mscLpDS3DS1IfIndex=mscLpDS3DS1IfIndex, mscLpDS1ChanRowStatus=mscLpDS1ChanRowStatus, mscLpSdhPathIfEntryEntry=mscLpSdhPathIfEntryEntry, mscLpSdhPathCellAlarmActDelay=mscLpSdhPathCellAlarmActDelay, mscLpDS3DS1ChanRowStatusEntry=mscLpDS3DS1ChanRowStatusEntry, mscLpDS1ChanTcOpTable=mscLpDS1ChanTcOpTable, mscLpDS1TestFrmSize=mscLpDS1TestFrmSize, mscLpE1TestBitsTx=mscLpE1TestBitsTx, mscLpJT2CellReceiveCellUtilization=mscLpJT2CellReceiveCellUtilization, mscLpSonetOperStatusTable=mscLpSonetOperStatusTable, mscLpJT2Vendor=mscLpJT2Vendor, mscLpDS3DS1ChanCellIndex=mscLpDS3DS1ChanCellIndex, mscLpSdhPathPathUnavailSec=mscLpSdhPathPathUnavailSec, mscLpEng=mscLpEng, mscLpSdhPathProvEntry=mscLpSdhPathProvEntry, mscLpDS3DS1OperStatusTable=mscLpDS3DS1OperStatusTable, mscLpJT2RunningTime=mscLpJT2RunningTime, mscLpE1ChanCellProvEntry=mscLpE1ChanCellProvEntry, mscLpJT2TestRowStatus=mscLpJT2TestRowStatus, mscLpActiveCard=mscLpActiveCard, mscLpJT2TestFrmTx=mscLpJT2TestFrmTx, mscLpDS3DS1ProvEntry=mscLpDS3DS1ProvEntry, mscLpHssiIfEntryEntry=mscLpHssiIfEntryEntry, mscLpSdhPathCellLcdAlarm=mscLpSdhPathCellLcdAlarm, mscLpSonetProceduralStatus=mscLpSonetProceduralStatus, mscLpDS1ChanIfAdminStatus=mscLpDS1ChanIfAdminStatus, mscLpDS1ChanCellAlarmActDelay=mscLpDS1ChanCellAlarmActDelay, mscLpE1TestStateTable=mscLpE1TestStateTable, mscLpX21DataTransferLineState=mscLpX21DataTransferLineState, mscLpE3IfAdminStatus=mscLpE3IfAdminStatus, mscLpDS1ChanCellComponentName=mscLpDS1ChanCellComponentName, mscLpDS1ChanOperStatusEntry=mscLpDS1ChanOperStatusEntry, mscLpSdhTestSetupEntry=mscLpSdhTestSetupEntry, mscLpDS1IfEntryEntry=mscLpDS1IfEntryEntry, mscLpV35TestCustomizedPattern=mscLpV35TestCustomizedPattern, mscLpHssiLinkMode=mscLpHssiLinkMode, mscLpSonetTestErroredFrmRx=mscLpSonetTestErroredFrmRx, mscLpV35TestSetupTable=mscLpV35TestSetupTable, mscLpE1ChanAdminInfoTable=mscLpE1ChanAdminInfoTable, mscLpSdhPathPathFailures=mscLpSdhPathPathFailures, mscLpDS1ChanOperationalState=mscLpDS1ChanOperationalState, mscLpDS3DS1TestBytesTx=mscLpDS3DS1TestBytesTx, mscLpE3RxRaiAlarm=mscLpE3RxRaiAlarm, mscLpDS3DS1ChanTestErroredFrmRx=mscLpDS3DS1ChanTestErroredFrmRx, mscLpE3AlarmStatus=mscLpE3AlarmStatus, mscLpDS1ChanTestPurpose=mscLpDS1ChanTestPurpose, mscLpDS1ChanTestDataStartDelay=mscLpDS1ChanTestDataStartDelay, mscLpE3=mscLpE3, mscLpE1ChanTestCustomizedPattern=mscLpE1ChanTestCustomizedPattern, mscLpHssiDataXferStateChanges=mscLpHssiDataXferStateChanges, mscLpDS1TestStorageType=mscLpDS1TestStorageType, mscLpSdhRowStatusEntry=mscLpSdhRowStatusEntry, mscLpDS3DS1ChanOperEntry=mscLpDS3DS1ChanOperEntry, mscLpHssiTestRowStatusEntry=mscLpHssiTestRowStatusEntry, mscLpV35LinkMode=mscLpV35LinkMode, mscLpE3Cell=mscLpE3Cell, mscLpJT2OperStatusEntry=mscLpJT2OperStatusEntry, mscLpDS3CustomerIdentifier=mscLpDS3CustomerIdentifier, mscLpE1ChanTestStorageType=mscLpE1ChanTestStorageType, mscLpDS1TestRowStatusTable=mscLpDS1TestRowStatusTable, mscLpV35TestRowStatusEntry=mscLpV35TestRowStatusEntry, mscLpX21TestDisplayInterval=mscLpX21TestDisplayInterval, mscLpDS3AdminInfoEntry=mscLpDS3AdminInfoEntry, mscLpDS3AlarmStatus=mscLpDS3AlarmStatus, mscLpDS3DS1OperationalState=mscLpDS3DS1OperationalState, mscLpDS3DS1ChanAdminState=mscLpDS3DS1ChanAdminState, mscLpV35ActualTxLineSpeed=mscLpV35ActualTxLineSpeed, mscLpSdhPathCellIndex=mscLpSdhPathCellIndex, mscLpTimeInterval=mscLpTimeInterval, mscLpDS3DS1ChanTestOperationalState=mscLpDS3DS1ChanTestOperationalState)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpE1E1OperEntry=mscLpE1E1OperEntry, mscLpDS1ChanTestStateTable=mscLpDS1ChanTestStateTable, mscLpDS3DS1TestOperationalState=mscLpDS3DS1TestOperationalState, mscLpSdhTestStateTable=mscLpSdhTestStateTable, mscLpHssiTestFrmTx=mscLpHssiTestFrmTx, mscLpHssiTestIndex=mscLpHssiTestIndex, mscLpSonetClockingSource=mscLpSonetClockingSource, mscLpSonetPathIfIndex=mscLpSonetPathIfIndex, mscLpDS1LosStateChanges=mscLpDS1LosStateChanges, mscLpHssiTestRowStatus=mscLpHssiTestRowStatus, mscLpV35TestDisplayInterval=mscLpV35TestDisplayInterval, mscLpDS1OperStatusEntry=mscLpDS1OperStatusEntry, mscLpJT2SevErroredFrmSec=mscLpJT2SevErroredFrmSec, mscLpDS1ChanTcRowStatusTable=mscLpDS1ChanTcRowStatusTable, mscLpDS1ComponentName=mscLpDS1ComponentName, mscLpE3LineLength=mscLpE3LineLength, mscLpSdhComponentName=mscLpSdhComponentName, mscLpDS1ChanControlStatus=mscLpDS1ChanControlStatus, mscLpE3LineSevErroredSec=mscLpE3LineSevErroredSec, mscLpSonetTestStateTable=mscLpSonetTestStateTable, mscLpE3G832=mscLpE3G832, mscLpSdhStatsEntry=mscLpSdhStatsEntry, mscLpDS3TestResultsEntry=mscLpDS3TestResultsEntry, mscLpE1ChanTest=mscLpE1ChanTest, mscLpSonetPathStateEntry=mscLpSonetPathStateEntry, mscLpDS3DS1UsageState=mscLpDS3DS1UsageState, mscLpSonetTestFrmTx=mscLpSonetTestFrmTx, mscLpSonetPathCellProvEntry=mscLpSonetPathCellProvEntry, mscLpDS3CellTransmitCellUtilization=mscLpDS3CellTransmitCellUtilization, mscLpE3PlcpFarEndErrorFreeSec=mscLpE3PlcpFarEndErrorFreeSec, mscLpDS3CellRowStatus=mscLpDS3CellRowStatus, mscLpEngDsRowStatusTable=mscLpEngDsRowStatusTable, mscLpDS3DS1ChanAlarmStatus=mscLpDS3DS1ChanAlarmStatus, mscLpDS1SlipErrors=mscLpDS1SlipErrors, mscLpDS1ChanActualChannelSpeed=mscLpDS1ChanActualChannelSpeed, mscLpSonetUsageState=mscLpSonetUsageState, mscLpE3AdminInfoEntry=mscLpE3AdminInfoEntry, mscLpDS3Cell=mscLpDS3Cell, mscLpDS3PathFailures=mscLpDS3PathFailures, mscLpE1ChanTestTimeRemaining=mscLpE1ChanTestTimeRemaining, mscLpE1ChanTcRowStatusEntry=mscLpE1ChanTcRowStatusEntry, mscLpDS3TestStateTable=mscLpDS3TestStateTable, mscLpDS3TestType=mscLpDS3TestType, mscLpSdhStandbyStatus=mscLpSdhStandbyStatus, mscLpDS3PlcpFarEndCodingViolations=mscLpDS3PlcpFarEndCodingViolations, mscLpSdhPathFarEndPathFailures=mscLpSdhPathFarEndPathFailures, mscLpDS1AlarmStatus=mscLpDS1AlarmStatus, mscLpSdhTestBytesRx=mscLpSdhTestBytesRx, mscLpDS3DS1ChanTestResultsTable=mscLpDS3DS1ChanTestResultsTable, mscLpV35OperStatusEntry=mscLpV35OperStatusEntry, mscLpStandbyStatus=mscLpStandbyStatus, mscLpE3IfEntryEntry=mscLpE3IfEntryEntry, mscLpE3TestFrmTx=mscLpE3TestFrmTx, mscLpDS3CellSevErroredSec=mscLpDS3CellSevErroredSec, mscLpE3OperTable=mscLpE3OperTable, mscLpE3CellSevErroredSec=mscLpE3CellSevErroredSec, mscLpSonetTestBitsTx=mscLpSonetTestBitsTx, mscLpE3TxRai=mscLpE3TxRai, mscLpE1UsageState=mscLpE1UsageState, mscLpE1OperStatusEntry=mscLpE1OperStatusEntry, mscLpSdhPathOperationalState=mscLpSdhPathOperationalState, mscLpDS1ChanStandbyStatus=mscLpDS1ChanStandbyStatus, mscLpV35OperTable=mscLpV35OperTable, mscLpE1TestBytesTx=mscLpE1TestBytesTx, mscLpSonetSnmpOperStatus=mscLpSonetSnmpOperStatus, mscLpE1TestCauseOfTermination=mscLpE1TestCauseOfTermination, mscLpE3CellLcdAlarm=mscLpE3CellLcdAlarm, mscLpJT2TestErroredFrmRx=mscLpJT2TestErroredFrmRx, mscLpMemoryCapacityTable=mscLpMemoryCapacityTable, mscLpDS3DS1ControlStatus=mscLpDS3DS1ControlStatus, mscLpEngDsRowStatus=mscLpEngDsRowStatus, mscLpDS1CrcErrors=mscLpDS1CrcErrors, mscLpE1SevErroredSec=mscLpE1SevErroredSec, mscLpDS3ProvEntry=mscLpDS3ProvEntry, mscLpDS1ChanCellRowStatus=mscLpDS1ChanCellRowStatus, mscLpV35TestUsageState=mscLpV35TestUsageState, mscLpSonetErrorFreeSec=mscLpSonetErrorFreeSec, mscLpV35OperEntry=mscLpV35OperEntry, mscLpDS3DS1=mscLpDS3DS1, mscLpHssiProvEntry=mscLpHssiProvEntry, mscLpE1ChanTestFrmRx=mscLpE1ChanTestFrmRx, mscLpE1ClockingSource=mscLpE1ClockingSource, mscLpE1TxAisAlarm=mscLpE1TxAisAlarm, mscLpX21IfIndex=mscLpX21IfIndex, mscLpSdhPathCellScrambleCellPayload=mscLpSdhPathCellScrambleCellPayload, mscLpDS3PlcpOperationalEntry=mscLpDS3PlcpOperationalEntry, mscLpSdhTestSetupTable=mscLpSdhTestSetupTable, mscLpX21TestBytesRx=mscLpX21TestBytesRx, mscLpSdhRxRfiAlarm=mscLpSdhRxRfiAlarm, mscLpDS3DS1TxAisAlarm=mscLpDS3DS1TxAisAlarm, mscLpJT2TestRowStatusEntry=mscLpJT2TestRowStatusEntry, mscLpDS3DS1TestUsageState=mscLpDS3DS1TestUsageState, logicalProcessorCapabilitiesCA02=logicalProcessorCapabilitiesCA02, mscLpDS1ChanTcIngressConditioning=mscLpDS1ChanTcIngressConditioning, mscLpSonetTxAis=mscLpSonetTxAis, mscLpV35LineStatusTimeOut=mscLpV35LineStatusTimeOut, mscLpX21AlarmStatus=mscLpX21AlarmStatus, mscLpSdhRxAisAlarm=mscLpSdhRxAisAlarm, mscLpE1TestErroredFrmRx=mscLpE1TestErroredFrmRx, mscLpE1ChanTcSigOneTable=mscLpE1ChanTcSigOneTable, mscLpDS3PlcpRxRaiAlarm=mscLpDS3PlcpRxRaiAlarm, mscLpE3CellRowStatusTable=mscLpE3CellRowStatusTable, mscLpX21ReadyLineState=mscLpX21ReadyLineState, mscLpSonetRxAisAlarm=mscLpSonetRxAisAlarm, mscLpHssiTestBytesRx=mscLpHssiTestBytesRx, mscLpE3CellProvEntry=mscLpE3CellProvEntry, mscLpDS3DS1ChanRowStatusTable=mscLpDS3DS1ChanRowStatusTable, mscLpDS3CbitParity=mscLpDS3CbitParity, mscLpDS3CellScrambleCellPayload=mscLpDS3CellScrambleCellPayload, mscLpV35IfAdminStatus=mscLpV35IfAdminStatus, mscLpJT2CellOperTable=mscLpJT2CellOperTable, mscLpHssiTestCauseOfTermination=mscLpHssiTestCauseOfTermination, mscLpDS1CidDataEntry=mscLpDS1CidDataEntry, mscLpSonetTestOperationalState=mscLpSonetTestOperationalState, mscLpSonetAdminState=mscLpSonetAdminState, mscLpHssiTestStateTable=mscLpHssiTestStateTable, mscLpJT2RowStatus=mscLpJT2RowStatus, mscLpX21Index=mscLpX21Index, mscLpX21UnknownStatus=mscLpX21UnknownStatus, mscLpDS3Vendor=mscLpDS3Vendor, mscLpV35TestCauseOfTermination=mscLpV35TestCauseOfTermination, mscLpJT2TestType=mscLpJT2TestType, mscLpDS3CellCorrectableHeaderErrors=mscLpDS3CellCorrectableHeaderErrors, mscLpHssiProceduralStatus=mscLpHssiProceduralStatus, mscLpE1DspRowStatus=mscLpE1DspRowStatus, mscLpSonetPathCellRowStatusEntry=mscLpSonetPathCellRowStatusEntry, mscLpE3CellStatsEntry=mscLpE3CellStatsEntry, mscLpDS3DS1ChanTestIndex=mscLpDS3DS1ChanTestIndex, mscLpE1ChanFlmRowStatusTable=mscLpE1ChanFlmRowStatusTable, mscLpDS3CellOperEntry=mscLpDS3CellOperEntry, mscLpX21CidDataEntry=mscLpX21CidDataEntry, mscLpDS1DspRowStatus=mscLpDS1DspRowStatus, mscLpE1RxMultifrmRaiAlarm=mscLpE1RxMultifrmRaiAlarm, mscLpDS3DS1ChanStandbyStatus=mscLpDS3DS1ChanStandbyStatus, mscLpDS3CellReceiveCellUtilization=mscLpDS3CellReceiveCellUtilization, mscLpDS3CBitCbitSevErroredSec=mscLpDS3CBitCbitSevErroredSec, mscLpX21=mscLpX21, mscLpSdhRowStatus=mscLpSdhRowStatus, mscLpDS3PlcpUnavailSec=mscLpDS3PlcpUnavailSec, mscLpSonetPathFarEndPathSevErroredSec=mscLpSonetPathFarEndPathSevErroredSec, mscLpSdhSectErroredSec=mscLpSdhSectErroredSec, mscLpSonetSectCodeViolations=mscLpSonetSectCodeViolations, mscLpDS3LineFailures=mscLpDS3LineFailures, mscLpE1ChanIfEntryTable=mscLpE1ChanIfEntryTable, mscLpSdhPathCellProvEntry=mscLpSdhPathCellProvEntry, mscLpJT2CellTransmitCellUtilization=mscLpJT2CellTransmitCellUtilization, mscLpHssiTestType=mscLpHssiTestType, mscLpMemoryCapacityEntry=mscLpMemoryCapacityEntry, mscLpSdhPathFarEndPathAisLopSec=mscLpSdhPathFarEndPathAisLopSec, mscLpDS1TestFrmRx=mscLpDS1TestFrmRx, mscLpE1StatsEntry=mscLpE1StatsEntry, mscLpSdhPathCellSevErroredSec=mscLpSdhPathCellSevErroredSec, mscLpDS3DS1ChanCellTransmitCellUtilization=mscLpDS3DS1ChanCellTransmitCellUtilization, mscLpSonetTestStateEntry=mscLpSonetTestStateEntry, mscLpDS3CBitCbitUnavailSec=mscLpDS3CBitCbitUnavailSec, mscLpSonetCidDataEntry=mscLpSonetCidDataEntry, mscLpSonetLineErroredSec=mscLpSonetLineErroredSec, mscLpDS1DspRowStatusTable=mscLpDS1DspRowStatusTable, mscLpE1TestType=mscLpE1TestType, mscLpDS1Dsp=mscLpDS1Dsp, mscLpX21OperStatusEntry=mscLpX21OperStatusEntry, mscLpSdhTestIndex=mscLpSdhTestIndex, mscLpHssiUsageState=mscLpHssiUsageState, mscLpE1ChanCellRowStatusTable=mscLpE1ChanCellRowStatusTable, mscLpHssiIndex=mscLpHssiIndex, mscLpE1CidDataTable=mscLpE1CidDataTable, mscLpDS3DS1SnmpOperStatus=mscLpDS3DS1SnmpOperStatus, mscLpDS3TestTimeRemaining=mscLpDS3TestTimeRemaining, mscLpE3G832StorageType=mscLpE3G832StorageType, mscLpDS3UsageState=mscLpDS3UsageState, mscLpJT2LosAlarm=mscLpJT2LosAlarm, mscLpDS3DS1ChanCellScrambleCellPayload=mscLpDS3DS1ChanCellScrambleCellPayload, mscLpDS3DS1ChanCell=mscLpDS3DS1ChanCell, mscLpE1TestFrmTx=mscLpE1TestFrmTx, mscLpE1UnavailSec=mscLpE1UnavailSec, mscLpDS3DS1ChanTestAdminState=mscLpDS3DS1ChanTestAdminState, mscLpScheduledSwitchover=mscLpScheduledSwitchover, mscLpDS1DspRowStatusEntry=mscLpDS1DspRowStatusEntry, mscLpDS3ProceduralStatus=mscLpDS3ProceduralStatus, mscLpE3PlcpCodingViolations=mscLpE3PlcpCodingViolations, mscLpDS3DS1ChanIndex=mscLpDS3DS1ChanIndex, mscLpX21LineState=mscLpX21LineState, mscLpSonetTestElapsedTime=mscLpSonetTestElapsedTime, mscLpEngDsOvIndex=mscLpEngDsOvIndex, mscLpHssiRowStatusEntry=mscLpHssiRowStatusEntry, mscLpSonetTestResultsEntry=mscLpSonetTestResultsEntry, mscLpSdhCommentText=mscLpSdhCommentText, mscLpDS1ChanStorageType=mscLpDS1ChanStorageType, mscLpX21ActualTxLineSpeed=mscLpX21ActualTxLineSpeed, mscLpDS1ChanTestAdminState=mscLpDS1ChanTestAdminState, mscLpV35TestStateEntry=mscLpV35TestStateEntry, mscLpE1TestBitsRx=mscLpE1TestBitsRx, mscLpDS3DS1ChanTestSetupTable=mscLpDS3DS1ChanTestSetupTable, mscLpE1IfIndex=mscLpE1IfIndex, mscLpSonetPathTxAis=mscLpSonetPathTxAis, mscLpJT2CellStatsTable=mscLpJT2CellStatsTable, mscLpMemoryUsageAvgMinEntry=mscLpMemoryUsageAvgMinEntry, mscLpDS3DS1ChanTcSigTwoValue=mscLpDS3DS1ChanTcSigTwoValue, mscLpDS3CBitOperationalTable=mscLpDS3CBitOperationalTable, mscLpSonetPathPathCodeViolations=mscLpSonetPathPathCodeViolations, mscLpE3StatsEntry=mscLpE3StatsEntry, mscLpDS3DS1ChanCellAlarmActDelay=mscLpDS3DS1ChanCellAlarmActDelay, mscLpE1OperStatusTable=mscLpE1OperStatusTable, mscLpRowStatusEntry=mscLpRowStatusEntry, mscLpHssiControlStatus=mscLpHssiControlStatus, mscLpJT2CellIndex=mscLpJT2CellIndex, mscLpJT2CellComponentName=mscLpJT2CellComponentName, mscLpV35AvailabilityStatus=mscLpV35AvailabilityStatus, mscLpSonetPathCellAlarmActDelay=mscLpSonetPathCellAlarmActDelay, mscLpSonet=mscLpSonet, mscLpDS3RxRaiAlarm=mscLpDS3RxRaiAlarm, mscLpSonetTestBitErrorRate=mscLpSonetTestBitErrorRate, mscLpE3LineCodeViolations=mscLpE3LineCodeViolations, mscLpDS3CBitRowStatusTable=mscLpDS3CBitRowStatusTable, mscLpE3PathUnavailSec=mscLpE3PathUnavailSec, mscLpJT2CellAlarmActDelay=mscLpJT2CellAlarmActDelay, mscLpSonetTest=mscLpSonetTest, mscLpV35TestFrmSize=mscLpV35TestFrmSize, mscLpE1ChanCidDataTable=mscLpE1ChanCidDataTable, mscLpDS3CBitLoopedbackToFarEnd=mscLpDS3CBitLoopedbackToFarEnd, mscLpSdhAdminInfoEntry=mscLpSdhAdminInfoEntry, mscLpX21TestRowStatusEntry=mscLpX21TestRowStatusEntry, mscLpX21StateEntry=mscLpX21StateEntry, mscLpE3CellScrambleCellPayload=mscLpE3CellScrambleCellPayload, mscLpSonetTestComponentName=mscLpSonetTestComponentName, mscLpSdhControlStatus=mscLpSdhControlStatus, mscLpSdhPathRowStatusEntry=mscLpSdhPathRowStatusEntry, mscLpE3CommentText=mscLpE3CommentText, mscLpDS1ChanTestErroredFrmRx=mscLpDS1ChanTestErroredFrmRx, mscLpSdhFarEndLineUnavailSec=mscLpSdhFarEndLineUnavailSec, mscLpE1ChanTestFrmPatternType=mscLpE1ChanTestFrmPatternType, mscLpSonetCustomerIdentifier=mscLpSonetCustomerIdentifier, mscLpV35DataTransferLineState=mscLpV35DataTransferLineState, mscLpDS1ChanCidDataEntry=mscLpDS1ChanCidDataEntry, mscLpE1ProvEntry=mscLpE1ProvEntry, mscLpSonetRxRfiAlarm=mscLpSonetRxRfiAlarm, mscLpX21SnmpOperStatus=mscLpX21SnmpOperStatus, mscLpMsgBlockUsageAvg=mscLpMsgBlockUsageAvg, mscLpJT2TestOperationalState=mscLpJT2TestOperationalState, mscLpE3TestCustomizedPattern=mscLpE3TestCustomizedPattern, mscLpE1ChanTestComponentName=mscLpE1ChanTestComponentName, mscLpHssiAdminState=mscLpHssiAdminState, mscLpSonetIfEntryEntry=mscLpSonetIfEntryEntry, mscLpJT2CellCorrectableHeaderErrors=mscLpJT2CellCorrectableHeaderErrors, mscLpX21CustomerIdentifier=mscLpX21CustomerIdentifier, mscLpDS1ChanTestBitsTx=mscLpDS1ChanTestBitsTx, mscLpSonetFarEndLineSevErroredSec=mscLpSonetFarEndLineSevErroredSec, mscLpE1ChanRowStatus=mscLpE1ChanRowStatus, mscLpProvTable=mscLpProvTable, mscLpE1OperationalState=mscLpE1OperationalState, mscLpSonetTestRowStatus=mscLpSonetTestRowStatus, mscLpV35ControlStatus=mscLpV35ControlStatus, mscLpE1ChanCellSevErroredSec=mscLpE1ChanCellSevErroredSec, mscLpE3CellUncorrectableHecErrors=mscLpE3CellUncorrectableHecErrors)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpDS1TestDataStartDelay=mscLpDS1TestDataStartDelay, mscLpDS3PlcpComponentName=mscLpDS3PlcpComponentName, mscLpSdhOperEntry=mscLpSdhOperEntry, mscLpJT2RxRaiAlarm=mscLpJT2RxRaiAlarm, mscLpDS1TestAdminState=mscLpDS1TestAdminState, mscLpDS3DS1ChanTestFrmSize=mscLpDS3DS1ChanTestFrmSize, mscLpE1ChanFlmComponentName=mscLpE1ChanFlmComponentName, mscLpX21ControlStatus=mscLpX21ControlStatus, mscLpSonetTestCustomizedPattern=mscLpSonetTestCustomizedPattern, mscLpLocalMsgBlockUsage=mscLpLocalMsgBlockUsage, mscLpSdhPathIfIndex=mscLpSdhPathIfIndex, mscLpDS1RowStatusTable=mscLpDS1RowStatusTable, mscLpDS3DS1ZeroCoding=mscLpDS3DS1ZeroCoding, mscLpSonetPathStorageType=mscLpSonetPathStorageType, mscLpE1TestFrmSize=mscLpE1TestFrmSize, mscLpDS1RxAisAlarm=mscLpDS1RxAisAlarm, mscLpDS3DS1ChanCellStorageType=mscLpDS3DS1ChanCellStorageType, mscLpDS3DS1FrmErrors=mscLpDS3DS1FrmErrors, mscLpSdhStateTable=mscLpSdhStateTable, mscLpE1ChanCidDataEntry=mscLpE1ChanCidDataEntry, mscLpE1AudioRowStatus=mscLpE1AudioRowStatus, mscLpDS3TxAis=mscLpDS3TxAis, mscLpE3TestSetupTable=mscLpE3TestSetupTable, mscLpDS3StateEntry=mscLpDS3StateEntry, mscLpE1RunningTime=mscLpE1RunningTime, mscLpX21TestFrmPatternType=mscLpX21TestFrmPatternType, mscLpJT2TestSetupEntry=mscLpJT2TestSetupEntry, mscLpDS1RaiAlarmType=mscLpDS1RaiAlarmType, mscLpE3G832TrailTraceMismatch=mscLpE3G832TrailTraceMismatch, mscLpDS1StorageType=mscLpDS1StorageType, mscLpE3CellRowStatusEntry=mscLpE3CellRowStatusEntry, mscLpE1TestIndex=mscLpE1TestIndex, mscLpE3G832TimingMarker=mscLpE3G832TimingMarker, mscLpMemoryUsageAvgMaxIndex=mscLpMemoryUsageAvgMaxIndex, mscLpDS3IfAdminStatus=mscLpDS3IfAdminStatus, mscLpE1TestDuration=mscLpE1TestDuration, mscLpSonetPathCellLcdAlarm=mscLpSonetPathCellLcdAlarm, mscLpX21IfAdminStatus=mscLpX21IfAdminStatus, mscLpMemoryUsageAvgMinValue=mscLpMemoryUsageAvgMinValue, mscLpSdhPathProvTable=mscLpSdhPathProvTable, mscLpSdhTestAdminState=mscLpSdhTestAdminState, mscLpE1ChanTestRowStatusTable=mscLpE1ChanTestRowStatusTable, mscLpDS1ChanTestBytesRx=mscLpDS1ChanTestBytesRx, mscLpSdhPathSignalLabelMismatch=mscLpSdhPathSignalLabelMismatch, mscLpE3CellAlarmActDelay=mscLpE3CellAlarmActDelay, mscLpJT2RxAisPhysicalAlarm=mscLpJT2RxAisPhysicalAlarm, mscLpDS1LineLength=mscLpDS1LineLength, mscLpE1ChanTcSigOneValue=mscLpE1ChanTcSigOneValue, mscLpDS3DS1ChanOperationalState=mscLpDS3DS1ChanOperationalState, mscLpJT2SnmpOperStatus=mscLpJT2SnmpOperStatus, mscLpSonetLofAlarm=mscLpSonetLofAlarm, mscLpSdhPathOperStatusTable=mscLpSdhPathOperStatusTable, mscLpSonetStatsTable=mscLpSonetStatsTable, mscLpHssiTestBitsRx=mscLpHssiTestBitsRx, mscLpSonetTestTimeRemaining=mscLpSonetTestTimeRemaining, mscLpCpuUtil=mscLpCpuUtil, mscLpE3TestRowStatus=mscLpE3TestRowStatus, mscLpDS3DS1TestFrmSize=mscLpDS3DS1TestFrmSize, mscLpV35TestBytesTx=mscLpV35TestBytesTx, mscLpHssiActualLinkMode=mscLpHssiActualLinkMode, mscLpOperEntry=mscLpOperEntry, mscLpJT2TxRaiAlarm=mscLpJT2TxRaiAlarm, mscLpSonetPathRowStatus=mscLpSonetPathRowStatus, mscLpDS3DS1ChanTestCauseOfTermination=mscLpDS3DS1ChanTestCauseOfTermination, mscLpJT2ControlStatus=mscLpJT2ControlStatus, mscLpDS3DS1ChanCellProvTable=mscLpDS3DS1ChanCellProvTable, logicalProcessorMIB=logicalProcessorMIB, mscLpSonetIfIndex=mscLpSonetIfIndex, mscLpE1ChanTestBytesRx=mscLpE1ChanTestBytesRx, mscLpX21TestBytesTx=mscLpX21TestBytesTx, mscLpE1ChanVendor=mscLpE1ChanVendor, mscLpDS1ClockingSource=mscLpDS1ClockingSource, mscLpDS3CellStorageType=mscLpDS3CellStorageType, mscLpHssiTestFrmRx=mscLpHssiTestFrmRx, mscLpE1Chan=mscLpE1Chan, mscLpHssiTestCustomizedPattern=mscLpHssiTestCustomizedPattern, mscLpDS3DS1ChanCellOperTable=mscLpDS3DS1ChanCellOperTable, mscLpSdhFarEndLineFailures=mscLpSdhFarEndLineFailures, mscLpDS3AdminInfoTable=mscLpDS3AdminInfoTable, mscLpV35StorageType=mscLpV35StorageType, mscLpJT2TestIndex=mscLpJT2TestIndex, mscLpDS1ChanTcReplacementData=mscLpDS1ChanTcReplacementData, mscLpSdhTestBytesTx=mscLpSdhTestBytesTx, mscLpSonetTestRowStatusEntry=mscLpSonetTestRowStatusEntry, mscLpDS3CBitIndex=mscLpDS3CBitIndex, mscLpHssiTestErroredFrmRx=mscLpHssiTestErroredFrmRx, mscLpMemoryUsageIndex=mscLpMemoryUsageIndex, mscLpE3PlcpUnavailSec=mscLpE3PlcpUnavailSec, mscLpDS1ChanTestIndex=mscLpDS1ChanTestIndex, mscLpDS1ChanCell=mscLpDS1ChanCell, mscLpE1RaiClearAlarmTime=mscLpE1RaiClearAlarmTime, mscLpHssiTestUsageState=mscLpHssiTestUsageState, mscLpDS3DS1ChanTest=mscLpDS3DS1ChanTest, mscLpE3G832ProvisionedEntry=mscLpE3G832ProvisionedEntry, mscLpSdhLineCodeViolations=mscLpSdhLineCodeViolations, mscLpDS1TestOperationalState=mscLpDS1TestOperationalState, mscLpDS1ChanAdminInfoTable=mscLpDS1ChanAdminInfoTable, mscLpE1ChanTcRowStatusTable=mscLpE1ChanTcRowStatusTable, mscLpE3PlcpErrorFreeSec=mscLpE3PlcpErrorFreeSec, mscLpE1ChanSnmpOperStatus=mscLpE1ChanSnmpOperStatus, mscLpV35SnmpOperStatus=mscLpV35SnmpOperStatus, mscLpLocalMsgBlockUsageMin=mscLpLocalMsgBlockUsageMin, mscLpJT2IfAdminStatus=mscLpJT2IfAdminStatus, mscLpDS1ChanProvTable=mscLpDS1ChanProvTable, mscLpDS3DS1ChanStateEntry=mscLpDS3DS1ChanStateEntry, mscLpE1TestUsageState=mscLpE1TestUsageState, mscLpDS1TestTimeRemaining=mscLpDS1TestTimeRemaining, mscLpDS3PathUnavailSec=mscLpDS3PathUnavailSec, mscLpSdhPathIfAdminStatus=mscLpSdhPathIfAdminStatus, mscLpE3AdminState=mscLpE3AdminState, mscLpHssiActualTxLineSpeed=mscLpHssiActualTxLineSpeed, mscLpMemoryUsageAvgMaxTable=mscLpMemoryUsageAvgMaxTable, mscLpV35TestTimeRemaining=mscLpV35TestTimeRemaining, mscLpDS1LineType=mscLpDS1LineType, mscLpV35Index=mscLpV35Index, mscLpSonetSectLosSec=mscLpSonetSectLosSec, mscLpDS3DS1RowStatusTable=mscLpDS3DS1RowStatusTable, mscLpDS1ChanCellStorageType=mscLpDS1ChanCellStorageType, mscLpE1RxAisAlarm=mscLpE1RxAisAlarm, mscLpE1ChanCellOperTable=mscLpE1ChanCellOperTable, mscLpDS3DS1ChanVendor=mscLpDS3DS1ChanVendor, mscLpSdhPathAdminState=mscLpSdhPathAdminState, mscLpE1DspIndex=mscLpE1DspIndex, mscLpMemoryUsageAvgMaxValue=mscLpMemoryUsageAvgMaxValue, mscLpSonetPathRowStatusEntry=mscLpSonetPathRowStatusEntry, mscLpDS3CellRowStatusEntry=mscLpDS3CellRowStatusEntry, mscLpSonetPathCidDataTable=mscLpSonetPathCidDataTable, mscLpDS1ChanTestDuration=mscLpDS1ChanTestDuration, mscLpDS3DS1ErrorFreeSec=mscLpDS3DS1ErrorFreeSec, mscLpEngDsOvProvEntry=mscLpEngDsOvProvEntry, mscLpMemoryUsageAvgEntry=mscLpMemoryUsageAvgEntry, mscLpE1ProceduralStatus=mscLpE1ProceduralStatus, mscLpHssiStateTable=mscLpHssiStateTable, mscLpX21TestCustomizedPattern=mscLpX21TestCustomizedPattern, mscLpE1StorageType=mscLpE1StorageType, mscLpE1ChanTestStateEntry=mscLpE1ChanTestStateEntry, mscLpMemoryUsageTable=mscLpMemoryUsageTable, mscLpHssiAdminInfoEntry=mscLpHssiAdminInfoEntry, mscLpSonetPathCellUncorrectableHecErrors=mscLpSonetPathCellUncorrectableHecErrors, mscLpLogicalProcessorType=mscLpLogicalProcessorType, mscLpDS3TestFrmPatternType=mscLpDS3TestFrmPatternType, mscLpCpuUtilAvgMax=mscLpCpuUtilAvgMax, mscLpDS1ChanTcSigOneValue=mscLpDS1ChanTcSigOneValue, mscLpUtilEntry=mscLpUtilEntry, mscLpSonetPathCellCorrectableHeaderErrors=mscLpSonetPathCellCorrectableHeaderErrors, mscLpMemoryUsageEntry=mscLpMemoryUsageEntry, mscLpDS3CBitFarEndUnavailSec=mscLpDS3CBitFarEndUnavailSec, mscLpJT2ApplicationFramerName=mscLpJT2ApplicationFramerName, mscLpX21TestBitsRx=mscLpX21TestBitsRx, mscLpSonetPathFarEndPathCodeViolations=mscLpSonetPathFarEndPathCodeViolations, mscLpJT2ErrorFreeSec=mscLpJT2ErrorFreeSec, mscLpV35TestRowStatus=mscLpV35TestRowStatus, mscLpDS3DS1ChanCellComponentName=mscLpDS3DS1ChanCellComponentName, mscLpE3RowStatus=mscLpE3RowStatus, mscLpE1ChanTestBitsTx=mscLpE1ChanTestBitsTx, mscLpE3CellRowStatus=mscLpE3CellRowStatus, mscLpE3Vendor=mscLpE3Vendor, mscLpE1IfEntryTable=mscLpE1IfEntryTable, mscLpDS3DS1UnavailSec=mscLpDS3DS1UnavailSec, mscLpE3TxAis=mscLpE3TxAis, mscLpSonetIfEntryTable=mscLpSonetIfEntryTable, mscLpMsgBlockUsageAvgMin=mscLpMsgBlockUsageAvgMin, mscLpE1ChanCellUncorrectableHecErrors=mscLpE1ChanCellUncorrectableHecErrors, mscLpHssiProvTable=mscLpHssiProvTable, mscLpJT2CellRowStatus=mscLpJT2CellRowStatus, mscLpJT2CellProvEntry=mscLpJT2CellProvEntry, mscLpSdhPathOperTable=mscLpSdhPathOperTable, mscLpJT2CellScrambleCellPayload=mscLpJT2CellScrambleCellPayload, mscLpDS3DS1Index=mscLpDS3DS1Index, mscLpDS3LofAlarm=mscLpDS3LofAlarm, mscLpDS1ChanTestElapsedTime=mscLpDS1ChanTestElapsedTime, mscLpSonetPathUsageState=mscLpSonetPathUsageState, mscLpE1TestComponentName=mscLpE1TestComponentName, mscLpSonetOperEntry=mscLpSonetOperEntry, mscLpSdhPathCellCorrectSingleBitHeaderErrors=mscLpSdhPathCellCorrectSingleBitHeaderErrors, mscLpDS3DS1ChanTestResultsEntry=mscLpDS3DS1ChanTestResultsEntry, mscLpHssiStateEntry=mscLpHssiStateEntry, mscLpDS3TestDataStartDelay=mscLpDS3TestDataStartDelay, mscLpDS1ChanOperStatusTable=mscLpDS1ChanOperStatusTable, mscLpDS3DS1Chan=mscLpDS3DS1Chan, mscLpDS3DS1ChanTestFrmTx=mscLpDS3DS1ChanTestFrmTx, mscLpE1ChanTimeslotDataRate=mscLpE1ChanTimeslotDataRate, mscLpV35Test=mscLpV35Test, mscLpSonetPathOperTable=mscLpSonetPathOperTable, mscLpSonetPathFarEndPathFailures=mscLpSonetPathFarEndPathFailures, mscLpV35TestBitsRx=mscLpV35TestBitsRx, mscLpE3PlcpIndex=mscLpE3PlcpIndex, mscLpSdhPathCellProvTable=mscLpSdhPathCellProvTable, mscLpE3G832RowStatus=mscLpE3G832RowStatus, mscLpE3PlcpOperationalTable=mscLpE3PlcpOperationalTable, mscLpX21AdminInfoTable=mscLpX21AdminInfoTable, mscLpJT2=mscLpJT2, mscLpSdhFarEndLineAisSec=mscLpSdhFarEndLineAisSec, mscLpE1TestRowStatusTable=mscLpE1TestRowStatusTable, mscLpE3RowStatusTable=mscLpE3RowStatusTable, mscLpV35TestBitErrorRate=mscLpV35TestBitErrorRate, mscLpE1TxRaiAlarm=mscLpE1TxRaiAlarm, mscLpDS1CustomerIdentifier=mscLpDS1CustomerIdentifier, mscLpE3ProvEntry=mscLpE3ProvEntry, mscLpX21LineTerminationRequired=mscLpX21LineTerminationRequired, mscLpV35Vendor=mscLpV35Vendor, mscLpE1ChanStorageType=mscLpE1ChanStorageType, mscLpSonetPathRowStatusTable=mscLpSonetPathRowStatusTable, mscLpDS1ChanTcProvEntry=mscLpDS1ChanTcProvEntry, mscLpHssiIfEntryTable=mscLpHssiIfEntryTable, mscLpSonetFarEndLineAisSec=mscLpSonetFarEndLineAisSec, mscLpE3ErrorFreeSec=mscLpE3ErrorFreeSec, mscLpDS1ChanTestDisplayInterval=mscLpDS1ChanTestDisplayInterval, mscLpSdhSectSevErroredSec=mscLpSdhSectSevErroredSec, mscLpJT2TestCustomizedPattern=mscLpJT2TestCustomizedPattern, mscLpSonetLineAisSec=mscLpSonetLineAisSec, mscLpDS1Chan=mscLpDS1Chan, mscLpSdhPathCellStatsEntry=mscLpSdhPathCellStatsEntry, mscLpDS1ChanTestSetupEntry=mscLpDS1ChanTestSetupEntry, mscLpSdhVendor=mscLpSdhVendor, mscLpDS1ChanCellOperEntry=mscLpDS1ChanCellOperEntry, mscLpE3TestRowStatusTable=mscLpE3TestRowStatusTable, mscLpSdhTestCustomizedPattern=mscLpSdhTestCustomizedPattern, mscLpJT2TestComponentName=mscLpJT2TestComponentName, mscLpE1Audio=mscLpE1Audio, mscLpX21EnableDynamicSpeed=mscLpX21EnableDynamicSpeed, mscLpDS3TestIndex=mscLpDS3TestIndex, mscLpDS1TestStateTable=mscLpDS1TestStateTable, mscLpLocalMsgBlockCapacity=mscLpLocalMsgBlockCapacity, mscLpHssiCidDataEntry=mscLpHssiCidDataEntry, mscLpSonetPathSnmpOperStatus=mscLpSonetPathSnmpOperStatus, mscLpV35RowStatusEntry=mscLpV35RowStatusEntry, mscLpDS3DS1CommentText=mscLpDS3DS1CommentText, mscLpE1AudioRowStatusTable=mscLpE1AudioRowStatusTable, mscLpHssiTestSetupEntry=mscLpHssiTestSetupEntry, mscLpDS3DS1TestStorageType=mscLpDS3DS1TestStorageType, mscLpE1ChanIndex=mscLpE1ChanIndex, mscLpDS3DS1ChanCellUncorrectableHecErrors=mscLpDS3DS1ChanCellUncorrectableHecErrors, mscLpDS1ChanTcSigTwoIndex=mscLpDS1ChanTcSigTwoIndex, mscLpDS3DS1StatsEntry=mscLpDS3DS1StatsEntry, mscLpSdhLineErroredSec=mscLpSdhLineErroredSec, mscLpHssiTestFrmSize=mscLpHssiTestFrmSize, mscLpDS3TestStorageType=mscLpDS3TestStorageType, mscLpDS1TestRowStatus=mscLpDS1TestRowStatus, mscLpDS3DS1ChanCellRowStatusTable=mscLpDS3DS1ChanCellRowStatusTable, mscLpDS3DS1ChanTestStateTable=mscLpDS3DS1ChanTestStateTable, mscLpHssiOperEntry=mscLpHssiOperEntry, mscLpSdhTestStorageType=mscLpSdhTestStorageType, mscLpE3AvailabilityStatus=mscLpE3AvailabilityStatus, mscLpV35TestStorageType=mscLpV35TestStorageType, mscLpV35IfEntryEntry=mscLpV35IfEntryEntry, mscLpSonetRowStatus=mscLpSonetRowStatus, mscLpSdhPathStorageType=mscLpSdhPathStorageType, mscLpE1ChanFlmFlmStatus=mscLpE1ChanFlmFlmStatus, mscLpE1SlipErrors=mscLpE1SlipErrors, mscLpDS3DS1ChanTcIndex=mscLpDS3DS1ChanTcIndex, mscLpDS3CBitCbitErroredSec=mscLpDS3CBitCbitErroredSec, mscLpDS3DS1ChanTimeslots=mscLpDS3DS1ChanTimeslots, mscLpE1TestTimeRemaining=mscLpE1TestTimeRemaining)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", mscLpDS1ChanComponentName=mscLpDS1ChanComponentName, mscLpSdhSnmpOperStatus=mscLpSdhSnmpOperStatus, mscLpV35RowStatus=mscLpV35RowStatus, mscLpDS3Plcp=mscLpDS3Plcp, mscLpSonetTestBitsRx=mscLpSonetTestBitsRx, mscLpSonetPathCellTransmitCellUtilization=mscLpSonetPathCellTransmitCellUtilization, mscLpJT2CellProvTable=mscLpJT2CellProvTable, mscLpSonetPathPathErrorFreeSec=mscLpSonetPathPathErrorFreeSec, mscLpE1ChanTcIndex=mscLpE1ChanTcIndex, mscLpSdhStateEntry=mscLpSdhStateEntry, mscLpHssiReadyLineState=mscLpHssiReadyLineState, mscLpHssiTestTimeRemaining=mscLpHssiTestTimeRemaining, mscLpSonetIfAdminStatus=mscLpSonetIfAdminStatus, mscLpE1ChanTestAdminState=mscLpE1ChanTestAdminState, mscLpDS3DS1ChanTestElapsedTime=mscLpDS3DS1ChanTestElapsedTime, mscLpV35CidDataTable=mscLpV35CidDataTable, mscLpSdhPathStandbyStatus=mscLpSdhPathStandbyStatus, mscLpStateTable=mscLpStateTable, mscLpE3G832OperationalEntry=mscLpE3G832OperationalEntry, mscLpDS3DS1ChanCellProvEntry=mscLpDS3DS1ChanCellProvEntry, mscLpUtilTable=mscLpUtilTable, mscLpDS1TestComponentName=mscLpDS1TestComponentName, mscLpSdhPathAvailabilityStatus=mscLpSdhPathAvailabilityStatus, mscLpMemoryUsageAvgIndex=mscLpMemoryUsageAvgIndex, mscLpE1TestRowStatusEntry=mscLpE1TestRowStatusEntry, mscLpSdhTestBitErrorRate=mscLpSdhTestBitErrorRate, mscLpDS1BpvErrors=mscLpDS1BpvErrors, mscLpSdhTxRdi=mscLpSdhTxRdi, mscLpSdhPathRowStatus=mscLpSdhPathRowStatus, mscLpSdhTestResultsTable=mscLpSdhTestResultsTable, mscLpDS1ChanTestBitsRx=mscLpDS1ChanTestBitsRx, mscLpE3LinkAlarmScanInterval=mscLpE3LinkAlarmScanInterval, mscLpE1ChanTestStateTable=mscLpE1ChanTestStateTable, mscLpE1ChanTestResultsEntry=mscLpE1ChanTestResultsEntry, mscLpE1ChanFlm=mscLpE1ChanFlm, mscLpDS3CellLcdAlarm=mscLpDS3CellLcdAlarm, mscLpDS3TestFrmRx=mscLpDS3TestFrmRx, mscLpE1ErrorFreeSec=mscLpE1ErrorFreeSec, mscLpE3LineLosSec=mscLpE3LineLosSec, mscLpSonetTestBytesTx=mscLpSonetTestBytesTx, mscLpE1TestSetupTable=mscLpE1TestSetupTable, mscLpCapTable=mscLpCapTable, mscLpDS1AdminInfoTable=mscLpDS1AdminInfoTable, mscLpV35ProvEntry=mscLpV35ProvEntry, mscLpDS1TestDuration=mscLpDS1TestDuration, mscLpDS3DS1StateTable=mscLpDS3DS1StateTable, mscLpSonetFarEndLineUnavailSec=mscLpSonetFarEndLineUnavailSec, mscLpSdhPath=mscLpSdhPath, mscLpJT2BpvErrors=mscLpJT2BpvErrors, mscLpDS3CellRowStatusTable=mscLpDS3CellRowStatusTable, mscLpDS3DS1ChanTcRowStatusEntry=mscLpDS3DS1ChanTcRowStatusEntry, mscLpDS3TestCauseOfTermination=mscLpDS3TestCauseOfTermination, mscLpE1ChanTestType=mscLpE1ChanTestType, mscLpSdhFarEndLineErrorFreeSec=mscLpSdhFarEndLineErrorFreeSec, mscLpE3PlcpStatsEntry=mscLpE3PlcpStatsEntry, mscLpDS3TestFrmSize=mscLpDS3TestFrmSize, mscLpSonetTestUsageState=mscLpSonetTestUsageState, mscLpHssiCommentText=mscLpHssiCommentText, mscLpHssiRowStatus=mscLpHssiRowStatus, mscLpE1ChanTestRowStatusEntry=mscLpE1ChanTestRowStatusEntry, mscLpJT2Test=mscLpJT2Test, mscLpHssiStandbyStatus=mscLpHssiStandbyStatus, mscLpDS3DS1ChanTcSigTwoTable=mscLpDS3DS1ChanTcSigTwoTable, mscLpE1ChanTcIngressConditioning=mscLpE1ChanTcIngressConditioning, mscLpSonetStateTable=mscLpSonetStateTable, mscLpSonetPathSignalLabelMismatch=mscLpSonetPathSignalLabelMismatch, mscLpDS3PlcpStatsEntry=mscLpDS3PlcpStatsEntry, mscLpE1ErroredSec=mscLpE1ErroredSec, mscLpCapEntry=mscLpCapEntry, mscLpSdhIfAdminStatus=mscLpSdhIfAdminStatus, mscLpHssiIfAdminStatus=mscLpHssiIfAdminStatus, mscLpE1TestElapsedTime=mscLpE1TestElapsedTime, mscLpDS1Index=mscLpDS1Index, mscLpSdhAdminState=mscLpSdhAdminState, mscLpSdhErrorFreeSec=mscLpSdhErrorFreeSec, mscLpE1ChanTcEgressConditioning=mscLpE1ChanTcEgressConditioning, mscLpE3G832FarEndSefAisSec=mscLpE3G832FarEndSefAisSec, mscLpSonetStandbyStatus=mscLpSonetStandbyStatus, mscLpDS1ProvTable=mscLpDS1ProvTable, mscLpEngDsIndex=mscLpEngDsIndex, mscLpX21AdminState=mscLpX21AdminState, mscLpSdhTestUsageState=mscLpSdhTestUsageState, mscLpHssiTestSetupTable=mscLpHssiTestSetupTable, mscLpJT2OperStatusTable=mscLpJT2OperStatusTable, mscLpSdhPathPathSevErroredSec=mscLpSdhPathPathSevErroredSec, mscLpJT2TestBitErrorRate=mscLpJT2TestBitErrorRate, mscLpE1Index=mscLpE1Index)
