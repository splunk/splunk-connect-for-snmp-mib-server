#
# PySNMP MIB module CISCO-WAN-AXIPOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-AXIPOP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:03:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
frPortServiceQueGrp, frPortCnt, bbChanCnfGrp, ausmPortCnt, voice, frPortCnf, atmLineCntGrp, cardSpecific, cardGeneric, atmLmiSignaling, vismPort, vismChanGrp, bbIfCnf, virtualInterface, axisDiagnostics, bbIfCnfResPartGrp, circuitEmulation, frPortCntSig, frChan, ausmChan, rpmInterface, x21, frameRelay, frPortCnfResPartGrp, bbIfCnt, bbChanCntGrp, cesmChan, dsx0Vism, rpmChanGrp, atmLineCnfGrp, rpmPort, ausmPort, basisLines, vismChanCnfGrp, frPortCnfSig, basisAsm, frPortCnfX21PortGrp, bbChanStateGrp, par, bbIfStateGrp, atmAddressRegistration, atm, frPort, ausmPortCnf = mibBuilder.importSymbols("BASIS-MIB", "frPortServiceQueGrp", "frPortCnt", "bbChanCnfGrp", "ausmPortCnt", "voice", "frPortCnf", "atmLineCntGrp", "cardSpecific", "cardGeneric", "atmLmiSignaling", "vismPort", "vismChanGrp", "bbIfCnf", "virtualInterface", "axisDiagnostics", "bbIfCnfResPartGrp", "circuitEmulation", "frPortCntSig", "frChan", "ausmChan", "rpmInterface", "x21", "frameRelay", "frPortCnfResPartGrp", "bbIfCnt", "bbChanCntGrp", "cesmChan", "dsx0Vism", "rpmChanGrp", "atmLineCnfGrp", "rpmPort", "ausmPort", "basisLines", "vismChanCnfGrp", "frPortCnfSig", "basisAsm", "frPortCnfX21PortGrp", "bbChanStateGrp", "par", "bbIfStateGrp", "atmAddressRegistration", "atm", "frPort", "ausmPortCnf")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Bits, Unsigned32, NotificationType, Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Counter64, iso, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Bits", "Unsigned32", "NotificationType", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter64", "iso", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class RpmNsapAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class IfNsapAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class NetPrefix(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 13)

atmAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2))
atmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: atmAddressTable.setStatus('mandatory')
atmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "axisAtmAddressPort"), (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmAddressAtmAddress"))
if mibBuilder.loadTexts: atmAddressEntry.setStatus('mandatory')
axisAtmAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressPort.setStatus('mandatory')
axisAtmAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 2), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressAtmAddress.setStatus('mandatory')
axisAtmAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressStatus.setStatus('mandatory')
atmNetPrefixGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1))
atmNetPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: atmNetPrefixTable.setStatus('mandatory')
atmNetPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "axisAtmNetPrefixPort"), (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmNetPrefixPrefix"))
if mibBuilder.loadTexts: atmNetPrefixEntry.setStatus('mandatory')
axisAtmNetPrefixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixPort.setStatus('mandatory')
axisAtmNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 2), NetPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixPrefix.setStatus('mandatory')
axisAtmNetPrefixAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisAtmNetPrefixAdminStatus.setStatus('mandatory')
axisAtmNetPrefixOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("registering", 1), ("de-registering", 2), ("registered", 3), ("de-registered", 4), ("failRegistering", 5), ("failDe-registering", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixOperStatus.setStatus('mandatory')
cardResourcePartition = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 2, 9))
cardLcnPartitionType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPartition", 1), ("controllerBased", 2), ("portControllerBased", 3))).clone('noPartition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardLcnPartitionType.setStatus('mandatory')
cardResPartGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2), )
if mibBuilder.loadTexts: cardResPartGrpTable.setStatus('mandatory')
cardResPartGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cardResPartCtrlrNum"))
if mibBuilder.loadTexts: cardResPartGrpEntry.setStatus('mandatory')
cardResPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardResPartCtrlrNum.setStatus('mandatory')
cardResPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardResPartRowStatus.setStatus('mandatory')
cardResPartNumOfLcnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardResPartNumOfLcnAvail.setStatus('mandatory')
onlineDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 6, 3))
diagType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("post", 1), ("onlinediag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagType.setStatus('mandatory')
diagResult = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagResult.setStatus('mandatory')
diagTestId = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagTestId.setStatus('mandatory')
bert = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 6, 1))
bertControl = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("acquireBert", 1), ("releaseBert", 2), ("cnfBert", 3), ("startBert", 4), ("modBert", 5), ("delBert", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertControl.setStatus('mandatory')
bertResourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("free", 1), ("inUse", 2), ("cleanupPending", 3))).clone('free')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertResourceStatus.setStatus('mandatory')
bertOwner = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertOwner.setStatus('mandatory')
bertUserId = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertUserId.setStatus('mandatory')
bertStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("bertInSync", 2), ("bertOutOfSync", 3), ("searchingDDSCommands", 4), ("farEndInLoop", 5), ("facilityInLoop", 6), ("portFacilityFifoFault", 7), ("portFacilityFifoOutOfSync", 8), ("metallicInLoop", 9), ("bertFailed", 10))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertStatus.setStatus('mandatory')
bertSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertSlotNumber.setStatus('mandatory')
bertTestMedium = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertTestMedium.setStatus('mandatory')
bertPort = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPort.setStatus('mandatory')
bertLine = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertLine.setStatus('mandatory')
bertMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bertPatternTest", 1), ("ddsSeek", 2), ("loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertMode.setStatus('mandatory')
bertDeviceToLoop = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noLatchOCUwith1", 1), ("noLatchOCUwitout1", 2), ("noLatchCSU", 3), ("noLatchDSU", 4), ("latchDS0Drop", 5), ("latchDS0Line", 6), ("latchOCU", 7), ("latchCSU", 8), ("latchDSU", 9), ("latchHL96", 10), ("v54Polynomial", 11), ("inband", 12), ("esf", 13), ("metallic", 14), ("noDevice", 15), ("smartJackInband", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertDeviceToLoop.setStatus('mandatory')
bertDS0DPIterationCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertDS0DPIterationCount.setStatus('mandatory')
bertPattern = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("allZeros", 1), ("allOnes", 2), ("alternateONeZero", 3), ("doubleOneZero", 4), ("fifteenBit", 5), ("twentyBit", 6), ("twentyBitQRSS", 7), ("twentythreeBit", 8), ("oneInEight", 9), ("threeIntwentyfour", 10), ("dds-1", 11), ("dds-2", 12), ("dds-3", 13), ("dds-4", 14), ("dds-5", 15), ("nineBit", 16), ("elevenBit", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPattern.setStatus('mandatory')
bertLoopback = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("farEndLoopback", 1), ("facilityLoopback", 2), ("metallicLoopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertLoopback.setStatus('mandatory')
bertLoopbackOperation = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopUp", 1), ("loopDown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertLoopbackOperation.setStatus('mandatory')
bertDS0Speed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed56k", 1), ("speed64k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDS0Speed.setStatus('mandatory')
bertTimeSlots = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTimeSlots.setStatus('mandatory')
bertStartTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertStartTime.setStatus('mandatory')
bertStartDate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertStartDate.setStatus('mandatory')
bertBitCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitCount.setStatus('mandatory')
bertBitErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitErrorCount.setStatus('mandatory')
bertErrorInjectCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErrorInjectCount.setStatus('mandatory')
bertCleanupAction = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("noAction", 1), ("smCleanup", 2), ("latchDS0DropLoopdown", 3), ("latchDS0LineLoopdown", 4), ("latchOCULoopdown", 5), ("latchCSULoopdown", 6), ("latchDSULoopdown", 7), ("latchHL96Loopdown", 8), ("v54PolynomialLoopdown", 9), ("inbandLoopdown", 10), ("esfLoopdown", 11), ("facilityLoopdown", 12), ("metallicLoopdown", 13), ("smartJackInbandLoopdown", 14))).clone('noAction')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertCleanupAction.setStatus('mandatory')
bertAbortReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ascStateChange", 1), ("smStateChange", 2), ("srmStateChange", 3), ("coreCardSwitch", 4), ("smRedundancySwitch", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertAbortReason.setStatus('mandatory')
bertDDSSeekResultsTableFirstIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDDSSeekResultsTableFirstIndex.setStatus('mandatory')
bertDDSSeekResultsTableLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDDSSeekResultsTableLastIndex.setStatus('mandatory')
bertDDSSeekResultsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27), )
if mibBuilder.loadTexts: bertDDSSeekResultsTable.setStatus('mandatory')
bertDDSSeekResultsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bertDDSSeekResultsTableIndex"))
if mibBuilder.loadTexts: bertDDSSeekResultsTableEntry.setStatus('mandatory')
bertDDSSeekResultsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDDSSeekResultsTableIndex.setStatus('mandatory')
bertDDSCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 10, 40, 44, 90, 126, 86, 114, 26, 42, 120, 28, 108, 58, 24, 50))).clone(namedValues=NamedValues(("abnormalStationCondition", 30), ("block", 10), ("channelLoopback", 40), ("dsuLoopback", 44), ("farEndVoice", 90), ("idle", 126), ("loopbackEnable", 86), ("mjuAlert", 114), ("muxOutOfSync", 26), ("ocuLoopback", 42), ("release", 120), ("test", 28), ("testAlert", 108), ("transitionInProgress", 58), ("unassignedMuxChannel", 24), ("unnamed", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDDSCode.setStatus('mandatory')
bertSupportedTestsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28), )
if mibBuilder.loadTexts: bertSupportedTestsTable.setStatus('mandatory')
bertSupportedTestsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bertSupportedTestsTableIndex"))
if mibBuilder.loadTexts: bertSupportedTestsTableEntry.setStatus('mandatory')
bertSupportedTestsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSupportedTestsTableIndex.setStatus('mandatory')
bertSupportFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertSupportFlag.setStatus('mandatory')
bertTestMediumMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertTestMediumMask.setStatus('mandatory')
bertModeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertModeMask.setStatus('mandatory')
bertDeviceToLoopMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertDeviceToLoopMask.setStatus('mandatory')
bertPatternMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertPatternMask.setStatus('mandatory')
bertLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertLoopbackMask.setStatus('mandatory')
bertCardT1E1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertCardT1E1Type.setStatus('mandatory')
srm3T3CnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 10))
srm3T3CnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1), )
if mibBuilder.loadTexts: srm3T3CnfGrpTable.setStatus('mandatory')
srm3T3CnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "srmT3LineNum"), (0, "CISCO-WAN-AXIPOP-MIB", "srmStartT1LineNum"))
if mibBuilder.loadTexts: srm3T3CnfGrpEntry.setStatus('mandatory')
srmT3LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srmT3LineNum.setStatus('mandatory')
srmStartT1LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srmStartT1LineNum.setStatus('mandatory')
srmT1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmT1RowStatus.setStatus('mandatory')
srmTargetSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmTargetSlotNum.setStatus('mandatory')
srmTargetSlotLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmTargetSlotLineNum.setStatus('mandatory')
srmeCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 22))
srmeCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1), )
if mibBuilder.loadTexts: srmeCnfGrpTable.setStatus('mandatory')
srmeCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "srmeLineNum"), (0, "CISCO-WAN-AXIPOP-MIB", "srmeStartVtNum"))
if mibBuilder.loadTexts: srmeCnfGrpEntry.setStatus('mandatory')
srmeLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srmeLineNum.setStatus('mandatory')
srmeStartVtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srmeStartVtNum.setStatus('mandatory')
srmeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmeRowStatus.setStatus('mandatory')
srmeTargetSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmeTargetSlotNum.setStatus('mandatory')
srmeTargetSlotLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmeTargetSlotLineNum.setStatus('mandatory')
srmeVtFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("sf", 2), ("esf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmeVtFramingType.setStatus('mandatory')
serialInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 1))
serialPortNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortNumOfValidEntries.setStatus('mandatory')
serialInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1), )
if mibBuilder.loadTexts: serialInterfaceTable.setStatus('mandatory')
serialInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "serialPortNum"))
if mibBuilder.loadTexts: serialInterfaceEntry.setStatus('mandatory')
serialPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortNum.setStatus('mandatory')
serialPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("debug", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortType.setStatus('mandatory')
serialPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortEnable.setStatus('mandatory')
serialPortbps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bps9600", 1), ("bps2400", 2), ("bps19200", 3))).clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortbps.setStatus('mandatory')
ethernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 2))
ethernetPhysicaAddress = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPhysicaAddress.setStatus('mandatory')
asmAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1), )
if mibBuilder.loadTexts: asmAlarmTable.setStatus('mandatory')
asmAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "asmAlarmNum"))
if mibBuilder.loadTexts: asmAlarmEntry.setStatus('mandatory')
asmAlarmNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmNum.setStatus('mandatory')
asmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alarmOther", 1), ("alarmTemperature", 2), ("alarmPSU", 3), ("alarmDCLevel", 4), ("alarmFanUnit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmType.setStatus('mandatory')
asmAlarmUnitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmUnitNum.setStatus('mandatory')
asmAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmThreshold.setStatus('mandatory')
asmAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarmMinor", 1), ("alarmMajor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmAlarmSeverity.setStatus('mandatory')
asmUnitMeasurable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmUnitMeasurable.setStatus('mandatory')
asmUnitMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmUnitMeasuredValue.setStatus('mandatory')
asmPhysicalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmPhysicalAlarmState.setStatus('mandatory')
asmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asmAlarmNoAction", 1), ("asmAlarmClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asmClrButton.setStatus('mandatory')
asmNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmNumOfValidEntries.setStatus('mandatory')
asmShelfAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarmOff", 1), ("alarmOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asmShelfAlarmState.setStatus('mandatory')
aumClockConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 1))
aumAddressTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 2))
bnmCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 3))
bnmLineInterfaceMode = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 12))
primaryMuxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalOscillator", 1), ("aumInbandClock", 2), ("externalClock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryMuxClockSource.setStatus('mandatory')
secondaryMuxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalOscillator", 1), ("aumInbandClock", 2), ("externalClock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryMuxClockSource.setStatus('mandatory')
currentClock = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("intOscillator", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentClock.setStatus('mandatory')
clockSwitchState = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("clockSrcChanged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSwitchState.setStatus('mandatory')
extClockPresent = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clkNotPresent", 1), ("clkPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extClockPresent.setStatus('mandatory')
extClkSrcImpedance = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohms75", 1), ("ohms100", 2), ("ohms120", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extClkSrcImpedance.setStatus('mandatory')
extClkConnectorType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("db15Type", 1), ("bncType", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extClkConnectorType.setStatus('mandatory')
aumAddressTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1), )
if mibBuilder.loadTexts: aumAddressTranslationTable.setStatus('mandatory')
aumAddressTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "connShelfNum"), (0, "CISCO-WAN-AXIPOP-MIB", "connSlotNum"), (0, "CISCO-WAN-AXIPOP-MIB", "connChanNum"))
if mibBuilder.loadTexts: aumAddressTranslationEntry.setStatus('mandatory')
connShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connShelfNum.setStatus('mandatory')
connSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSlotNum.setStatus('mandatory')
connChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connChanNum.setStatus('mandatory')
aumConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpConnection", 1), ("vcConnection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aumConnType.setStatus('mandatory')
connVPINum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connVPINum.setStatus('mandatory')
aumAddressTranslationDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2), )
if mibBuilder.loadTexts: aumAddressTranslationDeleteTable.setStatus('mandatory')
aumAddressTranslationDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "delShelfNum"), (0, "CISCO-WAN-AXIPOP-MIB", "delSlotNum"))
if mibBuilder.loadTexts: aumAddressTranslationDeleteEntry.setStatus('mandatory')
delShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delShelfNum.setStatus('mandatory')
delSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delSlotNum.setStatus('mandatory')
connNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connNumOfValidEntries.setStatus('mandatory')
bnmPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1), )
if mibBuilder.loadTexts: bnmPortCounterTable.setStatus('mandatory')
bnmPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bnmPortCounterIndex"))
if mibBuilder.loadTexts: bnmPortCounterEntry.setStatus('mandatory')
bnmPortCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortCounterIndex.setStatus('mandatory')
bnmPortRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortRcvCells.setStatus('mandatory')
bnmPortXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortXmtCells.setStatus('mandatory')
bnmPortCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bnmPortCounterNoAction", 1), ("bnmPortCounterClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnmPortCounterClrButton.setStatus('mandatory')
bnmPortRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortRcvCellRate.setStatus('mandatory')
bnmPortRcvUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortRcvUtilization.setStatus('mandatory')
bnmPortXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortXmtCellRate.setStatus('mandatory')
bnmPortXmtUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortXmtUtilization.setStatus('mandatory')
bnmPortCounterNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmPortCounterNumOfValidEntries.setStatus('mandatory')
bnmCellbusXmtCellCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmCellbusXmtCellCount.setStatus('mandatory')
bnmCellbusNoAckCellCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmCellbusNoAckCellCount.setStatus('mandatory')
bnmCellbusGrantCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmCellbusGrantCount.setStatus('mandatory')
bnmEgressXmtCellCountDuringAlarm = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmEgressXmtCellCountDuringAlarm.setStatus('mandatory')
bnmEgressInvalidCellCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmEgressInvalidCellCount.setStatus('mandatory')
bnmEgressInvalidCellHdr = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmEgressInvalidCellHdr.setStatus('mandatory')
bnmIngressInvalidCellCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmIngressInvalidCellCount.setStatus('mandatory')
bnmIngressInvalidCellHdr = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnmIngressInvalidCellHdr.setStatus('mandatory')
bnmCountersClrButton = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bnmCountersNoAction", 1), ("bnmCountersClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnmCountersClrButton.setStatus('mandatory')
bnmLineInterfaceFormat = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bnmSti", 1), ("bnmUni", 2), ("bnmNni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnmLineInterfaceFormat.setStatus('mandatory')
pxmClockConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 16))
pxmPrimaryMuxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pxmInbandClock1", 1), ("pxmServiceModuleClock1", 2), ("pxmTopSRMClock", 3), ("pxmExternalClock", 4), ("pxmInbandClock2", 5), ("pxmServiceModuleClock2", 6), ("pxmBottomSRMClock", 7), ("pxmInternalOscillator", 8), ("pxmExternalClock2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmPrimaryMuxClockSource.setStatus('mandatory')
pxmPrimaryInbandClockSourceLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmPrimaryInbandClockSourceLineNumber.setStatus('mandatory')
pxmPrimarySMClockSourceSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmPrimarySMClockSourceSlotNumber.setStatus('mandatory')
pxmSecondaryMuxClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pxmInbandClock1", 1), ("pxmServiceModuleClock1", 2), ("pxmTopSRMClock", 3), ("pxmExternalClock", 4), ("pxmInbandClock2", 5), ("pxmServiceModuleClock2", 6), ("pxmBottomSRMClock", 7), ("pxmInternalOscillator", 8), ("pxmExternalClock2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmSecondaryMuxClockSource.setStatus('mandatory')
pxmSecondaryInbandClockSourceLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmSecondaryInbandClockSourceLineNumber.setStatus('mandatory')
pxmSecondarySMClockSourceSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmSecondarySMClockSourceSlotNumber.setStatus('mandatory')
pxmCurrentClock = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("intOscillator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmCurrentClock.setStatus('mandatory')
pxmPreviousClock = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("intOscillator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmPreviousClock.setStatus('mandatory')
pxmExtClockPresent = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clkNotPresent", 1), ("clkPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClockPresent.setStatus('mandatory')
pxmExtClkSrcImpedance = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohms75", 1), ("ohms100", 2), ("ohms120", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClkSrcImpedance.setStatus('mandatory')
pxmExtClkConnectorType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45Type", 1), ("smbType", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClkConnectorType.setStatus('mandatory')
pxmClkStratumLevel = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stratumUnknown", 1), ("stratumLevel1", 2), ("stratumLevel2", 3), ("stratumLevel3E", 4), ("stratumLevel3", 5), ("stratumLevel4", 6), ("stratumLevel4E", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmClkStratumLevel.setStatus('mandatory')
pxmClkErrReason = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("goodClk", 1), ("unknownReason", 2), ("noClkSignal", 3), ("freqTooHigh", 4), ("freqTooLow", 5), ("excessiveJitter", 6), ("missingCard", 7), ("missingLogicalIf", 8), ("noClock", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmClkErrReason.setStatus('mandatory')
pxmExtClock2Present = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clkNotPresent", 1), ("clkPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClock2Present.setStatus('mandatory')
pxmExtClk2SrcImpedance = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohms75", 1), ("ohms100", 2), ("ohms120", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClk2SrcImpedance.setStatus('mandatory')
pxmExtClk2ConnectorType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45Type", 1), ("smbType", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmExtClk2ConnectorType.setStatus('mandatory')
ascFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 5))
redundancyAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redNotAllowed", 1), ("redAllowed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyAllowed.setStatus('mandatory')
coreCardCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 20))
switchCoreCard = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("doswitchcc", 2), ("instswitchcc", 3), ("fallbackswitchcc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchCoreCard.setStatus('mandatory')
ascChanStateSigLmiGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3))
ascChanStateSigLmiGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1), )
if mibBuilder.loadTexts: ascChanStateSigLmiGrpTable.setStatus('mandatory')
ascChanStateSigLmiGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccLineNum"), (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccVpi"), (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccVci"))
if mibBuilder.loadTexts: ascChanStateSigLmiGrpEntry.setStatus('mandatory')
ascLmiVccLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lineNum", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiVccLineNum.setStatus('mandatory')
ascLmiVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiVccVpi.setStatus('mandatory')
ascLmiVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 271))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiVccVci.setStatus('mandatory')
ascLmiXmtAbitState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiXmtAbitState.setStatus('mandatory')
ascLmiRcvAbitState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiRcvAbitState.setStatus('mandatory')
ascLineCnfSigLmiGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1))
ascCnfSigLmiGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1), )
if mibBuilder.loadTexts: ascCnfSigLmiGrpTable.setStatus('mandatory')
ascCnfSigLmiGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ascLmiCnfLineNum"))
if mibBuilder.loadTexts: ascCnfSigLmiGrpEntry.setStatus('mandatory')
ascLmiCnfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lmiCnflineNum", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiCnfLineNum.setStatus('mandatory')
ascLmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("lmiVpi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiVpi.setStatus('mandatory')
ascLmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(31))).clone(namedValues=NamedValues(("lmiVci", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiVci.setStatus('mandatory')
ascLmiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("atmLmiEnable", 2), ("atmLmiwithExtEnable", 3), ("atmLmiEnhManualRecovery", 4), ("atmLmiEnhAutoRecovery", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiEnabled.setStatus('mandatory')
ascLmiPollingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiPollingEnabled.setStatus('mandatory')
ascLmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiPollingInterval.setStatus('mandatory')
ascLmiTimerT393 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiTimerT393.setStatus('mandatory')
ascLmiTimerT394 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiTimerT394.setStatus('mandatory')
ascLmiMaxRetryN394 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiMaxRetryN394.setStatus('mandatory')
ascLmiMaxRetryN395 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLmiMaxRetryN395.setStatus('mandatory')
ascLmiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmLmiFailed", 1), ("atmLmiActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiOperStatus.setStatus('mandatory')
ascCntSigLmiGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2))
ascCntSigLmiGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1), )
if mibBuilder.loadTexts: ascCntSigLmiGrpTable.setStatus('mandatory')
ascCntSigLmiGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ascLmiCntLineNum"))
if mibBuilder.loadTexts: ascCntSigLmiGrpEntry.setStatus('mandatory')
ascLmiCntLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lmiCntLineNum", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiCntLineNum.setStatus('mandatory')
ascLmiStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusTx.setStatus('mandatory')
ascLmiStatusEnqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusEnqTx.setStatus('mandatory')
ascLmiStatusAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusAckTx.setStatus('mandatory')
ascLmiUpdateStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiUpdateStatusTx.setStatus('mandatory')
ascLmiStatusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusRx.setStatus('mandatory')
ascLmiStatusEnqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusEnqRx.setStatus('mandatory')
ascLmiStatusAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiStatusAckRx.setStatus('mandatory')
ascLmiUpdateStatusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiUpdateStatusRx.setStatus('mandatory')
ascLmiInvalidPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiInvalidPduRx.setStatus('mandatory')
ascLmiInvalidPduLenRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiInvalidPduLenRx.setStatus('mandatory')
ascLmiUnknownPduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiUnknownPduRx.setStatus('mandatory')
ascLmiInvalidIeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiInvalidIeRx.setStatus('mandatory')
ascLmiInvalidTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiInvalidTransaction.setStatus('mandatory')
ascLmiTimeoutFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiTimeoutFailure.setStatus('mandatory')
ascLmiNodeStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiNodeStatusTx.setStatus('mandatory')
ascLmiNodeStatusAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiNodeStatusAckTx.setStatus('mandatory')
ascLmiNodeStatusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiNodeStatusRx.setStatus('mandatory')
ascLmiNodeStatusAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascLmiNodeStatusAckRx.setStatus('mandatory')
pxmFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 15))
vsiControllersAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsiControllersAllowed.setStatus('mandatory')
apsCardAttributes = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsCardAttributes.setStatus('mandatory')
trkCACEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trkCACEnable.setStatus('mandatory')
pxmAtmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16))
pxmAtmVcCrossConnectIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectIndexNext.setStatus('mandatory')
pxmAtmVcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11), )
if mibBuilder.loadTexts: pxmAtmVcCrossConnectTable.setStatus('mandatory')
pxmAtmVcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectIndex"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowIfIndex"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowVpi"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowVci"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighIfIndex"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighVpi"), (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighVci"))
if mibBuilder.loadTexts: pxmAtmVcCrossConnectEntry.setStatus('mandatory')
pxmAtmVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectIndex.setStatus('mandatory')
pxmAtmVcCrossConnectLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectLowIfIndex.setStatus('mandatory')
pxmAtmVcCrossConnectLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectLowVpi.setStatus('mandatory')
pxmAtmVcCrossConnectLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectLowVci.setStatus('mandatory')
pxmAtmVcCrossConnectHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectHighIfIndex.setStatus('mandatory')
pxmAtmVcCrossConnectHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectHighVpi.setStatus('mandatory')
pxmAtmVcCrossConnectHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectHighVci.setStatus('mandatory')
pxmAtmVcCrossConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectAdminStatus.setStatus('mandatory')
pxmAtmVcCrossConnectL2HOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectL2HOperStatus.setStatus('mandatory')
pxmAtmVcCrossConnectH2LOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectH2LOperStatus.setStatus('mandatory')
pxmAtmVcCrossConnectL2HLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectL2HLastChange.setStatus('mandatory')
pxmAtmVcCrossConnectH2LLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectH2LLastChange.setStatus('mandatory')
pxmAtmVcCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectRowStatus.setStatus('mandatory')
pxmAtmVcCrossConnectHighAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atmUni", 1), ("atmNni", 2), ("frameRelay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectHighAddressType.setStatus('mandatory')
pxmAtmVcCrossConnectLowAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atmUni", 1), ("atmNni", 2), ("frameRelay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxmAtmVcCrossConnectLowAddressType.setStatus('mandatory')
atmLineCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1), )
if mibBuilder.loadTexts: atmLineCnfTable.setStatus('mandatory')
atmLineCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "atmLineCnfNum"))
if mibBuilder.loadTexts: atmLineCnfEntry.setStatus('mandatory')
atmLineCnfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLineCnfNum.setStatus('mandatory')
atmLineInterfaceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("atmUni", 2), ("atmNni", 3))).clone('atmUni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLineInterfaceFormat.setStatus('mandatory')
atmLineCntTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1), )
if mibBuilder.loadTexts: atmLineCntTable.setStatus('mandatory')
atmLineCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "atmLineNum"))
if mibBuilder.loadTexts: atmLineCntEntry.setStatus('mandatory')
atmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLineNum.setStatus('mandatory')
atmLineTotalRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLineTotalRcvCells.setStatus('mandatory')
atmLineTotalXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLineTotalXmtCells.setStatus('mandatory')
atmLineRcvHecErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmLineRcvHecErrorCells.setStatus('mandatory')
atmLineCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmLineCntClrButton.setStatus('mandatory')
bbIfCnfPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1))
bbIfCnfPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: bbIfCnfPortGrpTable.setStatus('mandatory')
bbIfCnfPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbIfNum"))
if mibBuilder.loadTexts: bbIfCnfPortGrpEntry.setStatus('mandatory')
bbIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfNum.setStatus('mandatory')
bbIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRowStatus.setStatus('mandatory')
bbIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("writeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAdmin.setStatus('mandatory')
bbIfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfLineNum.setStatus('mandatory')
bbIfIngrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIngrPctBandwidth.setStatus('mandatory')
bbIfEgrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfEgrPctBandwidth.setStatus('mandatory')
bbIfMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinVpi.setStatus('mandatory')
bbIfMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMaxVpi.setStatus('mandatory')
bbIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSpeed.setStatus('mandatory')
bbIfMaxCellRatePct = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMaxCellRatePct.setStatus('mandatory')
nextBbIfNumAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextBbIfNumAvailable.setStatus('mandatory')
bbIfCnfRscPartGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1), )
if mibBuilder.loadTexts: bbIfCnfRscPartGrpTable.setStatus('mandatory')
bbIfCnfRscPartGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbRscPartIfNum"), (0, "CISCO-WAN-AXIPOP-MIB", "bbRscPartCtrlrNum"))
if mibBuilder.loadTexts: bbIfCnfRscPartGrpEntry.setStatus('mandatory')
bbRscPartIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbRscPartIfNum.setStatus('mandatory')
bbRscPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbRscPartCtrlrNum.setStatus('mandatory')
bbIfRscPrtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3))).clone('del')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtRowStatus.setStatus('mandatory')
bbIfRscPrtInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2))).clone('notInUse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtInUse.setStatus('mandatory')
bbIfRscPrtIngrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtIngrPctBandwidth.setStatus('mandatory')
bbIfRscPrtEgrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtEgrPctBandwidth.setStatus('mandatory')
bbIfRscPrtVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVpiLow.setStatus('mandatory')
bbIfRscPrtVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVpiHigh.setStatus('mandatory')
bbIfRscPrtVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVciLow.setStatus('mandatory')
bbIfRscPrtVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVciHigh.setStatus('mandatory')
bbIfRscPrtVpidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVpidLow.setStatus('mandatory')
bbIfRscPrtVpidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtVpidHigh.setStatus('mandatory')
bbIfRscPrtMaxChans = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPrtMaxChans.setStatus('mandatory')
bbIfRscPartCtrlrID = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRscPartCtrlrID.setStatus('mandatory')
bbIfCnfSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2))
bbIfCnfSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpTable.setStatus('mandatory')
bbIfCnfSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbIfSigPortNum"))
if mibBuilder.loadTexts: bbIfCnfSigILMIGrpEntry.setStatus('mandatory')
bbIfSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSigPortNum.setStatus('mandatory')
bbIfIlmiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIlmiEnable.setStatus('mandatory')
bbIfSignallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSignalling", 2), ("iLMI", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingProtocolType.setStatus('mandatory')
bbIfSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingVpi.setStatus('mandatory')
bbIfSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSignallingVci.setStatus('mandatory')
bbIfAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 6), NetPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAddrPrefix.setStatus('mandatory')
bbIfCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfCustomerId.setStatus('mandatory')
bbIfProtocolRevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfProtocolRevNo.setStatus('mandatory')
bbIfIlmiTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIlmiTrapEnable.setStatus('mandatory')
bbIfMinTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinTrapInterval.setStatus('mandatory')
bbIfKeepAlivePollingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfKeepAlivePollingEnable.setStatus('mandatory')
bbIfErrorThresholdN491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfErrorThresholdN491.setStatus('mandatory')
bbIfEventThresholdN492 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfEventThresholdN492.setStatus('mandatory')
bbIfPollingIntervalT491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60))).clone(namedValues=NamedValues(("v1", 5), ("v2", 10), ("v3", 15), ("v4", 20), ("v5", 25), ("v6", 30), ("v7", 35), ("v8", 40), ("v9", 45), ("v10", 50), ("v11", 55), ("v12", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfPollingIntervalT491.setStatus('mandatory')
bbIfMinEnquiryIntervalT493 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinEnquiryIntervalT493.setStatus('mandatory')
bbIfAddrRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAddrRegEnable.setStatus('mandatory')
bbIfCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1))
bbIfCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1), )
if mibBuilder.loadTexts: bbIfCntGrpTable.setStatus('mandatory')
bbIfCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbCntIfNum"))
if mibBuilder.loadTexts: bbIfCntGrpEntry.setStatus('mandatory')
bbCntIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbCntIfNum.setStatus('mandatory')
bbIfTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTotalCells.setStatus('mandatory')
bbIfRcvValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvValidOAMCells.setStatus('mandatory')
bbIfRcvRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvRmCells.setStatus('mandatory')
bbIfRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp0Cells.setStatus('mandatory')
bbIfRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp1Cells.setStatus('mandatory')
bbIfRcvClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp0DiscCells.setStatus('mandatory')
bbIfRcvClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp1DiscCells.setStatus('mandatory')
bbIfXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtOAMCells.setStatus('mandatory')
bbIfXmtRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtRmCells.setStatus('mandatory')
bbIfXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtClp0Cells.setStatus('mandatory')
bbIfXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtClp1Cells.setStatus('mandatory')
bbIfCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfCntClrButton.setStatus('mandatory')
bbIfCntSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2))
bbIfCntSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1), )
if mibBuilder.loadTexts: bbIfCntSigILMIGrpTable.setStatus('mandatory')
bbIfCntSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "sigCntBbIfNum"))
if mibBuilder.loadTexts: bbIfCntSigILMIGrpEntry.setStatus('mandatory')
sigCntBbIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigCntBbIfNum.setStatus('mandatory')
bbIfSnmpPduReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSnmpPduReceived.setStatus('mandatory')
bbIfGetRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetRequestReceived.setStatus('mandatory')
bbIfGetNextRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetNextRequestReceived.setStatus('mandatory')
bbIfSetRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSetRequestReceived.setStatus('mandatory')
bbIfTrapReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTrapReceived.setStatus('mandatory')
bbIfGetResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetResponseReceived.setStatus('mandatory')
bbIfGetResponseTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetResponseTransmitted.setStatus('mandatory')
bbIfGetRequestTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfGetRequestTransmitted.setStatus('mandatory')
bbIfTrapTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTrapTransmitted.setStatus('mandatory')
bbIfInvalidPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfInvalidPDUReceived.setStatus('mandatory')
bbIfAsn1ParseError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfAsn1ParseError.setStatus('mandatory')
bbIfNoSuchNameError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfNoSuchNameError.setStatus('mandatory')
bbIfTooBigError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTooBigError.setStatus('mandatory')
bbIfSigCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfSigCntClrButton.setStatus('mandatory')
bbIfStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1), )
if mibBuilder.loadTexts: bbIfStateGrpTable.setStatus('mandatory')
bbIfStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbStateIfNum"))
if mibBuilder.loadTexts: bbIfStateGrpEntry.setStatus('mandatory')
bbStateIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbStateIfNum.setStatus('mandatory')
bbIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("linefailure", 4), ("signallingfailure", 5), ("inactive", 6), ("lineinloopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfState.setStatus('mandatory')
bbIfOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfOversubscribed.setStatus('mandatory')
bbIfIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfIngrPercentUtil.setStatus('mandatory')
bbIfEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfEgrPercentUtil.setStatus('mandatory')
bbChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1), )
if mibBuilder.loadTexts: bbChanCnfGrpTable.setStatus('mandatory')
bbChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbChanCnfNum"))
if mibBuilder.loadTexts: bbChanCnfGrpEntry.setStatus('mandatory')
bbChanCnfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanCnfNum.setStatus('mandatory')
bbChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRowStatus.setStatus('mandatory')
bbChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanConnType.setStatus('mandatory')
bbChanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("abr", 3), ("ubr", 4), ("vbr-rt", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanServiceType.setStatus('mandatory')
bbChanConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanConnDesc.setStatus('mandatory')
bbChanSvcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2), ("spvc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanSvcFlag.setStatus('mandatory')
bbChanSvcConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanSvcConnId.setStatus('mandatory')
bbChanIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanIfNum.setStatus('mandatory')
bbChanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanVpi.setStatus('mandatory')
bbChanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanVci.setStatus('mandatory')
bbChanUpcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcEnable.setStatus('mandatory')
bbChanUpcPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcPCR.setStatus('mandatory')
bbChanUpcCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcCDVT.setStatus('mandatory')
bbChanUpcSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcSCR.setStatus('mandatory')
bbChanUpcMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcMBS.setStatus('mandatory')
bbChanGcra1Action = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("tagCells", 2), ("tagAndDiscard", 3), ("discardAllNonComformCells", 4))).clone('discardAllNonComformCells')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanGcra1Action.setStatus('mandatory')
bbChanGcra2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAction", 1), ("tagCells", 2), ("tagAndDiscard", 3), ("discardAllNonComformCells", 4))).clone('discardAllNonComformCells')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanGcra2Action.setStatus('mandatory')
bbChanUpcSCRPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcSCRPolicing.setStatus('mandatory')
bbChanEfciThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(196608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEfciThreshold.setStatus('mandatory')
bbChanDiscardOption = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpHysteresis", 1), ("frameDiscard", 2))).clone('clpHysteresis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanDiscardOption.setStatus('mandatory')
bbChanFrmDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanFrmDiscardThreshold.setStatus('mandatory')
bbChanClpHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(196608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanClpHiThreshold.setStatus('mandatory')
bbChanClpLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 491520)).clone(131072)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanClpLoThreshold.setStatus('mandatory')
bbChanCongstUpdateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dontUpdate", 1), ("setCiBit", 2), ("setEfciBit", 3), ("clearEfciBit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanCongstUpdateCode.setStatus('mandatory')
bbChanMaxCellMemThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000)).clone(262144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaxCellMemThreshold.setStatus('mandatory')
bbChanIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanIngrPercentUtil.setStatus('mandatory')
bbChanEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEgrPercentUtil.setStatus('mandatory')
bbChanEgrSrvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanEgrSrvRate.setStatus('mandatory')
bbChanOvrSubOvrRide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanOvrSubOvrRide.setStatus('mandatory')
bbChanLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanLocalVpi.setStatus('mandatory')
bbChanLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanLocalVci.setStatus('mandatory')
bbChanLocalNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 32), IfNsapAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanLocalNsapAddr.setStatus('mandatory')
bbChanRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteVpi.setStatus('mandatory')
bbChanRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteVci.setStatus('mandatory')
bbChanRemoteNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 35), IfNsapAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRemoteNsapAddr.setStatus('mandatory')
bbChanMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaster.setStatus('mandatory')
bbChanRtePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRtePriority.setStatus('mandatory')
bbChanMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanMaxCost.setStatus('mandatory')
bbChanRestrictTrkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRestriction", 1), ("terrestrialTrunk", 2), ("satelliteTrunk", 3))).clone('noRestriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanRestrictTrkType.setStatus('mandatory')
bbChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanTestType.setStatus('mandatory')
bbChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestState.setStatus('mandatory')
bbChanTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestResult.setStatus('mandatory')
bbChanTestTypeCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testconseg", 1), ("notest", 2))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanTestTypeCPESide.setStatus('mandatory')
bbChanTestStateCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanTestStateCPESide.setStatus('mandatory')
bbConnVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnVpcFlag.setStatus('mandatory')
bbConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("abrstd", 6), ("vbrrt", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnServiceType.setStatus('mandatory')
bbConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnPCR.setStatus('mandatory')
bbConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnSCR.setStatus('mandatory')
bbConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbConnPercentUtil.setStatus('mandatory')
bbRemoteConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnPCR.setStatus('mandatory')
bbRemoteConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnSCR.setStatus('mandatory')
bbRemoteConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbRemoteConnPercentUtil.setStatus('mandatory')
bbChanUpcMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanUpcMCR.setStatus('mandatory')
bbChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNumNextAvailable.setStatus('mandatory')
bbChanVpIdNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanVpIdNextAvailable.setStatus('mandatory')
bbChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1), )
if mibBuilder.loadTexts: bbChanCntGrpTable.setStatus('mandatory')
bbChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbChanCntNum"))
if mibBuilder.loadTexts: bbChanCntGrpEntry.setStatus('mandatory')
bbChanCntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanCntNum.setStatus('mandatory')
bbChanRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvClp0Cells.setStatus('mandatory')
bbChanRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvClp1Cells.setStatus('mandatory')
bbChanNonConformCellsAtGcra1Policer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra1Policer.setStatus('mandatory')
bbChanNonConformCellsAtGcra2Policer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanNonConformCellsAtGcra2Policer.setStatus('mandatory')
bbChanRcvEOFCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvEOFCells.setStatus('mandatory')
bbChanDscdClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClp0Cells.setStatus('mandatory')
bbChanDscdClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClp1Cells.setStatus('mandatory')
bbChanRcvCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanRcvCellsSent.setStatus('mandatory')
bbChanXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanXmtClp0Cells.setStatus('mandatory')
bbChanXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanXmtClp1Cells.setStatus('mandatory')
bbChanDscdClpZeroCellsToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClpZeroCellsToPort.setStatus('mandatory')
bbChanDscdClpOneCellsToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanDscdClpOneCellsToPort.setStatus('mandatory')
bbChanCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbChanCntClrButton.setStatus('mandatory')
bbChanStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1), )
if mibBuilder.loadTexts: bbChanStateGrpTable.setStatus('mandatory')
bbChanStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bbChanStateNum"))
if mibBuilder.loadTexts: bbChanStateGrpEntry.setStatus('mandatory')
bbChanStateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanStateNum.setStatus('mandatory')
bbChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", 1), ("normal", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanState.setStatus('mandatory')
bbChanEgrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanEgrXmtState.setStatus('mandatory')
bbChanIngrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbChanIngrRcvState.setStatus('mandatory')
virtualInterfaceCnf = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1))
vrtlIntrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1), )
if mibBuilder.loadTexts: vrtlIntrConfigTable.setStatus('mandatory')
vrtlIntrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "configVrtlIntrNum"))
if mibBuilder.loadTexts: vrtlIntrConfigEntry.setStatus('mandatory')
configVrtlIntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVrtlIntrNum.setStatus('mandatory')
vrtlIntrPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrPortNum.setStatus('mandatory')
vrtlIntrState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrState.setStatus('mandatory')
vrtlIntrMaxQueMem = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrMaxQueMem.setStatus('mandatory')
vrtlIntrMinCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(103384, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrMinCellRate.setStatus('mandatory')
vrtlIntrMaxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(103384, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrMaxCellRate.setStatus('mandatory')
vrtlIntrCurrConfigPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrCurrConfigPaths.setStatus('mandatory')
virtualInterfaceCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2))
vrtlIntrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1), )
if mibBuilder.loadTexts: vrtlIntrCounterTable.setStatus('mandatory')
vrtlIntrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "countVrtlIntrNum"))
if mibBuilder.loadTexts: vrtlIntrCounterEntry.setStatus('mandatory')
countVrtlIntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: countVrtlIntrNum.setStatus('mandatory')
vrtlIntrTotalCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrTotalCellCnt.setStatus('mandatory')
vrtlIntrTotalQbinCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrTotalQbinCellCnt.setStatus('mandatory')
vrtlIntrRxdValidOAMCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdValidOAMCellCnt.setStatus('mandatory')
vrtlIntrRxdRmCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdRmCellCnt.setStatus('mandatory')
vrtlIntrRxdClpUntaggedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdClpUntaggedCellCnt.setStatus('mandatory')
vrtlIntrRxdClpTaggedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdClpTaggedCellCnt.setStatus('mandatory')
vrtlIntrRxdClpUntaggedDiscardedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdClpUntaggedDiscardedCellCnt.setStatus('mandatory')
vrtlIntrRxdClpTaggedDiscardedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrRxdClpTaggedDiscardedCellCnt.setStatus('mandatory')
vrtlIntrXmtdOAMCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrXmtdOAMCellCnt.setStatus('mandatory')
vrtlIntrXmtdRmCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrXmtdRmCellCnt.setStatus('mandatory')
vrtlIntrXmtdClpUntaggedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrXmtdClpUntaggedCellCnt.setStatus('mandatory')
vrtlIntrXmtdClpTaggedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrXmtdClpTaggedCellCnt.setStatus('mandatory')
virtualInterfaceQbinCnf = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3))
vrtlIntrQbinConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1), )
if mibBuilder.loadTexts: vrtlIntrQbinConfigTable.setStatus('mandatory')
vrtlIntrQbinConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "queConfigVrtlIntrNum"), (0, "CISCO-WAN-AXIPOP-MIB", "queConfigVrtlIntrQbinNum"))
if mibBuilder.loadTexts: vrtlIntrQbinConfigEntry.setStatus('mandatory')
queConfigVrtlIntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queConfigVrtlIntrNum.setStatus('mandatory')
queConfigVrtlIntrQbinNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queConfigVrtlIntrQbinNum.setStatus('mandatory')
vrtlIntrQbinState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinState.setStatus('mandatory')
vrtlIntrQbinPri = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinPri.setStatus('mandatory')
vrtlIntrQbinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinRate.setStatus('mandatory')
vrtlIntrQbinDiscardSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("clpHysteresis", 1), ("frameDiscard", 3))).clone('clpHysteresis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinDiscardSelection.setStatus('mandatory')
vrtlIntrQbinMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinMaxThreshold.setStatus('mandatory')
vrtlIntrQbinClpHiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinClpHiThreshold.setStatus('mandatory')
vrtlIntrQbinClpLoThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinClpLoThreshold.setStatus('mandatory')
vrtlIntrQbinFrameDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinFrameDiscardThreshold.setStatus('mandatory')
vrtlIntrQbinEfciThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrtlIntrQbinEfciThreshold.setStatus('mandatory')
virtualInterfaceQbinCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4))
vrtlIntrQbinCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1), )
if mibBuilder.loadTexts: vrtlIntrQbinCounterTable.setStatus('mandatory')
vrtlIntrQbinCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "queConuterVrtlIntrNum"), (0, "CISCO-WAN-AXIPOP-MIB", "queCounterVrtlIntrQbinNum"))
if mibBuilder.loadTexts: vrtlIntrQbinCounterEntry.setStatus('mandatory')
queConuterVrtlIntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queConuterVrtlIntrNum.setStatus('mandatory')
queCounterVrtlIntrQbinNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queCounterVrtlIntrQbinNum.setStatus('mandatory')
vrtlIntrQbinCurrentCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrQbinCurrentCellCnt.setStatus('mandatory')
vrtlIntrQbinRxdCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrQbinRxdCellCnt.setStatus('mandatory')
vrtlIntrQbinTxdCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrQbinTxdCellCnt.setStatus('mandatory')
vrtlIntrQbinDiscardedCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtlIntrQbinDiscardedCellCnt.setStatus('mandatory')
rpmChanGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1), )
if mibBuilder.loadTexts: rpmChanGrpTable.setStatus('mandatory')
rpmChanGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "rpmChanSlotNum"), (0, "CISCO-WAN-AXIPOP-MIB", "rpmChanNum"))
if mibBuilder.loadTexts: rpmChanGrpEntry.setStatus('mandatory')
rpmChanSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanSlotNum.setStatus('mandatory')
rpmChanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanInterface.setStatus('mandatory')
rpmChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanNum.setStatus('mandatory')
rpmChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRowStatus.setStatus('mandatory')
rpmChanVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVcd.setStatus('mandatory')
rpmChanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVpi.setStatus('mandatory')
rpmChanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVci.setStatus('mandatory')
rpmChanSubInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanSubInterface.setStatus('mandatory')
rpmChanLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalVpi.setStatus('mandatory')
rpmChanLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalVci.setStatus('mandatory')
rpmChanLocalNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 11), RpmNsapAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanLocalNsap.setStatus('mandatory')
rpmChanRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteVpi.setStatus('mandatory')
rpmChanRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteVci.setStatus('mandatory')
rpmChanRemoteNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 14), RpmNsapAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteNsap.setStatus('mandatory')
rpmChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2), ("spvc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanType.setStatus('mandatory')
rpmChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanConnType.setStatus('mandatory')
rpmChanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanServiceType.setStatus('mandatory')
rpmChanMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMastership.setStatus('mandatory')
rpmChanRtePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRtePriority.setStatus('mandatory')
rpmChanMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMaxCost.setStatus('mandatory')
rpmChanRestrictTrkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRestriction", 1), ("terrestrialTrunk", 2), ("satelliteTrunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRestrictTrkType.setStatus('mandatory')
rpmChanPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanPCR.setStatus('mandatory')
rpmChanRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemotePCR.setStatus('mandatory')
rpmChanMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMCR.setStatus('mandatory')
rpmChanRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemoteMCR.setStatus('mandatory')
rpmChanPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanPercentUtil.setStatus('mandatory')
rpmChanRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanRemotePercentUtil.setStatus('mandatory')
rpmChanEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("aal5snap", 1), ("aal34smds", 2), ("aal5nlpid", 3), ("qsaal", 4), ("ilmi", 5), ("aal5muxXNS", 6), ("aal5muxIP", 7), ("aal5muxVINES", 8), ("aal5muxDECNET", 9), ("aal5muxNOVELL1", 10), ("ppp", 11), ("unknown", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanEncapType.setStatus('mandatory')
rpmChanMidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMidLow.setStatus('mandatory')
rpmChanMidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanMidHigh.setStatus('mandatory')
rpmChanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanBurstSize.setStatus('mandatory')
rpmChanInArpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanInArpFreq.setStatus('mandatory')
rpmChanOAMloopback = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanOAMloopback.setStatus('mandatory')
rpmChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanState.setStatus('mandatory')
rpmChanVirtualTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanVirtualTemplate.setStatus('mandatory')
rpmChanAbrRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanAbrRDF.setStatus('mandatory')
rpmChanAbrRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmChanAbrRIF.setStatus('mandatory')
rpmPortTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1), )
if mibBuilder.loadTexts: rpmPortTable.setStatus('mandatory')
rpmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "rpmPortSlotNum"), (0, "CISCO-WAN-AXIPOP-MIB", "rpmPortSubInterface"))
if mibBuilder.loadTexts: rpmPortEntry.setStatus('mandatory')
rpmPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortSlotNum.setStatus('mandatory')
rpmPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortInterface.setStatus('mandatory')
rpmPortSubInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortSubInterface.setStatus('mandatory')
rpmPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortRowStatus.setStatus('mandatory')
rpmPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortIpAddress.setStatus('mandatory')
rpmPortSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortSubNetMask.setStatus('mandatory')
rpmPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmPortState.setStatus('mandatory')
rpmIfCnfResPart = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2))
rpmIfCnfRscPartTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1), )
if mibBuilder.loadTexts: rpmIfCnfRscPartTable.setStatus('mandatory')
rpmIfCnfRscPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscSlotNum"), (0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscPartIfNum"), (0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscPartCtrlrNum"))
if mibBuilder.loadTexts: rpmIfCnfRscPartEntry.setStatus('mandatory')
rpmIfRscSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscSlotNum.setStatus('mandatory')
rpmIfRscPartIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPartIfNum.setStatus('mandatory')
rpmIfRscPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPartCtrlrNum.setStatus('mandatory')
rpmIfRscPrtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3))).clone('del')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtRowStatus.setStatus('mandatory')
rpmIfRscPrtIngrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtIngrPctBandwidth.setStatus('mandatory')
rpmIfRscPrtEgrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtEgrPctBandwidth.setStatus('mandatory')
rpmIfRscPrtVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVpiLow.setStatus('mandatory')
rpmIfRscPrtVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVpiHigh.setStatus('mandatory')
rpmIfRscPrtVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVciLow.setStatus('mandatory')
rpmIfRscPrtVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtVciHigh.setStatus('mandatory')
rpmIfRscPrtMaxChans = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmIfRscPrtMaxChans.setStatus('mandatory')
parSelfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 1))
parInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 2))
parConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 3))
parNetworkClock = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 4))
parConfigParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5))
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

parSnNodeId = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 223)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeId.setStatus('mandatory')
parSnNodeIP = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeIP.setStatus('mandatory')
parSnNodeName = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSnNodeName.setStatus('mandatory')
parSnRevision = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnRevision.setStatus('mandatory')
parSnNodeAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3), ("unreach", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnNodeAlarmStatus.setStatus('mandatory')
parSnNumberOfTrunks = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSnNumberOfTrunks.setStatus('mandatory')
parIfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 1), )
if mibBuilder.loadTexts: parIfTable.setStatus('mandatory')
parIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parIfEntry.setStatus('mandatory')
parIfLogicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLogicalInterface.setStatus('mandatory')
parIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("userport", 1), ("routingtrunk", 2), ("feedertrunk", 3), ("clkport", 4), ("virtualtrunk", 5))).clone('userport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parIfType.setStatus('mandatory')
parIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("added", 2), ("failed", 3), ("added-failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfOperStatus.setStatus('mandatory')
parIfTxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfTxBw.setStatus('mandatory')
parIfRxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfRxBw.setStatus('mandatory')
parIfMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfMaxConn.setStatus('mandatory')
parIfHiAddrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfHiAddrMin.setStatus('mandatory')
parIfHiAddrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfHiAddrMax.setStatus('mandatory')
parIfLoAddrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLoAddrMin.setStatus('mandatory')
parIfLoAddrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parIfLoAddrMax.setStatus('mandatory')
parTrkTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 2), )
if mibBuilder.loadTexts: parTrkTable.setStatus('mandatory')
parTrkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parTrkEntry.setStatus('mandatory')
parTrkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkId.setStatus('mandatory')
parTrkStatReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 2), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkStatReserve.setStatus('mandatory')
parTrkCnfgCcRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgCcRestrict.setStatus('mandatory')
parTrkCnfgLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terrestrial", 1), ("satellite", 2))).clone('terrestrial')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgLineType.setStatus('mandatory')
parTrkCnfgPassSync = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgPassSync.setStatus('mandatory')
parTrkCnfgDerouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgDerouteDelay.setStatus('mandatory')
parTrkCnfgTrafficClassFst = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassFst.setStatus('mandatory')
parTrkCnfgTrafficClassFr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassFr.setStatus('mandatory')
parTrkCnfgTrafficClassNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassNts.setStatus('mandatory')
parTrkCnfgTrafficClassTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassTs.setStatus('mandatory')
parTrkCnfgTrafficClassVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassVoice.setStatus('mandatory')
parTrkCnfgTrafficClassCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassCbr.setStatus('mandatory')
parTrkCnfgTrafficClassVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassVbr.setStatus('mandatory')
parTrkCnfgTrafficClassAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgTrafficClassAbr.setStatus('mandatory')
parTrkCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2))).clone('delete')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgAdminStatus.setStatus('mandatory')
parTrkCnfgRoutingCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgRoutingCost.setStatus('mandatory')
parTrkCnfgVccConids = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgVccConids.setStatus('mandatory')
parTrkCnfgVpcConids = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parTrkCnfgVpcConids.setStatus('mandatory')
parTrkLocalSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalSlotNumber.setStatus('mandatory')
parTrkLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalPortNumber.setStatus('mandatory')
parTrkLocalVTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLocalVTrunkId.setStatus('mandatory')
parTrkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeId.setStatus('mandatory')
parTrkRemoteTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteTrunkId.setStatus('mandatory')
parTrkRemoteSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteSlotNumber.setStatus('mandatory')
parTrkRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemotePortNumber.setStatus('mandatory')
parTrkRemoteVTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteVTrunkId.setStatus('mandatory')
parTrkRemoteNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeIP.setStatus('mandatory')
parTrkRemoteNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ipx", 1), ("igx", 2), ("bpx", 3), ("par", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeType.setStatus('mandatory')
parTrkRemoteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkRemoteNodeName.setStatus('mandatory')
parTrkAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkAlarmStatus.setStatus('mandatory')
parTrkAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rsrcunavail", 1), ("commfail", 2), ("unknown", 3), ("failed", 4), ("looped", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkAlarmType.setStatus('mandatory')
parTrkBwCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkBwCapacity.setStatus('mandatory')
parTrkLineLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLineLoad.setStatus('mandatory')
parTrkLoadTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 2, 3), )
if mibBuilder.loadTexts: parTrkLoadTable.setStatus('mandatory')
parTrkLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"))
if mibBuilder.loadTexts: parTrkLoadEntry.setStatus('mandatory')
parTrkLoadXmtUsedCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedCbr.setStatus('mandatory')
parTrkLoadRcvUsedCbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedCbr.setStatus('mandatory')
parTrkLoadXmtUsedVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedVbr.setStatus('mandatory')
parTrkLoadRcvUsedVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedVbr.setStatus('mandatory')
parTrkLoadXmtUsedAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedAbr.setStatus('mandatory')
parTrkLoadRcvUsedAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedAbr.setStatus('mandatory')
parTrkLoadXmtUsedNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedNts.setStatus('mandatory')
parTrkLoadRcvUsedNts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedNts.setStatus('mandatory')
parTrkLoadXmtUsedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedTs.setStatus('mandatory')
parTrkLoadRcvUsedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedTs.setStatus('mandatory')
parTrkLoadXmtUsedVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedVoice.setStatus('mandatory')
parTrkLoadRcvUsedVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedVoice.setStatus('mandatory')
parTrkLoadXmtUsedBdataA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedBdataA.setStatus('mandatory')
parTrkLoadRcvUsedBdataA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedBdataA.setStatus('mandatory')
parTrkLoadXmtUsedBdataB = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadXmtUsedBdataB.setStatus('mandatory')
parTrkLoadRcvUsedBdataB = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadRcvUsedBdataB.setStatus('mandatory')
parTrkLoadVccConidsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadVccConidsUsed.setStatus('mandatory')
parTrkLoadVpcConidsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parTrkLoadVpcConidsUsed.setStatus('mandatory')
parConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 3, 1), )
if mibBuilder.loadTexts: parConnectionTable.setStatus('mandatory')
parConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalSlot"), (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalPort"), (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalVpi"), (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalVci"))
if mibBuilder.loadTexts: parConnectionEntry.setStatus('mandatory')
parConnLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalSlot.setStatus('mandatory')
parConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalPort.setStatus('mandatory')
parConnLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVpi.setStatus('mandatory')
parConnLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVci.setStatus('mandatory')
parConnMasterShip = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnMasterShip.setStatus('mandatory')
parConnLocalVcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalVcIndx.setStatus('mandatory')
parConnLocalEndpt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnLocalEndpt.setStatus('mandatory')
parConnRemoteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteNodeName.setStatus('mandatory')
parConnRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteSlot.setStatus('mandatory')
parConnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemotePort.setStatus('mandatory')
parConnRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVpi.setStatus('mandatory')
parConnRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVci.setStatus('mandatory')
parConnRemoteVcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteVcIndx.setStatus('mandatory')
parConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("routed", 1), ("unrouted", 2), ("lmifail", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnOperStatus.setStatus('mandatory')
parConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("reroute", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parConnAdminStatus.setStatus('mandatory')
parConnRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRoute.setStatus('mandatory')
parConnRemoteEndpt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRemoteEndpt.setStatus('mandatory')
parPrefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parPrefRoute.setStatus('mandatory')
parConnFailRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("hwalm", 2), ("abitalm", 3), ("lmifail", 4), ("rrtfail", 5), ("incomplete", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnFailRsn.setStatus('mandatory')
parRrtFailRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parRrtFailRsn.setStatus('mandatory')
parConnRstrTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("norestrict", 1), ("terrestrict", 2), ("satrestrict", 3), ("undefrestrict", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRstrTyp.setStatus('mandatory')
parConnRstrZcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnRstrZcs.setStatus('mandatory')
parConnCos = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parConnCos.setStatus('mandatory')
parClockTable = MibTable((1, 3, 6, 1, 4, 1, 351, 130, 4, 1), )
if mibBuilder.loadTexts: parClockTable.setStatus('mandatory')
parClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "parClockIndex"))
if mibBuilder.loadTexts: parClockEntry.setStatus('mandatory')
parClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockIndex.setStatus('mandatory')
parClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3), ("null", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parClockType.setStatus('mandatory')
parClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("interface", 2), ("external", 3))).clone('internal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockSource.setStatus('mandatory')
parClockCurSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockCurSource.setStatus('mandatory')
parClockSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parClockSourceId.setStatus('mandatory')
parClockPath = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parClockPath.setStatus('mandatory')
parVsiConfigParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 1))
parCmParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 2))
parMnUpdt = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 3))
parSwFunc = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 4))
parOnOff = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 5))
parSysParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 6))
parNetworkingParms = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 130, 5, 7))
parCmParmsMaxRoutingBundle = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 1), Integer32().clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxRoutingBundle.setStatus('mandatory')
parCmParmsRerouteTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRerouteTimer.setStatus('mandatory')
parCmParmsResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsResetTimer.setStatus('mandatory')
parCmParmsDnUpPerPass = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 4), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsDnUpPerPass.setStatus('mandatory')
parCmParmsDnUpTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 5), Integer32().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsDnUpTimer.setStatus('mandatory')
parCmParmsRrtErrsPerCycle = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 6), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtErrsPerCycle.setStatus('mandatory')
parCmParmsRrtCycleInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtCycleInterval.setStatus('mandatory')
parCmParmsMaxRrtCycles = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 8), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxRrtCycles.setStatus('mandatory')
parCmParmsRrtPauseTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrtPauseTime.setStatus('mandatory')
parCmParmsMaxUpdates = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMaxUpdates.setStatus('mandatory')
parCmParmsRerouteGroups = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 11), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRerouteGroups.setStatus('mandatory')
parCmParmsMinRrGroupSize = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsMinRrGroupSize.setStatus('mandatory')
parCmParmsRrGroupInc = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 13), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsRrGroupInc.setStatus('mandatory')
parCmParmsCostBased = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsCostBased.setStatus('mandatory')
parCmParmsUseCache = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsUseCache.setStatus('mandatory')
parCmParmsUseDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmsUseDelay.setStatus('mandatory')
parCmParmMaxViaCons = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 80000)).clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parCmParmMaxViaCons.setStatus('mandatory')
parMnUpdtInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 1), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtInterval.setStatus('mandatory')
parMnUpdtNodesPerInt = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 2), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtNodesPerInt.setStatus('mandatory')
parMnUpdtBatchSend = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parMnUpdtBatchSend.setStatus('mandatory')
parSwFuncAbrVsvd = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSwFuncAbrVsvd.setStatus('mandatory')
parSwFuncNodeType = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routing", 1), ("feeder", 2))).clone('routing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSwFuncNodeType.setStatus('mandatory')
parOnOffBackgroundUpdt = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffBackgroundUpdt.setStatus('mandatory')
parOnOffDynamicBwAlloc = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffDynamicBwAlloc.setStatus('mandatory')
parOnOffCmUpdts = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCmUpdts.setStatus('mandatory')
parOnOffRouting = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffRouting.setStatus('mandatory')
parOnOffCommFailTest = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCommFailTest.setStatus('mandatory')
parOnOffDrtDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffDrtDelay.setStatus('mandatory')
parOnOffRenumRec = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffRenumRec.setStatus('mandatory')
parOnOffCommBreak = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parOnOffCommBreak.setStatus('mandatory')
parSysParmsTsPacketAge = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsTsPacketAge.setStatus('mandatory')
parSysParmsConnFail = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsConnFail.setStatus('mandatory')
parSysParmsVcPollRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsVcPollRate.setStatus('mandatory')
parSysParmsMaxVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxVDelay.setStatus('mandatory')
parSysParmsMaxCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCDelay.setStatus('mandatory')
parSysParmsMaxDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxDDelay.setStatus('mandatory')
parSysParmsMaxADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxADelay.setStatus('mandatory')
parSysParmsMaxHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxHsdDelay.setStatus('mandatory')
parSysParmsDeEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsDeEnable.setStatus('mandatory')
parSysParmsFrStandard = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsFrStandard.setStatus('mandatory')
parSysParmsDrtDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parSysParmsDrtDelay.setStatus('mandatory')
parSysParmsInvLogAlarmThres = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsInvLogAlarmThres.setStatus('mandatory')
parSysParmsMaxCdpVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpVDelay.setStatus('mandatory')
parSysParmsMaxCdpCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpCDelay.setStatus('mandatory')
parSysParmsMaxCdpDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpDDelay.setStatus('mandatory')
parSysParmsMaxCdpADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpADelay.setStatus('mandatory')
parSysParmsMaxCdpHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxCdpHsdDelay.setStatus('mandatory')
parSysParmsMaxIpcdpVDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpVDelay.setStatus('mandatory')
parSysParmsMaxIpcdpCDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpCDelay.setStatus('mandatory')
parSysParmsMaxIpcdpDDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpDDelay.setStatus('mandatory')
parSysParmsMaxIpcdpADelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpADelay.setStatus('mandatory')
parSysParmsMaxIpcdpHsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIpcdpHsdDelay.setStatus('mandatory')
parSysParmsMaxIphsdDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsMaxIphsdDelay.setStatus('mandatory')
parSysParmsFpdDeJitter = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parSysParmsFpdDeJitter.setStatus('mandatory')
parNetParmCondInitialStgr = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 1), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCondInitialStgr.setStatus('mandatory')
parNetParmCondPerNodeInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 2), Integer32().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCondPerNodeInterval.setStatus('mandatory')
parNetParmCbDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 3), Integer32().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbDelay.setStatus('mandatory')
parNetParmCbOffset = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbOffset.setStatus('mandatory')
parNetParmMsgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 5), Integer32().clone(1700)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgTimeout.setStatus('mandatory')
parNetParmMsgMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 6), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgMaxTimeout.setStatus('mandatory')
parNetParmMsgMaxTimeoutSat = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 7), Integer32().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMsgMaxTimeoutSat.setStatus('mandatory')
parNetParmBlindMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmBlindMaxTimeout.setStatus('mandatory')
parNetParmCbMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 9), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCbMaxTimeout.setStatus('mandatory')
parNetParmCfTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 10), Integer32().clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfTestInterval.setStatus('mandatory')
parNetParmCfTestMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 11), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfTestMultiplier.setStatus('mandatory')
parNetParmNetwWindowSz = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 12), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmNetwWindowSz.setStatus('mandatory')
parNetParmNetwLetWait = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 13), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmNetwLetWait.setStatus('mandatory')
parNetParmCfDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 14), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmCfDelay.setStatus('mandatory')
parNetParmHighTxRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 15), Integer32().clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmHighTxRate.setStatus('mandatory')
parNetParmLowTxRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 16), Integer32().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmLowTxRate.setStatus('mandatory')
parNetParmMaxNodeBlks = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 17), Integer32().clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmMaxNodeBlks.setStatus('mandatory')
parNetParmTopoMsgSegSz = MibScalar((1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 18), Integer32().clone(3570)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: parNetParmTopoMsgSegSz.setStatus('mandatory')
ausmPortCnfPortImaGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4))
ausmPortImaGrpRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7))
ausmPortCnfPortImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: ausmPortCnfPortImaGrpTable.setStatus('mandatory')
ausmPortCnfPortImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imaPortNum"))
if mibBuilder.loadTexts: ausmPortCnfPortImaGrpEntry.setStatus('mandatory')
imaPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortNum.setStatus('mandatory')
imaPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("delport", 1), ("addport", 2), ("addlinks", 3), ("dellinks", 4), ("modify", 5))).clone('delport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaPortEnable.setStatus('mandatory')
imaPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 38328))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortSpeed.setStatus('mandatory')
numLinksInImaGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLinksInImaGrp.setStatus('mandatory')
listOfLinksInImaGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: listOfLinksInImaGrp.setStatus('mandatory')
lcpCellsPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 128)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcpCellsPeriodicity.setStatus('mandatory')
lcpDelayTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcpDelayTolerance.setStatus('mandatory')
readPtrWrPtrDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readPtrWrPtrDiff.setStatus('mandatory')
numRedundantLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numRedundantLinks.setStatus('mandatory')
maxTolerableDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 275))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTolerableDiffDelay.setStatus('mandatory')
imaPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("sti", 3), ("vpTrkUni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaPortType.setStatus('mandatory')
axisImaGroupTxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 38330))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupTxAvailCellRate.setStatus('mandatory')
axisImaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetriConfiguration", 3))).clone('symmetricOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupSymmetry.setStatus('mandatory')
axisImaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupMinNumRxLinks.setStatus('mandatory')
axisImaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2))).clone('ctc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupNeTxClkMode.setStatus('mandatory')
axisImaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupAlphaValue.setStatus('mandatory')
axisImaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupBetaValue.setStatus('mandatory')
axisImaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupGammaValue.setStatus('mandatory')
axisImaGroupNumRxCfgLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupNumRxCfgLnks.setStatus('mandatory')
axisImaGroupTestLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 20), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupTestLinkIfIndex.setStatus('mandatory')
axisImaGroupTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 21), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupTestPattern.setStatus('mandatory')
axisImaGroupTestProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("operating", 2), ("linkfail", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupTestProcStatus.setStatus('mandatory')
axisImaGroupIntegrationUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000)).clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupIntegrationUpTime.setStatus('mandatory')
axisImaGroupIntegrationDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 400000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupIntegrationDownTime.setStatus('mandatory')
axisImaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupMinNumTxLinks.setStatus('mandatory')
axisImaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupRxImaId.setStatus('mandatory')
nextPortNumAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextPortNumAvailable.setStatus('mandatory')
ausmPortImaGrpRestartTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: ausmPortImaGrpRestartTable.setStatus('mandatory')
ausmPortImaGrpRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "axisImaGroupimaPortNum"))
if mibBuilder.loadTexts: ausmPortImaGrpRestartEntry.setStatus('mandatory')
axisImaGroupimaPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupimaPortNum.setStatus('mandatory')
axisImaGroupRestartImaGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("persistent", 2), ("dorelearn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisImaGroupRestartImaGrp.setStatus('mandatory')
ausmPortCntPortImaGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3))
ausmPortCntPortImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: ausmPortCntPortImaGrpTable.setStatus('mandatory')
ausmPortCntPortImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imaCntPortNum"))
if mibBuilder.loadTexts: ausmPortCntPortImaGrpEntry.setStatus('mandatory')
imaCntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaCntPortNum.setStatus('mandatory')
rcvAcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvAcpCells.setStatus('mandatory')
rcvAcpErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvAcpErrCells.setStatus('mandatory')
xmtAcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtAcpCells.setStatus('mandatory')
xmtAcpCellsMissed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtAcpCellsMissed.setStatus('mandatory')
imaGrpRcvHecErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRcvHecErrCount.setStatus('mandatory')
imaGrpRcvHecErrSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRcvHecErrSecCount.setStatus('mandatory')
imaGrpRcvHecErrSESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaGrpRcvHecErrSESecCount.setStatus('mandatory')
imaCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaCntClrButton.setStatus('mandatory')
axisImaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupRunningSecs.setStatus('mandatory')
axisImaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupUnavailSecs.setStatus('mandatory')
axisImaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupNeNumFailures.setStatus('mandatory')
axisImaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupFeNumFailures.setStatus('mandatory')
ausmPortStateImaGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4))
ausmPortStateImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1), )
if mibBuilder.loadTexts: ausmPortStateImaGrpTable.setStatus('mandatory')
ausmPortStateImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imaStatePortNum"))
if mibBuilder.loadTexts: ausmPortStateImaGrpEntry.setStatus('mandatory')
imaStatePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaStatePortNum.setStatus('mandatory')
imaPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("unconfigured", 1), ("active", 2), ("bandwidthChanged", 3), ("failedDueToAcpTimeout", 4), ("failedDueToMajorAlmonImaGrp", 5), ("failedDueToImaSigFailure", 6), ("failedDueToBadDiffDelay", 7), ("failedDueToArbConflict", 8), ("receivingLoamAis", 9), ("receivingLoamRdi", 10), ("failedDueToIlmiSignalling", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortState.setStatus('mandatory')
numLinksPresentInImaGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLinksPresentInImaGroup.setStatus('mandatory')
listLinksPresentInImaGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: listLinksPresentInImaGroup.setStatus('mandatory')
remoteImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteImaId.setStatus('mandatory')
locImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locImaId.setStatus('mandatory')
imaArbitrationWinner = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isUnknown", 1), ("isWinner", 2), ("isLoser", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaArbitrationWinner.setStatus('mandatory')
imaObsDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaObsDiffDelay.setStatus('mandatory')
imaPortOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortOversubscribed.setStatus('mandatory')
imaPortIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortIngrPercentUtil.setStatus('mandatory')
imaPortEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaPortEgrPercentUtil.setStatus('mandatory')
axisImaGroupRxAvailCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupRxAvailCellRate.setStatus('mandatory')
axisImaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupFeState.setStatus('mandatory')
axisImaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupFailureStatus.setStatus('mandatory')
axisImaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctc", 1), ("itc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupFeTxClkMode.setStatus('mandatory')
axisImaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupTxTimingRefLink.setStatus('mandatory')
axisImaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupRxTimingRefLink.setStatus('mandatory')
axisImaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupLastChange.setStatus('mandatory')
axisImaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))).clone(namedValues=NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupRxFrameLength.setStatus('mandatory')
axisImaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupLeastDelayLink.setStatus('mandatory')
axisImaGroupNumRxActLnks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupNumRxActLnks.setStatus('mandatory')
axisImaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupNeState.setStatus('mandatory')
axisImaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisImaGroupNumber.setStatus('mandatory')
imatmClkCfgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 8))
primaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("liu-rclk0", 1), ("liu-rclk1", 2), ("liu-rclk2", 3), ("liu-rclk3", 4), ("liu-rclk4", 5), ("liu-rclk5", 6), ("liu-rclk6", 7), ("liu-rclk7", 8), ("dsx3", 9), ("bp8clk", 10))).clone('bp8clk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryClockSource.setStatus('mandatory')
secondaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("liu-rclk0", 1), ("liu-rclk1", 2), ("liu-rclk2", 3), ("liu-rclk3", 4), ("liu-rclk4", 5), ("liu-rclk5", 6), ("liu-rclk6", 7), ("liu-rclk7", 8), ("dsx3", 9), ("bp8clk", 10), ("none", 11))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryClockSource.setStatus('mandatory')
currentClockSource = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("internal", 3))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentClockSource.setStatus('mandatory')
imatmDsx3CntrsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 9))
imatmDsx3PortCntrsGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1), )
if mibBuilder.loadTexts: imatmDsx3PortCntrsGrpTable.setStatus('mandatory')
imatmDsx3PortCntrsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imatmDsx3PortIndex"))
if mibBuilder.loadTexts: imatmDsx3PortCntrsEntry.setStatus('mandatory')
imatmDsx3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmDsx3PortIndex.setStatus('mandatory')
imatmDsx3PortRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmDsx3PortRcvCells.setStatus('mandatory')
imatmDsx3PortXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmDsx3PortXmtCells.setStatus('mandatory')
imatmPortRcvInvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmPortRcvInvCells.setStatus('mandatory')
imatmPortCntrClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmPortCntrClrButton.setStatus('mandatory')
imatmDsx3PortLastMismatchVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmDsx3PortLastMismatchVpiVci.setStatus('mandatory')
imatmPortImaCtrlMatchCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmPortImaCtrlMatchCells.setStatus('mandatory')
dsx3CardSpecCnfgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 14))
imatmDsx3CardSpecConfigGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1), )
if mibBuilder.loadTexts: imatmDsx3CardSpecConfigGrpTable.setStatus('mandatory')
imatmDsx3CardSpecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imatmdsx3PortIndex"))
if mibBuilder.loadTexts: imatmDsx3CardSpecConfigEntry.setStatus('mandatory')
imatmdsx3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmdsx3PortIndex.setStatus('mandatory')
imatmDsx3SingleBitErrCorrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmDsx3SingleBitErrCorrEnable.setStatus('mandatory')
imatmVpTrkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 13))
imatmVpTrkMapGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1))
imatmVpTrkMapGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1), )
if mibBuilder.loadTexts: imatmVpTrkMapGrpTable.setStatus('mandatory')
imatmVpTrkMapGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imatmRangeNum"))
if mibBuilder.loadTexts: imatmVpTrkMapGrpTableEntry.setStatus('mandatory')
imatmRangeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmRangeNum.setStatus('mandatory')
imatmTrkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmTrkNum.setStatus('mandatory')
imatmTrkMinVp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmTrkMinVp.setStatus('mandatory')
imatmTrkMaxVp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmTrkMaxVp.setStatus('mandatory')
imatmTrkOpType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmTrkOpType.setStatus('mandatory')
nextRangeNumAvail = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextRangeNumAvail.setStatus('mandatory')
imatmVpTrkClrGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2))
imatmVpTrkClrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1), )
if mibBuilder.loadTexts: imatmVpTrkClrGrpTable.setStatus('mandatory')
imatmVpTrkClrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "imatmClrVpTrkNum"))
if mibBuilder.loadTexts: imatmVpTrkClrGrpEntry.setStatus('mandatory')
imatmClrVpTrkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imatmClrVpTrkNum.setStatus('mandatory')
imatmClrVpTrkButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imatmClrVpTrkButton.setStatus('mandatory')
imaAutoRestartFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 21))
imaAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imaAutoRestart.setStatus('mandatory')
commonChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 2, 7))
commonChanTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1), )
if mibBuilder.loadTexts: commonChanTable.setStatus('mandatory')
commonChanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "commonChanNum"))
if mibBuilder.loadTexts: commonChanTableEntry.setStatus('mandatory')
commonChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanNum.setStatus('mandatory')
commonConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonConnType.setStatus('mandatory')
commonChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", 1), ("normal", 2), ("alarm", 3))).clone('notconfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanStatus.setStatus('mandatory')
commonAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonAlarmState.setStatus('mandatory')
commonChanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanPortNum.setStatus('mandatory')
commonChanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("abr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanServiceType.setStatus('mandatory')
commonChanIngrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanIngrXmtState.setStatus('mandatory')
commonChanIngrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanIngrRcvState.setStatus('mandatory')
commonChanEgrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanEgrXmtState.setStatus('mandatory')
commonChanEgrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonChanEgrRcvState.setStatus('mandatory')
commonConnParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonConnParm1.setStatus('mandatory')
commonConnParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonConnParm2.setStatus('mandatory')
commonPort = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 2, 6))
commonPortTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1), )
if mibBuilder.loadTexts: commonPortTable.setStatus('mandatory')
commonPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "commonPortNum"))
if mibBuilder.loadTexts: commonPortTableEntry.setStatus('mandatory')
commonPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortNum.setStatus('mandatory')
commonPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("framerelayport", 1), ("atmport", 2), ("imaport", 3))).clone('atmport')).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortType.setStatus('mandatory')
commonPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortStatus.setStatus('mandatory')
commonPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 37360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortSpeed.setStatus('mandatory')
commonPortAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inalarm", 1), ("outofalarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortAlarmState.setStatus('mandatory')
commonPortSignallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tbd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortSignallingProtocolType.setStatus('mandatory')
commonPortSignallingState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tbd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortSignallingState.setStatus('mandatory')
commonPortAssocLines = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortAssocLines.setStatus('mandatory')
commonPortAssocChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonPortAssocChannels.setStatus('mandatory')
ausmChanCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1))
ausmChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: ausmChanCnfGrpTable.setStatus('mandatory')
ausmChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmChanNum"))
if mibBuilder.loadTexts: ausmChanCnfGrpEntry.setStatus('mandatory')
ausmChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanNum.setStatus('mandatory')
ausmChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3), ("outOfService", 4))).clone('del')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanRowStatus.setStatus('mandatory')
chanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanConnType.setStatus('mandatory')
chanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 5))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanServiceType.setStatus('mandatory')
chanConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanConnDesc.setStatus('mandatory')
chanSvcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("svc", 1), ("pvc", 2), ("spvc", 3), ("par", 4), ("pnni", 5), ("tag", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanSvcFlag.setStatus('mandatory')
chanSvcConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanSvcConnId.setStatus('mandatory')
ausmChanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanPortNum.setStatus('mandatory')
chanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanVpi.setStatus('mandatory')
chanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanVci.setStatus('mandatory')
chanEgrQSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanEgrQSelect.setStatus('mandatory')
ingrQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrQDepth.setStatus('mandatory')
ingrQCLPThreshHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrQCLPThreshHigh.setStatus('mandatory')
ingrQCLPThreshLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrQCLPThreshLow.setStatus('mandatory')
ingrQCLPState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrQCLPState.setStatus('mandatory')
ingrQEfciThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrQEfciThresh.setStatus('mandatory')
ingrUpcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcEnable.setStatus('mandatory')
ingrUpcPCR01 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcPCR01.setStatus('mandatory')
ingrUpcCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcCIR.setStatus('mandatory')
ingrUpcCCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcCCDV.setStatus('mandatory')
ingrUpcCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcCBS.setStatus('mandatory')
ingrUpcIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4830)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcIBS.setStatus('mandatory')
ingrUpcMFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcMFS.setStatus('mandatory')
ingrUpcSCRPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3))).clone('clp0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcSCRPolicing.setStatus('mandatory')
ingrUpcPCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcPCR0.setStatus('mandatory')
ingrUpcCDVT0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcCDVT0.setStatus('mandatory')
ingrUpcCLPTagEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcCLPTagEnable.setStatus('mandatory')
ingrUpcFGCRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingrUpcFGCRAEnable.setStatus('mandatory')
foresightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foresightEnable.setStatus('mandatory')
foresightMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foresightMIR.setStatus('mandatory')
foresightPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foresightPIR.setStatus('mandatory')
foresightQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foresightQIR.setStatus('mandatory')
ausmChanLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanLocRmtLpbkState.setStatus('mandatory')
ausmChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanTestType.setStatus('mandatory')
ausmChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4))).clone('notinprogress')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanTestState.setStatus('mandatory')
ausmChanRTDResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanRTDResult.setStatus('mandatory')
ausmChanTestTypeCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testconseg", 1), ("notest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanTestTypeCPESide.setStatus('mandatory')
ausmChanTestStateCPESide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanTestStateCPESide.setStatus('mandatory')
ausmChanIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanIngrPercentUtil.setStatus('mandatory')
ausmChanEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanEgrPercentUtil.setStatus('mandatory')
ausmChanEgrSrvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanEgrSrvRate.setStatus('mandatory')
ausmChanOvrSubOvrRide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanOvrSubOvrRide.setStatus('mandatory')
ausmChanLocalVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 340))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanLocalVpId.setStatus('mandatory')
ausmChanRMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanRMEnable.setStatus('mandatory')
ausmIngrDiscardOption = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpHysterisis", 1), ("frameDiscard", 2))).clone('clpHysterisis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmIngrDiscardOption.setStatus('mandatory')
ausmIngrFrDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmIngrFrDiscardThreshold.setStatus('mandatory')
ausmCDRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmCDRNumber.setStatus('mandatory')
ausmLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmLocalVpi.setStatus('mandatory')
ausmLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmLocalVci.setStatus('mandatory')
ausmLocalNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmLocalNSAP.setStatus('mandatory')
ausmRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmRemoteVpi.setStatus('mandatory')
ausmRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmRemoteVci.setStatus('mandatory')
ausmRemoteNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmRemoteNSAP.setStatus('mandatory')
ausmMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3))).clone('slave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmMastership.setStatus('mandatory')
ausmVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmVpcFlag.setStatus('mandatory')
ausmConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7), ("rtvbr", 8), ("cbr1", 21), ("vbr1rt", 22), ("vbr2rt", 23), ("vbr3rt", 24), ("vbr1nrt", 25), ("vbr2nrt", 26), ("vbr3nrt", 27), ("ubr1", 28), ("ubr2", 29), ("stdabr", 30), ("cbr2", 31), ("cbr3", 32))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnServiceType.setStatus('mandatory')
ausmRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmRoutingPriority.setStatus('mandatory')
ausmMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmMaxCost.setStatus('mandatory')
ausmRestrictTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noresriction", 1), ("terrestrialTrunk", 2), ("sateliteTrunk", 3))).clone('noresriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmRestrictTrunkType.setStatus('mandatory')
ausmConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnPCR.setStatus('mandatory')
ausmConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnMCR.setStatus('mandatory')
ausmConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnPercentUtil.setStatus('mandatory')
ausmConnRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnRemotePCR.setStatus('mandatory')
ausmConnRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnRemoteMCR.setStatus('mandatory')
ausmConnRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnRemotePercentUtil.setStatus('mandatory')
ausmConnForeSightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnForeSightEnable.setStatus('mandatory')
ausmConnFGCRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnFGCRAEnable.setStatus('mandatory')
ausmChanReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanReroute.setStatus('mandatory')
ausmConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnSCR.setStatus('mandatory')
ausmConnRemoteSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnRemoteSCR.setStatus('mandatory')
ausmConnMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnMBS.setStatus('mandatory')
ausmConnRemoteMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnRemoteMBS.setStatus('mandatory')
ausmConnTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnTemplateId.setStatus('mandatory')
ausmConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmConnAdminStatus.setStatus('mandatory')
ausmChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanNumNextAvailable.setStatus('mandatory')
ausmChanVpIdNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanVpIdNextAvailable.setStatus('mandatory')
ausmStdABRCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4), )
if mibBuilder.loadTexts: ausmStdABRCnfGrpTable.setStatus('mandatory')
ausmStdABRCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmStdABRCnfChanNum"))
if mibBuilder.loadTexts: ausmStdABRCnfGrpEntry.setStatus('mandatory')
ausmStdABRCnfChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmStdABRCnfChanNum.setStatus('mandatory')
ausmStdABRType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchBehaviour", 1), ("srcDestBehaviour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRType.setStatus('mandatory')
ausmStdABRTBE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRTBE.setStatus('mandatory')
ausmStdABRFRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRFRTT.setStatus('mandatory')
ausmStdABRRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRRDF.setStatus('mandatory')
ausmStdABRRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRRIF.setStatus('mandatory')
ausmStdABRNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRNrm.setStatus('mandatory')
ausmStdABRTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRTrm.setStatus('mandatory')
ausmStdABRCDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRCDF.setStatus('mandatory')
ausmStdABRADTF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10230)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRADTF.setStatus('mandatory')
ausmStdABRICR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRICR.setStatus('mandatory')
ausmStdABRMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRMCR.setStatus('mandatory')
ausmStdABRPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 38328)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmStdABRPCR.setStatus('mandatory')
ausmChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3))
ausmChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1), )
if mibBuilder.loadTexts: ausmChanCntGrpTable.setStatus('mandatory')
ausmChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmCntChanNum"))
if mibBuilder.loadTexts: ausmChanCntGrpEntry.setStatus('mandatory')
ausmCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmCntChanNum.setStatus('mandatory')
chanSecInService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanSecInService.setStatus('mandatory')
chanCongestMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanCongestMinutes.setStatus('mandatory')
chanIngrPeakQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrPeakQDepth.setStatus('mandatory')
chanIngrRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrRcvCells.setStatus('mandatory')
chanIngrClpSetRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrClpSetRcvCells.setStatus('mandatory')
chanIngrEfciSetRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrEfciSetRcvCells.setStatus('mandatory')
chanIngrQfullDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrQfullDiscardCells.setStatus('mandatory')
chanIngrClpSetDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrClpSetDiscardCells.setStatus('mandatory')
chanIngrUpcClpSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrUpcClpSetCells.setStatus('mandatory')
chanIngrXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrXmtCells.setStatus('mandatory')
chanShelfAlarmDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanShelfAlarmDiscardCells.setStatus('mandatory')
ausmChanClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmChanClrButton.setStatus('mandatory')
chanEpdDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEpdDiscCells.setStatus('mandatory')
chanPpdDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanPpdDiscCells.setStatus('mandatory')
chanIngrRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrRcvCellRate.setStatus('mandatory')
chanIngrRcvUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrRcvUtilization.setStatus('mandatory')
chanIngrXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrXmtCellRate.setStatus('mandatory')
chanIngrXmtUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrXmtUtilization.setStatus('mandatory')
chanEgrRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrRcvCellRate.setStatus('mandatory')
chanEgrRcvUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrRcvUtilization.setStatus('mandatory')
chanIngrXmtAAL5Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrXmtAAL5Frames.setStatus('mandatory')
chanIngrEfciSetXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrEfciSetXmtCells.setStatus('mandatory')
chanEgrPortQfullDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrPortQfullDiscardCells.setStatus('mandatory')
chanEgrPortQClpThresDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrPortQClpThresDiscardCells.setStatus('mandatory')
chanTxFifoFullCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanTxFifoFullCnt.setStatus('mandatory')
chanIngrCurrQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrCurrQDepth.setStatus('mandatory')
ausmChanStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2))
ausmChanStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1), )
if mibBuilder.loadTexts: ausmChanStateGrpTable.setStatus('mandatory')
ausmChanStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmStateChanNum"))
if mibBuilder.loadTexts: ausmChanStateGrpEntry.setStatus('mandatory')
ausmStateChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmStateChanNum.setStatus('mandatory')
ausmChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 1), ("normal", 2), ("alarm", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanState.setStatus('mandatory')
chanEgrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrXmtState.setStatus('mandatory')
chanIngrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrRcvState.setStatus('mandatory')
chanIngrXmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAis", 3), ("sendingFerf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanIngrXmtState.setStatus('mandatory')
chanEgrRcvState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAis", 3), ("receivingFerf", 4), ("alarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanEgrRcvState.setStatus('mandatory')
ausmChanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmChanStatusBitMap.setStatus('mandatory')
ausmEndPointMapGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3))
ausmEndPointMapGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1), )
if mibBuilder.loadTexts: ausmEndPointMapGrpTable.setStatus('mandatory')
ausmEndPointMapGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmEndPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "endVpi"), (0, "CISCO-WAN-AXIPOP-MIB", "endVci"))
if mibBuilder.loadTexts: ausmEndPointMapGrpEntry.setStatus('mandatory')
ausmEndPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmEndPortNum.setStatus('mandatory')
endVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endVpi.setStatus('mandatory')
endVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endVci.setStatus('mandatory')
ausmEndChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmEndChanNum.setStatus('mandatory')
endChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endChanType.setStatus('mandatory')
ausmPortCnfPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1))
ausmPortCnfPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ausmPortCnfPortGrpTable.setStatus('mandatory')
ausmPortCnfPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmPortNum"))
if mibBuilder.loadTexts: ausmPortCnfPortGrpEntry.setStatus('mandatory')
ausmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortNum.setStatus('mandatory')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnable.setStatus('mandatory')
ausmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("sti", 3), ("vpTrkUni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortType.setStatus('mandatory')
ausmPortIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("t1", 2), ("e1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortIfType.setStatus('mandatory')
ausmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortSpeed.setStatus('mandatory')
ausmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmLineNum.setStatus('mandatory')
ausmPortCnfResPartGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5))
ausmPortDelSvcsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6))
ausmPortCnfResPartGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: ausmPortCnfResPartGrpTable.setStatus('mandatory')
ausmPortCnfResPartGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmResPartPortNum"))
if mibBuilder.loadTexts: ausmPortCnfResPartGrpEntry.setStatus('mandatory')
ausmResPartPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmResPartPortNum.setStatus('mandatory')
ausmPortSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcInUse.setStatus('mandatory')
ausmPortSvcShareLcnVpid = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBased", 1), ("cardBased", 2))).clone('cardBased')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortSvcShareLcnVpid.setStatus('mandatory')
ausmPortSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcLcnLow.setStatus('mandatory')
ausmPortSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4111))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcLcnHigh.setStatus('mandatory')
ausmPortSvcVpidLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVpidLow.setStatus('mandatory')
ausmPortSvcVpidHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVpidHigh.setStatus('mandatory')
ausmPortSvcVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVciLow.setStatus('mandatory')
ausmPortSvcVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVciHigh.setStatus('mandatory')
ausmPortSvcVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVpiLow.setStatus('mandatory')
ausmPortSvcVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortSvcVpiHigh.setStatus('mandatory')
ausmPortIngrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortIngrSvcBandW.setStatus('mandatory')
ausmPortEgrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortEgrSvcBandW.setStatus('mandatory')
ausmPortDelSvcsGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: ausmPortDelSvcsGrpTable.setStatus('mandatory')
ausmPortDelSvcsGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmDelSvcsPortNum"))
if mibBuilder.loadTexts: ausmPortDelSvcsGrpEntry.setStatus('mandatory')
ausmDelSvcsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmDelSvcsPortNum.setStatus('mandatory')
ausmPortDeleteSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortDeleteSvcs.setStatus('mandatory')
ausmPortCnfServiceQueGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2))
ausmPortCnfServiceQueGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ausmPortCnfServiceQueGrpTable.setStatus('mandatory')
ausmPortCnfServiceQueGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "servicePortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "egrQIndex"))
if mibBuilder.loadTexts: ausmPortCnfServiceQueGrpEntry.setStatus('mandatory')
egrQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrQIndex.setStatus('mandatory')
servicePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePortNum.setStatus('mandatory')
egrQBinState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQBinState.setStatus('mandatory')
egrQServiceSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQServiceSequence.setStatus('mandatory')
egrQDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQDepthMax.setStatus('mandatory')
egrQCLPThreshHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQCLPThreshHigh.setStatus('mandatory')
egrQCLPThreshLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQCLPThreshLow.setStatus('mandatory')
egrQEfciThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQEfciThresh.setStatus('mandatory')
egrQAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrQAlgorithm.setStatus('mandatory')
egrMaxBwInc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrMaxBwInc.setStatus('mandatory')
egrMinBwInc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egrMinBwInc.setStatus('mandatory')
egrQCLPState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clplow", 1), ("clphigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrQCLPState.setStatus('mandatory')
egrQfullDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrQfullDiscardCells.setStatus('mandatory')
egrQClpSetDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrQClpSetDiscardCells.setStatus('mandatory')
ausmPortCnfSig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3))
ausmPortCnfSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1))
ausmPortCnfSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: ausmPortCnfSigILMIGrpTable.setStatus('mandatory')
ausmPortCnfSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "sigPortNum"))
if mibBuilder.loadTexts: ausmPortCnfSigILMIGrpEntry.setStatus('mandatory')
sigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPortNum.setStatus('mandatory')
ausmSignallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noSignalling", 2), ("iLMI", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmSignallingProtocolType.setStatus('mandatory')
signallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signallingVpi.setStatus('mandatory')
signallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signallingVci.setStatus('mandatory')
addrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 5), NetPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrPrefix.setStatus('mandatory')
customerId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customerId.setStatus('mandatory')
protocolRevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolRevNo.setStatus('mandatory')
iLMITrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iLMITrapEnable.setStatus('mandatory')
minTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minTrapInterval.setStatus('mandatory')
keepAlivePollingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keepAlivePollingEnable.setStatus('mandatory')
errorThresholdN491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorThresholdN491.setStatus('mandatory')
eventThresholdN492 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventThresholdN492.setStatus('mandatory')
pollingIntervalT491 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60))).clone(namedValues=NamedValues(("v1", 5), ("v2", 10), ("v3", 15), ("v4", 20), ("v5", 25), ("v6", 30), ("v7", 35), ("v8", 40), ("v9", 45), ("v10", 50), ("v11", 55), ("v12", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollingIntervalT491.setStatus('mandatory')
minEnquiryIntervalT493 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minEnquiryIntervalT493.setStatus('mandatory')
addrRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addrRegEnable.setStatus('mandatory')
ausmPortCntPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1))
ausmPortCntPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: ausmPortCntPortGrpTable.setStatus('mandatory')
ausmPortCntPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmCntPortNum"))
if mibBuilder.loadTexts: ausmPortCntPortGrpEntry.setStatus('mandatory')
ausmCntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmCntPortNum.setStatus('mandatory')
ingrRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrRcvCells.setStatus('mandatory')
ingrGfcErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrGfcErrCells.setStatus('mandatory')
ingrVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrVpiVciErrCells.setStatus('mandatory')
ingrLastUnknVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrLastUnknVpiVci.setStatus('mandatory')
egrXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrXmtCells.setStatus('mandatory')
egrPortAlarmDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrPortAlarmDiscardCells.setStatus('mandatory')
egrXmtClpSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrXmtClpSetCells.setStatus('mandatory')
egrXmtEfciSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrXmtEfciSetCells.setStatus('mandatory')
portXmtAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portXmtAisCells.setStatus('mandatory')
portXmtSgmtLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portXmtSgmtLpbkCells.setStatus('mandatory')
portRcvAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRcvAisCells.setStatus('mandatory')
portRcvFerfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRcvFerfCells.setStatus('mandatory')
portRcvSgmtLpbkCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRcvSgmtLpbkCells.setStatus('mandatory')
portRcvCrcErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRcvCrcErrOAMCells.setStatus('mandatory')
ausmPortClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ausmPortClrButton.setStatus('mandatory')
ingrRcvClpSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrRcvClpSetCells.setStatus('mandatory')
ingrXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrXmtCells.setStatus('mandatory')
egrRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrRcvCells.setStatus('mandatory')
ingrRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrRcvCellRate.setStatus('mandatory')
ingrRcvUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ingrRcvUtilization.setStatus('mandatory')
egrXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrXmtCellRate.setStatus('mandatory')
egrXmtUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrXmtUtilization.setStatus('mandatory')
egrRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrRcvCellRate.setStatus('mandatory')
egrRcvUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrRcvUtilization.setStatus('mandatory')
totalIngrQfulldiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIngrQfulldiscardCells.setStatus('mandatory')
txFifoFullCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFifoFullCnt.setStatus('mandatory')
totalIngrClpSetDiscardCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIngrClpSetDiscardCells.setStatus('mandatory')
ausmPortCntSig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2))
ausmPortCntSigILMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1))
ausmPortCntSigILMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: ausmPortCntSigILMIGrpTable.setStatus('mandatory')
ausmPortCntSigILMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "sigCntPortNum"))
if mibBuilder.loadTexts: ausmPortCntSigILMIGrpEntry.setStatus('mandatory')
sigCntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigCntPortNum.setStatus('mandatory')
snmpPduReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPduReceived.setStatus('mandatory')
getRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getRequestReceived.setStatus('mandatory')
getNextRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getNextRequestReceived.setStatus('mandatory')
setRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setRequestReceived.setStatus('mandatory')
trapReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapReceived.setStatus('mandatory')
getResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getResponseReceived.setStatus('mandatory')
getResponseTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getResponseTransmitted.setStatus('mandatory')
getRequestTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getRequestTransmitted.setStatus('mandatory')
trapTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTransmitted.setStatus('mandatory')
invalidPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidPDUReceived.setStatus('mandatory')
asn1ParseError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asn1ParseError.setStatus('mandatory')
noSuchNameError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noSuchNameError.setStatus('mandatory')
tooBigError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tooBigError.setStatus('mandatory')
portSigClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSigClrButton.setStatus('mandatory')
ausmPortStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2))
ausmPortStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1), )
if mibBuilder.loadTexts: ausmPortStateGrpTable.setStatus('mandatory')
ausmPortStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmStatePortNum"))
if mibBuilder.loadTexts: ausmPortStateGrpEntry.setStatus('mandatory')
ausmStatePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmStatePortNum.setStatus('mandatory')
ausmPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteloopback", 3), ("linefailure", 4), ("signallingfailure", 5), ("outofcelldelineation", 6), ("localloopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortState.setStatus('mandatory')
ausmPortOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortOversubscribed.setStatus('mandatory')
ausmPortIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortIngrPercentUtil.setStatus('mandatory')
ausmPortEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmPortEgrPercentUtil.setStatus('mandatory')
ausmPortInterfaceGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5))
ausmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1), )
if mibBuilder.loadTexts: ausmInterfaceConfTable.setStatus('mandatory')
ausmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ausmInterfacePortNum"))
if mibBuilder.loadTexts: ausmInterfaceConfEntry.setStatus('mandatory')
ausmInterfacePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmInterfacePortNum.setStatus('mandatory')
ausmInterfaceMyNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausmInterfaceMyNeighborIpAddress.setStatus('mandatory')
cesmChanCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1))
cesmChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1), )
if mibBuilder.loadTexts: cesmChanCnfGrpTable.setStatus('mandatory')
cesmChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cesCnfChanNum"))
if mibBuilder.loadTexts: cesmChanCnfGrpEntry.setStatus('mandatory')
cesCnfChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCnfChanNum.setStatus('mandatory')
cesChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3), ("outOfService", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanRowStatus.setStatus('mandatory')
cesMapPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapPortNum.setStatus('mandatory')
cesMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapVpi.setStatus('mandatory')
cesMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapVci.setStatus('mandatory')
cesCBRService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2))).clone('unstructured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCBRService.setStatus('mandatory')
cesCBRClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCBRClockMode.setStatus('mandatory')
cesCas = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4), ("ccs", 5), ("conditionedE1Cas", 6), ("basicNoPointer", 7), ("ds1SfCasMF", 8), ("ds1EsfCasMF", 9))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCas.setStatus('mandatory')
cesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPartialFill.setStatus('mandatory')
cesBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesBufMaxSize.setStatus('mandatory')
cesCDVRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCDVRxT.setStatus('mandatory')
cesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCellLossIntegrationPeriod.setStatus('mandatory')
cesChanLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanLocRmtLpbkState.setStatus('mandatory')
cesChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3), ("testconsti", 4), ("testdelaysti", 5))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanTestType.setStatus('mandatory')
cesChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanTestState.setStatus('mandatory')
cesChanRTDResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanRTDResult.setStatus('mandatory')
cesChanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanPortNum.setStatus('mandatory')
cesChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("spvc", 3))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanConnType.setStatus('mandatory')
cesChanStrauSciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonStrauChannel", 1), ("sci1", 2), ("sci2", 3), ("sci3", 4), ("sci4", 5))).clone('nonStrauChannel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanStrauSciNum.setStatus('mandatory')
cesChanIdleDetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableOnhookDet", 2), ("enableIdlePatternDet", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleDetEnable.setStatus('mandatory')
cesChanIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleSignalCode.setStatus('mandatory')
cesChanIdleCodeIntgnPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleCodeIntgnPeriod.setStatus('mandatory')
cesChanOnhookCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanOnhookCode.setStatus('mandatory')
cesChanConditionedData = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanConditionedData.setStatus('mandatory')
cesmChanExtTrgIdleSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disablesuppression", 1), ("enableSuppresion", 2))).clone('disablesuppression')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanExtTrgIdleSupp.setStatus('mandatory')
cesmChanConditionedSigCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanConditionedSigCode.setStatus('mandatory')
cesLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLocalVpi.setStatus('mandatory')
cesLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLocalVci.setStatus('mandatory')
cesLocalNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesLocalNSAP.setStatus('mandatory')
cesRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteVpi.setStatus('mandatory')
cesRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteVci.setStatus('mandatory')
cesRemoteNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteNSAP.setStatus('mandatory')
cesMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unkown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesMastership.setStatus('mandatory')
cesVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesVpcFlag.setStatus('mandatory')
cesConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7), ("cbr1", 21), ("vbr1rt", 22), ("vbr2rt", 23), ("vbr3rt", 24), ("vbr1nrt", 25), ("vbr2nrt", 26), ("vbr3nrt", 27), ("ubr1", 28), ("ubr2", 29), ("stdabr", 30), ("cbr2", 31), ("cbr3", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnServiceType.setStatus('mandatory')
cesRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRoutingPriority.setStatus('mandatory')
cesMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesMaxCost.setStatus('mandatory')
cesRestrictTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noresriction", 1), ("terrestrialTrunk", 2), ("sateliteTrunk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRestrictTrunkType.setStatus('mandatory')
cesConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnPCR.setStatus('mandatory')
cesConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnMCR.setStatus('mandatory')
cesConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnPercentUtil.setStatus('mandatory')
cesmConnRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemotePCR.setStatus('mandatory')
cesmConnRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemoteMCR.setStatus('mandatory')
cesmConnRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemotePercentUtil.setStatus('mandatory')
cesmConnForeSightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnForeSightEnable.setStatus('mandatory')
cesmConnFGCRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnFGCRAEnable.setStatus('mandatory')
cesmChanReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanReroute.setStatus('mandatory')
cesmConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnAdminStatus.setStatus('mandatory')
cesmChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesmChanNumNextAvailable.setStatus('mandatory')
cesmChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2))
cesmChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1), )
if mibBuilder.loadTexts: cesmChanCntGrpTable.setStatus('mandatory')
cesmChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cesCntChanNum"))
if mibBuilder.loadTexts: cesmChanCntGrpEntry.setStatus('mandatory')
cesCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCntChanNum.setStatus('mandatory')
cesChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("okay", 2), ("alarm", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanState.setStatus('mandatory')
cesXmtATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAIS", 3), ("sendingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesXmtATMState.setStatus('mandatory')
cesRcvATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAIS", 3), ("receivingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesRcvATMState.setStatus('mandatory')
cesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellLossStatus.setStatus('mandatory')
cesReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesReassCells.setStatus('mandatory')
cesGenCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesGenCells.setStatus('mandatory')
cesHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesHdrErrors.setStatus('mandatory')
cesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPointerReframes.setStatus('mandatory')
cesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLostCells.setStatus('mandatory')
cesBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufUnderflows.setStatus('mandatory')
cesBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufOverflows.setStatus('mandatory')
cesIngrDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesIngrDiscardedBytes.setStatus('mandatory')
cesUflowInsCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesUflowInsCells.setStatus('mandatory')
cesOflowDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesOflowDropBytes.setStatus('mandatory')
cesCellSeqMismatchCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellSeqMismatchCnt.setStatus('mandatory')
counterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClrButton.setStatus('mandatory')
cesChanSecUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSecUptime.setStatus('mandatory')
cesChanSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off-hook", 1), ("on-hook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanSignalingStatus.setStatus('mandatory')
cesChanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanStatusBitMap.setStatus('mandatory')
cesmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1))
cesmPortCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1))
cesmPortCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1), )
if mibBuilder.loadTexts: cesmPortCnfGrpTable.setStatus('mandatory')
cesmPortCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cesPortNum"))
if mibBuilder.loadTexts: cesmPortCnfGrpEntry.setStatus('mandatory')
cesPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNum.setStatus('mandatory')
cesPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortRowStatus.setStatus('mandatory')
cesPortLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortLineNum.setStatus('mandatory')
cesPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2), ("framingOnVcDisconnect", 3), ("strau", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortType.setStatus('mandatory')
cesPortDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortDs0ConfigBitMap.setStatus('mandatory')
cesPortNumOfDs0Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfDs0Slot.setStatus('mandatory')
cesPortNumOfSCIPerDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfSCIPerDS0.setStatus('mandatory')
cesPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44736))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortSpeed.setStatus('mandatory')
cesPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteLoopback", 3), ("failedDueToLine", 4), ("failedDueToSignalling", 5), ("inactive", 6), ("inBert", 7), ("farEndRemoteLoopback", 8))).clone('notConfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortState.setStatus('mandatory')
cesPortBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortBERTEnable.setStatus('mandatory')
cesPortNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNextAvailable.setStatus('mandatory')
cesPortsUsedLine1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine1.setStatus('mandatory')
cesPortsUsedLine2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine2.setStatus('mandatory')
cesPortsUsedLine3 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine3.setStatus('mandatory')
cesPortsUsedLine4 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine4.setStatus('mandatory')
cesPortsUsedLine5 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine5.setStatus('mandatory')
cesPortsUsedLine6 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine6.setStatus('mandatory')
cesPortsUsedLine7 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine7.setStatus('mandatory')
cesPortsUsedLine8 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine8.setStatus('mandatory')
cesmPortCnfResPartGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2))
cesmPortCnfResPartGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1), )
if mibBuilder.loadTexts: cesmPortCnfResPartGrpTable.setStatus('mandatory')
cesmPortCnfResPartGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cesmResPartPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "cesmResPartCtrlrNum"))
if mibBuilder.loadTexts: cesmPortCnfResPartGrpEntry.setStatus('mandatory')
cesmResPartPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesmResPartPortNum.setStatus('mandatory')
cesmResPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesmResPartCtrlrNum.setStatus('mandatory')
cesmResPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartRowStatus.setStatus('mandatory')
cesmResPartNumOfLcnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartNumOfLcnAvail.setStatus('mandatory')
cesmResPartLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartLcnLow.setStatus('mandatory')
cesmResPartLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartLcnHigh.setStatus('mandatory')
cesmResPartIngrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartIngrPctBW.setStatus('mandatory')
cesmResPartEgrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartEgrPctBW.setStatus('mandatory')
cesmResPartCtrlrID = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmResPartCtrlrID.setStatus('mandatory')
cesmEndPtMapGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3))
cesmEndPtMapGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1), )
if mibBuilder.loadTexts: cesmEndPtMapGrpTable.setStatus('mandatory')
cesmEndPtMapGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cesEndPortNum"))
if mibBuilder.loadTexts: cesmEndPtMapGrpEntry.setStatus('mandatory')
cesEndPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndPortNum.setStatus('mandatory')
cesEndChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndChanNum.setStatus('mandatory')
cesEndLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndLineNum.setStatus('mandatory')
frChanCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1))
frChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1), )
if mibBuilder.loadTexts: frChanCnfGrpTable.setStatus('mandatory')
frChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "chanNum"))
if mibBuilder.loadTexts: frChanCnfGrpEntry.setStatus('mandatory')
chanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanNum.setStatus('mandatory')
chanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3), ("outOfService", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanRowStatus.setStatus('mandatory')
chanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanPortNum.setStatus('mandatory')
dLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dLCI.setStatus('mandatory')
egressQSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("lowPriority", 2), ("notSupported", 3))).clone('lowPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressQSelect.setStatus('mandatory')
ingressQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4510, 2097151)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressQDepth.setStatus('mandatory')
ingressQECNThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(6553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressQECNThresh.setStatus('mandatory')
ingressQDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(32767)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ingressQDEThresh.setStatus('mandatory')
egressQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressQDepth.setStatus('mandatory')
egressQDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(32767)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressQDEThresh.setStatus('mandatory')
egressQECNThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(6553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egressQECNThresh.setStatus('mandatory')
deTaggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deTaggingEnable.setStatus('mandatory')
cir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52000000)).clone(2400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cir.setStatus('mandatory')
bc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(5100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bc.setStatus('mandatory')
be = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(5100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: be.setStatus('mandatory')
ibs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibs.setStatus('mandatory')
foreSightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreSightEnable.setStatus('mandatory')
qir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 6400000)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qir.setStatus('mandatory')
mir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 6400000)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mir.setStatus('mandatory')
pir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 6400000)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pir.setStatus('mandatory')
chanLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLocRmtLpbkState.setStatus('mandatory')
chanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanTestType.setStatus('mandatory')
chanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4))).clone('notinprogress')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanTestState.setStatus('mandatory')
chanRTDResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanRTDResult.setStatus('mandatory')
chanType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("frNIW", 1), ("frSIW-transparent", 2), ("frSIW-translate", 3), ("frFUNI", 4), ("frForward", 5), ("frNIWReplace", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanType.setStatus('mandatory')
chanFECNconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapEFCI", 1), ("setEFCIzero", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanFECNconfig.setStatus('mandatory')
chanDEtoCLPmap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mapCLP", 1), ("setCLPzero", 2), ("setCLPone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanDEtoCLPmap.setStatus('mandatory')
chanCLPtoDEmap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mapDE", 1), ("setDEzero", 2), ("setDEone", 3), ("ignoreCLP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanCLPtoDEmap.setStatus('mandatory')
chanIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanIngrPercentUtil.setStatus('mandatory')
chanEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanEgrPercentUtil.setStatus('mandatory')
chanEgrSrvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 52000000)).clone(2400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanEgrSrvRate.setStatus('mandatory')
chanOvrSubOvrRide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanOvrSubOvrRide.setStatus('mandatory')
chanFrConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("spvc", 3), ("par", 4), ("pnni", 5), ("tag", 6))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanFrConnType.setStatus('mandatory')
frCDRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCDRNumber.setStatus('mandatory')
frLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLocalVpi.setStatus('mandatory')
frLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLocalVci.setStatus('mandatory')
frLocalNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLocalNSAP.setStatus('mandatory')
frRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frRemoteVpi.setStatus('mandatory')
frRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frRemoteVci.setStatus('mandatory')
frRemoteNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frRemoteNSAP.setStatus('mandatory')
frMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frMastership.setStatus('mandatory')
frVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frVpcFlag.setStatus('mandatory')
frConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("notUsed", 3), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7), ("vbrrt", 8), ("cbr1", 21), ("vbr1rt", 22), ("vbr2rt", 23), ("vbr3rt", 24), ("vbr1nrt", 25), ("vbr2nrt", 26), ("vbr3nrt", 27), ("ubr1", 28), ("ubr2", 29), ("stdabr", 30), ("cbr2", 31), ("cbr3", 32))).clone('atfr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnServiceType.setStatus('mandatory')
frRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frRoutingPriority.setStatus('mandatory')
frMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frMaxCost.setStatus('mandatory')
frRestrictTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("norestriction", 1), ("terrestrialTrunk", 2), ("sateliteTrunk", 3))).clone('norestriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frRestrictTrunkType.setStatus('mandatory')
frConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnPCR.setStatus('mandatory')
frConnRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnRemotePCR.setStatus('mandatory')
frConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnMCR.setStatus('mandatory')
frConnRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnRemoteMCR.setStatus('mandatory')
frConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnPercentUtil.setStatus('mandatory')
frConnRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnRemotePercentUtil.setStatus('mandatory')
frConnForeSightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnForeSightEnable.setStatus('mandatory')
frConnFGCRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnFGCRAEnable.setStatus('mandatory')
chanServType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("highpriority", 1), ("rtVBR", 2), ("nrtVBR", 3), ("aBR", 4), ("uBR", 5), ("queue6", 6), ("queue7", 7), ("queue8", 8), ("stdABR", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanServType.setStatus('mandatory')
chanServiceRateOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanServiceRateOverride.setStatus('mandatory')
chanServiceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 6400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanServiceRate.setStatus('mandatory')
zeroCirConEir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zeroCirConEir.setStatus('mandatory')
chanReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanReroute.setStatus('mandatory')
frConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnSCR.setStatus('mandatory')
frConnRemoteSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnRemoteSCR.setStatus('mandatory')
frConnTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnTemplateId.setStatus('mandatory')
frConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnAdminStatus.setStatus('mandatory')
frChanCnfChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frChanCnfChangeCount.setStatus('mandatory')
frChanCnfIgnoreIncomingDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanCnfIgnoreIncomingDE.setStatus('mandatory')
frChanOamCCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanOamCCEnable.setStatus('mandatory')
frChanStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanStatsEnable.setStatus('mandatory')
frChanLocalLpbkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanLocalLpbkEnable.setStatus('mandatory')
frChanUpcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanUpcEnable.setStatus('mandatory')
frChanSlaveType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("persistentSlave", 1), ("nonPersistentSlave", 2))).clone('persistentSlave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanSlaveType.setStatus('mandatory')
frConnRemoteMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000000)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frConnRemoteMBS.setStatus('mandatory')
chanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanNumNextAvailable.setStatus('mandatory')
frstdABRCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3), )
if mibBuilder.loadTexts: frstdABRCnfGrpTable.setStatus('mandatory')
frstdABRCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "frstdABRcnfChanNum"))
if mibBuilder.loadTexts: frstdABRCnfGrpEntry.setStatus('mandatory')
frstdABRcnfChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frstdABRcnfChanNum.setStatus('mandatory')
frstdABRTBE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRTBE.setStatus('mandatory')
frstdABRFRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRFRTT.setStatus('mandatory')
frstdABRRDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRRDF.setStatus('mandatory')
frstdABRRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRRIF.setStatus('mandatory')
frstdABRNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRNrm.setStatus('mandatory')
frstdABRTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRTrm.setStatus('mandatory')
frstdABRCDF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRCDF.setStatus('mandatory')
frstdABRADTF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10230)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRADTF.setStatus('mandatory')
frstdABRICR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 400000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRICR.setStatus('mandatory')
frstdABRMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 400000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRMCR.setStatus('mandatory')
frstdABRPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 400000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frstdABRPCR.setStatus('mandatory')
frChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3))
frChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: frChanCntGrpTable.setStatus('mandatory')
frChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cntChanNum"))
if mibBuilder.loadTexts: frChanCntGrpEntry.setStatus('mandatory')
cntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntChanNum.setStatus('mandatory')
rcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFrames.setStatus('mandatory')
rcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytes.setStatus('mandatory')
rcvFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDE.setStatus('mandatory')
rcvBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDE.setStatus('mandatory')
rcvFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscard.setStatus('mandatory')
rcvBytesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDiscard.setStatus('mandatory')
rcvFramesDiscShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscShelfAlarm.setStatus('mandatory')
rcvFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscXceedQDepth.setStatus('mandatory')
rcvBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesDiscXceedQDepth.setStatus('mandatory')
rcvFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscXceedDEThresh.setStatus('mandatory')
rcvFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesFECN.setStatus('mandatory')
rcvFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesBECN.setStatus('mandatory')
rcvFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedFECN.setStatus('mandatory')
rcvFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedBECN.setStatus('mandatory')
rcvFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesTaggedDE.setStatus('mandatory')
rcvBytesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesTaggedDE.setStatus('mandatory')
rcvKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvKbpsAIR.setStatus('mandatory')
xmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFrames.setStatus('mandatory')
xmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytes.setStatus('mandatory')
xmtFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesFECN.setStatus('mandatory')
xmtFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesBECN.setStatus('mandatory')
xmtFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDE.setStatus('mandatory')
xmtBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDE.setStatus('mandatory')
xmtFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscard.setStatus('mandatory')
xmtBytesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDiscard.setStatus('mandatory')
xmtFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscXceedQDepth.setStatus('mandatory')
xmtBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDiscXceedQDepth.setStatus('mandatory')
xmtFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscXceedDEThresh.setStatus('mandatory')
xmtFramesDiscPhyLayerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscPhyLayerFail.setStatus('mandatory')
xmtFramesDiscCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscCRCError.setStatus('mandatory')
xmtFramesDiscReassmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscReassmFail.setStatus('mandatory')
xmtFramesDiscSrcAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDiscSrcAbort.setStatus('mandatory')
xmtFramesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesDuringLMIAlarm.setStatus('mandatory')
xmtBytesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesDuringLMIAlarm.setStatus('mandatory')
xmtFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedFECN.setStatus('mandatory')
xmtFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedBECN.setStatus('mandatory')
xmtKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtKbpsAIR.setStatus('mandatory')
chanClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanClrButton.setStatus('mandatory')
xmtFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesTaggedDE.setStatus('mandatory')
xmtBytesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesTaggedDE.setStatus('mandatory')
rcvFramesDiscUPC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscUPC.setStatus('mandatory')
chanSecUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanSecUpTime.setStatus('mandatory')
xmtFramesInvalidCPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesInvalidCPIs.setStatus('mandatory')
xmtFramesLengthViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesLengthViolations.setStatus('mandatory')
xmtFramesOversizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesOversizedSDUs.setStatus('mandatory')
xmtFramesUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesUnknownProtocols.setStatus('mandatory')
rcvFramesUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesUnknownProtocols.setStatus('mandatory')
frChanStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2))
frChanStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1), )
if mibBuilder.loadTexts: frChanStateGrpTable.setStatus('mandatory')
frChanStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "stateChanNum"))
if mibBuilder.loadTexts: frChanStateGrpEntry.setStatus('mandatory')
stateChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateChanNum.setStatus('mandatory')
chanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("okay", 2), ("alarm", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanState.setStatus('mandatory')
xmtAbitState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("sendingAequal1", 2), ("sendingAequal0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtAbitState.setStatus('mandatory')
rcvAbitState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("rcvingAequal1", 2), ("rcvingAequal0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvAbitState.setStatus('mandatory')
xmtATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSending", 1), ("sendingAIS", 2), ("sendingFERF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtATMState.setStatus('mandatory')
rcvATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRcving", 1), ("rcvingAIS", 2), ("rcvingFERF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvATMState.setStatus('mandatory')
chanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatusBitMap.setStatus('mandatory')
frEndPtMapGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3))
frEndPtMapGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1), )
if mibBuilder.loadTexts: frEndPtMapGrpTable.setStatus('mandatory')
frEndPtMapGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "endPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "endDLCI"))
if mibBuilder.loadTexts: frEndPtMapGrpEntry.setStatus('mandatory')
endPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endPortNum.setStatus('mandatory')
endDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endDLCI.setStatus('mandatory')
endChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endChanNum.setStatus('mandatory')
endLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endLineNum.setStatus('mandatory')
frPortCnfPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1))
frPortCnfPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: frPortCnfPortGrpTable.setStatus('mandatory')
frPortCnfPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "portNum"))
if mibBuilder.loadTexts: frPortCnfPortGrpEntry.setStatus('mandatory')
portNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNum.setStatus('mandatory')
portLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLineNum.setStatus('mandatory')
portRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRowStatus.setStatus('mandatory')
portDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDs0ConfigBitMap.setStatus('mandatory')
portDs0Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed56k", 1), ("speed64k", 2), ("unUsed", 3))).clone('speed64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDs0Speed.setStatus('mandatory')
portFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlagsBetweenFrames.setStatus('mandatory')
portEqueueServiceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEqueueServiceRatio.setStatus('mandatory')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('mandatory')
portAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("write-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdmin.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-relay", 1), ("frFUNI", 2), ("frame-forward", 3))).clone('frame-relay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSvcStatus.setStatus('mandatory')
portSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-use", 1), ("in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSvcInUse.setStatus('mandatory')
portSvcShareLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("card-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcShareLcn.setStatus('mandatory')
portSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcLcnLow.setStatus('mandatory')
portSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcLcnHigh.setStatus('mandatory')
portSvcDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcDlciLow.setStatus('mandatory')
portSvcDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcDlciHigh.setStatus('mandatory')
portDeleteSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDeleteSvcs.setStatus('mandatory')
portIngrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIngrSvcBandW.setStatus('mandatory')
portEgrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEgrSvcBandW.setStatus('mandatory')
portBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBERTEnable.setStatus('mandatory')
portEnhancedSIW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnhancedSIW.setStatus('mandatory')
portM32EgrQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portM32EgrQueueThresh.setStatus('mandatory')
portHeaderLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoOctets", 1), ("fourOctets", 2))).clone('twoOctets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHeaderLen.setStatus('mandatory')
portFrameChkSumType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrameChkSumType.setStatus('mandatory')
portFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFileId.setStatus('mandatory')
portOverSubEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOverSubEnable.setStatus('mandatory')
portsUsedLine1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine1.setStatus('mandatory')
portsUsedLine2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine2.setStatus('mandatory')
portsUsedLine3 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine3.setStatus('mandatory')
portsUsedLine4 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine4.setStatus('mandatory')
portsUsedLine5 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine5.setStatus('mandatory')
portsUsedLine6 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine6.setStatus('mandatory')
portsUsedLine7 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine7.setStatus('mandatory')
portsUsedLine8 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine8.setStatus('mandatory')
portNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNextAvailable.setStatus('mandatory')
frPortsUsedLineGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11), )
if mibBuilder.loadTexts: frPortsUsedLineGrpTable.setStatus('mandatory')
frPortsUsedLineGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "frPortsUsedLineIndex"))
if mibBuilder.loadTexts: frPortsUsedLineGrpEntry.setStatus('mandatory')
frPortsUsedLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsUsedLineIndex.setStatus('mandatory')
frPortsUsedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsUsedLine.setStatus('mandatory')
frPortCnfSigCLLMGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2))
frPortCnfSigCLLMGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpTable.setStatus('mandatory')
frPortCnfSigCLLMGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cllmCnfPortNum"))
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpEntry.setStatus('mandatory')
cllmCnfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmCnfPortNum.setStatus('mandatory')
cllmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cllmEnable.setStatus('mandatory')
xmtCLLMStatusTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 5000)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xmtCLLMStatusTimer.setStatus('mandatory')
rcvCLLMStatusTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("rcvCLLMTimerValue", 1000))).clone('rcvCLLMTimerValue')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvCLLMStatusTimer.setStatus('mandatory')
frPortCnfSigLMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1))
frPortCnfSigLMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCnfSigLMIGrpTable.setStatus('mandatory')
frPortCnfSigLMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "lmiCnfPortNum"))
if mibBuilder.loadTexts: frPortCnfSigLMIGrpEntry.setStatus('mandatory')
lmiCnfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiCnfPortNum.setStatus('mandatory')
signallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("noSignalling", 2), ("strataLMI", 3), ("annexAUNI", 4), ("annexDUNI", 5), ("annexANNI", 6), ("annexDNNI", 7))).clone('noSignalling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signallingProtocolType.setStatus('mandatory')
asynchronousUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("fsenable", 3), ("updfsenable", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asynchronousUpdates.setStatus('mandatory')
t391LinkIntegrityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t391LinkIntegrityTimer.setStatus('mandatory')
t392PollingVerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t392PollingVerificationTimer.setStatus('mandatory')
n391FullStatusPollingCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: n391FullStatusPollingCounter.setStatus('mandatory')
n392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392ErrorThreshold.setStatus('mandatory')
n393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393MonitoredEventCount.setStatus('mandatory')
enhancedLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enhancedLmi.setStatus('mandatory')
portFRF1Dot2Support = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFRF1Dot2Support.setStatus('mandatory')
frPortCntPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1))
frPortCntPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCntPortGrpTable.setStatus('mandatory')
frPortCntPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cntPortNum"))
if mibBuilder.loadTexts: frPortCntPortGrpEntry.setStatus('mandatory')
cntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPortNum.setStatus('mandatory')
rcvPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFrames.setStatus('mandatory')
rcvPortBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortBytes.setStatus('mandatory')
rcvPortFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesDE.setStatus('mandatory')
rcvPortFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesFECN.setStatus('mandatory')
rcvPortFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesBECN.setStatus('mandatory')
rcvFramesDiscCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscCRCError.setStatus('mandatory')
rcvFramesDiscAlignmentError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscAlignmentError.setStatus('mandatory')
rcvFramesDiscIllegalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscIllegalLen.setStatus('mandatory')
rcvFramesDiscIllegalHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscIllegalHeader.setStatus('mandatory')
rcvFramesAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesAbort.setStatus('mandatory')
rcvFramesUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesUnknownDLCI.setStatus('mandatory')
rcvLastUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvLastUnknownDLCI.setStatus('mandatory')
rcvPortFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedFECN.setStatus('mandatory')
rcvPortFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedBECN.setStatus('mandatory')
rcvPortFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedDE.setStatus('mandatory')
rcvPortFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesDiscXceedDEThresh.setStatus('mandatory')
rcvPortKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortKbpsAIR.setStatus('mandatory')
rcvBufNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBufNotAvailable.setStatus('mandatory')
xmtPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFrames.setStatus('mandatory')
xmtPortBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytes.setStatus('mandatory')
xmtPortFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesFECN.setStatus('mandatory')
xmtPortFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesBECN.setStatus('mandatory')
xmtPortFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDiscXceedQDepth.setStatus('mandatory')
xmtPortBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDiscXceedQDepth.setStatus('mandatory')
xmtPortFramesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDuringLMIAlarm.setStatus('mandatory')
xmtPortBytesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDuringLMIAlarm.setStatus('mandatory')
xmtFramesAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesAbort.setStatus('mandatory')
xmtFramesUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesUnderrun.setStatus('mandatory')
xmtPortKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortKbpsAIR.setStatus('mandatory')
xmtBufNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBufNotAvailable.setStatus('mandatory')
portClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portClrButton.setStatus('mandatory')
rcvFramesDiscNoChan = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscNoChan.setStatus('mandatory')
rcvFramesDiscOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscOverrun.setStatus('mandatory')
frPortCntSigCLLMGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2))
frPortCntSigCLLMGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: frPortCntSigCLLMGrpTable.setStatus('mandatory')
frPortCntSigCLLMGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "cllmSigPortNum"))
if mibBuilder.loadTexts: frPortCntSigCLLMGrpEntry.setStatus('mandatory')
cllmSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmSigPortNum.setStatus('mandatory')
rcvFramesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesCLLM.setStatus('mandatory')
rcvBytesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesCLLM.setStatus('mandatory')
xmtFramesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesCLLM.setStatus('mandatory')
xmtBytesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesCLLM.setStatus('mandatory')
cllmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmFailures.setStatus('mandatory')
frPortCntSigLMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1))
frPortCntSigLMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCntSigLMIGrpTable.setStatus('mandatory')
frPortCntSigLMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "lmiSigPortNum"))
if mibBuilder.loadTexts: frPortCntSigLMIGrpEntry.setStatus('mandatory')
lmiSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiSigPortNum.setStatus('mandatory')
rcvStatusInquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvStatusInquiry.setStatus('mandatory')
rcvInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvInvalidRequest.setStatus('mandatory')
rcvUNISeqMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvUNISeqMismatch.setStatus('mandatory')
xmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtStatus.setStatus('mandatory')
xmtAsynchUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtAsynchUpdate.setStatus('mandatory')
uniSignalingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSignalingTimeout.setStatus('mandatory')
xmtStatusInquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtStatusInquiry.setStatus('mandatory')
rcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvStatus.setStatus('mandatory')
rcvAsynchUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvAsynchUpdate.setStatus('mandatory')
rcvNNISeqMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvNNISeqMismatch.setStatus('mandatory')
nniSignalingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nniSignalingTimeout.setStatus('mandatory')
frPortStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3))
frPortStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1), )
if mibBuilder.loadTexts: frPortStateGrpTable.setStatus('mandatory')
frPortStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "statePortNum"))
if mibBuilder.loadTexts: frPortStateGrpEntry.setStatus('mandatory')
statePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statePortNum.setStatus('mandatory')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteLoopback", 3), ("failedDueToLine", 4), ("failedDueToSignalling", 5), ("inactive", 6), ("inBert", 7), ("farEndRemoteLoopback", 8), ("latchDS0DropFeLoop", 9), ("latchDS0LineFeLoop", 10), ("latchOcuFeLoop", 11), ("latchCsuFeLoop", 12), ("latchDsuFeLoop", 13), ("latchHL96FeLoop", 14), ("v54PolynomialFeLoop", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('mandatory')
portSignallingState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSignallingState.setStatus('mandatory')
portOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOversubscribed.setStatus('mandatory')
portIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIngrPercentUtil.setStatus('mandatory')
portEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEgrPercentUtil.setStatus('mandatory')
frPortCnfResPartGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: frPortCnfResPartGrpTable.setStatus('mandatory')
frPortCnfResPartGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "frResPartPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "frResPartCtrlrNum"))
if mibBuilder.loadTexts: frPortCnfResPartGrpEntry.setStatus('mandatory')
frResPartPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frResPartPortNum.setStatus('mandatory')
frResPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frResPartCtrlrNum.setStatus('mandatory')
frResPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartRowStatus.setStatus('mandatory')
frResPartNumOfLcnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartNumOfLcnAvail.setStatus('mandatory')
frResPartDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartDlciLow.setStatus('mandatory')
frResPartDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388607))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartDlciHigh.setStatus('mandatory')
frResPartIngrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartIngrPctBW.setStatus('mandatory')
frResPartEgrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartEgrPctBW.setStatus('mandatory')
frResPartCtrlrID = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frResPartCtrlrID.setStatus('mandatory')
frPortServiceQueGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: frPortServiceQueGrpTable.setStatus('mandatory')
frPortServiceQueGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "frServPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "portServiceQueueNo"))
if mibBuilder.loadTexts: frPortServiceQueGrpEntry.setStatus('mandatory')
frServPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frServPortNum.setStatus('mandatory')
portServiceQueueNo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("highpriorityQ", 1), ("rtVBRQ", 2), ("nrtVBRandABRQ", 3), ("uBRQ", 4), ("queue5", 5), ("queue6", 6), ("queue7", 7), ("queue8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portServiceQueueNo.setStatus('mandatory')
portEgresQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(1048575)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresQDepth.setStatus('mandatory')
portEgresECNThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(104857)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresECNThresh.setStatus('mandatory')
portEgresDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(524287)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresDEThresh.setStatus('mandatory')
portQBwInc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portQBwInc.setStatus('mandatory')
portBytesDiscXceedQueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBytesDiscXceedQueFull.setStatus('mandatory')
portBytesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBytesDiscXceedDEThresh.setStatus('mandatory')
smFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 6))
smRateControlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 7))
smCardUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 11))
smRasConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 18))
rasOamLpbkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 19))
channelizedAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonChannelized", 1), ("channelized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelizedAllowed.setStatus('mandatory')
rateControlAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateControlDisabled", 1), ("rateControlEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateControlAllowed.setStatus('mandatory')
svcAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("svcDisabled", 1), ("svcEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcAllowed.setStatus('mandatory')
funiAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("funiDisabled", 1), ("funiEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiAllowed.setStatus('mandatory')
imaAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("imaDisabled", 1), ("imaEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imaAllowed.setStatus('mandatory')
mulTrksAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mulTrksDisabled", 1), ("mulTrksEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulTrksAllowed.setStatus('mandatory')
egrQosFeature = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("egrQosFeatureEnabled", 1), ("egrQosFeatureDisabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egrQosFeature.setStatus('mandatory')
rateUp = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateUp.setStatus('mandatory')
rateDown = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateDown.setStatus('mandatory')
rateFastDown = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateFastDown.setStatus('mandatory')
rtdMeasurementTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtdMeasurementTime.setStatus('mandatory')
qirTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qirTimeout.setStatus('mandatory')
cardOversubscribed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOversubscribed.setStatus('mandatory')
cardIngrPercentUtil = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIngrPercentUtil.setStatus('mandatory')
rasOamlpbkAllowed = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rasOamlpbkEnabled", 1), ("rasOamlpbkDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasOamlpbkAllowed.setStatus('mandatory')
rasOamlpbkFrequency = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasOamlpbkFrequency.setStatus('mandatory')
chanPacketNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanPacketNumber.setStatus('mandatory')
chanOAMstatus32 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus32.setStatus('mandatory')
chanOAMstatus64 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus64.setStatus('mandatory')
chanOAMstatus96 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus96.setStatus('mandatory')
chanOAMstatus128 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus128.setStatus('mandatory')
chanOAMstatus160 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus160.setStatus('mandatory')
chanOAMstatus192 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus192.setStatus('mandatory')
chanOAMstatus224 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus224.setStatus('mandatory')
chanOAMstatus256 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanOAMstatus256.setStatus('mandatory')
frPortCnfX21PortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: frPortCnfX21PortGrpTable.setStatus('mandatory')
frPortCnfX21PortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "x21portNum"))
if mibBuilder.loadTexts: frPortCnfX21PortGrpEntry.setStatus('mandatory')
x21portNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portNum.setStatus('mandatory')
x21portLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portLineNum.setStatus('mandatory')
x21portRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portRowStatus.setStatus('mandatory')
x21portFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portFlagsBetweenFrames.setStatus('mandatory')
x21portEqueueServiceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portEqueueServiceRatio.setStatus('mandatory')
x21portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSpeed.setStatus('mandatory')
x21portAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("write-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portAdmin.setStatus('mandatory')
x21portType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-relay", 1), ("frFUNI", 2), ("frame-forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portType.setStatus('mandatory')
x21portSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portSvcStatus.setStatus('mandatory')
x21portSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-use", 1), ("in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portSvcInUse.setStatus('mandatory')
x21portSvcShareLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("card-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcShareLcn.setStatus('mandatory')
x21portSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 271))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcLcnLow.setStatus('mandatory')
x21portSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 271))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcLcnHigh.setStatus('mandatory')
x21portSvcDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcDlciLow.setStatus('mandatory')
x21portSvcDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcDlciHigh.setStatus('mandatory')
x21portDeleteSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portDeleteSvcs.setStatus('mandatory')
x21portIngrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portIngrSvcBandW.setStatus('mandatory')
x21portEgrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portEgrSvcBandW.setStatus('mandatory')
x21AlmCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2))
x21AlmCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1), )
if mibBuilder.loadTexts: x21AlmCnfGrpTable.setStatus('mandatory')
x21AlmCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "x21AlmCnfLineNum"))
if mibBuilder.loadTexts: x21AlmCnfGrpEntry.setStatus('mandatory')
x21AlmCnfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21AlmCnfLineNum.setStatus('mandatory')
x21Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("dontcare", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21Severity.setStatus('mandatory')
x21AlmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3))
x21AlmGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1), )
if mibBuilder.loadTexts: x21AlmGrpTable.setStatus('mandatory')
x21AlmGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "x21AlmLineNum"))
if mibBuilder.loadTexts: x21AlmGrpEntry.setStatus('mandatory')
x21AlmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21AlmLineNum.setStatus('mandatory')
x21LineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineAlarmState.setStatus('mandatory')
x21LineEIAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineEIAStatus.setStatus('mandatory')
x21AlarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21AlarmClrButton.setStatus('mandatory')
x21CnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1))
x21CnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1), )
if mibBuilder.loadTexts: x21CnfGrpTable.setStatus('mandatory')
x21CnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "x21LineNum"))
if mibBuilder.loadTexts: x21CnfGrpEntry.setStatus('mandatory')
x21LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineNum.setStatus('mandatory')
x21LineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineEnable.setStatus('mandatory')
x21LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dteST", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineType.setStatus('mandatory')
x21LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("r48Kbps", 1), ("r56Kbps", 2), ("r64Kbps", 3), ("r112Kbps", 4), ("r128Kbps", 5), ("r168Kbps", 6), ("r192Kbps", 7), ("r224Kbps", 8), ("r256Kbps", 9), ("r280Kbps", 10), ("r320Kbps", 11), ("r336Kbps", 12), ("r384Kbps", 13), ("r392Kbps", 14), ("r448Kbps", 15), ("r512Kbps", 16), ("r768Kbps", 17), ("r1024Kbps", 18), ("r1536Kbps", 19), ("r1544Kbps", 20), ("r1792Kbps", 21), ("r1920Kbps", 22), ("r1984Kbps", 23), ("r2048Kbps", 24), ("r3097Kbps", 25), ("r3157Kbps", 26), ("r4096Kbps", 27), ("r4645Kbps", 28), ("r4736Kbps", 29), ("r6195Kbps", 30), ("r6315Kbps", 31), ("r7744Kbps", 32), ("r7899Kbps", 33), ("r8192Kbps", 34), ("r9289Kbps", 35), ("r9472Kbps", 36), ("r10240Kbps", 37), ("r10890Kbps", 38), ("r11060Kbps", 39), ("r12390Kbps", 40), ("r12630Kbps", 41), ("r13900Kbps", 42), ("r14220Kbps", 43), ("r14340Kbps", 44), ("r15490Kbps", 45), ("r15800Kbps", 46), ("r16380Kbps", 47), ("r20030Kbps", 48), ("r24990Kbps", 49), ("r52Mbps", 50), ("r17370Kbps", 51), ("r18950Kbps", 52), ("r20530Kbps", 53), ("r22100Kbps", 54), ("r23680Kbps", 55), ("r3088Kbps", 56), ("r4632Kbps", 57), ("r6176Kbps", 58), ("r7720Kbps", 59), ("r9264Kbps", 60), ("r10808Kbps", 61), ("r12352Kbps", 62), ("r13896Kbps", 63), ("r15440Kbps", 64), ("r16984Kbps", 65), ("r18528Kbps", 66), ("r20072Kbps", 67), ("r21616Kbps", 68), ("r23160Kbps", 69), ("r24704Kbps", 70), ("r26248Kbps", 71), ("r27792Kbps", 72), ("r29336Kbps", 73), ("r30880Kbps", 74), ("r32424Kbps", 75), ("r33968Kbps", 76), ("r35512Kbps", 77), ("r37056Kbps", 78), ("r38600Kbps", 79), ("r40144Kbps", 80), ("r41688Kbps", 81), ("r43232Kbps", 82), ("r44776Kbps", 83), ("r46320Kbps", 84), ("r47864Kbps", 85), ("r49408Kbps", 86), ("r50952Kbps", 87), ("r6144Kbps", 88), ("r12288Kbps", 89), ("r14336Kbps", 90), ("r16384Kbps", 91), ("r18432Kbps", 92), ("r20480Kbps", 93), ("r22528Kbps", 94), ("r24576Kbps", 95), ("r26624Kbps", 96), ("r28672Kbps", 97), ("r30720Kbps", 98), ("r32768Kbps", 99), ("r34816Kbps", 100), ("r36864Kbps", 101), ("r38912Kbps", 102), ("r40960Kbps", 103), ("r43008Kbps", 104), ("r45056Kbps", 105), ("r47104Kbps", 106), ("r49152Kbps", 107), ("r51200Kbps", 108)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineRate.setStatus('mandatory')
x21LineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("x21NoLoop", 1), ("x21DiagnosticMetallicLoop", 2), ("x21DiagnosticFrontcardLoop", 3), ("x21RemoteLoop", 4), ("v35MetallicLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineLoopbackCommand.setStatus('mandatory')
x21LineSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("x21NoCode", 1), ("x21SendLoopACode", 2), ("x21SendLoopBCode", 3), ("x21SendLocalLoopCode", 4), ("x21SendRemoteLoopCode", 5), ("x21SendUnLoopCode", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineSendCode.setStatus('mandatory')
x21LineLoopbackCodeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("codeDetectDisabled", 1), ("codeDetectEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineLoopbackCodeDetection.setStatus('mandatory')
x21ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x21Backcard", 1), ("hssiBackcard", 2), ("v35Backcard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21ConnectorType.setStatus('mandatory')
x21InvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonInvertedAndNotLooped", 1), ("invertedAndNotLooped", 2), ("nonInvertedAndLooped", 3), ("invertedAndLooped", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21InvertClock.setStatus('mandatory')
x21LineInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hssi", 1), ("x21", 2), ("v35", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineInterfaceType.setStatus('mandatory')
x21ClkFrequencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21ClkFrequencyThreshold.setStatus('mandatory')
serialLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48000, 51840000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialLineRate.setStatus('mandatory')
serialLineRateVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialLineRateVariation.setStatus('mandatory')
x21LineNumofValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineNumofValidEntries.setStatus('mandatory')
vismConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17))
vismIpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1))
vismVoIpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2))
vismDspGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3))
vismSystemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4))
vismTrapObjGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5))
vismAal2Grp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6))
vismInteropGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7))
vismIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismIpAddress.setStatus('mandatory')
vismSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSubNetMask.setStatus('mandatory')
vismControlTos = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismControlTos.setStatus('mandatory')
vismBearerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerIpAddress.setStatus('mandatory')
vismBearerSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerSubNetMask.setStatus('mandatory')
vismBearerTos = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerTos.setStatus('mandatory')
vismRtcpRepInterval = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 15000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtcpRepInterval.setStatus('mandatory')
vismRtpReceiveTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtpReceiveTimer.setStatus('mandatory')
vismPacketizationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40))).clone(namedValues=NamedValues(("tenms", 10), ("twentyms", 20), ("thirtyms", 30), ("fourtyms", 40))).clone('tenms')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPacketizationPeriod.setStatus('deprecated')
vismVoIpDtmfRelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDtmfRelay.setStatus('mandatory')
vismVoIpCasTransport = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpCasTransport.setStatus('mandatory')
vismVoIpTripleRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpTripleRedundancy.setStatus('mandatory')
vismVoIpVADTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpVADTimer.setStatus('mandatory')
vismVoIpNTECapabilityNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpNTECapabilityNegotiate.setStatus('mandatory')
vismVoIpSIDPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpSIDPayloadType.setStatus('mandatory')
vismVoIpDPvcOamCellGap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcOamCellGap.setStatus('mandatory')
vismVoIpDPvcRetryCnt = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcRetryCnt.setStatus('mandatory')
vismVoIpDPvcRecoverCnt = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpDPvcRecoverCnt.setStatus('mandatory')
vismRtcpRecvMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtcpRecvMultiplier.setStatus('mandatory')
vismVoIpLapdTrunkPVC = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("control", 1), ("bearer", 2))).clone('control')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpLapdTrunkPVC.setStatus('mandatory')
vismVoIpEventNegotiationPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("proprietary", 2), ("all", 3))).clone('proprietary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVoIpEventNegotiationPolicy.setStatus('mandatory')
vismEcanCnfIdlePattern = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pattern1", 1), ("pattern2", 2), ("pattern3", 3), ("pattern4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanCnfIdlePattern.setStatus('deprecated')
vismEcanCnfIdleDirection = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("either", 2), ("send", 3), ("receive", 4))).clone('both')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanCnfIdleDirection.setStatus('deprecated')
vismCompCnfPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 160)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCompCnfPacketSize.setStatus('mandatory')
vismERL = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("zerodb", 1), ("threedb", 2), ("sixdb", 3), ("worstdb", 4))).clone('sixdb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismERL.setStatus('mandatory')
vismJitterDelayMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismJitterDelayMode.setStatus('deprecated')
vismJitterInitialDelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))).clone(namedValues=NamedValues(("zero", 1), ("five", 5), ("ten", 10), ("fifteen", 15), ("twenty", 20), ("twentyfive", 25), ("thirty", 30), ("thirtyfive", 35), ("fourty", 40), ("fortyfive", 45), ("fifty", 50), ("fiftyfive", 55), ("sixty", 60), ("sixtyfive", 65), ("seventy", 70), ("seventyfive", 75), ("eighty", 80), ("eightyfive", 85), ("ninty", 90), ("ninetyfive", 95), ("hundred", 100))).clone('fourty')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismJitterInitialDelay.setStatus('deprecated')
vismAdaptiveGainControl = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAdaptiveGainControl.setStatus('mandatory')
vismDspHealth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDspHealth.setStatus('mandatory')
vismUpspeedCodec = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("g-711u", 1), ("g-711a", 2), ("g-726-32", 3), ("clearChannel", 4), ("g-723h", 5), ("g-723l", 6), ("g-726-16", 7), ("g-726-24", 8), ("g-726-40", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismUpspeedCodec.setStatus('mandatory')
vismPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPayloadType.setStatus('mandatory')
vismDaughterCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardSerialNum.setStatus('mandatory')
vismDaughterCardDescription = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardDescription.setStatus('mandatory')
vismDaughterCardHWRev = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDaughterCardHWRev.setStatus('mandatory')
vismEcanEncoding = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu-law", 1), ("a-law", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanEncoding.setStatus('mandatory')
vismMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 100))).clone(namedValues=NamedValues(("voipSwitching", 1), ("aal2Trunking", 2), ("aal1Svc", 3), ("switchedVoipCASBh", 4), ("switchedVoipPRIBh", 5), ("switchedAal2CASBh", 6), ("switchedAal2Svc", 7), ("switchedAal2Pvc", 8), ("voipAndAal1Svc", 9), ("superMode", 99), ("unknownMode", 100))).clone('voipSwitching')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismMode.setStatus('mandatory')
vismPrevMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("voipSwitching", 1), ("aal2Trunking", 2), ("aal1Svc", 3), ("aal2PvcSwitching", 4))).clone('voipSwitching')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPrevMode.setStatus('deprecated')
vismCacEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCacEnable.setStatus('mandatory')
vismAvailableDs0Count = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAvailableDs0Count.setStatus('mandatory')
vismAppliedTemplate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAppliedTemplate.setStatus('mandatory')
vismTftpServerDn = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismTftpServerDn.setStatus('mandatory')
vismXgcpBearerNetworkType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("atm", 2))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerNetworkType.setStatus('mandatory')
vismXgcpBearerVCType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerVCType.setStatus('mandatory')
vismXgcpBearerConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal1Sdt", 1), ("aal2", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpBearerConnectionType.setStatus('mandatory')
vismBearerContinuityTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerContinuityTimer.setStatus('mandatory')
vismCodecNegotiationOption = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecNegotiationOption.setStatus('mandatory')
vismProfileNegotiationOption = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismProfileNegotiationOption.setStatus('mandatory')
vismCarrierLossPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("previousCodec", 1), ("upspeedCodec", 2))).clone('previousCodec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCarrierLossPolicy.setStatus('mandatory')
vismCacRejectionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("maintain", 2))).clone('maintain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCacRejectionPolicy.setStatus('mandatory')
vismExtDnsServerDn = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismExtDnsServerDn.setStatus('mandatory')
vismFeatureBitMap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFeatureBitMap.setStatus('mandatory')
vismVADTolerance = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVADTolerance.setStatus('mandatory')
vismVADDutyCycle = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVADDutyCycle.setStatus('mandatory')
vismAggregateTrafficClipping = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAggregateTrafficClipping.setStatus('mandatory')
vismAggregateSvcBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAggregateSvcBandwidth.setStatus('mandatory')
vismBearerContinuityTest = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerContinuityTest.setStatus('mandatory')
vismCaleaEnable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCaleaEnable.setStatus('mandatory')
vismXgcpSdpOst = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismXgcpSdpOst.setStatus('mandatory')
vismDynamicPT = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDynamicPT.setStatus('mandatory')
vismConfigChangeTypeBitMap = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismConfigChangeTypeBitMap.setStatus('mandatory')
vismTrapIntIndex1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapIntIndex1.setStatus('mandatory')
vismTrapIntIndex2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapIntIndex2.setStatus('mandatory')
vismTrapStrIndex1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 66))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismTrapStrIndex1.setStatus('mandatory')
vismAal2SubcellMuxing = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2SubcellMuxing.setStatus('mandatory')
vismAal2DtmfRelay = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2DtmfRelay.setStatus('mandatory')
vismAal2CasTransport = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CasTransport.setStatus('mandatory')
vismAal2Type3Redundancy = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2Type3Redundancy.setStatus('mandatory')
vismAal2VADTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2VADTimer.setStatus('mandatory')
vismAal2CidFillTimer = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidFillTimer.setStatus('mandatory')
vismChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1), )
if mibBuilder.loadTexts: vismChanCnfGrpTable.setStatus('mandatory')
vismChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCnfChanNum"))
if mibBuilder.loadTexts: vismChanCnfGrpEntry.setStatus('mandatory')
vismCnfChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCnfChanNum.setStatus('mandatory')
vismChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3), ("outOfService", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanRowStatus.setStatus('mandatory')
vismChanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanPortNum.setStatus('mandatory')
vismChanLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanLocRmtLpbkState.setStatus('mandatory')
vismChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanTestType.setStatus('mandatory')
vismChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanTestState.setStatus('mandatory')
vismChanRTDResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanRTDResult.setStatus('mandatory')
vismChanPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal-5", 1), ("aal-2", 2), ("aal-1", 3))).clone('aal-5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanPvcType.setStatus('mandatory')
vismChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("pvc", 1))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanConnType.setStatus('mandatory')
vismLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLocalVpi.setStatus('mandatory')
vismLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLocalVci.setStatus('mandatory')
vismLocalNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLocalNSAP.setStatus('mandatory')
vismRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRemoteVpi.setStatus('mandatory')
vismRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRemoteVci.setStatus('mandatory')
vismRemoteNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRemoteNSAP.setStatus('mandatory')
vismMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unknown", 3))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismMastership.setStatus('mandatory')
vismVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVpcFlag.setStatus('mandatory')
vismConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbr", 1), ("vbr-rt", 2), ("vbr-nrt", 3), ("vbr3-rt", 4), ("vbr2-rt", 5), ("vbr2-nrt", 6), ("vbr3-nrt", 7))).clone('cbr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnServiceType.setStatus('mandatory')
vismRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRoutingPriority.setStatus('mandatory')
vismMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismMaxCost.setStatus('mandatory')
vismRestrictTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noresriction", 1), ("terrestrialTrunk", 2), ("sateliteTrunk", 3))).clone('noresriction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRestrictTrunkType.setStatus('mandatory')
vismConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnPCR.setStatus('mandatory')
vismConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnPercentUtil.setStatus('mandatory')
vismConnRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnRemotePCR.setStatus('mandatory')
vismConnRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnRemotePercentUtil.setStatus('mandatory')
vismChanProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("unprotected", 2))).clone('unprotected')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanProtection.setStatus('mandatory')
vismChanPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanPreference.setStatus('mandatory')
vismChanActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("failed", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanActivityState.setStatus('mandatory')
vismChanLockingState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2))).clone('unlock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanLockingState.setStatus('mandatory')
vismChanScrIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanScrIngress.setStatus('mandatory')
vismChanMbsIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanMbsIngress.setStatus('mandatory')
vismChanClrIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanClrIngress.setStatus('mandatory')
vismChanCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanCdvt.setStatus('mandatory')
vismConnPCREgress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnPCREgress.setStatus('mandatory')
vismChanScrEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanScrEgress.setStatus('mandatory')
vismChanMbsEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanMbsEgress.setStatus('mandatory')
vismChanClrEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanClrEgress.setStatus('mandatory')
vismChanApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("control", 1), ("bearer", 2), ("signaling", 3))).clone('bearer')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanApplication.setStatus('mandatory')
vismChanFallbackLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanFallbackLcn.setStatus('mandatory')
vismChanReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 40), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanReroute.setStatus('mandatory')
vismFarEndAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notapplicable", 1), ("nsap", 2), ("e164", 3), ("gwid", 4), ("unspecified", 5))).clone('notapplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFarEndAddressType.setStatus('mandatory')
vismFarEndE164Address = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFarEndE164Address.setStatus('mandatory')
vismFarEndGWIDAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFarEndGWIDAddress.setStatus('mandatory')
vismFarEndNSAPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismFarEndNSAPAddress.setStatus('mandatory')
vismVCCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismVCCI.setStatus('mandatory')
vismConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismConnAdminStatus.setStatus('mandatory')
vismChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanNumNextAvailable.setStatus('mandatory')
vismChanStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2))
vismChanStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1), )
if mibBuilder.loadTexts: vismChanStateGrpTable.setStatus('mandatory')
vismChanStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismStateChanNum"))
if mibBuilder.loadTexts: vismChanStateGrpEntry.setStatus('mandatory')
vismStateChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismStateChanNum.setStatus('mandatory')
vismChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("okay", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanState.setStatus('mandatory')
vismChanXmtATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("sendingAIS", 3), ("sendingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanXmtATMState.setStatus('mandatory')
vismChanRcvATMState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receivingAIS", 3), ("receivingFERF", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanRcvATMState.setStatus('mandatory')
vismChanStatusBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanStatusBitMap.setStatus('mandatory')
vismChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3))
vismChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1), )
if mibBuilder.loadTexts: vismChanCntGrpTable.setStatus('mandatory')
vismChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCntChanNum"))
if mibBuilder.loadTexts: vismChanCntGrpEntry.setStatus('mandatory')
vismCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCntChanNum.setStatus('mandatory')
vismCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounters", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCntClrButton.setStatus('mandatory')
vismChanAal2HecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2HecErrors.setStatus('mandatory')
vismChanAal2CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CrcErrors.setStatus('mandatory')
vismChanAal2OamLpbLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2OamLpbLostCells.setStatus('mandatory')
vismChanAal2InvOsfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2InvOsfCells.setStatus('mandatory')
vismChanAal2InvParCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2InvParCells.setStatus('mandatory')
vismChanAal2CpsSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsSentPkts.setStatus('mandatory')
vismChanAal2CpsRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsRcvdPkts.setStatus('mandatory')
vismChanAal2CpsInvCidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvCidPkts.setStatus('mandatory')
vismChanAal2CpsInvUuiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvUuiPkts.setStatus('mandatory')
vismChanAal2CpsInvLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvLenPkts.setStatus('mandatory')
vismChanAal5InvCpiPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5InvCpiPdus.setStatus('mandatory')
vismChanAal5OversizedSdusRcvdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5OversizedSdusRcvdPdus.setStatus('mandatory')
vismChanAal5InvLenPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5InvLenPdus.setStatus('mandatory')
vismChanAal5Crc32ErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5Crc32ErrorPdus.setStatus('mandatory')
vismChanAal5ReassemTimerExpiryPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5ReassemTimerExpiryPdus.setStatus('mandatory')
vismPortCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1))
vismPortCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1), )
if mibBuilder.loadTexts: vismPortCnfGrpTable.setStatus('mandatory')
vismPortCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismPortNum"))
if mibBuilder.loadTexts: vismPortCnfGrpEntry.setStatus('mandatory')
vismPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPortNum.setStatus('mandatory')
vismPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPortRowStatus.setStatus('mandatory')
vismPortLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPortLineNum.setStatus('mandatory')
vismPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voIP", 1), ("userPort", 2))).clone('voIP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPortType.setStatus('mandatory')
vismPortDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPortDs0ConfigBitMap.setStatus('mandatory')
vismPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5651320)).clone(5651320)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismPortSpeed.setStatus('mandatory')
vismPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPortState.setStatus('mandatory')
vismPortResPartCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2))
vismPortResPartCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1), )
if mibBuilder.loadTexts: vismPortResPartCnfGrpTable.setStatus('mandatory')
vismPortResPartCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismResPartPortNum"), (0, "CISCO-WAN-AXIPOP-MIB", "vismResPartCtrlrNum"))
if mibBuilder.loadTexts: vismPortResPartCnfGrpEntry.setStatus('mandatory')
vismResPartPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismResPartPortNum.setStatus('mandatory')
vismResPartCtrlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("par", 1), ("pnni", 2), ("tag", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismResPartCtrlrNum.setStatus('mandatory')
vismResPartRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartRowStatus.setStatus('mandatory')
vismResPartNumOfLcnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 380))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartNumOfLcnAvail.setStatus('mandatory')
vismResPartLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510)).clone(131)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartLcnLow.setStatus('mandatory')
vismResPartLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510)).clone(510)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartLcnHigh.setStatus('mandatory')
vismResPartIngrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartIngrPctBW.setStatus('mandatory')
vismResPartEgrPctBW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartEgrPctBW.setStatus('mandatory')
vismResPartCtrlrID = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismResPartCtrlrID.setStatus('mandatory')
vismChanCacTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3), )
if mibBuilder.loadTexts: vismChanCacTable.setStatus('mandatory')
vismChanCacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismChanNum"))
if mibBuilder.loadTexts: vismChanCacEntry.setStatus('mandatory')
vismChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanNum.setStatus('mandatory')
vismChanCacMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanCacMaster.setStatus('mandatory')
vismChanCacPassedCons = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanCacPassedCons.setStatus('mandatory')
vismChanCacRejectedCons = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanCacRejectedCons.setStatus('mandatory')
vismChanCacRejectionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delete", 1), ("maintain", 2), ("unspecified", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanCacRejectionPolicy.setStatus('mandatory')
vismChanCarrierLossPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("previousCodec", 1), ("upspeedCodec", 2), ("unspecified", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanCarrierLossPolicy.setStatus('mandatory')
vismChanVADTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanVADTolerance.setStatus('mandatory')
vismChanVADDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismChanVADDutyCycle.setStatus('mandatory')
networkCacConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2))).clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkCacConfigState.setStatus('mandatory')
vismCasGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8))
vismCasVariantTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1), )
if mibBuilder.loadTexts: vismCasVariantTable.setStatus('mandatory')
vismCasVariantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCasVariantName"))
if mibBuilder.loadTexts: vismCasVariantEntry.setStatus('mandatory')
vismCasVariantName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCasVariantName.setStatus('mandatory')
vismCasFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasFileName.setStatus('mandatory')
vismCasTRinging = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasTRinging.setStatus('deprecated')
vismCasDigitMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mf", 1), ("dtmf", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasDigitMethod.setStatus('mandatory')
vismCasInterdigitTpart = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasInterdigitTpart.setStatus('mandatory')
vismCasInterdigitTcrit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasInterdigitTcrit.setStatus('mandatory')
vismCasInterdigitTMF = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasInterdigitTMF.setStatus('mandatory')
vismCasVariantState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("configInProgress", 2), ("configured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCasVariantState.setStatus('mandatory')
vismCasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasRowStatus.setStatus('mandatory')
vismCasCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)).clone('US')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasCountryCode.setStatus('deprecated')
vismCasVariantSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("internal", 2), ("external", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasVariantSource.setStatus('mandatory')
vismCasXgcpVariantTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2), )
if mibBuilder.loadTexts: vismCasXgcpVariantTable.setStatus('mandatory')
vismCasXgcpVariantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCasXgcpVariantName"))
if mibBuilder.loadTexts: vismCasXgcpVariantEntry.setStatus('mandatory')
vismCasXgcpVariantName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCasXgcpVariantName.setStatus('mandatory')
vismCasXgcpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCasXgcpFileName.setStatus('mandatory')
vismCasXgcpMaxReXmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasXgcpMaxReXmitTime.setStatus('mandatory')
vismCasXgcpInitialReXmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasXgcpInitialReXmitTime.setStatus('mandatory')
vismCasXgcpMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCasXgcpMaxRetries.setStatus('mandatory')
vismAal2CidGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4))
vismAal2CidCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1), )
if mibBuilder.loadTexts: vismAal2CidCnfTable.setStatus('mandatory')
vismAal2CidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismAal2CidLcn"), (0, "CISCO-WAN-AXIPOP-MIB", "vismAal2CidNum"))
if mibBuilder.loadTexts: vismAal2CidEntry.setStatus('mandatory')
vismAal2CidNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidNum.setStatus('mandatory')
vismAal2CidLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidLcn.setStatus('mandatory')
vismAal2EndptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2EndptNum.setStatus('mandatory')
vismAal2CidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidRowStatus.setStatus('mandatory')
vismAal2CidType3Redundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidType3Redundancy.setStatus('mandatory')
vismAal2CidVad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidVad.setStatus('mandatory')
vismAal2CidProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("itu", 1), ("atm", 2), ("custom", 3), ("none", 4))).clone('custom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidProfileType.setStatus('mandatory')
vismAal2CidProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 8), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidProfileNum.setStatus('mandatory')
vismAal2CidCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidCodecType.setStatus('mandatory')
vismAal2CidDtmfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidDtmfTransport.setStatus('mandatory')
vismAal2CidCasTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidCasTransport.setStatus('mandatory')
vismAal2CidEcanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidEcanEnable.setStatus('mandatory')
vismAal2InitVadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2InitVadTimer.setStatus('mandatory')
vismAal2CnfPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 20, 30, 40))).clone(namedValues=NamedValues(("five", 5), ("ten", 10), ("twenty", 20), ("thirty", 30), ("fourty", 40))).clone('ten')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CnfPktPeriod.setStatus('mandatory')
vismAal2CidICSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidICSEnable.setStatus('mandatory')
vismAal2CidState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cidStateActive", 1), ("cidStateFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidState.setStatus('mandatory')
vismAal2CidFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("self", 1), ("highLevel", 2), ("both", 3), ("notFail", 4))).clone('notFail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidFailReason.setStatus('mandatory')
vismSvcGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10))
vismSvcTxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxSetups.setStatus('mandatory')
vismSvcRxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxSetups.setStatus('mandatory')
vismSvcTxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxCallProcs.setStatus('mandatory')
vismSvcRxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxCallProcs.setStatus('mandatory')
vismSvcTxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConns.setStatus('mandatory')
vismSvcTxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConnAcks.setStatus('mandatory')
vismSvcRxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConns.setStatus('mandatory')
vismSvcRxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConnAcks.setStatus('mandatory')
vismSvcTxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleases.setStatus('mandatory')
vismSvcTxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleaseCompls.setStatus('mandatory')
vismSvcRxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleases.setStatus('mandatory')
vismSvcRxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleaseCompls.setStatus('mandatory')
vismSvcTxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestarts.setStatus('mandatory')
vismSvcTxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestartAcks.setStatus('mandatory')
vismSvcRxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestarts.setStatus('mandatory')
vismSvcRxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestartAcks.setStatus('mandatory')
vismSvcTxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrts.setStatus('mandatory')
vismSvcTxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrtAcks.setStatus('mandatory')
vismSvcRxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrts.setStatus('mandatory')
vismSvcRxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrtAcks.setStatus('mandatory')
vismSvcTxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEnds.setStatus('mandatory')
vismSvcTxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEndAcks.setStatus('mandatory')
vismSvcRxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEnds.setStatus('mandatory')
vismSvcRxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEndAcks.setStatus('mandatory')
vismSvcTxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxBulkResyncs.setStatus('mandatory')
vismSvcRxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxBulkResyncs.setStatus('mandatory')
vismSvcCallProcExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcCallProcExpiries.setStatus('mandatory')
vismSvcReleasExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcReleasExpiries.setStatus('mandatory')
vismSvcConnExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnExpiries.setStatus('mandatory')
vismSvcConnAckExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnAckExpiries.setStatus('mandatory')
vismSvcRestartExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRestartExpiries.setStatus('mandatory')
vismSvcResyncExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcResyncExpiries.setStatus('mandatory')
vismSvcCnfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19))
vismSvcAtmQosGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1))
vismSvcAtmQosCdv = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 20000)).clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCdv.setStatus('mandatory')
vismSvcAtmQosCtd = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 150000)).clone(150000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCtd.setStatus('mandatory')
vismSvcAtmQosClr = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosClr.setStatus('mandatory')
vismSvcTrfScalingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2))
vismSvcTrfScalingFactor = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcTrfScalingFactor.setStatus('mandatory')
vismSvcAal2CidGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3))
vismSvcAal2CidNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAal2CidNumber.setStatus('mandatory')
vismSigGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6))
vismHdlcChanTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1), )
if mibBuilder.loadTexts: vismHdlcChanTable.setStatus('mandatory')
vismHdlcChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismHdlcChanNum"))
if mibBuilder.loadTexts: vismHdlcChanEntry.setStatus('mandatory')
vismHdlcChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcChanNum.setStatus('mandatory')
vismHdlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismHdlcRowStatus.setStatus('mandatory')
vismHdlcMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcMaxFrameSize.setStatus('deprecated')
vismHdlcLcnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismHdlcLcnNum.setStatus('mandatory')
vismHdlcXmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcXmtFrames.setStatus('mandatory')
vismHdlcRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvFrames.setStatus('mandatory')
vismHdlcRcvCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvCrcErrors.setStatus('mandatory')
vismHdlcRcvBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRcvBufOverflows.setStatus('mandatory')
vismHdlcTxUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcTxUnderflows.setStatus('mandatory')
vismHdlcTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcTxAbortFrames.setStatus('mandatory')
vismHdlcRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismHdlcRxAbortFrames.setStatus('mandatory')
bearerConnGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9))
bearerConnTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1), )
if mibBuilder.loadTexts: bearerConnTable.setStatus('mandatory')
bearerConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "bearerEndptNum"))
if mibBuilder.loadTexts: bearerConnEntry.setStatus('mandatory')
bearerEndptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerEndptNum.setStatus('mandatory')
bearerCid = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCid.setStatus('mandatory')
bearerLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLcn.setStatus('mandatory')
bearerSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerSentPkts.setStatus('mandatory')
bearerRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerRcvdPkts.setStatus('mandatory')
bearerSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerSentOctets.setStatus('mandatory')
bearerRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerRcvdOctets.setStatus('mandatory')
bearerLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLostPkts.setStatus('mandatory')
bearerJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerJitter.setStatus('mandatory')
bearerLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLatency.setStatus('mandatory')
bearerAal2ExtAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ExtAISCnts.setStatus('mandatory')
bearerAal2ExtRAICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ExtRAICnts.setStatus('mandatory')
bearerAal2ConnAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ConnAISCnts.setStatus('mandatory')
bearerAal2ConnRDICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ConnRDICnts.setStatus('mandatory')
bearerCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bearerCntClrButton.setStatus('mandatory')
dsx0VismCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1), )
if mibBuilder.loadTexts: dsx0VismCnfTable.setStatus('mandatory')
dsx0VismCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "ds0IfIndex"))
if mibBuilder.loadTexts: dsx0VismCnfEntry.setStatus('mandatory')
ds0IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0IfIndex.setStatus('mandatory')
ds0RobbedBitSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0RobbedBitSignalling.setStatus('mandatory')
ds0IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0IdleCode.setStatus('mandatory')
ds0SeizedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0SeizedCode.setStatus('mandatory')
ds0ReceivedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0ReceivedCode.setStatus('mandatory')
ds0TransmitCodesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0TransmitCodesEnable.setStatus('deprecated')
ds0BundleMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0BundleMapped.setStatus('mandatory')
ds0IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(81, 63, 1))).clone(namedValues=NamedValues(("bearer", 81), ("ccs-signaling", 63), ("unknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0IfType.setStatus('mandatory')
ds0CasVariantName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasVariantName.setStatus('mandatory')
ds0CasCadenceOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9999)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasCadenceOnTime.setStatus('mandatory')
ds0CasCadenceOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasCadenceOffTime.setStatus('mandatory')
ds0InsertLocalCas = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0InsertLocalCas.setStatus('mandatory')
ds0LocalCasPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0LocalCasPattern.setStatus('mandatory')
ds0LoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("remoteLoop", 2), ("localLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0LoopbackCommand.setStatus('mandatory')
ds0CasParameterSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("casAppl", 1), ("mibValue", 2))).clone('casAppl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasParameterSource.setStatus('mandatory')
ds0CasOnHookMinMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasOnHookMinMakeTime.setStatus('mandatory')
ds0CasOffHookMinMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasOffHookMinMakeTime.setStatus('mandatory')
ds0CasWinkMinMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasWinkMinMakeTime.setStatus('mandatory')
ds0CasWinkMaxMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(350)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasWinkMaxMakeTime.setStatus('mandatory')
ds0CasWinkBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasWinkBreakTime.setStatus('mandatory')
ds0CasGlareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasGlareTime.setStatus('mandatory')
ds0CasGaurdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasGaurdTime.setStatus('mandatory')
ds0CasDelayImmedStart = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasDelayImmedStart.setStatus('mandatory')
ds0SignalingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cas", 1), ("ccs", 2), ("none", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0SignalingType.setStatus('mandatory')
ds0CasMinDelayDialTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 25), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasMinDelayDialTime.setStatus('mandatory')
ds0CasMinStartDialTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 26), Integer32().clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasMinStartDialTime.setStatus('mandatory')
ds0CasFlashMinMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 27), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasFlashMinMakeTime.setStatus('mandatory')
ds0CasFlashMaxMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 28), Integer32().clone(1400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasFlashMaxMakeTime.setStatus('mandatory')
ds0CasDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bidirectional", 1), ("incoming", 2), ("outgoing", 3))).clone('bidirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasDirectionality.setStatus('mandatory')
ds0CasGlarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("controlling", 1), ("releasing", 2))).clone('controlling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasGlarePolicy.setStatus('mandatory')
ds0CasIncomingMgcpPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasIncomingMgcpPackage.setStatus('mandatory')
ds0CasOutgoingMgcpPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0CasOutgoingMgcpPackage.setStatus('mandatory')
ds0InputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0InputGain.setStatus('mandatory')
ds0OutputAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0OutputAttenuation.setStatus('mandatory')
ds0MusicThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30)).clone(-38)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0MusicThreshold.setStatus('mandatory')
ds0SidPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 36), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0SidPacket.setStatus('mandatory')
dsx0VismChanMapTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2), )
if mibBuilder.loadTexts: dsx0VismChanMapTable.setStatus('mandatory')
dsx0VismChanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "dsx1LineNum"), (0, "CISCO-WAN-AXIPOP-MIB", "ds0ChanNum"))
if mibBuilder.loadTexts: dsx0VismChanMapEntry.setStatus('mandatory')
dsx1LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1LineNum.setStatus('mandatory')
ds0ChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0ChanNum.setStatus('mandatory')
ds0ChanMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0ChanMapIfIndex.setStatus('mandatory')
vismCodecTemplateCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7))
vismCodecTemplateCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1), )
if mibBuilder.loadTexts: vismCodecTemplateCnfGrpTable.setStatus('mandatory')
vismCodecTemplateCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCodecTemplateNum"))
if mibBuilder.loadTexts: vismCodecTemplateCnfGrpEntry.setStatus('mandatory')
vismCodecTemplateNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCodecTemplateNum.setStatus('mandatory')
vismCodecSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCodecSupported.setStatus('mandatory')
vismCodecTemplateMaxChanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCodecTemplateMaxChanCount.setStatus('mandatory')
vismCodecCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18))
vismCodecCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1), )
if mibBuilder.loadTexts: vismCodecCnfTable.setStatus('mandatory')
vismCodecCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1), ).setIndexNames((0, "CISCO-WAN-AXIPOP-MIB", "vismCodecCnfIndex"))
if mibBuilder.loadTexts: vismCodecCnfEntry.setStatus('mandatory')
vismCodecCnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCodecCnfIndex.setStatus('mandatory')
vismCodecName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCodecName.setStatus('mandatory')
vismCodecPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 60))).clone(namedValues=NamedValues(("ten", 10), ("twenty", 20), ("thirty", 30), ("fourty", 40), ("sixty", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecPktPeriod.setStatus('mandatory')
vismCodecPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecPreference.setStatus('mandatory')
vismCodecString = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecString.setStatus('mandatory')
vismCodecIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecIanaType.setStatus('mandatory')
vismCardCacFailuresGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20))
vismPortCacPvcAddFailures = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPortCacPvcAddFailures.setStatus('mandatory')
vismPortCacSvcAddFailures = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPortCacSvcAddFailures.setStatus('mandatory')
vismVcCacPvcFailures = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismVcCacPvcFailures.setStatus('mandatory')
vismVcCacPvcUpspeedFailures = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismVcCacPvcUpspeedFailures.setStatus('mandatory')
vismPortCacSvcUpspeedFailures = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismPortCacSvcUpspeedFailures.setStatus('mandatory')
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", bbChanRemoteNsapAddr=bbChanRemoteNsapAddr, rpmChanRowStatus=rpmChanRowStatus, rpmIfCnfRscPartEntry=rpmIfCnfRscPartEntry, vismSvcRxReleaseCompls=vismSvcRxReleaseCompls, cesConnPCR=cesConnPCR, bertSupportedTestsTableEntry=bertSupportedTestsTableEntry, frPortServiceQueGrpEntry=frPortServiceQueGrpEntry, parNetParmCbMaxTimeout=parNetParmCbMaxTimeout, x21LineEnable=x21LineEnable, bearerAal2ConnRDICnts=bearerAal2ConnRDICnts, bbChanServiceType=bbChanServiceType, ausmEndPortNum=ausmEndPortNum, atmLineInterfaceFormat=atmLineInterfaceFormat, cesmChanNumNextAvailable=cesmChanNumNextAvailable, parTrkCnfgTrafficClassAbr=parTrkCnfgTrafficClassAbr, vismVoIpEventNegotiationPolicy=vismVoIpEventNegotiationPolicy, bbChanTestType=bbChanTestType, pir=pir, cesmEndPtMapGrp=cesmEndPtMapGrp, vrtlIntrQbinState=vrtlIntrQbinState, parIfMaxConn=parIfMaxConn, cesEndLineNum=cesEndLineNum, ausmConnRemoteSCR=ausmConnRemoteSCR, bbIfAddrRegEnable=bbIfAddrRegEnable, ausmChanEgrSrvRate=ausmChanEgrSrvRate, pxmAtmVcCrossConnectL2HLastChange=pxmAtmVcCrossConnectL2HLastChange, bbChanTestState=bbChanTestState, bbIfSigPortNum=bbIfSigPortNum, parNetParmNetwWindowSz=parNetParmNetwWindowSz, rcvBufNotAvailable=rcvBufNotAvailable, chanEpdDiscCells=chanEpdDiscCells, bbChanDscdClp1Cells=bbChanDscdClp1Cells, rcvFramesDiscShelfAlarm=rcvFramesDiscShelfAlarm, vismFarEndAddressType=vismFarEndAddressType, vismSvcGrp=vismSvcGrp, vrtlIntrQbinDiscardSelection=vrtlIntrQbinDiscardSelection, cesCellSeqMismatchCnt=cesCellSeqMismatchCnt, bbIfCntSigILMIGrpTable=bbIfCntSigILMIGrpTable, axisImaGroupFeNumFailures=axisImaGroupFeNumFailures, rcvBytesDE=rcvBytesDE, pxmAtmVcCrossConnectLowIfIndex=pxmAtmVcCrossConnectLowIfIndex, portIngrSvcBandW=portIngrSvcBandW, vismCodecTemplateNum=vismCodecTemplateNum, vismCodecTemplateCnfGrp=vismCodecTemplateCnfGrp, ingressQDepth=ingressQDepth, rpmIfRscPrtVpiHigh=rpmIfRscPrtVpiHigh, rcvPortFramesFECN=rcvPortFramesFECN, bbChanEgrPercentUtil=bbChanEgrPercentUtil, ausmPortDeleteSvcs=ausmPortDeleteSvcs, ascCnfSigLmiGrpTable=ascCnfSigLmiGrpTable, parConnCos=parConnCos, TruthValue=TruthValue, ausmPortCnfPortImaGrpEntry=ausmPortCnfPortImaGrpEntry, bbIfGetResponseTransmitted=bbIfGetResponseTransmitted, vismAal2CasTransport=vismAal2CasTransport, portBERTEnable=portBERTEnable, portEgresDEThresh=portEgresDEThresh, parCmParmsRrtErrsPerCycle=parCmParmsRrtErrsPerCycle, vismChanAal2CpsInvCidPkts=vismChanAal2CpsInvCidPkts, frPortCntSigCLLMGrpEntry=frPortCntSigCLLMGrpEntry, pxmAtmVcCrossConnectIndexNext=pxmAtmVcCrossConnectIndexNext, bbChanNumNextAvailable=bbChanNumNextAvailable, bbIfErrorThresholdN491=bbIfErrorThresholdN491, cesPortsUsedLine7=cesPortsUsedLine7, parClockTable=parClockTable, ausmPortIngrPercentUtil=ausmPortIngrPercentUtil, egrQDepthMax=egrQDepthMax, ausmPortCnfResPartGrpEntry=ausmPortCnfResPartGrpEntry, errorThresholdN491=errorThresholdN491, frChanLocalLpbkEnable=frChanLocalLpbkEnable, axisImaGroupMinNumRxLinks=axisImaGroupMinNumRxLinks, ausmEndPointMapGrpTable=ausmEndPointMapGrpTable, ingrGfcErrCells=ingrGfcErrCells, atmNetPrefixTable=atmNetPrefixTable, chanIngrXmtState=chanIngrXmtState, bbIfCnfSigILMIGrp=bbIfCnfSigILMIGrp, axisImaGroupAlphaValue=axisImaGroupAlphaValue, ausmRoutingPriority=ausmRoutingPriority, bbChanTestResult=bbChanTestResult, ausmPortSvcVpiHigh=ausmPortSvcVpiHigh, vismChanScrEgress=vismChanScrEgress, vismPortLineNum=vismPortLineNum, imatmTrkMaxVp=imatmTrkMaxVp, ascLmiVpi=ascLmiVpi, bearerLostPkts=bearerLostPkts, frChanCnfChangeCount=frChanCnfChangeCount, parTrkCnfgTrafficClassVbr=parTrkCnfgTrafficClassVbr, vismCodecString=vismCodecString, extClkConnectorType=extClkConnectorType, egrQBinState=egrQBinState, chanStatusBitMap=chanStatusBitMap, frPortCnfSigCLLMGrp=frPortCnfSigCLLMGrp, vismSvcAtmQosCtd=vismSvcAtmQosCtd, chanIngrUpcClpSetCells=chanIngrUpcClpSetCells, bbChanNonConformCellsAtGcra2Policer=bbChanNonConformCellsAtGcra2Policer, xmtFramesTaggedDE=xmtFramesTaggedDE, rcvPortFramesTaggedDE=rcvPortFramesTaggedDE, vismCodecNegotiationOption=vismCodecNegotiationOption, cesmResPartPortNum=cesmResPartPortNum, rasOamLpbkInfo=rasOamLpbkInfo, ausmPortCntSigILMIGrp=ausmPortCntSigILMIGrp, srmeLineNum=srmeLineNum, ausmStatePortNum=ausmStatePortNum, bertStartDate=bertStartDate, imaPortNum=imaPortNum, rcvFramesDiscOverrun=rcvFramesDiscOverrun, cesmConnRemoteMCR=cesmConnRemoteMCR, bbRemoteConnPercentUtil=bbRemoteConnPercentUtil, x21AlmCnfGrpEntry=x21AlmCnfGrpEntry, frPortCntPortGrp=frPortCntPortGrp, vismLocalVpi=vismLocalVpi, bbChanCntGrpEntry=bbChanCntGrpEntry, ausmRestrictTrunkType=ausmRestrictTrunkType, frChanSlaveType=frChanSlaveType, bbIfAddrPrefix=bbIfAddrPrefix, vismChanAal2CpsRcvdPkts=vismChanAal2CpsRcvdPkts, uniSignalingTimeout=uniSignalingTimeout, bbIfOversubscribed=bbIfOversubscribed, bbIfCnfRscPartGrpTable=bbIfCnfRscPartGrpTable, chanEgrPortQfullDiscardCells=chanEgrPortQfullDiscardCells, chanOAMstatus192=chanOAMstatus192, ascLmiStatusEnqRx=ascLmiStatusEnqRx, rcvPortFramesBECN=rcvPortFramesBECN, cesConnServiceType=cesConnServiceType, axisImaGroupGammaValue=axisImaGroupGammaValue, parTrkBwCapacity=parTrkBwCapacity, ausmConnRemoteMCR=ausmConnRemoteMCR, bbIfIlmiTrapEnable=bbIfIlmiTrapEnable, cesmConnFGCRAEnable=cesmConnFGCRAEnable, vismConfig=vismConfig, vismStateChanNum=vismStateChanNum, ausmPortSvcShareLcnVpid=ausmPortSvcShareLcnVpid, bertSupportedTestsTable=bertSupportedTestsTable, n391FullStatusPollingCounter=n391FullStatusPollingCounter, vismPortResPartCnfGrp=vismPortResPartCnfGrp, vismSvcTxCallProcs=vismSvcTxCallProcs, ausmChanTestState=ausmChanTestState, bbConnSCR=bbConnSCR, ausmMastership=ausmMastership, vismCacEnable=vismCacEnable, vrtlIntrQbinClpHiThreshold=vrtlIntrQbinClpHiThreshold, vrtlIntrQbinCounterEntry=vrtlIntrQbinCounterEntry, ausmChanNum=ausmChanNum, bbIfTooBigError=bbIfTooBigError, ausmPortSvcLcnHigh=ausmPortSvcLcnHigh, ausmPortSvcVciHigh=ausmPortSvcVciHigh, ascLmiStatusAckTx=ascLmiStatusAckTx, bbChanVpi=bbChanVpi, frPortCnfPortGrpEntry=frPortCnfPortGrpEntry, pxmAtmVcCrossConnectLowVci=pxmAtmVcCrossConnectLowVci, x21LineLoopbackCodeDetection=x21LineLoopbackCodeDetection, xmtBytesDE=xmtBytesDE, rcvFramesTaggedFECN=rcvFramesTaggedFECN, xmtFramesDiscXceedQDepth=xmtFramesDiscXceedQDepth, atmLineRcvHecErrorCells=atmLineRcvHecErrorCells, bnmCellbusNoAckCellCount=bnmCellbusNoAckCellCount, parTrkTable=parTrkTable, frPortCntSigLMIGrpTable=frPortCntSigLMIGrpTable, vismMode=vismMode, aumAddressTranslationDeleteTable=aumAddressTranslationDeleteTable, bbIfSignallingVci=bbIfSignallingVci, chanIngrCurrQDepth=chanIngrCurrQDepth, pxmSecondaryMuxClockSource=pxmSecondaryMuxClockSource, bertDDSSeekResultsTableLastIndex=bertDDSSeekResultsTableLastIndex, parTrkRemoteNodeName=parTrkRemoteNodeName, serialPortNumOfValidEntries=serialPortNumOfValidEntries, cesmResPartLcnHigh=cesmResPartLcnHigh, vismChanAal2CrcErrors=vismChanAal2CrcErrors, dsx0VismChanMapTable=dsx0VismChanMapTable, bbIfRscPrtVciLow=bbIfRscPrtVciLow, srmTargetSlotLineNum=srmTargetSlotLineNum, vismResPartCtrlrNum=vismResPartCtrlrNum, rpmChanRtePriority=rpmChanRtePriority, bnmPortCounterClrButton=bnmPortCounterClrButton, cesmResPartCtrlrID=cesmResPartCtrlrID, vismConnServiceType=vismConnServiceType, egrQAlgorithm=egrQAlgorithm, imatmTrkMinVp=imatmTrkMinVp, x21portLineNum=x21portLineNum, ausmPortSpeed=ausmPortSpeed, imatmVpTrkClrGrp=imatmVpTrkClrGrp, commonChanTableEntry=commonChanTableEntry, axisImaGroupimaPortNum=axisImaGroupimaPortNum, ds0CasWinkMinMakeTime=ds0CasWinkMinMakeTime, pxmAtmVcCrossConnectHighVci=pxmAtmVcCrossConnectHighVci, rpmChanNum=rpmChanNum, chanIngrEfciSetXmtCells=chanIngrEfciSetXmtCells, imatmDsx3PortCntrsEntry=imatmDsx3PortCntrsEntry, vismVoIpSIDPayloadType=vismVoIpSIDPayloadType, egrXmtClpSetCells=egrXmtClpSetCells, ausmConnMCR=ausmConnMCR, cesMapPortNum=cesMapPortNum, ingrUpcCBS=ingrUpcCBS, bertDeviceToLoop=bertDeviceToLoop, rcvFramesDiscNoChan=rcvFramesDiscNoChan, commonPortTableEntry=commonPortTableEntry, frChanCnfGrpEntry=frChanCnfGrpEntry, ascLmiVccVci=ascLmiVccVci, ausmChanIngrPercentUtil=ausmChanIngrPercentUtil, cntPortNum=cntPortNum, ausmInterfacePortNum=ausmInterfacePortNum, vismTrapObjGrp=vismTrapObjGrp, ascLmiXmtAbitState=ascLmiXmtAbitState, chanSvcConnId=chanSvcConnId, portSvcInUse=portSvcInUse, vismVoIpTripleRedundancy=vismVoIpTripleRedundancy, vismXgcpSdpOst=vismXgcpSdpOst, parCmParmsRrtPauseTime=parCmParmsRrtPauseTime, ascLmiVccLineNum=ascLmiVccLineNum, parIfTable=parIfTable, ausmChanNumNextAvailable=ausmChanNumNextAvailable, rpmIfRscPrtIngrPctBandwidth=rpmIfRscPrtIngrPctBandwidth, parNetParmCbOffset=parNetParmCbOffset, parCmParmsResetTimer=parCmParmsResetTimer, bertTestMedium=bertTestMedium, IfNsapAddress=IfNsapAddress, rpmPortRowStatus=rpmPortRowStatus, egrMinBwInc=egrMinBwInc, cesIngrDiscardedBytes=cesIngrDiscardedBytes, parConnRemoteVpi=parConnRemoteVpi, vismBearerTos=vismBearerTos, atmLineCnfEntry=atmLineCnfEntry, cardIngrPercentUtil=cardIngrPercentUtil, cesPortNextAvailable=cesPortNextAvailable, frPortCnfPortGrp=frPortCnfPortGrp, ausmStdABRCDF=ausmStdABRCDF, ausmChanCnfGrpEntry=ausmChanCnfGrpEntry, parTrkLoadRcvUsedBdataB=parTrkLoadRcvUsedBdataB, chanIngrXmtCells=chanIngrXmtCells, asmUnitMeasuredValue=asmUnitMeasuredValue, parCmParmsRerouteGroups=parCmParmsRerouteGroups, vismCasTRinging=vismCasTRinging, frChanCntGrpTable=frChanCntGrpTable, imatmVpTrkClrGrpTable=imatmVpTrkClrGrpTable, xmtPortBytesDiscXceedQDepth=xmtPortBytesDiscXceedQDepth, ds0CasFlashMinMakeTime=ds0CasFlashMinMakeTime, x21portSvcDlciHigh=x21portSvcDlciHigh, vismPortState=vismPortState, nextPortNumAvailable=nextPortNumAvailable, vrtlIntrRxdClpUntaggedCellCnt=vrtlIntrRxdClpUntaggedCellCnt, ausmPortCntSigILMIGrpTable=ausmPortCntSigILMIGrpTable, cesmChanReroute=cesmChanReroute, ingressQDEThresh=ingressQDEThresh, rasOamlpbkFrequency=rasOamlpbkFrequency, frResPartPortNum=frResPartPortNum, vismAal2Grp=vismAal2Grp, parSnNodeAlarmStatus=parSnNodeAlarmStatus, ascLmiTimerT394=ascLmiTimerT394, primaryMuxClockSource=primaryMuxClockSource, commonPortSignallingState=commonPortSignallingState, cardResPartGrpEntry=cardResPartGrpEntry, bbChanOvrSubOvrRide=bbChanOvrSubOvrRide, vismSvcAtmQosGrp=vismSvcAtmQosGrp, atmLineTotalXmtCells=atmLineTotalXmtCells)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", portBytesDiscXceedDEThresh=portBytesDiscXceedDEThresh, rateUp=rateUp, asmAlarmSeverity=asmAlarmSeverity, cesmResPartCtrlrNum=cesmResPartCtrlrNum, rcvAsynchUpdate=rcvAsynchUpdate, vrtlIntrCounterEntry=vrtlIntrCounterEntry, parConnMasterShip=parConnMasterShip, bertDeviceToLoopMask=bertDeviceToLoopMask, bearerSentOctets=bearerSentOctets, ausmPortCnfPortGrpTable=ausmPortCnfPortGrpTable, rpmChanServiceType=rpmChanServiceType, rcvPortKbpsAIR=rcvPortKbpsAIR, frResPartEgrPctBW=frResPartEgrPctBW, locImaId=locImaId, ausmChanRTDResult=ausmChanRTDResult, bertMode=bertMode, bbIfRcvRmCells=bbIfRcvRmCells, sigPortNum=sigPortNum, vismCasXgcpInitialReXmitTime=vismCasXgcpInitialReXmitTime, vrtlIntrConfigTable=vrtlIntrConfigTable, vrtlIntrCounterTable=vrtlIntrCounterTable, frRemoteNSAP=frRemoteNSAP, queConfigVrtlIntrQbinNum=queConfigVrtlIntrQbinNum, x21portSvcStatus=x21portSvcStatus, axisImaGroupFailureStatus=axisImaGroupFailureStatus, bbIfTrapTransmitted=bbIfTrapTransmitted, vismSvcTxConnAcks=vismSvcTxConnAcks, vismAggregateSvcBandwidth=vismAggregateSvcBandwidth, bbChanRemoteVci=bbChanRemoteVci, chanNum=chanNum, bbIfRcvClp1DiscCells=bbIfRcvClp1DiscCells, rpmPortState=rpmPortState, frPortCntSigLMIGrp=frPortCntSigLMIGrp, vismSvcResyncExpiries=vismSvcResyncExpiries, bertLine=bertLine, vismSigGrp=vismSigGrp, portIngrPercentUtil=portIngrPercentUtil, portEnhancedSIW=portEnhancedSIW, vismAal2CidICSEnable=vismAal2CidICSEnable, frResPartDlciHigh=frResPartDlciHigh, commonConnType=commonConnType, ascLmiPollingEnabled=ascLmiPollingEnabled, vismRemoteNSAP=vismRemoteNSAP, chanIngrQfullDiscardCells=chanIngrQfullDiscardCells, parSysParmsDrtDelay=parSysParmsDrtDelay, ausmChanCntGrpTable=ausmChanCntGrpTable, parCmParms=parCmParms, foresightQIR=foresightQIR, ingrQCLPThreshLow=ingrQCLPThreshLow, commonChanServiceType=commonChanServiceType, bbRemoteConnSCR=bbRemoteConnSCR, vismChanCacPassedCons=vismChanCacPassedCons, coreCardCommands=coreCardCommands, ascLmiUpdateStatusRx=ascLmiUpdateStatusRx, vismCasInterdigitTpart=vismCasInterdigitTpart, cardResPartRowStatus=cardResPartRowStatus, vismTrapIntIndex2=vismTrapIntIndex2, bbChanConnDesc=bbChanConnDesc, ausmChanOvrSubOvrRide=ausmChanOvrSubOvrRide, connVPINum=connVPINum, pxmAtmVcCrossConnectLowVpi=pxmAtmVcCrossConnectLowVpi, ausmPortCntPortImaGrpEntry=ausmPortCntPortImaGrpEntry, cesPortNumOfDs0Slot=cesPortNumOfDs0Slot, cesmPortCnfResPartGrp=cesmPortCnfResPartGrp, ascLmiInvalidPduRx=ascLmiInvalidPduRx, vismSvcTrfScalingFactor=vismSvcTrfScalingFactor, imaAutoRestartFeature=imaAutoRestartFeature, vismConnPCR=vismConnPCR, vismRestrictTrunkType=vismRestrictTrunkType, vismVADDutyCycle=vismVADDutyCycle, commonPortSpeed=commonPortSpeed, currentClockSource=currentClockSource, parSysParmsMaxHsdDelay=parSysParmsMaxHsdDelay, ausmChanRMEnable=ausmChanRMEnable, vismCasXgcpVariantName=vismCasXgcpVariantName, bnmPortCounterTable=bnmPortCounterTable, parNetParmMsgMaxTimeout=parNetParmMsgMaxTimeout, ausmPortCnfResPartGrp=ausmPortCnfResPartGrp, parTrkLoadXmtUsedBdataA=parTrkLoadXmtUsedBdataA, parTrkId=parTrkId, x21AlmGrp=x21AlmGrp, virtualInterfaceQbinCnt=virtualInterfaceQbinCnt, rpmChanLocalVpi=rpmChanLocalVpi, axisImaGroupNumRxActLnks=axisImaGroupNumRxActLnks, vismConnRemotePCR=vismConnRemotePCR, parTrkCnfgTrafficClassNts=parTrkCnfgTrafficClassNts, bearerAal2ConnAISCnts=bearerAal2ConnAISCnts, parOnOffRouting=parOnOffRouting, x21LineRate=x21LineRate, cesCDVRxT=cesCDVRxT, vismAal2CidState=vismAal2CidState, bbIfState=bbIfState, bbChanVci=bbChanVci, vismResPartNumOfLcnAvail=vismResPartNumOfLcnAvail, ausmPortNum=ausmPortNum, chanPacketNumber=chanPacketNumber, ds0CasCadenceOffTime=ds0CasCadenceOffTime, atmLineCntClrButton=atmLineCntClrButton, vismMaxCost=vismMaxCost, egrXmtCellRate=egrXmtCellRate, portsUsedLine1=portsUsedLine1, ingrQCLPState=ingrQCLPState, ausmPortCnfResPartGrpTable=ausmPortCnfResPartGrpTable, ds0ReceivedCode=ds0ReceivedCode, bbChanRowStatus=bbChanRowStatus, rpmChanMastership=rpmChanMastership, frPortStateGrpEntry=frPortStateGrpEntry, srmeTargetSlotNum=srmeTargetSlotNum, axisImaGroupTxTimingRefLink=axisImaGroupTxTimingRefLink, asmShelfAlarmState=asmShelfAlarmState, rpmChanMaxCost=rpmChanMaxCost, asmAlarmThreshold=asmAlarmThreshold, ds0CasCadenceOnTime=ds0CasCadenceOnTime, ausmStdABRICR=ausmStdABRICR, parClockEntry=parClockEntry, cesCBRService=cesCBRService, vismCodecTemplateCnfGrpEntry=vismCodecTemplateCnfGrpEntry, cesMaxCost=cesMaxCost, portsUsedLine4=portsUsedLine4, snmpPduReceived=snmpPduReceived, secondaryClockSource=secondaryClockSource, xmtPortKbpsAIR=xmtPortKbpsAIR, bertSlotNumber=bertSlotNumber, rcvCLLMStatusTimer=rcvCLLMStatusTimer, parOnOffCommBreak=parOnOffCommBreak, vismJitterDelayMode=vismJitterDelayMode, vrtlIntrRxdClpUntaggedDiscardedCellCnt=vrtlIntrRxdClpUntaggedDiscardedCellCnt, parVsiConfigParms=parVsiConfigParms, parConnOperStatus=parConnOperStatus, rpmChanSlotNum=rpmChanSlotNum, vismAvailableDs0Count=vismAvailableDs0Count, bbChanUpcMBS=bbChanUpcMBS, parNetParmCbDelay=parNetParmCbDelay, parTrkLocalVTrunkId=parTrkLocalVTrunkId, cesOflowDropBytes=cesOflowDropBytes, chanDEtoCLPmap=chanDEtoCLPmap, bbChanRcvEOFCells=bbChanRcvEOFCells, ingrXmtCells=ingrXmtCells, vismEcanEncoding=vismEcanEncoding, xmtFramesUnknownProtocols=xmtFramesUnknownProtocols, parConnRoute=parConnRoute, parTrkLoadXmtUsedVbr=parTrkLoadXmtUsedVbr, chanOAMstatus64=chanOAMstatus64, ausmPortStateGrpTable=ausmPortStateGrpTable, xmtAcpCellsMissed=xmtAcpCellsMissed, ausmPortCntPortGrpTable=ausmPortCntPortGrpTable, bertDDSSeekResultsTableEntry=bertDDSSeekResultsTableEntry, bbIfMaxCellRatePct=bbIfMaxCellRatePct, vrtlIntrCurrConfigPaths=vrtlIntrCurrConfigPaths, vismAdaptiveGainControl=vismAdaptiveGainControl, bbIfCntSigILMIGrp=bbIfCntSigILMIGrp, cesChanState=cesChanState, srmTargetSlotNum=srmTargetSlotNum, endChanNum=endChanNum, bnmCountersClrButton=bnmCountersClrButton, portXmtAisCells=portXmtAisCells, cesChanIdleDetEnable=cesChanIdleDetEnable, ds0CasWinkBreakTime=ds0CasWinkBreakTime, parTrkCnfgTrafficClassTs=parTrkCnfgTrafficClassTs, ds0CasIncomingMgcpPackage=ds0CasIncomingMgcpPackage, bertUserId=bertUserId, vismSvcTrfScalingGrp=vismSvcTrfScalingGrp, bbChanGcra1Action=bbChanGcra1Action, ausmChanState=ausmChanState, rpmChanEncapType=rpmChanEncapType, vismConnAdminStatus=vismConnAdminStatus, frResPartIngrPctBW=frResPartIngrPctBW, bbChanStateNum=bbChanStateNum, bbStateIfNum=bbStateIfNum, chanSecInService=chanSecInService, xmtAbitState=xmtAbitState, vismChanCacEntry=vismChanCacEntry, parConnRemoteEndpt=parConnRemoteEndpt, bearerEndptNum=bearerEndptNum, parTrkCnfgVccConids=parTrkCnfgVccConids, rpmChanRemotePercentUtil=rpmChanRemotePercentUtil, bbIfCntGrp=bbIfCntGrp, portRcvSgmtLpbkCells=portRcvSgmtLpbkCells, portsUsedLine2=portsUsedLine2, vismCarrierLossPolicy=vismCarrierLossPolicy, ausmStdABRType=ausmStdABRType, ds0CasDelayImmedStart=ds0CasDelayImmedStart, trkCACEnable=trkCACEnable, bbChanGcra2Action=bbChanGcra2Action, rpmIfRscPartCtrlrNum=rpmIfRscPartCtrlrNum, cesmPort=cesmPort, vismPortSpeed=vismPortSpeed, rpmPortIpAddress=rpmPortIpAddress, vismSvcTxReleases=vismSvcTxReleases, axisImaGroupNeState=axisImaGroupNeState, chanServiceRate=chanServiceRate, rcvPortFramesTaggedFECN=rcvPortFramesTaggedFECN, xmtFramesOversizedSDUs=xmtFramesOversizedSDUs, parTrkLoadRcvUsedTs=parTrkLoadRcvUsedTs, ausmEndPointMapGrp=ausmEndPointMapGrp, portRcvCrcErrOAMCells=portRcvCrcErrOAMCells, vismCodecCnfEntry=vismCodecCnfEntry, chanEgrPercentUtil=chanEgrPercentUtil, parClockSourceId=parClockSourceId, bearerRcvdPkts=bearerRcvdPkts, serialLineRate=serialLineRate, vismAal2CidEcanEnable=vismAal2CidEcanEnable, ausmPortOversubscribed=ausmPortOversubscribed, parConnection=parConnection, portsUsedLine7=portsUsedLine7, ingrUpcMFS=ingrUpcMFS, vismChanCacMaster=vismChanCacMaster, egressQDepth=egressQDepth, portSvcDlciHigh=portSvcDlciHigh, ascLmiStatusAckRx=ascLmiStatusAckRx, portServiceQueueNo=portServiceQueueNo, axisImaGroupLeastDelayLink=axisImaGroupLeastDelayLink, bnmPortCounterIndex=bnmPortCounterIndex, srmeRowStatus=srmeRowStatus, portEgrSvcBandW=portEgrSvcBandW, ds0CasOffHookMinMakeTime=ds0CasOffHookMinMakeTime, ausmPortSvcVpidHigh=ausmPortSvcVpidHigh, bertTestMediumMask=bertTestMediumMask, ausmPortCntSig=ausmPortCntSig, cesHdrErrors=cesHdrErrors, bbIfSpeed=bbIfSpeed, chanEgrXmtState=chanEgrXmtState, vrtlIntrMaxQueMem=vrtlIntrMaxQueMem, cesGenCells=cesGenCells, bbIfGetResponseReceived=bbIfGetResponseReceived, vismERL=vismERL, portsUsedLine3=portsUsedLine3, vismSvcTxSetups=vismSvcTxSetups, vrtlIntrPortNum=vrtlIntrPortNum, frPortCnfResPartGrpEntry=frPortCnfResPartGrpEntry, bbChanVpIdNextAvailable=bbChanVpIdNextAvailable, bbIfGetRequestTransmitted=bbIfGetRequestTransmitted, frstdABRFRTT=frstdABRFRTT, vismVoIpLapdTrunkPVC=vismVoIpLapdTrunkPVC, rpmChanPCR=rpmChanPCR, parConfigParms=parConfigParms, cesChanIdleCodeIntgnPeriod=cesChanIdleCodeIntgnPeriod, bbIfRscPrtIngrPctBandwidth=bbIfRscPrtIngrPctBandwidth, xmtFrames=xmtFrames, connSlotNum=connSlotNum, rcvFramesDiscUPC=rcvFramesDiscUPC, ausmPortCnfSigILMIGrp=ausmPortCnfSigILMIGrp, ingrLastUnknVpiVci=ingrLastUnknVpiVci, ds0InsertLocalCas=ds0InsertLocalCas, bbChanStateGrpTable=bbChanStateGrpTable, xmtStatusInquiry=xmtStatusInquiry, frConnTemplateId=frConnTemplateId, vismVoIpGrp=vismVoIpGrp, vismDaughterCardSerialNum=vismDaughterCardSerialNum, axisImaGroupRxAvailCellRate=axisImaGroupRxAvailCellRate, xmtFramesDiscReassmFail=xmtFramesDiscReassmFail, rpmChanGrpTable=rpmChanGrpTable, parTrkLocalPortNumber=parTrkLocalPortNumber, bnmIngressInvalidCellHdr=bnmIngressInvalidCellHdr)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", vismCodecTemplateCnfGrpTable=vismCodecTemplateCnfGrpTable, rpmChanMCR=rpmChanMCR, vismChanCacTable=vismChanCacTable, parIfLoAddrMax=parIfLoAddrMax, axisImaGroupNeNumFailures=axisImaGroupNeNumFailures, x21Severity=x21Severity, pxmAtmVcCrossConnectRowStatus=pxmAtmVcCrossConnectRowStatus, parIfTxBw=parIfTxBw, cesPortRowStatus=cesPortRowStatus, vismChanStatusBitMap=vismChanStatusBitMap, bbChanLocalNsapAddr=bbChanLocalNsapAddr, totalIngrQfulldiscardCells=totalIngrQfulldiscardCells, cesCellLossStatus=cesCellLossStatus, vismVoIpDtmfRelay=vismVoIpDtmfRelay, chanOAMstatus96=chanOAMstatus96, parSysParmsMaxDDelay=parSysParmsMaxDDelay, x21portSvcLcnHigh=x21portSvcLcnHigh, ascLmiMaxRetryN394=ascLmiMaxRetryN394, bbIfCnfPortGrp=bbIfCnfPortGrp, parTrkLineLoad=parTrkLineLoad, parNetParmBlindMaxTimeout=parNetParmBlindMaxTimeout, invalidPDUReceived=invalidPDUReceived, bertCardT1E1Type=bertCardT1E1Type, frLocalVpi=frLocalVpi, frConnAdminStatus=frConnAdminStatus, ausmChanTestStateCPESide=ausmChanTestStateCPESide, cesPortNumOfSCIPerDS0=cesPortNumOfSCIPerDS0, bnmPortCounterNumOfValidEntries=bnmPortCounterNumOfValidEntries, ausmConnTemplateId=ausmConnTemplateId, bnmPortXmtCells=bnmPortXmtCells, ascLmiTimeoutFailure=ascLmiTimeoutFailure, vismCasXgcpFileName=vismCasXgcpFileName, delShelfNum=delShelfNum, rpmChanRemoteMCR=rpmChanRemoteMCR, parTrkLoadRcvUsedNts=parTrkLoadRcvUsedNts, portNextAvailable=portNextAvailable, bnmPortRcvCellRate=bnmPortRcvCellRate, parSysParmsMaxVDelay=parSysParmsMaxVDelay, channelizedAllowed=channelizedAllowed, bbRscPartCtrlrNum=bbRscPartCtrlrNum, parCmParmsDnUpTimer=parCmParmsDnUpTimer, bbChanMaster=bbChanMaster, chanIngrXmtAAL5Frames=chanIngrXmtAAL5Frames, ds0CasFlashMaxMakeTime=ds0CasFlashMaxMakeTime, chanIngrRcvState=chanIngrRcvState, getResponseReceived=getResponseReceived, frPortCntSigCLLMGrpTable=frPortCntSigCLLMGrpTable, vismChanAal2OamLpbLostCells=vismChanAal2OamLpbLostCells, vismCodecTemplateMaxChanCount=vismCodecTemplateMaxChanCount, cesPortsUsedLine4=cesPortsUsedLine4, parTrkLoadRcvUsedBdataA=parTrkLoadRcvUsedBdataA, x21portIngrSvcBandW=x21portIngrSvcBandW, extClkSrcImpedance=extClkSrcImpedance, bbChanUpcSCR=bbChanUpcSCR, asmAlarmNum=asmAlarmNum, parTrkRemotePortNumber=parTrkRemotePortNumber, cesVpcFlag=cesVpcFlag, vismSvcTxReleaseCompls=vismSvcTxReleaseCompls, dsx1LineNum=dsx1LineNum, bbIfKeepAlivePollingEnable=bbIfKeepAlivePollingEnable, x21portSvcShareLcn=x21portSvcShareLcn, vismVoIpVADTimer=vismVoIpVADTimer, parTrkCnfgPassSync=parTrkCnfgPassSync, parCmParmsDnUpPerPass=parCmParmsDnUpPerPass, bearerAal2ExtAISCnts=bearerAal2ExtAISCnts, axisImaGroupUnavailSecs=axisImaGroupUnavailSecs, parTrkRemoteNodeIP=parTrkRemoteNodeIP, portHeaderLen=portHeaderLen, bbCntIfNum=bbCntIfNum, x21portAdmin=x21portAdmin, ds0CasMinDelayDialTime=ds0CasMinDelayDialTime, parClockSource=parClockSource, vismAal2CidType3Redundancy=vismAal2CidType3Redundancy, axisImaGroupFeState=axisImaGroupFeState, frPortCnfX21PortGrpTable=frPortCnfX21PortGrpTable, frstdABRRIF=frstdABRRIF, foreSightEnable=foreSightEnable, axisAtmNetPrefixPort=axisAtmNetPrefixPort, vismVpcFlag=vismVpcFlag, vismAal2EndptNum=vismAal2EndptNum, vismChanNum=vismChanNum, ascLmiInvalidIeRx=ascLmiInvalidIeRx, pxmAtmVcCrossConnectIndex=pxmAtmVcCrossConnectIndex, endVpi=endVpi, aumAddressTranslation=aumAddressTranslation, imatmDsx3PortXmtCells=imatmDsx3PortXmtCells, ausmPortDelSvcsGrpTable=ausmPortDelSvcsGrpTable, vismResPartRowStatus=vismResPartRowStatus, frPortStateGrpTable=frPortStateGrpTable, vismHdlcXmtFrames=vismHdlcXmtFrames, vismTftpServerDn=vismTftpServerDn, addrPrefix=addrPrefix, vismAal2CidEntry=vismAal2CidEntry, pxmCurrentClock=pxmCurrentClock, parCmParmsRrGroupInc=parCmParmsRrGroupInc, ausmPortStateGrpEntry=ausmPortStateGrpEntry, vismCasGrp=vismCasGrp, bbIfCnfRscPartGrpEntry=bbIfCnfRscPartGrpEntry, portEgresECNThresh=portEgresECNThresh, portAdmin=portAdmin, vismVoIpNTECapabilityNegotiate=vismVoIpNTECapabilityNegotiate, parCmParmsUseDelay=parCmParmsUseDelay, parConnRemoteSlot=parConnRemoteSlot, cesPortsUsedLine3=cesPortsUsedLine3, bbChanUpcCDVT=bbChanUpcCDVT, bbChanXmtClp1Cells=bbChanXmtClp1Cells, parOnOffCommFailTest=parOnOffCommFailTest, cesmChanExtTrgIdleSupp=cesmChanExtTrgIdleSupp, xmtPortFrames=xmtPortFrames, vismCnfChanNum=vismCnfChanNum, imaPortIngrPercentUtil=imaPortIngrPercentUtil, parConnRemoteNodeName=parConnRemoteNodeName, bearerConnEntry=bearerConnEntry, cesmEndPtMapGrpTable=cesmEndPtMapGrpTable, parIfLogicalInterface=parIfLogicalInterface, ausmInterfaceConfTable=ausmInterfaceConfTable, vismDaughterCardHWRev=vismDaughterCardHWRev, bearerLatency=bearerLatency, vismAal2Type3Redundancy=vismAal2Type3Redundancy, ascLmiCntLineNum=ascLmiCntLineNum, pxmPrimaryMuxClockSource=pxmPrimaryMuxClockSource, ds0CasDirectionality=ds0CasDirectionality, vismControlTos=vismControlTos, portEnable=portEnable, rpmChanOAMloopback=rpmChanOAMloopback, imatmDsx3CardSpecConfigGrpTable=imatmDsx3CardSpecConfigGrpTable, vismEcanCnfIdleDirection=vismEcanCnfIdleDirection, ds0SeizedCode=ds0SeizedCode, bearerLcn=bearerLcn, bbChanUpcPCR=bbChanUpcPCR, ds0CasOnHookMinMakeTime=ds0CasOnHookMinMakeTime, ds0TransmitCodesEnable=ds0TransmitCodesEnable, ausmPortCnfPortImaGrp=ausmPortCnfPortImaGrp, ascLmiUpdateStatusTx=ascLmiUpdateStatusTx, frRestrictTrunkType=frRestrictTrunkType, parNetParmCfTestInterval=parNetParmCfTestInterval, qirTimeout=qirTimeout, srmeCnfGrpTable=srmeCnfGrpTable, srmT1RowStatus=srmT1RowStatus, ingrUpcPCR0=ingrUpcPCR0, ingrRcvCellRate=ingrRcvCellRate, vismVADTolerance=vismVADTolerance, x21AlarmClrButton=x21AlarmClrButton, ingrUpcFGCRAEnable=ingrUpcFGCRAEnable, parNetworkClock=parNetworkClock, bbIfAdmin=bbIfAdmin, vismCasVariantName=vismCasVariantName, parNetParmMsgTimeout=parNetParmMsgTimeout, portSvcStatus=portSvcStatus, dsx0VismChanMapEntry=dsx0VismChanMapEntry, frConnRemoteMCR=frConnRemoteMCR, delSlotNum=delSlotNum, bbRemoteConnPCR=bbRemoteConnPCR, ingrUpcCCDV=ingrUpcCCDV, x21LineLoopbackCommand=x21LineLoopbackCommand, srmT3LineNum=srmT3LineNum, egrQIndex=egrQIndex, portFRF1Dot2Support=portFRF1Dot2Support, rpmPortInterface=rpmPortInterface, vismSvcConnAckExpiries=vismSvcConnAckExpiries, cesmChanCnfGrpTable=cesmChanCnfGrpTable, bbChanMaxCost=bbChanMaxCost, queConfigVrtlIntrNum=queConfigVrtlIntrNum, chanIngrRcvUtilization=chanIngrRcvUtilization, connNumOfValidEntries=connNumOfValidEntries, chanCLPtoDEmap=chanCLPtoDEmap, parTrkRemoteSlotNumber=parTrkRemoteSlotNumber, bbIfTotalCells=bbIfTotalCells, parSnRevision=parSnRevision, cesPortDs0ConfigBitMap=cesPortDs0ConfigBitMap, egrQEfciThresh=egrQEfciThresh, aumAddressTranslationTable=aumAddressTranslationTable, cesRemoteVpi=cesRemoteVpi, parCmParmsRrtCycleInterval=parCmParmsRrtCycleInterval, imatmVpTrkGrp=imatmVpTrkGrp, noSuchNameError=noSuchNameError, atmAddressGroup=atmAddressGroup, x21LineNum=x21LineNum, nextBbIfNumAvailable=nextBbIfNumAvailable, parOnOffCmUpdts=parOnOffCmUpdts, ds0CasWinkMaxMakeTime=ds0CasWinkMaxMakeTime, ds0OutputAttenuation=ds0OutputAttenuation, chanIngrPeakQDepth=chanIngrPeakQDepth, bbChanRestrictTrkType=bbChanRestrictTrkType, portEgrPercentUtil=portEgrPercentUtil, vismCasDigitMethod=vismCasDigitMethod, parNetParmNetwLetWait=parNetParmNetwLetWait, bbIfLineNum=bbIfLineNum, vismSvcReleasExpiries=vismSvcReleasExpiries, endVci=endVci, vismCasXgcpVariantEntry=vismCasXgcpVariantEntry, vismCntClrButton=vismCntClrButton, vismCodecIanaType=vismCodecIanaType, parClockType=parClockType, ausmStdABRRDF=ausmStdABRRDF, ausmCntChanNum=ausmCntChanNum, frstdABRNrm=frstdABRNrm, vrtlIntrQbinCounterTable=vrtlIntrQbinCounterTable, ausmChanPortNum=ausmChanPortNum, frConnSCR=frConnSCR, parOnOff=parOnOff, bbIfRowStatus=bbIfRowStatus, frVpcFlag=frVpcFlag, customerId=customerId, vismCaleaEnable=vismCaleaEnable, ausmPortSvcInUse=ausmPortSvcInUse, frChanStateGrpEntry=frChanStateGrpEntry, serialPortNum=serialPortNum, vismSvcTxRestarts=vismSvcTxRestarts, axisImaGroupTestPattern=axisImaGroupTestPattern, ingrRcvClpSetCells=ingrRcvClpSetCells, frChanCntGrp=frChanCntGrp, xmtBytesCLLM=xmtBytesCLLM, bbChanRcvClp0Cells=bbChanRcvClp0Cells, queCounterVrtlIntrQbinNum=queCounterVrtlIntrQbinNum, xmtBytesDuringLMIAlarm=xmtBytesDuringLMIAlarm, cesEndPortNum=cesEndPortNum, vismEcanCnfIdlePattern=vismEcanCnfIdlePattern, cesmChanCntGrpTable=cesmChanCntGrpTable, rcvAcpCells=rcvAcpCells, atmAddressTable=atmAddressTable, bbChanDscdClp0Cells=bbChanDscdClp0Cells, ausmChanCnfGrp=ausmChanCnfGrp, cesPortLineNum=cesPortLineNum, parIfHiAddrMax=parIfHiAddrMax, rcvPortFrames=rcvPortFrames, parConnLocalVci=parConnLocalVci, ausmMaxCost=ausmMaxCost, nextRangeNumAvail=nextRangeNumAvail, cesMastership=cesMastership, vismChanCacRejectedCons=vismChanCacRejectedCons, vrtlIntrQbinConfigEntry=vrtlIntrQbinConfigEntry, ausmConnFGCRAEnable=ausmConnFGCRAEnable, foresightPIR=foresightPIR, cesChanStatusBitMap=cesChanStatusBitMap, parSysParmsMaxCdpDDelay=parSysParmsMaxCdpDDelay, getResponseTransmitted=getResponseTransmitted, parSwFuncNodeType=parSwFuncNodeType, bbChanMaxCellMemThreshold=bbChanMaxCellMemThreshold, rpmChanAbrRIF=rpmChanAbrRIF, primaryClockSource=primaryClockSource, rcvFramesUnknownDLCI=rcvFramesUnknownDLCI, chanIngrPercentUtil=chanIngrPercentUtil, bertLoopbackOperation=bertLoopbackOperation, egressQDEThresh=egressQDEThresh, frstdABRPCR=frstdABRPCR, parTrkLoadVpcConidsUsed=parTrkLoadVpcConidsUsed, cesChanOnhookCode=cesChanOnhookCode, x21LineNumofValidEntries=x21LineNumofValidEntries, xmtFramesTaggedBECN=xmtFramesTaggedBECN, chanOAMstatus128=chanOAMstatus128, parConnLocalVcIndx=parConnLocalVcIndx, bbChanCntGrpTable=bbChanCntGrpTable, frConnForeSightEnable=frConnForeSightEnable)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", vismPortCacSvcAddFailures=vismPortCacSvcAddFailures, cesChanRowStatus=cesChanRowStatus, imaStatePortNum=imaStatePortNum, bbIfGetNextRequestReceived=bbIfGetNextRequestReceived, parTrkCnfgTrafficClassFr=parTrkCnfgTrafficClassFr, x21AlmCnfLineNum=x21AlmCnfLineNum, bertSupportedTestsTableIndex=bertSupportedTestsTableIndex, commonConnParm1=commonConnParm1, parSysParmsMaxIpcdpDDelay=parSysParmsMaxIpcdpDDelay, srm3T3CnfGrp=srm3T3CnfGrp, chanEgrRcvCellRate=chanEgrRcvCellRate, ds0CasOutgoingMgcpPackage=ds0CasOutgoingMgcpPackage, parSysParmsFpdDeJitter=parSysParmsFpdDeJitter, ausmIngrDiscardOption=ausmIngrDiscardOption, bertPort=bertPort, cardLcnPartitionType=cardLcnPartitionType, ausmChanVpIdNextAvailable=ausmChanVpIdNextAvailable, vismVcCacPvcFailures=vismVcCacPvcFailures, parCmParmsUseCache=parCmParmsUseCache, vismXgcpBearerConnectionType=vismXgcpBearerConnectionType, vismChanAal5InvLenPdus=vismChanAal5InvLenPdus, ascLmiVccVpi=ascLmiVccVpi, imaPortEgrPercentUtil=imaPortEgrPercentUtil, vismChanAal5Crc32ErrorPdus=vismChanAal5Crc32ErrorPdus, cesPortsUsedLine1=cesPortsUsedLine1, cesmChanCntGrp=cesmChanCntGrp, bbChanXmtClp0Cells=bbChanXmtClp0Cells, clockSwitchState=clockSwitchState, pxmExtClock2Present=pxmExtClock2Present, bbIfCnfSigILMIGrpTable=bbIfCnfSigILMIGrpTable, addrRegEnable=addrRegEnable, bbIfRscPrtMaxChans=bbIfRscPrtMaxChans, parClockCurSource=parClockCurSource, vismChanStateGrpEntry=vismChanStateGrpEntry, vismCasXgcpMaxReXmitTime=vismCasXgcpMaxReXmitTime, parTrkCnfgTrafficClassFst=parTrkCnfgTrafficClassFst, x21portEgrSvcBandW=x21portEgrSvcBandW, xmtFramesDiscPhyLayerFail=xmtFramesDiscPhyLayerFail, serialLineRateVariation=serialLineRateVariation, portOversubscribed=portOversubscribed, cesmResPartLcnLow=cesmResPartLcnLow, pollingIntervalT491=pollingIntervalT491, vismSvcTxResyncEnds=vismSvcTxResyncEnds, vismChanCntGrpEntry=vismChanCntGrpEntry, ausmPortIfType=ausmPortIfType, vrtlIntrQbinEfciThreshold=vrtlIntrQbinEfciThreshold, bbChanEfciThreshold=bbChanEfciThreshold, portEgresQDepth=portEgresQDepth, vismResPartIngrPctBW=vismResPartIngrPctBW, vismSvcTxBulkResyncs=vismSvcTxBulkResyncs, vrtlIntrQbinClpLoThreshold=vrtlIntrQbinClpLoThreshold, vismConnPCREgress=vismConnPCREgress, ds0CasMinStartDialTime=ds0CasMinStartDialTime, ausmPortCnfPortImaGrpTable=ausmPortCnfPortImaGrpTable, vismDspHealth=vismDspHealth, ausmPortImaGrpRestartTable=ausmPortImaGrpRestartTable, rpmIfRscPrtVpiLow=rpmIfRscPrtVpiLow, commonChanEgrRcvState=commonChanEgrRcvState, dsx3CardSpecCnfgGrp=dsx3CardSpecCnfgGrp, vismPortType=vismPortType, portFlagsBetweenFrames=portFlagsBetweenFrames, chanTestType=chanTestType, cesRcvATMState=cesRcvATMState, parTrkCnfgTrafficClassVoice=parTrkCnfgTrafficClassVoice, ausmPortDelSvcsGrpEntry=ausmPortDelSvcsGrpEntry, frMastership=frMastership, parSysParmsMaxIpcdpVDelay=parSysParmsMaxIpcdpVDelay, parTrkCnfgDerouteDelay=parTrkCnfgDerouteDelay, vismJitterInitialDelay=vismJitterInitialDelay, bnmPortRcvCells=bnmPortRcvCells, parIfRxBw=parIfRxBw, ausmStdABRNrm=ausmStdABRNrm, protocolRevNo=protocolRevNo, ausmStdABRTrm=ausmStdABRTrm, bbIfCnfPortGrpEntry=bbIfCnfPortGrpEntry, x21InvertClock=x21InvertClock, rpmPortTable=rpmPortTable, ascLmiInvalidTransaction=ascLmiInvalidTransaction, switchCoreCard=switchCoreCard, frChanCnfIgnoreIncomingDE=frChanCnfIgnoreIncomingDE, vismHdlcRcvFrames=vismHdlcRcvFrames, srm3T3CnfGrpEntry=srm3T3CnfGrpEntry, cesRoutingPriority=cesRoutingPriority, vismChanFallbackLcn=vismChanFallbackLcn, commonChanNum=commonChanNum, imatmVpTrkClrGrpEntry=imatmVpTrkClrGrpEntry, xmtStatus=xmtStatus, bbIfRcvClp1Cells=bbIfRcvClp1Cells, frstdABRRDF=frstdABRRDF, cesBufUnderflows=cesBufUnderflows, dsx0VismCnfTable=dsx0VismCnfTable, ausmPortCntPortImaGrp=ausmPortCntPortImaGrp, diagResult=diagResult, ausmChanLocalVpId=ausmChanLocalVpId, parOnOffRenumRec=parOnOffRenumRec, chanServType=chanServType, vismSvcRxSetups=vismSvcRxSetups, cardResPartGrpTable=cardResPartGrpTable, ausmLocalVpi=ausmLocalVpi, parTrkRemoteTrunkId=parTrkRemoteTrunkId, parConnLocalVpi=parConnLocalVpi, vismHdlcRcvCrcErrors=vismHdlcRcvCrcErrors, cesPortsUsedLine2=cesPortsUsedLine2, x21portRowStatus=x21portRowStatus, bbIfMinEnquiryIntervalT493=bbIfMinEnquiryIntervalT493, rpmIfCnfResPart=rpmIfCnfResPart, ascLineCnfSigLmiGrp=ascLineCnfSigLmiGrp, atmLineCntEntry=atmLineCntEntry, cesMapVpi=cesMapVpi, trapReceived=trapReceived, commonPortAlarmState=commonPortAlarmState, bbChanClpHiThreshold=bbChanClpHiThreshold, vismPortCnfGrp=vismPortCnfGrp, parSysParmsMaxIpcdpCDelay=parSysParmsMaxIpcdpCDelay, vismLocalVci=vismLocalVci, bbChanCnfGrpEntry=bbChanCnfGrpEntry, pxmAtmVcCrossConnectHighIfIndex=pxmAtmVcCrossConnectHighIfIndex, vismSvcRxRestarts=vismSvcRxRestarts, ascCntSigLmiGrpEntry=ascCntSigLmiGrpEntry, vismChanScrIngress=vismChanScrIngress, ascLmiEnabled=ascLmiEnabled, axisImaGroupBetaValue=axisImaGroupBetaValue, ds0SidPacket=ds0SidPacket, sigCntPortNum=sigCntPortNum, frChanStatsEnable=frChanStatsEnable, x21AlmCnfGrp=x21AlmCnfGrp, vismSvcRxConnAcks=vismSvcRxConnAcks, pxmClkErrReason=pxmClkErrReason, ausmPortStateImaGrpTable=ausmPortStateImaGrpTable, vismChanStateGrp=vismChanStateGrp, xmtFramesFECN=xmtFramesFECN, ausmChanStateGrpEntry=ausmChanStateGrpEntry, ingressQECNThresh=ingressQECNThresh, atmNetPrefixGroup=atmNetPrefixGroup, bbChanUpcMCR=bbChanUpcMCR, cesChanIdleSignalCode=cesChanIdleSignalCode, remoteImaId=remoteImaId, x21portEqueueServiceRatio=x21portEqueueServiceRatio, parTrkLoadXmtUsedBdataB=parTrkLoadXmtUsedBdataB, vismHdlcChanNum=vismHdlcChanNum, portOverSubEnable=portOverSubEnable, bbIfCntGrpEntry=bbIfCntGrpEntry, vismAal2CidVad=vismAal2CidVad, deTaggingEnable=deTaggingEnable, signallingVci=signallingVci, bnmIngressInvalidCellCount=bnmIngressInvalidCellCount, ascLmiPollingInterval=ascLmiPollingInterval, cesRestrictTrunkType=cesRestrictTrunkType, cesChanSignalingStatus=cesChanSignalingStatus, ascLmiCnfLineNum=ascLmiCnfLineNum, cesBufMaxSize=cesBufMaxSize, serialPortbps=serialPortbps, dLCI=dLCI, imaCntClrButton=imaCntClrButton, chanState=chanState, imatmTrkNum=imatmTrkNum, vismChanCnfGrpTable=vismChanCnfGrpTable, bbIfStateGrpTable=bbIfStateGrpTable, frPortsUsedLineIndex=frPortsUsedLineIndex, vismFeatureBitMap=vismFeatureBitMap, vismChanAal2InvOsfCells=vismChanAal2InvOsfCells, vismSvcTxResyncEndAcks=vismSvcTxResyncEndAcks, cardResPartNumOfLcnAvail=cardResPartNumOfLcnAvail, atmLineTotalRcvCells=atmLineTotalRcvCells, pxmPrimaryInbandClockSourceLineNumber=pxmPrimaryInbandClockSourceLineNumber, ausmPortCntPortGrpEntry=ausmPortCntPortGrpEntry, imatmClrVpTrkButton=imatmClrVpTrkButton, ausmPortCnfPortGrpEntry=ausmPortCnfPortGrpEntry, vrtlIntrMinCellRate=vrtlIntrMinCellRate, rpmIfRscPrtMaxChans=rpmIfRscPrtMaxChans, portsUsedLine5=portsUsedLine5, vrtlIntrQbinRxdCellCnt=vrtlIntrQbinRxdCellCnt, minEnquiryIntervalT493=minEnquiryIntervalT493, rcvFramesDiscCRCError=rcvFramesDiscCRCError, vismSvcRestartExpiries=vismSvcRestartExpiries, vismChanAal5ReassemTimerExpiryPdus=vismChanAal5ReassemTimerExpiryPdus, portSvcLcnHigh=portSvcLcnHigh, pxmAtmVcCrossConnectAdminStatus=pxmAtmVcCrossConnectAdminStatus, bbChanCnfNum=bbChanCnfNum, ausmLineNum=ausmLineNum, frstdABRTBE=frstdABRTBE, apsCardAttributes=apsCardAttributes, chanTestState=chanTestState, imaGrpRcvHecErrSecCount=imaGrpRcvHecErrSecCount, parTrkLoadVccConidsUsed=parTrkLoadVccConidsUsed, vismChanRowStatus=vismChanRowStatus, vismBearerIpAddress=vismBearerIpAddress, ascLmiStatusTx=ascLmiStatusTx, portClrButton=portClrButton, vismAal2CidProfileType=vismAal2CidProfileType, axisAtmAddressPort=axisAtmAddressPort, vismSvcConnExpiries=vismSvcConnExpiries, vismHdlcRxAbortFrames=vismHdlcRxAbortFrames, vrtlIntrRxdRmCellCnt=vrtlIntrRxdRmCellCnt, vismAal2CidFillTimer=vismAal2CidFillTimer, vismChanAal2InvParCells=vismChanAal2InvParCells, ingrUpcEnable=ingrUpcEnable, lmiSigPortNum=lmiSigPortNum, xmtPortBytes=xmtPortBytes, ascLmiStatusEnqTx=ascLmiStatusEnqTx, imaGrpRcvHecErrCount=imaGrpRcvHecErrCount, ausmRemoteNSAP=ausmRemoteNSAP, commonPortAssocLines=commonPortAssocLines, vismXgcpBearerVCType=vismXgcpBearerVCType, bbChanDscdClpZeroCellsToPort=bbChanDscdClpZeroCellsToPort, parTrkCnfgRoutingCost=parTrkCnfgRoutingCost, cesRemoteNSAP=cesRemoteNSAP, frPortsUsedLineGrpTable=frPortsUsedLineGrpTable, cesPointerReframes=cesPointerReframes, parCmParmsMaxRrtCycles=parCmParmsMaxRrtCycles, ausmConnRemotePercentUtil=ausmConnRemotePercentUtil, ausmPortEgrPercentUtil=ausmPortEgrPercentUtil, bbIfEgrPctBandwidth=bbIfEgrPctBandwidth, parInterfaces=parInterfaces, vrtlIntrRxdClpTaggedDiscardedCellCnt=vrtlIntrRxdClpTaggedDiscardedCellCnt, ausmConnServiceType=ausmConnServiceType, bbChanRemoteVpi=bbChanRemoteVpi, parNetParmHighTxRate=parNetParmHighTxRate, parSysParmsMaxCdpHsdDelay=parSysParmsMaxCdpHsdDelay, rpmChanLocalNsap=rpmChanLocalNsap, vismChanState=vismChanState, rpmChanInArpFreq=rpmChanInArpFreq, imaArbitrationWinner=imaArbitrationWinner, vismHdlcChanTable=vismHdlcChanTable, cesCellLossIntegrationPeriod=cesCellLossIntegrationPeriod, endDLCI=endDLCI, frPortCnfSigLMIGrp=frPortCnfSigLMIGrp, rpmIfRscPrtVciHigh=rpmIfRscPrtVciHigh, ausmEndPointMapGrpEntry=ausmEndPointMapGrpEntry, cesmConnForeSightEnable=cesmConnForeSightEnable, chanIngrRcvCellRate=chanIngrRcvCellRate, bbIfCntSigILMIGrpEntry=bbIfCntSigILMIGrpEntry, cesPortsUsedLine8=cesPortsUsedLine8, vismBearerContinuityTimer=vismBearerContinuityTimer, vrtlIntrQbinFrameDiscardThreshold=vrtlIntrQbinFrameDiscardThreshold, ausmEndChanNum=ausmEndChanNum, cesCnfChanNum=cesCnfChanNum, vismChanNumNextAvailable=vismChanNumNextAvailable, bertDDSSeekResultsTable=bertDDSSeekResultsTable, bbChanIngrRcvState=bbChanIngrRcvState, parClockPath=parClockPath, rpmIfRscPartIfNum=rpmIfRscPartIfNum, egrPortAlarmDiscardCells=egrPortAlarmDiscardCells, cesmEndPtMapGrpEntry=cesmEndPtMapGrpEntry, ausmStdABRADTF=ausmStdABRADTF, vismChanCarrierLossPolicy=vismChanCarrierLossPolicy, rcvFramesCLLM=rcvFramesCLLM, vismVCCI=vismVCCI, rpmIfCnfRscPartTable=rpmIfCnfRscPartTable, pxmExtClkSrcImpedance=pxmExtClkSrcImpedance, rcvStatus=rcvStatus, bbConnPCR=bbConnPCR, ds0LocalCasPattern=ds0LocalCasPattern, parNetParmMsgMaxTimeoutSat=parNetParmMsgMaxTimeoutSat)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", commonPortAssocChannels=commonPortAssocChannels, ascChanStateSigLmiGrp=ascChanStateSigLmiGrp, parSysParmsMaxCdpCDelay=parSysParmsMaxCdpCDelay, asmAlarmTable=asmAlarmTable, vismCodecCnfGrp=vismCodecCnfGrp, asn1ParseError=asn1ParseError, egrXmtCells=egrXmtCells, bbIfMaxVpi=bbIfMaxVpi, rpmChanInterface=rpmChanInterface, vismChanApplication=vismChanApplication, vismProfileNegotiationOption=vismProfileNegotiationOption, parTrkRemoteNodeType=parTrkRemoteNodeType, imaAutoRestart=imaAutoRestart, ds0LoopbackCommand=ds0LoopbackCommand, vrtlIntrState=vrtlIntrState, n392ErrorThreshold=n392ErrorThreshold, x21LineAlarmState=x21LineAlarmState, ausmStdABRCnfGrpTable=ausmStdABRCnfGrpTable, vismLocalNSAP=vismLocalNSAP, funiAllowed=funiAllowed, vismVoIpCasTransport=vismVoIpCasTransport, chanVci=chanVci, chanEgrRcvState=chanEgrRcvState, rpmChanVcd=rpmChanVcd, svcAllowed=svcAllowed, vsiControllersAllowed=vsiControllersAllowed, axisImaGroupRunningSecs=axisImaGroupRunningSecs, vismConfigChangeTypeBitMap=vismConfigChangeTypeBitMap, rpmIfRscPrtVciLow=rpmIfRscPrtVciLow, pxmAtmMIBObjects=pxmAtmMIBObjects, frstdABRcnfChanNum=frstdABRcnfChanNum, vismAal2CidCasTransport=vismAal2CidCasTransport, serialPortType=serialPortType, imatmDsx3PortLastMismatchVpiVci=imatmDsx3PortLastMismatchVpiVci, parNetParmTopoMsgSegSz=parNetParmTopoMsgSegSz, ds0IdleCode=ds0IdleCode, bbIfIngrPctBandwidth=bbIfIngrPctBandwidth, countVrtlIntrNum=countVrtlIntrNum, parMnUpdt=parMnUpdt, cardResourcePartition=cardResourcePartition, bbIfEventThresholdN492=bbIfEventThresholdN492, cesChanTestType=cesChanTestType, onlineDiagnostics=onlineDiagnostics, chanLocRmtLpbkState=chanLocRmtLpbkState, parNetParmCfDelay=parNetParmCfDelay, ausmPortSvcVpidLow=ausmPortSvcVpidLow, chanSecUpTime=chanSecUpTime, vismDspGrp=vismDspGrp, imatmDsx3CardSpecConfigEntry=imatmDsx3CardSpecConfigEntry, servicePortNum=servicePortNum, parIfEntry=parIfEntry, xmtCLLMStatusTimer=xmtCLLMStatusTimer, axisAtmAddressStatus=axisAtmAddressStatus, xmtFramesDiscCRCError=xmtFramesDiscCRCError, ausmPortCnfPortGrp=ausmPortCnfPortGrp, cesCntChanNum=cesCntChanNum, cesLocalNSAP=cesLocalNSAP, parTrkEntry=parTrkEntry, atmAddressEntry=atmAddressEntry, frPortCnfResPartGrpTable=frPortCnfResPartGrpTable, vismVoIpDPvcRecoverCnt=vismVoIpDPvcRecoverCnt, xmtPortBytesDuringLMIAlarm=xmtPortBytesDuringLMIAlarm, vismChanCntGrpTable=vismChanCntGrpTable, axisImaGroupMinNumTxLinks=axisImaGroupMinNumTxLinks, chanVpi=chanVpi, bertErrorInjectCount=bertErrorInjectCount, bbChanRcvCellsSent=bbChanRcvCellsSent, vismSystemGrp=vismSystemGrp, vismVoIpDPvcOamCellGap=vismVoIpDPvcOamCellGap, vrtlIntrRxdClpTaggedCellCnt=vrtlIntrRxdClpTaggedCellCnt, bnmCellbusGrantCount=bnmCellbusGrantCount, frPortServiceQueGrpTable=frPortServiceQueGrpTable, cesChanPortNum=cesChanPortNum, bertModeMask=bertModeMask, vismCntChanNum=vismCntChanNum, virtualInterfaceQbinCnf=virtualInterfaceQbinCnf, atmLineCnfNum=atmLineCnfNum, ausmStdABRCnfGrpEntry=ausmStdABRCnfGrpEntry, imaPortState=imaPortState, cesmConnAdminStatus=cesmConnAdminStatus, frResPartCtrlrNum=frResPartCtrlrNum, parCmParmsMinRrGroupSize=parCmParmsMinRrGroupSize, egressQECNThresh=egressQECNThresh, rcvBytesDiscard=rcvBytesDiscard, vismChanCntGrp=vismChanCntGrp, cllmCnfPortNum=cllmCnfPortNum, vismCasVariantTable=vismCasVariantTable, chanPortNum=chanPortNum, bbChanIngrPercentUtil=bbChanIngrPercentUtil, getRequestReceived=getRequestReceived, srmeVtFramingType=srmeVtFramingType, vrtlIntrQbinMaxThreshold=vrtlIntrQbinMaxThreshold, chanFrConnType=chanFrConnType, vismVcCacPvcUpspeedFailures=vismVcCacPvcUpspeedFailures, parTrkLoadEntry=parTrkLoadEntry, frLocalVci=frLocalVci, frPortStateGrp=frPortStateGrp, bbIfRscPrtVpidHigh=bbIfRscPrtVpidHigh, vismHdlcMaxFrameSize=vismHdlcMaxFrameSize, x21ConnectorType=x21ConnectorType, parTrkLoadXmtUsedNts=parTrkLoadXmtUsedNts, RpmNsapAddress=RpmNsapAddress, rtdMeasurementTime=rtdMeasurementTime, parConnRstrTyp=parConnRstrTyp, imaPortSpeed=imaPortSpeed, ausmPortEgrSvcBandW=ausmPortEgrSvcBandW, bbIfSignallingVpi=bbIfSignallingVpi, rcvBytesTaggedDE=rcvBytesTaggedDE, egrQosFeature=egrQosFeature, vismSvcAal2CidGrp=vismSvcAal2CidGrp, bnmEgressXmtCellCountDuringAlarm=bnmEgressXmtCellCountDuringAlarm, cesRemoteVci=cesRemoteVci, chanOAMstatus160=chanOAMstatus160, bbChanIfNum=bbChanIfNum, ausmPortCnfSig=ausmPortCnfSig, parTrkCnfgAdminStatus=parTrkCnfgAdminStatus, parIfType=parIfType, ausmPortStateImaGrpEntry=ausmPortStateImaGrpEntry, x21portType=x21portType, vismInteropGrp=vismInteropGrp, ingrRcvCells=ingrRcvCells, ingrUpcCIR=ingrUpcCIR, frConnRemotePCR=frConnRemotePCR, rcvFramesDE=rcvFramesDE, getNextRequestReceived=getNextRequestReceived, ascLmiUnknownPduRx=ascLmiUnknownPduRx, egressQSelect=egressQSelect, bbIfEgrPercentUtil=bbIfEgrPercentUtil, bnmLineInterfaceFormat=bnmLineInterfaceFormat, xmtBytesDiscXceedQDepth=xmtBytesDiscXceedQDepth, chanIngrClpSetDiscardCells=chanIngrClpSetDiscardCells, bbIfRscPrtVpiHigh=bbIfRscPrtVpiHigh, imatmdsx3PortIndex=imatmdsx3PortIndex, aumClockConfig=aumClockConfig, bbIfCntClrButton=bbIfCntClrButton, sigCntBbIfNum=sigCntBbIfNum, ausmStdABRRIF=ausmStdABRRIF, bbChanRcvClp1Cells=bbChanRcvClp1Cells, vrtlIntrQbinTxdCellCnt=vrtlIntrQbinTxdCellCnt, chanRowStatus=chanRowStatus, portNum=portNum, parTrkRemoteNodeId=parTrkRemoteNodeId, parTrkLoadXmtUsedAbr=parTrkLoadXmtUsedAbr, ausmStdABRTBE=ausmStdABRTBE, rpmChanVirtualTemplate=rpmChanVirtualTemplate, ausmPortCntSigILMIGrpEntry=ausmPortCntSigILMIGrpEntry, vrtlIntrXmtdClpUntaggedCellCnt=vrtlIntrXmtdClpUntaggedCellCnt, parTrkLoadRcvUsedCbr=parTrkLoadRcvUsedCbr, NetPrefix=NetPrefix, vismTrapStrIndex1=vismTrapStrIndex1, bbChanUpcSCRPolicing=bbChanUpcSCRPolicing, serialInterfaceEntry=serialInterfaceEntry, pxmAtmVcCrossConnectH2LOperStatus=pxmAtmVcCrossConnectH2LOperStatus, txFifoFullCnt=txFifoFullCnt, xmtFramesDE=xmtFramesDE, xmtBufNotAvailable=xmtBufNotAvailable, frPortCntSigLMIGrpEntry=frPortCntSigLMIGrpEntry, vismFarEndGWIDAddress=vismFarEndGWIDAddress, parTrkCnfgCcRestrict=parTrkCnfgCcRestrict, parTrkLoadRcvUsedVbr=parTrkLoadRcvUsedVbr, ausmPortSvcLcnLow=ausmPortSvcLcnLow, frConnFGCRAEnable=frConnFGCRAEnable, vismCardCacFailuresGrp=vismCardCacFailuresGrp, parMnUpdtBatchSend=parMnUpdtBatchSend, frResPartNumOfLcnAvail=frResPartNumOfLcnAvail, egrRcvCells=egrRcvCells, bbChanConnType=bbChanConnType, vismSvcTxRestartAcks=vismSvcTxRestartAcks, portSvcLcnLow=portSvcLcnLow, bbChanUpcEnable=bbChanUpcEnable, nniSignalingTimeout=nniSignalingTimeout, cesConnMCR=cesConnMCR, vismUpspeedCodec=vismUpspeedCodec, cesmChanConditionedSigCode=cesmChanConditionedSigCode, ascFeatures=ascFeatures, rpmChanLocalVci=rpmChanLocalVci, asynchronousUpdates=asynchronousUpdates, parSwFuncAbrVsvd=parSwFuncAbrVsvd, rpmChanPercentUtil=rpmChanPercentUtil, vismHdlcTxAbortFrames=vismHdlcTxAbortFrames, ds0IfType=ds0IfType, bbIfNum=bbIfNum, frChanStateGrpTable=frChanStateGrpTable, frConnMCR=frConnMCR, rpmChanRemoteNsap=rpmChanRemoteNsap, srmeTargetSlotLineNum=srmeTargetSlotLineNum, frConnServiceType=frConnServiceType, vismTrapIntIndex1=vismTrapIntIndex1, frEndPtMapGrp=frEndPtMapGrp, bbChanDiscardOption=bbChanDiscardOption, atmLineNum=atmLineNum, commonPortSignallingProtocolType=commonPortSignallingProtocolType, smRateControlConfig=smRateControlConfig, vrtlIntrXmtdRmCellCnt=vrtlIntrXmtdRmCellCnt, rpmIfRscSlotNum=rpmIfRscSlotNum, rcvUNISeqMismatch=rcvUNISeqMismatch, ausmPortCnfSigILMIGrpTable=ausmPortCnfSigILMIGrpTable, parTrkRemoteVTrunkId=parTrkRemoteVTrunkId, rpmChanGrpEntry=rpmChanGrpEntry, parSysParmsMaxCdpADelay=parSysParmsMaxCdpADelay, vismSvcRxRestartAcks=vismSvcRxRestartAcks, extClockPresent=extClockPresent, rcvBytesDiscXceedQDepth=rcvBytesDiscXceedQDepth, cllmEnable=cllmEnable, pxmAtmVcCrossConnectTable=pxmAtmVcCrossConnectTable, vismChanClrEgress=vismChanClrEgress, bbIfXmtOAMCells=bbIfXmtOAMCells, parMnUpdtNodesPerInt=parMnUpdtNodesPerInt, cesChanLocRmtLpbkState=cesChanLocRmtLpbkState, vismAal2VADTimer=vismAal2VADTimer, xmtATMState=xmtATMState, frPortCnfSigCLLMGrpTable=frPortCnfSigCLLMGrpTable, xmtFramesDiscXceedDEThresh=xmtFramesDiscXceedDEThresh, bbChanCntNum=bbChanCntNum, commonChanIngrRcvState=commonChanIngrRcvState, parSysParmsInvLogAlarmThres=parSysParmsInvLogAlarmThres, frLocalNSAP=frLocalNSAP, bnmEgressInvalidCellHdr=bnmEgressInvalidCellHdr, parConnRemotePort=parConnRemotePort, axisAtmNetPrefixOperStatus=axisAtmNetPrefixOperStatus, AtmAddress=AtmAddress, ascChanStateSigLmiGrpTable=ascChanStateSigLmiGrpTable, ausmChanStateGrp=ausmChanStateGrp, ds0ChanNum=ds0ChanNum, maxTolerableDiffDelay=maxTolerableDiffDelay, bbIfProtocolRevNo=bbIfProtocolRevNo, vismChanAal2CpsInvUuiPkts=vismChanAal2CpsInvUuiPkts, rpmChanAbrRDF=rpmChanAbrRDF, cllmSigPortNum=cllmSigPortNum, portFrameChkSumType=portFrameChkSumType, vismConnRemotePercentUtil=vismConnRemotePercentUtil, bbIfIngrPercentUtil=bbIfIngrPercentUtil, vismChanAal5InvCpiPdus=vismChanAal5InvCpiPdus, ascLmiNodeStatusAckTx=ascLmiNodeStatusAckTx, portXmtSgmtLpbkCells=portXmtSgmtLpbkCells, xmtKbpsAIR=xmtKbpsAIR, vismRemoteVpi=vismRemoteVpi, bc=bc, srmeStartVtNum=srmeStartVtNum, vismSvcTxResyncStrtAcks=vismSvcTxResyncStrtAcks, frPortsUsedLine=frPortsUsedLine, ausmStdABRPCR=ausmStdABRPCR, ausmChanTestTypeCPESide=ausmChanTestTypeCPESide, ingrUpcCLPTagEnable=ingrUpcCLPTagEnable, egrRcvCellRate=egrRcvCellRate, ausmStdABRCnfChanNum=ausmStdABRCnfChanNum, numLinksInImaGrp=numLinksInImaGrp, imaPortType=imaPortType, bbIfSnmpPduReceived=bbIfSnmpPduReceived, cesmPortCnfResPartGrpEntry=cesmPortCnfResPartGrpEntry, ausmStdABRMCR=ausmStdABRMCR, bbIfSigCntClrButton=bbIfSigCntClrButton, bbIfXmtRmCells=bbIfXmtRmCells, rpmChanRestrictTrkType=rpmChanRestrictTrkType)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", frCDRNumber=frCDRNumber, bbRscPartIfNum=bbRscPartIfNum, parSysParmsMaxIpcdpHsdDelay=parSysParmsMaxIpcdpHsdDelay, cesLostCells=cesLostCells, ausmStdABRFRTT=ausmStdABRFRTT, ethernetInterface=ethernetInterface, parConnectionTable=parConnectionTable, chanOAMstatus224=chanOAMstatus224, ausmChanCntGrp=ausmChanCntGrp, chanConnType=chanConnType, bnmCellbusXmtCellCount=bnmCellbusXmtCellCount, parSnNumberOfTrunks=parSnNumberOfTrunks, vismCodecPktPeriod=vismCodecPktPeriod, ascLmiMaxRetryN395=ascLmiMaxRetryN395, parClockIndex=parClockIndex, egrRcvUtilization=egrRcvUtilization, rateControlAllowed=rateControlAllowed, commonChanEgrXmtState=commonChanEgrXmtState, frstdABRCnfGrpTable=frstdABRCnfGrpTable, vrtlIntrRxdValidOAMCellCnt=vrtlIntrRxdValidOAMCellCnt, vismRtcpRepInterval=vismRtcpRepInterval, vismChanXmtATMState=vismChanXmtATMState, signallingVpi=signallingVpi, aumConnType=aumConnType, smCardUtilization=smCardUtilization, rcvATMState=rcvATMState, ausmChanClrButton=ausmChanClrButton, vismPortCacSvcUpspeedFailures=vismPortCacSvcUpspeedFailures, bnmEgressInvalidCellCount=bnmEgressInvalidCellCount, commonChanTable=commonChanTable, portsUsedLine6=portsUsedLine6, imatmPortRcvInvCells=imatmPortRcvInvCells, ingrVpiVciErrCells=ingrVpiVciErrCells, parSysParmsFrStandard=parSysParmsFrStandard, axisImaGroupTestLinkIfIndex=axisImaGroupTestLinkIfIndex, vismChanTestState=vismChanTestState, rcvKbpsAIR=rcvKbpsAIR, commonConnParm2=commonConnParm2, secondaryMuxClockSource=secondaryMuxClockSource, srmeCnfGrpEntry=srmeCnfGrpEntry, cesChanConnType=cesChanConnType, ingrUpcPCR01=ingrUpcPCR01, ausmPortImaGrpRestart=ausmPortImaGrpRestart, bbIfRscPrtEgrPctBandwidth=bbIfRscPrtEgrPctBandwidth, imatmDsx3PortRcvCells=imatmDsx3PortRcvCells, portQBwInc=portQBwInc, bbConnServiceType=bbConnServiceType, portRcvAisCells=portRcvAisCells, bbIfInvalidPDUReceived=bbIfInvalidPDUReceived, ausmInterfaceConfEntry=ausmInterfaceConfEntry, parSnNodeId=parSnNodeId, vismChanLocRmtLpbkState=vismChanLocRmtLpbkState, xmtAcpCells=xmtAcpCells, bbIfXmtClp0Cells=bbIfXmtClp0Cells, ausmConnMBS=ausmConnMBS, cesPortType=cesPortType, chanFECNconfig=chanFECNconfig, t392PollingVerificationTimer=t392PollingVerificationTimer, imatmClkCfgGrp=imatmClkCfgGrp, commonPortStatus=commonPortStatus, xmtFramesDuringLMIAlarm=xmtFramesDuringLMIAlarm, bnmLineInterfaceMode=bnmLineInterfaceMode, x21CnfGrpTable=x21CnfGrpTable, vismCasVariantState=vismCasVariantState, asmUnitMeasurable=asmUnitMeasurable, pxmExtClockPresent=pxmExtClockPresent, portEqueueServiceRatio=portEqueueServiceRatio, rasOamlpbkAllowed=rasOamlpbkAllowed, ausmDelSvcsPortNum=ausmDelSvcsPortNum, smFeatures=smFeatures, vismIpAddress=vismIpAddress, xmtFramesLengthViolations=xmtFramesLengthViolations, vismCodecName=vismCodecName, bbIfMinTrapInterval=bbIfMinTrapInterval, eventThresholdN492=eventThresholdN492, bertSupportFlag=bertSupportFlag, cesEndChanNum=cesEndChanNum, cesmChanCnfGrpEntry=cesmChanCnfGrpEntry, parIfOperStatus=parIfOperStatus, parOnOffDrtDelay=parOnOffDrtDelay, vrtlIntrQbinDiscardedCellCnt=vrtlIntrQbinDiscardedCellCnt, trapTransmitted=trapTransmitted, ingrUpcIBS=ingrUpcIBS, ascLmiOperStatus=ascLmiOperStatus, parTrkAlarmStatus=parTrkAlarmStatus, portBytesDiscXceedQueFull=portBytesDiscXceedQueFull, parSysParmsMaxCDelay=parSysParmsMaxCDelay, ibs=ibs, cesPortNum=cesPortNum, bbIfAsn1ParseError=bbIfAsn1ParseError, portState=portState, bertCleanupAction=bertCleanupAction, portSignallingState=portSignallingState, bbChanState=bbChanState, vismChanAal2CpsInvLenPkts=vismChanAal2CpsInvLenPkts, parConnAdminStatus=parConnAdminStatus, vismResPartCtrlrID=vismResPartCtrlrID, aumAddressTranslationDeleteEntry=aumAddressTranslationDeleteEntry, vismSvcRxResyncEnds=vismSvcRxResyncEnds, parNetParmCfTestMultiplier=parNetParmCfTestMultiplier, x21portDeleteSvcs=x21portDeleteSvcs, setRequestReceived=setRequestReceived, cesLocalVpi=cesLocalVpi, egrXmtEfciSetCells=egrXmtEfciSetCells, asmPhysicalAlarmState=asmPhysicalAlarmState, parTrkLoadXmtUsedCbr=parTrkLoadXmtUsedCbr, parConnRemoteVci=parConnRemoteVci, frPortCnfSigCLLMGrpEntry=frPortCnfSigCLLMGrpEntry, parCmParmsRerouteTimer=parCmParmsRerouteTimer, commonPortType=commonPortType, imaCntPortNum=imaCntPortNum, vismCasVariantEntry=vismCasVariantEntry, parConnLocalSlot=parConnLocalSlot, atmNetPrefixEntry=atmNetPrefixEntry, parTrkLocalSlotNumber=parTrkLocalSlotNumber, readPtrWrPtrDiff=readPtrWrPtrDiff, portLineNum=portLineNum, bbChanCongstUpdateCode=bbChanCongstUpdateCode, chanTxFifoFullCnt=chanTxFifoFullCnt, axisImaGroupLastChange=axisImaGroupLastChange, currentClock=currentClock, chanIngrClpSetRcvCells=chanIngrClpSetRcvCells, bertResourceStatus=bertResourceStatus, rcvBytesCLLM=rcvBytesCLLM, parOnOffDynamicBwAlloc=parOnOffDynamicBwAlloc, vismPrevMode=vismPrevMode, x21LineInterfaceType=x21LineInterfaceType, axisAtmNetPrefixAdminStatus=axisAtmNetPrefixAdminStatus, vrtlIntrQbinPri=vrtlIntrQbinPri, ausmPortCntPortImaGrpTable=ausmPortCntPortImaGrpTable, ascLmiNodeStatusAckRx=ascLmiNodeStatusAckRx, dsx0VismCnfEntry=dsx0VismCnfEntry, connShelfNum=connShelfNum, frRemoteVpi=frRemoteVpi, rcvAbitState=rcvAbitState, frChanOamCCEnable=frChanOamCCEnable, portDeleteSvcs=portDeleteSvcs, rcvPortFramesDiscXceedDEThresh=rcvPortFramesDiscXceedDEThresh, chanShelfAlarmDiscardCells=chanShelfAlarmDiscardCells, imaAllowed=imaAllowed, ausmStateChanNum=ausmStateChanNum, xmtBytes=xmtBytes, x21AlmGrpTable=x21AlmGrpTable, vismChanRTDResult=vismChanRTDResult, xmtAsynchUpdate=xmtAsynchUpdate, ausmVpcFlag=ausmVpcFlag, asmClrButton=asmClrButton, ingrQDepth=ingrQDepth, bbIfRcvValidOAMCells=bbIfRcvValidOAMCells, bbIfStateGrpEntry=bbIfStateGrpEntry, egrQCLPThreshHigh=egrQCLPThreshHigh, commonChanStatus=commonChanStatus, cesConnPercentUtil=cesConnPercentUtil, vismChanClrIngress=vismChanClrIngress, pxmSecondarySMClockSourceSlotNumber=pxmSecondarySMClockSourceSlotNumber, diagTestId=diagTestId, bertOwner=bertOwner, listLinksPresentInImaGroup=listLinksPresentInImaGroup, ingrUpcCDVT0=ingrUpcCDVT0, vismRemoteVci=vismRemoteVci, cesPortState=cesPortState, vismPortRowStatus=vismPortRowStatus, xmtFramesUnderrun=xmtFramesUnderrun, vismCasFileName=vismCasFileName, parConnLocalPort=parConnLocalPort, commonPortTable=commonPortTable, zeroCirConEir=zeroCirConEir, bertPatternMask=bertPatternMask, parCmParmsMaxUpdates=parCmParmsMaxUpdates, vismAal2InitVadTimer=vismAal2InitVadTimer, chanEgrPortQClpThresDiscardCells=chanEgrPortQClpThresDiscardCells, bbIfCustomerId=bbIfCustomerId, vrtlIntrTotalQbinCellCnt=vrtlIntrTotalQbinCellCnt, vismPortDs0ConfigBitMap=vismPortDs0ConfigBitMap, vismResPartEgrPctBW=vismResPartEgrPctBW, cesCas=cesCas, axisImaGroupRxFrameLength=axisImaGroupRxFrameLength, frstdABRCDF=frstdABRCDF, parConnRemoteVcIndx=parConnRemoteVcIndx, parOnOffBackgroundUpdt=parOnOffBackgroundUpdt, ingrQCLPThreshHigh=ingrQCLPThreshHigh, ascChanStateSigLmiGrpEntry=ascChanStateSigLmiGrpEntry, vismAal2CidRowStatus=vismAal2CidRowStatus, bbChanStateGrpEntry=bbChanStateGrpEntry, rpmPortSlotNum=rpmPortSlotNum, vismHdlcChanEntry=vismHdlcChanEntry, axisImaGroupIntegrationUpTime=axisImaGroupIntegrationUpTime, frstdABRMCR=frstdABRMCR, vismAal2CidDtmfTransport=vismAal2CidDtmfTransport, portSigClrButton=portSigClrButton, ausmCntPortNum=ausmCntPortNum, frConnRemoteMBS=frConnRemoteMBS, egrQCLPThreshLow=egrQCLPThreshLow, cesPartialFill=cesPartialFill, axisAtmAddressAtmAddress=axisAtmAddressAtmAddress, vismChanCnfGrpEntry=vismChanCnfGrpEntry, ascCntSigLmiGrpTable=ascCntSigLmiGrpTable, imatmClrVpTrkNum=imatmClrVpTrkNum, imatmVpTrkMapGrp=imatmVpTrkMapGrp, cesLocalVci=cesLocalVci, cardOversubscribed=cardOversubscribed, chanIngrXmtCellRate=chanIngrXmtCellRate, mulTrksAllowed=mulTrksAllowed, queConuterVrtlIntrNum=queConuterVrtlIntrNum, bearerSentPkts=bearerSentPkts, n393MonitoredEventCount=n393MonitoredEventCount, cllmFailures=cllmFailures, parConnRstrZcs=parConnRstrZcs, vismResPartPortNum=vismResPartPortNum, bearerConnTable=bearerConnTable, x21CnfGrpEntry=x21CnfGrpEntry, statePortNum=statePortNum, ausmPortSvcVpiLow=ausmPortSvcVpiLow, vismChanAal5OversizedSdusRcvdPdus=vismChanAal5OversizedSdusRcvdPdus, frRoutingPriority=frRoutingPriority, ausmCDRNumber=ausmCDRNumber, vismAal2CidProfileNum=vismAal2CidProfileNum, vismChanReroute=vismChanReroute, parSysParmsMaxCdpVDelay=parSysParmsMaxCdpVDelay, vismCasInterdigitTMF=vismCasInterdigitTMF, rpmChanRemoteVci=rpmChanRemoteVci, parNetParmCondInitialStgr=parNetParmCondInitialStgr, cesChanStrauSciNum=cesChanStrauSciNum, ausmChanCntGrpEntry=ausmChanCntGrpEntry, vismIpGrp=vismIpGrp, pxmFeatures=pxmFeatures, portSvcShareLcn=portSvcShareLcn, ingrRcvUtilization=ingrRcvUtilization, bertBitCount=bertBitCount, axisImaGroupTestProcStatus=axisImaGroupTestProcStatus, imatmDsx3PortIndex=imatmDsx3PortIndex, ausmChanCnfGrpTable=ausmChanCnfGrpTable, x21portSvcLcnLow=x21portSvcLcnLow, vismChanActivityState=vismChanActivityState, mir=mir, ausmPortState=ausmPortState, keepAlivePollingEnable=keepAlivePollingEnable, asmAlarmType=asmAlarmType, ausmPortCnfServiceQueGrp=ausmPortCnfServiceQueGrp, numRedundantLinks=numRedundantLinks, ausmPortInterfaceGrp=ausmPortInterfaceGrp, vrtlIntrConfigEntry=vrtlIntrConfigEntry, bnmCounters=bnmCounters, chanIngrXmtUtilization=chanIngrXmtUtilization, axisImaGroupNeTxClkMode=axisImaGroupNeTxClkMode, frEndPtMapGrpTable=frEndPtMapGrpTable, parTrkCnfgVpcConids=parTrkCnfgVpcConids, iLMITrapEnable=iLMITrapEnable, ausmChanStateGrpTable=ausmChanStateGrpTable, vismChanPreference=vismChanPreference, parSysParmsConnFail=parSysParmsConnFail, ds0ChanMapIfIndex=ds0ChanMapIfIndex, ausmSignallingProtocolType=ausmSignallingProtocolType, vismCasXgcpVariantTable=vismCasXgcpVariantTable)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", pxmAtmVcCrossConnectL2HOperStatus=pxmAtmVcCrossConnectL2HOperStatus, vismExtDnsServerDn=vismExtDnsServerDn, ausmPortCnfServiceQueGrpEntry=ausmPortCnfServiceQueGrpEntry, pxmAtmVcCrossConnectHighAddressType=pxmAtmVcCrossConnectHighAddressType, vismAppliedTemplate=vismAppliedTemplate, parNetworkingParms=parNetworkingParms, parSysParmsMaxIpcdpADelay=parSysParmsMaxIpcdpADelay, ausmResPartPortNum=ausmResPartPortNum, vismAal2SubcellMuxing=vismAal2SubcellMuxing, frPortCntPortGrpEntry=frPortCntPortGrpEntry, ascLmiTimerT393=ascLmiTimerT393, vismBearerSubNetMask=vismBearerSubNetMask, rpmChanSubInterface=rpmChanSubInterface, x21LineType=x21LineType, cntChanNum=cntChanNum, virtualInterfaceCnf=virtualInterfaceCnf, vrtlIntrTotalCellCnt=vrtlIntrTotalCellCnt, vismAal2CidCodecType=vismAal2CidCodecType, chanEgrQSelect=chanEgrQSelect, parMnUpdtInterval=parMnUpdtInterval, ausmConnRemoteMBS=ausmConnRemoteMBS, egrQClpSetDiscardCells=egrQClpSetDiscardCells, srmStartT1LineNum=srmStartT1LineNum, vismChanPortNum=vismChanPortNum, ascLmiNodeStatusRx=ascLmiNodeStatusRx, axisImaGroupIntegrationDownTime=axisImaGroupIntegrationDownTime, cesmPortCnfGrpEntry=cesmPortCnfGrpEntry, imatmRangeNum=imatmRangeNum, frstdABRTrm=frstdABRTrm, frChanCntGrpEntry=frChanCntGrpEntry, ascLmiNodeStatusTx=ascLmiNodeStatusTx, rpmPortSubInterface=rpmPortSubInterface, bearerConnGrp=bearerConnGrp, vismConnPercentUtil=vismConnPercentUtil, ds0CasGlareTime=ds0CasGlareTime, vismChanStateGrpTable=vismChanStateGrpTable, chanPpdDiscCells=chanPpdDiscCells, cesmPortCnfGrp=cesmPortCnfGrp, ausmPortStateGrp=ausmPortStateGrp, cesReassCells=cesReassCells, vismCodecCnfTable=vismCodecCnfTable, vismSvcRxResyncStrtAcks=vismSvcRxResyncStrtAcks, vismSvcRxBulkResyncs=vismSvcRxBulkResyncs, frChanStateGrp=frChanStateGrp, parSysParmsMaxIphsdDelay=parSysParmsMaxIphsdDelay, vismMastership=vismMastership, bbIfRscPartCtrlrID=bbIfRscPartCtrlrID, pxmAtmVcCrossConnectH2LLastChange=pxmAtmVcCrossConnectH2LLastChange, bbIfSetRequestReceived=bbIfSetRequestReceived, vismChanAal2HecErrors=vismChanAal2HecErrors, vrtlIntrXmtdClpTaggedCellCnt=vrtlIntrXmtdClpTaggedCellCnt, pxmClockConfig=pxmClockConfig, ingrUpcSCRPolicing=ingrUpcSCRPolicing, vismChanVADDutyCycle=vismChanVADDutyCycle, vismDaughterCardDescription=vismDaughterCardDescription, numLinksPresentInImaGroup=numLinksPresentInImaGroup, ausmRemoteVci=ausmRemoteVci, vismBearerContinuityTest=vismBearerContinuityTest, cesmPortCnfGrpTable=cesmPortCnfGrpTable, vismCompCnfPacketSize=vismCompCnfPacketSize, vismSvcAtmQosClr=vismSvcAtmQosClr, bnmPortXmtCellRate=bnmPortXmtCellRate, cir=cir, totalIngrClpSetDiscardCells=totalIngrClpSetDiscardCells, qir=qir, vismXgcpBearerNetworkType=vismXgcpBearerNetworkType, bbConnPercentUtil=bbConnPercentUtil, bert=bert, parSnNodeName=parSnNodeName, ausmInterfaceMyNeighborIpAddress=ausmInterfaceMyNeighborIpAddress, commonPortNum=commonPortNum, ausmPortType=ausmPortType, x21CnfGrp=x21CnfGrp, bbChanTestTypeCPESide=bbChanTestTypeCPESide, chanConnDesc=chanConnDesc, rcvFramesDiscIllegalHeader=rcvFramesDiscIllegalHeader, imaObsDiffDelay=imaObsDiffDelay, endPortNum=endPortNum, vismFarEndE164Address=vismFarEndE164Address, ausmPortIngrSvcBandW=ausmPortIngrSvcBandW, ausmConnPercentUtil=ausmConnPercentUtil, lmiCnfPortNum=lmiCnfPortNum, rateFastDown=rateFastDown, vismChanCdvt=vismChanCdvt, bbIfMinVpi=bbIfMinVpi, imatmPortCntrClrButton=imatmPortCntrClrButton, commonChanPortNum=commonChanPortNum, vismChanProtection=vismChanProtection, chanIngrRcvCells=chanIngrRcvCells, enhancedLmi=enhancedLmi, rcvInvalidRequest=rcvInvalidRequest, rcvFramesTaggedBECN=rcvFramesTaggedBECN, t391LinkIntegrityTimer=t391LinkIntegrityTimer, ausmChanTestType=ausmChanTestType, bbChanFrmDiscardThreshold=bbChanFrmDiscardThreshold, rpmChanMidHigh=rpmChanMidHigh, ausmPortSvcVciLow=ausmPortSvcVciLow, imatmTrkOpType=imatmTrkOpType, bertStatus=bertStatus, axisImaGroupFeTxClkMode=axisImaGroupFeTxClkMode, parTrkLoadRcvUsedVoice=parTrkLoadRcvUsedVoice, ds0RobbedBitSignalling=ds0RobbedBitSignalling, egrMaxBwInc=egrMaxBwInc, bbConnVpcFlag=bbConnVpcFlag, x21LineEIAStatus=x21LineEIAStatus, x21portNum=x21portNum, imatmPortImaCtrlMatchCells=imatmPortImaCtrlMatchCells, rcvFramesDiscXceedDEThresh=rcvFramesDiscXceedDEThresh, rcvFramesDiscAlignmentError=rcvFramesDiscAlignmentError, vismSvcRxReleases=vismSvcRxReleases, parTrkLoadXmtUsedVoice=parTrkLoadXmtUsedVoice, cesBufOverflows=cesBufOverflows, vismCasInterdigitTcrit=vismCasInterdigitTcrit, parSysParmsVcPollRate=parSysParmsVcPollRate, bearerCid=bearerCid, vismPortCnfGrpEntry=vismPortCnfGrpEntry, xmtPortFramesDiscXceedQDepth=xmtPortFramesDiscXceedQDepth, vismResPartLcnLow=vismResPartLcnLow, rpmChanType=rpmChanType, vismSvcRxCallProcs=vismSvcRxCallProcs, portsUsedLine8=portsUsedLine8, rpmIfRscPrtEgrPctBandwidth=rpmIfRscPrtEgrPctBandwidth, parSysParms=parSysParms, ds0CasGaurdTime=ds0CasGaurdTime, parConnLocalEndpt=parConnLocalEndpt, rcvFramesBECN=rcvFramesBECN, ascCnfSigLmiGrpEntry=ascCnfSigLmiGrpEntry, configVrtlIntrNum=configVrtlIntrNum, parSwFunc=parSwFunc, bertStartTime=bertStartTime, vismChanConnType=vismChanConnType, chanReroute=chanReroute, bertDDSCode=bertDDSCode, cesPortsUsedLine6=cesPortsUsedLine6, chanRTDResult=chanRTDResult, ausmChanStatusBitMap=ausmChanStatusBitMap, xmtPortFramesBECN=xmtPortFramesBECN, pxmPrimarySMClockSourceSlotNumber=pxmPrimarySMClockSourceSlotNumber, rpmChanBurstSize=rpmChanBurstSize, cesmResPartEgrPctBW=cesmResPartEgrPctBW, vismAal2DtmfRelay=vismAal2DtmfRelay, bbIfRscPrtVpiLow=bbIfRscPrtVpiLow, asmNumOfValidEntries=asmNumOfValidEntries, x21ClkFrequencyThreshold=x21ClkFrequencyThreshold, foresightEnable=foresightEnable, pxmExtClk2ConnectorType=pxmExtClk2ConnectorType, ausmPortCntPortGrp=ausmPortCntPortGrp, pxmExtClk2SrcImpedance=pxmExtClk2SrcImpedance, pxmClkStratumLevel=pxmClkStratumLevel, bbChanEgrSrvRate=bbChanEgrSrvRate, vismSvcRxResyncStrts=vismSvcRxResyncStrts, bbChanLocalVci=bbChanLocalVci, vismDynamicPT=vismDynamicPT, axisImaGroupSymmetry=axisImaGroupSymmetry, ausmPortDelSvcsGrp=ausmPortDelSvcsGrp, parSysParmsMaxADelay=parSysParmsMaxADelay, imatmVpTrkMapGrpTableEntry=imatmVpTrkMapGrpTableEntry, redundancyAllowed=redundancyAllowed, vrtlIntrQbinCurrentCellCnt=vrtlIntrQbinCurrentCellCnt, ausmIngrFrDiscardThreshold=ausmIngrFrDiscardThreshold, portM32EgrQueueThresh=portM32EgrQueueThresh, vismChanPvcType=vismChanPvcType, bbIfIlmiEnable=bbIfIlmiEnable, ds0IfIndex=ds0IfIndex, vrtlIntrQbinConfigTable=vrtlIntrQbinConfigTable, portFileId=portFileId, vismChanMbsEgress=vismChanMbsEgress, bbIfCnfPortGrpTable=bbIfCnfPortGrpTable, virtualInterfaceCnt=virtualInterfaceCnt, parNetParmCondPerNodeInterval=parNetParmCondPerNodeInterval, lcpCellsPeriodicity=lcpCellsPeriodicity, vismPortResPartCnfGrpTable=vismPortResPartCnfGrpTable, bbChanLocalVpi=bbChanLocalVpi, frResPartCtrlrID=frResPartCtrlrID, cesPortSpeed=cesPortSpeed, vismSvcAtmQosCdv=vismSvcAtmQosCdv, cesmChanCnfGrp=cesmChanCnfGrp, frConnRemotePercentUtil=frConnRemotePercentUtil, ausmPortCnfSigILMIGrpEntry=ausmPortCnfSigILMIGrpEntry, axisImaGroupTxAvailCellRate=axisImaGroupTxAvailCellRate, bbChanClpLoThreshold=bbChanClpLoThreshold, ausmLocalNSAP=ausmLocalNSAP, chanIngrEfciSetRcvCells=chanIngrEfciSetRcvCells, chanEgrRcvUtilization=chanEgrRcvUtilization, minTrapInterval=minTrapInterval, ausmPortClrButton=ausmPortClrButton, rcvFramesFECN=rcvFramesFECN, parPrefRoute=parPrefRoute, vismAal2CidGrp=vismAal2CidGrp, bbIfCntGrpTable=bbIfCntGrpTable, parTrkCnfgTrafficClassCbr=parTrkCnfgTrafficClassCbr, vismVoIpDPvcRetryCnt=vismVoIpDPvcRetryCnt, bbIfRcvClp0DiscCells=bbIfRcvClp0DiscCells, xmtFramesAbort=xmtFramesAbort, frRemoteVci=frRemoteVci, vismAal2CnfPktPeriod=vismAal2CnfPktPeriod, bbIfRcvClp0Cells=bbIfRcvClp0Cells, commonChanIngrXmtState=commonChanIngrXmtState, getRequestTransmitted=getRequestTransmitted, ds0InputGain=ds0InputGain, bertLoopback=bertLoopback, rpmChanVci=rpmChanVci, ausmConnAdminStatus=ausmConnAdminStatus, rcvFramesUnknownProtocols=rcvFramesUnknownProtocols, vismSvcCallProcExpiries=vismSvcCallProcExpiries, bertDS0DPIterationCount=bertDS0DPIterationCount, bbIfRscPrtVciHigh=bbIfRscPrtVciHigh, egrQCLPState=egrQCLPState, networkCacConfigState=networkCacConfigState, cesmResPartNumOfLcnAvail=cesmResPartNumOfLcnAvail, imaPortEnable=imaPortEnable, vismAal2CidNum=vismAal2CidNum, listOfLinksInImaGrp=listOfLinksInImaGrp, asmAlarmUnitNum=asmAlarmUnitNum, ds0CasParameterSource=ds0CasParameterSource, vismCasCountryCode=vismCasCountryCode, vismCasXgcpMaxRetries=vismCasXgcpMaxRetries, rpmChanState=rpmChanState, pxmPreviousClock=pxmPreviousClock, srmeCnfGrp=srmeCnfGrp, cesmPortCnfResPartGrpTable=cesmPortCnfResPartGrpTable, bbChanTestStateCPESide=bbChanTestStateCPESide, bbChanNonConformCellsAtGcra1Policer=bbChanNonConformCellsAtGcra1Policer, vismHdlcLcnNum=vismHdlcLcnNum, parTrkAlarmType=parTrkAlarmType, diagType=diagType, cesChanTestState=cesChanTestState, bertDDSSeekResultsTableFirstIndex=bertDDSSeekResultsTableFirstIndex, vismResPartLcnHigh=vismResPartLcnHigh, vismHdlcRowStatus=vismHdlcRowStatus, vismAal2CidLcn=vismAal2CidLcn, parTrkLoadRcvUsedAbr=parTrkLoadRcvUsedAbr, xmtFramesTaggedFECN=xmtFramesTaggedFECN, srm3T3CnfGrpTable=srm3T3CnfGrpTable, rcvLastUnknownDLCI=rcvLastUnknownDLCI, vismRoutingPriority=vismRoutingPriority, portSpeed=portSpeed, portType=portType, rpmChanRemoteVpi=rpmChanRemoteVpi, bbIfCnfSigILMIGrpEntry=bbIfCnfSigILMIGrpEntry, chanSvcFlag=chanSvcFlag, vismCasVariantSource=vismCasVariantSource, asmAlarmEntry=asmAlarmEntry, pxmAtmVcCrossConnectLowAddressType=pxmAtmVcCrossConnectLowAddressType, ausmChanEgrPercentUtil=ausmChanEgrPercentUtil, egrQfullDiscardCells=egrQfullDiscardCells, rcvFramesDiscIllegalLen=rcvFramesDiscIllegalLen, bnmPortRcvUtilization=bnmPortRcvUtilization, parTrkCnfgLineType=parTrkCnfgLineType, imaGrpRcvHecErrSESecCount=imaGrpRcvHecErrSESecCount, parRrtFailRsn=parRrtFailRsn, ds0CasVariantName=ds0CasVariantName, vismRtcpRecvMultiplier=vismRtcpRecvMultiplier, ascLmiInvalidPduLenRx=ascLmiInvalidPduLenRx)
mibBuilder.exportSymbols("CISCO-WAN-AXIPOP-MIB", frChanUpcEnable=frChanUpcEnable, endLineNum=endLineNum, bearerJitter=bearerJitter, bbIfSignallingProtocolType=bbIfSignallingProtocolType, be=be, frstdABRCnfGrpEntry=frstdABRCnfGrpEntry, frServPortNum=frServPortNum, bnmPortCounterEntry=bnmPortCounterEntry, ausmPortStateImaGrp=ausmPortStateImaGrp, vismPortCacPvcAddFailures=vismPortCacPvcAddFailures, signallingProtocolType=signallingProtocolType, parNetParmLowTxRate=parNetParmLowTxRate, parIfHiAddrMin=parIfHiAddrMin, chanServiceType=chanServiceType, pxmAtmVcCrossConnectHighVpi=pxmAtmVcCrossConnectHighVpi, xmtFramesDiscard=xmtFramesDiscard, vismSvcTxConns=vismSvcTxConns, frChanCnfGrp=frChanCnfGrp, frConnPercentUtil=frConnPercentUtil, bbChanDscdClpOneCellsToPort=bbChanDscdClpOneCellsToPort, parSysParmsTsPacketAge=parSysParmsTsPacketAge, ds0MusicThreshold=ds0MusicThreshold, portDs0ConfigBitMap=portDs0ConfigBitMap, bbIfGetRequestReceived=bbIfGetRequestReceived, vismSvcAal2CidNumber=vismSvcAal2CidNumber, frEndPtMapGrpEntry=frEndPtMapGrpEntry, rpmChanConnType=rpmChanConnType, xmtFramesBECN=xmtFramesBECN, parSysParmsDeEnable=parSysParmsDeEnable, bearerRcvdOctets=bearerRcvdOctets, axisImaGroupRxImaId=axisImaGroupRxImaId, chanOAMstatus32=chanOAMstatus32, xmtPortFramesDuringLMIAlarm=xmtPortFramesDuringLMIAlarm, parTrkLoadXmtUsedTs=parTrkLoadXmtUsedTs, parConnectionEntry=parConnectionEntry, vismPortCnfGrpTable=vismPortCnfGrpTable, parConnFailRsn=parConnFailRsn, ausmChanReroute=ausmChanReroute, vismSvcCnfGroups=vismSvcCnfGroups, frConnPCR=frConnPCR, bertBitErrorCount=bertBitErrorCount, imatmVpTrkMapGrpTable=imatmVpTrkMapGrpTable, xmtBytesTaggedDE=xmtBytesTaggedDE, frPortCntSigCLLMGrp=frPortCntSigCLLMGrp, xmtFramesCLLM=xmtFramesCLLM, vismChanRcvATMState=vismChanRcvATMState, cesCBRClockMode=cesCBRClockMode, chanClrButton=chanClrButton, ascCntSigLmiGrp=ascCntSigLmiGrp, cesChanConditionedData=cesChanConditionedData, ascLmiStatusRx=ascLmiStatusRx, ds0SignalingType=ds0SignalingType, vismCacRejectionPolicy=vismCacRejectionPolicy, ethernetPhysicaAddress=ethernetPhysicaAddress, commonPort=commonPort, imatmDsx3CntrsGrp=imatmDsx3CntrsGrp, x21LineSendCode=x21LineSendCode, axisImaGroupRestartImaGrp=axisImaGroupRestartImaGrp, bertDS0Speed=bertDS0Speed, rcvFramesTaggedDE=rcvFramesTaggedDE, ausmConnPCR=ausmConnPCR, ausmPortCnfServiceQueGrpTable=ausmPortCnfServiceQueGrpTable, vismChanMbsIngress=vismChanMbsIngress, xmtFramesInvalidCPIs=xmtFramesInvalidCPIs, ausmChanLocRmtLpbkState=ausmChanLocRmtLpbkState, parTrkStatReserve=parTrkStatReserve, portRowStatus=portRowStatus, egrQServiceSequence=egrQServiceSequence, frConnRemoteSCR=frConnRemoteSCR, vismPortNum=vismPortNum, cesXmtATMState=cesXmtATMState, cesMapVci=cesMapVci, bearerCntClrButton=bearerCntClrButton, xmtFramesDiscSrcAbort=xmtFramesDiscSrcAbort, rcvFramesDiscXceedQDepth=rcvFramesDiscXceedQDepth, cesmChanCntGrpEntry=cesmChanCntGrpEntry, bertPattern=bertPattern, cesPortsUsedLine5=cesPortsUsedLine5, ausmChanRowStatus=ausmChanRowStatus, ausmConnRemotePCR=ausmConnRemotePCR, frResPartDlciLow=frResPartDlciLow, rpmChanVpi=rpmChanVpi, commonChannel=commonChannel, rcvPortBytes=rcvPortBytes, bbChanSvcFlag=bbChanSvcFlag, tooBigError=tooBigError, vrtlIntrXmtdOAMCellCnt=vrtlIntrXmtdOAMCellCnt, x21portFlagsBetweenFrames=x21portFlagsBetweenFrames, parSnNodeIP=parSnNodeIP, vismAal2CidFailReason=vismAal2CidFailReason, x21AlmCnfGrpTable=x21AlmCnfGrpTable, bertDDSSeekResultsTableIndex=bertDDSSeekResultsTableIndex, vismSvcTxResyncStrts=vismSvcTxResyncStrts, frPortsUsedLineGrpEntry=frPortsUsedLineGrpEntry, vismPayloadType=vismPayloadType, serialInterfaceTable=serialInterfaceTable, parCmParmsMaxRoutingBundle=parCmParmsMaxRoutingBundle, rcvPortFramesTaggedBECN=rcvPortFramesTaggedBECN, vismChanAal2CpsSentPkts=vismChanAal2CpsSentPkts, bbChanCnfGrpTable=bbChanCnfGrpTable, ausmConnForeSightEnable=ausmConnForeSightEnable, cesChanRTDResult=cesChanRTDResult, imaPortOversubscribed=imaPortOversubscribed, vismSvcRxConns=vismSvcRxConns, chanEgrSrvRate=chanEgrSrvRate, serialInterface=serialInterface, lcpDelayTolerance=lcpDelayTolerance, parCmParmsCostBased=parCmParmsCostBased, vismPortResPartCnfGrpEntry=vismPortResPartCnfGrpEntry, vismCodecPreference=vismCodecPreference, parNetParmMaxNodeBlks=parNetParmMaxNodeBlks, frChanCnfGrpTable=frChanCnfGrpTable, rcvBytes=rcvBytes, vismAal2CidCnfTable=vismAal2CidCnfTable, parCmParmMaxViaCons=parCmParmMaxViaCons, frstdABRADTF=frstdABRADTF, vismHdlcRcvBufOverflows=vismHdlcRcvBufOverflows, aumAddressTranslationEntry=aumAddressTranslationEntry, x21portSpeed=x21portSpeed, rpmChanRemotePCR=rpmChanRemotePCR, chanOAMstatus256=chanOAMstatus256, counterClrButton=counterClrButton, ds0BundleMapped=ds0BundleMapped, vismChanLockingState=vismChanLockingState, vismCodecSupported=vismCodecSupported, ausmRemoteVpi=ausmRemoteVpi, ds0CasGlarePolicy=ds0CasGlarePolicy, vismCodecCnfIndex=vismCodecCnfIndex, x21AlmGrpEntry=x21AlmGrpEntry, imatmDsx3PortCntrsGrpTable=imatmDsx3PortCntrsGrpTable, vrtlIntrQbinRate=vrtlIntrQbinRate, parIfLoAddrMin=parIfLoAddrMin, vismPacketizationPeriod=vismPacketizationPeriod, vismChanVADTolerance=vismChanVADTolerance, bbIfXmtClp1Cells=bbIfXmtClp1Cells, commonAlarmState=commonAlarmState, ausmPortImaGrpRestartEntry=ausmPortImaGrpRestartEntry, bearerAal2ExtRAICnts=bearerAal2ExtRAICnts, parTrkLoadTable=parTrkLoadTable, rpmChanMidLow=rpmChanMidLow, frstdABRICR=frstdABRICR, chanNumNextAvailable=chanNumNextAvailable, rcvFramesAbort=rcvFramesAbort, ascLmiRcvAbitState=ascLmiRcvAbitState, rateDown=rateDown, vismAggregateTrafficClipping=vismAggregateTrafficClipping, portDs0Speed=portDs0Speed, frPortCnfSigLMIGrpTable=frPortCnfSigLMIGrpTable, vrtlIntrMaxCellRate=vrtlIntrMaxCellRate, pxmSecondaryInbandClockSourceLineNumber=pxmSecondaryInbandClockSourceLineNumber, chanServiceRateOverride=chanServiceRateOverride, pxmAtmVcCrossConnectEntry=pxmAtmVcCrossConnectEntry, cesmResPartIngrPctBW=cesmResPartIngrPctBW, frResPartRowStatus=frResPartRowStatus, vismChanCacRejectionPolicy=vismChanCacRejectionPolicy, cesmResPartRowStatus=cesmResPartRowStatus, rcvFrames=rcvFrames, stateChanNum=stateChanNum, bertLoopbackMask=bertLoopbackMask, vismFarEndNSAPAddress=vismFarEndNSAPAddress, rcvStatusInquiry=rcvStatusInquiry, axisAtmNetPrefixPrefix=axisAtmNetPrefixPrefix, ausmConnSCR=ausmConnSCR, frPortCntPortGrpTable=frPortCntPortGrpTable, rpmIfRscPrtRowStatus=rpmIfRscPrtRowStatus, rpmPortEntry=rpmPortEntry, x21AlmLineNum=x21AlmLineNum, vismSubNetMask=vismSubNetMask, parSelfNode=parSelfNode, bertTimeSlots=bertTimeSlots, bbIfTrapReceived=bbIfTrapReceived, cesChanSecUptime=cesChanSecUptime, axisImaGroupNumRxCfgLnks=axisImaGroupNumRxCfgLnks, bbIfRscPrtInUse=bbIfRscPrtInUse, rcvFramesDiscard=rcvFramesDiscard, rcvAcpErrCells=rcvAcpErrCells, bertControl=bertControl, bbChanRtePriority=bbChanRtePriority, cesPortBERTEnable=cesPortBERTEnable, endChanType=endChanType, pxmExtClkConnectorType=pxmExtClkConnectorType, axisImaGroupNumber=axisImaGroupNumber, cesmConnRemotePercentUtil=cesmConnRemotePercentUtil, cesUflowInsCells=cesUflowInsCells, smRasConfig=smRasConfig, frMaxCost=frMaxCost, bnmPortXmtUtilization=bnmPortXmtUtilization, ingrQEfciThresh=ingrQEfciThresh, atmLineCntTable=atmLineCntTable, x21portSvcInUse=x21portSvcInUse, cesmConnRemotePCR=cesmConnRemotePCR, ascLmiVci=ascLmiVci, foresightMIR=foresightMIR, xmtPortFramesFECN=xmtPortFramesFECN, bbChanEgrXmtState=bbChanEgrXmtState, x21portSvcDlciLow=x21portSvcDlciLow, frPortCnfPortGrpTable=frPortCnfPortGrpTable, vismSvcRxResyncEndAcks=vismSvcRxResyncEndAcks, connChanNum=connChanNum, chanCongestMinutes=chanCongestMinutes, bertAbortReason=bertAbortReason, atmLineCnfTable=atmLineCnfTable, portRcvFerfCells=portRcvFerfCells, cardResPartCtrlrNum=cardResPartCtrlrNum, bbIfRscPrtRowStatus=bbIfRscPrtRowStatus, vismChanTestType=vismChanTestType, vismRtpReceiveTimer=vismRtpReceiveTimer, bbIfNoSuchNameError=bbIfNoSuchNameError, bbIfRscPrtVpidLow=bbIfRscPrtVpidLow, rpmPortSubNetMask=rpmPortSubNetMask, imatmDsx3SingleBitErrCorrEnable=imatmDsx3SingleBitErrCorrEnable, rcvPortFramesDE=rcvPortFramesDE, egrXmtUtilization=egrXmtUtilization, ausmLocalVci=ausmLocalVci, chanType=chanType, axisImaGroupRxTimingRefLink=axisImaGroupRxTimingRefLink, frPortCnfSigLMIGrpEntry=frPortCnfSigLMIGrpEntry, vismCasRowStatus=vismCasRowStatus, serialPortEnable=serialPortEnable, bbChanCntClrButton=bbChanCntClrButton, chanOvrSubOvrRide=chanOvrSubOvrRide, bbChanSvcConnId=bbChanSvcConnId, xmtBytesDiscard=xmtBytesDiscard, rcvNNISeqMismatch=rcvNNISeqMismatch, vismHdlcTxUnderflows=vismHdlcTxUnderflows, portSvcDlciLow=portSvcDlciLow, bbIfPollingIntervalT491=bbIfPollingIntervalT491, frPortCnfX21PortGrpEntry=frPortCnfX21PortGrpEntry)
