#
# PySNMP MIB module PW-MPLS-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PW-MPLS-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:34:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
MplsTunnelInstanceIndex, MplsLdpIdentifier, MplsLsrIdentifier, MplsTunnelIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelInstanceIndex", "MplsLdpIdentifier", "MplsLsrIdentifier", "MplsTunnelIndex")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
PwIndexType, = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwIndexType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
mib_2, IpAddress, Unsigned32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, iso, Bits, Gauge32, Integer32, ModuleIdentity, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "IpAddress", "Unsigned32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "iso", "Bits", "Gauge32", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "StorageType")
pwMplsStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 181))
pwMplsStdMIB.setRevisions(('2009-06-12 00:00',))
if mibBuilder.loadTexts: pwMplsStdMIB.setLastUpdated('200906120000Z')
if mibBuilder.loadTexts: pwMplsStdMIB.setOrganization('Pseudowire Emulation Edge-to-Edge (PWE3) Working Group.')
pwMplsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 181, 0))
pwMplsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 181, 1))
pwMplsConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 181, 2))
pwMplsTable = MibTable((1, 3, 6, 1, 2, 1, 181, 1, 1), )
if mibBuilder.loadTexts: pwMplsTable.setStatus('current')
pwMplsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 181, 1, 1, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwMplsEntry.setStatus('current')
pwMplsMplsType = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("mplsTe", 0), ("mplsNonTe", 1), ("pwOnly", 2))).clone(namedValues=NamedValues(("mplsNonTe", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsMplsType.setStatus('current')
pwMplsExpBitsMode = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outerTunnel", 1), ("specifiedValue", 2), ("serviceDependant", 3))).clone('outerTunnel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsExpBitsMode.setStatus('current')
pwMplsExpBits = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsExpBits.setStatus('current')
pwMplsTtl = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsTtl.setStatus('current')
pwMplsLocalLdpID = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 5), MplsLdpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsLocalLdpID.setStatus('current')
pwMplsLocalLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsLocalLdpEntityIndex.setStatus('current')
pwMplsPeerLdpID = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 7), MplsLdpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsPeerLdpID.setStatus('current')
pwMplsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 1, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsStorageType.setStatus('current')
pwMplsOutboundTable = MibTable((1, 3, 6, 1, 2, 1, 181, 1, 2), )
if mibBuilder.loadTexts: pwMplsOutboundTable.setStatus('current')
pwMplsOutboundEntry = MibTableRow((1, 3, 6, 1, 2, 1, 181, 1, 2, 1), )
pwMplsEntry.registerAugmentions(("PW-MPLS-STD-MIB", "pwMplsOutboundEntry"))
pwMplsOutboundEntry.setIndexNames(*pwMplsEntry.getIndexNames())
if mibBuilder.loadTexts: pwMplsOutboundEntry.setStatus('current')
pwMplsOutboundLsrXcIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 1), MplsIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsOutboundLsrXcIndex.setStatus('current')
pwMplsOutboundTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 2), MplsTunnelIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsOutboundTunnelIndex.setStatus('current')
pwMplsOutboundTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 3), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsOutboundTunnelInstance.setStatus('current')
pwMplsOutboundTunnelLclLSR = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 4), MplsLsrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsOutboundTunnelLclLSR.setStatus('current')
pwMplsOutboundTunnelPeerLSR = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 5), MplsLsrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsOutboundTunnelPeerLSR.setStatus('current')
pwMplsOutboundIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwMplsOutboundIfIndex.setStatus('current')
pwMplsOutboundTunnelTypeInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notYetKnown", 1), ("mplsTe", 2), ("mplsNonTe", 3), ("pwOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsOutboundTunnelTypeInUse.setStatus('current')
pwMplsInboundTable = MibTable((1, 3, 6, 1, 2, 1, 181, 1, 3), )
if mibBuilder.loadTexts: pwMplsInboundTable.setStatus('current')
pwMplsInboundEntry = MibTableRow((1, 3, 6, 1, 2, 1, 181, 1, 3, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwMplsInboundEntry.setStatus('current')
pwMplsInboundXcIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 3, 1, 1), MplsIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsInboundXcIndex.setStatus('current')
pwMplsNonTeMappingTable = MibTable((1, 3, 6, 1, 2, 1, 181, 1, 4), )
if mibBuilder.loadTexts: pwMplsNonTeMappingTable.setStatus('current')
pwMplsNonTeMappingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 181, 1, 4, 1), ).setIndexNames((0, "PW-MPLS-STD-MIB", "pwMplsNonTeMappingDirection"), (0, "PW-MPLS-STD-MIB", "pwMplsNonTeMappingXcIndex"), (0, "PW-MPLS-STD-MIB", "pwMplsNonTeMappingIfIndex"), (0, "PW-MPLS-STD-MIB", "pwMplsNonTeMappingPwIndex"))
if mibBuilder.loadTexts: pwMplsNonTeMappingEntry.setStatus('current')
pwMplsNonTeMappingDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psnBound", 1), ("fromPsn", 2))))
if mibBuilder.loadTexts: pwMplsNonTeMappingDirection.setStatus('current')
pwMplsNonTeMappingXcIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 4, 1, 2), MplsIndexType())
if mibBuilder.loadTexts: pwMplsNonTeMappingXcIndex.setStatus('current')
pwMplsNonTeMappingIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 4, 1, 3), InterfaceIndexOrZero())
if mibBuilder.loadTexts: pwMplsNonTeMappingIfIndex.setStatus('current')
pwMplsNonTeMappingPwIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 4, 1, 4), PwIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsNonTeMappingPwIndex.setStatus('current')
pwMplsTeMappingTable = MibTable((1, 3, 6, 1, 2, 1, 181, 1, 5), )
if mibBuilder.loadTexts: pwMplsTeMappingTable.setStatus('current')
pwMplsTeMappingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 181, 1, 5, 1), ).setIndexNames((0, "PW-MPLS-STD-MIB", "pwMplsTeMappingTunnelIndex"), (0, "PW-MPLS-STD-MIB", "pwMplsTeMappingTunnelInstance"), (0, "PW-MPLS-STD-MIB", "pwMplsTeMappingTunnelPeerLsrID"), (0, "PW-MPLS-STD-MIB", "pwMplsTeMappingTunnelLocalLsrID"), (0, "PW-MPLS-STD-MIB", "pwMplsTeMappingPwIndex"))
if mibBuilder.loadTexts: pwMplsTeMappingEntry.setStatus('current')
pwMplsTeMappingTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 5, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: pwMplsTeMappingTunnelIndex.setStatus('current')
pwMplsTeMappingTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 5, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: pwMplsTeMappingTunnelInstance.setStatus('current')
pwMplsTeMappingTunnelPeerLsrID = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 5, 1, 3), MplsLsrIdentifier())
if mibBuilder.loadTexts: pwMplsTeMappingTunnelPeerLsrID.setStatus('current')
pwMplsTeMappingTunnelLocalLsrID = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 5, 1, 4), MplsLsrIdentifier())
if mibBuilder.loadTexts: pwMplsTeMappingTunnelLocalLsrID.setStatus('current')
pwMplsTeMappingPwIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 181, 1, 5, 1, 5), PwIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMplsTeMappingPwIndex.setStatus('current')
pwMplsGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 181, 2, 1))
pwMplsCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 181, 2, 2))
pwMplsModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 181, 2, 2, 1)).setObjects(("PW-MPLS-STD-MIB", "pwMplsGroup"), ("PW-MPLS-STD-MIB", "pwMplsOutboundMainGroup"), ("PW-MPLS-STD-MIB", "pwMplsInboundGroup"), ("PW-MPLS-STD-MIB", "pwMplsMappingGroup"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsModuleFullCompliance = pwMplsModuleFullCompliance.setStatus('current')
pwMplsModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 181, 2, 2, 2)).setObjects(("PW-MPLS-STD-MIB", "pwMplsGroup"), ("PW-MPLS-STD-MIB", "pwMplsOutboundMainGroup"), ("PW-MPLS-STD-MIB", "pwMplsInboundGroup"), ("PW-MPLS-STD-MIB", "pwMplsMappingGroup"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsModuleReadOnlyCompliance = pwMplsModuleReadOnlyCompliance.setStatus('current')
pwMplsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 181, 2, 1, 1)).setObjects(("PW-MPLS-STD-MIB", "pwMplsMplsType"), ("PW-MPLS-STD-MIB", "pwMplsExpBitsMode"), ("PW-MPLS-STD-MIB", "pwMplsExpBits"), ("PW-MPLS-STD-MIB", "pwMplsTtl"), ("PW-MPLS-STD-MIB", "pwMplsLocalLdpID"), ("PW-MPLS-STD-MIB", "pwMplsLocalLdpEntityIndex"), ("PW-MPLS-STD-MIB", "pwMplsPeerLdpID"), ("PW-MPLS-STD-MIB", "pwMplsStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsGroup = pwMplsGroup.setStatus('current')
pwMplsOutboundMainGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 181, 2, 1, 2)).setObjects(("PW-MPLS-STD-MIB", "pwMplsOutboundLsrXcIndex"), ("PW-MPLS-STD-MIB", "pwMplsOutboundIfIndex"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTunnelTypeInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsOutboundMainGroup = pwMplsOutboundMainGroup.setStatus('current')
pwMplsOutboundTeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 181, 2, 1, 3)).setObjects(("PW-MPLS-STD-MIB", "pwMplsOutboundTunnelIndex"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTunnelInstance"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTunnelLclLSR"), ("PW-MPLS-STD-MIB", "pwMplsOutboundTunnelPeerLSR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsOutboundTeGroup = pwMplsOutboundTeGroup.setStatus('current')
pwMplsInboundGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 181, 2, 1, 4)).setObjects(("PW-MPLS-STD-MIB", "pwMplsInboundXcIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsInboundGroup = pwMplsInboundGroup.setStatus('current')
pwMplsMappingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 181, 2, 1, 5)).setObjects(("PW-MPLS-STD-MIB", "pwMplsNonTeMappingPwIndex"), ("PW-MPLS-STD-MIB", "pwMplsTeMappingPwIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwMplsMappingGroup = pwMplsMappingGroup.setStatus('current')
mibBuilder.exportSymbols("PW-MPLS-STD-MIB", pwMplsExpBitsMode=pwMplsExpBitsMode, pwMplsNonTeMappingPwIndex=pwMplsNonTeMappingPwIndex, pwMplsOutboundTunnelLclLSR=pwMplsOutboundTunnelLclLSR, pwMplsTeMappingTunnelPeerLsrID=pwMplsTeMappingTunnelPeerLsrID, pwMplsMplsType=pwMplsMplsType, pwMplsGroup=pwMplsGroup, pwMplsStorageType=pwMplsStorageType, pwMplsOutboundEntry=pwMplsOutboundEntry, pwMplsPeerLdpID=pwMplsPeerLdpID, pwMplsOutboundMainGroup=pwMplsOutboundMainGroup, pwMplsOutboundTunnelTypeInUse=pwMplsOutboundTunnelTypeInUse, pwMplsInboundGroup=pwMplsInboundGroup, PYSNMP_MODULE_ID=pwMplsStdMIB, pwMplsInboundXcIndex=pwMplsInboundXcIndex, pwMplsTeMappingTable=pwMplsTeMappingTable, pwMplsNonTeMappingDirection=pwMplsNonTeMappingDirection, pwMplsObjects=pwMplsObjects, pwMplsMappingGroup=pwMplsMappingGroup, pwMplsGroups=pwMplsGroups, pwMplsTeMappingTunnelLocalLsrID=pwMplsTeMappingTunnelLocalLsrID, pwMplsTeMappingTunnelIndex=pwMplsTeMappingTunnelIndex, pwMplsConformance=pwMplsConformance, pwMplsModuleFullCompliance=pwMplsModuleFullCompliance, pwMplsLocalLdpEntityIndex=pwMplsLocalLdpEntityIndex, pwMplsOutboundIfIndex=pwMplsOutboundIfIndex, pwMplsNonTeMappingXcIndex=pwMplsNonTeMappingXcIndex, pwMplsOutboundLsrXcIndex=pwMplsOutboundLsrXcIndex, pwMplsInboundTable=pwMplsInboundTable, pwMplsLocalLdpID=pwMplsLocalLdpID, pwMplsNotifications=pwMplsNotifications, pwMplsTeMappingPwIndex=pwMplsTeMappingPwIndex, pwMplsInboundEntry=pwMplsInboundEntry, pwMplsTeMappingEntry=pwMplsTeMappingEntry, pwMplsNonTeMappingEntry=pwMplsNonTeMappingEntry, pwMplsOutboundTunnelInstance=pwMplsOutboundTunnelInstance, pwMplsOutboundTeGroup=pwMplsOutboundTeGroup, pwMplsOutboundTable=pwMplsOutboundTable, pwMplsStdMIB=pwMplsStdMIB, pwMplsEntry=pwMplsEntry, pwMplsTeMappingTunnelInstance=pwMplsTeMappingTunnelInstance, pwMplsExpBits=pwMplsExpBits, pwMplsNonTeMappingTable=pwMplsNonTeMappingTable, pwMplsCompliances=pwMplsCompliances, pwMplsOutboundTunnelPeerLSR=pwMplsOutboundTunnelPeerLSR, pwMplsTtl=pwMplsTtl, pwMplsTable=pwMplsTable, pwMplsNonTeMappingIfIndex=pwMplsNonTeMappingIfIndex, pwMplsModuleReadOnlyCompliance=pwMplsModuleReadOnlyCompliance, pwMplsOutboundTunnelIndex=pwMplsOutboundTunnelIndex)
