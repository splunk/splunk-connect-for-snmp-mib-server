#
# PySNMP MIB module ExtendAirG2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ExtendAirG2
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
systemConfig, = mibBuilder.importSymbols("ExaltComProducts", "systemConfig")
AcmPolicyT, ExaltEnableT, BandwidthT, AcmTargetModulationT, ModulationT, AcmBaseModulationT, RadioTxPwr15gT, BuzTimeoutT, DiplexerConfigG2T, RadioSourceT = mibBuilder.importSymbols("ExaltComm", "AcmPolicyT", "ExaltEnableT", "BandwidthT", "AcmTargetModulationT", "ModulationT", "AcmBaseModulationT", "RadioTxPwr15gT", "BuzTimeoutT", "DiplexerConfigG2T", "RadioSourceT")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, iso, IpAddress, Integer32, Bits, Gauge32, ObjectIdentity, Unsigned32, NotificationType, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "iso", "IpAddress", "Integer32", "Bits", "Gauge32", "ObjectIdentity", "Unsigned32", "NotificationType", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
extendAirG2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57))
extendAirG2.setRevisions(('2013-04-26 10:21',))
if mibBuilder.loadTexts: extendAirG2.setLastUpdated('201304261021Z')
if mibBuilder.loadTexts: extendAirG2.setOrganization('Exalt')
extendAirG2TxPower = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 1), RadioTxPwr15gT()).setUnits('Tenths of dBm.').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2TxPower.setStatus('current')
extendAirG2Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 2), BandwidthT()).setUnits('kHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2Bandwidth.setStatus('current')
extendAirG2Modulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 3), ModulationT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2Modulation.setStatus('current')
extendAirG2TXfrequency = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 9))).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2TXfrequency.setStatus('current')
extendAirG2RXfrequency = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 9))).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2RXfrequency.setStatus('current')
extendAirG2DiplexerConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 6), DiplexerConfigG2T()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2DiplexerConfiguration.setStatus('current')
extendAirG2InsertionLoss = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('Hundredth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2InsertionLoss.setStatus('current')
extendAirG2BuzTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 8), BuzTimeoutT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2BuzTimeout.setStatus('current')
extendAirG2AcmMode = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 9), ExaltEnableT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2AcmMode.setStatus('current')
extendAirG2AcmPolicy = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 10), AcmPolicyT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2AcmPolicy.setStatus('current')
extendAirG2AcmBaseModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 11), AcmBaseModulationT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2AcmBaseModulation.setStatus('current')
extendAirG2AcmTargetModulation = MibScalar((1, 3, 6, 1, 4, 1, 25651, 1, 2, 3, 1, 57, 12), AcmTargetModulationT()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extendAirG2AcmTargetModulation.setStatus('current')
mibBuilder.exportSymbols("ExtendAirG2", extendAirG2InsertionLoss=extendAirG2InsertionLoss, extendAirG2AcmBaseModulation=extendAirG2AcmBaseModulation, extendAirG2Bandwidth=extendAirG2Bandwidth, extendAirG2TXfrequency=extendAirG2TXfrequency, extendAirG2=extendAirG2, extendAirG2AcmTargetModulation=extendAirG2AcmTargetModulation, extendAirG2TxPower=extendAirG2TxPower, extendAirG2AcmMode=extendAirG2AcmMode, extendAirG2DiplexerConfiguration=extendAirG2DiplexerConfiguration, extendAirG2Modulation=extendAirG2Modulation, PYSNMP_MODULE_ID=extendAirG2, extendAirG2BuzTimeout=extendAirG2BuzTimeout, extendAirG2AcmPolicy=extendAirG2AcmPolicy, extendAirG2RXfrequency=extendAirG2RXfrequency)
