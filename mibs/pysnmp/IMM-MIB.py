#
# PySNMP MIB module IMM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IMM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, Bits, MibIdentifier, iso, ObjectIdentity, Gauge32, IpAddress, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, NotificationType, enterprises, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Bits", "MibIdentifier", "iso", "ObjectIdentity", "Gauge32", "IpAddress", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "NotificationType", "enterprises", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class InetAddressIPv6(TextualConvention, OctetString):
    status = 'mandatory'
    displayHint = '02x:02x:02x:02x:02x:02x:02x:02x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
netfinitySupportProcessorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51))
ibmIntegratedManagementModuleMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1))
errorLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2))
configureSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3))
generalSystemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4))
systemPower = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5))
restartReset = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6))
firmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7))
serviceAdvisor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8))
scaling = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9))
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1))
tempNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNumber.setStatus('mandatory')
tempTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2), )
if mibBuilder.loadTexts: tempTable.setStatus('mandatory')
tempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1), ).setIndexNames((0, "IMM-MIB", "tempIndex"))
if mibBuilder.loadTexts: tempEntry.setStatus('mandatory')
tempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempIndex.setStatus('mandatory')
tempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempDescr.setStatus('mandatory')
tempReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 3), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempReading.setStatus('mandatory')
tempNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 4), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNominalReading.setStatus('mandatory')
tempNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 5), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonRecovLimitHigh.setStatus('mandatory')
tempCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 6), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempCritLimitHigh.setStatus('mandatory')
tempNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 7), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonCritLimitHigh.setStatus('mandatory')
tempNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 8), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonRecovLimitLow.setStatus('mandatory')
tempCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 9), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempCritLimitLow.setStatus('mandatory')
tempNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 10), Integer32()).setUnits('Degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempNonCritLimitLow.setStatus('mandatory')
tempHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempHealthStatus.setStatus('mandatory')
voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2))
voltNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNumber.setStatus('mandatory')
voltTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2), )
if mibBuilder.loadTexts: voltTable.setStatus('mandatory')
voltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1), ).setIndexNames((0, "IMM-MIB", "voltIndex"))
if mibBuilder.loadTexts: voltEntry.setStatus('mandatory')
voltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltIndex.setStatus('mandatory')
voltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltDescr.setStatus('mandatory')
voltReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 3), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltReading.setStatus('mandatory')
voltNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 4), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNominalReading.setStatus('mandatory')
voltNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 5), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonRecovLimitHigh.setStatus('mandatory')
voltCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 6), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltCritLimitHigh.setStatus('mandatory')
voltNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 7), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonCritLimitHigh.setStatus('mandatory')
voltNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 8), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonRecovLimitLow.setStatus('mandatory')
voltCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 9), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltCritLimitLow.setStatus('mandatory')
voltNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 10), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: voltNonCritLimitLow.setStatus('mandatory')
voltHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltHealthStatus.setStatus('mandatory')
fans = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3))
fanNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2), )
if mibBuilder.loadTexts: fanTable.setStatus('mandatory')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('mandatory')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('mandatory')
fanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDescr.setStatus('mandatory')
fanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeed.setStatus('mandatory')
fanNonRecovLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 4), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonRecovLimitHigh.setStatus('mandatory')
fanCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 5), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCritLimitHigh.setStatus('mandatory')
fanNonCritLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 6), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonCritLimitHigh.setStatus('mandatory')
fanNonRecovLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 7), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonRecovLimitLow.setStatus('mandatory')
fanCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 8), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCritLimitLow.setStatus('mandatory')
fanNonCritLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 9), Integer32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNonCritLimitLow.setStatus('mandatory')
fanHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanHealthStatus.setStatus('mandatory')
systemHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4))
systemHealthStat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 255))).clone(namedValues=NamedValues(("nonRecoverable", 0), ("critical", 2), ("nonCritical", 4), ("normal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthStat.setStatus('mandatory')
systemHealthSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2), )
if mibBuilder.loadTexts: systemHealthSummaryTable.setStatus('mandatory')
systemHealthSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1), ).setIndexNames((0, "IMM-MIB", "systemHealthSummaryIndex"))
if mibBuilder.loadTexts: systemHealthSummaryEntry.setStatus('mandatory')
systemHealthSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryIndex.setStatus('mandatory')
systemHealthSummarySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummarySeverity.setStatus('mandatory')
systemHealthSummaryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHealthSummaryDescription.setStatus('mandatory')
vpdInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5))
immVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1), )
if mibBuilder.loadTexts: immVpdTable.setStatus('mandatory')
immVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "immVpdIndex"))
if mibBuilder.loadTexts: immVpdEntry.setStatus('mandatory')
immVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdIndex.setStatus('mandatory')
immVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdType.setStatus('mandatory')
immVpdVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdVersionString.setStatus('mandatory')
immVpdReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVpdReleaseDate.setStatus('mandatory')
machineVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2))
machineLevelVpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1))
machineLevelVpdMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelVpdMachineType.setStatus('mandatory')
machineLevelVpdMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelVpdMachineModel.setStatus('mandatory')
machineLevelSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelSerialNumber.setStatus('mandatory')
machineLevelUUID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelUUID.setStatus('mandatory')
machineLevelProductName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineLevelProductName.setStatus('mandatory')
systemComponentLevelVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17), )
if mibBuilder.loadTexts: systemComponentLevelVpdTable.setStatus('mandatory')
systemComponentLevelVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1), ).setIndexNames((0, "IMM-MIB", "componentLevelVpdIndex"))
if mibBuilder.loadTexts: systemComponentLevelVpdEntry.setStatus('mandatory')
componentLevelVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdIndex.setStatus('mandatory')
componentLevelVpdFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdFruNumber.setStatus('mandatory')
componentLevelVpdFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdFruName.setStatus('mandatory')
componentLevelVpdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdSerialNumber.setStatus('mandatory')
componentLevelVpdManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 17, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdManufacturingId.setStatus('mandatory')
systemComponentLevelVpdTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18), )
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingTable.setStatus('mandatory')
systemComponentLevelVpdTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1), ).setIndexNames((0, "IMM-MIB", "componentLevelVpdTrackingIndex"))
if mibBuilder.loadTexts: systemComponentLevelVpdTrackingEntry.setStatus('mandatory')
componentLevelVpdTrackingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingIndex.setStatus('mandatory')
componentLevelVpdTrackingFruNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingFruNumber.setStatus('mandatory')
componentLevelVpdTrackingFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingFruName.setStatus('mandatory')
componentLevelVpdTrackingSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingSerialNumber.setStatus('mandatory')
componentLevelVpdTrackingManufacturingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingManufacturingId.setStatus('mandatory')
componentLevelVpdTrackingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingAction.setStatus('mandatory')
componentLevelVpdTrackingTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 18, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLevelVpdTrackingTimestamp.setStatus('mandatory')
hostMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19), )
if mibBuilder.loadTexts: hostMACAddressTable.setStatus('mandatory')
hostMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1), ).setIndexNames((0, "IMM-MIB", "hostMACAddressIndex"))
if mibBuilder.loadTexts: hostMACAddressEntry.setStatus('mandatory')
hostMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddressIndex.setStatus('mandatory')
hostMACAddressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddressDescription.setStatus('mandatory')
hostMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostMACAddress.setStatus('mandatory')
systemCPUVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20), )
if mibBuilder.loadTexts: systemCPUVpdTable.setStatus('mandatory')
systemCPUVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1), ).setIndexNames((0, "IMM-MIB", "cpuVpdIndex"))
if mibBuilder.loadTexts: systemCPUVpdEntry.setStatus('mandatory')
cpuVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdIndex.setStatus('mandatory')
cpuVpdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdDescription.setStatus('mandatory')
cpuVpdSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdSpeed.setStatus('mandatory')
cpuVpdIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdIdentifier.setStatus('mandatory')
cpuVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdType.setStatus('mandatory')
cpuVpdFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdFamily.setStatus('mandatory')
cpuVpdCores = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdCores.setStatus('mandatory')
cpuVpdThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdThreads.setStatus('mandatory')
cpuVpdVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdVoltage.setStatus('mandatory')
cpuVpdDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdDataWidth.setStatus('mandatory')
cpuVpdHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 20, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVpdHealthStatus.setStatus('mandatory')
systemMemoryVpdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21), )
if mibBuilder.loadTexts: systemMemoryVpdTable.setStatus('mandatory')
systemMemoryVpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1), ).setIndexNames((0, "IMM-MIB", "memoryVpdIndex"))
if mibBuilder.loadTexts: systemMemoryVpdEntry.setStatus('mandatory')
memoryVpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdIndex.setStatus('mandatory')
memoryVpdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdDescription.setStatus('mandatory')
memoryVpdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdPartNumber.setStatus('mandatory')
memoryVpdFRUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdFRUSerialNumber.setStatus('mandatory')
memoryVpdManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdManufactureDate.setStatus('mandatory')
memoryVpdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdType.setStatus('mandatory')
memoryVpdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryVpdSize.setStatus('mandatory')
memoryHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 5, 21, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryHealthStatus.setStatus('mandatory')
users = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6))
immUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1))
currentlyLoggedInTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1), )
if mibBuilder.loadTexts: currentlyLoggedInTable.setStatus('mandatory')
currentlyLoggedInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1), ).setIndexNames((0, "IMM-MIB", "currentlyLoggedInEntryIndex"))
if mibBuilder.loadTexts: currentlyLoggedInEntry.setStatus('mandatory')
currentlyLoggedInEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryIndex.setStatus('mandatory')
currentlyLoggedInEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryUserId.setStatus('mandatory')
currentlyLoggedInEntryAccMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 6, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentlyLoggedInEntryAccMethod.setStatus('mandatory')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8))
identityLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identityLED.setStatus('mandatory')
allLEDsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2), )
if mibBuilder.loadTexts: allLEDsTable.setStatus('mandatory')
allLEDsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1), ).setIndexNames((0, "IMM-MIB", "ledIndex"))
if mibBuilder.loadTexts: allLEDsEntry.setStatus('mandatory')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIndex.setStatus('mandatory')
ledIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIdentifier.setStatus('mandatory')
ledLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledLabel.setStatus('mandatory')
ledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledState.setStatus('mandatory')
ledColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledColor.setStatus('mandatory')
informationLED = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("blinking", 2), ("notAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: informationLED.setStatus('mandatory')
osFailureCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9))
osFailureCaptureTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureTftpServer.setStatus('mandatory')
osFailureCaptureFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureFileName.setStatus('mandatory')
osFailureCaptureSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osFailureCaptureSaveStart.setStatus('mandatory')
osFailureCaptureSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("success", 0), ("failed", 1), ("nocapture", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osFailureCaptureSaveStatus.setStatus('mandatory')
fuelGauge = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10))
fuelGaugeInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1))
fuelGaugePowerCappingPolicySetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noPowerLimit", 0), ("staticPowerLimit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugePowerCappingPolicySetting.setStatus('mandatory')
fuelGaugeStaticPowerPcapSoftMin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapSoftMin.setStatus('mandatory')
fuelGaugeStaticPowerPcapMin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMin.setStatus('mandatory')
fuelGaugeStaticPowerPcapCurrentSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapCurrentSetting.setStatus('mandatory')
fuelGaugeStaticPowerPcapMax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMax.setStatus('mandatory')
fuelGaugeStaticPowerPcapMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dc", 0), ("ac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fuelGaugeStaticPowerPcapMode.setStatus('mandatory')
fuelGaugeSystemMaxPower = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeSystemMaxPower.setStatus('mandatory')
fuelGaugePowerRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerRemaining.setStatus('mandatory')
fuelGaugeTotalPowerAvaialble = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPowerAvaialble.setStatus('mandatory')
fuelGaugeTotalPowerInUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalPowerInUse.setStatus('mandatory')
fuelGaugeTotalThermalOutput = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugeTotalThermalOutput.setStatus('mandatory')
fuelGaugePowerConsumptionCpu = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionCpu.setStatus('mandatory')
fuelGaugePowerConsumptionMemory = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionMemory.setStatus('mandatory')
fuelGaugePowerConsumptionOther = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fuelGaugePowerConsumptionOther.setStatus('mandatory')
powerPolicyInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2))
powerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1), )
if mibBuilder.loadTexts: powerPolicyTable.setStatus('mandatory')
powerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1), ).setIndexNames((0, "IMM-MIB", "powerPolicyIndex"))
if mibBuilder.loadTexts: powerPolicyEntry.setStatus('mandatory')
powerPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyIndex.setStatus('mandatory')
powerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyName.setStatus('mandatory')
powerPolicyPwrSupplyFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyPwrSupplyFailureLimit.setStatus('mandatory')
powerPolicyMaxPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyMaxPowerLimit.setStatus('mandatory')
powerPolicyEstimatedUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPolicyEstimatedUtilization.setStatus('mandatory')
powerPolicyActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerPolicyActivate.setStatus('mandatory')
powerPowerTrending = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3))
powerTrendingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lastHour", 0), ("last6Hours", 1), ("last12Hours", 2), ("last24Hours", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerTrendingPeriod.setStatus('mandatory')
powerTrendingPowerType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dc", 0), ("ac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerTrendingPowerType.setStatus('mandatory')
powerTrendingSampleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3), )
if mibBuilder.loadTexts: powerTrendingSampleTable.setStatus('mandatory')
powerTrendingSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1), ).setIndexNames((0, "IMM-MIB", "powerTrendingSampleIndex"))
if mibBuilder.loadTexts: powerTrendingSampleEntry.setStatus('mandatory')
powerTrendingSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleIndex.setStatus('mandatory')
powerTrendingSampleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleTimeStamp.setStatus('mandatory')
powerTrendingSampleAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleAve.setStatus('mandatory')
powerTrendingSampleMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleMin.setStatus('mandatory')
powerTrendingSampleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 10, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTrendingSampleMax.setStatus('mandatory')
powerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11))
powerNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNumber.setStatus('mandatory')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
powerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1), ).setIndexNames((0, "IMM-MIB", "powerIndex"))
if mibBuilder.loadTexts: powerEntry.setStatus('mandatory')
powerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerIndex.setStatus('mandatory')
powerFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFruName.setStatus('mandatory')
powerPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPartNumber.setStatus('mandatory')
powerFRUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFRUNumber.setStatus('mandatory')
powerFRUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFRUSerialNumber.setStatus('mandatory')
powerHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 11, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerHealthStatus.setStatus('mandatory')
disks = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12))
diskNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1), ).setIndexNames((0, "IMM-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('mandatory')
diskFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFruName.setStatus('mandatory')
diskHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHealthStatus.setStatus('mandatory')
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1))
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1), )
if mibBuilder.loadTexts: eventLogTable.setStatus('mandatory')
eventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1), ).setIndexNames((0, "IMM-MIB", "eventLogIndex"))
if mibBuilder.loadTexts: eventLogEntry.setStatus('mandatory')
eventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogIndex.setStatus('mandatory')
eventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogString.setStatus('mandatory')
eventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("error", 0), ("warning", 1), ("information", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverity.setStatus('mandatory')
eventLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDate.setStatus('mandatory')
eventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogTime.setStatus('mandatory')
eventLogClr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: eventLogClr.setStatus('mandatory')
eventLogTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogTftpServer.setStatus('mandatory')
eventLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogFileName.setStatus('mandatory')
eventLogSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventLogSaveStart.setStatus('mandatory')
eventLogSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSaveStatus.setStatus('mandatory')
remoteAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1))
generalRemoteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1))
remoteAlertRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryDelay.setStatus('mandatory')
remoteAlertRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noretry", 0), ("retry1", 1), ("retry2", 2), ("retry3", 3), ("retry4", 4), ("retry5", 5), ("retry6", 6), ("retry7", 7), ("retry8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertRetryCount.setStatus('mandatory')
remoteAlertEntryDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 90, 120, 150, 180, 210, 240))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("oneAndHalfMinutes", 90), ("twoMinutes", 120), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertEntryDelay.setStatus('mandatory')
snmpCriticalAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCriticalAlerts.setStatus('mandatory')
snmpWarningAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWarningAlerts.setStatus('mandatory')
snmpSystemAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAlerts.setStatus('mandatory')
remoteAccessTamperDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 30, 60, 120, 180, 240))).clone(namedValues=NamedValues(("nowait", 0), ("oneMinute", 1), ("twoMinutes", 2), ("threeMinutes", 3), ("fourMinutes", 4), ("fiveMinutes", 5), ("sixMinutes", 6), ("sevenMinutes", 7), ("tenMinutes", 10), ("fifteenMinutes", 15), ("twentyMinutes", 20), ("thirtyMinutes", 30), ("sixtyMinutes", 60), ("oneTwentyMinutes", 120), ("oneEightyMinutes", 180), ("twoFortyMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessTamperDelay.setStatus('mandatory')
userAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("localOnly", 0), ("ldapOnly", 1), ("localFirstThenLdap", 2), ("ldapFirstThenLocal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthenticationMethod.setStatus('mandatory')
webInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneMinutes", 0), ("fiveMinutes", 1), ("tenMinutes", 2), ("fifteenMinutes", 3), ("twentyMinutes", 4), ("noTimeout", 5), ("userPicksTimeout", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webInactivityTimeout.setStatus('mandatory')
snmpAlertFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10))
safSpTrapTempC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapTempC.setStatus('mandatory')
safSpTrapVoltC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapVoltC.setStatus('mandatory')
safSpTrapPowerC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerC.setStatus('mandatory')
safSpTrapHdC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHdC.setStatus('mandatory')
safSpTrapFanC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapFanC.setStatus('mandatory')
safSpTrapIhcC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapIhcC.setStatus('mandatory')
safSpTrapCPUC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapCPUC.setStatus('mandatory')
safSpTrapMemoryC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapMemoryC.setStatus('mandatory')
safSpTrapRdpsC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRdpsC.setStatus('mandatory')
safSpTrapHardwareC = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHardwareC.setStatus('mandatory')
safSpTrapRdpsN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRdpsN.setStatus('mandatory')
safSpTrapTempN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapTempN.setStatus('mandatory')
safSpTrapVoltN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapVoltN.setStatus('mandatory')
safSpTrapPowerN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerN.setStatus('mandatory')
safSpTrapFanN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapFanN.setStatus('mandatory')
safSpTrapCPUN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapCPUN.setStatus('mandatory')
safSpTrapMemoryN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapMemoryN.setStatus('mandatory')
safSpTrapHardwareN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapHardwareN.setStatus('mandatory')
safSpTrapRLogin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapRLogin.setStatus('mandatory')
safSpTrapOsToS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapOsToS.setStatus('mandatory')
safSpTrapAppS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapAppS.setStatus('mandatory')
safSpTrapPowerS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPowerS.setStatus('mandatory')
safSpTrapBootS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapBootS.setStatus('mandatory')
safSpTrapLdrToS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapLdrToS.setStatus('mandatory')
safSpTrapPFAS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapPFAS.setStatus('mandatory')
safSpTrapSysLogS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapSysLogS.setStatus('mandatory')
safSpTrapNwChangeS = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 10, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: safSpTrapNwChangeS.setStatus('mandatory')
customSecuritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20))
loginPasswordRequired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginPasswordRequired.setStatus('mandatory')
passwordExpirationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordExpirationPeriod.setStatus('mandatory')
minimumPasswordReuseCycle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("onePassword", 1), ("twoPasswords", 2), ("threePasswords", 3), ("fourPasswords", 4), ("fivePasswords", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumPasswordReuseCycle.setStatus('mandatory')
complexPasswordRulesEnforced = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: complexPasswordRulesEnforced.setStatus('mandatory')
minimumPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("passwordLengthOne", 1), ("passwordLengthTwo", 2), ("passwordLengthThree", 3), ("passwordLengthFour", 4), ("passwordLength5", 5), ("passwordLength6", 6), ("passwordLength7", 7), ("passwordLength8", 8), ("passwordLength9", 9), ("passwordLength10", 10), ("passwordLength11", 11), ("passwordLength12", 12), ("passwordLength13", 13), ("passwordLength14", 14), ("passwordLength15", 15), ("passwordLength16", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumPasswordLength.setStatus('mandatory')
defaultAdminPasswordExpired = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultAdminPasswordExpired.setStatus('mandatory')
minimumDiffCharsPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("oneChar", 1), ("twoChars", 2), ("threeChars", 3), ("fourChars", 4), ("fiveChars", 5), ("sixChars", 6), ("sevenChars", 7), ("eightChars", 8), ("nineChars", 9), ("tenChars", 10), ("elevenChars", 11), ("twelveChars", 12), ("thirteenChars", 13), ("fourteenChars", 14), ("fifteenChars", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minimumDiffCharsPassword.setStatus('mandatory')
changePasswordFirstAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changePasswordFirstAccess.setStatus('mandatory')
accountLockoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 10, 15, 20, 30, 60, 120, 180, 240))).clone(namedValues=NamedValues(("nowait", 0), ("oneMinute", 1), ("twoMinutes", 2), ("fiveMinutes", 5), ("tenMinutes", 10), ("fifteenMinutes", 15), ("twentyMinutes", 20), ("thirtyMinutes", 30), ("sixtyMinutes", 60), ("oneTwentyMinutes", 120), ("oneEightyMinutes", 180), ("twoFortyMinutes", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accountLockoutPeriod.setStatus('mandatory')
maxLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("oneTime", 1), ("twoTimes", 2), ("threeTimes", 3), ("fourTimes", 4), ("fiveTimes", 5), ("sixTimes", 6), ("sevenTimes", 7), ("eightTimes", 8), ("nineTimes", 9), ("tenTimes", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLoginFailures.setStatus('mandatory')
passwordChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 1, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordChangeInterval.setStatus('mandatory')
serialPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2))
portBaud = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6), ("baud115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaud.setStatus('mandatory')
portParity = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
serialRedirect = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 3))
enterCLIkeySeq = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterCLIkeySeq.setStatus('mandatory')
portStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneStopbit", 0), ("twoOrOnePtFive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('mandatory')
portCLImode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cliDisable", 0), ("cliWithEMScompatibleKeystrokeSeq", 1), ("cliWithUserDefinedKeystrokeSeq", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCLImode.setStatus('mandatory')
remoteAlertIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3))
remoteAlertIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: remoteAlertIdsTable.setStatus('mandatory')
remoteAlertIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "IMM-MIB", "remoteAlertIdEntryIndex"))
if mibBuilder.loadTexts: remoteAlertIdsEntry.setStatus('mandatory')
remoteAlertIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAlertIdEntryIndex.setStatus('mandatory')
remoteAlertIdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryStatus.setStatus('mandatory')
remoteAlertIdEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryName.setStatus('mandatory')
remoteAlertIdEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 320))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEmailAddr.setStatus('mandatory')
remoteAlertIdEntryCriticalAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryCriticalAlert.setStatus('mandatory')
remoteAlertIdEntryWarningAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryWarningAlert.setStatus('mandatory')
remoteAlertIdEntrySystemAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySystemAlert.setStatus('mandatory')
remoteAlertIdEntryAttachmentsToEmailAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAttachments", 0), ("attachEventLog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryAttachmentsToEmailAlerts.setStatus('mandatory')
remoteAlertIdEntrySyslogPortAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogPortAssignment.setStatus('mandatory')
remoteAlertIdEntrySyslogHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntrySyslogHostname.setStatus('mandatory')
remoteAlertIdEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("email", 1), ("syslog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAlertIdEntryType.setStatus('mandatory')
remoteAlertFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2), )
if mibBuilder.loadTexts: remoteAlertFiltersTable.setStatus('mandatory')
remoteAlertFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "rafIndex"))
if mibBuilder.loadTexts: remoteAlertFiltersEntry.setStatus('mandatory')
rafIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rafIndex.setStatus('mandatory')
rafSpTrapTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapTempC.setStatus('mandatory')
rafSpTrapVoltC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapVoltC.setStatus('mandatory')
rafSpTrapPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerC.setStatus('mandatory')
rafSpTrapHdC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHdC.setStatus('mandatory')
rafSpTrapFanC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapFanC.setStatus('mandatory')
rafSpTrapIhcC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapIhcC.setStatus('mandatory')
rafSpTrapCPUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapCPUC.setStatus('mandatory')
rafSpTrapMemoryC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapMemoryC.setStatus('mandatory')
rafSpTrapRdpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRdpsC.setStatus('mandatory')
rafSpTrapHardwareC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHardwareC.setStatus('mandatory')
rafSpTrapRdpsN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRdpsN.setStatus('mandatory')
rafSpTrapTempN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapTempN.setStatus('mandatory')
rafSpTrapVoltN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapVoltN.setStatus('mandatory')
rafSpTrapPowerN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerN.setStatus('mandatory')
rafSpTrapFanN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapFanN.setStatus('mandatory')
rafSpTrapCPUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapCPUN.setStatus('mandatory')
rafSpTrapMemoryN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapMemoryN.setStatus('mandatory')
rafSpTrapHardwareN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapHardwareN.setStatus('mandatory')
rafSpTrapRLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapRLogin.setStatus('mandatory')
rafSpTrapOsToS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapOsToS.setStatus('mandatory')
rafSpTrapAppS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapAppS.setStatus('mandatory')
rafSpTrapPowerS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPowerS.setStatus('mandatory')
rafSpTrapBootS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapBootS.setStatus('mandatory')
rafSpTrapLdrToS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapLdrToS.setStatus('mandatory')
rafSpTrapPFAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapPFAS.setStatus('mandatory')
rafSpTrapSysLogS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapSysLogS.setStatus('mandatory')
rafSpTrapNwChangeS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rafSpTrapNwChangeS.setStatus('mandatory')
generateTestAlert = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: generateTestAlert.setStatus('mandatory')
remoteAccessIds = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4))
remoteAccessIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: remoteAccessIdsTable.setStatus('mandatory')
remoteAccessIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "IMM-MIB", "remoteAccessIdEntryIndex"))
if mibBuilder.loadTexts: remoteAccessIdsEntry.setStatus('mandatory')
remoteAccessIdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryIndex.setStatus('mandatory')
remoteAccessIdEntryUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryUserId.setStatus('mandatory')
remoteAccessIdEntryPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteAccessIdEntryPassword.setStatus('mandatory')
remoteAccessIdEntryUserPwdLeftDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteAccessIdEntryUserPwdLeftDays.setStatus('mandatory')
remoteAccessUserAuthorityLevelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2), )
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelTable.setStatus('mandatory')
remoteAccessUserAuthorityLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1), ).setIndexNames((0, "IMM-MIB", "ualIndex"))
if mibBuilder.loadTexts: remoteAccessUserAuthorityLevelEntry.setStatus('mandatory')
ualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualIndex.setStatus('mandatory')
ualId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ualId.setStatus('mandatory')
ualSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualSupervisor.setStatus('mandatory')
ualReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualReadOnly.setStatus('mandatory')
ualAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAccountManagement.setStatus('mandatory')
ualConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAccess.setStatus('mandatory')
ualConsoleAndVirtualMediaAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualConsoleAndVirtualMediaAccess.setStatus('mandatory')
ualServerPowerAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualServerPowerAccess.setStatus('mandatory')
ualAllowClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAllowClearLog.setStatus('mandatory')
ualAdapterBasicConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterBasicConfig.setStatus('mandatory')
ualAdapterNetworkAndSecurityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterNetworkAndSecurityConfig.setStatus('mandatory')
ualAdapterAdvancedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ualAdapterAdvancedConfig.setStatus('mandatory')
groupProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5))
groupIdsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1), )
if mibBuilder.loadTexts: groupIdsTable.setStatus('mandatory')
groupIdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupIdsEntry.setStatus('mandatory')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('mandatory')
groupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupId.setStatus('mandatory')
groupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRole.setStatus('mandatory')
groupRBSroleTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2), )
if mibBuilder.loadTexts: groupRBSroleTable.setStatus('mandatory')
groupRBSroleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1), ).setIndexNames((0, "IMM-MIB", "groupRBSroleIndex"))
if mibBuilder.loadTexts: groupRBSroleEntry.setStatus('mandatory')
groupRBSroleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleIndex.setStatus('mandatory')
groupRBSroleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRBSroleId.setStatus('mandatory')
groupRBSSupervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSSupervisor.setStatus('mandatory')
groupRBSOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSOperator.setStatus('mandatory')
groupRBSNetworkSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSNetworkSecurity.setStatus('mandatory')
groupRBSUserAccountManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSUserAccountManagement.setStatus('mandatory')
groupRBSRemoteConsoleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSRemoteConsoleAccess.setStatus('mandatory')
groupRBSRemoteConsoleRemoteDiskAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSRemoteConsoleRemoteDiskAccess.setStatus('mandatory')
groupRBSServerPowerRestartAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSServerPowerRestartAccess.setStatus('mandatory')
groupRBSBasicAdapterConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSBasicAdapterConfiguration.setStatus('mandatory')
groupRBSClearEventLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSClearEventLog.setStatus('mandatory')
groupRBSAdvancedAdapterConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupRBSAdvancedAdapterConfiguration.setStatus('mandatory')
sshClientAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6))
sshClientAuthPubKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1), )
if mibBuilder.loadTexts: sshClientAuthPubKeyTable.setStatus('mandatory')
sshClientAuthPubKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1), ).setIndexNames((0, "IMM-MIB", "sshClientAuthRemoteAccessIdIndex"), (0, "IMM-MIB", "sshClientAuthPubKeyIndex"))
if mibBuilder.loadTexts: sshClientAuthPubKeyEntry.setStatus('mandatory')
sshClientAuthRemoteAccessIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: sshClientAuthRemoteAccessIdIndex.setStatus('mandatory')
sshClientAuthPubKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: sshClientAuthPubKeyIndex.setStatus('mandatory')
sshClientAuthPubKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sshDss", 1), ("sshRsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyType.setStatus('mandatory')
sshClientAuthPubKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeySize.setStatus('mandatory')
sshClientAuthPubKeyFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyFingerprint.setStatus('mandatory')
sshClientAuthPubKeyAcceptFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyAcceptFrom.setStatus('mandatory')
sshClientAuthPubKeyComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyComment.setStatus('mandatory')
sshClientAuthPubKeyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyAction.setStatus('mandatory')
sshClientAuthPubKeyEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 1, 1, 9), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyEntryStatus.setStatus('mandatory')
sshClientAuthPubKeyUnused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshClientAuthPubKeyUnused.setStatus('mandatory')
sshClientAuthPubKeyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyTftpServer.setStatus('mandatory')
sshClientAuthPubKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyFileName.setStatus('mandatory')
sshClientAuthPubKeyFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSSH", 1), ("rfc4716", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshClientAuthPubKeyFileFormat.setStatus('mandatory')
spClock = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2))
spClockDateAndTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockDateAndTimeSetting.setStatus('mandatory')
spClockTimezoneSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spClockTimezoneSetting.setStatus('mandatory')
spIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3))
spTxtId = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spTxtId.setStatus('mandatory')
spRoomID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRoomID.setStatus('mandatory')
spRackID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRackID.setStatus('mandatory')
spRackUnitPosition = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spRackUnitPosition.setStatus('mandatory')
spRackUnitHeight = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spRackUnitHeight.setStatus('mandatory')
spRackBladeBay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spRackBladeBay.setStatus('mandatory')
networkConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4))
networkInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1))
ethernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1))
ethernetInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceType.setStatus('mandatory')
ethernetInterfaceEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("interfaceDisabled", 0), ("interfaceEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceEnabled.setStatus('mandatory')
ethernetInterfaceHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceHostName.setStatus('mandatory')
ethernetInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPAddress.setStatus('mandatory')
ethernetInterfaceAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceAutoNegotiate.setStatus('mandatory')
ethernetInterfaceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("enet10Megabit", 3), ("enet100Megabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDataRate.setStatus('mandatory')
ethernetInterfaceDuplexSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDuplexSetting.setStatus('mandatory')
ethernetInterfaceLAA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceLAA.setStatus('mandatory')
ethernetInterfaceDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcpDisabled", 0), ("dhcpEnabled", 1), ("dhcpTry", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDhcpEnabled.setStatus('mandatory')
ethernetInterfaceGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceGatewayIPAddress.setStatus('mandatory')
ethernetInterfaceBIA = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceBIA.setStatus('mandatory')
ethernetInterfaceMTU = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceMTU.setStatus('mandatory')
ethernetInterfaceSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceSubnetMask.setStatus('mandatory')
dhcpEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14))
dhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpHostName.setStatus('mandatory')
dhcpIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpIPAddress.setStatus('mandatory')
dhcpGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGatewayIPAddress.setStatus('mandatory')
dhcpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
dhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDomainName.setStatus('mandatory')
dhcpPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPrimaryDNSServer.setStatus('mandatory')
dhcpSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSecondaryDNSServer.setStatus('mandatory')
dhcpTertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 14, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpTertiaryDNSServer.setStatus('mandatory')
ethernetInterfaceVlan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceVlan.setStatus('mandatory')
ethernetInterfaceVlanID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceVlanID.setStatus('mandatory')
ethernetInterfaceIPv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4))
ethernetInterfaceIPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6Enabled.setStatus('mandatory')
ethernetInterfaceIPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5))
ethernetInterfaceIPv6LocalAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 1))
ethernetInterfaceIPv6LinkLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 1, 1), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceIPv6LinkLocalAddress.setStatus('mandatory')
ethernetInterfaceIPv6StaticIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2))
ethernetInterfaceIPv6StaticIPConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPConfigEnabled.setStatus('mandatory')
ethernetInterfaceIPv6StaticIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 2), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddress.setStatus('mandatory')
ethernetInterfaceIPv6StaticIPAddressPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus('mandatory')
ethernetInterfaceIPv6StaticIPDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 2, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StaticIPDefaultRoute.setStatus('mandatory')
ethernetInterfaceIPv6AutoIPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3))
ethernetInterfaceDHCPv6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2))
ethernetInterfaceDHCPv6Enabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Enabled.setStatus('mandatory')
ethernetInterfaceDHCPv6IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6IPAddress.setStatus('mandatory')
ethernetInterfaceDHCPv6DomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6DomainName.setStatus('mandatory')
ethernetInterfaceDHCPv6PrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6PrimaryDNSServer.setStatus('mandatory')
ethernetInterfaceDHCPv6SecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6SecondaryDNSServer.setStatus('mandatory')
ethernetInterfaceDHCPv6TertiaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6TertiaryDNSServer.setStatus('mandatory')
ethernetInterfaceDHCPv6Server = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 2, 8), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceDHCPv6Server.setStatus('mandatory')
ethernetInterfaceIPv6StatelessAutoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3))
ethernetInterfaceIPv6StatelessAutoConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetInterfaceIPv6StatelessAutoConfigEnabled.setStatus('mandatory')
ethernetInterfaceStatelessAutoConfigAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2), )
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesTable.setStatus('mandatory')
ethernetInterfaceStatelessAutoConfigAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1), ).setIndexNames((0, "IMM-MIB", "ethernetInterfaceStatelessAutoConfigAddressesIndex"))
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesEntry.setStatus('mandatory')
ethernetInterfaceStatelessAutoConfigAddressesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesIndex.setStatus('mandatory')
ethernetInterfaceStatelessAutoConfigAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddresses.setStatus('mandatory')
ethernetInterfaceStatelessAutoConfigAddressesPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 4, 5, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus('mandatory')
ddnsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsStatus.setStatus('mandatory')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
ddnsDomainToUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddnsDomainToUse.setStatus('mandatory')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
tcpProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2))
snmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1))
snmpSystemName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemName.setStatus('mandatory')
snmpSystemContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemContact.setStatus('mandatory')
snmpSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemLocation.setStatus('mandatory')
snmpSystemAgentTrapsDisable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("trapsEnabled", 0), ("trapsDisabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemAgentTrapsDisable.setStatus('mandatory')
snmpAgentCommunityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('mandatory')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "snmpCommunityEntryIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('mandatory')
snmpCommunityEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpCommunityEntryIndex.setStatus('mandatory')
snmpCommunityEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityName.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress1.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress2.setStatus('mandatory')
snmpCommunityEntryCommunityIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityIpAddress3.setStatus('mandatory')
snmpCommunityEntryCommunityViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read-Traps", 1), ("write-Read-Traps", 2), ("traps-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityEntryCommunityViewType.setStatus('mandatory')
snmpv1SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv1SystemAgentEnable.setStatus('mandatory')
snmpv3SystemAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpv3SystemAgentEnable.setStatus('mandatory')
snmpAgentUserProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8))
snmpUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1), )
if mibBuilder.loadTexts: snmpUserProfileTable.setStatus('mandatory')
snmpUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1), ).setIndexNames((0, "IMM-MIB", "snmpUserProfileEntryIndex"))
if mibBuilder.loadTexts: snmpUserProfileEntry.setStatus('mandatory')
snmpUserProfileEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUserProfileEntryIndex.setStatus('mandatory')
snmpUserProfileEntryAuthProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryAuthProt.setStatus('mandatory')
snmpUserProfileEntryPrivProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("des", 2), ("aes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivProt.setStatus('mandatory')
snmpUserProfileEntryPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryPrivPassword.setStatus('mandatory')
snmpUserProfileEntryViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-Traps", 1), ("read-Write-Traps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryViewType.setStatus('mandatory')
snmpUserProfileEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 1, 8, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpUserProfileEntryIpAddress.setStatus('mandatory')
dnsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2))
dnsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnsDisabled", 0), ("dnsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnabled.setStatus('mandatory')
dnsServerIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress1.setStatus('mandatory')
dnsServerIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress2.setStatus('mandatory')
dnsServerIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPAddress3.setStatus('mandatory')
dnsServerIPv6Address1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 12), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address1.setStatus('mandatory')
dnsServerIPv6Address2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 13), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address2.setStatus('mandatory')
dnsServerIPv6Address3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 14), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerIPv6Address3.setStatus('mandatory')
dnsPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv6", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsPriority.setStatus('mandatory')
smtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3))
smtpServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerNameOrIPAddress.setStatus('mandatory')
smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerPort.setStatus('mandatory')
smtpServerAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthentication.setStatus('mandatory')
smtpServerAuthenticationUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationUser.setStatus('mandatory')
smtpServerAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationPassword.setStatus('mandatory')
smtpServerAuthenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("plain", 0), ("cram-md5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAuthenticationMethod.setStatus('mandatory')
tcpApplicationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4))
telnetConnectionCounts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetConnectionCounts.setStatus('mandatory')
slpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multicast", 0), ("broadcast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slpAddrType.setStatus('mandatory')
slpMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slpMulticastAddr.setStatus('mandatory')
sshServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5))
sshServerHostKeySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4), ("bits4096", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeySize.setStatus('mandatory')
sshServerHostKeyFingerprint = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeyFingerprint.setStatus('mandatory')
sshServerHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerHostKeyGenerate.setStatus('mandatory')
sshServerHostKeyGenerateProgress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerHostKeyGenerateProgress.setStatus('mandatory')
sshEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshEnable.setStatus('mandatory')
sslConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6))
sslHTTPSServerConfigForWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1))
sslEnableHTTPSforWeb = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableHTTPSforWeb.setStatus('mandatory')
sslHTTPSServerWebCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateGeneration.setStatus('mandatory')
sslHTTPSServerWebCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerWebCertificateTransfer.setStatus('mandatory')
sslHTTPSWebCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHTTPSWebCertificateStatus.setStatus('mandatory')
sslHTTPSServerConfigForCIMXML = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2))
sslEnableHTTPSforCIMXML = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableHTTPSforCIMXML.setStatus('mandatory')
sslHTTPSServerCIMXMLCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateGeneration.setStatus('mandatory')
sslHTTPSServerCIMXMLCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslHTTPSServerCIMXMLCertificateTransfer.setStatus('mandatory')
sslHTTPSCIMXMLCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHTTPSCIMXMLCertificateStatus.setStatus('mandatory')
sslClientConfigForLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3))
sslEnableClientLDAP = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslEnableClientLDAP.setStatus('mandatory')
sslClientLDAPCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateGeneration.setStatus('mandatory')
sslClientLDAPCertificateDownload = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateDownload.setStatus('mandatory')
sslClientLDAPCertificateImport = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("importSignedCertificate1", 1), ("importTrustedCertificate1", 2), ("importTrustedCertificate2", 3), ("importTrustedCertificate3", 4), ("importTrustedCertificate4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslClientLDAPCertificateImport.setStatus('mandatory')
sslClientLDAPCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPCertificateStatus.setStatus('mandatory')
sslClientLDAPTrustedCertificate1Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate1Status.setStatus('mandatory')
sslClientLDAPTrustedCertificate2Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate2Status.setStatus('mandatory')
sslClientLDAPTrustedCertificate3Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate3Status.setStatus('mandatory')
sslClientLDAPTrustedCertificate4Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientLDAPTrustedCertificate4Status.setStatus('mandatory')
sslConfigTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslConfigTftpServer.setStatus('mandatory')
sslConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslConfigFileName.setStatus('mandatory')
sslCertificateData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6))
sslCertificateDataCountry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCountry.setStatus('mandatory')
sslCertificateDataStateorProvince = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataStateorProvince.setStatus('mandatory')
sslCertificateDataCityOrLocality = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCityOrLocality.setStatus('mandatory')
sslCertificateDataOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataOrganizationName.setStatus('mandatory')
sslCertificateDataIMMHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataIMMHostName.setStatus('mandatory')
sslCertificateDataContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataContact.setStatus('mandatory')
sslCertificateDataEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataEmailAddr.setStatus('mandatory')
sslCertificateDataOrganizationUnit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataOrganizationUnit.setStatus('mandatory')
sslCertificateDataSurname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataSurname.setStatus('mandatory')
sslCertificateDataGivenName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataGivenName.setStatus('mandatory')
sslCertificateDataInitials = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataInitials.setStatus('mandatory')
sslCertificateDataDNQualifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataDNQualifier.setStatus('mandatory')
sslCertificateDataCSRChallengePassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCSRChallengePassword.setStatus('mandatory')
sslCertificateDataCSRUnstructuredName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 6, 6, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCertificateDataCSRUnstructuredName.setStatus('mandatory')
certDomainNames = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8))
certDomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1), )
if mibBuilder.loadTexts: certDomainNameTable.setStatus('mandatory')
certDomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1), ).setIndexNames((0, "IMM-MIB", "certDomainNameIndex"))
if mibBuilder.loadTexts: certDomainNameEntry.setStatus('mandatory')
certDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainIndex.setStatus('mandatory')
certDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainName.setStatus('mandatory')
certDomainNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certDomainNameStatus.setStatus('mandatory')
addCertDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCertDomainName.setStatus('mandatory')
rmCertDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmCertDomainName.setStatus('mandatory')
skrServers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9))
skrServerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1), )
if mibBuilder.loadTexts: skrServerTable.setStatus('mandatory')
skrServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1), ).setIndexNames((0, "IMM-MIB", "skrServerIndex"))
if mibBuilder.loadTexts: skrServerEntry.setStatus('mandatory')
skrServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skrServerIndex.setStatus('mandatory')
skrServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrServerHostname.setStatus('mandatory')
skrServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrServerPort.setStatus('mandatory')
skrServerCertAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("importServerCertificate", 1), ("removeServerCertificate", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: skrServerCertAction.setStatus('mandatory')
skrDeviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrDeviceGroup.setStatus('mandatory')
skrClientConfigCertficate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4))
skrClientCertificateGeneration = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generateNewKeyandSelfSigned", 1), ("generateNewKeyandCSR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrClientCertificateGeneration.setStatus('mandatory')
skrClientCertificateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importSignedCertificate", 1), ("downloadCertificate", 2), ("downloadCSR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrClientCertificateTransfer.setStatus('mandatory')
skrClientCertificateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-cert-installed", 1), ("self-signed-installed", 2), ("ca-signed-installed", 3), ("csr-generated", 4), ("self-signed-and-csr-generated", 5), ("ca-signed-and-csr-generated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: skrClientCertificateStatus.setStatus('mandatory')
skrCertificateData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5))
skrCertificateDataCountry = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCountry.setStatus('mandatory')
skrCertificateDataStateorProvince = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataStateorProvince.setStatus('mandatory')
skrCertificateDataCityOrLocality = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCityOrLocality.setStatus('mandatory')
skrCertificateDataOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataOrganizationName.setStatus('mandatory')
skrCertificateDataIMMHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataIMMHostName.setStatus('mandatory')
skrCertificateDataContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataContact.setStatus('mandatory')
skrCertificateDataEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataEmailAddr.setStatus('mandatory')
skrCertificateDataOrganizationUnit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataOrganizationUnit.setStatus('mandatory')
skrCertificateDataSurname = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataSurname.setStatus('mandatory')
skrCertificateDataGivenName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataGivenName.setStatus('mandatory')
skrCertificateDataInitials = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataInitials.setStatus('mandatory')
skrCertificateDataDNQualifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataDNQualifier.setStatus('mandatory')
skrCertificateDataCSRChallengePassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCSRChallengePassword.setStatus('mandatory')
skrCertificateDataCSRUnstructuredName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 5, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrCertificateDataCSRUnstructuredName.setStatus('mandatory')
skrConfigFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpServer.setStatus('mandatory')
skrConfigFtpServerMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("tftp", 1), ("sftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpServerMode.setStatus('mandatory')
skrConfigFtpCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpCallPort.setStatus('mandatory')
skrConfigFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFTPCallUserID.setStatus('mandatory')
skrConfigFtpCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFtpCallPassword.setStatus('mandatory')
skrConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 4, 9, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skrConfigFileName.setStatus('mandatory')
tcpPortAssignmentCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5))
tcpPortsRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tcpPortsRestoreDefault.setStatus('mandatory')
httpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPortAssignment.setStatus('mandatory')
httpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPortAssignment.setStatus('mandatory')
telnetLegacyCLIPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetLegacyCLIPortAssignment.setStatus('mandatory')
sshLegacyCLIPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshLegacyCLIPortAssignment.setStatus('mandatory')
snmpAgentPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentPortAssignment.setStatus('mandatory')
snmpTrapsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsPortAssignment.setStatus('mandatory')
remvidPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remvidPortAssignment.setStatus('mandatory')
ibmSystemDirectorHttpPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSystemDirectorHttpPortAssignment.setStatus('mandatory')
ibmSystemDirectorHttpsPortAssignment = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSystemDirectorHttpsPortAssignment.setStatus('mandatory')
ldapClientCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6))
ldapServer1NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1NameOrIPAddress.setStatus('mandatory')
ldapServer1PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer1PortNumber.setStatus('mandatory')
ldapServer2NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2NameOrIPAddress.setStatus('mandatory')
ldapServer2PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer2PortNumber.setStatus('mandatory')
ldapServer3NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3NameOrIPAddress.setStatus('mandatory')
ldapServer3PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer3PortNumber.setStatus('mandatory')
ldapServer4NameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4NameOrIPAddress.setStatus('mandatory')
ldapServer4PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServer4PortNumber.setStatus('mandatory')
ldapRootDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRootDN.setStatus('mandatory')
ldapUserSearchBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUserSearchBaseDN.setStatus('deprecated')
ldapGroupFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupFilter.setStatus('mandatory')
ldapBindingMethod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("anonymousAuthentication", 0), ("clientAuthentication", 1), ("userPrincipalName", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBindingMethod.setStatus('mandatory')
ldapClientAuthenticationDN = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationDN.setStatus('mandatory')
ldapClientAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuthenticationPassword.setStatus('mandatory')
ldapRoleBasedSecurityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapRoleBasedSecurityEnabled.setStatus('mandatory')
ldapServerTargetName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServerTargetName.setStatus('mandatory')
ldapUIDsearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUIDsearchAttribute.setStatus('mandatory')
ldapGroupSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapGroupSearchAttribute.setStatus('mandatory')
ldapLoginPermissionAttribute = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapLoginPermissionAttribute.setStatus('mandatory')
ldapUseDNSOrPreConfiguredServers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePreConfiguredLDAPServers", 0), ("useDNSToFindLDAPServers", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUseDNSOrPreConfiguredServers.setStatus('mandatory')
ldapDomainSource = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("extractSearchDomainFromLoginID", 0), ("useOnlyConfiguredSearchDomainBelow", 1), ("tryLoginFirstThenConfiguredValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapDomainSource.setStatus('mandatory')
ldapForestName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapForestName.setStatus('mandatory')
ldapAuthCfg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authenticationAndAuthorization", 0), ("authenticationOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapAuthCfg.setStatus('mandatory')
ldapSearchDomain = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapSearchDomain.setStatus('mandatory')
ldapServiceName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 6, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapServiceName.setStatus('mandatory')
ntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnable.setStatus('mandatory')
ntpIpAddressHostname1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname1.setStatus('mandatory')
ntpIpAddressHostname2 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname2.setStatus('mandatory')
ntpIpAddressHostname3 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname3.setStatus('mandatory')
ntpIpAddressHostname4 = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpIpAddressHostname4.setStatus('mandatory')
ntpUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpUpdateFrequency.setStatus('mandatory')
ntpUpdateClock = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 4, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ntpUpdateClock.setStatus('mandatory')
configurationManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5))
configurationManagementTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementTftpServer.setStatus('mandatory')
configurationManagementFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementFileName.setStatus('mandatory')
configurationManagementSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementSaveStart.setStatus('mandatory')
configurationManagementRestoreStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("execute-nowait", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationManagementRestoreStart.setStatus('mandatory')
configurationManagementStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("success", 0), ("failed", 1), ("saving", 2), ("restoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationManagementStatus.setStatus('mandatory')
immVersionCheck = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("immVersion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: immVersionCheck.setStatus('mandatory')
serverTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1))
oSHang = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 150, 180, 210, 240, 600))).clone(namedValues=NamedValues(("disabled", 0), ("twoAndHalfMinutes", 150), ("threeMinutes", 180), ("threeAndHalfMinutes", 210), ("fourMinutes", 240), ("tenMinutes", 600)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oSHang.setStatus('mandatory')
oSLoader = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 60, 120, 240))).clone(namedValues=NamedValues(("disabled", 0), ("oneHalfMinutes", 1), ("oneMinutes", 2), ("oneAndHalfMinutes", 3), ("twoMinutes", 4), ("twoAndHalfMinutes", 5), ("threeMinutes", 6), ("threeAndHalfMinutes", 7), ("fourMinutes", 8), ("fourAndHalfMinutes", 9), ("fiveMinutes", 10), ("sevenAndHalfMinutes", 15), ("tenMinutes", 20), ("fifteenMinutes", 30), ("twentyMinutes", 40), ("thirtyMinutes", 60), ("oneHour", 120), ("twoHours", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oSLoader.setStatus('mandatory')
networkPXEboot = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("networkPXEBootDisabled", 0), ("networkPXEBootEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPXEboot.setStatus('mandatory')
powerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1))
currentSysPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("poweredOff", 0), ("sleepS3", 1), ("poweredOn", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSysPowerStatus.setStatus('mandatory')
powerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerOnHours.setStatus('mandatory')
restartCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartCount.setStatus('mandatory')
systemState = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("systemPowerOfforStateUnknown", 0), ("systemPowerOnorStartingUEFI", 1), ("systemInUEFI", 2), ("uEFIErrorDetected", 3), ("bootingOSorInUnsupportedOS", 4), ("oSBooted", 5), ("suspendToRAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemState.setStatus('mandatory')
powerSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2))
powerSysOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 30, 60, 120, 180, 240, 300, 450, 600, 900, 1200, 1800, 3600, 7200))).clone(namedValues=NamedValues(("noDelay", 0), ("oneHalfMinute", 30), ("oneMinute", 60), ("twoMinutes", 120), ("threeMinutes", 180), ("fourMinutes", 240), ("fiveMinute", 300), ("sevenAndHalfMinutes", 450), ("tenMinutes", 600), ("fifteenMinutes", 900), ("twentyMinutes", 1200), ("thirtyMinutes", 1800), ("oneHour", 3600), ("twoHours", 7200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSysOffDelay.setStatus('mandatory')
powerSysOnClockSetting = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSysOnClockSetting.setStatus('mandatory')
powerOffSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3))
powerOffWithOsShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOffWithOsShutdown.setStatus('mandatory')
powerOffImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOffImmediately.setStatus('mandatory')
powerOnSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 4))
powerOnImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerOnImmediately.setStatus('mandatory')
powerCyclingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5))
schedulePowerOffWithOsShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePowerOffWithOsShutdown.setStatus('mandatory')
schedulePowerOnSystem = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePowerOnSystem.setStatus('mandatory')
powerControlSleep = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6))
powerEnterSleep = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerEnterSleep.setStatus('mandatory')
powerExitSleep = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 5, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: powerExitSleep.setStatus('mandatory')
shutdownOsThenRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: shutdownOsThenRestart.setStatus('mandatory')
restartSystemImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSystemImmediately.setStatus('mandatory')
restartSPImmediately = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSPImmediately.setStatus('mandatory')
resetSPConfigAndRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetSPConfigAndRestart.setStatus('mandatory')
scheduleShutdownOsThenRestart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleShutdownOsThenRestart.setStatus('mandatory')
resetPowerSchedules = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resetPowerSchedules.setStatus('mandatory')
firmwareUpdateTarget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("immCard", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTarget.setStatus('mandatory')
firmwareUpdateTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateTftpServer.setStatus('mandatory')
firmwareUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
firmwareUpdateStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: firmwareUpdateStart.setStatus('mandatory')
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 7, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
autoCallHomeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1))
acceptLicenseAgreement = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptLicenseAgreement.setStatus('mandatory')
serviceAdvisorEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAdvisorEnable.setStatus('mandatory')
serviceSupportCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 2))
ibmSupportCenter = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSupportCenter.setStatus('mandatory')
contactInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3))
companyName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: companyName.setStatus('mandatory')
contactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactName.setStatus('mandatory')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumber.setStatus('mandatory')
emailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAddress.setStatus('mandatory')
address = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: address.setStatus('mandatory')
city = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: city.setStatus('mandatory')
state = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: state.setStatus('mandatory')
postalCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: postalCode.setStatus('mandatory')
phoneExtension = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneExtension.setStatus('mandatory')
altContactName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altContactName.setStatus('mandatory')
altPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneNumber.setStatus('mandatory')
altPhoneExtension = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altPhoneExtension.setStatus('mandatory')
altEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altEmailAddress.setStatus('mandatory')
machineLocationPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 3, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: machineLocationPhoneNumber.setStatus('mandatory')
httpProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4))
httpProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyEnable.setStatus('mandatory')
httpProxyLocation = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyLocation.setStatus('mandatory')
httpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPort.setStatus('mandatory')
httpProxyUserName = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyUserName.setStatus('mandatory')
httpProxyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpProxyPassword.setStatus('mandatory')
activityLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5))
activityLogTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1), )
if mibBuilder.loadTexts: activityLogTable.setStatus('mandatory')
activityLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "activityLogIndex"))
if mibBuilder.loadTexts: activityLogEntry.setStatus('mandatory')
activityLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogIndex.setStatus('mandatory')
activityLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogString.setStatus('mandatory')
activityLogAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activityLogAcknowledge.setStatus('mandatory')
activityLogAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 5, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activityLogAttribute.setStatus('mandatory')
autoFTPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6))
autoFTPCallMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ftp", 1), ("tftp", 2), ("sftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallMode.setStatus('mandatory')
autoFTPCallAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallAddr.setStatus('mandatory')
autoFTPCallPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPort.setStatus('mandatory')
autoFTPCallUserID = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallUserID.setStatus('mandatory')
autoFTPCallPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFTPCallPassword.setStatus('mandatory')
callHomeExclusionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7))
readCallHomeExclusionEventTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1), )
if mibBuilder.loadTexts: readCallHomeExclusionEventTable.setStatus('mandatory')
readCallHomeExclusionEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1), ).setIndexNames((0, "IMM-MIB", "readCallHomeExclusionEventIndex"))
if mibBuilder.loadTexts: readCallHomeExclusionEventEntry.setStatus('mandatory')
readCallHomeExclusionEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventIndex.setStatus('mandatory')
readCallHomeExclusionEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readCallHomeExclusionEventID.setStatus('mandatory')
addCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addCallHomeExclusionEvent.setStatus('mandatory')
rmCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmCallHomeExclusionEvent.setStatus('mandatory')
rmAllCallHomeExclusionEvent = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmAllCallHomeExclusionEvent.setStatus('mandatory')
testCallHome = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 8))
generateTestCallHome = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: generateTestCallHome.setStatus('mandatory')
scalableComplex = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1))
scalableComplexIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexIdentifier.setStatus('mandatory')
scalableComplexNumPartitions = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNumPartitions.setStatus('mandatory')
scalableComplexNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNumNodes.setStatus('mandatory')
scalableComplexClear = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexClear.setStatus('mandatory')
scalableComplexPartition = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2))
scalableComplexPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1), )
if mibBuilder.loadTexts: scalableComplexPartitionTable.setStatus('mandatory')
scalableComplexPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexPartitionIdentifier"))
if mibBuilder.loadTexts: scalableComplexPartitionEntry.setStatus('mandatory')
scalableComplexPartitionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionIdentifier.setStatus('mandatory')
scalableComplexPartitionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partition", 1), ("standalone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scalableComplexPartitionMode.setStatus('mandatory')
scalableComplexPartitionPriNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionPriNodeKey.setStatus('mandatory')
scalableComplexPartitionNumNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionNumNodes.setStatus('mandatory')
scalableComplexPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poweredoff", 1), ("poweredon", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionStatus.setStatus('mandatory')
scalableComplexPartitionSelect = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionSelect.setStatus('mandatory')
scalableComplexPartitionAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("poweron", 2), ("poweroff", 3), ("powercycle", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionAction.setStatus('mandatory')
scalableComplexPartitionCreate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3))
scalableComplexPartitionCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1), )
if mibBuilder.loadTexts: scalableComplexPartitionCreateTable.setStatus('mandatory')
scalableComplexPartitionCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexPartitionCreateIndex"))
if mibBuilder.loadTexts: scalableComplexPartitionCreateEntry.setStatus('mandatory')
scalableComplexPartitionCreateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexPartitionCreateIndex.setStatus('mandatory')
scalableComplexPartitionCreateNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scalableComplexPartitionCreateNodeKey.setStatus('mandatory')
scalableComplexPartitionActionCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("clear", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexPartitionActionCreate.setStatus('mandatory')
scalableComplexNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4))
scalableComplexNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1), )
if mibBuilder.loadTexts: scalableComplexNodeTable.setStatus('mandatory')
scalableComplexNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexNodeIndex"))
if mibBuilder.loadTexts: scalableComplexNodeEntry.setStatus('mandatory')
scalableComplexNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeIndex.setStatus('mandatory')
scalableComplexNodeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeSerialNumber.setStatus('mandatory')
scalableComplexNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeKey.setStatus('mandatory')
scalableComplexNodePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePartitionID.setStatus('mandatory')
scalableComplexNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("unassigned", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeRole.setStatus('mandatory')
scalableComplexNodeNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodeNumPorts.setStatus('mandatory')
scalableComplexNodeSelect = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeSelect.setStatus('mandatory')
scalableComplexNodeAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poweroff", 1), ("poweron", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeAction.setStatus('mandatory')
scalableComplexNodeAutoCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("execute", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scalableComplexNodeAutoCreate.setStatus('mandatory')
scalableComplexNodePort = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5))
scalableComplexNodePortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1), )
if mibBuilder.loadTexts: scalableComplexNodePortTable.setStatus('mandatory')
scalableComplexNodePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1), ).setIndexNames((0, "IMM-MIB", "scalableComplexNodePortIndex"), (0, "IMM-MIB", "scalableComplexNodePortNum"))
if mibBuilder.loadTexts: scalableComplexNodePortEntry.setStatus('mandatory')
scalableComplexNodePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortIndex.setStatus('mandatory')
scalableComplexNodePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortNum.setStatus('mandatory')
scalableComplexNodePortRemNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortRemNodeKey.setStatus('mandatory')
scalableComplexNodePortRemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortRemNum.setStatus('mandatory')
scalableComplexNodePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortStatus.setStatus('mandatory')
scalableComplexNodePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 51, 3, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("qpi", 1), ("exa", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scalableComplexNodePortType.setStatus('mandatory')
mibBuilder.exportSymbols("IMM-MIB", scalableComplexPartitionCreateNodeKey=scalableComplexPartitionCreateNodeKey, users=users, osFailureCaptureFileName=osFailureCaptureFileName, tempCritLimitHigh=tempCritLimitHigh, altPhoneNumber=altPhoneNumber, scalableComplexNodePortRemNodeKey=scalableComplexNodePortRemNodeKey, tcpPortAssignmentCfg=tcpPortAssignmentCfg, ethernetInterfaceLAA=ethernetInterfaceLAA, activityLogs=activityLogs, sshClientAuthPubKeyTable=sshClientAuthPubKeyTable, dhcpDomainName=dhcpDomainName, skrCertificateDataStateorProvince=skrCertificateDataStateorProvince, skrCertificateDataOrganizationName=skrCertificateDataOrganizationName, minimumPasswordLength=minimumPasswordLength, componentLevelVpdSerialNumber=componentLevelVpdSerialNumber, scalableComplexNodePartitionID=scalableComplexNodePartitionID, restartReset=restartReset, powerPolicyTable=powerPolicyTable, ethernetInterfaceStatelessAutoConfigAddressesIndex=ethernetInterfaceStatelessAutoConfigAddressesIndex, eventLog=eventLog, snmpCommunityEntryCommunityViewType=snmpCommunityEntryCommunityViewType, remoteAlertEntryDelay=remoteAlertEntryDelay, safSpTrapFanN=safSpTrapFanN, fuelGaugePowerRemaining=fuelGaugePowerRemaining, ualAdapterNetworkAndSecurityConfig=ualAdapterNetworkAndSecurityConfig, rafSpTrapTempC=rafSpTrapTempC, sslCertificateDataOrganizationUnit=sslCertificateDataOrganizationUnit, remoteAlertRetryCount=remoteAlertRetryCount, snmpSystemAgentTrapsDisable=snmpSystemAgentTrapsDisable, dhcpIPAddress=dhcpIPAddress, scheduleShutdownOsThenRestart=scheduleShutdownOsThenRestart, groupRBSBasicAdapterConfiguration=groupRBSBasicAdapterConfiguration, sslHTTPSCIMXMLCertificateStatus=sslHTTPSCIMXMLCertificateStatus, slpAddrType=slpAddrType, serverTimers=serverTimers, activityLogString=activityLogString, scalableComplexPartitionMode=scalableComplexPartitionMode, currentlyLoggedInTable=currentlyLoggedInTable, currentSysPowerStatus=currentSysPowerStatus, powerPolicyEstimatedUtilization=powerPolicyEstimatedUtilization, slpMulticastAddr=slpMulticastAddr, eventLogDate=eventLogDate, scalableComplexPartitionEntry=scalableComplexPartitionEntry, scalableComplexNodeNumPorts=scalableComplexNodeNumPorts, errorLogs=errorLogs, fuelGaugePowerConsumptionOther=fuelGaugePowerConsumptionOther, eventLogTable=eventLogTable, scalableComplexPartitionIdentifier=scalableComplexPartitionIdentifier, hostMACAddressIndex=hostMACAddressIndex, scalableComplexNodePortIndex=scalableComplexNodePortIndex, tempNonRecovLimitLow=tempNonRecovLimitLow, fuelGaugeStaticPowerPcapMode=fuelGaugeStaticPowerPcapMode, snmpSystemAlerts=snmpSystemAlerts, snmpCriticalAlerts=snmpCriticalAlerts, snmpAgentConfig=snmpAgentConfig, voltEntry=voltEntry, eventLogSeverity=eventLogSeverity, serialPortCfg=serialPortCfg, scalableComplexNumNodes=scalableComplexNumNodes, hostMACAddressTable=hostMACAddressTable, groupRBSroleEntry=groupRBSroleEntry, osFailureCaptureSaveStatus=osFailureCaptureSaveStatus, skrClientCertificateStatus=skrClientCertificateStatus, snmpAgentUserProfileConfig=snmpAgentUserProfileConfig, ualAccountManagement=ualAccountManagement, activityLogAttribute=activityLogAttribute, ethernetInterfaceIPv6StaticIPDefaultRoute=ethernetInterfaceIPv6StaticIPDefaultRoute, powerTrendingSampleTimeStamp=powerTrendingSampleTimeStamp, remvidPortAssignment=remvidPortAssignment, httpPortAssignment=httpPortAssignment, rafSpTrapNwChangeS=rafSpTrapNwChangeS, systemHealthSummaryTable=systemHealthSummaryTable, ldapGroupFilter=ldapGroupFilter, safSpTrapAppS=safSpTrapAppS, rafIndex=rafIndex, sslClientLDAPCertificateImport=sslClientLDAPCertificateImport, remoteAlertRetryDelay=remoteAlertRetryDelay, systemHealthSummaryEntry=systemHealthSummaryEntry, fuelGauge=fuelGauge, spRackUnitPosition=spRackUnitPosition, sslConfigFileName=sslConfigFileName, ethernetInterfaceDuplexSetting=ethernetInterfaceDuplexSetting, sshClientAuthPubKeyType=sshClientAuthPubKeyType, systemComponentLevelVpdTrackingEntry=systemComponentLevelVpdTrackingEntry, rafSpTrapCPUC=rafSpTrapCPUC, ethernetInterfaceDHCPv6Server=ethernetInterfaceDHCPv6Server, sslClientLDAPCertificateStatus=sslClientLDAPCertificateStatus, groupProfiles=groupProfiles, activityLogIndex=activityLogIndex, sshServerHostKeyFingerprint=sshServerHostKeyFingerprint, safSpTrapNwChangeS=safSpTrapNwChangeS, dnsConfig=dnsConfig, sslCertificateDataEmailAddr=sslCertificateDataEmailAddr, voltNonRecovLimitLow=voltNonRecovLimitLow, fanNonCritLimitLow=fanNonCritLimitLow, generateTestCallHome=generateTestCallHome, powerHealthStatus=powerHealthStatus, remoteAlertIdEntryType=remoteAlertIdEntryType, ethernetInterfaceIPv6AutoIPConfig=ethernetInterfaceIPv6AutoIPConfig, companyName=companyName, rafSpTrapHdC=rafSpTrapHdC, ldapRootDN=ldapRootDN, safSpTrapOsToS=safSpTrapOsToS, powerSysOffDelay=powerSysOffDelay, voltNonCritLimitHigh=voltNonCritLimitHigh, sshClientAuthPubKeyFileFormat=sshClientAuthPubKeyFileFormat, eventLogClr=eventLogClr, fanTable=fanTable, fuelGaugeTotalPowerInUse=fuelGaugeTotalPowerInUse, remoteAlertIdEntrySyslogHostname=remoteAlertIdEntrySyslogHostname, skrCertificateDataSurname=skrCertificateDataSurname, ualAdapterAdvancedConfig=ualAdapterAdvancedConfig, hostMACAddressDescription=hostMACAddressDescription, safSpTrapMemoryC=safSpTrapMemoryC, remoteAlertIdEntryStatus=remoteAlertIdEntryStatus, spClockTimezoneSetting=spClockTimezoneSetting, ethernetInterfaceIPv6StatelessAutoConfig=ethernetInterfaceIPv6StatelessAutoConfig, ldapSearchDomain=ldapSearchDomain, machineLevelVpdMachineModel=machineLevelVpdMachineModel, memoryVpdSize=memoryVpdSize, rmAllCallHomeExclusionEvent=rmAllCallHomeExclusionEvent, ntpIpAddressHostname3=ntpIpAddressHostname3, diskFruName=diskFruName, currentlyLoggedInEntryIndex=currentlyLoggedInEntryIndex, rafSpTrapVoltC=rafSpTrapVoltC, rafSpTrapTempN=rafSpTrapTempN, dhcpTertiaryDNSServer=dhcpTertiaryDNSServer, networkConfiguration=networkConfiguration, safSpTrapHardwareN=safSpTrapHardwareN, voltNumber=voltNumber, ldapRoleBasedSecurityEnabled=ldapRoleBasedSecurityEnabled, autoCallHomeSetup=autoCallHomeSetup, ledIdentifier=ledIdentifier, ntpUpdateFrequency=ntpUpdateFrequency, rmCallHomeExclusionEvent=rmCallHomeExclusionEvent, cpuVpdHealthStatus=cpuVpdHealthStatus, rmCertDomainName=rmCertDomainName, safSpTrapFanC=safSpTrapFanC, sshEnable=sshEnable, certDomainNameTable=certDomainNameTable, powerOffWithOsShutdown=powerOffWithOsShutdown, systemState=systemState, userAuthenticationMethod=userAuthenticationMethod, scalableComplexNodePortNum=scalableComplexNodePortNum, rafSpTrapPFAS=rafSpTrapPFAS, serviceSupportCenter=serviceSupportCenter, scalableComplexPartitionTable=scalableComplexPartitionTable, systemComponentLevelVpdTrackingTable=systemComponentLevelVpdTrackingTable, diskEntry=diskEntry, readCallHomeExclusionEventTable=readCallHomeExclusionEventTable, sslClientLDAPTrustedCertificate4Status=sslClientLDAPTrustedCertificate4Status, ldapBindingMethod=ldapBindingMethod, restartCount=restartCount, memoryVpdDescription=memoryVpdDescription, ualAdapterBasicConfig=ualAdapterBasicConfig, ethernetInterfaceIPAddress=ethernetInterfaceIPAddress, ntpIpAddressHostname1=ntpIpAddressHostname1, phoneExtension=phoneExtension, componentLevelVpdManufacturingId=componentLevelVpdManufacturingId, spIdentification=spIdentification, sslEnableClientLDAP=sslEnableClientLDAP, fanCritLimitHigh=fanCritLimitHigh, spTxtId=spTxtId, ethernetInterfaceGatewayIPAddress=ethernetInterfaceGatewayIPAddress, dhcpHostName=dhcpHostName, sshClientAuthPubKeyFileName=sshClientAuthPubKeyFileName, loginPasswordRequired=loginPasswordRequired, sslCertificateDataCityOrLocality=sslCertificateDataCityOrLocality, disks=disks, hostMACAddressEntry=hostMACAddressEntry, ethernetInterfaceDhcpEnabled=ethernetInterfaceDhcpEnabled, safSpTrapLdrToS=safSpTrapLdrToS, sshClientAuthPubKeyComment=sshClientAuthPubKeyComment, remoteAlertIdsTable=remoteAlertIdsTable, scalableComplexNodePort=scalableComplexNodePort, networkPXEboot=networkPXEboot, safSpTrapMemoryN=safSpTrapMemoryN, informationLED=informationLED, eventLogTime=eventLogTime, snmpUserProfileEntryPrivProt=snmpUserProfileEntryPrivProt, snmpUserProfileEntryIpAddress=snmpUserProfileEntryIpAddress, skrCertificateDataCSRChallengePassword=skrCertificateDataCSRChallengePassword, systemMemoryVpdEntry=systemMemoryVpdEntry, tempNonCritLimitHigh=tempNonCritLimitHigh, osFailureCaptureSaveStart=osFailureCaptureSaveStart, rafSpTrapPowerN=rafSpTrapPowerN, skrServerCertAction=skrServerCertAction, remoteAccessConfig=remoteAccessConfig, ethernetInterfaceStatelessAutoConfigAddressesTable=ethernetInterfaceStatelessAutoConfigAddressesTable, ledLabel=ledLabel, remoteAccessUserAuthorityLevelTable=remoteAccessUserAuthorityLevelTable, sslHTTPSServerConfigForCIMXML=sslHTTPSServerConfigForCIMXML, sslEnableHTTPSforCIMXML=sslEnableHTTPSforCIMXML, rafSpTrapPowerS=rafSpTrapPowerS, configureSP=configureSP, accountLockoutPeriod=accountLockoutPeriod, rafSpTrapIhcC=rafSpTrapIhcC, sslCertificateDataCSRChallengePassword=sslCertificateDataCSRChallengePassword, scalableComplexPartitionSelect=scalableComplexPartitionSelect, memoryVpdFRUSerialNumber=memoryVpdFRUSerialNumber, sshLegacyCLIPortAssignment=sshLegacyCLIPortAssignment, cpuVpdDescription=cpuVpdDescription, powerPolicyInformation=powerPolicyInformation, dhcpEthernetInterface=dhcpEthernetInterface, skrServerTable=skrServerTable, httpsPortAssignment=httpsPortAssignment, ldapUIDsearchAttribute=ldapUIDsearchAttribute, rafSpTrapHardwareC=rafSpTrapHardwareC, powerOnImmediately=powerOnImmediately, safSpTrapTempN=safSpTrapTempN, ibmSupportCenter=ibmSupportCenter, tempIndex=tempIndex, scalableComplexPartitionNumNodes=scalableComplexPartitionNumNodes, fuelGaugeTotalThermalOutput=fuelGaugeTotalThermalOutput, ualConsoleAccess=ualConsoleAccess, rafSpTrapCPUN=rafSpTrapCPUN, remoteAccessUserAuthorityLevelEntry=remoteAccessUserAuthorityLevelEntry, scalableComplexClear=scalableComplexClear, ethernetInterfaceStatelessAutoConfigAddresses=ethernetInterfaceStatelessAutoConfigAddresses, rafSpTrapRdpsN=rafSpTrapRdpsN, autoFTPCallAddr=autoFTPCallAddr, tempTable=tempTable, smtpServerPort=smtpServerPort, sslCertificateDataGivenName=sslCertificateDataGivenName, ldapGroupSearchAttribute=ldapGroupSearchAttribute, componentLevelVpdTrackingFruNumber=componentLevelVpdTrackingFruNumber, remoteAccessTamperDelay=remoteAccessTamperDelay, tempNonRecovLimitHigh=tempNonRecovLimitHigh, ntpConfig=ntpConfig, telnetLegacyCLIPortAssignment=telnetLegacyCLIPortAssignment, activityLogAcknowledge=activityLogAcknowledge, eventLogString=eventLogString, scalableComplexNodePortEntry=scalableComplexNodePortEntry, sslClientConfigForLDAP=sslClientConfigForLDAP, sshClientAuthPubKeySize=sshClientAuthPubKeySize, ldapServiceName=ldapServiceName, snmpUserProfileEntryViewType=snmpUserProfileEntryViewType, skrServers=skrServers, powerTrendingPowerType=powerTrendingPowerType, rafSpTrapSysLogS=rafSpTrapSysLogS, cpuVpdCores=cpuVpdCores, eventLogSaveStart=eventLogSaveStart, diskTable=diskTable, groupRBSroleTable=groupRBSroleTable, powerPolicyActivate=powerPolicyActivate, skrServerEntry=skrServerEntry, activityLogEntry=activityLogEntry, ibmSystemDirectorHttpsPortAssignment=ibmSystemDirectorHttpsPortAssignment, remoteAccessIds=remoteAccessIds, sshClientAuthRemoteAccessIdIndex=sshClientAuthRemoteAccessIdIndex, sshClientAuthPubKeyTftpServer=sshClientAuthPubKeyTftpServer, osFailureCaptureTftpServer=osFailureCaptureTftpServer, systemHealth=systemHealth, certDomainIndex=certDomainIndex)
mibBuilder.exportSymbols("IMM-MIB", groupRBSServerPowerRestartAccess=groupRBSServerPowerRestartAccess, portParity=portParity, sshClientAuthPubKeyAcceptFrom=sshClientAuthPubKeyAcceptFrom, immVersionCheck=immVersionCheck, fuelGaugeStaticPowerPcapMax=fuelGaugeStaticPowerPcapMax, tempHealthStatus=tempHealthStatus, phoneNumber=phoneNumber, groupRBSroleIndex=groupRBSroleIndex, snmpUserProfileTable=snmpUserProfileTable, autoFTPCallPort=autoFTPCallPort, dhcpSecondaryDNSServer=dhcpSecondaryDNSServer, readCallHomeExclusionEventEntry=readCallHomeExclusionEventEntry, readCallHomeExclusionEventIndex=readCallHomeExclusionEventIndex, remoteAlertIdEntryIndex=remoteAlertIdEntryIndex, ethernetInterfaceBIA=ethernetInterfaceBIA, safSpTrapHardwareC=safSpTrapHardwareC, voltNonCritLimitLow=voltNonCritLimitLow, certDomainNameStatus=certDomainNameStatus, autoFTPCallPassword=autoFTPCallPassword, generalRemoteCfg=generalRemoteCfg, eventLogFileName=eventLogFileName, ethernetInterfaceDHCPv6Config=ethernetInterfaceDHCPv6Config, memoryVpdPartNumber=memoryVpdPartNumber, immUsers=immUsers, skrConfigFtpCallPort=skrConfigFtpCallPort, powerOffImmediately=powerOffImmediately, groupRBSSupervisor=groupRBSSupervisor, skrServerHostname=skrServerHostname, rafSpTrapOsToS=rafSpTrapOsToS, passwordChangeInterval=passwordChangeInterval, powerPolicyEntry=powerPolicyEntry, sshServerHostKeyGenerate=sshServerHostKeyGenerate, powerPartNumber=powerPartNumber, powerOffSystemControl=powerOffSystemControl, skrCertificateDataOrganizationUnit=skrCertificateDataOrganizationUnit, tempEntry=tempEntry, eventLogEntry=eventLogEntry, skrCertificateDataContact=skrCertificateDataContact, minimumPasswordReuseCycle=minimumPasswordReuseCycle, changePasswordFirstAccess=changePasswordFirstAccess, rafSpTrapFanN=rafSpTrapFanN, remoteAlertIdEntryAttachmentsToEmailAlerts=remoteAlertIdEntryAttachmentsToEmailAlerts, sslCertificateDataContact=sslCertificateDataContact, cpuVpdType=cpuVpdType, emailAddress=emailAddress, sshServerConfig=sshServerConfig, ethernetInterfaceIPv6LinkLocalAddress=ethernetInterfaceIPv6LinkLocalAddress, ethernetInterfaceIPv6Config=ethernetInterfaceIPv6Config, powerExitSleep=powerExitSleep, safSpTrapCPUN=safSpTrapCPUN, firmwareUpdateFileName=firmwareUpdateFileName, machineVpd=machineVpd, sslClientLDAPTrustedCertificate3Status=sslClientLDAPTrustedCertificate3Status, systemMemoryVpdTable=systemMemoryVpdTable, remoteAccessIdEntryPassword=remoteAccessIdEntryPassword, ntpIpAddressHostname4=ntpIpAddressHostname4, skrConfigFileName=skrConfigFileName, ethernetInterfaceDHCPv6DomainName=ethernetInterfaceDHCPv6DomainName, configurationManagement=configurationManagement, skrConfigFtpServerMode=skrConfigFtpServerMode, vpdInformation=vpdInformation, voltDescr=voltDescr, systemHealthSummaryIndex=systemHealthSummaryIndex, snmpCommunityEntry=snmpCommunityEntry, powerIndex=powerIndex, ethernetInterfaceIPv6StatelessAutoConfigEnabled=ethernetInterfaceIPv6StatelessAutoConfigEnabled, safSpTrapRdpsC=safSpTrapRdpsC, skrCertificateDataDNQualifier=skrCertificateDataDNQualifier, allLEDsTable=allLEDsTable, scalableComplexNodeKey=scalableComplexNodeKey, powerOnHours=powerOnHours, spClock=spClock, componentLevelVpdTrackingAction=componentLevelVpdTrackingAction, dnsServerIPv6Address3=dnsServerIPv6Address3, defaultAdminPasswordExpired=defaultAdminPasswordExpired, rafSpTrapPowerC=rafSpTrapPowerC, ibmAgents=ibmAgents, safSpTrapPowerN=safSpTrapPowerN, ldapLoginPermissionAttribute=ldapLoginPermissionAttribute, groupRBSRemoteConsoleRemoteDiskAccess=groupRBSRemoteConsoleRemoteDiskAccess, sslCertificateDataCountry=sslCertificateDataCountry, sslHTTPSServerCIMXMLCertificateGeneration=sslHTTPSServerCIMXMLCertificateGeneration, voltCritLimitHigh=voltCritLimitHigh, ldapServer4PortNumber=ldapServer4PortNumber, scalableComplexNodePortStatus=scalableComplexNodePortStatus, powerFRUNumber=powerFRUNumber, immVpdType=immVpdType, powerModule=powerModule, ldapUseDNSOrPreConfiguredServers=ldapUseDNSOrPreConfiguredServers, ldapUserSearchBaseDN=ldapUserSearchBaseDN, cpuVpdSpeed=cpuVpdSpeed, ethernetInterfaceStatelessAutoConfigAddressesEntry=ethernetInterfaceStatelessAutoConfigAddressesEntry, sshServerHostKeySize=sshServerHostKeySize, powerCyclingSchedule=powerCyclingSchedule, ethernetInterfaceAutoNegotiate=ethernetInterfaceAutoNegotiate, telnetConnectionCounts=telnetConnectionCounts, sslCertificateDataCSRUnstructuredName=sslCertificateDataCSRUnstructuredName, oSHang=oSHang, httpProxyLocation=httpProxyLocation, fanDescr=fanDescr, httpProxyConfig=httpProxyConfig, cpuVpdVoltage=cpuVpdVoltage, memoryVpdType=memoryVpdType, ldapServer3PortNumber=ldapServer3PortNumber, snmpCommunityEntryCommunityIpAddress3=snmpCommunityEntryCommunityIpAddress3, activityLogTable=activityLogTable, powerEntry=powerEntry, safSpTrapBootS=safSpTrapBootS, ethernetInterfaceIPv6Enabled=ethernetInterfaceIPv6Enabled, tcpProtocols=tcpProtocols, cpuVpdIdentifier=cpuVpdIdentifier, tempNumber=tempNumber, memoryVpdIndex=memoryVpdIndex, portStopBits=portStopBits, tempDescr=tempDescr, groupRBSClearEventLog=groupRBSClearEventLog, skrClientConfigCertficate=skrClientConfigCertficate, skrClientCertificateTransfer=skrClientCertificateTransfer, sshClientAuthPubKeyAction=sshClientAuthPubKeyAction, ethernetInterfaceVlanID=ethernetInterfaceVlanID, skrConfigFtpServer=skrConfigFtpServer, scalableComplexNodeAutoCreate=scalableComplexNodeAutoCreate, snmpCommunityEntryCommunityName=snmpCommunityEntryCommunityName, ldapServer3NameOrIPAddress=ldapServer3NameOrIPAddress, groupIdsEntry=groupIdsEntry, snmpCommunityEntryCommunityIpAddress1=snmpCommunityEntryCommunityIpAddress1, scalableComplexNodePortTable=scalableComplexNodePortTable, sslHTTPSServerWebCertificateGeneration=sslHTTPSServerWebCertificateGeneration, rafSpTrapHardwareN=rafSpTrapHardwareN, snmpUserProfileEntryIndex=snmpUserProfileEntryIndex, skrCertificateDataIMMHostName=skrCertificateDataIMMHostName, sslEnableHTTPSforWeb=sslEnableHTTPSforWeb, scalableComplexPartitionAction=scalableComplexPartitionAction, snmpAgentCommunityConfig=snmpAgentCommunityConfig, powerControlSleep=powerControlSleep, ethernetInterface=ethernetInterface, ldapServer2PortNumber=ldapServer2PortNumber, scalableComplexIdentifier=scalableComplexIdentifier, componentLevelVpdTrackingIndex=componentLevelVpdTrackingIndex, skrCertificateDataCityOrLocality=skrCertificateDataCityOrLocality, skrConfigFtpCallPassword=skrConfigFtpCallPassword, ualId=ualId, ualIndex=ualIndex, snmpUserProfileEntryAuthProt=snmpUserProfileEntryAuthProt, osFailureCapture=osFailureCapture, dnsServerIPAddress3=dnsServerIPAddress3, ualAllowClearLog=ualAllowClearLog, sshClientAuthPubKeyEntry=sshClientAuthPubKeyEntry, scalableComplexNode=scalableComplexNode, skrCertificateDataInitials=skrCertificateDataInitials, tempNonCritLimitLow=tempNonCritLimitLow, configurationManagementSaveStart=configurationManagementSaveStart, httpProxyPort=httpProxyPort, groupRBSroleId=groupRBSroleId, domainName=domainName, powerPolicyIndex=powerPolicyIndex, componentLevelVpdTrackingManufacturingId=componentLevelVpdTrackingManufacturingId, customSecuritySettings=customSecuritySettings, fanIndex=fanIndex, sslHTTPSServerConfigForWeb=sslHTTPSServerConfigForWeb, powerSysConfig=powerSysConfig, serviceAdvisor=serviceAdvisor, voltage=voltage, httpProxyUserName=httpProxyUserName, firmwareUpdateTarget=firmwareUpdateTarget, ethernetInterfaceVlan=ethernetInterfaceVlan, scalableComplexPartitionCreateTable=scalableComplexPartitionCreateTable, machineLevelVpd=machineLevelVpd, skrCertificateDataCountry=skrCertificateDataCountry, componentLevelVpdFruName=componentLevelVpdFruName, firmwareUpdateTftpServer=firmwareUpdateTftpServer, powerTrendingPeriod=powerTrendingPeriod, systemHealthSummaryDescription=systemHealthSummaryDescription, immVpdVersionString=immVpdVersionString, remoteAlertFiltersEntry=remoteAlertFiltersEntry, scalableComplexNumPartitions=scalableComplexNumPartitions, spRoomID=spRoomID, fanNonRecovLimitHigh=fanNonRecovLimitHigh, resetPowerSchedules=resetPowerSchedules, temperature=temperature, remoteAlertFiltersTable=remoteAlertFiltersTable, fanHealthStatus=fanHealthStatus, generateTestAlert=generateTestAlert, systemCPUVpdEntry=systemCPUVpdEntry, dnsPriority=dnsPriority, tempNominalReading=tempNominalReading, autoFTPSetup=autoFTPSetup, ledColor=ledColor, machineLevelUUID=machineLevelUUID, smtpServerAuthenticationUser=smtpServerAuthenticationUser, spRackID=spRackID, oSLoader=oSLoader, powerTrendingSampleMax=powerTrendingSampleMax, safSpTrapCPUC=safSpTrapCPUC, fanCritLimitLow=fanCritLimitLow, scalableComplexNodeEntry=scalableComplexNodeEntry, diskHealthStatus=diskHealthStatus, minimumDiffCharsPassword=minimumDiffCharsPassword, ethernetInterfaceStatelessAutoConfigAddressesPrefixLen=ethernetInterfaceStatelessAutoConfigAddressesPrefixLen, sslCertificateDataDNQualifier=sslCertificateDataDNQualifier, componentLevelVpdTrackingSerialNumber=componentLevelVpdTrackingSerialNumber, skrConfigFTPCallUserID=skrConfigFTPCallUserID, ethernetInterfaceIPv6LocalAddress=ethernetInterfaceIPv6LocalAddress, ledIndex=ledIndex, dnsServerIPAddress1=dnsServerIPAddress1, addCertDomainName=addCertDomainName, snmpWarningAlerts=snmpWarningAlerts, immVpdReleaseDate=immVpdReleaseDate, fanNonCritLimitHigh=fanNonCritLimitHigh, memoryVpdManufactureDate=memoryVpdManufactureDate, remoteAlertIdEntrySystemAlert=remoteAlertIdEntrySystemAlert, ethernetInterfaceType=ethernetInterfaceType, snmpUserProfileEntryPrivPassword=snmpUserProfileEntryPrivPassword, componentLevelVpdIndex=componentLevelVpdIndex, machineLevelProductName=machineLevelProductName, powerPowerTrending=powerPowerTrending, ethernetInterfaceIPv6StaticIPAddressPrefixLen=ethernetInterfaceIPv6StaticIPAddressPrefixLen, fuelGaugePowerCappingPolicySetting=fuelGaugePowerCappingPolicySetting, rafSpTrapFanC=rafSpTrapFanC, ntpIpAddressHostname2=ntpIpAddressHostname2, httpProxyEnable=httpProxyEnable, scalableComplexPartitionActionCreate=scalableComplexPartitionActionCreate, snmpv3SystemAgentEnable=snmpv3SystemAgentEnable, rafSpTrapBootS=rafSpTrapBootS, tempCritLimitLow=tempCritLimitLow, groupRBSNetworkSecurity=groupRBSNetworkSecurity, smtpServerNameOrIPAddress=smtpServerNameOrIPAddress, httpProxyPassword=httpProxyPassword, cpuVpdFamily=cpuVpdFamily, fuelGaugeInformation=fuelGaugeInformation, snmpSystemName=snmpSystemName, powerTrendingSampleMin=powerTrendingSampleMin, ethernetInterfaceHostName=ethernetInterfaceHostName, ethernetInterfaceDataRate=ethernetInterfaceDataRate, skrCertificateData=skrCertificateData, ldapServer1NameOrIPAddress=ldapServer1NameOrIPAddress, fanSpeed=fanSpeed, safSpTrapSysLogS=safSpTrapSysLogS, ldapDomainSource=ldapDomainSource, memoryHealthStatus=memoryHealthStatus, ldapServer1PortNumber=ldapServer1PortNumber, contactInformation=contactInformation, voltNonRecovLimitHigh=voltNonRecovLimitHigh, remoteAccessIdsTable=remoteAccessIdsTable, fanNumber=fanNumber, callHomeExclusionEvents=callHomeExclusionEvents, altPhoneExtension=altPhoneExtension, scaling=scaling, powerTable=powerTable, skrCertificateDataCSRUnstructuredName=skrCertificateDataCSRUnstructuredName, snmpCommunityTable=snmpCommunityTable, ntpEnable=ntpEnable, certDomainNames=certDomainNames, autoFTPCallUserID=autoFTPCallUserID)
mibBuilder.exportSymbols("IMM-MIB", tempReading=tempReading, snmpSystemContact=snmpSystemContact, scalableComplexPartitionStatus=scalableComplexPartitionStatus, snmpUserProfileEntry=snmpUserProfileEntry, powerFruName=powerFruName, netfinitySupportProcessorAgent=netfinitySupportProcessorAgent, ibmSystemDirectorHttpPortAssignment=ibmSystemDirectorHttpPortAssignment, remoteAlertIdEntryWarningAlert=remoteAlertIdEntryWarningAlert, ldapAuthCfg=ldapAuthCfg, voltTable=voltTable, groupIndex=groupIndex, systemPower=systemPower, serviceAdvisorEnable=serviceAdvisorEnable, ldapClientAuthenticationPassword=ldapClientAuthenticationPassword, remoteAlertIdEntryName=remoteAlertIdEntryName, ldapForestName=ldapForestName, dnsEnabled=dnsEnabled, rafSpTrapLdrToS=rafSpTrapLdrToS, remoteAccessIdEntryUserPwdLeftDays=remoteAccessIdEntryUserPwdLeftDays, testCallHome=testCallHome, hostMACAddress=hostMACAddress, groupRBSUserAccountManagement=groupRBSUserAccountManagement, safSpTrapPFAS=safSpTrapPFAS, spRackBladeBay=spRackBladeBay, configurationManagementStatus=configurationManagementStatus, ethernetInterfaceDHCPv6Enabled=ethernetInterfaceDHCPv6Enabled, addCallHomeExclusionEvent=addCallHomeExclusionEvent, groupRBSAdvancedAdapterConfiguration=groupRBSAdvancedAdapterConfiguration, skrDeviceGroup=skrDeviceGroup, eventLogTftpServer=eventLogTftpServer, safSpTrapVoltN=safSpTrapVoltN, certDomainName=certDomainName, voltIndex=voltIndex, immVpdTable=immVpdTable, fanNonRecovLimitLow=fanNonRecovLimitLow, ualConsoleAndVirtualMediaAccess=ualConsoleAndVirtualMediaAccess, ldapClientCfg=ldapClientCfg, sslCertificateDataSurname=sslCertificateDataSurname, scalableComplexNodeRole=scalableComplexNodeRole, systemCPUVpdTable=systemCPUVpdTable, powerPolicyName=powerPolicyName, resetSPConfigAndRestart=resetSPConfigAndRestart, certDomainNameEntry=certDomainNameEntry, powerSysOnClockSetting=powerSysOnClockSetting, scalableComplexPartition=scalableComplexPartition, rafSpTrapVoltN=rafSpTrapVoltN, tcpPortsRestoreDefault=tcpPortsRestoreDefault, sslClientLDAPCertificateDownload=sslClientLDAPCertificateDownload, fuelGaugeTotalPowerAvaialble=fuelGaugeTotalPowerAvaialble, scalableComplexPartitionCreate=scalableComplexPartitionCreate, scalableComplexNodeSerialNumber=scalableComplexNodeSerialNumber, smtpServerAuthenticationPassword=smtpServerAuthenticationPassword, scalableComplexNodeTable=scalableComplexNodeTable, rafSpTrapAppS=rafSpTrapAppS, sshClientAuthPubKeyFingerprint=sshClientAuthPubKeyFingerprint, rafSpTrapMemoryC=rafSpTrapMemoryC, cpuVpdDataWidth=cpuVpdDataWidth, enterCLIkeySeq=enterCLIkeySeq, sshClientAuth=sshClientAuth, tcpApplicationConfig=tcpApplicationConfig, sslConfigTftpServer=sslConfigTftpServer, powerTrendingSampleEntry=powerTrendingSampleEntry, ualReadOnly=ualReadOnly, fanEntry=fanEntry, systemHealthSummarySeverity=systemHealthSummarySeverity, ethernetInterfaceDHCPv6SecondaryDNSServer=ethernetInterfaceDHCPv6SecondaryDNSServer, spRackUnitHeight=spRackUnitHeight, scalableComplexPartitionCreateIndex=scalableComplexPartitionCreateIndex, snmpAgentPortAssignment=snmpAgentPortAssignment, safSpTrapRLogin=safSpTrapRLogin, voltNominalReading=voltNominalReading, scalableComplexNodeSelect=scalableComplexNodeSelect, ethernetInterfaceDHCPv6PrimaryDNSServer=ethernetInterfaceDHCPv6PrimaryDNSServer, portCLImode=portCLImode, configurationManagementTftpServer=configurationManagementTftpServer, smtpConfig=smtpConfig, ethernetInterfaceDHCPv6IPAddress=ethernetInterfaceDHCPv6IPAddress, skrCertificateDataEmailAddr=skrCertificateDataEmailAddr, componentLevelVpdTrackingTimestamp=componentLevelVpdTrackingTimestamp, configurationManagementRestoreStart=configurationManagementRestoreStart, ethernetInterfaceIPv6=ethernetInterfaceIPv6, powerOnSystemControl=powerOnSystemControl, postalCode=postalCode, diskNumber=diskNumber, complexPasswordRulesEnforced=complexPasswordRulesEnforced, ddnsDomainToUse=ddnsDomainToUse, scalableComplexNodeIndex=scalableComplexNodeIndex, city=city, machineLocationPhoneNumber=machineLocationPhoneNumber, sshClientAuthPubKeyIndex=sshClientAuthPubKeyIndex, ethernetInterfaceMTU=ethernetInterfaceMTU, cpuVpdIndex=cpuVpdIndex, sshClientAuthPubKeyUnused=sshClientAuthPubKeyUnused, portBaud=portBaud, ualSupervisor=ualSupervisor, sslClientLDAPTrustedCertificate1Status=sslClientLDAPTrustedCertificate1Status, shutdownOsThenRestart=shutdownOsThenRestart, scalableComplexPartitionPriNodeKey=scalableComplexPartitionPriNodeKey, sslClientLDAPCertificateGeneration=sslClientLDAPCertificateGeneration, sslHTTPSWebCertificateStatus=sslHTTPSWebCertificateStatus, sslHTTPSServerWebCertificateTransfer=sslHTTPSServerWebCertificateTransfer, eventLogIndex=eventLogIndex, leds=leds, skrCertificateDataGivenName=skrCertificateDataGivenName, safSpTrapVoltC=safSpTrapVoltC, ddnsStatus=ddnsStatus, altContactName=altContactName, dnsServerIPAddress2=dnsServerIPAddress2, rafSpTrapRLogin=rafSpTrapRLogin, contactName=contactName, ethernetInterfaceIPv6StaticIPConfigEnabled=ethernetInterfaceIPv6StaticIPConfigEnabled, remoteAlertIds=remoteAlertIds, immVpdEntry=immVpdEntry, firmwareUpdateStart=firmwareUpdateStart, sslCertificateDataOrganizationName=sslCertificateDataOrganizationName, safSpTrapIhcC=safSpTrapIhcC, restartSPImmediately=restartSPImmediately, ibm=ibm, scalableComplexNodePortType=scalableComplexNodePortType, rafSpTrapMemoryN=rafSpTrapMemoryN, skrServerPort=skrServerPort, ethernetInterfaceIPv6StaticIPConfig=ethernetInterfaceIPv6StaticIPConfig, sslConfig=sslConfig, ldapServerTargetName=ldapServerTargetName, powerStatistics=powerStatistics, dnsServerIPv6Address2=dnsServerIPv6Address2, immVpdIndex=immVpdIndex, powerTrendingSampleIndex=powerTrendingSampleIndex, currentlyLoggedInEntry=currentlyLoggedInEntry, sslCertificateDataStateorProvince=sslCertificateDataStateorProvince, machineLevelVpdMachineType=machineLevelVpdMachineType, fuelGaugePowerConsumptionMemory=fuelGaugePowerConsumptionMemory, safSpTrapTempC=safSpTrapTempC, groupRBSRemoteConsoleAccess=groupRBSRemoteConsoleAccess, smtpServerAuthentication=smtpServerAuthentication, ibmIntegratedManagementModuleMIB=ibmIntegratedManagementModuleMIB, scalableComplexPartitionCreateEntry=scalableComplexPartitionCreateEntry, ntpUpdateClock=ntpUpdateClock, configurationManagementFileName=configurationManagementFileName, systemComponentLevelVpdEntry=systemComponentLevelVpdEntry, dnsServerIPv6Address1=dnsServerIPv6Address1, acceptLicenseAgreement=acceptLicenseAgreement, voltReading=voltReading, allLEDsEntry=allLEDsEntry, scalableComplexNodeAction=scalableComplexNodeAction, voltCritLimitLow=voltCritLimitLow, ualServerPowerAccess=ualServerPowerAccess, diskIndex=diskIndex, fuelGaugeSystemMaxPower=fuelGaugeSystemMaxPower, ledState=ledState, fans=fans, dhcpSubnetMask=dhcpSubnetMask, fuelGaugePowerConsumptionCpu=fuelGaugePowerConsumptionCpu, componentLevelVpdTrackingFruName=componentLevelVpdTrackingFruName, safSpTrapHdC=safSpTrapHdC, altEmailAddress=altEmailAddress, currentlyLoggedInEntryAccMethod=currentlyLoggedInEntryAccMethod, remoteAccessIdEntryIndex=remoteAccessIdEntryIndex, sslHTTPSServerCIMXMLCertificateTransfer=sslHTTPSServerCIMXMLCertificateTransfer, EntryStatus=EntryStatus, currentlyLoggedInEntryUserId=currentlyLoggedInEntryUserId, snmpAlertFilters=snmpAlertFilters, state=state, serialRedirect=serialRedirect, safSpTrapPowerS=safSpTrapPowerS, ldapClientAuthenticationDN=ldapClientAuthenticationDN, remoteAlertIdEntrySyslogPortAssignment=remoteAlertIdEntrySyslogPortAssignment, passwordExpirationPeriod=passwordExpirationPeriod, powerNumber=powerNumber, firmwareUpdateStatus=firmwareUpdateStatus, voltHealthStatus=voltHealthStatus, sshClientAuthPubKeyEntryStatus=sshClientAuthPubKeyEntryStatus, rafSpTrapRdpsC=rafSpTrapRdpsC, spClockDateAndTimeSetting=spClockDateAndTimeSetting, InetAddressIPv6=InetAddressIPv6, ethernetInterfaceEnabled=ethernetInterfaceEnabled, powerPolicyPwrSupplyFailureLimit=powerPolicyPwrSupplyFailureLimit, systemComponentLevelVpdTable=systemComponentLevelVpdTable, remoteAccessIdsEntry=remoteAccessIdsEntry, powerFRUSerialNumber=powerFRUSerialNumber, ethernetInterfaceDHCPv6TertiaryDNSServer=ethernetInterfaceDHCPv6TertiaryDNSServer, sslCertificateDataInitials=sslCertificateDataInitials, snmpCommunityEntryIndex=snmpCommunityEntryIndex, snmpv1SystemAgentEnable=snmpv1SystemAgentEnable, remoteAlertIdEmailAddr=remoteAlertIdEmailAddr, powerTrendingSampleTable=powerTrendingSampleTable, cpuVpdThreads=cpuVpdThreads, powerPolicyMaxPowerLimit=powerPolicyMaxPowerLimit, skrClientCertificateGeneration=skrClientCertificateGeneration, readCallHomeExclusionEventID=readCallHomeExclusionEventID, powerTrendingSampleAve=powerTrendingSampleAve, sslCertificateData=sslCertificateData, sslCertificateDataIMMHostName=sslCertificateDataIMMHostName, scalableComplex=scalableComplex, monitors=monitors, snmpTrapsPortAssignment=snmpTrapsPortAssignment, autoFTPCallMode=autoFTPCallMode, eventLogSaveStatus=eventLogSaveStatus, sslClientLDAPTrustedCertificate2Status=sslClientLDAPTrustedCertificate2Status, remoteAlertIdsEntry=remoteAlertIdsEntry, snmpSystemLocation=snmpSystemLocation, safSpTrapRdpsN=safSpTrapRdpsN, webInactivityTimeout=webInactivityTimeout, ethernetInterfaceIPv6StaticIPAddress=ethernetInterfaceIPv6StaticIPAddress, firmwareUpdate=firmwareUpdate, hostName=hostName, smtpServerAuthenticationMethod=smtpServerAuthenticationMethod, safSpTrapPowerC=safSpTrapPowerC, sshServerHostKeyGenerateProgress=sshServerHostKeyGenerateProgress, schedulePowerOnSystem=schedulePowerOnSystem, address=address, schedulePowerOffWithOsShutdown=schedulePowerOffWithOsShutdown, scalableComplexNodePortRemNum=scalableComplexNodePortRemNum, ethernetInterfaceSubnetMask=ethernetInterfaceSubnetMask, dhcpGatewayIPAddress=dhcpGatewayIPAddress, componentLevelVpdFruNumber=componentLevelVpdFruNumber, ldapServer2NameOrIPAddress=ldapServer2NameOrIPAddress, systemHealthStat=systemHealthStat, groupRBSOperator=groupRBSOperator, groupId=groupId, dhcpPrimaryDNSServer=dhcpPrimaryDNSServer, ldapServer4NameOrIPAddress=ldapServer4NameOrIPAddress, machineLevelSerialNumber=machineLevelSerialNumber, fuelGaugeStaticPowerPcapMin=fuelGaugeStaticPowerPcapMin, fuelGaugeStaticPowerPcapSoftMin=fuelGaugeStaticPowerPcapSoftMin, identityLED=identityLED, maxLoginFailures=maxLoginFailures, powerEnterSleep=powerEnterSleep, generalSystemSettings=generalSystemSettings, fuelGaugeStaticPowerPcapCurrentSetting=fuelGaugeStaticPowerPcapCurrentSetting, networkInterfaces=networkInterfaces, remoteAccessIdEntryUserId=remoteAccessIdEntryUserId, groupIdsTable=groupIdsTable, snmpCommunityEntryCommunityIpAddress2=snmpCommunityEntryCommunityIpAddress2, skrServerIndex=skrServerIndex, restartSystemImmediately=restartSystemImmediately, groupRole=groupRole, remoteAlertIdEntryCriticalAlert=remoteAlertIdEntryCriticalAlert)
