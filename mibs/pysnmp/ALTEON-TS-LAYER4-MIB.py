#
# PySNMP MIB module ALTEON-TS-LAYER4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-TS-LAYER4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:05:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "switch")
operCmds, stats, information = mibBuilder.importSymbols("ALTEON-TIGON-SWITCH-MIB", "operCmds", "stats", "information")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, NotificationType, IpAddress, Counter32, Integer32, TimeTicks, MibIdentifier, Gauge32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "NotificationType", "IpAddress", "Counter32", "Integer32", "TimeTicks", "MibIdentifier", "Gauge32", "iso", "Bits")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
serverloadbalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5))
filtering = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10))
globalSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11))
dynamicSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12))
slbfailover = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16))
slbUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2))
rtspUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3))
slbRurl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52))
slbRurlGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1))
slbWaphc = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62))
slbWap = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63))
synAttackDetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82))
gslbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1))
gslbDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2))
gslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3))
gslbLookup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2))
filterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6))
gslbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7))
gslbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14))
rurlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18))
rtspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19))
tcpLimitStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23))
nasaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24))
dnsSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25))
slb_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2)).setLabel("slb-info")
slbOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4))
slbRealServerMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMaxSize.setStatus('mandatory')
slbCurCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setStatus('mandatory')
slbCurCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServerIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setStatus('mandatory')
slbCurCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setStatus('mandatory')
slbCurCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setStatus('mandatory')
slbCurCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setStatus('mandatory')
slbCurCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setStatus('mandatory')
slbCurCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setStatus('mandatory')
slbCurCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setStatus('mandatory')
slbCurCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setStatus('mandatory')
slbCurCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setStatus('mandatory')
slbCurCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setStatus('mandatory')
slbCurCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerState.setStatus('mandatory')
slbCurCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerType.setStatus('mandatory')
slbCurCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerName.setStatus('mandatory')
slbCurCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setStatus('mandatory')
slbCurCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setStatus('mandatory')
slbCurCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setStatus('mandatory')
slbCurCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setStatus('mandatory')
slbCurCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerProxy.setStatus('mandatory')
slbNewCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setStatus('mandatory')
slbNewCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServerIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setStatus('mandatory')
slbNewCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setStatus('mandatory')
slbNewCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setStatus('mandatory')
slbNewCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setStatus('mandatory')
slbNewCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setStatus('mandatory')
slbNewCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setStatus('mandatory')
slbNewCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setStatus('mandatory')
slbNewCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setStatus('mandatory')
slbNewCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setStatus('mandatory')
slbNewCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setStatus('mandatory')
slbNewCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerState.setStatus('mandatory')
slbNewCfgRealServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setStatus('mandatory')
slbNewCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerType.setStatus('mandatory')
slbNewCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerName.setStatus('mandatory')
slbNewCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setStatus('mandatory')
slbNewCfgRealServerAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setStatus('mandatory')
slbNewCfgRealServerRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setStatus('mandatory')
slbNewCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setStatus('mandatory')
slbNewCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setStatus('mandatory')
slbNewCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setStatus('mandatory')
slbNewCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerProxy.setStatus('mandatory')
slbRealServPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServPortTableMaxSize.setStatus('mandatory')
slbCurCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48), )
if mibBuilder.loadTexts: slbCurCfgRealServPortTable.setStatus('mandatory')
slbCurCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServPortEntry.setStatus('mandatory')
slbCurCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServIndex.setStatus('mandatory')
slbCurCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServPortIndex.setStatus('mandatory')
slbCurCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 48, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServRealPort.setStatus('mandatory')
slbNewCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49), )
if mibBuilder.loadTexts: slbNewCfgRealServPortTable.setStatus('mandatory')
slbNewCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServPortEntry.setStatus('mandatory')
slbNewCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServIndex.setStatus('mandatory')
slbNewCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServPortIndex.setStatus('mandatory')
slbNewCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServRealPort.setStatus('mandatory')
slbNewCfgRealServPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 49, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServPortDelete.setStatus('mandatory')
slbVirtServerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setStatus('mandatory')
slbCurCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5), )
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setStatus('mandatory')
slbCurCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setStatus('mandatory')
slbCurCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setStatus('mandatory')
slbCurCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setStatus('mandatory')
slbCurCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setStatus('mandatory')
slbCurCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setStatus('mandatory')
slbCurCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setStatus('mandatory')
slbCurCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setStatus('mandatory')
slbCurCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setStatus('mandatory')
slbCurCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setStatus('mandatory')
slbCurCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setStatus('mandatory')
slbCurCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setStatus('obsolete')
slbCurCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setStatus('mandatory')
slbCurCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setStatus('mandatory')
slbCurCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setStatus('mandatory')
slbCurCfgVirtServerResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerResponseCount.setStatus('mandatory')
slbCurCfgVirtServerCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCExpire.setStatus('mandatory')
slbNewCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6), )
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setStatus('mandatory')
slbNewCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setStatus('mandatory')
slbNewCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setStatus('mandatory')
slbNewCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setStatus('mandatory')
slbNewCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setStatus('mandatory')
slbNewCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setStatus('mandatory')
slbNewCfgVirtServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setStatus('mandatory')
slbNewCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setStatus('mandatory')
slbNewCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setStatus('mandatory')
slbNewCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setStatus('mandatory')
slbNewCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setStatus('mandatory')
slbNewCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setStatus('mandatory')
slbNewCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setStatus('obsolete')
slbNewCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setStatus('mandatory')
slbNewCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setStatus('mandatory')
slbNewCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setStatus('mandatory')
slbNewCfgVirtServerResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerResponseCount.setStatus('mandatory')
slbNewCfgVirtServerCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCExpire.setStatus('mandatory')
slbVirtServicesTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesTableMaxSize.setStatus('mandatory')
slbCurCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setStatus('mandatory')
slbCurCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setStatus('mandatory')
slbCurCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setStatus('mandatory')
slbCurCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setStatus('mandatory')
slbCurCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setStatus('mandatory')
slbCurCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setStatus('mandatory')
slbCurCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setStatus('mandatory')
slbCurCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setStatus('mandatory')
slbCurCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setStatus('mandatory')
slbCurCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setStatus('mandatory')
slbCurCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setStatus('mandatory')
slbCurCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlbOption.setStatus('mandatory')
slbCurCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb2.setStatus('mandatory')
slbCurCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setStatus('mandatory')
slbCurCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setStatus('mandatory')
slbCurCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disabled", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRtspUrlParse.setStatus('mandatory')
slbCurCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDBind.setStatus('mandatory')
slbCurCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieMode.setStatus('mandatory')
slbCurCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceFtpParsing.setStatus('mandatory')
slbCurCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRemapUDPFrags.setStatus('mandatory')
slbCurCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsSlb.setStatus('mandatory')
slbNewCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setStatus('mandatory')
slbNewCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setStatus('mandatory')
slbNewCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setStatus('mandatory')
slbNewCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setStatus('mandatory')
slbNewCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setStatus('mandatory')
slbNewCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setStatus('mandatory')
slbNewCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setStatus('mandatory')
slbNewCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setStatus('mandatory')
slbNewCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setStatus('mandatory')
slbNewCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setStatus('mandatory')
slbNewCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setStatus('mandatory')
slbNewCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlbOption.setStatus('mandatory')
slbNewCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb2.setStatus('mandatory')
slbNewCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setStatus('mandatory')
slbNewCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setStatus('mandatory')
slbNewCfgVirtServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setStatus('mandatory')
slbNewCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("disabled", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRtspUrlParse.setStatus('mandatory')
slbNewCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDBind.setStatus('mandatory')
slbNewCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieMode.setStatus('mandatory')
slbNewCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceFtpParsing.setStatus('mandatory')
slbNewCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRemapUDPFrags.setStatus('mandatory')
slbNewCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsSlb.setStatus('mandatory')
slbUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlBwmTableMaxSize.setStatus('mandatory')
slbCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50), )
if mibBuilder.loadTexts: slbCurCfgUrlBwmTable.setStatus('mandatory')
slbCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbCurCfgUrlBwmEntry.setStatus('mandatory')
slbCurCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServIndex.setStatus('mandatory')
slbCurCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServiceIndex.setStatus('mandatory')
slbCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmUrlId.setStatus('mandatory')
slbCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 50, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmContract.setStatus('mandatory')
slbNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51), )
if mibBuilder.loadTexts: slbNewCfgUrlBwmTable.setStatus('mandatory')
slbNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmVirtServIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbNewCfgUrlBwmEntry.setStatus('mandatory')
slbNewCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServIndex.setStatus('mandatory')
slbNewCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServiceIndex.setStatus('mandatory')
slbNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmUrlId.setStatus('mandatory')
slbNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlBwmContract.setStatus('mandatory')
slbNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 51, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlBwmDelete.setStatus('mandatory')
slbGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupTableMaxSize.setStatus('mandatory')
slbCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10), )
if mibBuilder.loadTexts: slbCurCfgGroupTable.setStatus('mandatory')
slbCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgGroupIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setStatus('mandatory')
slbCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setStatus('mandatory')
slbCurCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setStatus('mandatory')
slbCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setStatus('mandatory')
slbCurCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setStatus('mandatory')
slbCurCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setStatus('mandatory')
slbCurCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setStatus('mandatory')
slbCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupName.setStatus('mandatory')
slbCurCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setStatus('mandatory')
slbCurCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setStatus('mandatory')
slbCurCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupVipHealthCheck.setStatus('mandatory')
slbNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11), )
if mibBuilder.loadTexts: slbNewCfgGroupTable.setStatus('mandatory')
slbNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgGroupIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setStatus('mandatory')
slbNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setStatus('mandatory')
slbNewCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setStatus('mandatory')
slbNewCfgGroupAddServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setStatus('mandatory')
slbNewCfgGroupRemoveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setStatus('mandatory')
slbNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setStatus('mandatory')
slbNewCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setStatus('mandatory')
slbNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setStatus('mandatory')
slbNewCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setStatus('mandatory')
slbNewCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setStatus('mandatory')
slbNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupName.setStatus('mandatory')
slbNewCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setStatus('mandatory')
slbNewCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setStatus('mandatory')
slbNewCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupVipHealthCheck.setStatus('mandatory')
slbPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortTableMaxSize.setStatus('mandatory')
slbCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12), )
if mibBuilder.loadTexts: slbCurCfgPortTable.setStatus('mandatory')
slbCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgPortIndex"))
if mibBuilder.loadTexts: slbCurCfgPortEntry.setStatus('mandatory')
slbCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortIndex.setStatus('mandatory')
slbCurCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setStatus('mandatory')
slbCurCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setStatus('mandatory')
slbCurCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setStatus('mandatory')
slbCurCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setStatus('mandatory')
slbCurCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setStatus('mandatory')
slbCurCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbRtsState.setStatus('mandatory')
slbCurCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbIdslbState.setStatus('mandatory')
slbCurCfgPortSlbNasaState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbNasaState.setStatus('mandatory')
slbNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13), )
if mibBuilder.loadTexts: slbNewCfgPortTable.setStatus('mandatory')
slbNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgPortIndex"))
if mibBuilder.loadTexts: slbNewCfgPortEntry.setStatus('mandatory')
slbNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortIndex.setStatus('mandatory')
slbNewCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setStatus('mandatory')
slbNewCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setStatus('mandatory')
slbNewCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setStatus('mandatory')
slbNewCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setStatus('mandatory')
slbNewCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setStatus('mandatory')
slbNewCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbRtsState.setStatus('mandatory')
slbNewCfgPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortDelete.setStatus('mandatory')
slbNewCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbIdslbState.setStatus('mandatory')
slbNewCfgPortSlbNasaState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbNasaState.setStatus('mandatory')
slbCurCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgImask.setStatus('mandatory')
slbNewCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgImask.setStatus('mandatory')
slbCurCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMnet.setStatus('mandatory')
slbNewCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMnet.setStatus('mandatory')
slbCurCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMmask.setStatus('mandatory')
slbNewCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMmask.setStatus('mandatory')
slbCurCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setStatus('mandatory')
slbNewCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setStatus('mandatory')
slbCurCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDirectMode.setStatus('mandatory')
slbNewCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgDirectMode.setStatus('mandatory')
slbCurCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPmask.setStatus('mandatory')
slbNewCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPmask.setStatus('mandatory')
slbCurCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGrace.setStatus('mandatory')
slbNewCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGrace.setStatus('mandatory')
slbCurCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapTpcp.setStatus('mandatory')
slbNewCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapTpcp.setStatus('mandatory')
slbCurCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapDebug.setStatus('mandatory')
slbNewCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 63, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapDebug.setStatus('mandatory')
slbPeerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPeerTableMaxSize.setStatus('mandatory')
slbCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32), )
if mibBuilder.loadTexts: slbCurCfgPeerTable.setStatus('mandatory')
slbCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgPeerIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setStatus('mandatory')
slbCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setStatus('mandatory')
slbCurCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setStatus('mandatory')
slbCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerState.setStatus('mandatory')
slbNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33), )
if mibBuilder.loadTexts: slbNewCfgPeerTable.setStatus('mandatory')
slbNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgPeerIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setStatus('mandatory')
slbNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setStatus('mandatory')
slbNewCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setStatus('mandatory')
slbNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerState.setStatus('mandatory')
slbNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setStatus('mandatory')
slbCurCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setStatus('mandatory')
slbNewCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setStatus('mandatory')
slbCurCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPort.setStatus('mandatory')
slbNewCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPort.setStatus('mandatory')
slbCurCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setStatus('mandatory')
slbNewCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setStatus('mandatory')
slbCurCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPip.setStatus('mandatory')
slbNewCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPip.setStatus('mandatory')
slbCurCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfo.setStatus('mandatory')
slbNewCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfo.setStatus('mandatory')
slbCurCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfoUpdatePeriod.setStatus('mandatory')
slbNewCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfoUpdatePeriod.setStatus('mandatory')
slbCurCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncBwm.setStatus('mandatory')
slbNewCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncBwm.setStatus('mandatory')
slbCurCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setStatus('mandatory')
slbNewCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setStatus('mandatory')
slbCurCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFastage.setStatus('mandatory')
slbNewCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFastage.setStatus('mandatory')
slbCurCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSlowage.setStatus('mandatory')
slbNewCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSlowage.setStatus('mandatory')
slbCurCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTpcp.setStatus('mandatory')
slbNewCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTpcp.setStatus('mandatory')
slbCurCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMetricInterval.setStatus('mandatory')
slbNewCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMetricInterval.setStatus('mandatory')
slbCurCfgRealGroupIdslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealGroupIdslb.setStatus('mandatory')
slbNewCfgRealGroupIdslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealGroupIdslb.setStatus('mandatory')
slbCurCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLdapVersion.setStatus('mandatory')
slbNewCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLdapVersion.setStatus('mandatory')
slbCurCfgIsdInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdInterval.setStatus('mandatory')
slbNewCfgIsdInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdInterval.setStatus('mandatory')
slbCurCfgIsdRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdRetry.setStatus('mandatory')
slbNewCfgIsdRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdRetry.setStatus('mandatory')
slbCurCfgIsdRestr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdRestr.setStatus('mandatory')
slbNewCfgIsdRestr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdRestr.setStatus('mandatory')
slbCurCfgIsdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIsdNumber.setStatus('mandatory')
slbNewCfgIsdNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIsdNumber.setStatus('mandatory')
slbCurCfgTcpTimeWindow = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTcpTimeWindow.setStatus('mandatory')
slbNewCfgTcpTimeWindow = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTcpTimeWindow.setStatus('mandatory')
slbCurCfgTcpHoldDuration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTcpHoldDuration.setStatus('mandatory')
slbNewCfgTcpHoldDuration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTcpHoldDuration.setStatus('mandatory')
slbCurCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgAllowHttpHc.setStatus('mandatory')
slbNewCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgAllowHttpHc.setStatus('mandatory')
slbCurCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1), )
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setStatus('obsolete')
slbCurCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgFailOverIndex"))
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setStatus('obsolete')
slbCurCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setStatus('obsolete')
slbCurCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setStatus('obsolete')
slbCurCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setStatus('obsolete')
slbCurCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setStatus('obsolete')
slbCurCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverState.setStatus('obsolete')
slbCurCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setStatus('obsolete')
slbNewCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2), )
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setStatus('obsolete')
slbNewCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgFailOverIndex"))
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setStatus('obsolete')
slbNewCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setStatus('obsolete')
slbNewCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setStatus('obsolete')
slbNewCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setStatus('obsolete')
slbNewCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setStatus('obsolete')
slbNewCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverState.setStatus('obsolete')
slbNewCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setStatus('obsolete')
slbCurCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setStatus('mandatory')
slbNewCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setStatus('mandatory')
slbCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setStatus('mandatory')
slbCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setStatus('mandatory')
slbCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setStatus('mandatory')
slbCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setStatus('mandatory')
slbNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setStatus('mandatory')
slbNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setStatus('mandatory')
slbNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setStatus('mandatory')
slbNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setStatus('mandatory')
slbNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setStatus('mandatory')
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('mandatory')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('mandatory')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('mandatory')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('mandatory')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('mandatory')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('mandatory')
slbUrlExpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlExpTableMaxSize.setStatus('mandatory')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('mandatory')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('mandatory')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('mandatory')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('mandatory')
slbCurCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbBwmContract.setStatus('mandatory')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('mandatory')
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('mandatory')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('mandatory')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('mandatory')
slbNewCfgUrlLbBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbBwmContract.setStatus('mandatory')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('mandatory')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('mandatory')
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('mandatory')
slbUrlLbPathTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlLbPathTableMaxSize.setStatus('mandatory')
rtspUrlExpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspUrlExpTableMaxSize.setStatus('mandatory')
rtspCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2), )
if mibBuilder.loadTexts: rtspCurCfgUrlExpTable.setStatus('mandatory')
rtspCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "rtspCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: rtspCurCfgUrlExpTableEntry.setStatus('mandatory')
rtspCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspCurCfgUrlExpIndex.setStatus('mandatory')
rtspCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspCurCfgUrlExpression.setStatus('mandatory')
rtspNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3), )
if mibBuilder.loadTexts: rtspNewCfgUrlExpTable.setStatus('mandatory')
rtspNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "rtspNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: rtspNewCfgUrlExpTableEntry.setStatus('mandatory')
rtspNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspNewCfgUrlExpIndex.setStatus('mandatory')
rtspNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtspNewCfgUrlExpression.setStatus('mandatory')
rtspNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtspNewCfgUrlExpDelete.setStatus('mandatory')
slbCurCfgRurlGenDeny = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlGenDeny.setStatus('mandatory')
slbNewCfgRurlGenDeny = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlGenDeny.setStatus('mandatory')
slbRurlDportTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRurlDportTableMaxSize.setStatus('mandatory')
slbCurCfgRurlDportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3), )
if mibBuilder.loadTexts: slbCurCfgRurlDportTable.setStatus('mandatory')
slbCurCfgRurlDportTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgRurlDportIndex"))
if mibBuilder.loadTexts: slbCurCfgRurlDportTableEntry.setStatus('mandatory')
slbCurCfgRurlDportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportIndex.setStatus('mandatory')
slbCurCfgRurlDportLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportLowPort.setStatus('mandatory')
slbCurCfgRurlDportHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRurlDportHighPort.setStatus('mandatory')
slbNewCfgRurlDportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4), )
if mibBuilder.loadTexts: slbNewCfgRurlDportTable.setStatus('mandatory')
slbNewCfgRurlDportTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbNewCfgRurlDportIndex"))
if mibBuilder.loadTexts: slbNewCfgRurlDportTableEntry.setStatus('mandatory')
slbNewCfgRurlDportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportIndex.setStatus('mandatory')
slbNewCfgRurlDportLowPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportLowPort.setStatus('mandatory')
slbNewCfgRurlDportHighPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportHighPort.setStatus('mandatory')
slbNewCfgRurlDportDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 52, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRurlDportDelete.setStatus('mandatory')
slbCurCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWSPPort.setStatus('mandatory')
slbNewCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWSPPort.setStatus('mandatory')
slbCurCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcOffset.setStatus('mandatory')
slbNewCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcOffset.setStatus('mandatory')
slbCurCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcSndContent.setStatus('mandatory')
slbNewCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcSndContent.setStatus('mandatory')
slbCurCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcRcvContent.setStatus('mandatory')
slbNewCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcRcvContent.setStatus('mandatory')
slbCurCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSPort.setStatus('mandatory')
slbNewCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 62, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSPort.setStatus('mandatory')
synAttackCurCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgInterval.setStatus('mandatory')
synAttackNewCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgInterval.setStatus('mandatory')
synAttackCurCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgThreshhold.setStatus('mandatory')
synAttackNewCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 82, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgThreshhold.setStatus('mandatory')
fltCfgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgTableMaxSize.setStatus('mandatory')
fltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2), )
if mibBuilder.loadTexts: fltCurCfgTable.setStatus('mandatory')
fltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgIndx"))
if mibBuilder.loadTexts: fltCurCfgTableEntry.setStatus('mandatory')
fltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIndx.setStatus('mandatory')
fltCurCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIp.setStatus('mandatory')
fltCurCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setStatus('mandatory')
fltCurCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIp.setStatus('mandatory')
fltCurCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setStatus('mandatory')
fltCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProtocol.setStatus('mandatory')
fltCurCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setStatus('mandatory')
fltCurCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setStatus('mandatory')
fltCurCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setStatus('mandatory')
fltCurCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setStatus('mandatory')
fltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAction.setStatus('mandatory')
fltCurCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirPort.setStatus('mandatory')
fltCurCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setStatus('mandatory')
fltCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLog.setStatus('mandatory')
fltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgState.setStatus('mandatory')
fltCurCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNat.setStatus('mandatory')
fltCurCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgCache.setStatus('mandatory')
fltCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgInvert.setStatus('mandatory')
fltCurCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgClientProxy.setStatus('mandatory')
fltCurCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpAck.setStatus('mandatory')
fltCurCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setStatus('mandatory')
fltCurCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcMac.setStatus('mandatory')
fltCurCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 23), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstMac.setStatus('mandatory')
fltCurCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setStatus('mandatory')
fltCurCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setStatus('mandatory')
fltCurCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setStatus('mandatory')
fltCurCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setStatus('mandatory')
fltCurCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setStatus('mandatory')
fltCurCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setStatus('mandatory')
fltCurCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setStatus('mandatory')
fltCurCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setStatus('mandatory')
fltCurCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setStatus('mandatory')
fltCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgBwmContract.setStatus('mandatory')
fltCurCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setStatus('mandatory')
fltCurCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setStatus('mandatory')
fltCurCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setStatus('mandatory')
fltCurCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFwlb.setStatus('mandatory')
fltCurCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNatTimeout.setStatus('mandatory')
fltCurCfgRurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRurl.setStatus('mandatory')
fltCurCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLinklb.setStatus('mandatory')
fltCurCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgWapRadiusSnoop.setStatus('mandatory')
fltCurCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMac.setStatus('mandatory')
fltCurCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMac.setStatus('mandatory')
fltCurCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIdslbHash.setStatus('mandatory')
fltCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgVlan.setStatus('mandatory')
fltCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgName.setStatus('mandatory')
fltCurCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateLimit.setStatus('mandatory')
fltCurCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateMaxConn.setStatus('mandatory')
fltCurCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHash.setStatus('mandatory')
fltCurCfgNasa = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNasa.setStatus('mandatory')
fltCurCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyState.setStatus('mandatory')
fltCurCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyUrlBmap.setStatus('mandatory')
fltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3), )
if mibBuilder.loadTexts: fltNewCfgTable.setStatus('mandatory')
fltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgIndx"))
if mibBuilder.loadTexts: fltNewCfgTableEntry.setStatus('mandatory')
fltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgIndx.setStatus('mandatory')
fltNewCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIp.setStatus('mandatory')
fltNewCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setStatus('mandatory')
fltNewCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIp.setStatus('mandatory')
fltNewCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setStatus('mandatory')
fltNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgProtocol.setStatus('mandatory')
fltNewCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setStatus('mandatory')
fltNewCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setStatus('mandatory')
fltNewCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setStatus('mandatory')
fltNewCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setStatus('mandatory')
fltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAction.setStatus('mandatory')
fltNewCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirPort.setStatus('mandatory')
fltNewCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setStatus('mandatory')
fltNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLog.setStatus('mandatory')
fltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgState.setStatus('mandatory')
fltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDelete.setStatus('mandatory')
fltNewCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNat.setStatus('mandatory')
fltNewCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgCache.setStatus('mandatory')
fltNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgInvert.setStatus('mandatory')
fltNewCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgClientProxy.setStatus('mandatory')
fltNewCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpAck.setStatus('mandatory')
fltNewCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setStatus('mandatory')
fltNewCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 23), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcMac.setStatus('mandatory')
fltNewCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 24), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstMac.setStatus('mandatory')
fltNewCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setStatus('mandatory')
fltNewCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setStatus('mandatory')
fltNewCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setStatus('mandatory')
fltNewCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setStatus('mandatory')
fltNewCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setStatus('mandatory')
fltNewCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setStatus('mandatory')
fltNewCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setStatus('mandatory')
fltNewCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setStatus('mandatory')
fltNewCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setStatus('mandatory')
fltNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgBwmContract.setStatus('mandatory')
fltNewCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setStatus('mandatory')
fltNewCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setStatus('mandatory')
fltNewCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setStatus('mandatory')
fltNewCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFwlb.setStatus('mandatory')
fltNewCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNatTimeout.setStatus('mandatory')
fltNewCfgRurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRurl.setStatus('mandatory')
fltNewCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLinklb.setStatus('mandatory')
fltNewCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgWapRadiusSnoop.setStatus('mandatory')
fltNewCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMac.setStatus('mandatory')
fltNewCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMac.setStatus('mandatory')
fltNewCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgIdslbHash.setStatus('mandatory')
fltNewCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgVlan.setStatus('mandatory')
fltNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgName.setStatus('mandatory')
fltNewCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpRateLimit.setStatus('mandatory')
fltNewCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpRateMaxConn.setStatus('mandatory')
fltNewCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgHash.setStatus('mandatory')
fltNewCfgNasa = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNasa.setStatus('mandatory')
fltNewCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyState.setStatus('mandatory')
fltNewCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 53), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyUrlBmap.setStatus('mandatory')
fltNewCfgLayer7DenyAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyAddUrl.setStatus('mandatory')
fltNewCfgLayer7DenyRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyRemUrl.setStatus('mandatory')
fltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4), )
if mibBuilder.loadTexts: fltCurCfgPortTable.setStatus('mandatory')
fltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgPortIndx"))
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setStatus('mandatory')
fltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortIndx.setStatus('mandatory')
fltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortState.setStatus('mandatory')
fltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setStatus('mandatory')
fltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5), )
if mibBuilder.loadTexts: fltNewCfgPortTable.setStatus('mandatory')
fltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgPortIndx"))
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setStatus('mandatory')
fltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortIndx.setStatus('mandatory')
fltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortState.setStatus('mandatory')
fltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setStatus('mandatory')
fltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setStatus('mandatory')
fltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setStatus('mandatory')
fltCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6), )
if mibBuilder.loadTexts: fltCurCfgUrlBwmTable.setStatus('mandatory')
fltCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgUrlBwmFltIndex"), (0, "ALTEON-TS-LAYER4-MIB", "fltCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltCurCfgUrlBwmEntry.setStatus('mandatory')
fltCurCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmFltIndex.setStatus('mandatory')
fltCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmUrlId.setStatus('mandatory')
fltCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmContract.setStatus('mandatory')
fltNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7), )
if mibBuilder.loadTexts: fltNewCfgUrlBwmTable.setStatus('mandatory')
fltNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgUrlBwmFltIndex"), (0, "ALTEON-TS-LAYER4-MIB", "fltNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltNewCfgUrlBwmEntry.setStatus('mandatory')
fltNewCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmFltIndex.setStatus('mandatory')
fltNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmUrlId.setStatus('mandatory')
fltNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlBwmContract.setStatus('mandatory')
fltNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlBwmDelete.setStatus('mandatory')
fltUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltUrlBwmTableMaxSize.setStatus('mandatory')
gslbCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenState.setStatus('mandatory')
gslbNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenState.setStatus('mandatory')
gslbCurCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setStatus('mandatory')
gslbNewCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setStatus('mandatory')
gslbCurCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setStatus('mandatory')
gslbNewCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setStatus('mandatory')
gslbCurCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setStatus('mandatory')
gslbNewCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setStatus('mandatory')
gslbCurCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setStatus('mandatory')
gslbNewCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setStatus('mandatory')
gslbCurCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setStatus('mandatory')
gslbNewCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setStatus('mandatory')
gslbCurCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setStatus('mandatory')
gslbNewCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setStatus('mandatory')
gslbCurCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenOne.setStatus('mandatory')
gslbNewCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenOne.setStatus('mandatory')
gslbCurCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setStatus('mandatory')
gslbNewCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setStatus('mandatory')
gslbCurCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setStatus('mandatory')
gslbNewCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setStatus('mandatory')
gslbCurCfgGenAlways = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenAlways.setStatus('mandatory')
gslbNewCfgGenAlways = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenAlways.setStatus('mandatory')
gslbCurCfgGenWeight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenWeight.setStatus('mandatory')
gslbNewCfgGenWeight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenWeight.setStatus('mandatory')
gslbCurCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setStatus('mandatory')
gslbNewCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setStatus('mandatory')
gslbCurCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setStatus('mandatory')
gslbNewCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setStatus('mandatory')
gslbNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5))
gslbCurCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setStatus('obsolete')
gslbNewCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setStatus('obsolete')
gslbCurCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenEip.setStatus('obsolete')
gslbNewCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenEip.setStatus('obsolete')
gslbCurCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setStatus('obsolete')
gslbNewCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setStatus('obsolete')
gslbCurCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setStatus('obsolete')
gslbNewCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setStatus('obsolete')
gslbNetworkTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setStatus('mandatory')
gslbCurCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2), )
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setStatus('mandatory')
gslbCurCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbCurCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setStatus('mandatory')
gslbCurCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setStatus('mandatory')
gslbCurCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setStatus('mandatory')
gslbCurCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setStatus('mandatory')
gslbCurCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setStatus('mandatory')
gslbCurCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setStatus('mandatory')
gslbNewCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3), )
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setStatus('mandatory')
gslbNewCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbNewCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setStatus('mandatory')
gslbNewCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setStatus('mandatory')
gslbNewCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setStatus('mandatory')
gslbNewCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setStatus('mandatory')
gslbNewCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setStatus('mandatory')
gslbNewCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setStatus('mandatory')
gslbNewCfgNetworkDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setStatus('mandatory')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('mandatory')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('mandatory')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('mandatory')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('mandatory')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('mandatory')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('mandatory')
gslbRemSiteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setStatus('mandatory')
gslbCurCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2), )
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setStatus('mandatory')
gslbCurCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbCurCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setStatus('mandatory')
gslbCurCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setStatus('mandatory')
gslbCurCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setStatus('mandatory')
gslbCurCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setStatus('mandatory')
gslbCurCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setStatus('mandatory')
gslbCurCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setStatus('mandatory')
gslbCurCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteName.setStatus('mandatory')
gslbNewCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3), )
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setStatus('mandatory')
gslbNewCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbNewCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setStatus('mandatory')
gslbNewCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setStatus('mandatory')
gslbNewCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setStatus('mandatory')
gslbNewCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setStatus('mandatory')
gslbNewCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setStatus('mandatory')
gslbNewCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setStatus('mandatory')
gslbNewCfgRemSiteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteDelete.setStatus('mandatory')
gslbNewCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteName.setStatus('mandatory')
dynSLBRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1), )
if mibBuilder.loadTexts: dynSLBRealServerTable.setStatus('obsolete')
dynSLBRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "dynSLBRealServerIpAddr"), (0, "ALTEON-TS-LAYER4-MIB", "dynSLBRealServerPortNum"))
if mibBuilder.loadTexts: dynSLBRealServerEntry.setStatus('obsolete')
dynSLBRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setStatus('obsolete')
dynSLBRealServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setStatus('obsolete')
dynSLBRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynSLBRealServerWeight.setStatus('obsolete')
slbStatRServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5), )
if mibBuilder.loadTexts: slbStatRServerTable.setStatus('mandatory')
slbStatRServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatRServerIndex"))
if mibBuilder.loadTexts: slbStatRServerEntry.setStatus('mandatory')
slbStatRServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerIndex.setStatus('mandatory')
slbStatRServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setStatus('mandatory')
slbStatRServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setStatus('mandatory')
slbStatRServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerFailures.setStatus('mandatory')
slbStatRServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setStatus('mandatory')
slbStatRServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctets.setStatus('obsolete')
slbStatRServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setStatus('mandatory')
slbStatRServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setStatus('mandatory')
slbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6), )
if mibBuilder.loadTexts: slbStatGroupTable.setStatus('mandatory')
slbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatGroupIndex"))
if mibBuilder.loadTexts: slbStatGroupEntry.setStatus('mandatory')
slbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupIndex.setStatus('mandatory')
slbStatGroupCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setStatus('mandatory')
slbStatGroupTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setStatus('mandatory')
slbStatGroupHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setStatus('mandatory')
slbStatGroupHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctets.setStatus('obsolete')
slbStatGroupHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setStatus('mandatory')
slbStatGroupHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setStatus('mandatory')
slbStatVServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7), )
if mibBuilder.loadTexts: slbStatVServerTable.setStatus('mandatory')
slbStatVServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatVServerIndex"))
if mibBuilder.loadTexts: slbStatVServerEntry.setStatus('mandatory')
slbStatVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIndex.setStatus('mandatory')
slbStatVServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setStatus('mandatory')
slbStatVServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setStatus('mandatory')
slbStatVServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setStatus('mandatory')
slbStatVServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctets.setStatus('obsolete')
slbStatVServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setStatus('mandatory')
slbStatVServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setStatus('mandatory')
slbStatVServerHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setStatus('mandatory')
slbStatVServerHeaderMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setStatus('mandatory')
slbStatVServerHeaderTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setStatus('mandatory')
slbStatVServerCookieRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieRewrites.setStatus('mandatory')
slbStatVServerCookieInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieInserts.setStatus('mandatory')
slbStatPortMaintTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: slbStatPortMaintTable.setStatus('mandatory')
slbStatPortMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatPortMaintPortIndex"))
if mibBuilder.loadTexts: slbStatPortMaintEntry.setStatus('mandatory')
slbStatPortMaintPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setStatus('mandatory')
slbStatPortMaintCurBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setStatus('mandatory')
slbStatPortMaintBindingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setStatus('mandatory')
slbStatPortMaintNonTcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setStatus('mandatory')
slbStatPortMaintTcpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setStatus('mandatory')
slbStatPortMaintUdpDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setStatus('mandatory')
slbStatPortMaintIncorrectVIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setStatus('mandatory')
slbStatPortMaintIncorrectVports = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setStatus('mandatory')
slbStatPortMaintRealServerNoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setStatus('mandatory')
slbStatPortMaintFilteredDeniedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setStatus('mandatory')
slbStatPortMaintCurBindings4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings4Seconds.setStatus('mandatory')
slbStatPortMaintCurBindings64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings64Seconds.setStatus('mandatory')
slbStatPortMaintVMAdiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintVMAdiscards.setStatus('mandatory')
slbStatPortRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2), )
if mibBuilder.loadTexts: slbStatPortRealServerTable.setStatus('mandatory')
slbStatPortRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbStatPortRealServerPortIndex"), (0, "ALTEON-TS-LAYER4-MIB", "slbStatPortRealServerServerIndex"))
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setStatus('mandatory')
slbStatPortRealServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setStatus('mandatory')
slbStatPortRealServerServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setStatus('mandatory')
slbStatPortRealServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setStatus('mandatory')
slbStatPortRealServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setStatus('mandatory')
slbStatPortRealServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setStatus('obsolete')
slbStatPortRealServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setStatus('mandatory')
slbStatPortRealServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setStatus('mandatory')
slbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8))
slbIncorrectVirtServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVirtServs.setStatus('mandatory')
slbIncorrectVports = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVports.setStatus('mandatory')
slbNoRealServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNoRealServs.setStatus('mandatory')
wapMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4))
radiusAcctReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1))
tpcpAddSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2))
tpcpDeleteSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3))
radiusAcctReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqs.setStatus('mandatory')
radiusAcctWrapReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctWrapReqs.setStatus('mandatory')
radiusAcctStartReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStartReqs.setStatus('mandatory')
radiusAcctUpdateReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctUpdateReqs.setStatus('mandatory')
radiusAcctStopReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStopReqs.setStatus('mandatory')
radiusAcctBadReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctBadReqs.setStatus('mandatory')
radiusAcctAddSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctAddSessionReqs.setStatus('mandatory')
radiusAcctDeleteSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctDeleteSessionReqs.setStatus('mandatory')
radiusAcctReqFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsQFull.setStatus('mandatory')
radiusAcctReqFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsSPDead.setStatus('mandatory')
radiusAcctReqFailsDMAFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsDMAFails.setStatus('mandatory')
radiusAcctMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctMaxEntriesInUse.setStatus('mandatory')
tpcpAddSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqs.setStatus('mandatory')
tpcpAddSessReqsFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsFailsQFull.setStatus('mandatory')
tpcpAddSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsFailsSPDead.setStatus('mandatory')
tpcpAddSessReqsEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsEntriesInUse.setStatus('mandatory')
tpcpAddSessReqsMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsMaxEntriesInUse.setStatus('mandatory')
tpcpDeleteSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqs.setStatus('mandatory')
tpcpDeleteSessReqsFailsQFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsQFull.setStatus('mandatory')
tpcpDeleteSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsSPDead.setStatus('mandatory')
tpcpDeleteSessReqsEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsEntriesInUse.setStatus('mandatory')
tpcpDeleteSessReqsMaxEntriesInUse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsMaxEntriesInUse.setStatus('mandatory')
wapRequestToWrongSP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 8, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wapRequestToWrongSP.setStatus('mandatory')
slbStatMaintBackupServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setStatus('mandatory')
slbStatMaintOverflowServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setStatus('mandatory')
fltStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1), )
if mibBuilder.loadTexts: fltStatTable.setStatus('mandatory')
fltStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "fltStatFltIndex"))
if mibBuilder.loadTexts: fltStatTableEntry.setStatus('mandatory')
fltStatFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltIndex.setStatus('mandatory')
fltStatFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltFirings.setStatus('mandatory')
gslbStatRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1), )
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setStatus('mandatory')
gslbStatRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "gslbStatRemRealServerIndex"))
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setStatus('mandatory')
gslbStatRemRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setStatus('mandatory')
gslbStatRemRealServerDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setStatus('mandatory')
gslbStatRemRealServerHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setStatus('mandatory')
gslbStatMaintInGoodSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setStatus('mandatory')
gslbStatMaintInBadSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setStatus('mandatory')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('mandatory')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('mandatory')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('mandatory')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('mandatory')
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('mandatory')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('mandatory')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('mandatory')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('mandatory')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('mandatory')
tcpStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatCurConns.setStatus('mandatory')
tcpStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatHalfOpens.setStatus('mandatory')
ftpSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1))
ftpSlbStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSlbStatTotal.setStatus('mandatory')
ftpNatStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNatStatTotal.setStatus('mandatory')
rurlErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1))
rurlErrorStatConnect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatConnect.setStatus('mandatory')
rurlErrorStatPack = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatPack.setStatus('mandatory')
rurlErrorStatUnpack = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatUnpack.setStatus('mandatory')
rurlErrorStatDma = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatDma.setStatus('mandatory')
rurlErrorStatBuf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatBuf.setStatus('mandatory')
rurlErrorStatBufWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatBufWrap.setStatus('mandatory')
rurlErrorStatProto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlErrorStatProto.setStatus('mandatory')
rurlInfoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2))
rurlInfoStatClientWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientWrap.setStatus('mandatory')
rurlInfoStatServerWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerWrap.setStatus('mandatory')
rurlInfoStatBufWrap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatBufWrap.setStatus('mandatory')
rurlInfoStatFreeRingCalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFreeRingCalls.setStatus('mandatory')
rurlInfoStatClientResets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientResets.setStatus('mandatory')
rurlInfoStatServerResets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerResets.setStatus('mandatory')
rurlInfoStatFramePassThru = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFramePassThru.setStatus('mandatory')
rurlInfoStatParseFiltMiss = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatParseFiltMiss.setStatus('mandatory')
rurlInfoStatExceedBufLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatExceedBufLen.setStatus('mandatory')
rurlInfoStatExceedFrameDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatExceedFrameDepth.setStatus('mandatory')
rurlInfoStatZeroContentLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatZeroContentLen.setStatus('mandatory')
rurlInfoStatNonTypicalOffsets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatNonTypicalOffsets.setStatus('mandatory')
rurlInfoStatFINRSTSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatFINRSTSessSetup.setStatus('mandatory')
rurlInfoStatPSHSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatPSHSessSetup.setStatus('mandatory')
rurlInfoStatNonSYNSessSetup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatNonSYNSessSetup.setStatus('mandatory')
rurlInfoStatL7BindCalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatL7BindCalls.setStatus('mandatory')
rurlInfoStatSessSetups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatSessSetups.setStatus('mandatory')
rurlInfoStatMiscProcess = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatMiscProcess.setStatus('mandatory')
rurlInfoStatClientPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientPktsIn.setStatus('mandatory')
rurlInfoStatClientSYNsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientSYNsIn.setStatus('mandatory')
rurlInfoStatClientReTXSYNsSeen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientReTXSYNsSeen.setStatus('mandatory')
rurlInfoStatClientSYNACKsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientSYNACKsSent.setStatus('mandatory')
rurlInfoStatClientACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientACKsIn.setStatus('mandatory')
rurlInfoStatClientDataIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientDataIn.setStatus('mandatory')
rurlInfoStatClientDataRetx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatClientDataRetx.setStatus('mandatory')
rurlInfoStatServerSYNsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsSent.setStatus('mandatory')
rurlInfoStatServerSYNACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNACKsIn.setStatus('mandatory')
rurlInfoStatServerACKsSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerACKsSent.setStatus('mandatory')
rurlInfoStatServerACKsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerACKsIn.setStatus('mandatory')
rurlInfoStatServerSYNsRetx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetx.setStatus('mandatory')
rurlInfoStatServerSYNsRetxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatServerSYNsRetxErrors.setStatus('mandatory')
rurlInfoStatL7SessionReuse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatL7SessionReuse.setStatus('mandatory')
rurlInfoStatConnSpliced = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlInfoStatConnSpliced.setStatus('mandatory')
rurlMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3))
rurlMaintStatOrgServerHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatOrgServerHits.setStatus('mandatory')
rurlMaintStatHTTPRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHTTPRedirs.setStatus('mandatory')
rurlMaintStatServerReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatServerReqs.setStatus('mandatory')
rurlMaintStatServerAcks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatServerAcks.setStatus('mandatory')
rurlMaintStatSessCnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatSessCnt.setStatus('mandatory')
rurlMaintStatLastFrameCnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatLastFrameCnt.setStatus('mandatory')
rurlMaintStatConnectRxmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatConnectRxmit.setStatus('mandatory')
rurlMaintStatResetRxmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatResetRxmit.setStatus('mandatory')
rurlMaintStatCurRdirIPEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPEntries.setStatus('mandatory')
rurlMaintStatHighRdirIPEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPEntries.setStatus('mandatory')
rurlMaintStatCurRdirPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirPORTEntries.setStatus('mandatory')
rurlMaintStatHighRdirPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirPORTEntries.setStatus('mandatory')
rurlMaintStatCurRdirIPPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRdirIPPORTEntries.setStatus('mandatory')
rurlMaintStatHighRdirIPPORTEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRdirIPPORTEntries.setStatus('mandatory')
rurlMaintStatCurRSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRSEQBufEntries.setStatus('mandatory')
rurlMaintStatHighRSEQBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRSEQBufEntries.setStatus('mandatory')
rurlMaintStatCurRBUFBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatCurRBUFBufEntries.setStatus('mandatory')
rurlMaintStatHighRBUFBufEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatHighRBUFBufEntries.setStatus('mandatory')
rurlMaintStatRSEQBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQBufAllocs.setStatus('mandatory')
rurlMaintStatRSEQBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQBufFrees.setStatus('mandatory')
rurlMaintStatRSEQFailBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufAllocs.setStatus('mandatory')
rurlMaintStatRSEQFailBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRSEQFailBufFrees.setStatus('mandatory')
rurlMaintStatRBUFBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFBufAllocs.setStatus('mandatory')
rurlMaintStatRBUFBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFBufFrees.setStatus('mandatory')
rurlMaintStatRBUFFailBufAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufAllocs.setStatus('mandatory')
rurlMaintStatRBUFFailBufFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFFailBufFrees.setStatus('mandatory')
rurlMaintStatRBUFRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFRetransmit.setStatus('mandatory')
rurlMaintStatRBUFChanged = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 18, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurlMaintStatRBUFChanged.setStatus('mandatory')
rtspStatControlConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatControlConns.setStatus('mandatory')
rtspStatUDPStreams = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatUDPStreams.setStatus('mandatory')
rtspStatRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatRedirects.setStatus('mandatory')
rtspStatConnDenied = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatConnDenied.setStatus('mandatory')
rtspStatAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatAllocFails.setStatus('mandatory')
tcpLimitStatHoldDowns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatHoldDowns.setStatus('mandatory')
tcpLimitStatClientEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 23, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatClientEntries.setStatus('mandatory')
nasaStatSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1), )
if mibBuilder.loadTexts: nasaStatSpTable.setStatus('mandatory')
nasaStatSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "nasaStatSpPortIndex"))
if mibBuilder.loadTexts: nasaStatSpEntry.setStatus('mandatory')
nasaStatSpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpPortIndex.setStatus('mandatory')
nasaStatSpCtlTunnelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelIn.setStatus('mandatory')
nasaStatSpCtlTunnelInvalidPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelInvalidPkt.setStatus('mandatory')
nasaStatSpReqSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpReqSessCnt.setStatus('mandatory')
nasaStatSpSessAddCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessAddCnt.setStatus('mandatory')
nasaStatSpSessDelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessDelCnt.setStatus('mandatory')
nasaStatSpSessUpdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessUpdCnt.setStatus('mandatory')
nasaStatSpSessRdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessRdCnt.setStatus('mandatory')
nasaStatSpSessCharCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpSessCharCnt.setStatus('mandatory')
nasaStatSpReqSessNoIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpReqSessNoIsd.setStatus('mandatory')
nasaStatSpCtlTunnelToMp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCtlTunnelToMp.setStatus('mandatory')
nasaStatSpBcastTunnelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelCnt.setStatus('mandatory')
nasaStatSpBcastTunnelToMp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToMp.setStatus('mandatory')
nasaStatSpBcastTunnelToIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpBcastTunnelToIsd.setStatus('mandatory')
nasaStatSpRurlTunnelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpRurlTunnelCnt.setStatus('mandatory')
nasaStatSpIpDatagramCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpIpDatagramCnt.setStatus('mandatory')
nasaStatSpCliRedirectCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpCliRedirectCnt.setStatus('mandatory')
nasaStatSpInvalidVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidVersion.setStatus('mandatory')
nasaStatSpAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckTx.setStatus('mandatory')
nasaStatSpAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckRx.setStatus('mandatory')
nasaStatSpAckAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckAlloc.setStatus('mandatory')
nasaStatSpAckFree = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAckFree.setStatus('mandatory')
nasaStatSpAllocAckFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAllocAckFail.setStatus('mandatory')
nasaStatSpAllocFrmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpAllocFrmFail.setStatus('mandatory')
nasaStatSpRexmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpRexmitFail.setStatus('mandatory')
nasaStatSpInvalidIsd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidIsd.setStatus('mandatory')
nasaStatSpInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatSpInvalidPkts.setStatus('mandatory')
nasaMpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2))
nasaStatMpTotalRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpTotalRx.setStatus('mandatory')
nasaStatMpTotalTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpTotalTx.setStatus('mandatory')
nasaStatMpBadCksum = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpBadCksum.setStatus('mandatory')
nasaStatMpInvalidRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpInvalidRx.setStatus('mandatory')
nasaStatMpPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpPingRequests.setStatus('mandatory')
nasaStatMpPingResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpPingResponses.setStatus('mandatory')
nasaStatMpRegRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpRegRequests.setStatus('mandatory')
nasaStatMpCapResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCapResponses.setStatus('mandatory')
nasaStatMpRegConfirmations = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpRegConfirmations.setStatus('mandatory')
nasaStatMpUnregRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpUnregRequests.setStatus('mandatory')
nasaStatMpHealthRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpHealthRequests.setStatus('mandatory')
nasaStatMpHealthResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpHealthResponses.setStatus('mandatory')
nasaStatMpCmdRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCmdRequests.setStatus('mandatory')
nasaStatMpCmdResponses = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 24, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaStatMpCmdResponses.setStatus('mandatory')
dnsSlbStatTCPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatTCPQueries.setStatus('mandatory')
dnsSlbStatUDPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatUDPQueries.setStatus('mandatory')
dnsSlbStatInvalidQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInvalidQueries.setStatus('mandatory')
dnsSlbStatMultipleQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatMultipleQueries.setStatus('mandatory')
dnsSlbStatDnameParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatDnameParseErrors.setStatus('mandatory')
dnsSlbStatFailedMatches = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatFailedMatches.setStatus('mandatory')
dnsSlbStatInternalErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 25, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInternalErrors.setStatus('mandatory')
slbFailOverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1), )
if mibBuilder.loadTexts: slbFailOverInfoTable.setStatus('mandatory')
slbFailOverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbFailOverInfoIndex"))
if mibBuilder.loadTexts: slbFailOverInfoEntry.setStatus('mandatory')
slbFailOverInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoIndex.setStatus('mandatory')
slbFailOverInfoPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setStatus('mandatory')
slbFailOverInfoPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setStatus('mandatory')
slbFailOverInfoPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setStatus('mandatory')
slbFailOverInfoSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setStatus('mandatory')
slbFailOverInfoSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setStatus('mandatory')
slbFailOverInfoSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setStatus('mandatory')
slbRealServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2), )
if mibBuilder.loadTexts: slbRealServerInfoTable.setStatus('mandatory')
slbRealServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbRealServerInfoIndex"))
if mibBuilder.loadTexts: slbRealServerInfoEntry.setStatus('mandatory')
slbRealServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIndex.setStatus('mandatory')
slbRealServerInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setStatus('mandatory')
slbRealServerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMacAddr.setStatus('mandatory')
slbRealServerInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setStatus('mandatory')
slbRealServerInfoHealthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("layer3", 2), ("layer4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setStatus('mandatory')
slbRealServerInfoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overflow", 1), ("no-overflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setStatus('mandatory')
slbRealServerInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoState.setStatus('mandatory')
nasaIsdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3), )
if mibBuilder.loadTexts: nasaIsdInfoTable.setStatus('mandatory')
nasaIsdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "nasaIsdInfoIndex"))
if mibBuilder.loadTexts: nasaIsdInfoEntry.setStatus('mandatory')
nasaIsdInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoIndex.setStatus('mandatory')
nasaIsdInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoIpAddr.setStatus('mandatory')
nasaIsdMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdMacAddr.setStatus('mandatory')
nasaIsdInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoSwitchPort.setStatus('mandatory')
nasaIsdInfoGdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoGdi.setStatus('mandatory')
nasaIsdInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isd-invalid", 1), ("isd-unregistered", 2), ("isd-access", 3), ("isd-up", 4), ("isd-down", 5), ("isd-mip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoState.setStatus('mandatory')
nasaIsdInfoStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasaIsdInfoStateChange.setStatus('mandatory')
operSlbPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1), )
if mibBuilder.loadTexts: operSlbPortTable.setStatus('mandatory')
operSlbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "operSlbPortIndex"))
if mibBuilder.loadTexts: operSlbPortEntry.setStatus('mandatory')
operSlbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortIndex.setStatus('mandatory')
operSlbPortClrSessionTab = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setStatus('mandatory')
slbOperRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1), )
if mibBuilder.loadTexts: slbOperRealServerTable.setStatus('mandatory')
slbOperRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1), ).setIndexNames((0, "ALTEON-TS-LAYER4-MIB", "slbOperRealServerIndex"))
if mibBuilder.loadTexts: slbOperRealServerEntry.setStatus('mandatory')
slbOperRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperRealServerIndex.setStatus('mandatory')
slbOperRealServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("cookiepersistent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperRealServerStatus.setStatus('mandatory')
slbOperConfigSync = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("sync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperConfigSync.setStatus('mandatory')
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", gslbCurCfgGenLookupPort=gslbCurCfgGenLookupPort, slbNewCfgWaphcOffset=slbNewCfgWaphcOffset, slbCurCfgVirtServiceDBind=slbCurCfgVirtServiceDBind, gslbCurCfgRemSiteTable=gslbCurCfgRemSiteTable, nasaStatSpRexmitFail=nasaStatSpRexmitFail, slbStatPortMaintIncorrectVIPs=slbStatPortMaintIncorrectVIPs, gslbStatRemRealServerHttpRedirs=gslbStatRemRealServerHttpRedirs, slbCurCfgRurlDportHighPort=slbCurCfgRurlDportHighPort, rurlMaintStatCurRSEQBufEntries=rurlMaintStatCurRSEQBufEntries, slbStatVServerCookieInserts=slbStatVServerCookieInserts, slbNewCfgTcpHoldDuration=slbNewCfgTcpHoldDuration, slbCurCfgPortEntry=slbCurCfgPortEntry, urlStatRedCookie=urlStatRedCookie, fltCurCfgRedirPort=fltCurCfgRedirPort, slbStatPortRealServerServerIndex=slbStatPortRealServerServerIndex, rtspStatConnDenied=rtspStatConnDenied, slbCurCfgVirtServiceHttpSlbOption=slbCurCfgVirtServiceHttpSlbOption, slbNewCfgVirtServiceHttpSlb=slbNewCfgVirtServiceHttpSlb, fltCurCfgRangeHighSrcPort=fltCurCfgRangeHighSrcPort, slbStatPortMaintCurBindings4Seconds=slbStatPortMaintCurBindings4Seconds, slbNewCfgGroupTable=slbNewCfgGroupTable, slbPeerTableMaxSize=slbPeerTableMaxSize, slbNewCfgRurlGenDeny=slbNewCfgRurlGenDeny, slbNewCfgPortTable=slbNewCfgPortTable, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, slbStatPortMaintVMAdiscards=slbStatPortMaintVMAdiscards, gslbCurCfgGenLookupTimeout=gslbCurCfgGenLookupTimeout, rurlMaintStatCurRdirPORTEntries=rurlMaintStatCurRdirPORTEntries, slbCurCfgAllowHttpHc=slbCurCfgAllowHttpHc, slbCurCfgFailOverPrimaryIp=slbCurCfgFailOverPrimaryIp, fltCurCfgCache=fltCurCfgCache, fltCurCfgTcpAck=fltCurCfgTcpAck, rurlErrorStatBufWrap=rurlErrorStatBufWrap, slbFailOverInfoPrimaryState=slbFailOverInfoPrimaryState, slbRealServerInfoTable=slbRealServerInfoTable, dynSLBRealServerIpAddr=dynSLBRealServerIpAddr, slbCurCfgWaphcOffset=slbCurCfgWaphcOffset, slbNewCfgVirtServiceDBind=slbNewCfgVirtServiceDBind, slbNewCfgRealServerUrlBmap=slbNewCfgRealServerUrlBmap, fltCfgTableMaxSize=fltCfgTableMaxSize, slbStatPortRealServerTotalSessions=slbStatPortRealServerTotalSessions, slbStatPortRealServerTable=slbStatPortRealServerTable, slbNewCfgFailOverTable=slbNewCfgFailOverTable, gslbCurCfgNetworkVip1=gslbCurCfgNetworkVip1, slbCurCfgGroupEntry=slbCurCfgGroupEntry, slbNewCfgRealServerIndex=slbNewCfgRealServerIndex, slbCurCfgSyncVrrp=slbCurCfgSyncVrrp, slbCurCfgVirtServicesTable=slbCurCfgVirtServicesTable, slbUrl=slbUrl, rurlMaintStatLastFrameCnt=rurlMaintStatLastFrameCnt, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, fltNewCfgUrlBwmUrlId=fltNewCfgUrlBwmUrlId, gslbNewCfgNetworkTableEntry=gslbNewCfgNetworkTableEntry, gslbStatRemRealServerIndex=gslbStatRemRealServerIndex, slbCurCfgRealServerUrlBmap=slbCurCfgRealServerUrlBmap, fltNewCfgLayer7DenyState=fltNewCfgLayer7DenyState, dynSLBRealServerTable=dynSLBRealServerTable, slbNewCfgPmask=slbNewCfgPmask, ftpSlbStats=ftpSlbStats, slbNewCfgPortSlbPipState=slbNewCfgPortSlbPipState, slbNewCfgVirtServiceRealGroup=slbNewCfgVirtServiceRealGroup, fltNewCfgPortAddFiltRule=fltNewCfgPortAddFiltRule, tpcpDeleteSessReqsFailsSPDead=tpcpDeleteSessReqsFailsSPDead, rurlInfoStatServerWrap=rurlInfoStatServerWrap, rurlInfoStatL7BindCalls=rurlInfoStatL7BindCalls, fltCurCfgDstIpMac=fltCurCfgDstIpMac, fltNewCfgIndx=fltNewCfgIndx, slbStatVServerTable=slbStatVServerTable, slbCurCfgPeerEntry=slbCurCfgPeerEntry, rurlInfoStatClientACKsIn=rurlInfoStatClientACKsIn, nasaStatSpSessRdCnt=nasaStatSpSessRdCnt, nasaStatSpSessCharCnt=nasaStatSpSessCharCnt, slbCurCfgUrlExpression=slbCurCfgUrlExpression, slbNewCfgVirtServIndex=slbNewCfgVirtServIndex, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, gslbLookup=gslbLookup, slbCurCfgVirtServiceHname=slbCurCfgVirtServiceHname, slbCurCfgVirtServerIndex=slbCurCfgVirtServerIndex, slbNewCfgUrlExpTable=slbNewCfgUrlExpTable, slbStatRServerTotalSessions=slbStatRServerTotalSessions, slbRealServerMacAddr=slbRealServerMacAddr, slbNewCfgVirtServiceBwmContract=slbNewCfgVirtServiceBwmContract, gslbCurCfgRemSitePrimaryIp=gslbCurCfgRemSitePrimaryIp, slbNewCfgGroupVipHealthCheck=slbNewCfgGroupVipHealthCheck, gslbNewCfgGenLookupTimeout=gslbNewCfgGenLookupTimeout, slbNewCfgUrlBwmDelete=slbNewCfgUrlBwmDelete, fltStatTable=fltStatTable, gslbCurCfgGenRemSiteUpdateInterval=gslbCurCfgGenRemSiteUpdateInterval, rurlErrorStatBuf=rurlErrorStatBuf, synAttackNewCfgThreshhold=synAttackNewCfgThreshhold, slbCurCfgRealServerState=slbCurCfgRealServerState, rtspNewCfgUrlExpTableEntry=rtspNewCfgUrlExpTableEntry, gslbCurCfgGenLookups=gslbCurCfgGenLookups, tpcpAddSessReqsEntriesInUse=tpcpAddSessReqsEntriesInUse, rurlInfoStatServerACKsSent=rurlInfoStatServerACKsSent, slbCurCfgPortSlbNasaState=slbCurCfgPortSlbNasaState, slbNewCfgVirtServiceHname=slbNewCfgVirtServiceHname, slbNewCfgRurlDportDelete=slbNewCfgRurlDportDelete, slbNewCfgPeerIndex=slbNewCfgPeerIndex, slbCurCfgImask=slbCurCfgImask, slbNewCfgUrlExpression=slbNewCfgUrlExpression, slbNewCfgFailOverTblEntry=slbNewCfgFailOverTblEntry, slbNewCfgFailOverRouteSupply=slbNewCfgFailOverRouteSupply, nasaStatMpHealthRequests=nasaStatMpHealthRequests, fltCurCfgVlan=fltCurCfgVlan, slbNewCfgIsdInterval=slbNewCfgIsdInterval, dnsSlbStatUDPQueries=dnsSlbStatUDPQueries, fltNewCfgPortState=fltNewCfgPortState, slbCurCfgFailOverIndex=slbCurCfgFailOverIndex, gslbStatRemRealServerEntry=gslbStatRemRealServerEntry, fltNewCfgAclTcpAck=fltNewCfgAclTcpAck, tpcpAddSessReqsFailsQFull=tpcpAddSessReqsFailsQFull, slbCurCfgPortIndex=slbCurCfgPortIndex, slbStatRServerFailures=slbStatRServerFailures, fltCurCfgDstMac=fltCurCfgDstMac, fltNewCfgTcpAck=fltNewCfgTcpAck, ftpNatStatTotal=ftpNatStatTotal, slbNewCfgRealServIndex=slbNewCfgRealServIndex, slbNewCfgVirtServerHttpHdrName=slbNewCfgVirtServerHttpHdrName, gslbCurCfgRemSiteState=gslbCurCfgRemSiteState, rurlInfoStatFINRSTSessSetup=rurlInfoStatFINRSTSessSetup, slbRealServerInfoOverflow=slbRealServerInfoOverflow, slbCurCfgVirtServerLayer3Only=slbCurCfgVirtServerLayer3Only, slbNewCfgUrlLbBwmContract=slbNewCfgUrlLbBwmContract, slbStats=slbStats, rurlInfoStatClientReTXSYNsSeen=rurlInfoStatClientReTXSYNsSeen, fltCurCfgRangeHighDstPort=fltCurCfgRangeHighDstPort, nasaStatMpHealthResponses=nasaStatMpHealthResponses, slbCurCfgVirtServicePBind=slbCurCfgVirtServicePBind, slbStatVServerHighestSessions=slbStatVServerHighestSessions, rurlInfoStatExceedBufLen=rurlInfoStatExceedBufLen, slbNewCfgVirtServiceRemapUDPFrags=slbNewCfgVirtServiceRemapUDPFrags, slbStatPortMaintBindingFails=slbStatPortMaintBindingFails, fltCurCfgUrlBwmUrlId=fltCurCfgUrlBwmUrlId, fltNewCfgTcpRateMaxConn=fltNewCfgTcpRateMaxConn, gslbCurCfgNetworkNetMask=gslbCurCfgNetworkNetMask, slbStatPortMaintUdpDatagrams=slbStatPortMaintUdpDatagrams, rurlErrorStatConnect=rurlErrorStatConnect, rurlInfoStatZeroContentLen=rurlInfoStatZeroContentLen, fltNewCfgRedirPort=fltNewCfgRedirPort, gslbStats=gslbStats, slbNewCfgRealServerProxy=slbNewCfgRealServerProxy, fltNewCfgLog=fltNewCfgLog, slbStatPortMaintTable=slbStatPortMaintTable, rurlMaintStatHighRdirPORTEntries=rurlMaintStatHighRdirPORTEntries, slbNewCfgVirtServerFtpParsing=slbNewCfgVirtServerFtpParsing, slbNewCfgUrlExpIndex=slbNewCfgUrlExpIndex, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, fltNewCfgUrlBwmFltIndex=fltNewCfgUrlBwmFltIndex, fltNewCfgProtocol=fltNewCfgProtocol, slbStatGroupTable=slbStatGroupTable, gslbNewCfgNetworkNetMask=gslbNewCfgNetworkNetMask, slbNewCfgVirtServerCname=slbNewCfgVirtServerCname, slbNewCfgImask=slbNewCfgImask, slbStatGroupHCOctetsHigh32=slbStatGroupHCOctetsHigh32, nasaIsdInfoTable=nasaIsdInfoTable, slbCurCfgPortSlbInterSwitch=slbCurCfgPortSlbInterSwitch, fltNewCfgPortIndx=fltNewCfgPortIndx, slbNewCfgPeerDelete=slbNewCfgPeerDelete, dnsSlbStatMultipleQueries=dnsSlbStatMultipleQueries, slbNewCfgVirtServerDname=slbNewCfgVirtServerDname, slbNewCfgGroupBackupGroup=slbNewCfgGroupBackupGroup, rurlInfoStatExceedFrameDepth=rurlInfoStatExceedFrameDepth, urlStats=urlStats, fltCurCfgSrcIpMask=fltCurCfgSrcIpMask, slbNewCfgDirectMode=slbNewCfgDirectMode, slbStatPortMaintEntry=slbStatPortMaintEntry, slbCurCfgVirtServiceDirServerRtn=slbCurCfgVirtServiceDirServerRtn, slbStatVServerTotalSessions=slbStatVServerTotalSessions, slbFailOverInfoSecondaryIp=slbFailOverInfoSecondaryIp, slbCurCfgSlowage=slbCurCfgSlowage, slbStatRServerHighestSessions=slbStatRServerHighestSessions, slbNewCfgSyncPip=slbNewCfgSyncPip, slbNewCfgRealServerExcludeStr=slbNewCfgRealServerExcludeStr, rtspCurCfgUrlExpression=rtspCurCfgUrlExpression, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, operSlbPortIndex=operSlbPortIndex, slbCurCfgVirtServiceDnsSlb=slbCurCfgVirtServiceDnsSlb, slbCurCfgRealServerExcludeStr=slbCurCfgRealServerExcludeStr, fltCurCfgAclTcpAck=fltCurCfgAclTcpAck, rurlStats=rurlStats, slbStatPortMaintFilteredDeniedFrames=slbStatPortMaintFilteredDeniedFrames, slbNewCfgGroupMetric=slbNewCfgGroupMetric, fltNewCfgCache=fltNewCfgCache, slbCurCfgSyncFilt=slbCurCfgSyncFilt, slbNewCfgPortSlbIdslbState=slbNewCfgPortSlbIdslbState, fltCurCfgPortFiltBmap=fltCurCfgPortFiltBmap, rtspStatControlConns=rtspStatControlConns, nasaStatSpEntry=nasaStatSpEntry, nasaStatSpAckFree=nasaStatSpAckFree, ftpSlbStatTotal=ftpSlbStatTotal, slbNewCfgRealServRealPort=slbNewCfgRealServRealPort, fltCurCfgAclIpOption=fltCurCfgAclIpOption, slbNewCfgUrlBwmContract=slbNewCfgUrlBwmContract, slbStatRServerHCOctetsHigh32=slbStatRServerHCOctetsHigh32, slbStatPortMaintRealServerNoAvails=slbStatPortMaintRealServerNoAvails, slbCurCfgPeerIndex=slbCurCfgPeerIndex, tpcpDeleteSessReqsStats=tpcpDeleteSessReqsStats, slbCurCfgRealServRealPort=slbCurCfgRealServRealPort, rurlInfoStatClientDataIn=rurlInfoStatClientDataIn, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, slbCurCfgRurlGenDeny=slbCurCfgRurlGenDeny, slbNewCfgRealServPortIndex=slbNewCfgRealServPortIndex, slbCurCfgDirectMode=slbCurCfgDirectMode, gslbNewCfgNetworkTable=gslbNewCfgNetworkTable, slbNewCfgVirtServerCExpire=slbNewCfgVirtServerCExpire, slbCurCfgUrlBwmTable=slbCurCfgUrlBwmTable, rurlInfoStats=rurlInfoStats, slbNewCfgIsdNumber=slbNewCfgIsdNumber, slbCurCfgVirtServerUrlHashLen=slbCurCfgVirtServerUrlHashLen, slbNewCfgMmask=slbNewCfgMmask, slbCurCfgIsdRestr=slbCurCfgIsdRestr, slbCurCfgUrlExpTable=slbCurCfgUrlExpTable, rtspNewCfgUrlExpIndex=rtspNewCfgUrlExpIndex, slbFailOverInfoEntry=slbFailOverInfoEntry, slbRealServerInfoIpAddr=slbRealServerInfoIpAddr, slbOperRealServerIndex=slbOperRealServerIndex, fltCurCfgLayer7DenyUrlBmap=fltCurCfgLayer7DenyUrlBmap, slbCurCfgRealServerBackUp=slbCurCfgRealServerBackUp, rurlInfoStatFreeRingCalls=rurlInfoStatFreeRingCalls, slbNewCfgRealServerWeight=slbNewCfgRealServerWeight, nasaStatSpCtlTunnelIn=nasaStatSpCtlTunnelIn, slbCurCfgUrlBwmUrlId=slbCurCfgUrlBwmUrlId, fltCurCfgAclTcpFin=fltCurCfgAclTcpFin, rurlInfoStatNonTypicalOffsets=rurlInfoStatNonTypicalOffsets, slbWap=slbWap, nasaStatMpPingResponses=nasaStatMpPingResponses, slbRealServerMaxSize=slbRealServerMaxSize, radiusAcctMaxEntriesInUse=radiusAcctMaxEntriesInUse, fltNewCfgAclIpOption=fltNewCfgAclIpOption, tpcpAddSessReqs=tpcpAddSessReqs, tpcpDeleteSessReqsEntriesInUse=tpcpDeleteSessReqsEntriesInUse, rurlMaintStatHighRBUFBufEntries=rurlMaintStatHighRBUFBufEntries, rurlInfoStatFramePassThru=rurlInfoStatFramePassThru, urlSlbStats=urlSlbStats, slbNewCfgFailOverSilenceInterval=slbNewCfgFailOverSilenceInterval, nasaStatSpAckTx=nasaStatSpAckTx, slbCurCfgGroupRealServers=slbCurCfgGroupRealServers, fltCurCfgIdslbHash=fltCurCfgIdslbHash, nasaStatSpAckRx=nasaStatSpAckRx, fltNewCfgLayer7DenyRemUrl=fltNewCfgLayer7DenyRemUrl, slbNewCfgRealServerSuccRetry=slbNewCfgRealServerSuccRetry, slbRealServerInfoHealthLayer=slbRealServerInfoHealthLayer, slbNewCfgRurlDportHighPort=slbNewCfgRurlDportHighPort, slbCurCfgPortSlbPipState=slbCurCfgPortSlbPipState, slbCurCfgRurlDportLowPort=slbCurCfgRurlDportLowPort, gslbCurCfgGenMinco=gslbCurCfgGenMinco, rurlMaintStatRSEQFailBufFrees=rurlMaintStatRSEQFailBufFrees, slbFailOverInfoTable=slbFailOverInfoTable, nasaStatMpUnregRequests=nasaStatMpUnregRequests, slbCurCfgWaphcRcvContent=slbCurCfgWaphcRcvContent, fltCurCfgNat=fltCurCfgNat, nasaStatMpPingRequests=nasaStatMpPingRequests, slbCurCfgSyncPort=slbCurCfgSyncPort)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", slbCurCfgVirtServerIpAddress=slbCurCfgVirtServerIpAddress, fltCurCfgTcpRateMaxConn=fltCurCfgTcpRateMaxConn, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, fltNewCfgNat=fltNewCfgNat, tcpStatCurConns=tcpStatCurConns, radiusAcctReqFailsQFull=radiusAcctReqFailsQFull, slbOper=slbOper, rurlInfoStatServerSYNACKsIn=rurlInfoStatServerSYNACKsIn, slbCurCfgPortSlbRtsState=slbCurCfgPortSlbRtsState, gslbCurCfgGenWeight=gslbCurCfgGenWeight, radiusAcctAddSessionReqs=radiusAcctAddSessionReqs, slbUrlLbPathTableMaxSize=slbUrlLbPathTableMaxSize, slbCurCfgRealServerSuccRetry=slbCurCfgRealServerSuccRetry, fltCurCfgRedirGroup=fltCurCfgRedirGroup, slbNewCfgVirtServerCoffset=slbNewCfgVirtServerCoffset, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, fltNewCfgDstMac=fltNewCfgDstMac, slbUrlBwmTableMaxSize=slbUrlBwmTableMaxSize, fltNewCfgBwmContract=fltNewCfgBwmContract, fltCurCfgLayer7DenyState=fltCurCfgLayer7DenyState, rurlMaintStatCurRdirIPEntries=rurlMaintStatCurRdirIPEntries, slbCurCfgVirtServiceRealPort=slbCurCfgVirtServiceRealPort, slbNewCfgVirtServiceUDPBalance=slbNewCfgVirtServiceUDPBalance, rurlMaintStats=rurlMaintStats, slbFailOverInfoPrimaryIp=slbFailOverInfoPrimaryIp, slbNewCfgGroupHealthCheckLayer=slbNewCfgGroupHealthCheckLayer, slbNewCfgPortSlbNasaState=slbNewCfgPortSlbNasaState, rurlMaintStatHTTPRedirs=rurlMaintStatHTTPRedirs, fltCurCfgAclTcpUrg=fltCurCfgAclTcpUrg, dynSLBRealServerWeight=dynSLBRealServerWeight, rurlMaintStatRBUFFailBufAllocs=rurlMaintStatRBUFFailBufAllocs, dnsSlbStatDnameParseErrors=dnsSlbStatDnameParseErrors, dnsSlbStatFailedMatches=dnsSlbStatFailedMatches, slbNewCfgWaphcSndContent=slbNewCfgWaphcSndContent, slbNewCfgGlobalControl=slbNewCfgGlobalControl, gslbNewCfgGenLookupDname=gslbNewCfgGenLookupDname, gslbCurCfgRemSiteSecondaryIp=gslbCurCfgRemSiteSecondaryIp, slbNewCfgIsdRetry=slbNewCfgIsdRetry, fltCurCfgAclIpTosNew=fltCurCfgAclIpTosNew, gslbNewCfgNetworkDelete=gslbNewCfgNetworkDelete, slbCurCfgUrlBwmContract=slbCurCfgUrlBwmContract, fltNewCfgRangeLowDstPort=fltNewCfgRangeLowDstPort, fltNewCfgRangeHighDstPort=fltNewCfgRangeHighDstPort, fltNewCfgPortTable=fltNewCfgPortTable, synAttackCurCfgThreshhold=synAttackCurCfgThreshhold, slbFailOverInfoSecondaryStatus=slbFailOverInfoSecondaryStatus, slbStatPortMaintPortIndex=slbStatPortMaintPortIndex, ftpStats=ftpStats, slbCurCfgFastage=slbCurCfgFastage, tcpStatHalfOpens=tcpStatHalfOpens, gslbNewCfgGenDnsHandoff=gslbNewCfgGenDnsHandoff, slbCurCfgVirtServiceUDPBalance=slbCurCfgVirtServiceUDPBalance, rurlMaintStatCurRdirIPPORTEntries=rurlMaintStatCurRdirIPPORTEntries, slbNewCfgRurlDportTable=slbNewCfgRurlDportTable, tcpStats=tcpStats, gslbCurCfgGenState=gslbCurCfgGenState, slbStatMaintOverflowServActs=slbStatMaintOverflowServActs, slbNewCfgRealServerAddUrl=slbNewCfgRealServerAddUrl, fltCurCfgRangeLowSrcPort=fltCurCfgRangeLowSrcPort, nasaStatMpBadCksum=nasaStatMpBadCksum, filtering=filtering, rurlInfoStatParseFiltMiss=rurlInfoStatParseFiltMiss, slbCurCfgRealServerType=slbCurCfgRealServerType, rurlInfoStatClientDataRetx=rurlInfoStatClientDataRetx, fltUrlBwmTableMaxSize=fltUrlBwmTableMaxSize, slbNewCfgVirtServerTable=slbNewCfgVirtServerTable, slbNewCfgRealGroupIdslb=slbNewCfgRealGroupIdslb, slbCurCfgVirtServerClength=slbCurCfgVirtServerClength, fltCurCfgPortState=fltCurCfgPortState, gslbCurCfgGenDnsHandoff=gslbCurCfgGenDnsHandoff, slbStatGroupCurrSessions=slbStatGroupCurrSessions, slbStatVServerEntry=slbStatVServerEntry, slbNewCfgWaphcWSPPort=slbNewCfgWaphcWSPPort, nasaStatSpPortIndex=nasaStatSpPortIndex, slbCurCfgGroupName=slbCurCfgGroupName, slbNewCfgVirtServerLayer3Only=slbNewCfgVirtServerLayer3Only, nasaStatSpInvalidPkts=nasaStatSpInvalidPkts, rurlMaintStatRSEQFailBufAllocs=rurlMaintStatRSEQFailBufAllocs, gslbNewCfgGenDnsLocalPref=gslbNewCfgGenDnsLocalPref, fltCurCfgTableEntry=fltCurCfgTableEntry, slbCurCfgRealServerMaxConns=slbCurCfgRealServerMaxConns, slbVirtServicesTableMaxSize=slbVirtServicesTableMaxSize, slbNewCfgVirtServerBwmContract=slbNewCfgVirtServerBwmContract, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, rtspNewCfgUrlExpDelete=rtspNewCfgUrlExpDelete, slbCurCfgPortSlbState=slbCurCfgPortSlbState, slbCurCfgLdapVersion=slbCurCfgLdapVersion, slbStatGroupTotalSessions=slbStatGroupTotalSessions, slbCurCfgGroupMetric=slbCurCfgGroupMetric, gslbNewCfgNetworkIndx=gslbNewCfgNetworkIndx, fltNewCfgSrcIpMac=fltNewCfgSrcIpMac, gslbGeneral=gslbGeneral, slbRealServerInfoState=slbRealServerInfoState, fltCurCfgTcpRateLimit=fltCurCfgTcpRateLimit, dnsSlbStats=dnsSlbStats, nasaStatMpCapResponses=nasaStatMpCapResponses, serverloadbalance=serverloadbalance, nasaStatSpSessDelCnt=nasaStatSpSessDelCnt, slbNewCfgVirtServiceFtpParsing=slbNewCfgVirtServiceFtpParsing, nasaIsdInfoIpAddr=nasaIsdInfoIpAddr, fltNewCfgAclTcpRst=fltNewCfgAclTcpRst, slbNewCfgGrace=slbNewCfgGrace, fltCurCfgLinklb=fltCurCfgLinklb, slbCurCfgGroupVipHealthCheck=slbCurCfgGroupVipHealthCheck, slbNewCfgRealServerDelete=slbNewCfgRealServerDelete, slbNewCfgWapTpcp=slbNewCfgWapTpcp, slbCurCfgWapDebug=slbCurCfgWapDebug, slbUrlRedir=slbUrlRedir, slbRurl=slbRurl, slbStatGroupEntry=slbStatGroupEntry, slbNewCfgRealServerSubmac=slbNewCfgRealServerSubmac, nasaStats=nasaStats, slbNewCfgVirtServerResponseCount=slbNewCfgVirtServerResponseCount, fltCurCfgAclIpTos=fltCurCfgAclIpTos, slbStatVServerHCOctetsLow32=slbStatVServerHCOctetsLow32, urlStatRedNonGets=urlStatRedNonGets, slbNewCfgVirtServiceIndex=slbNewCfgVirtServiceIndex, nasaStatSpRurlTunnelCnt=nasaStatSpRurlTunnelCnt, tpcpAddSessReqsStats=tpcpAddSessReqsStats, fltNewCfgLinklb=fltNewCfgLinklb, radiusAcctDeleteSessionReqs=radiusAcctDeleteSessionReqs, rurlMaintStatConnectRxmit=rurlMaintStatConnectRxmit, slbNewCfgVirtServerUrlHashLen=slbNewCfgVirtServerUrlHashLen, slbCurCfgVirtServiceRtspUrlParse=slbCurCfgVirtServiceRtspUrlParse, slbCurCfgVirtServiceFtpParsing=slbCurCfgVirtServiceFtpParsing, slbCurCfgVirtServerDname=slbCurCfgVirtServerDname, dnsSlbStatInternalErrors=dnsSlbStatInternalErrors, slbStatRServerHCOctets=slbStatRServerHCOctets, slbCurCfgPeerTable=slbCurCfgPeerTable, urlStatRedRedirs=urlStatRedRedirs, nasaStatSpAllocFrmFail=nasaStatSpAllocFrmFail, gslbCurCfgGenExternal=gslbCurCfgGenExternal, fltNewCfgPortTableEntry=fltNewCfgPortTableEntry, rurlInfoStatClientSYNACKsSent=rurlInfoStatClientSYNACKsSent, slbNewCfgUrlExpDelete=slbNewCfgUrlExpDelete, slbNewCfgRealServerPingInterval=slbNewCfgRealServerPingInterval, slbCurCfgSyncSfoUpdatePeriod=slbCurCfgSyncSfoUpdatePeriod, slbStatPortMaintCurBindings=slbStatPortMaintCurBindings, slbCurCfgVirtServerState=slbCurCfgVirtServerState, slbNewCfgWapDebug=slbNewCfgWapDebug, slbNewCfgPortSlbInterSwitch=slbNewCfgPortSlbInterSwitch, slbNewCfgVirtServiceHttpSlb2=slbNewCfgVirtServiceHttpSlb2, slbNewCfgSyncSfo=slbNewCfgSyncSfo, fltCurCfgPortIndx=fltCurCfgPortIndx, nasaStatSpAckAlloc=nasaStatSpAckAlloc, slbNewCfgGroupBackupServer=slbNewCfgGroupBackupServer, fltCurCfgAclIcmp=fltCurCfgAclIcmp, nasaStatSpAllocAckFail=nasaStatSpAllocAckFail, slbNewCfgUrlBwmVirtServiceIndex=slbNewCfgUrlBwmVirtServiceIndex, slbNewCfgVirtServiceRealPort=slbNewCfgVirtServiceRealPort, slbNewCfgGroupAddServer=slbNewCfgGroupAddServer, slbStatGroupHCOctets=slbStatGroupHCOctets, slbNewCfgUrlBwmTable=slbNewCfgUrlBwmTable, fltCurCfgLog=fltCurCfgLog, fltCurCfgFwlb=fltCurCfgFwlb, fltCurCfgPortTable=fltCurCfgPortTable, slbNewCfgRurlDportLowPort=slbNewCfgRurlDportLowPort, gslbCurCfgRemSiteUpdate=gslbCurCfgRemSiteUpdate, slbCurCfgGroupHealthCheckUrl=slbCurCfgGroupHealthCheckUrl, slbCurCfgIsdNumber=slbCurCfgIsdNumber, urlStatRedNoCache=urlStatRedNoCache, slbNewCfgGroupEntry=slbNewCfgGroupEntry, slbCurCfgRealServPortIndex=slbCurCfgRealServPortIndex, slbStatVServerCurrSessions=slbStatVServerCurrSessions, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, slbFailOverInfoSecondaryState=slbFailOverInfoSecondaryState, slbNewCfgVirtServerIpAddress=slbNewCfgVirtServerIpAddress, rurlInfoStatServerACKsIn=rurlInfoStatServerACKsIn, slbNewCfgPeerTable=slbNewCfgPeerTable, slbCurCfgVirtServiceHttpSlb=slbCurCfgVirtServiceHttpSlb, gslbNewCfgGenDnsTTL=gslbNewCfgGenDnsTTL, fltNewCfgDelete=fltNewCfgDelete, fltCurCfgUrlBwmEntry=fltCurCfgUrlBwmEntry, gslbCurCfgNetworkTable=gslbCurCfgNetworkTable, fltNewCfgUrlBwmDelete=fltNewCfgUrlBwmDelete, nasaStatSpIpDatagramCnt=nasaStatSpIpDatagramCnt, slbIncorrectVports=slbIncorrectVports, slbCurCfgGroupBackupGroup=slbCurCfgGroupBackupGroup, fltCurCfgNasa=fltCurCfgNasa, slbCurCfgRurlDportTableEntry=slbCurCfgRurlDportTableEntry, gslbStatMaintInGoodSiteUpdates=gslbStatMaintInGoodSiteUpdates, nasaStatSpCtlTunnelInvalidPkt=nasaStatSpCtlTunnelInvalidPkt, slbCurCfgWaphcWTLSPort=slbCurCfgWaphcWTLSPort, tcpLimitStatClientEntries=tcpLimitStatClientEntries, fltCurCfgAclTcpPsh=fltCurCfgAclTcpPsh, slbNewCfgVirtServicePBind=slbNewCfgVirtServicePBind, slbCurCfgMmask=slbCurCfgMmask, rurlErrorStatProto=rurlErrorStatProto, slbCurCfgPortSlbIdslbState=slbCurCfgPortSlbIdslbState, fltCurCfgState=fltCurCfgState, rtspUrlRedir=rtspUrlRedir, radiusAcctReqFailsDMAFails=radiusAcctReqFailsDMAFails, slbNewCfgFastage=slbNewCfgFastage, gslbNewCfgGenHttpRedirect=gslbNewCfgGenHttpRedirect, slbStatRServerEntry=slbStatRServerEntry, rurlMaintStatHighRSEQBufEntries=rurlMaintStatHighRSEQBufEntries, fltCurCfgName=fltCurCfgName, slbCurCfgGroupRealThreshold=slbCurCfgGroupRealThreshold, fltNewCfgWapRadiusSnoop=fltNewCfgWapRadiusSnoop, rurlInfoStatBufWrap=rurlInfoStatBufWrap, rurlMaintStatRSEQBufAllocs=rurlMaintStatRSEQBufAllocs, slbStatPortRealServerHCOctets=slbStatPortRealServerHCOctets, gslbNewCfgRemSiteTableEntry=gslbNewCfgRemSiteTableEntry, rurlMaintStatRBUFChanged=rurlMaintStatRBUFChanged, slbStatVServerHCOctets=slbStatVServerHCOctets, gslbCurCfgGenLookupDname=gslbCurCfgGenLookupDname, slbCurCfgUrlBwmVirtServIndex=slbCurCfgUrlBwmVirtServIndex, rurlMaintStatRSEQBufFrees=rurlMaintStatRSEQBufFrees, slbCurCfgVirtServerHttpHdrName=slbCurCfgVirtServerHttpHdrName, slbNewCfgPortDelete=slbNewCfgPortDelete, slbCurCfgPmask=slbCurCfgPmask, slbFailOverInfoPrimaryStatus=slbFailOverInfoPrimaryStatus, slbRealServerInfoEntry=slbRealServerInfoEntry, slbStatRServerHCOctetsLow32=slbStatRServerHCOctetsLow32, tpcpDeleteSessReqs=tpcpDeleteSessReqs, slbCurCfgVirtServerBwmContract=slbCurCfgVirtServerBwmContract, slbNewCfgUrlBwmUrlId=slbNewCfgUrlBwmUrlId, radiusAcctReqsStats=radiusAcctReqsStats, slbCurCfgRealServPortEntry=slbCurCfgRealServPortEntry, nasaIsdMacAddr=nasaIsdMacAddr, globalSLB=globalSLB, gslbNewCfgGenWeight=gslbNewCfgGenWeight, nasaIsdInfoEntry=nasaIsdInfoEntry, slbNewCfgPeerEntry=slbNewCfgPeerEntry, slbCurCfgRealGroupIdslb=slbCurCfgRealGroupIdslb, slbNewCfgFailOverIndex=slbNewCfgFailOverIndex, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, slbWaphc=slbWaphc, radiusAcctReqs=radiusAcctReqs, dnsSlbStatTCPQueries=dnsSlbStatTCPQueries, slbCurCfgRadiusAuthenString=slbCurCfgRadiusAuthenString, slbCurCfgUrlExpTableEntry=slbCurCfgUrlExpTableEntry, fltNewCfgTcpRateLimit=fltNewCfgTcpRateLimit, rurlInfoStatServerSYNsSent=rurlInfoStatServerSYNsSent, nasaStatSpBcastTunnelCnt=nasaStatSpBcastTunnelCnt, gslbNewCfgRemSiteSecondaryIp=gslbNewCfgRemSiteSecondaryIp, slbCurCfgVirtMatrixArch=slbCurCfgVirtMatrixArch, gslbCurCfgRemSiteName=gslbCurCfgRemSiteName, rtspCurCfgUrlExpTable=rtspCurCfgUrlExpTable, gslbNewCfgNetworkVip2=gslbNewCfgNetworkVip2, slbNewCfgIsdRestr=slbNewCfgIsdRestr, fltNewCfgAclIpTosNew=fltNewCfgAclIpTosNew, tpcpAddSessReqsMaxEntriesInUse=tpcpAddSessReqsMaxEntriesInUse, slbRurlDportTableMaxSize=slbRurlDportTableMaxSize, rurlMaintStatRBUFBufAllocs=rurlMaintStatRBUFBufAllocs, nasaStatSpInvalidVersion=nasaStatSpInvalidVersion, tpcpAddSessReqsFailsSPDead=tpcpAddSessReqsFailsSPDead, slbCurCfgVirtServiceIndex=slbCurCfgVirtServiceIndex, slbNewCfgMetricInterval=slbNewCfgMetricInterval, fltCurCfgIndx=fltCurCfgIndx, slbCurCfgSyncSfo=slbCurCfgSyncSfo, gslbNewCfgGenUsern=gslbNewCfgGenUsern, slbNewCfgPortProxyIpAddr=slbNewCfgPortProxyIpAddr, rurlMaintStatServerAcks=rurlMaintStatServerAcks)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", slbCurCfgVirtServiceHttpSlb2=slbCurCfgVirtServiceHttpSlb2, operSlbPortClrSessionTab=operSlbPortClrSessionTab, rurlErrorStats=rurlErrorStats, rurlInfoStatL7SessionReuse=rurlInfoStatL7SessionReuse, gslbCurCfgNetworkSourceIp=gslbCurCfgNetworkSourceIp, gslbStatMaintInBadSiteUpdates=gslbStatMaintInBadSiteUpdates, slbCurCfgSyncBwm=slbCurCfgSyncBwm, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, slbCurCfgGlobalControl=slbCurCfgGlobalControl, gslbNewCfgGenRemSiteUpdateInterval=gslbNewCfgGenRemSiteUpdateInterval, slbCurCfgFailOverTblEntry=slbCurCfgFailOverTblEntry, slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, slbStatPortRealServerPortIndex=slbStatPortRealServerPortIndex, rurlInfoStatConnSpliced=rurlInfoStatConnSpliced, fltCurCfgTable=fltCurCfgTable, fltCurCfgProtocol=fltCurCfgProtocol, radiusAcctStartReqs=radiusAcctStartReqs, slbNewCfgTpcp=slbNewCfgTpcp, slbNewCfgUrlBwmVirtServIndex=slbNewCfgUrlBwmVirtServIndex, fltNewCfgIdslbHash=fltNewCfgIdslbHash, rtspCurCfgUrlExpTableEntry=rtspCurCfgUrlExpTableEntry, gslbCurCfgGenOne=gslbCurCfgGenOne, slbStatVServerCookieRewrites=slbStatVServerCookieRewrites, slbCurCfgPortTable=slbCurCfgPortTable, slbCurCfgSyncPip=slbCurCfgSyncPip, dynSLBRealServerPortNum=dynSLBRealServerPortNum, slbNewCfgRealServerName=slbNewCfgRealServerName, slbNewCfgRealServPortTable=slbNewCfgRealServPortTable, slbCurCfgVirtServerTable=slbCurCfgVirtServerTable, slbCurCfgRurlDportIndex=slbCurCfgRurlDportIndex, slbOperRealServerTable=slbOperRealServerTable, slbPortTableMaxSize=slbPortTableMaxSize, slbCurCfgMnet=slbCurCfgMnet, slbCurCfgGroupIndex=slbCurCfgGroupIndex, slbNewCfgVirtServiceHttpSlbOption=slbNewCfgVirtServiceHttpSlbOption, slbCurCfgPeerIpAddr=slbCurCfgPeerIpAddr, slbCurCfgVirtServiceRealGroup=slbCurCfgVirtServiceRealGroup, slbCurCfgPortSlbHotStandby=slbCurCfgPortSlbHotStandby, fltNewCfgAclTcpUrg=fltNewCfgAclTcpUrg, slbIncorrectVirtServs=slbIncorrectVirtServs, nasaStatMpRegRequests=nasaStatMpRegRequests, gslbNewCfgRemSiteIndx=gslbNewCfgRemSiteIndx, slbNewCfgVirtServerIndex=slbNewCfgVirtServerIndex, slbCurCfgWapTpcp=slbCurCfgWapTpcp, slbVirtServerTableMaxSize=slbVirtServerTableMaxSize, slbCurCfgGrace=slbCurCfgGrace, slbCurCfgRurlDportTable=slbCurCfgRurlDportTable, fltCurCfgFtpNatActive=fltCurCfgFtpNatActive, rurlMaintStatRBUFBufFrees=rurlMaintStatRBUFBufFrees, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, nasaStatSpCliRedirectCnt=nasaStatSpCliRedirectCnt, slbNewCfgRealServPortDelete=slbNewCfgRealServPortDelete, slbCurCfgRealServerIndex=slbCurCfgRealServerIndex, slbMaintStats=slbMaintStats, slbStatVServerHeaderHits=slbStatVServerHeaderHits, slbNewCfgRealServerCookie=slbNewCfgRealServerCookie, radiusAcctReqFailsSPDead=radiusAcctReqFailsSPDead, slbNewCfgVirtServicesEntry=slbNewCfgVirtServicesEntry, slbCurCfgIsdRetry=slbCurCfgIsdRetry, slbNewCfgWaphcRcvContent=slbNewCfgWaphcRcvContent, slbStatGroupHighestSessions=slbStatGroupHighestSessions, slbStatPortRealServerHCOctetsLow32=slbStatPortRealServerHCOctetsLow32, urlRedirStats=urlRedirStats, gslbCurCfgRemSiteIndx=gslbCurCfgRemSiteIndx, gslbNetwork=gslbNetwork, gslbNewCfgGenMinco=gslbNewCfgGenMinco, fltNewCfgPortFiltBmap=fltNewCfgPortFiltBmap, gslbNewCfgGenLookupPort=gslbNewCfgGenLookupPort, slbNewCfgGroupRealServers=slbNewCfgGroupRealServers, slbRealServerInfoIndex=slbRealServerInfoIndex, rtspUrlExpTableMaxSize=rtspUrlExpTableMaxSize, dnsSlbStatInvalidQueries=dnsSlbStatInvalidQueries, fltNewCfgFwlb=fltNewCfgFwlb, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, slbCurCfgVirtServerCExpire=slbCurCfgVirtServerCExpire, fltNewCfgUrlBwmEntry=fltNewCfgUrlBwmEntry, slbStatRServerCurrSessions=slbStatRServerCurrSessions, fltCurCfgHash=fltCurCfgHash, gslbStatRemRealServerTable=gslbStatRemRealServerTable, slbNewCfgAllowHttpHc=slbNewCfgAllowHttpHc, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, slbCurCfgVirtServIndex=slbCurCfgVirtServIndex, slbStatGroupHCOctetsLow32=slbStatGroupHCOctetsLow32, rurlMaintStatOrgServerHits=rurlMaintStatOrgServerHits, fltNewCfgAclIpTosMask=fltNewCfgAclIpTosMask, slbNewCfgVirtualServerEntry=slbNewCfgVirtualServerEntry, rurlInfoStatMiscProcess=rurlInfoStatMiscProcess, slbNewCfgSlowage=slbNewCfgSlowage, fltCurCfgUrlBwmTable=fltCurCfgUrlBwmTable, slbStatPortMaintCurBindings64Seconds=slbStatPortMaintCurBindings64Seconds, fltNewCfgSrcMac=fltNewCfgSrcMac, fltNewCfgAclTcpPsh=fltNewCfgAclTcpPsh, slbCurCfgTcpHoldDuration=slbCurCfgTcpHoldDuration, slbCurCfgRealServIndex=slbCurCfgRealServIndex, nasaIsdInfoSwitchPort=nasaIsdInfoSwitchPort, slbCurCfgVirtServiceRemapUDPFrags=slbCurCfgVirtServiceRemapUDPFrags, slbNewCfgVirtMatrixArch=slbNewCfgVirtMatrixArch, fltCurCfgDstIpMask=fltCurCfgDstIpMask, rurlInfoStatServerSYNsRetx=rurlInfoStatServerSYNsRetx, rurlErrorStatPack=rurlErrorStatPack, slbCurCfgUrlExpIndex=slbCurCfgUrlExpIndex, slbNewCfgFailOverState=slbNewCfgFailOverState, slbCurCfgUrlLbBwmContract=slbCurCfgUrlLbBwmContract, slbCurCfgRealServerCookie=slbCurCfgRealServerCookie, slbNewCfgSyncFilt=slbNewCfgSyncFilt, gslbCurCfgGenDnsTTL=gslbCurCfgGenDnsTTL, slbStatVServerHeaderMisses=slbStatVServerHeaderMisses, slbCurCfgFailOverRouteSupply=slbCurCfgFailOverRouteSupply, gslbDNS=gslbDNS, fltCurCfgPortTableEntry=fltCurCfgPortTableEntry, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, slbNewCfgVirtServiceDnsSlb=slbNewCfgVirtServiceDnsSlb, dnsCurCfgDomainName=dnsCurCfgDomainName, gslbStatRemRealServerDnsHandoffs=gslbStatRemRealServerDnsHandoffs, fltNewCfgTableEntry=fltNewCfgTableEntry, slbNewCfgVirtServiceVirtPort=slbNewCfgVirtServiceVirtPort, slbCurCfgRealServerPingInterval=slbCurCfgRealServerPingInterval, fltCurCfgRurl=fltCurCfgRurl, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, nasaIsdInfoState=nasaIsdInfoState, synAttackDetCfg=synAttackDetCfg, rurlInfoStatSessSetups=rurlInfoStatSessSetups, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, rurlInfoStatClientSYNsIn=rurlInfoStatClientSYNsIn, nasaStatSpInvalidIsd=nasaStatSpInvalidIsd, rtspStatAllocFails=rtspStatAllocFails, slbRurlGeneral=slbRurlGeneral, fltStatTableEntry=fltStatTableEntry, slbNewCfgRealServerMaxConns=slbNewCfgRealServerMaxConns, nasaIsdInfoStateChange=nasaIsdInfoStateChange, gslbCurCfgGenUsern=gslbCurCfgGenUsern, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, gslbNewCfgGenAlways=gslbNewCfgGenAlways, radiusAcctUpdateReqs=radiusAcctUpdateReqs, slbCurCfgUrlBwmVirtServiceIndex=slbCurCfgUrlBwmVirtServiceIndex, slbNewCfgTcpTimeWindow=slbNewCfgTcpTimeWindow, slbNewCfgRealServerRemUrl=slbNewCfgRealServerRemUrl, slbCurCfgVirtServerUriCookie=slbCurCfgVirtServerUriCookie, slbCurCfgUrlBwmEntry=slbCurCfgUrlBwmEntry, slbNewCfgMnet=slbNewCfgMnet, wapMaintStats=wapMaintStats, rurlMaintStatCurRBUFBufEntries=rurlMaintStatCurRBUFBufEntries, slbNewCfgUrlBwmEntry=slbNewCfgUrlBwmEntry, slbNewCfgRadiusAuthenString=slbNewCfgRadiusAuthenString, rtspStatUDPStreams=rtspStatUDPStreams, rurlMaintStatRBUFFailBufFrees=rurlMaintStatRBUFFailBufFrees, slbNewCfgFailOverPrimaryIp=slbNewCfgFailOverPrimaryIp, slbNewCfgVirtServerDelete=slbNewCfgVirtServerDelete, tpcpDeleteSessReqsFailsQFull=tpcpDeleteSessReqsFailsQFull, fltCurCfgInvert=fltCurCfgInvert, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, dynamicSLB=dynamicSLB, fltNewCfgVlan=fltNewCfgVlan, fltCurCfgBwmContract=fltCurCfgBwmContract, gslbNewCfgGenState=gslbNewCfgGenState, nasaIsdInfoIndex=nasaIsdInfoIndex, slbNewCfgGroupRemoveServer=slbNewCfgGroupRemoveServer, slbCurCfgIsdInterval=slbCurCfgIsdInterval, slbCurCfgRealServerWeight=slbCurCfgRealServerWeight, slbNewCfgVirtServerUriCookie=slbNewCfgVirtServerUriCookie, fltNewCfgFtpNatActive=fltNewCfgFtpNatActive, fltNewCfgAclTcpFin=fltNewCfgAclTcpFin, gslbCurCfgNetworkVip2=gslbCurCfgNetworkVip2, slbStatRServerIndex=slbStatRServerIndex, slbStatPortRealServerHCOctetsHigh32=slbStatPortRealServerHCOctetsHigh32, slbRealServPortTableMaxSize=slbRealServPortTableMaxSize, slbCurCfgWaphcSndContent=slbCurCfgWaphcSndContent, fltNewCfgAclTcpSyn=fltNewCfgAclTcpSyn, radiusAcctStopReqs=radiusAcctStopReqs, slbNewCfgUrlExpTableEntry=slbNewCfgUrlExpTableEntry, fltNewCfgName=fltNewCfgName, slbUrlExpTableMaxSize=slbUrlExpTableMaxSize, radiusAcctWrapReqs=radiusAcctWrapReqs, slbFailOverInfoIndex=slbFailOverInfoIndex, slbStatVServerHCOctetsHigh32=slbStatVServerHCOctetsHigh32, fltNewCfgPortRemFiltRule=fltNewCfgPortRemFiltRule, slbfailover=slbfailover, slbCurCfgFailOverTable=slbCurCfgFailOverTable, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, gslbCurCfgGenDnsLocalPref=gslbCurCfgGenDnsLocalPref, nasaStatMpTotalTx=nasaStatMpTotalTx, slbNewCfgRealServerIpAddr=slbNewCfgRealServerIpAddr, fltNewCfgClientProxy=fltNewCfgClientProxy, rtspStatRedirects=rtspStatRedirects, nasaStatSpTable=nasaStatSpTable, nasaStatSpBcastTunnelToIsd=nasaStatSpBcastTunnelToIsd, slbCurCfgVirtServicesEntry=slbCurCfgVirtServicesEntry, slbNewCfgRealServerState=slbNewCfgRealServerState, slbNewCfgPortSlbHotStandby=slbNewCfgPortSlbHotStandby, slbNewCfgPortSlbRtsState=slbNewCfgPortSlbRtsState, rtspNewCfgUrlExpTable=rtspNewCfgUrlExpTable, fltNewCfgTable=fltNewCfgTable, nasaStatMpCmdRequests=nasaStatMpCmdRequests, fltStatFltFirings=fltStatFltFirings, slbCurCfgRealServerEntry=slbCurCfgRealServerEntry, slbStatPortMaintTcpFragments=slbStatPortMaintTcpFragments, fltNewCfgUrlBwmTable=fltNewCfgUrlBwmTable, rurlMaintStatHighRdirIPPORTEntries=rurlMaintStatHighRdirIPPORTEntries, gslbNewCfgGenExternal=gslbNewCfgGenExternal, gslbNewCfgRemSiteName=gslbNewCfgRemSiteName, rurlInfoStatClientPktsIn=rurlInfoStatClientPktsIn, slbNewCfgRealServerEntry=slbNewCfgRealServerEntry, radiusAcctBadReqs=radiusAcctBadReqs, rurlErrorStatDma=rurlErrorStatDma, fltNewCfgSrcIp=fltNewCfgSrcIp, slb_info=slb_info, slbNewCfgVirtServiceRtspUrlParse=slbNewCfgVirtServiceRtspUrlParse, rurlMaintStatServerReqs=rurlMaintStatServerReqs, nasaStatSpSessUpdCnt=nasaStatSpSessUpdCnt, gslbMaintStats=gslbMaintStats, nasaStatSpCtlTunnelToMp=nasaStatSpCtlTunnelToMp, slbCurCfgTcpTimeWindow=slbCurCfgTcpTimeWindow, urlStatRedOrigSrvs=urlStatRedOrigSrvs, fltCurCfgWapRadiusSnoop=fltCurCfgWapRadiusSnoop, fltNewCfgLayer7DenyAddUrl=fltNewCfgLayer7DenyAddUrl, fltCurCfgAclIpTosMask=fltCurCfgAclIpTosMask, rtspStats=rtspStats, slbCurCfgTpcp=slbCurCfgTpcp, slbCurCfgVirtualServerEntry=slbCurCfgVirtualServerEntry, tcpLimitStatHoldDowns=tcpLimitStatHoldDowns, slbCurCfgVirtServiceBwmContract=slbCurCfgVirtServiceBwmContract, gslbNewCfgGenOne=gslbNewCfgGenOne, gslbNewCfgRemSiteState=gslbNewCfgRemSiteState, slbNewCfgGroupDelete=slbNewCfgGroupDelete, slbCurCfgGroupHealthCheckLayer=slbCurCfgGroupHealthCheckLayer, slbStatGroupIndex=slbStatGroupIndex, slbNewCfgRealServerType=slbNewCfgRealServerType, fltCurCfgNatTimeout=fltCurCfgNatTimeout, slbStatPortRealServerEntry=slbStatPortRealServerEntry, nasaIsdInfoGdi=nasaIsdInfoGdi, gslbRemSiteTableMaxSize=gslbRemSiteTableMaxSize, fltCurCfgUrlBwmFltIndex=fltCurCfgUrlBwmFltIndex, slbNewCfgRealServPortEntry=slbNewCfgRealServPortEntry, fltNewCfgRangeLowSrcPort=fltNewCfgRangeLowSrcPort, fltCurCfgSrcMac=fltCurCfgSrcMac, urlStatSlbPathHits=urlStatSlbPathHits, fltNewCfgUrlBwmContract=fltNewCfgUrlBwmContract, slbNewCfgRurlDportIndex=slbNewCfgRurlDportIndex, slbStatVServerHeaderTotalSessions=slbStatVServerHeaderTotalSessions, fltCurCfgAction=fltCurCfgAction, rurlErrorStatUnpack=rurlErrorStatUnpack, rurlInfoStatServerResets=rurlInfoStatServerResets, slbCurCfgVirtServiceCookieMode=slbCurCfgVirtServiceCookieMode, slbNewCfgVirtServiceCookieMode=slbNewCfgVirtServiceCookieMode, slbNewCfgRealServerFailRetry=slbNewCfgRealServerFailRetry, synAttackNewCfgInterval=synAttackNewCfgInterval, rurlInfoStatPSHSessSetup=rurlInfoStatPSHSessSetup, fltCurCfgUrlRedir=fltCurCfgUrlRedir, slbCurCfgRealServerIpAddr=slbCurCfgRealServerIpAddr, slbCurCfgFailOverSilenceInterval=slbCurCfgFailOverSilenceInterval, rurlInfoStatNonSYNSessSetup=rurlInfoStatNonSYNSessSetup, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, slbCurCfgRealServerName=slbCurCfgRealServerName, slbNewCfgRealServerBackUp=slbNewCfgRealServerBackUp)
mibBuilder.exportSymbols("ALTEON-TS-LAYER4-MIB", slbNewCfgVirtServiceDirServerRtn=slbNewCfgVirtServiceDirServerRtn, fltNewCfgAction=fltNewCfgAction, slbCurCfgGroupTable=slbCurCfgGroupTable, fltNewCfgRedirGroup=fltNewCfgRedirGroup, nasaStatSpBcastTunnelToMp=nasaStatSpBcastTunnelToMp, slbUrlBalance=slbUrlBalance, slbNewCfgVirtServicesTable=slbNewCfgVirtServicesTable, gslbCurCfgGenGeo=gslbCurCfgGenGeo, rtspCurCfgUrlExpIndex=rtspCurCfgUrlExpIndex, tpcpDeleteSessReqsMaxEntriesInUse=tpcpDeleteSessReqsMaxEntriesInUse, dnsNewCfgDomainName=dnsNewCfgDomainName, slbStatPortRealServerCurrSessions=slbStatPortRealServerCurrSessions, fltCurCfgSrcIpMac=fltCurCfgSrcIpMac, gslbNewCfgRemSiteDelete=gslbNewCfgRemSiteDelete, slbNewCfgSyncVrrp=slbNewCfgSyncVrrp, urlStatSlbPathIndex=urlStatSlbPathIndex, operSlbPortEntry=operSlbPortEntry, fltNewCfgDstIp=fltNewCfgDstIp, slbCurCfgRealServerSubmac=slbCurCfgRealServerSubmac, gslbNewCfgGenEip=gslbNewCfgGenEip, slbNewCfgRealServerTimeOut=slbNewCfgRealServerTimeOut, fltNewCfgInvert=fltNewCfgInvert, fltNewCfgNasa=fltNewCfgNasa, slbStatRServerTable=slbStatRServerTable, fltStatFltIndex=fltStatFltIndex, nasaStatMpCmdResponses=nasaStatMpCmdResponses, fltCurCfgSrcIp=fltCurCfgSrcIp, fltCurCfgUrlBwmContract=fltCurCfgUrlBwmContract, slbCurCfgFailOverSecondaryIp=slbCurCfgFailOverSecondaryIp, gslbNewCfgRemSiteTable=gslbNewCfgRemSiteTable, fltNewCfgRurl=fltNewCfgRurl, slbStatMaintBackupServActs=slbStatMaintBackupServActs, nasaStatSpSessAddCnt=nasaStatSpSessAddCnt, slbOperRealServerStatus=slbOperRealServerStatus, slbCurCfgVirtServerCoffset=slbCurCfgVirtServerCoffset, fltNewCfgRangeHighSrcPort=fltNewCfgRangeHighSrcPort, slbCurCfgFailOverState=slbCurCfgFailOverState, fltCurCfgDstIp=fltCurCfgDstIp, tcpLimitStats=tcpLimitStats, slbNewCfgFailOverSecondaryIp=slbNewCfgFailOverSecondaryIp, nasaStatMpInvalidRx=nasaStatMpInvalidRx, slbCurCfgRealServPortTable=slbCurCfgRealServPortTable, slbRealServerInfoSwitchPort=slbRealServerInfoSwitchPort, slbNewCfgGroupName=slbNewCfgGroupName, slbStatPortMaintNonTcpFrames=slbStatPortMaintNonTcpFrames, slbNewCfgPortIndex=slbNewCfgPortIndex, fltNewCfgSrcIpMask=fltNewCfgSrcIpMask, slbCurCfgVirtServerFtpParsing=slbCurCfgVirtServerFtpParsing, fltCurCfgRangeLowDstPort=fltCurCfgRangeLowDstPort, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, wapRequestToWrongSP=wapRequestToWrongSP, slbGroupTableMaxSize=slbGroupTableMaxSize, slbCurCfgRealServerTable=slbCurCfgRealServerTable, gslbNewCfgRemSitePrimaryIp=gslbNewCfgRemSitePrimaryIp, rurlMaintStatHighRdirIPEntries=rurlMaintStatHighRdirIPEntries, slbNewCfgWaphcWTLSPort=slbNewCfgWaphcWTLSPort, rurlInfoStatClientResets=rurlInfoStatClientResets, gslbNewCfgNetworkVip1=gslbNewCfgNetworkVip1, slbCurCfgRealServerProxy=slbCurCfgRealServerProxy, slbNewCfgLdapVersion=slbNewCfgLdapVersion, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, fltNewCfgHash=fltNewCfgHash, gslbNewCfgNetworkSourceIp=gslbNewCfgNetworkSourceIp, slbCurCfgVirtServerCname=slbCurCfgVirtServerCname, fltNewCfgAclIcmp=fltNewCfgAclIcmp, gslbNewCfgGenGeo=gslbNewCfgGenGeo, gslbCurCfgGenAlways=gslbCurCfgGenAlways, rurlMaintStatResetRxmit=rurlMaintStatResetRxmit, slbNewCfgGroupRealThreshold=slbNewCfgGroupRealThreshold, slbCurCfgPeerState=slbCurCfgPeerState, slbCurCfgWaphcWSPPort=slbCurCfgWaphcWSPPort, operSlbPortTable=operSlbPortTable, slbCurCfgVirtServiceVirtPort=slbCurCfgVirtServiceVirtPort, fltNewCfgUrlRedir=fltNewCfgUrlRedir, gslbNetworkTableMaxSize=gslbNetworkTableMaxSize, slbCurCfgRealServerFailRetry=slbCurCfgRealServerFailRetry, slbOperConfigSync=slbOperConfigSync, slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, rtspNewCfgUrlExpression=rtspNewCfgUrlExpression, rurlMaintStatRBUFRetransmit=rurlMaintStatRBUFRetransmit, fltNewCfgDstIpMask=fltNewCfgDstIpMask, gslbCurCfgGenEip=gslbCurCfgGenEip, nasaMpStats=nasaMpStats, nasaStatMpRegConfirmations=nasaStatMpRegConfirmations, slbCurCfgGroupBackupServer=slbCurCfgGroupBackupServer, slbNewCfgSyncBwm=slbNewCfgSyncBwm, fltCurCfgAclTcpSyn=fltCurCfgAclTcpSyn, rurlInfoStatClientWrap=rurlInfoStatClientWrap, slbNewCfgPortSlbState=slbNewCfgPortSlbState, fltCurCfgAclTcpRst=fltCurCfgAclTcpRst, slbNewCfgPeerState=slbNewCfgPeerState, fltNewCfgState=fltNewCfgState, slbNewCfgVirtServerClength=slbNewCfgVirtServerClength, gslbCurCfgNetworkIndx=gslbCurCfgNetworkIndx, urlStatSlbPathTable=urlStatSlbPathTable, fltCurCfgClientProxy=fltCurCfgClientProxy, gslbNewCfgGenLookups=gslbNewCfgGenLookups, fltNewCfgLayer7DenyUrlBmap=fltNewCfgLayer7DenyUrlBmap, slbNoRealServs=slbNoRealServs, slbNewCfgPeerIpAddr=slbNewCfgPeerIpAddr, rurlMaintStatSessCnt=rurlMaintStatSessCnt, slbNewCfgSyncPort=slbNewCfgSyncPort, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, slbCurCfgPortProxyIpAddr=slbCurCfgPortProxyIpAddr, gslbNewCfgRemSiteUpdate=gslbNewCfgRemSiteUpdate, rurlInfoStatServerSYNsRetxErrors=rurlInfoStatServerSYNsRetxErrors, slbCurCfgVirtServerResponseCount=slbCurCfgVirtServerResponseCount, fltNewCfgAclIpTos=fltNewCfgAclIpTos, fltNewCfgNatTimeout=fltNewCfgNatTimeout, gslbSites=gslbSites, gslbCurCfgGenHttpRedirect=gslbCurCfgGenHttpRedirect, slbStatPortMaintIncorrectVports=slbStatPortMaintIncorrectVports, slbNewCfgRurlDportTableEntry=slbNewCfgRurlDportTableEntry, slbStatVServerIndex=slbStatVServerIndex, nasaStatSpReqSessCnt=nasaStatSpReqSessCnt, slbOperRealServerEntry=slbOperRealServerEntry, slbNewCfgGroupIndex=slbNewCfgGroupIndex, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, slbCurCfgRealServerTimeOut=slbCurCfgRealServerTimeOut, slbCurCfgMetricInterval=slbCurCfgMetricInterval, slbNewCfgVirtServerState=slbNewCfgVirtServerState, nasaStatMpTotalRx=nasaStatMpTotalRx, synAttackCurCfgInterval=synAttackCurCfgInterval, slbNewCfgSyncSfoUpdatePeriod=slbNewCfgSyncSfoUpdatePeriod, slbNewCfgGroupHealthCheckUrl=slbNewCfgGroupHealthCheckUrl, gslbCurCfgNetworkTableEntry=gslbCurCfgNetworkTableEntry, nasaStatSpReqSessNoIsd=nasaStatSpReqSessNoIsd, fltNewCfgDstIpMac=fltNewCfgDstIpMac, slbNewCfgPortEntry=slbNewCfgPortEntry, gslbCurCfgRemSiteTableEntry=gslbCurCfgRemSiteTableEntry, dynSLBRealServerEntry=dynSLBRealServerEntry, slbNewCfgRealServerTable=slbNewCfgRealServerTable, slbNewCfgVirtServiceDelete=slbNewCfgVirtServiceDelete, filterStats=filterStats)
