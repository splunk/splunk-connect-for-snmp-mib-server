#
# PySNMP MIB module HH3C-LswQos-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LswQos-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hh3clswCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3clswCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, NotificationType, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Counter64, Bits, ObjectIdentity, Counter32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Counter64", "Bits", "ObjectIdentity", "Counter32", "TimeTicks", "MibIdentifier")
MacAddress, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
hh3cLswQosAclMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16))
hh3cLswQosAclMib.setRevisions(('2002-11-19 00:00',))
if mibBuilder.loadTexts: hh3cLswQosAclMib.setLastUpdated('200211190000Z')
if mibBuilder.loadTexts: hh3cLswQosAclMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMirrorOrMonitorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("port", 1), ("board", 2))

hh3cLswQosMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2))
hh3cPriorityTrustMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 0), ("dscp", 1), ("ipprecedence", 2), ("cos", 3), ("localprecedence", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPriorityTrustMode.setStatus('current')
hh3cPortMonitorBothIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortMonitorBothIfIndex.setStatus('current')
hh3cQueueTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3), )
if mibBuilder.loadTexts: hh3cQueueTable.setStatus('current')
hh3cQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cQueueIfIndex"))
if mibBuilder.loadTexts: hh3cQueueEntry.setStatus('current')
hh3cQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQueueIfIndex.setStatus('current')
hh3cQueueScheduleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sp", 1), ("wrr", 2), ("wrr-max-delay", 3), ("sc-0", 4), ("sc-1", 5), ("sc-2", 6), ("rr", 7), ("wfq", 8), ("hq-wrr", 9))).clone('sp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueScheduleMode.setStatus('current')
hh3cQueueWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight1.setStatus('current')
hh3cQueueWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight2.setStatus('current')
hh3cQueueWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight3.setStatus('current')
hh3cQueueWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight4.setStatus('current')
hh3cQueueMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueMaxDelay.setStatus('current')
hh3cQueueWeight5 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight5.setStatus('current')
hh3cQueueWeight6 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight6.setStatus('current')
hh3cQueueWeight7 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight7.setStatus('current')
hh3cQueueWeight8 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQueueWeight8.setStatus('current')
hh3cRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4), )
if mibBuilder.loadTexts: hh3cRateLimitTable.setStatus('current')
hh3cRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cRateLimitAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cRateLimitIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cRateLimitVlanID"), (0, "HH3C-LswQos-MIB", "hh3cRateLimitDirection"))
if mibBuilder.loadTexts: hh3cRateLimitEntry.setStatus('current')
hh3cRateLimitAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitAclIndex.setStatus('current')
hh3cRateLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitIfIndex.setStatus('current')
hh3cRateLimitVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitVlanID.setStatus('current')
hh3cRateLimitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitDirection.setStatus('current')
hh3cRateLimitUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitUserAclNum.setStatus('current')
hh3cRateLimitUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitUserAclRule.setStatus('current')
hh3cRateLimitIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitIpAclNum.setStatus('current')
hh3cRateLimitIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitIpAclRule.setStatus('current')
hh3cRateLimitLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitLinkAclNum.setStatus('current')
hh3cRateLimitLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitLinkAclRule.setStatus('current')
hh3cRateLimitTargetRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitTargetRateMbps.setStatus('current')
hh3cRateLimitTargetRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitTargetRateKbps.setStatus('current')
hh3cRateLimitPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 8388608), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitPeakRate.setStatus('current')
hh3cRateLimitCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitCIR.setStatus('current')
hh3cRateLimitCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitCBS.setStatus('current')
hh3cRateLimitEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitEBS.setStatus('current')
hh3cRateLimitPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34120000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitPIR.setStatus('current')
hh3cRateLimitConformLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 18), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitConformLocalPre.setStatus('current')
hh3cRateLimitConformActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("remark-cos", 1), ("remark-drop-priority", 2), ("remark-cos-drop-priority", 3), ("remark-policed-service", 4), ("remark-dscp", 5))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitConformActionType.setStatus('current')
hh3cRateLimitExceedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("forward", 1), ("drop", 2), ("remarkdscp", 3), ("exceed-cos", 4))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitExceedActionType.setStatus('current')
hh3cRateLimitExceedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitExceedDscp.setStatus('current')
hh3cRateLimitRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRateLimitRuntime.setStatus('current')
hh3cRateLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitRowStatus.setStatus('current')
hh3cRateLimitExceedCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 24), Integer32().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitExceedCos.setStatus('current')
hh3cRateLimitConformCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitConformCos.setStatus('current')
hh3cRateLimitConformDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitConformDscp.setStatus('current')
hh3cRateLimitMeterStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRateLimitMeterStatByteCount.setStatus('current')
hh3cRateLimitMeterStatByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRateLimitMeterStatByteXCount.setStatus('current')
hh3cRateLimitMeterStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("set", 1), ("unDo", 2), ("reset", 3), ("running", 4), ("notRunning", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRateLimitMeterStatState.setStatus('current')
hh3cPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5), )
if mibBuilder.loadTexts: hh3cPriorityTable.setStatus('current')
hh3cPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cPriorityAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cPriorityIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cPriorityVlanID"), (0, "HH3C-LswQos-MIB", "hh3cPriorityDirection"))
if mibBuilder.loadTexts: hh3cPriorityEntry.setStatus('current')
hh3cPriorityAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityAclIndex.setStatus('current')
hh3cPriorityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityIfIndex.setStatus('current')
hh3cPriorityVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityVlanID.setStatus('current')
hh3cPriorityDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityDirection.setStatus('current')
hh3cPriorityUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityUserAclNum.setStatus('current')
hh3cPriorityUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityUserAclRule.setStatus('current')
hh3cPriorityIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityIpAclNum.setStatus('current')
hh3cPriorityIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityIpAclRule.setStatus('current')
hh3cPriorityLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityLinkAclNum.setStatus('current')
hh3cPriorityLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityLinkAclRule.setStatus('current')
hh3cPriorityDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityDscp.setStatus('current')
hh3cPriorityIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityIpPre.setStatus('current')
hh3cPriorityIpPreFromCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 13), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityIpPreFromCos.setStatus('current')
hh3cPriorityCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityCos.setStatus('current')
hh3cPriorityCosFromIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 15), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityCosFromIpPre.setStatus('current')
hh3cPriorityLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityLocalPre.setStatus('current')
hh3cPriorityPolicedServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("auto", 1), ("trust-dscp", 2), ("new-dscp", 3), ("untrusted", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceType.setStatus('current')
hh3cPriorityPolicedServiceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceDscp.setStatus('current')
hh3cPriorityPolicedServiceExp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceExp.setStatus('current')
hh3cPriorityPolicedServiceCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceCos.setStatus('current')
hh3cPriorityPolicedServiceLoaclPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceLoaclPre.setStatus('current')
hh3cPriorityPolicedServiceDropPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityPolicedServiceDropPriority.setStatus('current')
hh3cPriorityRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPriorityRuntime.setStatus('current')
hh3cPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 5, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPriorityRowStatus.setStatus('current')
hh3cRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6), )
if mibBuilder.loadTexts: hh3cRedirectTable.setStatus('current')
hh3cRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cRedirectAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cRedirectIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cRedirectVlanID"), (0, "HH3C-LswQos-MIB", "hh3cRedirectDirection"))
if mibBuilder.loadTexts: hh3cRedirectEntry.setStatus('current')
hh3cRedirectAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectAclIndex.setStatus('current')
hh3cRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectIfIndex.setStatus('current')
hh3cRedirectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectVlanID.setStatus('current')
hh3cRedirectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectDirection.setStatus('current')
hh3cRedirectUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectUserAclNum.setStatus('current')
hh3cRedirectUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectUserAclRule.setStatus('current')
hh3cRedirectIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectIpAclNum.setStatus('current')
hh3cRedirectIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectIpAclRule.setStatus('current')
hh3cRedirectLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectLinkAclNum.setStatus('current')
hh3cRedirectLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectLinkAclRule.setStatus('current')
hh3cRedirectToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 11), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToCpu.setStatus('current')
hh3cRedirectToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToIfIndex.setStatus('current')
hh3cRedirectToNextHop1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToNextHop1.setStatus('current')
hh3cRedirectToNextHop2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToNextHop2.setStatus('current')
hh3cRedirectRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRedirectRuntime.setStatus('current')
hh3cRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectRowStatus.setStatus('current')
hh3cRedirectToSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToSlotNo.setStatus('current')
hh3cRedirectRemarkedDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectRemarkedDSCP.setStatus('current')
hh3cRedirectRemarkedPri = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectRemarkedPri.setStatus('current')
hh3cRedirectRemarkedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectRemarkedTos.setStatus('current')
hh3cRedirectToNextHop3 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToNextHop3.setStatus('current')
hh3cRedirectTargetVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectTargetVlanID.setStatus('current')
hh3cRedirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict-priority", 1), ("load-balance", 2))).clone('strict-priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectMode.setStatus('current')
hh3cRedirectToNestedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToNestedVlanID.setStatus('current')
hh3cRedirectToModifiedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 6, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedirectToModifiedVlanID.setStatus('current')
hh3cStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7), )
if mibBuilder.loadTexts: hh3cStatisticTable.setStatus('current')
hh3cStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cStatisticAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cStatisticIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cStatisticVlanID"), (0, "HH3C-LswQos-MIB", "hh3cStatisticDirection"))
if mibBuilder.loadTexts: hh3cStatisticEntry.setStatus('current')
hh3cStatisticAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticAclIndex.setStatus('current')
hh3cStatisticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticIfIndex.setStatus('current')
hh3cStatisticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticVlanID.setStatus('current')
hh3cStatisticDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticDirection.setStatus('current')
hh3cStatisticUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticUserAclNum.setStatus('current')
hh3cStatisticUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticUserAclRule.setStatus('current')
hh3cStatisticIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticIpAclNum.setStatus('current')
hh3cStatisticIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticIpAclRule.setStatus('current')
hh3cStatisticLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticLinkAclNum.setStatus('current')
hh3cStatisticLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticLinkAclRule.setStatus('current')
hh3cStatisticRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cStatisticRuntime.setStatus('current')
hh3cStatisticPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cStatisticPacketCount.setStatus('current')
hh3cStatisticByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cStatisticByteCount.setStatus('current')
hh3cStatisticCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cStatisticCountClear.setStatus('current')
hh3cStatisticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cStatisticRowStatus.setStatus('current')
hh3cStatisticPacketXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cStatisticPacketXCount.setStatus('current')
hh3cStatisticByteXCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cStatisticByteXCount.setStatus('current')
hh3cMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8), )
if mibBuilder.loadTexts: hh3cMirrorTable.setStatus('current')
hh3cMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirrorAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cMirrorIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cMirrorVlanID"), (0, "HH3C-LswQos-MIB", "hh3cMirrorDirection"))
if mibBuilder.loadTexts: hh3cMirrorEntry.setStatus('current')
hh3cMirrorAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorAclIndex.setStatus('current')
hh3cMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorIfIndex.setStatus('current')
hh3cMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorVlanID.setStatus('current')
hh3cMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorDirection.setStatus('current')
hh3cMirrorUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorUserAclNum.setStatus('current')
hh3cMirrorUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorUserAclRule.setStatus('current')
hh3cMirrorIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorIpAclNum.setStatus('current')
hh3cMirrorIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorIpAclRule.setStatus('current')
hh3cMirrorLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorLinkAclNum.setStatus('current')
hh3cMirrorLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorLinkAclRule.setStatus('current')
hh3cMirrorToIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorToIfIndex.setStatus('current')
hh3cMirrorToCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorToCpu.setStatus('current')
hh3cMirrorRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMirrorRuntime.setStatus('current')
hh3cMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorRowStatus.setStatus('current')
hh3cMirrorToGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 8, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorToGroup.setStatus('current')
hh3cPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 9), )
if mibBuilder.loadTexts: hh3cPortMirrorTable.setStatus('current')
hh3cPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 9, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cPortMirrorIfIndex"))
if mibBuilder.loadTexts: hh3cPortMirrorEntry.setStatus('current')
hh3cPortMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortMirrorIfIndex.setStatus('current')
hh3cPortMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortMirrorDirection.setStatus('current')
hh3cPortMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cPortMirrorRowStatus.setStatus('current')
hh3cLineRateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10), )
if mibBuilder.loadTexts: hh3cLineRateTable.setStatus('current')
hh3cLineRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cLineRateIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cLineRateDirection"))
if mibBuilder.loadTexts: hh3cLineRateEntry.setStatus('current')
hh3cLineRateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLineRateIfIndex.setStatus('current')
hh3cLineRateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLineRateDirection.setStatus('current')
hh3cLineRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLineRateValue.setStatus('current')
hh3cLineRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLineRateRowStatus.setStatus('current')
hh3cBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11), )
if mibBuilder.loadTexts: hh3cBandwidthTable.setStatus('current')
hh3cBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cBandwidthAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cBandwidthIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cBandwidthVlanID"), (0, "HH3C-LswQos-MIB", "hh3cBandwidthDirection"))
if mibBuilder.loadTexts: hh3cBandwidthEntry.setStatus('current')
hh3cBandwidthAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthAclIndex.setStatus('current')
hh3cBandwidthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthIfIndex.setStatus('current')
hh3cBandwidthVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthVlanID.setStatus('current')
hh3cBandwidthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthDirection.setStatus('current')
hh3cBandwidthIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthIpAclNum.setStatus('current')
hh3cBandwidthIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthIpAclRule.setStatus('current')
hh3cBandwidthLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthLinkAclNum.setStatus('current')
hh3cBandwidthLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cBandwidthLinkAclRule.setStatus('current')
hh3cBandwidthMinGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBandwidthMinGuaranteedWidth.setStatus('current')
hh3cBandwidthMaxGuaranteedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8388608))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBandwidthMaxGuaranteedWidth.setStatus('current')
hh3cBandwidthWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBandwidthWeight.setStatus('current')
hh3cBandwidthRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cBandwidthRuntime.setStatus('current')
hh3cBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 11, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cBandwidthRowStatus.setStatus('current')
hh3cRedTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12), )
if mibBuilder.loadTexts: hh3cRedTable.setStatus('current')
hh3cRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cRedAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cRedIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cRedVlanID"), (0, "HH3C-LswQos-MIB", "hh3cRedDirection"))
if mibBuilder.loadTexts: hh3cRedEntry.setStatus('current')
hh3cRedAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedAclIndex.setStatus('current')
hh3cRedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedIfIndex.setStatus('current')
hh3cRedVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedVlanID.setStatus('current')
hh3cRedDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("invalid", 0), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedDirection.setStatus('current')
hh3cRedIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedIpAclNum.setStatus('current')
hh3cRedIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedIpAclRule.setStatus('current')
hh3cRedLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedLinkAclNum.setStatus('current')
hh3cRedLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRedLinkAclRule.setStatus('current')
hh3cRedStartQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRedStartQueueLen.setStatus('current')
hh3cRedStopQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRedStopQueueLen.setStatus('current')
hh3cRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRedProbability.setStatus('current')
hh3cRedRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRedRuntime.setStatus('current')
hh3cRedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 12, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRedRowStatus.setStatus('current')
hh3cMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13), )
if mibBuilder.loadTexts: hh3cMirrorGroupTable.setStatus('current')
hh3cMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirrorGroupID"))
if mibBuilder.loadTexts: hh3cMirrorGroupEntry.setStatus('current')
hh3cMirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMirrorGroupID.setStatus('current')
hh3cMirrorGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMirrorGroupDirection.setStatus('current')
hh3cMirrorGroupMirrorIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMirrorGroupMirrorIfIndexList.setStatus('current')
hh3cMirrorGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMirrorGroupMonitorIfIndex.setStatus('current')
hh3cMirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 13, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMirrorGroupRowStatus.setStatus('current')
hh3cFlowtempTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14), )
if mibBuilder.loadTexts: hh3cFlowtempTable.setStatus('current')
hh3cFlowtempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cFlowtempIndex"))
if mibBuilder.loadTexts: hh3cFlowtempEntry.setStatus('current')
hh3cFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFlowtempIndex.setStatus('current')
hh3cFlowtempIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempIpProtocol.setStatus('current')
hh3cFlowtempTcpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempTcpFlag.setStatus('current')
hh3cFlowtempSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempSPort.setStatus('current')
hh3cFlowtempDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDPort.setStatus('current')
hh3cFlowtempIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempIcmpType.setStatus('current')
hh3cFlowtempIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempIcmpCode.setStatus('current')
hh3cFlowtempFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempFragment.setStatus('current')
hh3cFlowtempDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDscp.setStatus('current')
hh3cFlowtempIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempIpPre.setStatus('current')
hh3cFlowtempTos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempTos.setStatus('current')
hh3cFlowtempSIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempSIp.setStatus('current')
hh3cFlowtempSIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempSIpMask.setStatus('current')
hh3cFlowtempDIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDIp.setStatus('current')
hh3cFlowtempDIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDIpMask.setStatus('current')
hh3cFlowtempEthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempEthProtocol.setStatus('current')
hh3cFlowtempSMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempSMac.setStatus('current')
hh3cFlowtempSMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempSMacMask.setStatus('current')
hh3cFlowtempDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDMac.setStatus('current')
hh3cFlowtempDMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 20), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempDMacMask.setStatus('current')
hh3cFlowtempVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempVpn.setStatus('current')
hh3cFlowtempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempRowStatus.setStatus('current')
hh3cFlowtempVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempVlanId.setStatus('current')
hh3cFlowtempCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 14, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempCos.setStatus('current')
hh3cFlowtempEnableTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 15), )
if mibBuilder.loadTexts: hh3cFlowtempEnableTable.setStatus('current')
hh3cFlowtempEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 15, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cFlowtempEnableIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cFlowtempEnableVlanID"))
if mibBuilder.loadTexts: hh3cFlowtempEnableEntry.setStatus('current')
hh3cFlowtempEnableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 15, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempEnableIfIndex.setStatus('current')
hh3cFlowtempEnableVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFlowtempEnableVlanID.setStatus('current')
hh3cFlowtempEnableFlowtempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cFlowtempEnableFlowtempIndex.setStatus('current')
hh3cTrafficShapeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16), )
if mibBuilder.loadTexts: hh3cTrafficShapeTable.setStatus('current')
hh3cTrafficShapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cTrafficShapeIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cTrafficShapeQueueId"))
if mibBuilder.loadTexts: hh3cTrafficShapeEntry.setStatus('current')
hh3cTrafficShapeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeIfIndex.setStatus('current')
hh3cTrafficShapeQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeQueueId.setStatus('current')
hh3cTrafficShapeMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeMaxRate.setStatus('current')
hh3cTrafficShapeBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeBurstSize.setStatus('current')
hh3cTrafficShapeBufferLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 8000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeBufferLimit.setStatus('current')
hh3cTrafficShapeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTrafficShapeRowStatus.setStatus('current')
hh3cPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17), )
if mibBuilder.loadTexts: hh3cPortQueueTable.setStatus('current')
hh3cPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cPortQueueIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cPortQueueQueueID"))
if mibBuilder.loadTexts: hh3cPortQueueEntry.setStatus('current')
hh3cPortQueueIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPortQueueIfIndex.setStatus('current')
hh3cPortQueueQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPortQueueQueueID.setStatus('current')
hh3cPortQueueWrrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sp", 1), ("wrr-high-priority", 2), ("wrr-low-priority", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortQueueWrrPriority.setStatus('current')
hh3cPortQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortQueueWeight.setStatus('current')
hh3cDropModeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 18), )
if mibBuilder.loadTexts: hh3cDropModeTable.setStatus('current')
hh3cDropModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 18, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDropModeIfIndex"))
if mibBuilder.loadTexts: hh3cDropModeEntry.setStatus('current')
hh3cDropModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDropModeIfIndex.setStatus('current')
hh3cDropModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("random-detect", 1), ("tail-drop", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDropModeMode.setStatus('current')
hh3cDropModeWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDropModeWredIndex.setStatus('current')
hh3cWredTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19), )
if mibBuilder.loadTexts: hh3cWredTable.setStatus('current')
hh3cWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cWredIndex"), (0, "HH3C-LswQos-MIB", "hh3cWredQueueId"))
if mibBuilder.loadTexts: hh3cWredEntry.setStatus('current')
hh3cWredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWredIndex.setStatus('current')
hh3cWredQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cWredQueueId.setStatus('current')
hh3cWredGreenMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredGreenMinThreshold.setStatus('current')
hh3cWredGreenMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredGreenMaxThreshold.setStatus('current')
hh3cWredGreenMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredGreenMaxProb.setStatus('current')
hh3cWredYellowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredYellowMinThreshold.setStatus('current')
hh3cWredYellowMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredYellowMaxThreshold.setStatus('current')
hh3cWredYellowMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredYellowMaxProb.setStatus('current')
hh3cWredRedMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredRedMinThreshold.setStatus('current')
hh3cWredRedMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredRedMaxThreshold.setStatus('current')
hh3cWredRedMaxProb = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredRedMaxProb.setStatus('current')
hh3cWredExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cWredExponent.setStatus('current')
hh3cCosToLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 20), )
if mibBuilder.loadTexts: hh3cCosToLocalPrecedenceMapTable.setStatus('current')
hh3cCosToLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 20, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cCosToLocalPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hh3cCosToLocalPrecedenceMapEntry.setStatus('current')
hh3cCosToLocalPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCosToLocalPrecedenceMapCosIndex.setStatus('current')
hh3cCosToLocalPrecedenceMapLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCosToLocalPrecedenceMapLocalPrecedenceValue.setStatus('current')
hh3cCosToDropPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 21), )
if mibBuilder.loadTexts: hh3cCosToDropPrecedenceMapTable.setStatus('current')
hh3cCosToDropPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 21, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cCosToDropPrecedenceMapCosIndex"))
if mibBuilder.loadTexts: hh3cCosToDropPrecedenceMapEntry.setStatus('current')
hh3cCosToDropPrecedenceMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCosToDropPrecedenceMapCosIndex.setStatus('current')
hh3cCosToDropPrecedenceMapDropPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCosToDropPrecedenceMapDropPrecedenceValue.setStatus('current')
hh3cDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22), )
if mibBuilder.loadTexts: hh3cDscpMapTable.setStatus('current')
hh3cDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDscpMapConformLevel"), (0, "HH3C-LswQos-MIB", "hh3cDscpMapDscpIndex"))
if mibBuilder.loadTexts: hh3cDscpMapEntry.setStatus('current')
hh3cDscpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDscpMapConformLevel.setStatus('current')
hh3cDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDscpMapDscpIndex.setStatus('current')
hh3cDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpMapDscpValue.setStatus('current')
hh3cDscpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpMapExpValue.setStatus('current')
hh3cDscpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpMapCosValue.setStatus('current')
hh3cDscpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpMapLocalPrecedence.setStatus('current')
hh3cDscpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpMapDropPrecedence.setStatus('current')
hh3cExpMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23), )
if mibBuilder.loadTexts: hh3cExpMapTable.setStatus('current')
hh3cExpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cExpMapConformLevel"), (0, "HH3C-LswQos-MIB", "hh3cExpMapExpIndex"))
if mibBuilder.loadTexts: hh3cExpMapEntry.setStatus('current')
hh3cExpMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cExpMapConformLevel.setStatus('current')
hh3cExpMapExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cExpMapExpIndex.setStatus('current')
hh3cExpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cExpMapDscpValue.setStatus('current')
hh3cExpMapExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cExpMapExpValue.setStatus('current')
hh3cExpMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cExpMapCosValue.setStatus('current')
hh3cExpMapLocalPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cExpMapLocalPrecedence.setStatus('current')
hh3cExpMapDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cExpMapDropPrecedence.setStatus('current')
hh3cLocalPrecedenceMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 24), )
if mibBuilder.loadTexts: hh3cLocalPrecedenceMapTable.setStatus('current')
hh3cLocalPrecedenceMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 24, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cLocalPrecedenceMapConformLevel"), (0, "HH3C-LswQos-MIB", "hh3cLocalPrecedenceMapLocalPrecedenceIndex"))
if mibBuilder.loadTexts: hh3cLocalPrecedenceMapEntry.setStatus('current')
hh3cLocalPrecedenceMapConformLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLocalPrecedenceMapConformLevel.setStatus('current')
hh3cLocalPrecedenceMapLocalPrecedenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLocalPrecedenceMapLocalPrecedenceIndex.setStatus('current')
hh3cLocalPrecedenceMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cLocalPrecedenceMapCosValue.setStatus('current')
hh3cPortWredTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25), )
if mibBuilder.loadTexts: hh3cPortWredTable.setStatus('current')
hh3cPortWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cPortWredIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cPortWredQueueID"))
if mibBuilder.loadTexts: hh3cPortWredEntry.setStatus('current')
hh3cPortWredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPortWredIfIndex.setStatus('current')
hh3cPortWredQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPortWredQueueID.setStatus('current')
hh3cPortWredQueueStartLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortWredQueueStartLength.setStatus('current')
hh3cPortWredQueueProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortWredQueueProbability.setStatus('current')
hh3cMirroringGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26), )
if mibBuilder.loadTexts: hh3cMirroringGroupTable.setStatus('current')
hh3cMirroringGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"))
if mibBuilder.loadTexts: hh3cMirroringGroupEntry.setStatus('current')
hh3cMirroringGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: hh3cMirroringGroupID.setStatus('current')
hh3cMirroringGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote-source", 2), ("remote-destination", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupType.setStatus('current')
hh3cMirroringGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMirroringGroupStatus.setStatus('current')
hh3cMirroringGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 26, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupRowStatus.setStatus('current')
hh3cMirroringGroupMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27), )
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorTable.setStatus('current')
hh3cMirroringGroupMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"))
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorEntry.setStatus('current')
hh3cMirroringGroupMirrorInboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorInboundIfIndexList.setStatus('current')
hh3cMirroringGroupMirrorOutboundIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorOutboundIfIndexList.setStatus('current')
hh3cMirroringGroupMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorRowStatus.setStatus('current')
hh3cMirroringGroupMirrorInTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorInTypeList.setStatus('current')
hh3cMirroringGroupMirrorOutTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 27, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorOutTypeList.setStatus('current')
hh3cMirroringGroupMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 28), )
if mibBuilder.loadTexts: hh3cMirroringGroupMonitorTable.setStatus('current')
hh3cMirroringGroupMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 28, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"))
if mibBuilder.loadTexts: hh3cMirroringGroupMonitorEntry.setStatus('current')
hh3cMirroringGroupMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 28, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMonitorIfIndex.setStatus('current')
hh3cMirroringGroupMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 28, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMonitorRowStatus.setStatus('current')
hh3cMirroringGroupMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 28, 1, 3), Hh3cMirrorOrMonitorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMonitorType.setStatus('current')
hh3cMirroringGroupReflectorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 29), )
if mibBuilder.loadTexts: hh3cMirroringGroupReflectorTable.setStatus('current')
hh3cMirroringGroupReflectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 29, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"))
if mibBuilder.loadTexts: hh3cMirroringGroupReflectorEntry.setStatus('current')
hh3cMirroringGroupReflectorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 29, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupReflectorIfIndex.setStatus('current')
hh3cMirroringGroupReflectorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 29, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupReflectorRowStatus.setStatus('current')
hh3cMirroringGroupRprobeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 30), )
if mibBuilder.loadTexts: hh3cMirroringGroupRprobeVlanTable.setStatus('current')
hh3cMirroringGroupRprobeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 30, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"))
if mibBuilder.loadTexts: hh3cMirroringGroupRprobeVlanEntry.setStatus('current')
hh3cMirroringGroupRprobeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupRprobeVlanID.setStatus('current')
hh3cMirroringGroupRprobeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupRprobeVlanRowStatus.setStatus('current')
hh3cMirroringGroupMirrorMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31), )
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorMacTable.setStatus('current')
hh3cMirroringGroupMirrorMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"), (0, "HH3C-LswQos-MIB", "hh3cMirroringGroupMirrorMacSeq"))
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorMacEntry.setStatus('current')
hh3cMirroringGroupMirrorMacSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorMacSeq.setStatus('current')
hh3cMirroringGroupMirrorMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorMac.setStatus('current')
hh3cMirrorMacVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirrorMacVlanID.setStatus('current')
hh3cMirroringGroupMirroMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 31, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirroMacStatus.setStatus('current')
hh3cMirroringGroupMirrorVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32), )
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorVlanTable.setStatus('current')
hh3cMirroringGroupMirrorVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cMirroringGroupID"), (0, "HH3C-LswQos-MIB", "hh3cMirroringGroupMirrorVlanSeq"))
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorVlanEntry.setStatus('current')
hh3cMirroringGroupMirrorVlanSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorVlanSeq.setStatus('current')
hh3cMirroringGroupMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorVlanID.setStatus('current')
hh3cMirroringGroupMirrorVlanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirrorVlanDirection.setStatus('current')
hh3cMirroringGroupMirroVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMirroringGroupMirroVlanStatus.setStatus('current')
hh3cPortTrustTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33), )
if mibBuilder.loadTexts: hh3cPortTrustTable.setStatus('current')
hh3cPortTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cPortTrustIfIndex"))
if mibBuilder.loadTexts: hh3cPortTrustEntry.setStatus('current')
hh3cPortTrustIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cPortTrustIfIndex.setStatus('current')
hh3cPortTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("cos", 2), ("dscp", 3))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortTrustTrustType.setStatus('current')
hh3cPortTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortTrustOvercastType.setStatus('current')
hh3cPortTrustReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPortTrustReset.setStatus('current')
hh3cRemarkVlanIDTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34), )
if mibBuilder.loadTexts: hh3cRemarkVlanIDTable.setStatus('current')
hh3cRemarkVlanIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cRemarkVlanIDAclIndex"), (0, "HH3C-LswQos-MIB", "hh3cRemarkVlanIDIfIndex"), (0, "HH3C-LswQos-MIB", "hh3cRemarkVlanIDVlanID"), (0, "HH3C-LswQos-MIB", "hh3cRemarkVlanIDDirection"))
if mibBuilder.loadTexts: hh3cRemarkVlanIDEntry.setStatus('current')
hh3cRemarkVlanIDAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2999)))
if mibBuilder.loadTexts: hh3cRemarkVlanIDAclIndex.setStatus('current')
hh3cRemarkVlanIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cRemarkVlanIDIfIndex.setStatus('current')
hh3cRemarkVlanIDVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hh3cRemarkVlanIDVlanID.setStatus('current')
hh3cRemarkVlanIDDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("input", 1), ("output", 2))))
if mibBuilder.loadTexts: hh3cRemarkVlanIDDirection.setStatus('current')
hh3cRemarkVlanIDUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDUserAclNum.setStatus('current')
hh3cRemarkVlanIDUserAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDUserAclRule.setStatus('current')
hh3cRemarkVlanIDIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDIpAclNum.setStatus('current')
hh3cRemarkVlanIDIpAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDIpAclRule.setStatus('current')
hh3cRemarkVlanIDLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDLinkAclNum.setStatus('current')
hh3cRemarkVlanIDLinkAclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDLinkAclRule.setStatus('current')
hh3cRemarkVlanIDRemarkVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDRemarkVlanID.setStatus('current')
hh3cRemarkVlanIDPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDPacketType.setStatus('current')
hh3cRemarkVlanIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 34, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRemarkVlanIDRowStatus.setStatus('current')
hh3cCosToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 35), )
if mibBuilder.loadTexts: hh3cCosToDscpMapTable.setStatus('current')
hh3cCosToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 35, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cCosToDscpMapCosIndex"))
if mibBuilder.loadTexts: hh3cCosToDscpMapEntry.setStatus('current')
hh3cCosToDscpMapCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hh3cCosToDscpMapCosIndex.setStatus('current')
hh3cCosToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCosToDscpMapDscpValue.setStatus('current')
hh3cCosToDscpMapReSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cCosToDscpMapReSet.setStatus('current')
hh3cDscpToLocalPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 36), )
if mibBuilder.loadTexts: hh3cDscpToLocalPreMapTable.setStatus('current')
hh3cDscpToLocalPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 36, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDscpToLocalPreMapDscpIndex"))
if mibBuilder.loadTexts: hh3cDscpToLocalPreMapEntry.setStatus('current')
hh3cDscpToLocalPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cDscpToLocalPreMapDscpIndex.setStatus('current')
hh3cDscpToLocalPreMapLocalPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 36, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToLocalPreMapLocalPreVal.setStatus('current')
hh3cDscpToLocalPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToLocalPreMapReset.setStatus('current')
hh3cDscpToDropPreMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 37), )
if mibBuilder.loadTexts: hh3cDscpToDropPreMapTable.setStatus('current')
hh3cDscpToDropPreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 37, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDscpToDropPreMapDscpIndex"))
if mibBuilder.loadTexts: hh3cDscpToDropPreMapEntry.setStatus('current')
hh3cDscpToDropPreMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cDscpToDropPreMapDscpIndex.setStatus('current')
hh3cDscpToDropPreMapDropPreVal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToDropPreMapDropPreVal.setStatus('current')
hh3cDscpToDropPreMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToDropPreMapReset.setStatus('current')
hh3cDscpToCosMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 38), )
if mibBuilder.loadTexts: hh3cDscpToCosMapTable.setStatus('current')
hh3cDscpToCosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 38, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDscpToCosMapDscpIndex"))
if mibBuilder.loadTexts: hh3cDscpToCosMapEntry.setStatus('current')
hh3cDscpToCosMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cDscpToCosMapDscpIndex.setStatus('current')
hh3cDscpToCosMapCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToCosMapCosValue.setStatus('current')
hh3cDscpToCosMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToCosMapReset.setStatus('current')
hh3cDscpToDscpMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 39), )
if mibBuilder.loadTexts: hh3cDscpToDscpMapTable.setStatus('current')
hh3cDscpToDscpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 39, 1), ).setIndexNames((0, "HH3C-LswQos-MIB", "hh3cDscpToDscpMapDscpIndex"))
if mibBuilder.loadTexts: hh3cDscpToDscpMapEntry.setStatus('current')
hh3cDscpToDscpMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cDscpToDscpMapDscpIndex.setStatus('current')
hh3cDscpToDscpMapDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 39, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToDscpMapDscpValue.setStatus('current')
hh3cDscpToDscpMapReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 35, 16, 2, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDscpToDscpMapReset.setStatus('current')
mibBuilder.exportSymbols("HH3C-LswQos-MIB", hh3cExpMapDscpValue=hh3cExpMapDscpValue, hh3cTrafficShapeIfIndex=hh3cTrafficShapeIfIndex, hh3cMirroringGroupMirrorMac=hh3cMirroringGroupMirrorMac, hh3cPortQueueIfIndex=hh3cPortQueueIfIndex, hh3cFlowtempDIpMask=hh3cFlowtempDIpMask, hh3cRedEntry=hh3cRedEntry, hh3cRedirectEntry=hh3cRedirectEntry, hh3cCosToDscpMapEntry=hh3cCosToDscpMapEntry, hh3cStatisticRuntime=hh3cStatisticRuntime, hh3cRateLimitExceedActionType=hh3cRateLimitExceedActionType, hh3cCosToLocalPrecedenceMapLocalPrecedenceValue=hh3cCosToLocalPrecedenceMapLocalPrecedenceValue, hh3cQueueMaxDelay=hh3cQueueMaxDelay, hh3cPriorityUserAclNum=hh3cPriorityUserAclNum, hh3cMirroringGroupMirrorVlanEntry=hh3cMirroringGroupMirrorVlanEntry, hh3cRateLimitConformDscp=hh3cRateLimitConformDscp, hh3cRateLimitLinkAclNum=hh3cRateLimitLinkAclNum, hh3cStatisticByteCount=hh3cStatisticByteCount, hh3cRedirectAclIndex=hh3cRedirectAclIndex, hh3cMirrorGroupMonitorIfIndex=hh3cMirrorGroupMonitorIfIndex, hh3cFlowtempTos=hh3cFlowtempTos, hh3cPortTrustOvercastType=hh3cPortTrustOvercastType, hh3cPriorityVlanID=hh3cPriorityVlanID, hh3cFlowtempVlanId=hh3cFlowtempVlanId, hh3cLineRateTable=hh3cLineRateTable, hh3cRateLimitMeterStatByteXCount=hh3cRateLimitMeterStatByteXCount, hh3cCosToDropPrecedenceMapEntry=hh3cCosToDropPrecedenceMapEntry, hh3cRedirectLinkAclNum=hh3cRedirectLinkAclNum, hh3cMirroringGroupMirroVlanStatus=hh3cMirroringGroupMirroVlanStatus, hh3cDscpToLocalPreMapTable=hh3cDscpToLocalPreMapTable, hh3cDscpToDropPreMapReset=hh3cDscpToDropPreMapReset, hh3cRemarkVlanIDPacketType=hh3cRemarkVlanIDPacketType, hh3cDscpToCosMapEntry=hh3cDscpToCosMapEntry, hh3cMirrorToIfIndex=hh3cMirrorToIfIndex, hh3cPriorityDscp=hh3cPriorityDscp, hh3cRedIpAclNum=hh3cRedIpAclNum, hh3cPortTrustEntry=hh3cPortTrustEntry, hh3cPortQueueQueueID=hh3cPortQueueQueueID, hh3cRedirectRuntime=hh3cRedirectRuntime, hh3cMirrorTable=hh3cMirrorTable, hh3cRedirectUserAclRule=hh3cRedirectUserAclRule, hh3cRedVlanID=hh3cRedVlanID, hh3cFlowtempSMac=hh3cFlowtempSMac, hh3cMirroringGroupTable=hh3cMirroringGroupTable, hh3cPriorityIpAclRule=hh3cPriorityIpAclRule, hh3cPriorityPolicedServiceType=hh3cPriorityPolicedServiceType, hh3cMirroringGroupMirrorInboundIfIndexList=hh3cMirroringGroupMirrorInboundIfIndexList, hh3cQueueScheduleMode=hh3cQueueScheduleMode, hh3cMirrorDirection=hh3cMirrorDirection, hh3cRateLimitConformCos=hh3cRateLimitConformCos, hh3cMirrorUserAclNum=hh3cMirrorUserAclNum, hh3cQueueWeight7=hh3cQueueWeight7, hh3cRedStartQueueLen=hh3cRedStartQueueLen, hh3cFlowtempVpn=hh3cFlowtempVpn, hh3cFlowtempIndex=hh3cFlowtempIndex, hh3cCosToLocalPrecedenceMapCosIndex=hh3cCosToLocalPrecedenceMapCosIndex, hh3cRedIpAclRule=hh3cRedIpAclRule, hh3cRedLinkAclRule=hh3cRedLinkAclRule, hh3cMirrorVlanID=hh3cMirrorVlanID, hh3cFlowtempRowStatus=hh3cFlowtempRowStatus, hh3cRedirectUserAclNum=hh3cRedirectUserAclNum, hh3cTrafficShapeMaxRate=hh3cTrafficShapeMaxRate, hh3cRemarkVlanIDRemarkVlanID=hh3cRemarkVlanIDRemarkVlanID, hh3cPriorityTrustMode=hh3cPriorityTrustMode, hh3cBandwidthIpAclRule=hh3cBandwidthIpAclRule, hh3cQueueWeight3=hh3cQueueWeight3, hh3cDscpToCosMapDscpIndex=hh3cDscpToCosMapDscpIndex, hh3cFlowtempDscp=hh3cFlowtempDscp, hh3cRateLimitPeakRate=hh3cRateLimitPeakRate, hh3cBandwidthTable=hh3cBandwidthTable, hh3cMirrorGroupEntry=hh3cMirrorGroupEntry, hh3cCosToDropPrecedenceMapCosIndex=hh3cCosToDropPrecedenceMapCosIndex, hh3cDropModeTable=hh3cDropModeTable, hh3cMirrorToCpu=hh3cMirrorToCpu, hh3cDscpMapDropPrecedence=hh3cDscpMapDropPrecedence, hh3cRedirectRemarkedTos=hh3cRedirectRemarkedTos, hh3cDscpToDscpMapDscpValue=hh3cDscpToDscpMapDscpValue, hh3cPriorityLinkAclRule=hh3cPriorityLinkAclRule, hh3cBandwidthLinkAclRule=hh3cBandwidthLinkAclRule, hh3cRateLimitExceedDscp=hh3cRateLimitExceedDscp, hh3cFlowtempIcmpCode=hh3cFlowtempIcmpCode, hh3cMirrorGroupRowStatus=hh3cMirrorGroupRowStatus, hh3cRedirectTable=hh3cRedirectTable, hh3cMirroringGroupMonitorIfIndex=hh3cMirroringGroupMonitorIfIndex, hh3cBandwidthLinkAclNum=hh3cBandwidthLinkAclNum, hh3cPortMonitorBothIfIndex=hh3cPortMonitorBothIfIndex, hh3cCosToLocalPrecedenceMapTable=hh3cCosToLocalPrecedenceMapTable, hh3cFlowtempEnableEntry=hh3cFlowtempEnableEntry, hh3cRedirectRowStatus=hh3cRedirectRowStatus, hh3cBandwidthWeight=hh3cBandwidthWeight, hh3cMirroringGroupMirrorVlanID=hh3cMirroringGroupMirrorVlanID, hh3cMirroringGroupMirrorMacEntry=hh3cMirroringGroupMirrorMacEntry, hh3cPortMirrorTable=hh3cPortMirrorTable, hh3cExpMapConformLevel=hh3cExpMapConformLevel, hh3cCosToDropPrecedenceMapTable=hh3cCosToDropPrecedenceMapTable, hh3cDropModeEntry=hh3cDropModeEntry, hh3cDscpMapExpValue=hh3cDscpMapExpValue, hh3cPriorityUserAclRule=hh3cPriorityUserAclRule, hh3cStatisticAclIndex=hh3cStatisticAclIndex, hh3cPortWredIfIndex=hh3cPortWredIfIndex, hh3cWredGreenMaxProb=hh3cWredGreenMaxProb, hh3cWredGreenMaxThreshold=hh3cWredGreenMaxThreshold, hh3cRedirectToNextHop1=hh3cRedirectToNextHop1, hh3cRedirectToNestedVlanID=hh3cRedirectToNestedVlanID, hh3cMirroringGroupMonitorEntry=hh3cMirroringGroupMonitorEntry, hh3cPriorityPolicedServiceExp=hh3cPriorityPolicedServiceExp, hh3cMirroringGroupMirrorTable=hh3cMirroringGroupMirrorTable, hh3cMirrorGroupTable=hh3cMirrorGroupTable, hh3cMirroringGroupRprobeVlanEntry=hh3cMirroringGroupRprobeVlanEntry, hh3cPortQueueWrrPriority=hh3cPortQueueWrrPriority, hh3cRedirectIfIndex=hh3cRedirectIfIndex, hh3cPortMirrorDirection=hh3cPortMirrorDirection, hh3cFlowtempIpProtocol=hh3cFlowtempIpProtocol, hh3cDscpToDscpMapEntry=hh3cDscpToDscpMapEntry, hh3cRedirectToNextHop3=hh3cRedirectToNextHop3, hh3cMirrorIpAclRule=hh3cMirrorIpAclRule, hh3cMirroringGroupStatus=hh3cMirroringGroupStatus, hh3cExpMapTable=hh3cExpMapTable, hh3cPriorityIfIndex=hh3cPriorityIfIndex, hh3cMirrorEntry=hh3cMirrorEntry, hh3cPortQueueTable=hh3cPortQueueTable, hh3cRemarkVlanIDIpAclNum=hh3cRemarkVlanIDIpAclNum, hh3cMirroringGroupMirrorOutboundIfIndexList=hh3cMirroringGroupMirrorOutboundIfIndexList, hh3cMirrorAclIndex=hh3cMirrorAclIndex, hh3cMirroringGroupMirrorMacTable=hh3cMirroringGroupMirrorMacTable, hh3cCosToDscpMapCosIndex=hh3cCosToDscpMapCosIndex, hh3cBandwidthAclIndex=hh3cBandwidthAclIndex, hh3cRateLimitPIR=hh3cRateLimitPIR, hh3cStatisticVlanID=hh3cStatisticVlanID, hh3cDscpToDscpMapReset=hh3cDscpToDscpMapReset, hh3cRedirectIpAclNum=hh3cRedirectIpAclNum, hh3cRemarkVlanIDEntry=hh3cRemarkVlanIDEntry, hh3cFlowtempTable=hh3cFlowtempTable, hh3cStatisticTable=hh3cStatisticTable, hh3cLineRateEntry=hh3cLineRateEntry, hh3cPriorityIpPreFromCos=hh3cPriorityIpPreFromCos, hh3cStatisticLinkAclRule=hh3cStatisticLinkAclRule, hh3cPriorityLinkAclNum=hh3cPriorityLinkAclNum, hh3cMirroringGroupID=hh3cMirroringGroupID, hh3cExpMapLocalPrecedence=hh3cExpMapLocalPrecedence, hh3cFlowtempFragment=hh3cFlowtempFragment, hh3cPortWredTable=hh3cPortWredTable, hh3cDscpMapConformLevel=hh3cDscpMapConformLevel, hh3cDscpMapDscpIndex=hh3cDscpMapDscpIndex, hh3cFlowtempEnableFlowtempIndex=hh3cFlowtempEnableFlowtempIndex, hh3cWredRedMaxThreshold=hh3cWredRedMaxThreshold, hh3cPortQueueEntry=hh3cPortQueueEntry, hh3cStatisticCountClear=hh3cStatisticCountClear, hh3cRateLimitVlanID=hh3cRateLimitVlanID, hh3cFlowtempDIp=hh3cFlowtempDIp, hh3cRedirectVlanID=hh3cRedirectVlanID, hh3cRedirectToIfIndex=hh3cRedirectToIfIndex, hh3cRedirectToCpu=hh3cRedirectToCpu, hh3cRateLimitTargetRateKbps=hh3cRateLimitTargetRateKbps, hh3cCosToDscpMapDscpValue=hh3cCosToDscpMapDscpValue, hh3cBandwidthMinGuaranteedWidth=hh3cBandwidthMinGuaranteedWidth, hh3cQueueWeight8=hh3cQueueWeight8, hh3cFlowtempEnableTable=hh3cFlowtempEnableTable, hh3cPriorityTable=hh3cPriorityTable, hh3cPriorityLocalPre=hh3cPriorityLocalPre, hh3cRateLimitCBS=hh3cRateLimitCBS, hh3cFlowtempDPort=hh3cFlowtempDPort, hh3cFlowtempDMac=hh3cFlowtempDMac, hh3cQueueEntry=hh3cQueueEntry, hh3cBandwidthIpAclNum=hh3cBandwidthIpAclNum, hh3cMirroringGroupRprobeVlanTable=hh3cMirroringGroupRprobeVlanTable, hh3cTrafficShapeTable=hh3cTrafficShapeTable, hh3cStatisticUserAclRule=hh3cStatisticUserAclRule, hh3cFlowtempEnableVlanID=hh3cFlowtempEnableVlanID, hh3cTrafficShapeEntry=hh3cTrafficShapeEntry, hh3cPriorityPolicedServiceDscp=hh3cPriorityPolicedServiceDscp, hh3cPriorityRuntime=hh3cPriorityRuntime, hh3cRemarkVlanIDLinkAclNum=hh3cRemarkVlanIDLinkAclNum, hh3cRateLimitEBS=hh3cRateLimitEBS, hh3cStatisticEntry=hh3cStatisticEntry, hh3cRateLimitLinkAclRule=hh3cRateLimitLinkAclRule, hh3cStatisticUserAclNum=hh3cStatisticUserAclNum, hh3cTrafficShapeRowStatus=hh3cTrafficShapeRowStatus, hh3cMirroringGroupMonitorType=hh3cMirroringGroupMonitorType, hh3cBandwidthRowStatus=hh3cBandwidthRowStatus, hh3cDropModeWredIndex=hh3cDropModeWredIndex, hh3cRateLimitCIR=hh3cRateLimitCIR, hh3cMirroringGroupEntry=hh3cMirroringGroupEntry, hh3cWredYellowMinThreshold=hh3cWredYellowMinThreshold, hh3cRedirectToNextHop2=hh3cRedirectToNextHop2, hh3cQueueWeight6=hh3cQueueWeight6, hh3cRedIfIndex=hh3cRedIfIndex, hh3cLocalPrecedenceMapConformLevel=hh3cLocalPrecedenceMapConformLevel, hh3cQueueWeight4=hh3cQueueWeight4, hh3cDscpMapEntry=hh3cDscpMapEntry, hh3cDscpToDropPreMapDropPreVal=hh3cDscpToDropPreMapDropPreVal, hh3cMirrorIfIndex=hh3cMirrorIfIndex, hh3cRedirectTargetVlanID=hh3cRedirectTargetVlanID, hh3cDscpToLocalPreMapReset=hh3cDscpToLocalPreMapReset, hh3cWredEntry=hh3cWredEntry, PYSNMP_MODULE_ID=hh3cLswQosAclMib, hh3cPriorityPolicedServiceLoaclPre=hh3cPriorityPolicedServiceLoaclPre, hh3cRateLimitTable=hh3cRateLimitTable, hh3cMirrorRuntime=hh3cMirrorRuntime, hh3cCosToDscpMapTable=hh3cCosToDscpMapTable, hh3cLineRateIfIndex=hh3cLineRateIfIndex, hh3cWredExponent=hh3cWredExponent, hh3cDscpToDropPreMapTable=hh3cDscpToDropPreMapTable, hh3cMirrorRowStatus=hh3cMirrorRowStatus, hh3cPriorityPolicedServiceDropPriority=hh3cPriorityPolicedServiceDropPriority, hh3cBandwidthEntry=hh3cBandwidthEntry, hh3cBandwidthDirection=hh3cBandwidthDirection, hh3cDscpToLocalPreMapDscpIndex=hh3cDscpToLocalPreMapDscpIndex, hh3cStatisticIpAclRule=hh3cStatisticIpAclRule, hh3cDscpToCosMapReset=hh3cDscpToCosMapReset, hh3cMirroringGroupReflectorTable=hh3cMirroringGroupReflectorTable, hh3cFlowtempDMacMask=hh3cFlowtempDMacMask, hh3cRemarkVlanIDDirection=hh3cRemarkVlanIDDirection, hh3cFlowtempIpPre=hh3cFlowtempIpPre, hh3cRemarkVlanIDTable=hh3cRemarkVlanIDTable, hh3cStatisticByteXCount=hh3cStatisticByteXCount, hh3cPortWredQueueStartLength=hh3cPortWredQueueStartLength, hh3cExpMapDropPrecedence=hh3cExpMapDropPrecedence, hh3cRedLinkAclNum=hh3cRedLinkAclNum, hh3cMirroringGroupReflectorEntry=hh3cMirroringGroupReflectorEntry, hh3cRedirectLinkAclRule=hh3cRedirectLinkAclRule, hh3cDscpToDscpMapTable=hh3cDscpToDscpMapTable, hh3cFlowtempTcpFlag=hh3cFlowtempTcpFlag, hh3cRedirectMode=hh3cRedirectMode, hh3cRedDirection=hh3cRedDirection, hh3cFlowtempSIp=hh3cFlowtempSIp, hh3cFlowtempSIpMask=hh3cFlowtempSIpMask, hh3cRemarkVlanIDAclIndex=hh3cRemarkVlanIDAclIndex, hh3cWredRedMaxProb=hh3cWredRedMaxProb, hh3cCosToLocalPrecedenceMapEntry=hh3cCosToLocalPrecedenceMapEntry, hh3cDscpMapDscpValue=hh3cDscpMapDscpValue, hh3cLocalPrecedenceMapTable=hh3cLocalPrecedenceMapTable, hh3cTrafficShapeBufferLimit=hh3cTrafficShapeBufferLimit, hh3cPriorityRowStatus=hh3cPriorityRowStatus, hh3cMirrorGroupID=hh3cMirrorGroupID, hh3cDscpMapLocalPrecedence=hh3cDscpMapLocalPrecedence, hh3cDscpToCosMapCosValue=hh3cDscpToCosMapCosValue, hh3cRedStopQueueLen=hh3cRedStopQueueLen, hh3cMirrorMacVlanID=hh3cMirrorMacVlanID, hh3cRateLimitUserAclRule=hh3cRateLimitUserAclRule, hh3cLineRateRowStatus=hh3cLineRateRowStatus, hh3cPortMirrorEntry=hh3cPortMirrorEntry, hh3cBandwidthVlanID=hh3cBandwidthVlanID, hh3cRedirectRemarkedDSCP=hh3cRedirectRemarkedDSCP, hh3cMirroringGroupRprobeVlanID=hh3cMirroringGroupRprobeVlanID, hh3cMirroringGroupMirrorVlanTable=hh3cMirroringGroupMirrorVlanTable, hh3cStatisticDirection=hh3cStatisticDirection, hh3cDscpMapTable=hh3cDscpMapTable, hh3cDscpMapCosValue=hh3cDscpMapCosValue, hh3cBandwidthRuntime=hh3cBandwidthRuntime, hh3cPriorityIpPre=hh3cPriorityIpPre, hh3cLocalPrecedenceMapEntry=hh3cLocalPrecedenceMapEntry, hh3cDropModeIfIndex=hh3cDropModeIfIndex, hh3cPriorityCosFromIpPre=hh3cPriorityCosFromIpPre, hh3cPriorityCos=hh3cPriorityCos)
mibBuilder.exportSymbols("HH3C-LswQos-MIB", hh3cMirroringGroupMirroMacStatus=hh3cMirroringGroupMirroMacStatus, hh3cRateLimitRowStatus=hh3cRateLimitRowStatus, hh3cPriorityAclIndex=hh3cPriorityAclIndex, hh3cRateLimitConformActionType=hh3cRateLimitConformActionType, hh3cLswQosMibObject=hh3cLswQosMibObject, hh3cPortQueueWeight=hh3cPortQueueWeight, hh3cWredQueueId=hh3cWredQueueId, hh3cRateLimitIpAclNum=hh3cRateLimitIpAclNum, hh3cMirroringGroupType=hh3cMirroringGroupType, hh3cPortMirrorRowStatus=hh3cPortMirrorRowStatus, hh3cFlowtempSMacMask=hh3cFlowtempSMacMask, hh3cStatisticIfIndex=hh3cStatisticIfIndex, hh3cQueueWeight5=hh3cQueueWeight5, hh3cPortTrustTable=hh3cPortTrustTable, hh3cWredGreenMinThreshold=hh3cWredGreenMinThreshold, hh3cPortTrustIfIndex=hh3cPortTrustIfIndex, hh3cPortTrustReset=hh3cPortTrustReset, hh3cMirroringGroupMirrorInTypeList=hh3cMirroringGroupMirrorInTypeList, hh3cPriorityPolicedServiceCos=hh3cPriorityPolicedServiceCos, hh3cRateLimitEntry=hh3cRateLimitEntry, hh3cMirroringGroupMirrorVlanSeq=hh3cMirroringGroupMirrorVlanSeq, hh3cFlowtempCos=hh3cFlowtempCos, hh3cMirroringGroupMonitorTable=hh3cMirroringGroupMonitorTable, hh3cDscpToLocalPreMapEntry=hh3cDscpToLocalPreMapEntry, hh3cRateLimitAclIndex=hh3cRateLimitAclIndex, hh3cMirrorToGroup=hh3cMirrorToGroup, hh3cDscpToDropPreMapEntry=hh3cDscpToDropPreMapEntry, hh3cDscpToCosMapTable=hh3cDscpToCosMapTable, hh3cCosToDropPrecedenceMapDropPrecedenceValue=hh3cCosToDropPrecedenceMapDropPrecedenceValue, hh3cMirrorGroupMirrorIfIndexList=hh3cMirrorGroupMirrorIfIndexList, hh3cQueueWeight2=hh3cQueueWeight2, hh3cMirroringGroupMirrorOutTypeList=hh3cMirroringGroupMirrorOutTypeList, hh3cMirroringGroupMirrorMacSeq=hh3cMirroringGroupMirrorMacSeq, hh3cStatisticPacketCount=hh3cStatisticPacketCount, hh3cMirroringGroupMirrorEntry=hh3cMirroringGroupMirrorEntry, hh3cFlowtempEnableIfIndex=hh3cFlowtempEnableIfIndex, hh3cPriorityEntry=hh3cPriorityEntry, hh3cRateLimitIpAclRule=hh3cRateLimitIpAclRule, hh3cDscpToDscpMapDscpIndex=hh3cDscpToDscpMapDscpIndex, hh3cPortWredQueueProbability=hh3cPortWredQueueProbability, hh3cRemarkVlanIDIfIndex=hh3cRemarkVlanIDIfIndex, hh3cRateLimitConformLocalPre=hh3cRateLimitConformLocalPre, hh3cFlowtempIcmpType=hh3cFlowtempIcmpType, hh3cLocalPrecedenceMapLocalPrecedenceIndex=hh3cLocalPrecedenceMapLocalPrecedenceIndex, hh3cRateLimitRuntime=hh3cRateLimitRuntime, hh3cMirrorIpAclNum=hh3cMirrorIpAclNum, hh3cRemarkVlanIDVlanID=hh3cRemarkVlanIDVlanID, hh3cStatisticIpAclNum=hh3cStatisticIpAclNum, hh3cPriorityIpAclNum=hh3cPriorityIpAclNum, hh3cRateLimitExceedCos=hh3cRateLimitExceedCos, hh3cExpMapEntry=hh3cExpMapEntry, hh3cPortWredQueueID=hh3cPortWredQueueID, hh3cMirroringGroupReflectorRowStatus=hh3cMirroringGroupReflectorRowStatus, hh3cMirroringGroupMirrorVlanDirection=hh3cMirroringGroupMirrorVlanDirection, hh3cFlowtempSPort=hh3cFlowtempSPort, hh3cTrafficShapeBurstSize=hh3cTrafficShapeBurstSize, hh3cRemarkVlanIDUserAclNum=hh3cRemarkVlanIDUserAclNum, hh3cLineRateValue=hh3cLineRateValue, hh3cExpMapExpIndex=hh3cExpMapExpIndex, hh3cStatisticRowStatus=hh3cStatisticRowStatus, hh3cMirroringGroupReflectorIfIndex=hh3cMirroringGroupReflectorIfIndex, hh3cQueueIfIndex=hh3cQueueIfIndex, hh3cRedirectRemarkedPri=hh3cRedirectRemarkedPri, hh3cRateLimitDirection=hh3cRateLimitDirection, hh3cRemarkVlanIDIpAclRule=hh3cRemarkVlanIDIpAclRule, hh3cRedRuntime=hh3cRedRuntime, hh3cMirrorGroupDirection=hh3cMirrorGroupDirection, hh3cMirroringGroupMonitorRowStatus=hh3cMirroringGroupMonitorRowStatus, hh3cMirroringGroupMirrorRowStatus=hh3cMirroringGroupMirrorRowStatus, hh3cExpMapExpValue=hh3cExpMapExpValue, hh3cMirrorLinkAclRule=hh3cMirrorLinkAclRule, hh3cWredTable=hh3cWredTable, hh3cLocalPrecedenceMapCosValue=hh3cLocalPrecedenceMapCosValue, hh3cRedRowStatus=hh3cRedRowStatus, hh3cWredRedMinThreshold=hh3cWredRedMinThreshold, hh3cDscpToDropPreMapDscpIndex=hh3cDscpToDropPreMapDscpIndex, hh3cMirroringGroupRowStatus=hh3cMirroringGroupRowStatus, hh3cPortTrustTrustType=hh3cPortTrustTrustType, hh3cQueueWeight1=hh3cQueueWeight1, hh3cRedirectToSlotNo=hh3cRedirectToSlotNo, hh3cRateLimitMeterStatByteCount=hh3cRateLimitMeterStatByteCount, hh3cRedTable=hh3cRedTable, hh3cCosToDscpMapReSet=hh3cCosToDscpMapReSet, hh3cBandwidthMaxGuaranteedWidth=hh3cBandwidthMaxGuaranteedWidth, hh3cRedirectDirection=hh3cRedirectDirection, hh3cMirrorLinkAclNum=hh3cMirrorLinkAclNum, hh3cRedirectToModifiedVlanID=hh3cRedirectToModifiedVlanID, hh3cRateLimitTargetRateMbps=hh3cRateLimitTargetRateMbps, hh3cRateLimitIfIndex=hh3cRateLimitIfIndex, hh3cPortWredEntry=hh3cPortWredEntry, hh3cDscpToLocalPreMapLocalPreVal=hh3cDscpToLocalPreMapLocalPreVal, hh3cRedAclIndex=hh3cRedAclIndex, hh3cQueueTable=hh3cQueueTable, hh3cRateLimitMeterStatState=hh3cRateLimitMeterStatState, hh3cFlowtempEntry=hh3cFlowtempEntry, hh3cDropModeMode=hh3cDropModeMode, hh3cRemarkVlanIDRowStatus=hh3cRemarkVlanIDRowStatus, hh3cExpMapCosValue=hh3cExpMapCosValue, hh3cRedProbability=hh3cRedProbability, Hh3cMirrorOrMonitorType=Hh3cMirrorOrMonitorType, hh3cLswQosAclMib=hh3cLswQosAclMib, hh3cWredIndex=hh3cWredIndex, hh3cMirroringGroupRprobeVlanRowStatus=hh3cMirroringGroupRprobeVlanRowStatus, hh3cRateLimitUserAclNum=hh3cRateLimitUserAclNum, hh3cPortMirrorIfIndex=hh3cPortMirrorIfIndex, hh3cRemarkVlanIDUserAclRule=hh3cRemarkVlanIDUserAclRule, hh3cLineRateDirection=hh3cLineRateDirection, hh3cMirrorUserAclRule=hh3cMirrorUserAclRule, hh3cStatisticLinkAclNum=hh3cStatisticLinkAclNum, hh3cStatisticPacketXCount=hh3cStatisticPacketXCount, hh3cBandwidthIfIndex=hh3cBandwidthIfIndex, hh3cWredYellowMaxThreshold=hh3cWredYellowMaxThreshold, hh3cTrafficShapeQueueId=hh3cTrafficShapeQueueId, hh3cFlowtempEthProtocol=hh3cFlowtempEthProtocol, hh3cRedirectIpAclRule=hh3cRedirectIpAclRule, hh3cRemarkVlanIDLinkAclRule=hh3cRemarkVlanIDLinkAclRule, hh3cWredYellowMaxProb=hh3cWredYellowMaxProb, hh3cPriorityDirection=hh3cPriorityDirection)
