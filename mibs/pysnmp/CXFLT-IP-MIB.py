#
# PySNMP MIB module CXFLT-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFLT-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
cxFltIp, = mibBuilder.importSymbols("CXProduct-SMI", "cxFltIp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Unsigned32, Bits, ModuleIdentity, MibIdentifier, NotificationType, Integer32, Gauge32, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Unsigned32", "Bits", "ModuleIdentity", "MibIdentifier", "NotificationType", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxFltIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1), )
if mibBuilder.loadTexts: cxFltIpAddrTable.setStatus('mandatory')
cxFltIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1), ).setIndexNames((0, "CXFLT-IP-MIB", "cxFltIpIndex"))
if mibBuilder.loadTexts: cxFltIpAddrEntry.setStatus('mandatory')
cxFltIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpIndex.setStatus('mandatory')
cxFltIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpSrcAddr.setStatus('mandatory')
cxFltIpSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpSrcNetMask.setStatus('mandatory')
cxFltIpDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpDstAddr.setStatus('mandatory')
cxFltIpDstNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpDstNetMask.setStatus('mandatory')
cxFltIpParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpParameter.setStatus('mandatory')
cxFltIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpRowStatus.setStatus('mandatory')
cxFltIpProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpProtType.setStatus('mandatory')
cxFltIpProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpProtPortNum.setStatus('mandatory')
mibBuilder.exportSymbols("CXFLT-IP-MIB", cxFltIpProtType=cxFltIpProtType, cxFltIpSrcAddr=cxFltIpSrcAddr, cxFltIpDstAddr=cxFltIpDstAddr, cxFltIpParameter=cxFltIpParameter, cxFltIpSrcNetMask=cxFltIpSrcNetMask, cxFltIpAddrEntry=cxFltIpAddrEntry, cxFltIpAddrTable=cxFltIpAddrTable, cxFltIpRowStatus=cxFltIpRowStatus, cxFltIpProtPortNum=cxFltIpProtPortNum, cxFltIpDstNetMask=cxFltIpDstNetMask, cxFltIpIndex=cxFltIpIndex)
