#
# PySNMP MIB module XYLAN-ASCONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-ASCONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, MibIdentifier, IpAddress, Integer32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64, Bits, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Integer32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64", "Bits", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanAscCArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanAscCArch")
class AscSnapshotAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("excludeFromSnapshot", 1), ("includeInSnapshot", 2))

ascfgControl = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 21, 1))
ascfgInputFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgInputFileName.setStatus('mandatory')
ascfgAction = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noneAvail", 1), ("checkSyntax", 2), ("checkSyntaxAndApply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgAction.setStatus('mandatory')
ascfgErrorFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgErrorFileName.setStatus('mandatory')
ascfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgStatus.setStatus('mandatory')
ascfgErrors = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgErrors.setStatus('mandatory')
ascfgTimerFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerFileName.setStatus('mandatory')
ascfgTimerFileTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerFileTime.setStatus('mandatory')
ascfgTimerFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2), ("inprogress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgTimerFileStatus.setStatus('mandatory')
ascfgTimerClear = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerClear.setStatus('mandatory')
ascfgSnapshotFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotFileName.setStatus('mandatory')
ascfgSnapshotInitiate = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotInitiate.setStatus('mandatory')
ascfgSnapshotIpSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 12), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotIpSelect.setStatus('mandatory')
ascfgSnapshotIpxSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 13), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotIpxSelect.setStatus('mandatory')
ascfgSnapshotSystemSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 14), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotSystemSelect.setStatus('mandatory')
ascfgSnapshotSnmpSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 15), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotSnmpSelect.setStatus('mandatory')
ascfgSnapshotAtmSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 16), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotAtmSelect.setStatus('mandatory')
ascfgSnapshotVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 18), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotVlanSelect.setStatus('mandatory')
ascfgSnapshotInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 19), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotInterfaceSelect.setStatus('mandatory')
ascfgSnapshotBrdgSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 20), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotBrdgSelect.setStatus('mandatory')
ascfgSnapshotAllSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 21), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotAllSelect.setStatus('mandatory')
ascfgSnapshotSelectSummary = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgSnapshotSelectSummary.setStatus('mandatory')
ascfgCommandStr = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgCommandStr.setStatus('mandatory')
ascfgCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgCommandStatus.setStatus('mandatory')
ascfgSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSaveConfiguration.setStatus('mandatory')
ascfgConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgConfigurationFileName.setStatus('mandatory')
ascfgCacheOnly = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgCacheOnly.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-ASCONFIG-MIB", ascfgSnapshotAllSelect=ascfgSnapshotAllSelect, ascfgSnapshotSelectSummary=ascfgSnapshotSelectSummary, ascfgInputFileName=ascfgInputFileName, ascfgSnapshotInterfaceSelect=ascfgSnapshotInterfaceSelect, ascfgSnapshotInitiate=ascfgSnapshotInitiate, ascfgSnapshotFileName=ascfgSnapshotFileName, ascfgCacheOnly=ascfgCacheOnly, ascfgErrors=ascfgErrors, ascfgSnapshotSnmpSelect=ascfgSnapshotSnmpSelect, ascfgSnapshotBrdgSelect=ascfgSnapshotBrdgSelect, ascfgSaveConfiguration=ascfgSaveConfiguration, ascfgSnapshotAtmSelect=ascfgSnapshotAtmSelect, ascfgSnapshotVlanSelect=ascfgSnapshotVlanSelect, ascfgCommandStatus=ascfgCommandStatus, ascfgCommandStr=ascfgCommandStr, AscSnapshotAction=AscSnapshotAction, ascfgAction=ascfgAction, ascfgTimerClear=ascfgTimerClear, ascfgTimerFileName=ascfgTimerFileName, ascfgTimerFileTime=ascfgTimerFileTime, ascfgTimerFileStatus=ascfgTimerFileStatus, ascfgControl=ascfgControl, ascfgStatus=ascfgStatus, ascfgSnapshotSystemSelect=ascfgSnapshotSystemSelect, ascfgSnapshotIpSelect=ascfgSnapshotIpSelect, ascfgErrorFileName=ascfgErrorFileName, ascfgSnapshotIpxSelect=ascfgSnapshotIpxSelect, ascfgConfigurationFileName=ascfgConfigurationFileName)
