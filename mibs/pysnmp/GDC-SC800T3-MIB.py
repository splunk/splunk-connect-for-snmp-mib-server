#
# PySNMP MIB module GDC-SC800T3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDC-SC800T3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter32, Gauge32, ObjectIdentity, NotificationType, MibIdentifier, TimeTicks, Counter64, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "MibIdentifier", "TimeTicks", "Counter64", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ds3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19))
sc800t3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1))
sc800t3Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 1))
sc800t3Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 2))
sc800t3Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 3))
sc800t3Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 4))
sc800t3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5))
sc800t3Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 6))
sc800t3AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 7))
sc800t3LocalAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 8))
sc800t3MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3MIBversion.setStatus('mandatory')
sc800t3VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2), )
if mibBuilder.loadTexts: sc800t3VersionTable.setStatus('mandatory')
sc800t3VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3VersionIndex"))
if mibBuilder.loadTexts: sc800t3VersionEntry.setStatus('mandatory')
sc800t3VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3VersionIndex.setStatus('mandatory')
sc800t3ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ActiveFirmwareRev.setStatus('mandatory')
sc800t3StandbyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3StandbyFirmwareRev.setStatus('mandatory')
sc800t3StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3StoredFirmwareStatus.setStatus('mandatory')
sc800t3SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3SwitchActiveFirmware.setStatus('mandatory')
sc800t3DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DownloadingMode.setStatus('mandatory')
sc800t3EraseFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3EraseFlash.setStatus('mandatory')
sc800t3ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1), )
if mibBuilder.loadTexts: sc800t3ChannelConfigTable.setStatus('mandatory')
sc800t3ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3ChannelConfigIndex"))
if mibBuilder.loadTexts: sc800t3ChannelConfigEntry.setStatus('mandatory')
sc800t3ChannelConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ChannelConfigIndex.setStatus('mandatory')
sc800t3ForcedDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsDte", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3ForcedDCE.setStatus('mandatory')
sc800t3ChannelDTEtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3ChannelDTEtest.setStatus('mandatory')
sc800t3DTELoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTELoopTimeout.setStatus('mandatory')
sc800t3NetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2), )
if mibBuilder.loadTexts: sc800t3NetworkConfigTable.setStatus('mandatory')
sc800t3NetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3NetworkConfigIndex"))
if mibBuilder.loadTexts: sc800t3NetworkConfigEntry.setStatus('mandatory')
sc800t3NetworkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NetworkConfigIndex.setStatus('mandatory')
sc800t3NetworkFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m13", 1), ("cbitParity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkFrameType.setStatus('mandatory')
sc800t3NetworkTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("receive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkTransmitClockSource.setStatus('mandatory')
sc800t3NetworkAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkAISLoopdown.setStatus('mandatory')
sc800t3NetworkLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("longCable", 1), ("shortCable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkLineType.setStatus('mandatory')
sc800t3NetworkIdleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReceived", 1), ("received", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NetworkIdleStatus.setStatus('mandatory')
sc800t3NetworkTransmitIdleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkTransmitIdleStatus.setStatus('mandatory')
sc800t3NetworkSesBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thresone", 1), ("thresseven", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkSesBERThreshold.setStatus('mandatory')
sc800t3InbandLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3InbandLoopback.setStatus('mandatory')
sc800t3DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1), )
if mibBuilder.loadTexts: sc800t3DiagTable.setStatus('mandatory')
sc800t3DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3DiagIndex"))
if mibBuilder.loadTexts: sc800t3DiagEntry.setStatus('mandatory')
sc800t3DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3DiagIndex.setStatus('mandatory')
sc800t3DiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("testTime30Secs", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTimeInfinite", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagTestDuration.setStatus('mandatory')
sc800t3InsertBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insertBitErrorNorm", 1), ("insertOneBitError", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3InsertBitError.setStatus('mandatory')
sc800t3DiagT3Test = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("t3NoTest", 1), ("t3LineLoopback", 2), ("t3PayLoadLoopback", 3), ("t3LocalLoopback", 4), ("t3LocalLoopbackST", 5), ("t3DTELoopback", 6), ("t3RemoteLineLoopback", 7), ("t3RemoteLineLoopbackST", 8), ("t3RemotePayload", 9), ("t3RemotePayloadST", 10), ("t3EndToEndST", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagT3Test.setStatus('mandatory')
sc800t3DiagTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3DiagTestResults.setStatus('mandatory')
sc800t3DiagResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetTestResult", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagResetTestResults.setStatus('mandatory')
sc800t3MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1), )
if mibBuilder.loadTexts: sc800t3MaintenanceTable.setStatus('mandatory')
sc800t3MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3MaintenanceIndex"))
if mibBuilder.loadTexts: sc800t3MaintenanceEntry.setStatus('mandatory')
sc800t3MaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3MaintenanceIndex.setStatus('mandatory')
sc800t3LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3LedStatus.setStatus('mandatory')
sc800t3SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3SoftReset.setStatus('mandatory')
sc800t3DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DefaultInit.setStatus('mandatory')
sc800t3ValidNearEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ValidNearEndIntervals.setStatus('mandatory')
sc800t3ValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ValidFarEndIntervals.setStatus('mandatory')
sc800t3ShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spectracomm", 1), ("twinPack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ShelfType.setStatus('mandatory')
sc800t3TwinPackPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("bottomOnly", 2), ("topOnly", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3TwinPackPowerSupply.setStatus('mandatory')
sc800t3TestAllLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allLedsON", 1), ("allLedsOFF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TestAllLeds.setStatus('mandatory')
sc800t3NearEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NearEndResetStats.setStatus('mandatory')
sc800t3FarEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3FarEndResetStats.setStatus('mandatory')
sc800t3NearEndStatLastInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndStatLastInitial.setStatus('mandatory')
sc800t3FarEndStatLastInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndStatLastInitial.setStatus('mandatory')
sc800t3NoResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 1))
sc800t3DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 2))
sc800t3PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 3))
sc800t3POSTFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 4))
sc800t3UnsolicitedTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 5))
sc800t3ConfigChange = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 6))
sc800t3TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 7))
sc800t3LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 8))
sc800t3OutOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 9))
sc800t3AIS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 10))
sc800t3DTEReadyLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 11))
sc800t3DTETXCLKLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 12))
sc800t3RXDNoTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 13))
sc800t3TXDNoTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 14))
sc800t3RemoteNotResponding = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 15))
sc800t3TopPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 16))
sc800t3BottomPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 17))
sc800t3DTETest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 18))
sc800t3RAI = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 19))
sc800t3ES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 20))
sc800t3SES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 21))
sc800t3SAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 22))
sc800t3UAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 23))
sc800t3CodeViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 24))
sc800t3ESline = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 25))
sc800t3AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1), )
if mibBuilder.loadTexts: sc800t3AlarmConfigTable.setStatus('mandatory')
sc800t3AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3AlarmConfigIndex"), (0, "GDC-SC800T3-MIB", "sc800t3AlarmConfigIdentifier"))
if mibBuilder.loadTexts: sc800t3AlarmConfigEntry.setStatus('mandatory')
sc800t3AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3AlarmConfigIndex.setStatus('mandatory')
sc800t3AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3AlarmConfigIdentifier.setStatus('mandatory')
sc800t3AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reportAll", 1), ("last1sec", 2), ("last1min", 3), ("last1hr", 4), ("reportWhen", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AlarmCountWindow.setStatus('mandatory')
sc800t3AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT10", 1), ("thresGT100", 2), ("thresGT1000", 3), ("thresGT10000", 4), ("thresGT100000", 5), ("thresGT1000000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AlarmCountThreshold.setStatus('mandatory')
sc800t3CurrentNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1), )
if mibBuilder.loadTexts: sc800t3CurrentNearEndTable.setStatus('mandatory')
sc800t3CurrentNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentNearEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentNearEndEntry.setStatus('mandatory')
sc800t3CurrentNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentNearEndIndex.setStatus('mandatory')
sc800t3CurrentNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentNearEndStat.setStatus('mandatory')
sc800t3CurrentFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3), )
if mibBuilder.loadTexts: sc800t3CurrentFarEndTable.setStatus('mandatory')
sc800t3CurrentFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentFarEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentFarEndEntry.setStatus('mandatory')
sc800t3CurrentFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentFarEndIndex.setStatus('mandatory')
sc800t3CurrentFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentFarEndStat.setStatus('mandatory')
sc800t3CurrentDayNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4), )
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndTable.setStatus('mandatory')
sc800t3CurrentDayNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentDayNearEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndEntry.setStatus('mandatory')
sc800t3CurrentDayNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndIndex.setStatus('mandatory')
sc800t3CurrentDayNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndStat.setStatus('mandatory')
sc800t3CurrentDayFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6), )
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndTable.setStatus('mandatory')
sc800t3CurrentDayFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentDayFarEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndEntry.setStatus('mandatory')
sc800t3CurrentDayFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndIndex.setStatus('mandatory')
sc800t3CurrentDayFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndStat.setStatus('mandatory')
sc800t3PreviousDayNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2), )
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndTable.setStatus('mandatory')
sc800t3PreviousDayNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousDayNearEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndEntry.setStatus('mandatory')
sc800t3PreviousDayNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndIndex.setStatus('mandatory')
sc800t3PreviousDayNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndStat.setStatus('mandatory')
sc800t3PreviousDayFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5), )
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndTable.setStatus('mandatory')
sc800t3PreviousDayFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousDayFarEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndEntry.setStatus('mandatory')
sc800t3PreviousDayFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndIndex.setStatus('mandatory')
sc800t3PreviousDayFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndStat.setStatus('mandatory')
sc800t3NearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7), )
if mibBuilder.loadTexts: sc800t3NearEndIntervalTable.setStatus('mandatory')
sc800t3NearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3NearEndIntervalIndex"), (0, "GDC-SC800T3-MIB", "sc800t3NearEndIntervalNumber"))
if mibBuilder.loadTexts: sc800t3NearEndIntervalEntry.setStatus('mandatory')
sc800t3NearEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalIndex.setStatus('mandatory')
sc800t3NearEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalNumber.setStatus('mandatory')
sc800t3NearEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalStats.setStatus('mandatory')
sc800t3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9), )
if mibBuilder.loadTexts: sc800t3FarEndIntervalTable.setStatus('mandatory')
sc800t3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3FarEndIntervalIndex"), (0, "GDC-SC800T3-MIB", "sc800t3FarEndIntervalNumber"))
if mibBuilder.loadTexts: sc800t3FarEndIntervalEntry.setStatus('mandatory')
sc800t3FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalIndex.setStatus('mandatory')
sc800t3FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalNumber.setStatus('mandatory')
sc800t3FarEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalStats.setStatus('mandatory')
sc800t3PreviousNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10), )
if mibBuilder.loadTexts: sc800t3PreviousNearEndTable.setStatus('mandatory')
sc800t3PreviousNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousNearEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousNearEndEntry.setStatus('mandatory')
sc800t3PreviousNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousNearEndIndex.setStatus('mandatory')
sc800t3PreviousNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousNearEndStat.setStatus('mandatory')
sc800t3PreviousFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11), )
if mibBuilder.loadTexts: sc800t3PreviousFarEndTable.setStatus('mandatory')
sc800t3PreviousFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousFarEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousFarEndEntry.setStatus('mandatory')
sc800t3PreviousFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousFarEndIndex.setStatus('mandatory')
sc800t3PreviousFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousFarEndStat.setStatus('mandatory')
sc800t3LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1), )
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigTable.setStatus('mandatory')
sc800t3LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigEntry.setStatus('mandatory')
sc800t3LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigIndex.setStatus('mandatory')
sc800t3OOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3OOF.setStatus('mandatory')
sc800t3AISLOCAL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AISLOCAL.setStatus('mandatory')
sc800t3TIMLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TIMLOS.setStatus('mandatory')
sc800t3TXDLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TXDLOS.setStatus('mandatory')
sc800t3RXDLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3RXDLOS.setStatus('mandatory')
sc800t3LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3LOS.setStatus('mandatory')
sc800t3TPSFAIL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TPSFAIL.setStatus('mandatory')
sc800t3BPSFAIL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3BPSFAIL.setStatus('mandatory')
sc800t3DTECLKLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTECLKLOS.setStatus('mandatory')
sc800t3DTERDYLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTERDYLOS.setStatus('mandatory')
sc800t3RAILOCAL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3RAILOCAL.setStatus('mandatory')
sc800t3THRESHESL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHESL.setStatus('mandatory')
sc800t3THRESHES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHES.setStatus('mandatory')
sc800t3THRESHSES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHSES.setStatus('mandatory')
sc800t3THRESHSAS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHSAS.setStatus('mandatory')
sc800t3THRESHUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHUAS.setStatus('mandatory')
sc800t3THRESHCV = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHCV.setStatus('mandatory')
mibBuilder.exportSymbols("GDC-SC800T3-MIB", sc800t3AlarmConfigIdentifier=sc800t3AlarmConfigIdentifier, sc800t3VersionEntry=sc800t3VersionEntry, sc800t3AIS=sc800t3AIS, sc800t3UnsolicitedTest=sc800t3UnsolicitedTest, sc800t3PreviousDayNearEndTable=sc800t3PreviousDayNearEndTable, sc800t3AlarmConfigEntry=sc800t3AlarmConfigEntry, sc800t3AlarmCountThreshold=sc800t3AlarmCountThreshold, sc800t3CurrentNearEndIndex=sc800t3CurrentNearEndIndex, sc800t3ChannelConfigIndex=sc800t3ChannelConfigIndex, sc800t3DTEReadyLoss=sc800t3DTEReadyLoss, sc800t3PreviousFarEndEntry=sc800t3PreviousFarEndEntry, sc800t3Configuration=sc800t3Configuration, sc800t3ForcedDCE=sc800t3ForcedDCE, sc800t3TwinPackPowerSupply=sc800t3TwinPackPowerSupply, sc800t3VersionIndex=sc800t3VersionIndex, sc800t3PreviousDayNearEndEntry=sc800t3PreviousDayNearEndEntry, sc800t3NearEndStatLastInitial=sc800t3NearEndStatLastInitial, sc800t3DefaultInit=sc800t3DefaultInit, sc800t3Diagnostics=sc800t3Diagnostics, sc800t3TXDNoTrans=sc800t3TXDNoTrans, sc800t3PowerUpAlm=sc800t3PowerUpAlm, sc800t3Performance=sc800t3Performance, sc800t3VersionTable=sc800t3VersionTable, sc800t3PreviousFarEndIndex=sc800t3PreviousFarEndIndex, sc800t3DownloadingMode=sc800t3DownloadingMode, sc800t3DiagEntry=sc800t3DiagEntry, sc800t3ChannelDTEtest=sc800t3ChannelDTEtest, sc800t3DiagResetTestResults=sc800t3DiagResetTestResults, sc800t3FarEndIntervalIndex=sc800t3FarEndIntervalIndex, sc800t3AISLOCAL=sc800t3AISLOCAL, sc800t3LocalAlarms=sc800t3LocalAlarms, sc800t3THRESHSES=sc800t3THRESHSES, sc800t3SAS=sc800t3SAS, sc800t3CurrentFarEndEntry=sc800t3CurrentFarEndEntry, sc800t3PreviousNearEndStat=sc800t3PreviousNearEndStat, sc800t3NetworkConfigTable=sc800t3NetworkConfigTable, sc800t3NearEndIntervalIndex=sc800t3NearEndIntervalIndex, sc800t3FarEndIntervalTable=sc800t3FarEndIntervalTable, sc800t3StoredFirmwareStatus=sc800t3StoredFirmwareStatus, sc800t3MIBversion=sc800t3MIBversion, sc800t3DTETest=sc800t3DTETest, sc800t3CurrentDayFarEndTable=sc800t3CurrentDayFarEndTable, sc800t3FarEndIntervalNumber=sc800t3FarEndIntervalNumber, sc800t3CurrentDayFarEndStat=sc800t3CurrentDayFarEndStat, sc800t3ValidNearEndIntervals=sc800t3ValidNearEndIntervals, sc800t3TPSFAIL=sc800t3TPSFAIL, ds3=ds3, sc800t3StandbyFirmwareRev=sc800t3StandbyFirmwareRev, sc800t3NetworkConfigEntry=sc800t3NetworkConfigEntry, sc800t3MaintenanceTable=sc800t3MaintenanceTable, sc800t3CurrentDayFarEndIndex=sc800t3CurrentDayFarEndIndex, sc800t3NetworkSesBERThreshold=sc800t3NetworkSesBERThreshold, sc800t3BPSFAIL=sc800t3BPSFAIL, sc800t3THRESHCV=sc800t3THRESHCV, sc800t3CurrentDayFarEndEntry=sc800t3CurrentDayFarEndEntry, sc800t3LOS=sc800t3LOS, sc800t3CurrentDayNearEndEntry=sc800t3CurrentDayNearEndEntry, sc800t3THRESHUAS=sc800t3THRESHUAS, sc800t3DiagIndex=sc800t3DiagIndex, sc800t3NetworkLineType=sc800t3NetworkLineType, sc800t3OutOfFrame=sc800t3OutOfFrame, sc800t3NearEndIntervalEntry=sc800t3NearEndIntervalEntry, sc800t3FarEndResetStats=sc800t3FarEndResetStats, sc800t3Version=sc800t3Version, sc800t3NearEndIntervalTable=sc800t3NearEndIntervalTable, sc800t3TestAllLeds=sc800t3TestAllLeds, sc800t3CurrentNearEndTable=sc800t3CurrentNearEndTable, sc800t3ConfigChange=sc800t3ConfigChange, sc800t3PreviousDayFarEndTable=sc800t3PreviousDayFarEndTable, sc800t3DiagTestResults=sc800t3DiagTestResults, sc800t3SwitchActiveFirmware=sc800t3SwitchActiveFirmware, sc800t3AlarmConfig=sc800t3AlarmConfig, sc800t3NoResponse=sc800t3NoResponse, sc800t3TopPowerSupplyFail=sc800t3TopPowerSupplyFail, sc800t3LocalAlarmConfigIndex=sc800t3LocalAlarmConfigIndex, sc800t3DTERDYLOS=sc800t3DTERDYLOS, sc800t3Alarms=sc800t3Alarms, sc800t3RXDLOS=sc800t3RXDLOS, sc800t3RXDNoTrans=sc800t3RXDNoTrans, sc800t3NetworkIdleStatus=sc800t3NetworkIdleStatus, sc800t3NetworkTransmitIdleStatus=sc800t3NetworkTransmitIdleStatus, sc800t3ChannelConfigTable=sc800t3ChannelConfigTable, sc800t3SES=sc800t3SES, sc800t3DiagTable=sc800t3DiagTable, sc800t3=sc800t3, sc800t3NearEndResetStats=sc800t3NearEndResetStats, sc800t3ActiveFirmwareRev=sc800t3ActiveFirmwareRev, sc800t3InbandLoopback=sc800t3InbandLoopback, sc800t3ESline=sc800t3ESline, sc800t3DTELoopTimeout=sc800t3DTELoopTimeout, sc800t3TIMLOS=sc800t3TIMLOS, sc800t3FarEndIntervalStats=sc800t3FarEndIntervalStats, sc800t3RAILOCAL=sc800t3RAILOCAL, sc800t3Maintenance=sc800t3Maintenance, sc800t3NetworkTransmitClockSource=sc800t3NetworkTransmitClockSource, sc800t3ChannelConfigEntry=sc800t3ChannelConfigEntry, sc800t3AlarmConfigTable=sc800t3AlarmConfigTable, sc800t3DiagT3Test=sc800t3DiagT3Test, sc800t3PreviousFarEndStat=sc800t3PreviousFarEndStat, sc800t3NearEndIntervalNumber=sc800t3NearEndIntervalNumber, sc800t3TimingLoss=sc800t3TimingLoss, sc800t3CurrentFarEndTable=sc800t3CurrentFarEndTable, sc800t3BottomPowerSupplyFail=sc800t3BottomPowerSupplyFail, sc800t3ValidFarEndIntervals=sc800t3ValidFarEndIntervals, sc800t3PreviousNearEndEntry=sc800t3PreviousNearEndEntry, sc800t3UAS=sc800t3UAS, sc800t3CodeViolations=sc800t3CodeViolations, sc800t3InsertBitError=sc800t3InsertBitError, sc800t3AlarmConfigIndex=sc800t3AlarmConfigIndex, sc800t3LedStatus=sc800t3LedStatus, sc800t3FarEndStatLastInitial=sc800t3FarEndStatLastInitial, sc800t3PreviousDayNearEndStat=sc800t3PreviousDayNearEndStat, sc800t3OOF=sc800t3OOF, sc800t3ES=sc800t3ES, sc800t3NearEndIntervalStats=sc800t3NearEndIntervalStats, sc800t3CurrentDayNearEndTable=sc800t3CurrentDayNearEndTable, sc800t3ShelfType=sc800t3ShelfType, sc800t3POSTFail=sc800t3POSTFail, sc800t3THRESHESL=sc800t3THRESHESL, sc800t3PreviousNearEndTable=sc800t3PreviousNearEndTable, sc800t3NetworkAISLoopdown=sc800t3NetworkAISLoopdown, sc800t3NetworkConfigIndex=sc800t3NetworkConfigIndex, sc800t3MaintenanceEntry=sc800t3MaintenanceEntry, sc800t3CurrentDayNearEndStat=sc800t3CurrentDayNearEndStat, sc800t3LocalAlarmConfigEntry=sc800t3LocalAlarmConfigEntry, sc800t3PreviousDayFarEndEntry=sc800t3PreviousDayFarEndEntry, sc800t3LossOfSignal=sc800t3LossOfSignal, sc800t3FarEndIntervalEntry=sc800t3FarEndIntervalEntry, sc800t3PreviousDayFarEndStat=sc800t3PreviousDayFarEndStat, sc800t3PreviousNearEndIndex=sc800t3PreviousNearEndIndex, sc800t3CurrentFarEndIndex=sc800t3CurrentFarEndIndex, sc800t3PreviousDayNearEndIndex=sc800t3PreviousDayNearEndIndex, sc800t3NetworkFrameType=sc800t3NetworkFrameType, sc800t3AlarmCountWindow=sc800t3AlarmCountWindow, sc800t3CurrentFarEndStat=sc800t3CurrentFarEndStat, sc800t3MaintenanceIndex=sc800t3MaintenanceIndex, sc800t3DTECLKLOS=sc800t3DTECLKLOS, sc800t3DiagRxErrAlm=sc800t3DiagRxErrAlm, sc800t3RAI=sc800t3RAI, sc800t3DTETXCLKLoss=sc800t3DTETXCLKLoss, sc800t3THRESHSAS=sc800t3THRESHSAS, sc800t3SoftReset=sc800t3SoftReset, sc800t3THRESHES=sc800t3THRESHES, sc800t3CurrentDayNearEndIndex=sc800t3CurrentDayNearEndIndex, sc800t3PreviousFarEndTable=sc800t3PreviousFarEndTable, sc800t3LocalAlarmConfigTable=sc800t3LocalAlarmConfigTable, sc800t3DiagTestDuration=sc800t3DiagTestDuration, sc800t3RemoteNotResponding=sc800t3RemoteNotResponding, sc800t3CurrentNearEndStat=sc800t3CurrentNearEndStat, sc800t3TXDLOS=sc800t3TXDLOS, sc800t3EraseFlash=sc800t3EraseFlash, sc800t3PreviousDayFarEndIndex=sc800t3PreviousDayFarEndIndex, sc800t3CurrentNearEndEntry=sc800t3CurrentNearEndEntry)
