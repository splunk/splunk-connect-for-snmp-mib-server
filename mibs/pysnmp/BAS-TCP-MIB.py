#
# PySNMP MIB module BAS-TCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
BasLogicalPortId, BasInterfaceId, basAliasTcp, BasSlotId, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasInterfaceId", "basAliasTcp", "BasSlotId", "BasChassisId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, IpAddress, Bits, Unsigned32, iso, Counter32, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "IpAddress", "Bits", "Unsigned32", "iso", "Counter32", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
basAliasTcpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1))
if mibBuilder.loadTexts: basAliasTcpMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basAliasTcpMib.setOrganization('Broadband Access Systems')
basTcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1))
basTcpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1), )
if mibBuilder.loadTexts: basTcpTable.setStatus('current')
basTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1), ).setIndexNames((0, "BAS-TCP-MIB", "basTcpChassis"), (0, "BAS-TCP-MIB", "basTcpSlot"), (0, "BAS-TCP-MIB", "basTcpIf"), (0, "BAS-TCP-MIB", "basTcpLPort"))
if mibBuilder.loadTexts: basTcpEntry.setStatus('current')
basTcpRtoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpRtoAlgorithm.setStatus('current')
basTcpRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 2), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpRtoMin.setStatus('current')
basTcpRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpRtoMax.setStatus('current')
basTcpMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpMaxConn.setStatus('current')
basTcpActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpActiveOpens.setStatus('current')
basTcpPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpPassiveOpens.setStatus('current')
basTcpAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpAttemptFails.setStatus('current')
basTcpEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpEstabResets.setStatus('current')
basTcpCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpCurrEstab.setStatus('current')
basTcpInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpInSegs.setStatus('current')
basTcpOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpOutSegs.setStatus('current')
basTcpRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpRetransSegs.setStatus('current')
basTcpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 13), BasChassisId())
if mibBuilder.loadTexts: basTcpChassis.setStatus('current')
basTcpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 14), BasSlotId())
if mibBuilder.loadTexts: basTcpSlot.setStatus('current')
basTcpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 15), BasInterfaceId())
if mibBuilder.loadTexts: basTcpIf.setStatus('current')
basTcpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 1, 1, 16), BasLogicalPortId())
if mibBuilder.loadTexts: basTcpLPort.setStatus('current')
basTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2), )
if mibBuilder.loadTexts: basTcpConnTable.setStatus('current')
basTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1), ).setIndexNames((0, "BAS-TCP-MIB", "basTcpConnChassis"), (0, "BAS-TCP-MIB", "basTcpConnSlot"), (0, "BAS-TCP-MIB", "basTcpConnIf"), (0, "BAS-TCP-MIB", "basTcpConnLPort"), (0, "BAS-TCP-MIB", "basTcpConnLocalAddress"), (0, "BAS-TCP-MIB", "basTcpConnLocalPort"), (0, "BAS-TCP-MIB", "basTcpConnRemAddress"), (0, "BAS-TCP-MIB", "basTcpConnRemPort"))
if mibBuilder.loadTexts: basTcpConnEntry.setStatus('current')
basTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basTcpConnState.setStatus('current')
basTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpConnLocalAddress.setStatus('current')
basTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpConnLocalPort.setStatus('current')
basTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpConnRemAddress.setStatus('current')
basTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpConnRemPort.setStatus('current')
basTcpConnChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basTcpConnChassis.setStatus('current')
basTcpConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basTcpConnSlot.setStatus('current')
basTcpConnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basTcpConnIf.setStatus('current')
basTcpConnLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 2, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basTcpConnLPort.setStatus('current')
basTcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3), )
if mibBuilder.loadTexts: basTcpStatsTable.setStatus('current')
basTcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1), ).setIndexNames((0, "BAS-TCP-MIB", "basTcpStatsChassis"), (0, "BAS-TCP-MIB", "basTcpStatsSlot"), (0, "BAS-TCP-MIB", "basTcpStatsIf"), (0, "BAS-TCP-MIB", "basTcpStatsLPort"))
if mibBuilder.loadTexts: basTcpStatsEntry.setStatus('current')
basTcpInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpInErrs.setStatus('current')
basTcpOutRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basTcpOutRsts.setStatus('current')
basTcpStatsChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basTcpStatsChassis.setStatus('current')
basTcpStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basTcpStatsSlot.setStatus('current')
basTcpStatsIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basTcpStatsIf.setStatus('current')
basTcpStatsLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 3, 1, 1, 3, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basTcpStatsLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-TCP-MIB", basTcpConnState=basTcpConnState, basTcpCurrEstab=basTcpCurrEstab, basAliasTcpMib=basAliasTcpMib, basTcpConnSlot=basTcpConnSlot, basTcpAttemptFails=basTcpAttemptFails, basTcpRtoMax=basTcpRtoMax, basTcpRtoAlgorithm=basTcpRtoAlgorithm, basTcpConnRemPort=basTcpConnRemPort, basTcpTable=basTcpTable, basTcpActiveOpens=basTcpActiveOpens, basTcpEstabResets=basTcpEstabResets, basTcpConnRemAddress=basTcpConnRemAddress, basTcpConnEntry=basTcpConnEntry, basTcpConnLPort=basTcpConnLPort, basTcpIf=basTcpIf, basTcpStatsSlot=basTcpStatsSlot, basTcpInErrs=basTcpInErrs, basTcpPassiveOpens=basTcpPassiveOpens, basTcpStatsIf=basTcpStatsIf, basTcpStatsEntry=basTcpStatsEntry, basTcpStatsChassis=basTcpStatsChassis, basTcpSlot=basTcpSlot, basTcpInSegs=basTcpInSegs, basTcpConnTable=basTcpConnTable, basTcpConnLocalAddress=basTcpConnLocalAddress, basTcpMaxConn=basTcpMaxConn, basTcpLPort=basTcpLPort, basTcpStatsLPort=basTcpStatsLPort, basTcpRetransSegs=basTcpRetransSegs, basTcpObjects=basTcpObjects, basTcpStatsTable=basTcpStatsTable, basTcpRtoMin=basTcpRtoMin, PYSNMP_MODULE_ID=basAliasTcpMib, basTcpOutSegs=basTcpOutSegs, basTcpConnChassis=basTcpConnChassis, basTcpConnIf=basTcpConnIf, basTcpEntry=basTcpEntry, basTcpConnLocalPort=basTcpConnLocalPort, basTcpChassis=basTcpChassis, basTcpOutRsts=basTcpOutRsts)
