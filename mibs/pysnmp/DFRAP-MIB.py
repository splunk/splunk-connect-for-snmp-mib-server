#
# PySNMP MIB module DFRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, internet, ModuleIdentity, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, Bits, iso, NotificationType, NotificationType, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "internet", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "Bits", "iso", "NotificationType", "NotificationType", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sync = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
dfrap = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6))
dfrapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 1))
dfrapSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 1, 1))
dfrapSysType = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysType.setStatus('mandatory')
dfrapSysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysSoftRev.setStatus('mandatory')
dfrapSysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysHardRev.setStatus('mandatory')
dfrapSysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumT1Installed.setStatus('mandatory')
dfrapSysNumDdsInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumDdsInstalled.setStatus('mandatory')
dfrapSysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumDteInstalled.setStatus('mandatory')
dfrapSysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumMaintInstalled.setStatus('mandatory')
dfrapSysName = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapSysName.setStatus('mandatory')
dfrapSysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysSerialNo.setStatus('mandatory')
dfrapSysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapSysResetNode.setStatus('mandatory')
dfrapSysAmtMemoryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysAmtMemoryInstalled.setStatus('mandatory')
dfrapSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapSysLocation.setStatus('mandatory')
dfrapSysContact = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapSysContact.setStatus('mandatory')
dfrapSysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapSysPrompt.setStatus('mandatory')
dfrapSysBootRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysBootRev.setStatus('mandatory')
dfrapSysFeatureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 1, 2))
dfrapSysSLIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysSLIPSupported.setStatus('mandatory')
dfrapSysPPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysPPPSupported.setStatus('mandatory')
dfrapSysRDOSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysRDOSupported.setStatus('mandatory')
dfrapSysETHSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysETHSupported.setStatus('mandatory')
dfrapSysTKRSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysTKRSupported.setStatus('mandatory')
dfrapSysExtTimSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysExtTimSupported.setStatus('mandatory')
dfrapSysBRISupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysBRISupported.setStatus('mandatory')
dfrapSysSelDTESupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysSelDTESupported.setStatus('mandatory')
dfrapSysMLSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysMLSupported.setStatus('mandatory')
dfrapSysNumDlcisSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumDlcisSupported.setStatus('mandatory')
dfrapSysLTFNumDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysLTFNumDlcis.setStatus('mandatory')
dfrapSysLTFNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysLTFNumProtocols.setStatus('mandatory')
dfrapSysNumUserProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumUserProtocols.setStatus('mandatory')
dfrapSysNumSnmpMgrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumSnmpMgrs.setStatus('mandatory')
dfrapSysNumDlciNames = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapSysNumDlciNames.setStatus('mandatory')
dfrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2))
dfrapCfgMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1))
dfrapCfgIpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1))
dfrapCfgIpMyIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpMyIP.setStatus('mandatory')
dfrapCfgIpPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpPeerIP.setStatus('mandatory')
dfrapCfgIpMask = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpMask.setStatus('mandatory')
dfrapCfgIpMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpMaxMTU.setStatus('mandatory')
dfrapCfgIpChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("slip-port", 2), ("in-band-dlci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgIpChannel.setStatus('mandatory')
dfrapCfgIpTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpTelnetEnable.setStatus('mandatory')
dfrapCfgIpTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10, 30, 60))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2), ("autologout-at-3-minutes", 3), ("autologout-at-5-minutes", 5), ("autologout-at-10-minutes", 10), ("autologout-at-30-minutes", 30), ("autologout-at-60-minutes", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgIpTelnetAutoLogOut.setStatus('mandatory')
dfrapCfgTftpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2))
dfrapCfgTftpInitiate = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgTftpInitiate.setStatus('mandatory')
dfrapCfgTftpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpIpAddress.setStatus('mandatory')
dfrapCfgTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpFilename.setStatus('mandatory')
dfrapCfgTftpInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("dds-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpInterface.setStatus('mandatory')
dfrapCfgTftpDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpDlci.setStatus('mandatory')
dfrapCfgTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("transferring", 3), ("programming", 4), ("transfer-aborted", 5), ("host-no-reply", 6), ("file-not-found", 7), ("invalid-file", 8), ("corrupt-file", 9), ("successful", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpStatus.setStatus('mandatory')
dfrapCfgTftpNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgTftpNumBytes.setStatus('mandatory')
dfrapCfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3))
dfrapCfgSnmpFrTrap = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpFrTrap.setStatus('mandatory')
dfrapCfgSnmpTrapMuting = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpTrapMuting.setStatus('mandatory')
dfrapCfgSnmpUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpUtilTrapEnable.setStatus('mandatory')
dfrapCfgSnmpMgrClearN = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgSnmpMgrClearN.setStatus('mandatory')
dfrapCfgSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2), )
if mibBuilder.loadTexts: dfrapCfgSnmpMgrTable.setStatus('mandatory')
dfrapCfgSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgSnmpMgrIndex"))
if mibBuilder.loadTexts: dfrapCfgSnmpMgrEntry.setStatus('mandatory')
dfrapCfgSnmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgSnmpMgrIndex.setStatus('mandatory')
dfrapCfgSnmpMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpMgrIP.setStatus('mandatory')
dfrapCfgSnmpMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("dds-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpMgrInterface.setStatus('mandatory')
dfrapCfgSnmpMgrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSnmpMgrDlci.setStatus('mandatory')
dfrapCfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4))
dfrapCfgCommMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt100", 1), ("slip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommMode.setStatus('mandatory')
dfrapCfgCommBaud = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommBaud.setStatus('mandatory')
dfrapCfgCommDataBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommDataBits.setStatus('mandatory')
dfrapCfgCommStopBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommStopBits.setStatus('mandatory')
dfrapCfgCommParity = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommParity.setStatus('mandatory')
dfrapCfgCommFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("no-flow-control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCommFlowCtrl.setStatus('mandatory')
dfrapCfgFrDLCITable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 5))
dfrapCfgFrDLCIMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("local", 2), ("remote", 3), ("bidirectional", 4), ("piggyback", 5), ("fixed-dce", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrDLCIMode.setStatus('mandatory')
dfrapCfgFrDLCIValue = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrDLCIValue.setStatus('mandatory')
dfrapCfgFrDLCIEncap = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("rfc1490snap", 2), ("auto", 3), ("cisco", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrDLCIEncap.setStatus('mandatory')
dfrapCfgFrDLCIMgmtDE = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-DE-bit-0", 1), ("yes-DE-bit-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrDLCIMgmtDE.setStatus('mandatory')
dfrapCfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 2))
dfrapCfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("network", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppClockSource.setStatus('mandatory')
dfrapCfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppCircuitId.setStatus('mandatory')
dfrapCfgAppType = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("frame-relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppType.setStatus('mandatory')
dfrapCfgAppFormat = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbo", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppFormat.setStatus('mandatory')
dfrapCfgAppLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppLpbkTimeout.setStatus('mandatory')
dfrapCfgAppPerfBuffLimit = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgAppPerfBuffLimit.setStatus('mandatory')
dfrapCfgDdsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 3))
dfrapCfgDdsLoopRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifty-six", 1), ("sixty-four", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDdsLoopRate.setStatus('mandatory')
dfrapCfgDdsBPVThresholding = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thresholding-at-10E-4", 1), ("disable-thresholding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDdsBPVThresholding.setStatus('mandatory')
dfrapCfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 4))
dfrapCfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("intf-v35", 3), ("intf-rs449", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgDteIntfType.setStatus('mandatory')
dfrapCfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteClockMode.setStatus('mandatory')
dfrapCfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteTiming.setStatus('mandatory')
dfrapCfgDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteRts.setStatus('mandatory')
dfrapCfgDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteDtr.setStatus('mandatory')
dfrapCfgDteDcdOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteDcdOutput.setStatus('mandatory')
dfrapCfgDteDsrOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteDsrOutput.setStatus('mandatory')
dfrapCfgDteCtsOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgDteCtsOutput.setStatus('mandatory')
dfrapCfgFrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 5))
dfrapCfgFrAddrLen = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twobytes", 1), ("threebytes", 2), ("fourbytes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrAddrLen.setStatus('mandatory')
dfrapCfgFrCrcMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("passthru", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrCrcMode.setStatus('mandatory')
dfrapCfgFrLmiType = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("annexd", 1), ("annexa", 2), ("type1", 3), ("autosense", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrLmiType.setStatus('mandatory')
dfrapCfgFrLmiInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrLmiInactivityTimeout.setStatus('mandatory')
dfrapCfgFrLmiKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrLmiKeepaliveTimeout.setStatus('mandatory')
dfrapCfgFrAddrResMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("arp", 2), ("inarp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrAddrResMode.setStatus('mandatory')
dfrapCfgFrAddrResDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("ddsmulti", 3), ("dtemulti", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrAddrResDlcis.setStatus('mandatory')
dfrapCfgFrAddrResInarpTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrAddrResInarpTimer.setStatus('mandatory')
dfrapCfgFrLmiFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrLmiFullStatus.setStatus('mandatory')
dfrapCfgVnipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 6))
dfrapCfgVnipMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("dte", 2), ("dds", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgVnipMode.setStatus('mandatory')
dfrapCfgVnipInitTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgVnipInitTimer.setStatus('mandatory')
dfrapCfgVnipKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgVnipKeepAliveTimer.setStatus('mandatory')
dfrapCfgVnipInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgVnipInactivityTimer.setStatus('mandatory')
dfrapCfgVnipTransitDelayFrequency = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgVnipTransitDelayFrequency.setStatus('mandatory')
dfrapCfgTransitDelayTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20), )
if mibBuilder.loadTexts: dfrapCfgTransitDelayTable.setStatus('mandatory')
dfrapCfgTransitDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgTransitDelayInterface"), (0, "DFRAP-MIB", "dfrapCfgTransitDelayDlciValue"))
if mibBuilder.loadTexts: dfrapCfgTransitDelayEntry.setStatus('mandatory')
dfrapCfgTransitDelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("dds-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTransitDelayInterface.setStatus('mandatory')
dfrapCfgTransitDelayDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTransitDelayDlciValue.setStatus('mandatory')
dfrapCfgTransitDelayNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTransitDelayNumHops.setStatus('mandatory')
dfrapCfgTransitDelayRcvSummaryCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rsc", 1), ("disable-rsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTransitDelayRcvSummaryCancel.setStatus('mandatory')
dfrapCfgTransitDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTransitDelayThreshold.setStatus('mandatory')
dfrapCfgTDDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 21), )
if mibBuilder.loadTexts: dfrapCfgTDDeleteTable.setStatus('mandatory')
dfrapCfgTDDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 21, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgTDDeleteInterface"))
if mibBuilder.loadTexts: dfrapCfgTDDeleteEntry.setStatus('mandatory')
dfrapCfgTDDeleteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("dds-interface", 2))))
if mibBuilder.loadTexts: dfrapCfgTDDeleteInterface.setStatus('mandatory')
dfrapCfgTDDeleteDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 21, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgTDDeleteDlciValue.setStatus('mandatory')
dfrapCfgTransitDelayTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgTransitDelayTableClear.setStatus('mandatory')
dfrapCfgFrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 7))
dfrapCfgFrPerfDlciNamesTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1), )
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesTable.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgFrPerfDlciNamesDlciValue"))
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesEntry.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesDlciValue.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesDlciName.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesCirValue.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesCirType.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesUtilThreshold.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesEirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesEirValue.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesDelete.setStatus('mandatory')
dfrapCfgFrPerfTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 3))
dfrapCfgFrPerfTimersSTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfTimersSTInterval.setStatus('mandatory')
dfrapCfgFrPerfTimersLTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfTimersLTInterval.setStatus('mandatory')
dfrapCfgFrPerfUserProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 4), )
if mibBuilder.loadTexts: dfrapCfgFrPerfUserProtocolsTable.setStatus('mandatory')
dfrapCfgFrPerfUserProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 4, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgFrPerfUserProtocolsIndex"))
if mibBuilder.loadTexts: dfrapCfgFrPerfUserProtocolsEntry.setStatus('mandatory')
dfrapCfgFrPerfUserProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfUserProtocolsIndex.setStatus('mandatory')
dfrapCfgFrPerfUserProtocolsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfUserProtocolsPortNum.setStatus('mandatory')
dfrapCfgFrPerfLTDlciFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 5), )
if mibBuilder.loadTexts: dfrapCfgFrPerfLTDlciFilterTable.setStatus('mandatory')
dfrapCfgFrPerfLTDlciFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 5, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgFrPerfLTDlciFilterIndex"))
if mibBuilder.loadTexts: dfrapCfgFrPerfLTDlciFilterEntry.setStatus('mandatory')
dfrapCfgFrPerfLTDlciFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTDlciFilterIndex.setStatus('mandatory')
dfrapCfgFrPerfLTDlciFilterDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTDlciFilterDlciNum.setStatus('mandatory')
dfrapCfgFrPerfLTProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 6), )
if mibBuilder.loadTexts: dfrapCfgFrPerfLTProtocolFilterTable.setStatus('mandatory')
dfrapCfgFrPerfLTProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 6, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapCfgFrPerfLTProtocolFilterIndex"))
if mibBuilder.loadTexts: dfrapCfgFrPerfLTProtocolFilterEntry.setStatus('mandatory')
dfrapCfgFrPerfLTProtocolFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTProtocolFilterIndex.setStatus('mandatory')
dfrapCfgFrPerfLTProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, -1))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("tftp-tcp-ip-tx-bc", 11), ("tftp-tcp-ip-rx-bc", 12), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("snmp-tcp-ip-tx-bc", 17), ("snmp-tcp-ip-rx-bc", 18), ("snmptrap-tcp-ip-tx-bc", 19), ("snmptrap-tcp-ip-rx-bc", 20), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("ftp-udp-ip-tx-bc", 23), ("ftp-udp-ip-rx-bc", 24), ("telnet-udp-ip-tx-bc", 25), ("telnet-udp-ip-rx-bc", 26), ("smtp-udp-ip-tx-bc", 27), ("smtp-udp-ip-rx-bc", 28), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("http-udp-ip-tx-bc", 31), ("http-udp-ip-rx-bc", 32), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172), ("delete-entry", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTProtocolFilterProtocol.setStatus('mandatory')
dfrapCfgFrPerfDlciDefaultUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciDefaultUtilThreshold.setStatus('mandatory')
dfrapCfgFrPerfDlciUtilDuration = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciUtilDuration.setStatus('mandatory')
dfrapCfgFrPerfDlciNamesTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-table", 1), ("clear-table-keep-stats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfDlciNamesTableClear.setStatus('mandatory')
dfrapCfgFrPerfUserProtocolsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfUserProtocolsTableClear.setStatus('mandatory')
dfrapCfgFrPerfLTDlciFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTDlciFilterTableClear.setStatus('mandatory')
dfrapCfgFrPerfLTProtocolFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfLTProtocolFilterTableClear.setStatus('mandatory')
dfrapCfgFrPerfUnprovDlcisDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete-unprov", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgFrPerfUnprovDlcisDelete.setStatus('mandatory')
dfrapCfgSecurityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 2, 8))
dfrapCfgTelnetCliLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTelnetCliLcdPassword.setStatus('mandatory')
dfrapCfgTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgTftpPassword.setStatus('mandatory')
dfrapCfgCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgCliPassword.setStatus('mandatory')
dfrapCfgLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgLcdPassword.setStatus('mandatory')
dfrapCfgGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgGetCommunityString.setStatus('mandatory')
dfrapCfgSetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgSetCommunityString.setStatus('mandatory')
dfrapCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgLock.setStatus('mandatory')
dfrapCfgLockID = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgLockID.setStatus('mandatory')
dfrapCfgID = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapCfgID.setStatus('mandatory')
dfrapCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("datarate-density-conflict", 3), ("bandwidth-allocation-error", 4), ("general-error", 5), ("timeout", 6), ("aborted-by-user", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgStatus.setStatus('mandatory')
dfrapCfgUnlock = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("un-lock", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgUnlock.setStatus('mandatory')
dfrapCfgUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapCfgUpdate.setStatus('mandatory')
dfrapDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 3))
dfrapDiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 3, 1))
dfrapDiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagUnitLocLoop.setStatus('mandatory')
dfrapDiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapDiagUnitReset.setStatus('mandatory')
dfrapDiagUnitTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagUnitTimeRemaining.setStatus('mandatory')
dfrapDiagDdsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 3, 2))
dfrapDiagDdsLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagDdsLclLpbk.setStatus('mandatory')
dfrapDiagDdsRmtLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-loop-from-remote", 1), ("simplex-current-loop", 2), ("non-latching-loop", 3), ("latching-loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagDdsRmtLpbk.setStatus('mandatory')
dfrapDiagDdsTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagDdsTimeRemaining.setStatus('mandatory')
dfrapDiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 3, 3))
dfrapDiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagDteLclLpbk.setStatus('mandatory')
dfrapDiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v54-received", 1), ("v54-not-received", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagDteV54Lpbk.setStatus('mandatory')
dfrapDiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapDiagDteRmtV54Lpbk.setStatus('mandatory')
dfrapDiagDteTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 3, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagDteTimeRemaining.setStatus('mandatory')
dfrapDiagBertTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 3, 5))
dfrapDiagBertState = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 3), ("inject-error", 4), ("clear-error", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapDiagBertState.setStatus('mandatory')
dfrapDiagBertStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagBertStatus.setStatus('mandatory')
dfrapDiagBertErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagBertErrors.setStatus('mandatory')
dfrapDiagBertErrSec = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagBertErrSec.setStatus('mandatory')
dfrapDiagBertTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagBertTimeElaps.setStatus('mandatory')
dfrapDiagBertResyncs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagBertResyncs.setStatus('mandatory')
dfrapDiagBertPattern = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("five11-pattern", 1), ("qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagBertPattern.setStatus('mandatory')
dfrapDiagVnipTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 3, 6), )
if mibBuilder.loadTexts: dfrapDiagVnipTable.setStatus('mandatory')
dfrapDiagVnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapDiagVnipInterface"), (0, "DFRAP-MIB", "dfrapDiagVnipIndex"))
if mibBuilder.loadTexts: dfrapDiagVnipEntry.setStatus('mandatory')
dfrapDiagVnipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVnipInterface.setStatus('mandatory')
dfrapDiagVnipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVnipIndex.setStatus('mandatory')
dfrapDiagVnipDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagVnipDlci.setStatus('mandatory')
dfrapDiagVnipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDiagVnipIpAddr.setStatus('mandatory')
dfrapDiagVLOOP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapDiagVLOOP.setStatus('mandatory')
dfrapDiagVBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapDiagVBERT.setStatus('mandatory')
dfrapDiagVBERTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVBERTRate.setStatus('mandatory')
dfrapDiagVBERTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("sixty-four-byte", 64), ("one-twenty-eight-byte", 128), ("two-fifty-six-byte", 256), ("five-hundred-twelve-byte", 512), ("thousand-twenty-four-byte", 1024), ("two-thous-forty-eight-byte", 2048)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVBERTSize.setStatus('mandatory')
dfrapDiagVBERTPktPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero-percent", 1), ("twentyFive-percent", 2), ("fifty-percent", 3), ("seventyFive-percent", 4), ("oneHundred-percent", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVBERTPktPercent.setStatus('mandatory')
dfrapDiagVBERTTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfrapDiagVBERTTestPeriod.setStatus('mandatory')
dfrapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 4))
dfrapVnipTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 4, 2), )
if mibBuilder.loadTexts: dfrapVnipTopologyTable.setStatus('mandatory')
dfrapVnipTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapVnipTopologyInterface"), (0, "DFRAP-MIB", "dfrapVnipTopologyIndex"))
if mibBuilder.loadTexts: dfrapVnipTopologyEntry.setStatus('mandatory')
dfrapVnipTopologyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("dds-interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyInterface.setStatus('mandatory')
dfrapVnipTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyIndex.setStatus('mandatory')
dfrapVnipTopologyDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyDlci.setStatus('mandatory')
dfrapVnipTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyIpAddr.setStatus('mandatory')
dfrapVnipTopologyNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyNumHops.setStatus('mandatory')
dfrapVnipTopologyLocalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopologyLocalDlci.setStatus('mandatory')
dfrapVnipTopoTDNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoTDNumSamples.setStatus('mandatory')
dfrapVnipTopoTDAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoTDAvgDelay.setStatus('mandatory')
dfrapVnipTopoTDMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoTDMaxDelay.setStatus('mandatory')
dfrapVnipTopoTDMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoTDMinDelay.setStatus('mandatory')
dfrapVnipTopoTDLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoTDLastDelay.setStatus('mandatory')
dfrapVnipTopoVLOOPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVLOOPStatus.setStatus('mandatory')
dfrapVnipTopoVBERTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testing", 2), ("test-failed", 3), ("test-completed", 4), ("in-test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBERTStatus.setStatus('mandatory')
dfrapVnipTopoVBertTxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertTxDESetFrames.setStatus('mandatory')
dfrapVnipTopoVBertRxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertRxDESetFrames.setStatus('mandatory')
dfrapVnipTopoVBertTxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertTxDEClrFrames.setStatus('mandatory')
dfrapVnipTopoVBertRxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertRxDEClrFrames.setStatus('mandatory')
dfrapVnipTopoVBertTransitDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertTransitDelayMax.setStatus('mandatory')
dfrapVnipTopoVBertTransitDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertTransitDelayAvg.setStatus('mandatory')
dfrapVnipTopoVBertTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertTimeElapse.setStatus('mandatory')
dfrapVnipTopoVBertPerUtilCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertPerUtilCIR.setStatus('mandatory')
dfrapVnipTopoVBertPerUtilEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapVnipTopoVBertPerUtilEIR.setStatus('mandatory')
dfrapVnipTransitDelayClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-transit-delay", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapVnipTransitDelayClear.setStatus('mandatory')
dfrapLmiSourcing = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("passthrough", 2), ("status-enqs-to-dte", 3), ("status-enqs-to-dds", 4), ("status-rspns-to-dte", 5), ("status-rspns-to-dds", 6), ("disabled", 7), ("status-rspns-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapLmiSourcing.setStatus('mandatory')
dfrapVBertClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-vbert", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapVBertClear.setStatus('mandatory')
dfrapStatusMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 4, 3))
dfrapStatusMgmtChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("slip", 2), ("private-dlci", 3), ("piggyback-dlci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusMgmtChannel.setStatus('mandatory')
dfrapStatusMgmtInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("local-dte", 2), ("remote-wan", 3), ("local-and-remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusMgmtInterface.setStatus('mandatory')
dfrapStatusMgmtInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusMgmtInterfaceStatus.setStatus('mandatory')
dfrapStatusMgmtDefaultDLCINo = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusMgmtDefaultDLCINo.setStatus('mandatory')
dfrapStatusMgmtDefaultDLCIStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("dlci-active", 2), ("dlci-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusMgmtDefaultDLCIStatus.setStatus('mandatory')
dfrapStatusLmiAutosense = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("learned-annex-d", 3), ("learned-annex-a", 4), ("learned-type1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusLmiAutosense.setStatus('mandatory')
dfrapStatusDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 4, 7))
dfrapStatusDteMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteMode.setStatus('mandatory')
dfrapStatusDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteRts.setStatus('mandatory')
dfrapStatusDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteDtr.setStatus('mandatory')
dfrapStatusDteDcd = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteDcd.setStatus('mandatory')
dfrapStatusDteDsr = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteDsr.setStatus('mandatory')
dfrapStatusDteCts = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteCts.setStatus('mandatory')
dfrapStatusDdsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 4, 8))
dfrapStatusDdsLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("in-sync", 1), ("out-of-service", 2), ("out-of-frame", 3), ("bpv-threshold-failure", 4), ("loss-of-signal", 5), ("simplex-current-loopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDdsLineStatus.setStatus('mandatory')
dfrapStatusDdsLoopLength = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("loss-40-50db", 1), ("loss-39-44db", 2), ("loss-33-38db", 3), ("loss-27-32db", 4), ("loss-21-26db", 5), ("loss-15-20db", 6), ("loss-8-14db", 7), ("loss-1-7db", 8), ("loss-0db", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDdsLoopLength.setStatus('mandatory')
dfrapStatusLedTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 4, 4))
dfrapStatusDteModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-DTE-inactive", 1), ("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteModeLED.setStatus('mandatory')
dfrapStatusDteStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("greenLED-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteStatusLED.setStatus('mandatory')
dfrapStatusDteTxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-transmitting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteTxLED.setStatus('mandatory')
dfrapStatusDteRxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDteRxLED.setStatus('mandatory')
dfrapStatusDdsModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDdsModeLED.setStatus('mandatory')
dfrapStatusDdsStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-DDS-no-signal", 1), ("greenLED-normal", 2), ("yellowLED-remote-alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusDdsStatusLED.setStatus('mandatory')
dfrapStatusAllLEDs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapStatusAllLEDs.setStatus('mandatory')
dfrapPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5))
dfrapPerfMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2))
dfrapPerfMgmtIpIFStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 1))
dfrapPerfMgmtIpIFInOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIFInOctets.setStatus('mandatory')
dfrapPerfMgmtIpIFInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIFInErrors.setStatus('mandatory')
dfrapPerfMgmtIpIFOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIFOutOctets.setStatus('mandatory')
dfrapPerfMgmtIpIFOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIFOperStatus.setStatus('mandatory')
dfrapPerfMgmtIpIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2))
dfrapPerfMgmtIpIPInRcv = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInRcv.setStatus('mandatory')
dfrapPerfMgmtIpIPInHdrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInHdrErr.setStatus('mandatory')
dfrapPerfMgmtIpIPInAddrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInAddrErr.setStatus('mandatory')
dfrapPerfMgmtIpIPInProtUnk = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInProtUnk.setStatus('mandatory')
dfrapPerfMgmtIpIPInDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInDscrd.setStatus('mandatory')
dfrapPerfMgmtIpIPInDlvrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPInDlvrs.setStatus('mandatory')
dfrapPerfMgmtIpIPOutRqst = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPOutRqst.setStatus('mandatory')
dfrapPerfMgmtIpIPOutDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPOutDscrd.setStatus('mandatory')
dfrapPerfMgmtIpIPOutNoRt = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpIPOutNoRt.setStatus('mandatory')
dfrapPerfMgmtIpICMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3))
dfrapPerfMgmtIpICMPInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInMsgs.setStatus('mandatory')
dfrapPerfMgmtIpICMPInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInErrors.setStatus('mandatory')
dfrapPerfMgmtIpICMPInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInDestUnreachs.setStatus('mandatory')
dfrapPerfMgmtIpICMPInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInTimeExcds.setStatus('mandatory')
dfrapPerfMgmtIpICMPInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInParmProbs.setStatus('mandatory')
dfrapPerfMgmtIpICMPInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInRedirects.setStatus('mandatory')
dfrapPerfMgmtIpICMPInEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInEchos.setStatus('mandatory')
dfrapPerfMgmtIpICMPInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPInEchoReps.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutMsgs.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutErrors.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutDestUnreachs.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutParmProbs.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutRedirects.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutEchos.setStatus('mandatory')
dfrapPerfMgmtIpICMPOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpICMPOutEchoReps.setStatus('mandatory')
dfrapPerfMgmtIpUDPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 4))
dfrapPerfMgmtIpUDPInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpUDPInDatagrams.setStatus('mandatory')
dfrapPerfMgmtIpUDPOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpUDPOutDatagrams.setStatus('mandatory')
dfrapPerfMgmtIpUDPNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpUDPNoPorts.setStatus('mandatory')
dfrapPerfMgmtIpTCPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5))
dfrapPerfMgmtIpTCPActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPActiveOpens.setStatus('mandatory')
dfrapPerfMgmtIpTCPPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPPassiveOpens.setStatus('mandatory')
dfrapPerfMgmtIpTCPAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPAttemptFails.setStatus('mandatory')
dfrapPerfMgmtIpTCPCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPCurrEstab.setStatus('mandatory')
dfrapPerfMgmtIpTCPInSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPInSegs.setStatus('mandatory')
dfrapPerfMgmtIpTCPOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfMgmtIpTCPOutSegs.setStatus('mandatory')
dfrapPerfThruput = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 3))
class Index(Integer32):
    pass

dfrapPerfThruputPerIntfTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1), )
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfTable.setStatus('mandatory')
dfrapPerfThruputPerIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfThruputPerIntfIndex"))
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfEntry.setStatus('mandatory')
dfrapPerfThruputPerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dds", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfIndex.setStatus('mandatory')
dfrapPerfThruputPerIntfRxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfRxByteCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfTxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfTxByteCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfRxFrameCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfTxFrameCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfRxCrcErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfRxCrcErrCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfRxAbortCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfRxAbortCnt.setStatus('mandatory')
dfrapPerfThruputPerIntfRxBpvCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerIntfRxBpvCnt.setStatus('mandatory')
dfrapPerfThruputPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2), )
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTable.setStatus('mandatory')
dfrapPerfThruputPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfThruputPerDlciIndex"), (0, "DFRAP-MIB", "dfrapPerfThruputPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciEntry.setStatus('mandatory')
dfrapPerfThruputPerDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciIndex.setStatus('mandatory')
dfrapPerfThruputPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciValue.setStatus('mandatory')
dfrapPerfThruputPerDlciCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciCreateTime.setStatus('mandatory')
dfrapPerfThruputPerDlciChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciChangeTime.setStatus('mandatory')
dfrapPerfThruputPerDlciRxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxByte.setStatus('mandatory')
dfrapPerfThruputPerDlciTxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTxByte.setStatus('mandatory')
dfrapPerfThruputPerDlciRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxFrame.setStatus('mandatory')
dfrapPerfThruputPerDlciTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTxFrame.setStatus('mandatory')
dfrapPerfThruputPerDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxFecn.setStatus('mandatory')
dfrapPerfThruputPerDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxBecn.setStatus('mandatory')
dfrapPerfThruputPerDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxDe.setStatus('mandatory')
dfrapPerfThruputPerDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTxDe.setStatus('mandatory')
dfrapPerfThruputPerDlciRxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxThruput.setStatus('mandatory')
dfrapPerfThruputPerDlciTxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTxThruput.setStatus('mandatory')
dfrapPerfThruputPerDlciCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciCIR.setStatus('mandatory')
dfrapPerfThruputPerDlciCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-dte-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciCirType.setStatus('mandatory')
dfrapPerfThruputPerDlciUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciUptime.setStatus('mandatory')
dfrapPerfThruputPerDlciDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciDowntime.setStatus('mandatory')
dfrapPerfThruputPerDlciPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc-active", 1), ("pvc-inactive", 2), ("pvc-unprovisioned", 3), ("pvc-not-in-lmi", 4), ("pvc-lmi-timeout", 5), ("pvc-undetermined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciPvcState.setStatus('mandatory')
dfrapPerfThruputPerDlciOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciOutageCount.setStatus('mandatory')
dfrapPerfThruputPerDlciAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciAvailability.setStatus('mandatory')
dfrapPerfThruputPerDlciMTBSO = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciMTBSO.setStatus('mandatory')
dfrapPerfThruputPerDlciMTTSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciMTTSR.setStatus('mandatory')
dfrapPerfThruputPerDlciEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("encap-na", 1), ("encap-1490", 2), ("encap-cisco", 3), ("encap-annex-g", 4), ("encap-other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciEncapType.setStatus('mandatory')
dfrapPerfThruputPerDlciRxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciRxUtilizationStatus.setStatus('mandatory')
dfrapPerfThruputPerDlciTxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciTxUtilizationStatus.setStatus('mandatory')
dfrapPerfThruputPerDlciEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputPerDlciEIR.setStatus('mandatory')
dfrapPerfThruputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3))
dfrapPerfThruputCmdClearDteStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdClearDteStats.setStatus('mandatory')
dfrapPerfThruputCmdClearDdsStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdClearDdsStats.setStatus('mandatory')
dfrapPerfThruputCmdClearAllIntfStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdClearAllIntfStats.setStatus('mandatory')
dfrapPerfThruputCmdClearDlciStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdClearDlciStats.setStatus('mandatory')
dfrapPerfThruputCmdClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdClearAllStats.setStatus('mandatory')
dfrapPerfThruputCmdRemoveStsDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdRemoveStsDlci.setStatus('mandatory')
dfrapPerfThruputCmdReplaceDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 7), )
if mibBuilder.loadTexts: dfrapPerfThruputCmdReplaceDlciTable.setStatus('mandatory')
dfrapPerfThruputCmdReplaceDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 7, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfThruputCmdReplaceDlciValue"))
if mibBuilder.loadTexts: dfrapPerfThruputCmdReplaceDlciEntry.setStatus('mandatory')
dfrapPerfThruputCmdReplaceDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdReplaceDlciValue.setStatus('mandatory')
dfrapPerfThruputCmdReplaceDlciNewValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdReplaceDlciNewValue.setStatus('mandatory')
dfrapPerfThruputCmdAvailabilityStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdAvailabilityStsDlciReset.setStatus('mandatory')
dfrapPerfThruputCmdAvailabilityStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdAvailabilityStsDlciResetAll.setStatus('mandatory')
dfrapPerfThruputCmdCountsStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdCountsStsDlciReset.setStatus('mandatory')
dfrapPerfThruputCmdCountsStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdCountsStsDlciResetAll.setStatus('mandatory')
dfrapPerfThruputCmdAllStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdAllStsDlciReset.setStatus('mandatory')
dfrapPerfThruputCmdAllStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 3, 3, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfThruputCmdAllStsDlciResetAll.setStatus('mandatory')
dfrapPerfNetworkShortTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 4))
dfrapPerfNetwProtoPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1), )
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTable.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfNetwProtoPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfNetwProtoPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciEntry.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciInterval.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciValue.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxTotal.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxTotal.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxIp.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxIp.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxIpx.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxIpx.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxSna.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxSna.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxArp.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxArp.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxCisco.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxCisco.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxOther.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxOther.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxVnip.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxVnip.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciRxAnnexG.setStatus('mandatory')
dfrapPerfNetwProtoPerDlciTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoPerDlciTxAnnexG.setStatus('mandatory')
dfrapPerfNetwProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2), )
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTable.setStatus('mandatory')
dfrapPerfNetwProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfNetwProtoTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalEntry.setStatus('mandatory')
dfrapPerfNetwProtoTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalInterval.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxTotal.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxTotal.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxIp.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxIp.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxIpx.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxIpx.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxSna.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxSna.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxArp.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxArp.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxCisco.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxCisco.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxOther.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxOther.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxVnip.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxVnip.setStatus('mandatory')
dfrapPerfNetwProtoTotalRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalRxAnnexG.setStatus('mandatory')
dfrapPerfNetwProtoTotalTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwProtoTotalTxAnnexG.setStatus('mandatory')
dfrapPerfIpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3), )
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTable.setStatus('mandatory')
dfrapPerfIpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIpPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfIpPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfIpPerDlciEntry.setStatus('mandatory')
dfrapPerfIpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciInterval.setStatus('mandatory')
dfrapPerfIpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciValue.setStatus('mandatory')
dfrapPerfIpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxTotal.setStatus('mandatory')
dfrapPerfIpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxTotal.setStatus('mandatory')
dfrapPerfIpPerDlciRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxTcp.setStatus('mandatory')
dfrapPerfIpPerDlciTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxTcp.setStatus('mandatory')
dfrapPerfIpPerDlciRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxUdp.setStatus('mandatory')
dfrapPerfIpPerDlciTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxUdp.setStatus('mandatory')
dfrapPerfIpPerDlciRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxIcmp.setStatus('mandatory')
dfrapPerfIpPerDlciTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxIcmp.setStatus('mandatory')
dfrapPerfIpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxOther.setStatus('mandatory')
dfrapPerfIpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxOther.setStatus('mandatory')
dfrapPerfIpPerDlciRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciRxIgrp.setStatus('mandatory')
dfrapPerfIpPerDlciTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpPerDlciTxIgrp.setStatus('mandatory')
dfrapPerfIpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4), )
if mibBuilder.loadTexts: dfrapPerfIpTotalTable.setStatus('mandatory')
dfrapPerfIpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIpTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfIpTotalEntry.setStatus('mandatory')
dfrapPerfIpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalInterval.setStatus('mandatory')
dfrapPerfIpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxTotal.setStatus('mandatory')
dfrapPerfIpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxTotal.setStatus('mandatory')
dfrapPerfIpTotalRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxTcp.setStatus('mandatory')
dfrapPerfIpTotalTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxTcp.setStatus('mandatory')
dfrapPerfIpTotalRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxUdp.setStatus('mandatory')
dfrapPerfIpTotalTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxUdp.setStatus('mandatory')
dfrapPerfIpTotalRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxIcmp.setStatus('mandatory')
dfrapPerfIpTotalTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxIcmp.setStatus('mandatory')
dfrapPerfIpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxOther.setStatus('mandatory')
dfrapPerfIpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxOther.setStatus('mandatory')
dfrapPerfIpTotalRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalRxIgrp.setStatus('mandatory')
dfrapPerfIpTotalTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpTotalTxIgrp.setStatus('mandatory')
dfrapPerfIcmpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5), )
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTable.setStatus('mandatory')
dfrapPerfIcmpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIcmpPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfIcmpPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciEntry.setStatus('mandatory')
dfrapPerfIcmpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciInterval.setStatus('mandatory')
dfrapPerfIcmpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciValue.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxTotal.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxTotal.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxEchoRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxEchoRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxDestUnr.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxDestUnr.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxSrcQuench.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxSrcQuench.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxRedirect.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxRedirect.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxEchoReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxEchoReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxTimeExcd.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxTimeExcd.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxParamProb.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxParamProb.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxTimestpReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxTimestpReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxTimestpRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxTimestpRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxAddrMaskReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxAddrMaskReq.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxAddrMaskRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxAddrMaskRep.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxPktTooBig.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxPktTooBig.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxGmQuery.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxGmQuery.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxGmReport.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxGmReport.setStatus('mandatory')
dfrapPerfIcmpPerDlciRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciRxGmReduct.setStatus('mandatory')
dfrapPerfIcmpPerDlciTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpPerDlciTxGmReduct.setStatus('mandatory')
dfrapPerfIcmpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6), )
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTable.setStatus('mandatory')
dfrapPerfIcmpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIcmpTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfIcmpTotalEntry.setStatus('mandatory')
dfrapPerfIcmpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalInterval.setStatus('mandatory')
dfrapPerfIcmpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxTotal.setStatus('mandatory')
dfrapPerfIcmpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxTotal.setStatus('mandatory')
dfrapPerfIcmpTotalRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxEchoRep.setStatus('mandatory')
dfrapPerfIcmpTotalTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxEchoRep.setStatus('mandatory')
dfrapPerfIcmpTotalRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxDestUnr.setStatus('mandatory')
dfrapPerfIcmpTotalTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxDestUnr.setStatus('mandatory')
dfrapPerfIcmpTotalRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxSrcQuench.setStatus('mandatory')
dfrapPerfIcmpTotalTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxSrcQuench.setStatus('mandatory')
dfrapPerfIcmpTotalRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxRedirect.setStatus('mandatory')
dfrapPerfIcmpTotalTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxRedirect.setStatus('mandatory')
dfrapPerfIcmpTotalRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxEchoReq.setStatus('mandatory')
dfrapPerfIcmpTotalTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxEchoReq.setStatus('mandatory')
dfrapPerfIcmpTotalRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxTimeExcd.setStatus('mandatory')
dfrapPerfIcmpTotalTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxTimeExcd.setStatus('mandatory')
dfrapPerfIcmpTotalRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxParamProb.setStatus('mandatory')
dfrapPerfIcmpTotalTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxParamProb.setStatus('mandatory')
dfrapPerfIcmpTotalRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxTimestpReq.setStatus('mandatory')
dfrapPerfIcmpTotalTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxTimestpReq.setStatus('mandatory')
dfrapPerfIcmpTotalRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxTimestpRep.setStatus('mandatory')
dfrapPerfIcmpTotalTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxTimestpRep.setStatus('mandatory')
dfrapPerfIcmpTotalRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxAddrMaskReq.setStatus('mandatory')
dfrapPerfIcmpTotalTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxAddrMaskReq.setStatus('mandatory')
dfrapPerfIcmpTotalRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxAddrMaskRep.setStatus('mandatory')
dfrapPerfIcmpTotalTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxAddrMaskRep.setStatus('mandatory')
dfrapPerfIcmpTotalRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxPktTooBig.setStatus('mandatory')
dfrapPerfIcmpTotalTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxPktTooBig.setStatus('mandatory')
dfrapPerfIcmpTotalRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxGmQuery.setStatus('mandatory')
dfrapPerfIcmpTotalTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxGmQuery.setStatus('mandatory')
dfrapPerfIcmpTotalRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxGmReport.setStatus('mandatory')
dfrapPerfIcmpTotalTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxGmReport.setStatus('mandatory')
dfrapPerfIcmpTotalRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalRxGmReduct.setStatus('mandatory')
dfrapPerfIcmpTotalTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIcmpTotalTxGmReduct.setStatus('mandatory')
dfrapPerfApplicationPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7), )
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTable.setStatus('mandatory')
dfrapPerfApplicationPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfApplicationPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfApplicationPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciEntry.setStatus('mandatory')
dfrapPerfApplicationPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciInterval.setStatus('mandatory')
dfrapPerfApplicationPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciValue.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxSnmp.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxSnmp.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxSnmpTrap.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxSnmpTrap.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxHttp.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxHttp.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxTelnet.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxTelnet.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxSmtp.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxSmtp.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxFtp.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxFtp.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxTftp.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxTftp.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxCustom1.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxCustom1.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxCustom2.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxCustom2.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxCustom3.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxCustom3.setStatus('mandatory')
dfrapPerfApplicationPerDlciRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciRxCustom4.setStatus('mandatory')
dfrapPerfApplicationPerDlciTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationPerDlciTxCustom4.setStatus('mandatory')
dfrapPerfApplicationTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8), )
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTable.setStatus('mandatory')
dfrapPerfApplicationTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfApplicationTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfApplicationTotalEntry.setStatus('mandatory')
dfrapPerfApplicationTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalInterval.setStatus('mandatory')
dfrapPerfApplicationTotalRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxSnmp.setStatus('mandatory')
dfrapPerfApplicationTotalTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxSnmp.setStatus('mandatory')
dfrapPerfApplicationTotalRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxSnmpTrap.setStatus('mandatory')
dfrapPerfApplicationTotalTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxSnmpTrap.setStatus('mandatory')
dfrapPerfApplicationTotalRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxHttp.setStatus('mandatory')
dfrapPerfApplicationTotalTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxHttp.setStatus('mandatory')
dfrapPerfApplicationTotalRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxTelnet.setStatus('mandatory')
dfrapPerfApplicationTotalTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxTelnet.setStatus('mandatory')
dfrapPerfApplicationTotalRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxSmtp.setStatus('mandatory')
dfrapPerfApplicationTotalTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxSmtp.setStatus('mandatory')
dfrapPerfApplicationTotalRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxFtp.setStatus('mandatory')
dfrapPerfApplicationTotalTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxFtp.setStatus('mandatory')
dfrapPerfApplicationTotalRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxTftp.setStatus('mandatory')
dfrapPerfApplicationTotalTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxTftp.setStatus('mandatory')
dfrapPerfApplicationTotalRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxCustom1.setStatus('mandatory')
dfrapPerfApplicationTotalTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxCustom1.setStatus('mandatory')
dfrapPerfApplicationTotalRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxCustom2.setStatus('mandatory')
dfrapPerfApplicationTotalTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxCustom2.setStatus('mandatory')
dfrapPerfApplicationTotalRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxCustom3.setStatus('mandatory')
dfrapPerfApplicationTotalTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxCustom3.setStatus('mandatory')
dfrapPerfApplicationTotalRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalRxCustom4.setStatus('mandatory')
dfrapPerfApplicationTotalTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfApplicationTotalTxCustom4.setStatus('mandatory')
dfrapPerfRoutingPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9), )
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciTable.setStatus('mandatory')
dfrapPerfRoutingPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfRoutingPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfRoutingPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciEntry.setStatus('mandatory')
dfrapPerfRoutingPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciInterval.setStatus('mandatory')
dfrapPerfRoutingPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciValue.setStatus('mandatory')
dfrapPerfRoutingPerDlciRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciRxOspf.setStatus('mandatory')
dfrapPerfRoutingPerDlciTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciTxOspf.setStatus('mandatory')
dfrapPerfRoutingPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciRxRip.setStatus('mandatory')
dfrapPerfRoutingPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciTxRip.setStatus('mandatory')
dfrapPerfRoutingPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciRxNetbios.setStatus('mandatory')
dfrapPerfRoutingPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingPerDlciTxNetbios.setStatus('mandatory')
dfrapPerfRoutingTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10), )
if mibBuilder.loadTexts: dfrapPerfRoutingTotalTable.setStatus('mandatory')
dfrapPerfRoutingTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfRoutingTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfRoutingTotalEntry.setStatus('mandatory')
dfrapPerfRoutingTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalInterval.setStatus('mandatory')
dfrapPerfRoutingTotalRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalRxOspf.setStatus('mandatory')
dfrapPerfRoutingTotalTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalTxOspf.setStatus('mandatory')
dfrapPerfRoutingTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalRxRip.setStatus('mandatory')
dfrapPerfRoutingTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalTxRip.setStatus('mandatory')
dfrapPerfRoutingTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalRxNetbios.setStatus('mandatory')
dfrapPerfRoutingTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfRoutingTotalTxNetbios.setStatus('mandatory')
dfrapPerfIpxPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11), )
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTable.setStatus('mandatory')
dfrapPerfIpxPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIpxPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfIpxPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciEntry.setStatus('mandatory')
dfrapPerfIpxPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciInterval.setStatus('mandatory')
dfrapPerfIpxPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciValue.setStatus('mandatory')
dfrapPerfIpxPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxTotal.setStatus('mandatory')
dfrapPerfIpxPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxTotal.setStatus('mandatory')
dfrapPerfIpxPerDlciRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxSpx.setStatus('mandatory')
dfrapPerfIpxPerDlciTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxSpx.setStatus('mandatory')
dfrapPerfIpxPerDlciRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxNcp.setStatus('mandatory')
dfrapPerfIpxPerDlciTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxNcp.setStatus('mandatory')
dfrapPerfIpxPerDlciRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxSap.setStatus('mandatory')
dfrapPerfIpxPerDlciTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxSap.setStatus('mandatory')
dfrapPerfIpxPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxRip.setStatus('mandatory')
dfrapPerfIpxPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxRip.setStatus('mandatory')
dfrapPerfIpxPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxNetbios.setStatus('mandatory')
dfrapPerfIpxPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxNetbios.setStatus('mandatory')
dfrapPerfIpxPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciRxOther.setStatus('mandatory')
dfrapPerfIpxPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxPerDlciTxOther.setStatus('mandatory')
dfrapPerfIpxTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12), )
if mibBuilder.loadTexts: dfrapPerfIpxTotalTable.setStatus('mandatory')
dfrapPerfIpxTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfIpxTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfIpxTotalEntry.setStatus('mandatory')
dfrapPerfIpxTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalInterval.setStatus('mandatory')
dfrapPerfIpxTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxTotal.setStatus('mandatory')
dfrapPerfIpxTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxTotal.setStatus('mandatory')
dfrapPerfIpxTotalRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxSpx.setStatus('mandatory')
dfrapPerfIpxTotalTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxSpx.setStatus('mandatory')
dfrapPerfIpxTotalRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxNcp.setStatus('mandatory')
dfrapPerfIpxTotalTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxNcp.setStatus('mandatory')
dfrapPerfIpxTotalRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxSap.setStatus('mandatory')
dfrapPerfIpxTotalTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxSap.setStatus('mandatory')
dfrapPerfIpxTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxRip.setStatus('mandatory')
dfrapPerfIpxTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxRip.setStatus('mandatory')
dfrapPerfIpxTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxNetbios.setStatus('mandatory')
dfrapPerfIpxTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxNetbios.setStatus('mandatory')
dfrapPerfIpxTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalRxOther.setStatus('mandatory')
dfrapPerfIpxTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfIpxTotalTxOther.setStatus('mandatory')
dfrapPerfSnaPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13), )
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTable.setStatus('mandatory')
dfrapPerfSnaPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfSnaPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfSnaPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciEntry.setStatus('mandatory')
dfrapPerfSnaPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciInterval.setStatus('mandatory')
dfrapPerfSnaPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciValue.setStatus('mandatory')
dfrapPerfSnaPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxTotal.setStatus('mandatory')
dfrapPerfSnaPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxTotal.setStatus('mandatory')
dfrapPerfSnaPerDlciRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxSubarea.setStatus('mandatory')
dfrapPerfSnaPerDlciTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxSubarea.setStatus('mandatory')
dfrapPerfSnaPerDlciRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxPeriph.setStatus('mandatory')
dfrapPerfSnaPerDlciTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxPeriph.setStatus('mandatory')
dfrapPerfSnaPerDlciRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxAppn.setStatus('mandatory')
dfrapPerfSnaPerDlciTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxAppn.setStatus('mandatory')
dfrapPerfSnaPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxNetbios.setStatus('mandatory')
dfrapPerfSnaPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxNetbios.setStatus('mandatory')
dfrapPerfSnaPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciRxOther.setStatus('mandatory')
dfrapPerfSnaPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaPerDlciTxOther.setStatus('mandatory')
dfrapPerfSnaTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14), )
if mibBuilder.loadTexts: dfrapPerfSnaTotalTable.setStatus('mandatory')
dfrapPerfSnaTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfSnaTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfSnaTotalEntry.setStatus('mandatory')
dfrapPerfSnaTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalInterval.setStatus('mandatory')
dfrapPerfSnaTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxTotal.setStatus('mandatory')
dfrapPerfSnaTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxTotal.setStatus('mandatory')
dfrapPerfSnaTotalRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxSubarea.setStatus('mandatory')
dfrapPerfSnaTotalTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxSubarea.setStatus('mandatory')
dfrapPerfSnaTotalRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxPeriph.setStatus('mandatory')
dfrapPerfSnaTotalTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxPeriph.setStatus('mandatory')
dfrapPerfSnaTotalRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxAppn.setStatus('mandatory')
dfrapPerfSnaTotalTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxAppn.setStatus('mandatory')
dfrapPerfSnaTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxNetbios.setStatus('mandatory')
dfrapPerfSnaTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxNetbios.setStatus('mandatory')
dfrapPerfSnaTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalRxOther.setStatus('mandatory')
dfrapPerfSnaTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfSnaTotalTxOther.setStatus('mandatory')
dfrapPerfArpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15), )
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTable.setStatus('mandatory')
dfrapPerfArpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfArpPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfArpPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfArpPerDlciEntry.setStatus('mandatory')
dfrapPerfArpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciInterval.setStatus('mandatory')
dfrapPerfArpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciValue.setStatus('mandatory')
dfrapPerfArpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxTotal.setStatus('mandatory')
dfrapPerfArpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxTotal.setStatus('mandatory')
dfrapPerfArpPerDlciRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxArpReq.setStatus('mandatory')
dfrapPerfArpPerDlciTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxArpReq.setStatus('mandatory')
dfrapPerfArpPerDlciRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxArpRep.setStatus('mandatory')
dfrapPerfArpPerDlciTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxArpRep.setStatus('mandatory')
dfrapPerfArpPerDlciRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxRarpReq.setStatus('mandatory')
dfrapPerfArpPerDlciTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxRarpReq.setStatus('mandatory')
dfrapPerfArpPerDlciRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxRarpRep.setStatus('mandatory')
dfrapPerfArpPerDlciTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxRarpRep.setStatus('mandatory')
dfrapPerfArpPerDlciRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxInarpReq.setStatus('mandatory')
dfrapPerfArpPerDlciTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxInarpReq.setStatus('mandatory')
dfrapPerfArpPerDlciRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxInarpRep.setStatus('mandatory')
dfrapPerfArpPerDlciTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxInarpRep.setStatus('mandatory')
dfrapPerfArpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciRxOther.setStatus('mandatory')
dfrapPerfArpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpPerDlciTxOther.setStatus('mandatory')
dfrapPerfArpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16), )
if mibBuilder.loadTexts: dfrapPerfArpTotalTable.setStatus('mandatory')
dfrapPerfArpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfArpTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfArpTotalEntry.setStatus('mandatory')
dfrapPerfArpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalInterval.setStatus('mandatory')
dfrapPerfArpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxTotal.setStatus('mandatory')
dfrapPerfArpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxTotal.setStatus('mandatory')
dfrapPerfArpTotalRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxArpReq.setStatus('mandatory')
dfrapPerfArpTotalTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxArpReq.setStatus('mandatory')
dfrapPerfArpTotalRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxArpRep.setStatus('mandatory')
dfrapPerfArpTotalTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxArpRep.setStatus('mandatory')
dfrapPerfArpTotalRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxRarpReq.setStatus('mandatory')
dfrapPerfArpTotalTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxRarpReq.setStatus('mandatory')
dfrapPerfArpTotalRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxRarpRep.setStatus('mandatory')
dfrapPerfArpTotalTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxRarpRep.setStatus('mandatory')
dfrapPerfArpTotalRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxInarpReq.setStatus('mandatory')
dfrapPerfArpTotalTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxInarpReq.setStatus('mandatory')
dfrapPerfArpTotalRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxInarpRep.setStatus('mandatory')
dfrapPerfArpTotalTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxInarpRep.setStatus('mandatory')
dfrapPerfArpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalRxOther.setStatus('mandatory')
dfrapPerfArpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfArpTotalTxOther.setStatus('mandatory')
dfrapPerfLmiPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17), )
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTable.setStatus('mandatory')
dfrapPerfLmiPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfLmiPerDlciInterval"), (0, "DFRAP-MIB", "dfrapPerfLmiPerDlciValue"))
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciEntry.setStatus('mandatory')
dfrapPerfLmiPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciInterval.setStatus('mandatory')
dfrapPerfLmiPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciValue.setStatus('mandatory')
dfrapPerfLmiPerDlciRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxTotalByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxTotalByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxLivoEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxLivoEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxLivoStatByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxLivoStatByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxFullEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxFullEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxFullStatByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxFullStatByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciRxOtherByteCnt.setStatus('mandatory')
dfrapPerfLmiPerDlciTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiPerDlciTxOtherByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18), )
if mibBuilder.loadTexts: dfrapPerfLmiTotalTable.setStatus('mandatory')
dfrapPerfLmiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfLmiTotalInterval"))
if mibBuilder.loadTexts: dfrapPerfLmiTotalEntry.setStatus('mandatory')
dfrapPerfLmiTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalInterval.setStatus('mandatory')
dfrapPerfLmiTotalDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalDlciValue.setStatus('mandatory')
dfrapPerfLmiTotalRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxTotalByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxTotalByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxLivoEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxLivoEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxLivoStatByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxLivoStatByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxFullEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxFullEnqByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxFullStatByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxFullStatByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalRxOtherByteCnt.setStatus('mandatory')
dfrapPerfLmiTotalTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 4, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfLmiTotalTxOtherByteCnt.setStatus('mandatory')
dfrapPerfNetworkLongTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 5))
dfrapPerfNetwLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1), )
if mibBuilder.loadTexts: dfrapPerfNetwLongTermTable.setStatus('mandatory')
dfrapPerfNetwLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfNetwLongTermDlci"), (0, "DFRAP-MIB", "dfrapPerfNetwLongTermProtocol"), (0, "DFRAP-MIB", "dfrapPerfNetwLongTermInterval"))
if mibBuilder.loadTexts: dfrapPerfNetwLongTermEntry.setStatus('mandatory')
dfrapPerfNetwLongTermDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermDlci.setStatus('mandatory')
dfrapPerfNetwLongTermProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermProtocol.setStatus('mandatory')
dfrapPerfNetwLongTermInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermInterval.setStatus('mandatory')
dfrapPerfNetwLongTermValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermValue.setStatus('mandatory')
dfrapPerfNetwLongTermAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 2), )
if mibBuilder.loadTexts: dfrapPerfNetwLongTermAltTable.setStatus('mandatory')
dfrapPerfNetwLongTermAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfNetwLongTermAltDlci"), (0, "DFRAP-MIB", "dfrapPerfNetwLongTermAltProtocol"))
if mibBuilder.loadTexts: dfrapPerfNetwLongTermAltEntry.setStatus('mandatory')
dfrapPerfNetwLongTermAltDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermAltDlci.setStatus('mandatory')
dfrapPerfNetwLongTermAltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-c", 129), ("thru-frame-rx-c", 130), ("thru-fecn-tx-c", 131), ("thru-fecn-rx-c", 132), ("thru-becn-tx-c", 133), ("thru-becn-rx-c", 134), ("thru-de-tx-c", 135), ("thru-de-rx-c", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermAltProtocol.setStatus('mandatory')
dfrapPerfNetwLongTermAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfNetwLongTermAltArray.setStatus('mandatory')
dfrapPerfNetworkLongTermCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 3))
dfrapPerfNetworkLongTermCmdClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapPerfNetworkLongTermCmdClear.setStatus('mandatory')
dfrapPerfCirPercentUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 6))
dfrapPerfCirPercentUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1), )
if mibBuilder.loadTexts: dfrapPerfCirPercentUtilizationTable.setStatus('mandatory')
dfrapPerfCirPercentUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfCirPercentUtilizationInterval"), (0, "DFRAP-MIB", "dfrapPerfCirPercentUtilizationDlciValue"))
if mibBuilder.loadTexts: dfrapPerfCirPercentUtilizationEntry.setStatus('mandatory')
dfrapPerfCirPercentUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirPercentUtilizationInterval.setStatus('mandatory')
dfrapPerfCirPercentUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirPercentUtilizationDlciValue.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange1.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange2.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange3.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange4.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange5.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange6.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange7.setStatus('mandatory')
dfrapPerfCirRxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirRxPercentUtilizationRange8.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange1.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange2.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange3.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange4.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange5.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange6.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange7.setStatus('mandatory')
dfrapPerfCirTxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCirTxPercentUtilizationRange8.setStatus('mandatory')
dfrapPerfCurrentPerDlciUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2), )
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciUtilizationTable.setStatus('mandatory')
dfrapPerfCurrentPerDlciUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapPerfCurrentPerDlciUtilizationDlciValue"))
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciUtilizationEntry.setStatus('mandatory')
dfrapPerfCurrentPerDlciUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciUtilizationDlciValue.setStatus('mandatory')
dfrapPerfCurrentPerDlciRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciRxUtilization.setStatus('mandatory')
dfrapPerfCurrentPerDlciTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciTxUtilization.setStatus('mandatory')
dfrapPerfCurrentPerDlciAggregateUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentPerDlciAggregateUtilization.setStatus('mandatory')
dfrapPerfCurrentUnitUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 3))
dfrapPerfCurrentDteUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentDteUtilization.setStatus('mandatory')
dfrapPerfCurrentWanUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentWanUtilization.setStatus('mandatory')
dfrapPerfCurrentAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 5, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPerfCurrentAggregateUtilization.setStatus('mandatory')
dfrapEventTrapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 6, 10))
dfrapEventTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 10, 1), )
if mibBuilder.loadTexts: dfrapEventTrapLogTable.setStatus('mandatory')
dfrapEventTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapEventTrapLogSeqNum"))
if mibBuilder.loadTexts: dfrapEventTrapLogEntry.setStatus('mandatory')
dfrapEventTrapLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogSeqNum.setStatus('mandatory')
dfrapEventTrapLogGenericEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogGenericEvent.setStatus('mandatory')
dfrapEventTrapLogSpecificEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogSpecificEvent.setStatus('mandatory')
dfrapEventTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogTimeStamp.setStatus('mandatory')
dfrapEventTrapLogVarBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogVarBind1.setStatus('mandatory')
dfrapEventTrapLogVarBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogVarBind2.setStatus('mandatory')
dfrapEventTrapLogVarBind3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventTrapLogVarBind3.setStatus('mandatory')
dfrapEventLogAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 6, 10, 2), )
if mibBuilder.loadTexts: dfrapEventLogAltTable.setStatus('mandatory')
dfrapEventLogAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 6, 10, 2, 1), ).setIndexNames((0, "DFRAP-MIB", "dfrapEventLogAltSeqNum"))
if mibBuilder.loadTexts: dfrapEventLogAltEntry.setStatus('mandatory')
dfrapEventLogAltSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventLogAltSeqNum.setStatus('mandatory')
dfrapEventLogAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 6, 10, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventLogAltArray.setStatus('mandatory')
dfrapEventLogCurrentSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapEventLogCurrentSeqNum.setStatus('mandatory')
dfrapEventLogFreeze = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("un-freeze", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapEventLogFreeze.setStatus('mandatory')
dfrapEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dfrapEventLogClear.setStatus('mandatory')
dfrapAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 14, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 138, 139, 140, 141, 142, 257, 258, 259, 260, 261, 262, 263, 264, 265))).clone(namedValues=NamedValues(("bad-config-in-set", 1), ("config-local-update", 2), ("local-unit-loopback-enabled", 14), ("local-unit-loopback-disabled", 15), ("local-unit-loopback-failure", 16), ("local-dte-loopback-enabled", 17), ("local-dte-loopback-disabled", 18), ("local-dte-loopback-failure", 19), ("local-network-loopback-enabled", 26), ("local-network-loopback-disabled", 27), ("local-network-loopback-failure", 28), ("v54-loop-up-initiated", 29), ("v54-loop-down-completed", 30), ("v54-loopback-enabled-by-remote", 31), ("v54-loopback-disabled-by-remote", 32), ("v54-loopback-failure", 33), ("bert-test-pattern-initiated", 44), ("bert-test-pattern-completed", 45), ("bert-test-pattern-failure", 46), ("dlci-active", 47), ("dlci-inactive", 48), ("dlci-td-threshold", 49), ("lmi-sourcing-change-passthru", 50), ("lmi-sourcing-change-user-dte", 51), ("lmi-sourcing-change-net-dte", 52), ("lmi-sourcing-change-user-net", 53), ("lmi-sourcing-change-net-net", 54), ("dte-signal-rts-on", 55), ("dte-signal-rts-off", 56), ("dte-signal-dtr-on", 57), ("dte-signal-dtr-off", 58), ("lmi-non-incr-seq-num-dte", 59), ("lmi-non-incr-seq-num-net", 60), ("lmi-seq-num-mismatch-dte", 61), ("lmi-seq-num-mismatch-net", 62), ("line-failure", 63), ("line-in-service", 64), ("connected", 65), ("connect-failure", 66), ("incoming-call", 67), ("disconnected", 68), ("bpv-threshold-exceeded", 69), ("bpv-threshold-acceptable", 70), ("remote-network-simplex-loopback-enabled", 71), ("remote-network-simplex-loopback-disabled", 72), ("remote-network-non-latching-loopback-enabled", 73), ("remote-network-non-latching-loopback-disabled", 74), ("trap-muting-active", 75), ("trap-muting-inactive", 76), ("vloop-loop-up", 90), ("vloop-loop-down", 91), ("vloop-up-via-remote", 92), ("vloop-down-via-remote", 93), ("vloop-failed", 94), ("vbert-started", 95), ("vbert-stopped", 96), ("vbert-request-failed", 97), ("pvc-rx-utilization-exceeded", 138), ("pvc-tx-utilization-exceeded", 139), ("pvc-rx-utilization-cleared", 140), ("pvc-tx-utilization-cleared", 141), ("config-install-success", 142), ("tftp-requested", 257), ("tftp-transferring", 258), ("tftp-programming", 259), ("tftp-aborted", 260), ("tftp-success", 261), ("tftp-host-unreachable", 262), ("tftp-no-file", 263), ("tftp-invalid-file", 264), ("tftp-corrupt-file", 265)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapAlarmType.setStatus('mandatory')
dfrapDLCINum = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapDLCINum.setStatus('mandatory')
dfrapInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dds", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapInterface.setStatus('mandatory')
dfrapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapIpAddress.setStatus('mandatory')
dfrapPercentUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapPercentUtilization.setStatus('mandatory')
dfrapUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapUtilizationThreshold.setStatus('mandatory')
dfrapCfgLockIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfrapCfgLockIpAddress.setStatus('mandatory')
dfrapTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,0)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,1)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,2)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,14)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,15)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,16)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,17)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,18)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,19)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,26)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,27)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,28)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapV54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,29)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapV54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,30)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapV54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,31)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapV54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,32)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapV54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,33)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,44)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,45)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,46)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapDLCIActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,47)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"))
dfrapDLCIInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,48)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"))
dfrapDLCITDThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,49)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapIpAddress"))
dfrapLmiSourcingChangePassthruTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,50)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSourcingChangeUserDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,51)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSourcingChangeNetDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,52)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSourcingChangeUserDdsTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,53)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSourcingChangeNetDdsTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,54)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapDteSignalRtsOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,55)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapDteSignalRtsOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,56)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapDteSignalDtrOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,57)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapDteSignalDtrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,58)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapNonIncrLmiSeqNumDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,59)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapNonIncrLmiSeqNumDdsTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,60)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSeqNumMismatchDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,61)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLmiSeqNumMismatchDdsTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,62)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLineFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,63)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapLineInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,64)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBPVThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,69)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapBPVThresholdAcceptableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,70)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapSimplexCurrentLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,71)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapSimplexCurrentLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,72)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapNonLatchingLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,73)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapNonLatchingLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,74)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTrapMutingActive = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,75)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTrapMutingInactive = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,76)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapVloopUp = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,90)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVloopDown = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,91)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVloopUpViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,92)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVloopDownViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,93)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVloopRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,94)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVbertStarted = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,95)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVbertStopped = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,96)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapVbertRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,97)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapInterface"))
dfrapPvcRxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,138)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapPercentUtilization"), ("DFRAP-MIB", "dfrapUtilizationThreshold"))
dfrapPvcTxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,139)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapPercentUtilization"), ("DFRAP-MIB", "dfrapUtilizationThreshold"))
dfrapPvcRxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,140)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapPercentUtilization"), ("DFRAP-MIB", "dfrapUtilizationThreshold"))
dfrapPvcTxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,141)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapDLCINum"), ("DFRAP-MIB", "dfrapPercentUtilization"), ("DFRAP-MIB", "dfrapUtilizationThreshold"))
dfrapConfigInstallSuccess = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,142)).setObjects(("DFRAP-MIB", "dfrapAlarmType"), ("DFRAP-MIB", "dfrapCfgLockIpAddress"))
dfrapTftpRequestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,257)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpTransferringTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,258)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpProgrammingTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,259)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpAbortedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,260)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,261)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpHostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,262)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpNoFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,263)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpInvalidFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,264)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
dfrapTftpCorruptFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 6) + (0,265)).setObjects(("DFRAP-MIB", "dfrapAlarmType"))
mibBuilder.exportSymbols("DFRAP-MIB", dfrapPerfArpPerDlciTxInarpReq=dfrapPerfArpPerDlciTxInarpReq, dfrapPerfIpxTotalTxOther=dfrapPerfIpxTotalTxOther, dfrapPerfLmiPerDlciRxFullStatByteCnt=dfrapPerfLmiPerDlciRxFullStatByteCnt, dfrapPerfRoutingTotalRxNetbios=dfrapPerfRoutingTotalRxNetbios, dfrapPerfNetwProtoTotalInterval=dfrapPerfNetwProtoTotalInterval, dfrapPerfThruputPerDlciCIR=dfrapPerfThruputPerDlciCIR, dfrapCfgFrAddrResInarpTimer=dfrapCfgFrAddrResInarpTimer, dfrapPerfThruputPerDlciMTBSO=dfrapPerfThruputPerDlciMTBSO, dfrapPerfApplicationPerDlciTxHttp=dfrapPerfApplicationPerDlciTxHttp, dfrapEventLogAltEntry=dfrapEventLogAltEntry, dfrapEventLogAltTable=dfrapEventLogAltTable, dfrapVnipTopologyIndex=dfrapVnipTopologyIndex, dfrapStatusDteStatusLED=dfrapStatusDteStatusLED, dfrapPerfIpTotalRxOther=dfrapPerfIpTotalRxOther, dfrapPerfIpxPerDlciRxOther=dfrapPerfIpxPerDlciRxOther, dfrapIpAddress=dfrapIpAddress, dfrapPerfIcmpTotalRxTimestpReq=dfrapPerfIcmpTotalRxTimestpReq, dfrapCfgTftpInterface=dfrapCfgTftpInterface, dfrapPerfCirPercentUtilizationDlciValue=dfrapPerfCirPercentUtilizationDlciValue, dfrapCfgAppLpbkTimeout=dfrapCfgAppLpbkTimeout, dfrapPerfRoutingPerDlciTxOspf=dfrapPerfRoutingPerDlciTxOspf, dfrapCfgSnmpMgrDlci=dfrapCfgSnmpMgrDlci, dfrapPerfMgmtIpICMPOutEchos=dfrapPerfMgmtIpICMPOutEchos, dfrapPerfSnaPerDlciValue=dfrapPerfSnaPerDlciValue, dfrapPerfLmiPerDlciRxFullEnqByteCnt=dfrapPerfLmiPerDlciRxFullEnqByteCnt, dfrapConfigInstallSuccess=dfrapConfigInstallSuccess, dfrapPerfThruputPerDlciTxThruput=dfrapPerfThruputPerDlciTxThruput, dfrapPerfNetwProtoTotalTxAnnexG=dfrapPerfNetwProtoTotalTxAnnexG, dfrapStatusAllLEDs=dfrapStatusAllLEDs, dfrapDiagDteTable=dfrapDiagDteTable, dfrapPerfApplicationTotalTxTftp=dfrapPerfApplicationTotalTxTftp, dfrapPerfCirPercentUtilizationEntry=dfrapPerfCirPercentUtilizationEntry, dfrapCfgTftpDlci=dfrapCfgTftpDlci, dfrapCfgTftpTable=dfrapCfgTftpTable, dfrapPerfArpPerDlciRxTotal=dfrapPerfArpPerDlciRxTotal, dfrapPerfApplicationTotalRxSmtp=dfrapPerfApplicationTotalRxSmtp, dfrapVnipTopoTDLastDelay=dfrapVnipTopoTDLastDelay, dfrapPerfSnaPerDlciRxAppn=dfrapPerfSnaPerDlciRxAppn, dfrapCfgLockIpAddress=dfrapCfgLockIpAddress, dfrapLocalDteLoopbackDisabledTrap=dfrapLocalDteLoopbackDisabledTrap, dfrapCfgFrDLCIEncap=dfrapCfgFrDLCIEncap, dfrapPerfApplicationTotalTxSnmpTrap=dfrapPerfApplicationTotalTxSnmpTrap, dfrapPerfIcmpPerDlciRxParamProb=dfrapPerfIcmpPerDlciRxParamProb, dfrapPerfIpTotalRxIcmp=dfrapPerfIpTotalRxIcmp, dfrapCfgFrPerfDlciNamesEirValue=dfrapCfgFrPerfDlciNamesEirValue, dfrapPerfNetwProtoPerDlciRxSna=dfrapPerfNetwProtoPerDlciRxSna, dfrapPerfMgmtIpIPInHdrErr=dfrapPerfMgmtIpIPInHdrErr, dfrapPerfMgmtIpICMPInDestUnreachs=dfrapPerfMgmtIpICMPInDestUnreachs, dfrapPerfSnaPerDlciEntry=dfrapPerfSnaPerDlciEntry, dfrapPerfArpTotalTable=dfrapPerfArpTotalTable, dfrapPerfNetwProtoPerDlciRxIpx=dfrapPerfNetwProtoPerDlciRxIpx, dfrapStatusDdsModeLED=dfrapStatusDdsModeLED, dfrapPerfIcmpPerDlciRxGmReduct=dfrapPerfIcmpPerDlciRxGmReduct, dfrapPerfThruputCommands=dfrapPerfThruputCommands, dfrapPerfRoutingPerDlciRxNetbios=dfrapPerfRoutingPerDlciRxNetbios, dfrapPerfThruputCmdClearAllStats=dfrapPerfThruputCmdClearAllStats, dfrapCfgDteIntfType=dfrapCfgDteIntfType, dfrapPerfSnaTotalRxSubarea=dfrapPerfSnaTotalRxSubarea, dfrapLocalNetLoopbackEnabledTrap=dfrapLocalNetLoopbackEnabledTrap, dfrapPerfMgmtIpICMPInEchos=dfrapPerfMgmtIpICMPInEchos, dfrapPerfNetwProtoTotalEntry=dfrapPerfNetwProtoTotalEntry, dfrapCfgFrLmiType=dfrapCfgFrLmiType, dfrapPerfArpTotalRxRarpReq=dfrapPerfArpTotalRxRarpReq, dfrapPerfCurrentPerDlciRxUtilization=dfrapPerfCurrentPerDlciRxUtilization, dfrapPerfIpTotalInterval=dfrapPerfIpTotalInterval, dfrapPerfIpxPerDlciRxRip=dfrapPerfIpxPerDlciRxRip, dfrapPerfThruputPerDlciRxThruput=dfrapPerfThruputPerDlciRxThruput, dfrapStatusDteDtr=dfrapStatusDteDtr, dfrapPerfIcmpTotalRxGmQuery=dfrapPerfIcmpTotalRxGmQuery, dfrapCfgFrPerfUserProtocolsIndex=dfrapCfgFrPerfUserProtocolsIndex, dfrapPerfIpPerDlciTxIcmp=dfrapPerfIpPerDlciTxIcmp, dfrapCfgIpPeerIP=dfrapCfgIpPeerIP, dfrapCfgAppClockSource=dfrapCfgAppClockSource, dfrapPerfIpxTotalRxNetbios=dfrapPerfIpxTotalRxNetbios, dfrapPerfIcmpTotalTxGmReport=dfrapPerfIcmpTotalTxGmReport, dfrapEventTrapLog=dfrapEventTrapLog, dfrapPerfArpTotalTxRarpReq=dfrapPerfArpTotalTxRarpReq, dfrapNonIncrLmiSeqNumDteTrap=dfrapNonIncrLmiSeqNumDteTrap, dfrapPerfLmiTotalTxTotalByteCnt=dfrapPerfLmiTotalTxTotalByteCnt, dfrapPerfThruputPerDlciRxByte=dfrapPerfThruputPerDlciRxByte, dfrapLocalUnitLoopbackDisabledTrap=dfrapLocalUnitLoopbackDisabledTrap, dfrapPerfMgmtIpICMPInRedirects=dfrapPerfMgmtIpICMPInRedirects, dfrapCfgCommTable=dfrapCfgCommTable, dfrapPerfNetworkLongTermCommands=dfrapPerfNetworkLongTermCommands, dfrapBertFailedTrap=dfrapBertFailedTrap, dfrapDiagBertState=dfrapDiagBertState, dfrapVnipTopologyIpAddr=dfrapVnipTopologyIpAddr, dfrapPerfApplicationTotalRxSnmpTrap=dfrapPerfApplicationTotalRxSnmpTrap, dfrapPerfNetworkLongTermCmdClear=dfrapPerfNetworkLongTermCmdClear, dfrapCfgFrAddrResDlcis=dfrapCfgFrAddrResDlcis, dfrapDiagDteTimeRemaining=dfrapDiagDteTimeRemaining, dfrapCfgFrDLCITable=dfrapCfgFrDLCITable, dfrapCfgFrPerfUserProtocolsEntry=dfrapCfgFrPerfUserProtocolsEntry, dfrapEventTrapLogSpecificEvent=dfrapEventTrapLogSpecificEvent, dfrapNonLatchingLoopbackDisabledTrap=dfrapNonLatchingLoopbackDisabledTrap, dfrapVbertStopped=dfrapVbertStopped, dfrapVnipTopoVBertTxDEClrFrames=dfrapVnipTopoVBertTxDEClrFrames, dfrapPerfThruputPerIntfIndex=dfrapPerfThruputPerIntfIndex, dfrapSysAmtMemoryInstalled=dfrapSysAmtMemoryInstalled, dfrapV54LoopUpInitiatedTrap=dfrapV54LoopUpInitiatedTrap, dfrapPerfIpTotalTxIcmp=dfrapPerfIpTotalTxIcmp, dfrapPerfLmiPerDlciTxLivoEnqByteCnt=dfrapPerfLmiPerDlciTxLivoEnqByteCnt, dfrapPerfApplicationPerDlciTxSnmpTrap=dfrapPerfApplicationPerDlciTxSnmpTrap, dfrapPerfIpPerDlciRxIgrp=dfrapPerfIpPerDlciRxIgrp, dfrapPerfLmiTotalDlciValue=dfrapPerfLmiTotalDlciValue, dfrapPerfArpPerDlciRxInarpReq=dfrapPerfArpPerDlciRxInarpReq, dfrapPerfIpxPerDlciTxNcp=dfrapPerfIpxPerDlciTxNcp, dfrapPerfLmiTotalRxFullStatByteCnt=dfrapPerfLmiTotalRxFullStatByteCnt, dfrapPerfIcmpPerDlciTxTotal=dfrapPerfIcmpPerDlciTxTotal, dfrapPerfNetwProtoPerDlciRxIp=dfrapPerfNetwProtoPerDlciRxIp, dfrapStatusMgmtInterfaceStatus=dfrapStatusMgmtInterfaceStatus, dfrapPerfThruputPerIntfTable=dfrapPerfThruputPerIntfTable, dfrapVnipTopoVBertTimeElapse=dfrapVnipTopoVBertTimeElapse, dfrapCfgFrPerfLTDlciFilterIndex=dfrapCfgFrPerfLTDlciFilterIndex, dfrapCfgAppPerfBuffLimit=dfrapCfgAppPerfBuffLimit, dfrapDiagVnipEntry=dfrapDiagVnipEntry, dfrapPerfLmiPerDlciEntry=dfrapPerfLmiPerDlciEntry, dfrapDiagDdsTimeRemaining=dfrapDiagDdsTimeRemaining, dfrapInterface=dfrapInterface, dfrapPerfIcmpPerDlciTxEchoReq=dfrapPerfIcmpPerDlciTxEchoReq, dfrapCfgDteDtr=dfrapCfgDteDtr, dfrapTftpSuccessTrap=dfrapTftpSuccessTrap, dfrapLmiSourcingChangeNetDteTrap=dfrapLmiSourcingChangeNetDteTrap, dfrapPerfApplicationTotalRxTelnet=dfrapPerfApplicationTotalRxTelnet, dfrapPerfMgmtIpTCPAttemptFails=dfrapPerfMgmtIpTCPAttemptFails, dfrapPerfNetwProtoPerDlciTxVnip=dfrapPerfNetwProtoPerDlciTxVnip, dfrapCfgIpChannel=dfrapCfgIpChannel, dfrapPerfSnaTotalTxOther=dfrapPerfSnaTotalTxOther, dfrapSysNumSnmpMgrs=dfrapSysNumSnmpMgrs, dfrapPerfRoutingTotalTable=dfrapPerfRoutingTotalTable, dfrapPerfRoutingPerDlciTxRip=dfrapPerfRoutingPerDlciTxRip, dfrapPerfNetwProtoTotalRxCisco=dfrapPerfNetwProtoTotalRxCisco, dfrapSysNumDlciNames=dfrapSysNumDlciNames, dfrapCfgFrPerfDlciNamesEntry=dfrapCfgFrPerfDlciNamesEntry, dfrapPerfIcmpTotalTxTimestpReq=dfrapPerfIcmpTotalTxTimestpReq, dfrapCfgSetCommunityString=dfrapCfgSetCommunityString, dfrapDteSignalDtrOffTrap=dfrapDteSignalDtrOffTrap, dfrapCfgFrPerfDlciNamesUtilThreshold=dfrapCfgFrPerfDlciNamesUtilThreshold, dfrapCfgSnmpMgrClearN=dfrapCfgSnmpMgrClearN, dfrapPerfIpxTotalRxRip=dfrapPerfIpxTotalRxRip, dfrapPerfArpPerDlciRxRarpReq=dfrapPerfArpPerDlciRxRarpReq, dfrapSysTable=dfrapSysTable, dfrapPerfIcmpTotalRxParamProb=dfrapPerfIcmpTotalRxParamProb, dfrapPerfIcmpTotalRxGmReduct=dfrapPerfIcmpTotalRxGmReduct, dfrapPerfSnaTotalEntry=dfrapPerfSnaTotalEntry, dfrapCfgSnmpTrapMuting=dfrapCfgSnmpTrapMuting, dfrapPerfNetwProtoPerDlciRxArp=dfrapPerfNetwProtoPerDlciRxArp, dfrapSimplexCurrentLoopbackDisabledTrap=dfrapSimplexCurrentLoopbackDisabledTrap, dfrapVnipTopologyLocalDlci=dfrapVnipTopologyLocalDlci, dfrapPerfIcmpTotalTxGmReduct=dfrapPerfIcmpTotalTxGmReduct, dfrapBPVThresholdExceededTrap=dfrapBPVThresholdExceededTrap, dfrapPerfIpTotalTxTcp=dfrapPerfIpTotalTxTcp, dfrapEventTrapLogEntry=dfrapEventTrapLogEntry, dfrapUtilizationThreshold=dfrapUtilizationThreshold, dfrapPerfNetwProtoTotalRxAnnexG=dfrapPerfNetwProtoTotalRxAnnexG, dfrapPerfIcmpTotalRxTotal=dfrapPerfIcmpTotalRxTotal, dfrapPerfIcmpTotalRxGmReport=dfrapPerfIcmpTotalRxGmReport, dfrapSysHardRev=dfrapSysHardRev, dfrapPerfMgmtIpTCPInSegs=dfrapPerfMgmtIpTCPInSegs, dfrapPerfArpTotalRxOther=dfrapPerfArpTotalRxOther, dfrapPerfThruputPerDlciEIR=dfrapPerfThruputPerDlciEIR, dfrapPerfIcmpTotalTxTimestpRep=dfrapPerfIcmpTotalTxTimestpRep, dfrapPerfThruputPerDlciRxDe=dfrapPerfThruputPerDlciRxDe, dfrapStatusDteDcd=dfrapStatusDteDcd, dfrapCfgVnipKeepAliveTimer=dfrapCfgVnipKeepAliveTimer, dfrapDiagBertErrors=dfrapDiagBertErrors, dfrapEventTrapLogSeqNum=dfrapEventTrapLogSeqNum, dfrapStatusDteTable=dfrapStatusDteTable, dfrapPerfThruputPerDlciDowntime=dfrapPerfThruputPerDlciDowntime, dfrapPerfThruputCmdReplaceDlciTable=dfrapPerfThruputCmdReplaceDlciTable, dfrapCfgSnmpMgrTable=dfrapCfgSnmpMgrTable, dfrapPerfArpTotalRxArpRep=dfrapPerfArpTotalRxArpRep, dfrapDiagVBERT=dfrapDiagVBERT, dfrapDLCIInactiveTrap=dfrapDLCIInactiveTrap, dfrapCfgFrDLCIMgmtDE=dfrapCfgFrDLCIMgmtDE, dfrapPerfApplicationTotalRxCustom4=dfrapPerfApplicationTotalRxCustom4, dfrapCfgTransitDelayThreshold=dfrapCfgTransitDelayThreshold, dfrapPerfMgmtIpTCPPassiveOpens=dfrapPerfMgmtIpTCPPassiveOpens, dfrapPerfIcmpPerDlciTxParamProb=dfrapPerfIcmpPerDlciTxParamProb, dfrapPerfMgmtIpIFInErrors=dfrapPerfMgmtIpIFInErrors, dfrapPerfThruputPerDlciOutageCount=dfrapPerfThruputPerDlciOutageCount, dfrapSysFeatureTable=dfrapSysFeatureTable, dfrapPerfIcmpTotalTxTotal=dfrapPerfIcmpTotalTxTotal, dfrapSysNumDteInstalled=dfrapSysNumDteInstalled, dfrapPerfSnaTotalTxNetbios=dfrapPerfSnaTotalTxNetbios, dfrapPerfApplicationPerDlciTxSnmp=dfrapPerfApplicationPerDlciTxSnmp, dfrapPerfIpxPerDlciValue=dfrapPerfIpxPerDlciValue, dfrapPerfThruputPerDlciMTTSR=dfrapPerfThruputPerDlciMTTSR, dfrapPerfLmiPerDlciRxTotalByteCnt=dfrapPerfLmiPerDlciRxTotalByteCnt, dfrapPerfLmiPerDlciTxOtherByteCnt=dfrapPerfLmiPerDlciTxOtherByteCnt, dfrapPerfSnaPerDlciRxPeriph=dfrapPerfSnaPerDlciRxPeriph, dfrapPerfIcmpTotalRxRedirect=dfrapPerfIcmpTotalRxRedirect, dfrapV54LoopbackFailedTrap=dfrapV54LoopbackFailedTrap, dfrapPerfThruputCmdCountsStsDlciReset=dfrapPerfThruputCmdCountsStsDlciReset, dfrapPerfLmiTotalRxTotalByteCnt=dfrapPerfLmiTotalRxTotalByteCnt, dfrapPerfMgmtIpUDPInDatagrams=dfrapPerfMgmtIpUDPInDatagrams, dfrapPerfLmiPerDlciValue=dfrapPerfLmiPerDlciValue, dfrapPerfApplicationPerDlciEntry=dfrapPerfApplicationPerDlciEntry, dfrapCfgTDDeleteInterface=dfrapCfgTDDeleteInterface, dfrapPerfCirTxPercentUtilizationRange1=dfrapPerfCirTxPercentUtilizationRange1, dfrapPerfSnaTotalRxNetbios=dfrapPerfSnaTotalRxNetbios, dfrapPerfThruputPerDlciRxBecn=dfrapPerfThruputPerDlciRxBecn, dfrapPerfIpxPerDlciTxRip=dfrapPerfIpxPerDlciTxRip, dfrapPerfCirTxPercentUtilizationRange6=dfrapPerfCirTxPercentUtilizationRange6, dfrapPerfLmiTotalRxOtherByteCnt=dfrapPerfLmiTotalRxOtherByteCnt, dfrapPerfSnaTotalTxPeriph=dfrapPerfSnaTotalTxPeriph, dfrapPerfApplicationTotalRxCustom1=dfrapPerfApplicationTotalRxCustom1, dfrapPerfIcmpTotalTxAddrMaskRep=dfrapPerfIcmpTotalTxAddrMaskRep, dfrapPerfArpPerDlciTable=dfrapPerfArpPerDlciTable, dfrapPerfMgmtIpUDPOutDatagrams=dfrapPerfMgmtIpUDPOutDatagrams, dfrapPerfThruputPerIntfRxBpvCnt=dfrapPerfThruputPerIntfRxBpvCnt, dfrapPerfNetwProtoPerDlciTxTotal=dfrapPerfNetwProtoPerDlciTxTotal, dfrapCfgAppCircuitId=dfrapCfgAppCircuitId, dfrapPerfMgmtIpICMPOutErrors=dfrapPerfMgmtIpICMPOutErrors, dfrapPerfArpPerDlciRxOther=dfrapPerfArpPerDlciRxOther, dfrapCfgFrPerfLTDlciFilterEntry=dfrapCfgFrPerfLTDlciFilterEntry, dfrapStatusMgmtTable=dfrapStatusMgmtTable, dfrapPerfApplicationPerDlciTxCustom4=dfrapPerfApplicationPerDlciTxCustom4, dfrapPerfApplicationPerDlciRxCustom3=dfrapPerfApplicationPerDlciRxCustom3, dfrapLmiSourcingChangePassthruTrap=dfrapLmiSourcingChangePassthruTrap, dfrapDteSignalRtsOffTrap=dfrapDteSignalRtsOffTrap, dfrapPerfIcmpPerDlciRxTimestpReq=dfrapPerfIcmpPerDlciRxTimestpReq, dfrapTftpTransferringTrap=dfrapTftpTransferringTrap, dfrapPerfIcmpPerDlciTxGmReduct=dfrapPerfIcmpPerDlciTxGmReduct, dfrapSysType=dfrapSysType, dfrapCfgDteTable=dfrapCfgDteTable, dfrapStatusDteMode=dfrapStatusDteMode, dfrapPerfThruputPerIntfRxAbortCnt=dfrapPerfThruputPerIntfRxAbortCnt, dfrapPerfNetwProtoPerDlciTable=dfrapPerfNetwProtoPerDlciTable, dfrapPerfNetwProtoPerDlciRxCisco=dfrapPerfNetwProtoPerDlciRxCisco, dfrapPerfRoutingTotalRxRip=dfrapPerfRoutingTotalRxRip, dfrapDiagnostics=dfrapDiagnostics, dfrapCfgCommStopBits=dfrapCfgCommStopBits, dfrapPerfApplicationTotalTxSmtp=dfrapPerfApplicationTotalTxSmtp, dfrapLmiSourcingChangeUserDteTrap=dfrapLmiSourcingChangeUserDteTrap, dfrapTrap=dfrapTrap, dfrapPerfIpTotalEntry=dfrapPerfIpTotalEntry, dfrapPerfThruputPerDlciPvcState=dfrapPerfThruputPerDlciPvcState, dfrapPerfIpPerDlciRxTcp=dfrapPerfIpPerDlciRxTcp, dfrapPerfIcmpPerDlciTxDestUnr=dfrapPerfIcmpPerDlciTxDestUnr, dfrapCfgTftpPassword=dfrapCfgTftpPassword, dfrapPerfArpTotalTxArpRep=dfrapPerfArpTotalTxArpRep, dfrapPerfNetwLongTermAltArray=dfrapPerfNetwLongTermAltArray, dfrapCfgAppType=dfrapCfgAppType, dfrapPerfMgmtIpICMPInParmProbs=dfrapPerfMgmtIpICMPInParmProbs, dfrapPerfApplicationPerDlciRxTftp=dfrapPerfApplicationPerDlciRxTftp, dfrapPerfCurrentPerDlciTxUtilization=dfrapPerfCurrentPerDlciTxUtilization, private=private, dfrapCfgLockID=dfrapCfgLockID, dfrapDiagVnipInterface=dfrapDiagVnipInterface, dfrapCfgFrAddrLen=dfrapCfgFrAddrLen, dfrapPerfNetwProtoTotalTxTotal=dfrapPerfNetwProtoTotalTxTotal, dfrapDLCITDThresholdTrap=dfrapDLCITDThresholdTrap, dfrapPerfApplicationPerDlciInterval=dfrapPerfApplicationPerDlciInterval)
mibBuilder.exportSymbols("DFRAP-MIB", dfrapCfgFrLmiKeepaliveTimeout=dfrapCfgFrLmiKeepaliveTimeout, dfrapPerfThruputPerDlciRxFrame=dfrapPerfThruputPerDlciRxFrame, dfrapPerfLmiTotalEntry=dfrapPerfLmiTotalEntry, dfrapPerfThruputPerDlciIndex=dfrapPerfThruputPerDlciIndex, dfrapStatusDteTxLED=dfrapStatusDteTxLED, dfrapCfgFrDLCIMode=dfrapCfgFrDLCIMode, dfrapPerfThruput=dfrapPerfThruput, dfrapDiagDdsLclLpbk=dfrapDiagDdsLclLpbk, dfrapPerfThruputPerDlciValue=dfrapPerfThruputPerDlciValue, dfrapCfgTransitDelayInterface=dfrapCfgTransitDelayInterface, dfrapV54LoopbackEnabledTrap=dfrapV54LoopbackEnabledTrap, dfrapPerfIcmpPerDlciTxTimestpRep=dfrapPerfIcmpPerDlciTxTimestpRep, dfrapCfgFrPerfLTDlciFilterTable=dfrapCfgFrPerfLTDlciFilterTable, dfrapPerfRoutingTotalRxOspf=dfrapPerfRoutingTotalRxOspf, dfrapCfgFrPerfTimers=dfrapCfgFrPerfTimers, dfrapPerfIpxTotalTxNcp=dfrapPerfIpxTotalTxNcp, dfrapCfgDteDcdOutput=dfrapCfgDteDcdOutput, dfrapPerfIcmpPerDlciRxTimeExcd=dfrapPerfIcmpPerDlciRxTimeExcd, dfrapTftpAbortedTrap=dfrapTftpAbortedTrap, dfrapPerfThruputPerIntfRxByteCnt=dfrapPerfThruputPerIntfRxByteCnt, dfrapPerfNetwProtoTotalTable=dfrapPerfNetwProtoTotalTable, dfrapPerfLmiTotalTxFullStatByteCnt=dfrapPerfLmiTotalTxFullStatByteCnt, dfrapCfgMgmtTable=dfrapCfgMgmtTable, dfrapDiagBertStatus=dfrapDiagBertStatus, dfrapPerfIpxTotalTxSap=dfrapPerfIpxTotalTxSap, dfrapPerfIcmpTotalTxPktTooBig=dfrapPerfIcmpTotalTxPktTooBig, dfrapDiagVLOOP=dfrapDiagVLOOP, dfrapCfgSnmpTable=dfrapCfgSnmpTable, dfrapCfgFrPerfUserProtocolsTable=dfrapCfgFrPerfUserProtocolsTable, dfrapPerfLmiTotalRxLivoStatByteCnt=dfrapPerfLmiTotalRxLivoStatByteCnt, dfrapSimplexCurrentLoopbackEnabledTrap=dfrapSimplexCurrentLoopbackEnabledTrap, dfrapCfgSnmpFrTrap=dfrapCfgSnmpFrTrap, dfrapPerfNetwProtoPerDlciRxAnnexG=dfrapPerfNetwProtoPerDlciRxAnnexG, dfrapPerfApplicationTotalRxCustom2=dfrapPerfApplicationTotalRxCustom2, dfrapPerfLmiTotalTxLivoEnqByteCnt=dfrapPerfLmiTotalTxLivoEnqByteCnt, dfrapPerfNetwLongTermProtocol=dfrapPerfNetwLongTermProtocol, dfrapPerfMgmtIpIPOutDscrd=dfrapPerfMgmtIpIPOutDscrd, dfrapPerfNetwProtoPerDlciRxTotal=dfrapPerfNetwProtoPerDlciRxTotal, dfrapPerfNetwProtoTotalRxSna=dfrapPerfNetwProtoTotalRxSna, dfrapSysPPPSupported=dfrapSysPPPSupported, dfrapStatusDdsStatusLED=dfrapStatusDdsStatusLED, dfrapCfgFrPerfDlciUtilDuration=dfrapCfgFrPerfDlciUtilDuration, dfrapLocalNetLoopbackDisabledTrap=dfrapLocalNetLoopbackDisabledTrap, dfrapPerfLmiTotalRxLivoEnqByteCnt=dfrapPerfLmiTotalRxLivoEnqByteCnt, dfrapPerfSnaTotalInterval=dfrapPerfSnaTotalInterval, dfrapPerfApplicationTotalTxCustom2=dfrapPerfApplicationTotalTxCustom2, dfrapPerfArpTotalTxInarpRep=dfrapPerfArpTotalTxInarpRep, dfrapPerfNetworkShortTerm=dfrapPerfNetworkShortTerm, dfrapStatusMgmtDefaultDLCINo=dfrapStatusMgmtDefaultDLCINo, dfrapPerfApplicationPerDlciRxFtp=dfrapPerfApplicationPerDlciRxFtp, dfrapStatusDteDsr=dfrapStatusDteDsr, dfrapPerfSnaPerDlciTable=dfrapPerfSnaPerDlciTable, dfrapCfgTelnetCliLcdPassword=dfrapCfgTelnetCliLcdPassword, dfrapTftpNoFileTrap=dfrapTftpNoFileTrap, dfrapPerfIcmpPerDlciRxAddrMaskReq=dfrapPerfIcmpPerDlciRxAddrMaskReq, dfrapPerfNetwProtoTotalRxArp=dfrapPerfNetwProtoTotalRxArp, dfrapPerfIpTotalTxOther=dfrapPerfIpTotalTxOther, dfrapDiagVBERTRate=dfrapDiagVBERTRate, dfrapPerfApplicationPerDlciRxSmtp=dfrapPerfApplicationPerDlciRxSmtp, dfrapPerfApplicationTotalRxTftp=dfrapPerfApplicationTotalRxTftp, dfrapPerfArpTotalInterval=dfrapPerfArpTotalInterval, dfrapCfgCommDataBits=dfrapCfgCommDataBits, dfrapPerfMgmtIpUDPNoPorts=dfrapPerfMgmtIpUDPNoPorts, dfrapPerfThruputPerDlciChangeTime=dfrapPerfThruputPerDlciChangeTime, dfrapDteSignalDtrOnTrap=dfrapDteSignalDtrOnTrap, dfrapPerfCirRxPercentUtilizationRange4=dfrapPerfCirRxPercentUtilizationRange4, dfrapPerfArpTotalRxRarpRep=dfrapPerfArpTotalRxRarpRep, dfrapCfgTransitDelayDlciValue=dfrapCfgTransitDelayDlciValue, dfrapPerfMgmtIpIFInOctets=dfrapPerfMgmtIpIFInOctets, dfrapPerfSnaPerDlciTxAppn=dfrapPerfSnaPerDlciTxAppn, dfrapCfgFrTable=dfrapCfgFrTable, dfrapPerfMgmtIpICMPInTimeExcds=dfrapPerfMgmtIpICMPInTimeExcds, dfrapPerfNetwProtoTotalTxIpx=dfrapPerfNetwProtoTotalTxIpx, dfrapPerfApplicationTotalTxFtp=dfrapPerfApplicationTotalTxFtp, dfrapPerfArpTotalEntry=dfrapPerfArpTotalEntry, dfrapPerfLmiPerDlciRxLivoStatByteCnt=dfrapPerfLmiPerDlciRxLivoStatByteCnt, dfrapDLCIActiveTrap=dfrapDLCIActiveTrap, dfrapTrapMutingInactive=dfrapTrapMutingInactive, dfrapPerfSnaTotalTxTotal=dfrapPerfSnaTotalTxTotal, dfrapPerfIcmpPerDlciValue=dfrapPerfIcmpPerDlciValue, dfrapPerfNetwLongTermAltTable=dfrapPerfNetwLongTermAltTable, dfrapPerfCurrentPerDlciUtilizationTable=dfrapPerfCurrentPerDlciUtilizationTable, dfrapCfgSnmpMgrInterface=dfrapCfgSnmpMgrInterface, dfrapPerfIpPerDlciRxUdp=dfrapPerfIpPerDlciRxUdp, dfrapPerfMgmtIpIPOutRqst=dfrapPerfMgmtIpIPOutRqst, dfrapPerfNetwProtoPerDlciTxIp=dfrapPerfNetwProtoPerDlciTxIp, dfrapPerfNetwLongTermAltDlci=dfrapPerfNetwLongTermAltDlci, dfrapPerfMgmtIpIFOutOctets=dfrapPerfMgmtIpIFOutOctets, dfrapCfgCommFlowCtrl=dfrapCfgCommFlowCtrl, dfrapDiagDdsTable=dfrapDiagDdsTable, dfrapPerfArpPerDlciTxRarpRep=dfrapPerfArpPerDlciTxRarpRep, dfrapStatusDteRts=dfrapStatusDteRts, dfrapDiagVBERTSize=dfrapDiagVBERTSize, dfrapPerfIpxPerDlciRxNetbios=dfrapPerfIpxPerDlciRxNetbios, dfrapDiagBertPattern=dfrapDiagBertPattern, dfrapBertInitiatedTrap=dfrapBertInitiatedTrap, dfrapPerfApplicationPerDlciRxHttp=dfrapPerfApplicationPerDlciRxHttp, dfrapCfgFrPerfUserProtocolsPortNum=dfrapCfgFrPerfUserProtocolsPortNum, dfrapSystem=dfrapSystem, sync=sync, dfrapPerfRoutingTotalTxNetbios=dfrapPerfRoutingTotalTxNetbios, dfrapPerfMgmtIpIPInProtUnk=dfrapPerfMgmtIpIPInProtUnk, dfrapPerfSnaPerDlciTxPeriph=dfrapPerfSnaPerDlciTxPeriph, dfrapPerfLmiPerDlciTxFullStatByteCnt=dfrapPerfLmiPerDlciTxFullStatByteCnt, dfrapPvcTxUtilizationExceededTrap=dfrapPvcTxUtilizationExceededTrap, dfrapPerfApplicationPerDlciRxTelnet=dfrapPerfApplicationPerDlciRxTelnet, dfrapCfgVnipTable=dfrapCfgVnipTable, dfrapCfgIpTable=dfrapCfgIpTable, dfrapCfgIpTelnetEnable=dfrapCfgIpTelnetEnable, dfrapPerfLmiPerDlciTable=dfrapPerfLmiPerDlciTable, dfrapPerfMgmtIpUDPStatsTable=dfrapPerfMgmtIpUDPStatsTable, dfrapVnipTopologyEntry=dfrapVnipTopologyEntry, dfrapCfgAppTable=dfrapCfgAppTable, dfrapVnipTopoVLOOPStatus=dfrapVnipTopoVLOOPStatus, dfrapPerfIpTotalTable=dfrapPerfIpTotalTable, dfrapTftpInvalidFileTrap=dfrapTftpInvalidFileTrap, dfrapPerfCirPercentUtilization=dfrapPerfCirPercentUtilization, dfrapPerfApplicationTotalTable=dfrapPerfApplicationTotalTable, dfrapCfgTftpNumBytes=dfrapCfgTftpNumBytes, dfrapVnipTopologyInterface=dfrapVnipTopologyInterface, dfrapVnipTopoTDNumSamples=dfrapVnipTopoTDNumSamples, dfrapCfgVnipInitTimer=dfrapCfgVnipInitTimer, dfrapPerfIpxPerDlciRxSap=dfrapPerfIpxPerDlciRxSap, dfrapPerfRoutingPerDlciRxRip=dfrapPerfRoutingPerDlciRxRip, dfrapStatusMgmtChannel=dfrapStatusMgmtChannel, dfrapCfgFrPerfLTProtocolFilterTableClear=dfrapCfgFrPerfLTProtocolFilterTableClear, dfrapPerfArpTotalRxTotal=dfrapPerfArpTotalRxTotal, dfrapEventTrapLogVarBind1=dfrapEventTrapLogVarBind1, dfrapSysPrompt=dfrapSysPrompt, dfrapPerfMgmtIpIFStatsTable=dfrapPerfMgmtIpIFStatsTable, dfrapPerfCurrentPerDlciUtilizationDlciValue=dfrapPerfCurrentPerDlciUtilizationDlciValue, dfrapPerfIpTotalRxIgrp=dfrapPerfIpTotalRxIgrp, dfrapSysSerialNo=dfrapSysSerialNo, dfrapEventTrapLogVarBind2=dfrapEventTrapLogVarBind2, dfrapTftpHostUnreachableTrap=dfrapTftpHostUnreachableTrap, dfrapPerfIcmpTotalRxEchoRep=dfrapPerfIcmpTotalRxEchoRep, dfrapPerfIcmpTotalTxRedirect=dfrapPerfIcmpTotalTxRedirect, dfrapPvcRxUtilizationExceededTrap=dfrapPvcRxUtilizationExceededTrap, dfrapCfgTDDeleteDlciValue=dfrapCfgTDDeleteDlciValue, dfrapPerfApplicationTotalRxSnmp=dfrapPerfApplicationTotalRxSnmp, dfrapDiagBertTable=dfrapDiagBertTable, dfrapPerfIcmpPerDlciRxGmQuery=dfrapPerfIcmpPerDlciRxGmQuery, dfrapPerfThruputPerDlciEncapType=dfrapPerfThruputPerDlciEncapType, dfrapDiagVnipIndex=dfrapDiagVnipIndex, dfrapLmiSeqNumMismatchDteTrap=dfrapLmiSeqNumMismatchDteTrap, dfrapCfgFrPerfLTProtocolFilterProtocol=dfrapCfgFrPerfLTProtocolFilterProtocol, dfrapPerfThruputPerDlciCirType=dfrapPerfThruputPerDlciCirType, dfrapCfgTDDeleteTable=dfrapCfgTDDeleteTable, dfrapPerfNetwProtoTotalTxArp=dfrapPerfNetwProtoTotalTxArp, dfrapStatus=dfrapStatus, dfrapPerfIpxTotalTxRip=dfrapPerfIpxTotalTxRip, dfrapPerfNetwProtoPerDlciRxOther=dfrapPerfNetwProtoPerDlciRxOther, dfrapTftpRequestedTrap=dfrapTftpRequestedTrap, dfrapPerfCirRxPercentUtilizationRange1=dfrapPerfCirRxPercentUtilizationRange1, dfrapCfgSecurityTable=dfrapCfgSecurityTable, dfrapPerfCirTxPercentUtilizationRange2=dfrapPerfCirTxPercentUtilizationRange2, dfrapPerfApplicationTotalTxTelnet=dfrapPerfApplicationTotalTxTelnet, dfrapPerfThruputPerIntfRxFrameCnt=dfrapPerfThruputPerIntfRxFrameCnt, dfrapPerfApplicationPerDlciTxSmtp=dfrapPerfApplicationPerDlciTxSmtp, dfrapCfgFrPerfLTDlciFilterTableClear=dfrapCfgFrPerfLTDlciFilterTableClear, dfrapPerfCurrentUnitUtilization=dfrapPerfCurrentUnitUtilization, dfrapPerfIpPerDlciRxTotal=dfrapPerfIpPerDlciRxTotal, dfrapPerfIpxPerDlciTxTotal=dfrapPerfIpxPerDlciTxTotal, dfrapPerfArpPerDlciTxOther=dfrapPerfArpPerDlciTxOther, dfrapSysLTFNumDlcis=dfrapSysLTFNumDlcis, dfrapCfgTftpStatus=dfrapCfgTftpStatus, dfrapPerfSnaTotalTable=dfrapPerfSnaTotalTable, dfrapSysBRISupported=dfrapSysBRISupported, dfrapDiagBertTimeElaps=dfrapDiagBertTimeElaps, dfrapLmiSourcingChangeNetDdsTrap=dfrapLmiSourcingChangeNetDdsTrap, dfrapPerfMgmtIpICMPInErrors=dfrapPerfMgmtIpICMPInErrors, dfrapDiagUnitLocLoop=dfrapDiagUnitLocLoop, dfrapCfgSnmpMgrEntry=dfrapCfgSnmpMgrEntry, dfrapCfgTransitDelayTable=dfrapCfgTransitDelayTable, dfrapPerfNetwProtoPerDlciTxIpx=dfrapPerfNetwProtoPerDlciTxIpx, dfrapPerfSnaPerDlciTxOther=dfrapPerfSnaPerDlciTxOther, dfrapVloopUp=dfrapVloopUp, dfrapCfgDteCtsOutput=dfrapCfgDteCtsOutput, dfrapPerformance=dfrapPerformance, dfrapPerfArpTotalRxInarpRep=dfrapPerfArpTotalRxInarpRep, dfrapPerfNetwProtoPerDlciTxOther=dfrapPerfNetwProtoPerDlciTxOther, dfrapCfgFrPerfDlciDefaultUtilThreshold=dfrapCfgFrPerfDlciDefaultUtilThreshold, dfrapPerfCurrentPerDlciAggregateUtilization=dfrapPerfCurrentPerDlciAggregateUtilization, dfrapEventTrapLogTable=dfrapEventTrapLogTable, dfrapPerfSnaPerDlciRxTotal=dfrapPerfSnaPerDlciRxTotal, dfrapSysContact=dfrapSysContact, dfrapCfgDteDsrOutput=dfrapCfgDteDsrOutput, dfrapEventLogAltArray=dfrapEventLogAltArray, dfrapDiagDteV54Lpbk=dfrapDiagDteV54Lpbk, dfrapPerfMgmtIpICMPInEchoReps=dfrapPerfMgmtIpICMPInEchoReps, dfrapPerfIpxTotalRxNcp=dfrapPerfIpxTotalRxNcp, dfrapPerfArpPerDlciTxTotal=dfrapPerfArpPerDlciTxTotal, dfrapCfgCommMode=dfrapCfgCommMode, dfrapCfgFrPerfDlciNamesCirValue=dfrapCfgFrPerfDlciNamesCirValue, dfrapPerfIpxTotalTxNetbios=dfrapPerfIpxTotalTxNetbios, dfrapVloopDownViaRemote=dfrapVloopDownViaRemote, dfrapPerfThruputPerDlciTxUtilizationStatus=dfrapPerfThruputPerDlciTxUtilizationStatus, dfrapSysNumDdsInstalled=dfrapSysNumDdsInstalled, dfrapCfgTftpIpAddress=dfrapCfgTftpIpAddress, dfrapLmiSourcing=dfrapLmiSourcing, dfrapPerfThruputPerDlciEntry=dfrapPerfThruputPerDlciEntry, dfrapPerfApplicationPerDlciTxCustom3=dfrapPerfApplicationPerDlciTxCustom3, dfrapPerfIpxTotalRxTotal=dfrapPerfIpxTotalRxTotal, dfrapTftpProgrammingTrap=dfrapTftpProgrammingTrap, dfrapPerfSnaTotalTxAppn=dfrapPerfSnaTotalTxAppn, dfrapPerfLmiTotalTxOtherByteCnt=dfrapPerfLmiTotalTxOtherByteCnt, dfrapEventTrapLogGenericEvent=dfrapEventTrapLogGenericEvent, dfrapVloopUpViaRemote=dfrapVloopUpViaRemote, dfrapPerfIpPerDlciTxIgrp=dfrapPerfIpPerDlciTxIgrp, dfrapPerfIpPerDlciEntry=dfrapPerfIpPerDlciEntry, dfrapPerfArpTotalRxArpReq=dfrapPerfArpTotalRxArpReq, dfrapPerfNetwLongTermDlci=dfrapPerfNetwLongTermDlci, dfrapStatusLedTable=dfrapStatusLedTable, dfrapCfgFrDLCIValue=dfrapCfgFrDLCIValue, dfrapPerfIpxPerDlciRxTotal=dfrapPerfIpxPerDlciRxTotal, dfrapSysSelDTESupported=dfrapSysSelDTESupported, dfrapPerfApplicationPerDlciRxCustom1=dfrapPerfApplicationPerDlciRxCustom1, dfrapPerfThruputCmdAllStsDlciResetAll=dfrapPerfThruputCmdAllStsDlciResetAll, dfrapPerfIcmpPerDlciRxEchoReq=dfrapPerfIcmpPerDlciRxEchoReq, dfrapDiagUnitTable=dfrapDiagUnitTable, dfrapPerfIcmpPerDlciTxTimestpReq=dfrapPerfIcmpPerDlciTxTimestpReq, dfrapPerfNetwLongTermEntry=dfrapPerfNetwLongTermEntry, dfrapCfgDteClockMode=dfrapCfgDteClockMode, dfrapCfgFrPerfUserProtocolsTableClear=dfrapCfgFrPerfUserProtocolsTableClear, dfrapSysNumT1Installed=dfrapSysNumT1Installed, dfrapDiagUnitReset=dfrapDiagUnitReset, dfrapCfgTftpFilename=dfrapCfgTftpFilename, dfrapPerfIcmpPerDlciRxRedirect=dfrapPerfIcmpPerDlciRxRedirect, dfrapDiagVnipIpAddr=dfrapDiagVnipIpAddr, Index=Index, dfrapPerfThruputCmdRemoveStsDlci=dfrapPerfThruputCmdRemoveStsDlci, dfrapCfgIpTelnetAutoLogOut=dfrapCfgIpTelnetAutoLogOut, dfrapVnipTopoVBERTStatus=dfrapVnipTopoVBERTStatus, dfrapPerfApplicationTotalTxCustom1=dfrapPerfApplicationTotalTxCustom1, dfrapPerfCurrentDteUtilization=dfrapPerfCurrentDteUtilization, dfrapCfgFrPerfLTProtocolFilterIndex=dfrapCfgFrPerfLTProtocolFilterIndex, dfrapCfgDdsLoopRate=dfrapCfgDdsLoopRate, dfrapSysMLSupported=dfrapSysMLSupported, dfrapPerfRoutingPerDlciEntry=dfrapPerfRoutingPerDlciEntry, dfrapPerfThruputPerDlciRxFecn=dfrapPerfThruputPerDlciRxFecn, dfrapPerfThruputPerDlciUptime=dfrapPerfThruputPerDlciUptime, dfrapCfgFrPerfUnprovDlcisDelete=dfrapCfgFrPerfUnprovDlcisDelete, enterprises=enterprises, dfrapPerfArpPerDlciRxArpRep=dfrapPerfArpPerDlciRxArpRep, dfrapPerfApplicationPerDlciRxSnmpTrap=dfrapPerfApplicationPerDlciRxSnmpTrap, dfrapPerfIcmpPerDlciTxSrcQuench=dfrapPerfIcmpPerDlciTxSrcQuench, dfrapPerfNetwLongTermAltProtocol=dfrapPerfNetwLongTermAltProtocol, dfrapPvcRxUtilizationClearedTrap=dfrapPvcRxUtilizationClearedTrap, dfrapSysLocation=dfrapSysLocation, dfrapPerfNetwProtoPerDlciEntry=dfrapPerfNetwProtoPerDlciEntry, dfrapPerfIpPerDlciTxUdp=dfrapPerfIpPerDlciTxUdp, dfrapPerfIcmpTotalTxGmQuery=dfrapPerfIcmpTotalTxGmQuery, dfrapPerfThruputCmdReplaceDlciNewValue=dfrapPerfThruputCmdReplaceDlciNewValue, dfrapConfiguration=dfrapConfiguration)
mibBuilder.exportSymbols("DFRAP-MIB", dfrapDiagDdsRmtLpbk=dfrapDiagDdsRmtLpbk, dfrapPerfNetwProtoTotalTxCisco=dfrapPerfNetwProtoTotalTxCisco, dfrapPerfLmiPerDlciTxFullEnqByteCnt=dfrapPerfLmiPerDlciTxFullEnqByteCnt, dfrapPerfIpPerDlciRxIcmp=dfrapPerfIpPerDlciRxIcmp, dfrapPerfIpxPerDlciRxSpx=dfrapPerfIpxPerDlciRxSpx, dfrapPerfNetwProtoPerDlciTxSna=dfrapPerfNetwProtoPerDlciTxSna, dfrapStatusDteRxLED=dfrapStatusDteRxLED, dfrapPerfNetwProtoTotalRxOther=dfrapPerfNetwProtoTotalRxOther, dfrapStatusDdsLoopLength=dfrapStatusDdsLoopLength, dfrapPerfSnaTotalRxTotal=dfrapPerfSnaTotalRxTotal, dfrapPerfIcmpTotalRxAddrMaskRep=dfrapPerfIcmpTotalRxAddrMaskRep, dfrapPerfMgmtIp=dfrapPerfMgmtIp, dfrapPerfApplicationPerDlciRxCustom2=dfrapPerfApplicationPerDlciRxCustom2, dfrapPerfArpTotalRxInarpReq=dfrapPerfArpTotalRxInarpReq, dfrapPerfIcmpPerDlciRxDestUnr=dfrapPerfIcmpPerDlciRxDestUnr, dfrapPerfIcmpTotalTxDestUnr=dfrapPerfIcmpTotalTxDestUnr, dfrapPerfThruputPerIntfTxFrameCnt=dfrapPerfThruputPerIntfTxFrameCnt, dfrapPerfIcmpPerDlciEntry=dfrapPerfIcmpPerDlciEntry, dfrapPerfIpxPerDlciInterval=dfrapPerfIpxPerDlciInterval, dfrapPerfApplicationPerDlciTxFtp=dfrapPerfApplicationPerDlciTxFtp, dfrapPerfIcmpTotalRxAddrMaskReq=dfrapPerfIcmpTotalRxAddrMaskReq, dfrapPerfThruputCmdReplaceDlciValue=dfrapPerfThruputCmdReplaceDlciValue, dfrapPerfIpxTotalRxOther=dfrapPerfIpxTotalRxOther, dfrapPerfIcmpTotalRxSrcQuench=dfrapPerfIcmpTotalRxSrcQuench, dfrapPerfApplicationTotalRxCustom3=dfrapPerfApplicationTotalRxCustom3, dfrapPerfCirTxPercentUtilizationRange7=dfrapPerfCirTxPercentUtilizationRange7, dfrapPerfIcmpPerDlciTxGmReport=dfrapPerfIcmpPerDlciTxGmReport, dfrapPerfRoutingPerDlciRxOspf=dfrapPerfRoutingPerDlciRxOspf, dfrapPerfApplicationTotalTxHttp=dfrapPerfApplicationTotalTxHttp, dfrapDiagDteLclLpbk=dfrapDiagDteLclLpbk, dfrapPerfThruputCmdClearAllIntfStats=dfrapPerfThruputCmdClearAllIntfStats, dfrapCfgLcdPassword=dfrapCfgLcdPassword, dfrapPerfMgmtIpICMPInMsgs=dfrapPerfMgmtIpICMPInMsgs, dfrapPerfApplicationPerDlciTxTelnet=dfrapPerfApplicationPerDlciTxTelnet, dfrapPerfSnaPerDlciTxSubarea=dfrapPerfSnaPerDlciTxSubarea, dfrapCfgFrPerfDlciNamesDlciName=dfrapCfgFrPerfDlciNamesDlciName, dfrapPerfIpxTotalRxSap=dfrapPerfIpxTotalRxSap, dfrapPerfSnaTotalRxAppn=dfrapPerfSnaTotalRxAppn, dfrapPerfCirRxPercentUtilizationRange5=dfrapPerfCirRxPercentUtilizationRange5, dfrapPerfIcmpPerDlciTxTimeExcd=dfrapPerfIcmpPerDlciTxTimeExcd, dfrapPerfThruputPerIntfTxByteCnt=dfrapPerfThruputPerIntfTxByteCnt, dfrapPerfCirRxPercentUtilizationRange2=dfrapPerfCirRxPercentUtilizationRange2, dfrapVbertRequestFailed=dfrapVbertRequestFailed, dfrapPerfApplicationPerDlciRxSnmp=dfrapPerfApplicationPerDlciRxSnmp, dfrapPerfLmiTotalTxFullEnqByteCnt=dfrapPerfLmiTotalTxFullEnqByteCnt, dfrapCfgCommBaud=dfrapCfgCommBaud, dfrapCfgFrPerf=dfrapCfgFrPerf, dfrapPerfIpPerDlciTxTotal=dfrapPerfIpPerDlciTxTotal, dfrapPerfRoutingPerDlciInterval=dfrapPerfRoutingPerDlciInterval, dfrapCfgSnmpUtilTrapEnable=dfrapCfgSnmpUtilTrapEnable, dfrapCfgVnipMode=dfrapCfgVnipMode, dfrapCfgTransitDelayNumHops=dfrapCfgTransitDelayNumHops, dfrapPerfIpPerDlciInterval=dfrapPerfIpPerDlciInterval, dfrapSysRDOSupported=dfrapSysRDOSupported, dfrapPerfSnaPerDlciTxNetbios=dfrapPerfSnaPerDlciTxNetbios, dfrapPerfIcmpPerDlciTxRedirect=dfrapPerfIcmpPerDlciTxRedirect, dfrapCfgUpdate=dfrapCfgUpdate, dfrapPerfMgmtIpIPInRcv=dfrapPerfMgmtIpIPInRcv, dfrapLocalDteLoopbackEnabledTrap=dfrapLocalDteLoopbackEnabledTrap, dfrapPerfThruputPerDlciTable=dfrapPerfThruputPerDlciTable, dfrapPerfThruputPerIntfEntry=dfrapPerfThruputPerIntfEntry, dfrapPerfRoutingPerDlciValue=dfrapPerfRoutingPerDlciValue, dfrapPerfSnaPerDlciRxOther=dfrapPerfSnaPerDlciRxOther, dfrapPerfIpxPerDlciTxNetbios=dfrapPerfIpxPerDlciTxNetbios, dfrapPerfApplicationTotalRxHttp=dfrapPerfApplicationTotalRxHttp, dfrapPerfIcmpTotalTxTimeExcd=dfrapPerfIcmpTotalTxTimeExcd, dfrapVnipTopoVBertTransitDelayMax=dfrapVnipTopoVBertTransitDelayMax, dfrapPerfNetwProtoPerDlciRxVnip=dfrapPerfNetwProtoPerDlciRxVnip, dfrapLmiSeqNumMismatchDdsTrap=dfrapLmiSeqNumMismatchDdsTrap, dfrapPerfArpPerDlciTxArpReq=dfrapPerfArpPerDlciTxArpReq, dfrapPerfIcmpTotalTxSrcQuench=dfrapPerfIcmpTotalTxSrcQuench, dfrapPerfMgmtIpIPInAddrErr=dfrapPerfMgmtIpIPInAddrErr, dfrapCfgTDDeleteEntry=dfrapCfgTDDeleteEntry, dfrapVnipTopoTDMaxDelay=dfrapVnipTopoTDMaxDelay, dfrapVnipTopoTDMinDelay=dfrapVnipTopoTDMinDelay, dfrapVnipTopoVBertRxDEClrFrames=dfrapVnipTopoVBertRxDEClrFrames, dfrapStatusMgmtInterface=dfrapStatusMgmtInterface, dfrapPerfIpTotalTxUdp=dfrapPerfIpTotalTxUdp, dfrapPerfCirRxPercentUtilizationRange3=dfrapPerfCirRxPercentUtilizationRange3, dfrapCfgFrAddrResMode=dfrapCfgFrAddrResMode, dfrapPerfMgmtIpTCPActiveOpens=dfrapPerfMgmtIpTCPActiveOpens, dfrapPerfIcmpTotalEntry=dfrapPerfIcmpTotalEntry, dfrapPerfThruputCmdAllStsDlciReset=dfrapPerfThruputCmdAllStsDlciReset, dfrapPerfIcmpPerDlciRxTotal=dfrapPerfIcmpPerDlciRxTotal, dfrapPerfThruputCmdReplaceDlciEntry=dfrapPerfThruputCmdReplaceDlciEntry, dfrapCfgFrPerfLTProtocolFilterTable=dfrapCfgFrPerfLTProtocolFilterTable, dfrapNonLatchingLoopbackEnabledTrap=dfrapNonLatchingLoopbackEnabledTrap, dfrapVnipTransitDelayClear=dfrapVnipTransitDelayClear, dfrapPerfCurrentAggregateUtilization=dfrapPerfCurrentAggregateUtilization, dfrapSysExtTimSupported=dfrapSysExtTimSupported, dfrapPerfRoutingTotalTxOspf=dfrapPerfRoutingTotalTxOspf, dfrapCfgTftpInitiate=dfrapCfgTftpInitiate, dfrapPerfIcmpTotalInterval=dfrapPerfIcmpTotalInterval, dfrapPerfIpxTotalInterval=dfrapPerfIpxTotalInterval, dfrapPerfMgmtIpICMPOutEchoReps=dfrapPerfMgmtIpICMPOutEchoReps, dfrapDiagBertErrSec=dfrapDiagBertErrSec, dfrapPerfIpPerDlciRxOther=dfrapPerfIpPerDlciRxOther, dfrapSysBootRev=dfrapSysBootRev, dfrapPerfIpPerDlciTxTcp=dfrapPerfIpPerDlciTxTcp, dfrapPerfIpTotalTxTotal=dfrapPerfIpTotalTxTotal, dfrapDiagVBERTPktPercent=dfrapDiagVBERTPktPercent, dfrapPerfIpTotalRxTcp=dfrapPerfIpTotalRxTcp, dfrapPerfMgmtIpIPInDlvrs=dfrapPerfMgmtIpIPInDlvrs, dfrapPerfIpTotalRxTotal=dfrapPerfIpTotalRxTotal, dfrapPerfArpTotalTxOther=dfrapPerfArpTotalTxOther, dfrapPerfMgmtIpICMPOutParmProbs=dfrapPerfMgmtIpICMPOutParmProbs, dfrapPerfLmiTotalTxLivoStatByteCnt=dfrapPerfLmiTotalTxLivoStatByteCnt, dfrapPerfApplicationPerDlciRxCustom4=dfrapPerfApplicationPerDlciRxCustom4, dfrapPerfIcmpTotalTxEchoRep=dfrapPerfIcmpTotalTxEchoRep, dfrapPerfIcmpPerDlciTxAddrMaskRep=dfrapPerfIcmpPerDlciTxAddrMaskRep, dfrapPerfNetwLongTermInterval=dfrapPerfNetwLongTermInterval, dfrapPerfNetwLongTermTable=dfrapPerfNetwLongTermTable, dfrapPerfMgmtIpICMPOutMsgs=dfrapPerfMgmtIpICMPOutMsgs, dfrapPerfIpPerDlciTable=dfrapPerfIpPerDlciTable, dfrapPerfApplicationTotalTxCustom3=dfrapPerfApplicationTotalTxCustom3, dfrapPerfIpxTotalTxSpx=dfrapPerfIpxTotalTxSpx, dfrapCfgFrCrcMode=dfrapCfgFrCrcMode, dfrapPerfSnaTotalRxOther=dfrapPerfSnaTotalRxOther, dfrapStatusDdsLineStatus=dfrapStatusDdsLineStatus, dfrapVnipTopoTDAvgDelay=dfrapVnipTopoTDAvgDelay, dfrapTftpCorruptFileTrap=dfrapTftpCorruptFileTrap, dfrapPerfSnaPerDlciTxTotal=dfrapPerfSnaPerDlciTxTotal, dfrapPerfNetwLongTermAltEntry=dfrapPerfNetwLongTermAltEntry, dfrapPerfArpPerDlciTxArpRep=dfrapPerfArpPerDlciTxArpRep, dfrapStatusDdsTable=dfrapStatusDdsTable, dfrapCfgFrPerfTimersLTInterval=dfrapCfgFrPerfTimersLTInterval, dfrapCfgFrPerfDlciNamesCirType=dfrapCfgFrPerfDlciNamesCirType, dfrapPerfIcmpTotalTxAddrMaskReq=dfrapPerfIcmpTotalTxAddrMaskReq, dfrapPerfRoutingPerDlciTable=dfrapPerfRoutingPerDlciTable, dfrapCfgFrLmiFullStatus=dfrapCfgFrLmiFullStatus, dfrapPerfThruputPerDlciTxByte=dfrapPerfThruputPerDlciTxByte, dfrapLmiSourcingChangeUserDdsTrap=dfrapLmiSourcingChangeUserDdsTrap, dfrapPerfArpTotalTxRarpRep=dfrapPerfArpTotalTxRarpRep, dfrapPerfThruputCmdClearDlciStats=dfrapPerfThruputCmdClearDlciStats, dfrapPerfLmiPerDlciTxLivoStatByteCnt=dfrapPerfLmiPerDlciTxLivoStatByteCnt, dfrapCfgTransitDelayRcvSummaryCancel=dfrapCfgTransitDelayRcvSummaryCancel, dfrapPerfIpxPerDlciRxNcp=dfrapPerfIpxPerDlciRxNcp, dfrapPerfIpxTotalTable=dfrapPerfIpxTotalTable, dfrapPerfThruputCmdAvailabilityStsDlciResetAll=dfrapPerfThruputCmdAvailabilityStsDlciResetAll, dfrapSysSLIPSupported=dfrapSysSLIPSupported, dfrapPerfNetwProtoTotalRxIp=dfrapPerfNetwProtoTotalRxIp, dfrapPerfNetwProtoPerDlciValue=dfrapPerfNetwProtoPerDlciValue, dfrapPerfIcmpPerDlciTxPktTooBig=dfrapPerfIcmpPerDlciTxPktTooBig, dfrapPerfThruputPerIntfRxCrcErrCnt=dfrapPerfThruputPerIntfRxCrcErrCnt, dfrapPerfIcmpPerDlciRxPktTooBig=dfrapPerfIcmpPerDlciRxPktTooBig, dfrapPerfCurrentWanUtilization=dfrapPerfCurrentWanUtilization, dfrapPerfMgmtIpIPOutNoRt=dfrapPerfMgmtIpIPOutNoRt, dfrapDteSignalRtsOnTrap=dfrapDteSignalRtsOnTrap, dfrapVnipTopologyDlci=dfrapVnipTopologyDlci, dfrapPerfCirTxPercentUtilizationRange5=dfrapPerfCirTxPercentUtilizationRange5, dfrapPerfIpxTotalEntry=dfrapPerfIpxTotalEntry, dfrapCfgFrPerfDlciNamesTableClear=dfrapCfgFrPerfDlciNamesTableClear, dfrapPerfThruputPerDlciTxFrame=dfrapPerfThruputPerDlciTxFrame, dfrapPerfIpTotalTxIgrp=dfrapPerfIpTotalTxIgrp, dfrapLineInServiceTrap=dfrapLineInServiceTrap, dfrapVnipTopologyTable=dfrapVnipTopologyTable, dfrapPerfLmiTotalTable=dfrapPerfLmiTotalTable, dfrapSysNumMaintInstalled=dfrapSysNumMaintInstalled, dfrapSysETHSupported=dfrapSysETHSupported, dfrapVnipTopoVBertRxDESetFrames=dfrapVnipTopoVBertRxDESetFrames, dfrapEventTrapLogVarBind3=dfrapEventTrapLogVarBind3, dfrapPerfApplicationTotalTxCustom4=dfrapPerfApplicationTotalTxCustom4, dfrapEventLogCurrentSeqNum=dfrapEventLogCurrentSeqNum, dfrapPerfArpPerDlciTxInarpRep=dfrapPerfArpPerDlciTxInarpRep, dfrapPerfNetworkLongTerm=dfrapPerfNetworkLongTerm, dfrapPerfNetwProtoPerDlciInterval=dfrapPerfNetwProtoPerDlciInterval, dfrapLineFailureTrap=dfrapLineFailureTrap, dfrapPerfMgmtIpTCPStatsTable=dfrapPerfMgmtIpTCPStatsTable, dfrapTrapMutingActive=dfrapTrapMutingActive, dfrapPerfMgmtIpTCPCurrEstab=dfrapPerfMgmtIpTCPCurrEstab, dfrapCfgStatus=dfrapCfgStatus, dfrapPerfCirRxPercentUtilizationRange7=dfrapPerfCirRxPercentUtilizationRange7, dfrapPerfThruputCmdCountsStsDlciResetAll=dfrapPerfThruputCmdCountsStsDlciResetAll, dfrapSysName=dfrapSysName, dfrapPerfNetwProtoTotalRxTotal=dfrapPerfNetwProtoTotalRxTotal, dfrapPerfIpxTotalTxTotal=dfrapPerfIpxTotalTxTotal, dfrapPerfIcmpTotalRxTimestpRep=dfrapPerfIcmpTotalRxTimestpRep, dfrapPerfIcmpTotalRxEchoReq=dfrapPerfIcmpTotalRxEchoReq, dfrapCfgFrPerfDlciNamesDelete=dfrapCfgFrPerfDlciNamesDelete, dfrapPerfMgmtIpIPInDscrd=dfrapPerfMgmtIpIPInDscrd, dfrapPerfIcmpTotalRxDestUnr=dfrapPerfIcmpTotalRxDestUnr, dfrapPerfSnaTotalTxSubarea=dfrapPerfSnaTotalTxSubarea, dfrapPerfNetwProtoTotalTxVnip=dfrapPerfNetwProtoTotalTxVnip, dfrapPerfThruputPerDlciRxUtilizationStatus=dfrapPerfThruputPerDlciRxUtilizationStatus, dfrapPerfArpPerDlciInterval=dfrapPerfArpPerDlciInterval, dfrapPerfThruputCmdAvailabilityStsDlciReset=dfrapPerfThruputCmdAvailabilityStsDlciReset, dfrapCfgFrPerfTimersSTInterval=dfrapCfgFrPerfTimersSTInterval, dfrapVnipTopologyNumHops=dfrapVnipTopologyNumHops, dfrapPerfIcmpPerDlciRxSrcQuench=dfrapPerfIcmpPerDlciRxSrcQuench, dfrapPerfArpTotalTxInarpReq=dfrapPerfArpTotalTxInarpReq, dfrapPerfCirRxPercentUtilizationRange6=dfrapPerfCirRxPercentUtilizationRange6, dfrapPerfRoutingTotalInterval=dfrapPerfRoutingTotalInterval, dfrapCfgSnmpMgrIP=dfrapCfgSnmpMgrIP, dfrapPerfLmiTotalRxFullEnqByteCnt=dfrapPerfLmiTotalRxFullEnqByteCnt, dfrapEventLogFreeze=dfrapEventLogFreeze, dfrapPerfIcmpTotalRxTimeExcd=dfrapPerfIcmpTotalRxTimeExcd, dfrapPerfArpPerDlciRxArpReq=dfrapPerfArpPerDlciRxArpReq, dfrapPerfIpxTotalRxSpx=dfrapPerfIpxTotalRxSpx, dfrapPerfNetwProtoTotalRxVnip=dfrapPerfNetwProtoTotalRxVnip, dfrapPerfNetwProtoTotalTxIp=dfrapPerfNetwProtoTotalTxIp, dfrapCfgDteTiming=dfrapCfgDteTiming, dfrapCfgUnlock=dfrapCfgUnlock, dfrapPerfIcmpPerDlciRxAddrMaskRep=dfrapPerfIcmpPerDlciRxAddrMaskRep, dfrapEventLogAltSeqNum=dfrapEventLogAltSeqNum, dfrapPerfLmiPerDlciTxTotalByteCnt=dfrapPerfLmiPerDlciTxTotalByteCnt, dfrapPerfCirPercentUtilizationInterval=dfrapPerfCirPercentUtilizationInterval, dfrapPerfArpTotalTxTotal=dfrapPerfArpTotalTxTotal, dfrapPerfIcmpPerDlciTxAddrMaskReq=dfrapPerfIcmpPerDlciTxAddrMaskReq, dfrapPerfMgmtIpICMPOutDestUnreachs=dfrapPerfMgmtIpICMPOutDestUnreachs, dfrapPerfNetwProtoTotalRxIpx=dfrapPerfNetwProtoTotalRxIpx, dfrapPerfCirTxPercentUtilizationRange4=dfrapPerfCirTxPercentUtilizationRange4, dfrapPerfLmiTotalInterval=dfrapPerfLmiTotalInterval, dfrapPerfArpPerDlciRxRarpRep=dfrapPerfArpPerDlciRxRarpRep, dfrapCfgID=dfrapCfgID, dfrapPerfNetwProtoTotalTxOther=dfrapPerfNetwProtoTotalTxOther, dfrapPerfCirTxPercentUtilizationRange3=dfrapPerfCirTxPercentUtilizationRange3, dfrapPerfArpTotalTxArpReq=dfrapPerfArpTotalTxArpReq, dfrapBadConfigTrap=dfrapBadConfigTrap, dfrapPerfIcmpPerDlciTable=dfrapPerfIcmpPerDlciTable, dfrapBertCompletedTrap=dfrapBertCompletedTrap, dfrapPerfIpTotalRxUdp=dfrapPerfIpTotalRxUdp, dfrapDiagVnipTable=dfrapDiagVnipTable, dfrapStatusDteCts=dfrapStatusDteCts, dfrapCfgIpMyIP=dfrapCfgIpMyIP, dfrapPerfIcmpPerDlciRxEchoRep=dfrapPerfIcmpPerDlciRxEchoRep, dfrapPerfApplicationTotalRxFtp=dfrapPerfApplicationTotalRxFtp, dfrapPerfArpPerDlciTxRarpReq=dfrapPerfArpPerDlciTxRarpReq, dfrapDiagDteRmtV54Lpbk=dfrapDiagDteRmtV54Lpbk, dfrapSysTKRSupported=dfrapSysTKRSupported, dfrapPerfIcmpPerDlciRxGmReport=dfrapPerfIcmpPerDlciRxGmReport, dfrapPerfNetwProtoPerDlciTxAnnexG=dfrapPerfNetwProtoPerDlciTxAnnexG, dfrapDiagVBERTTestPeriod=dfrapDiagVBERTTestPeriod, dfrapPerfIpPerDlciValue=dfrapPerfIpPerDlciValue, dfrapEventTrapLogTimeStamp=dfrapEventTrapLogTimeStamp, dfrapCfgGetCommunityString=dfrapCfgGetCommunityString, dfrapPerfRoutingTotalEntry=dfrapPerfRoutingTotalEntry, dfrapPerfSnaPerDlciInterval=dfrapPerfSnaPerDlciInterval, dfrapPerfIcmpPerDlciRxTimestpRep=dfrapPerfIcmpPerDlciRxTimestpRep, dfrapPerfArpPerDlciRxInarpRep=dfrapPerfArpPerDlciRxInarpRep, dfrapVbertStarted=dfrapVbertStarted, dfrapPerfMgmtIpICMPStatsTable=dfrapPerfMgmtIpICMPStatsTable, dfrapSysNumDlcisSupported=dfrapSysNumDlcisSupported, dfrapCfgDdsBPVThresholding=dfrapCfgDdsBPVThresholding, dfrapPerfMgmtIpIPStatsTable=dfrapPerfMgmtIpIPStatsTable, dfrapPerfApplicationPerDlciTxCustom1=dfrapPerfApplicationPerDlciTxCustom1, dfrapAlarmType=dfrapAlarmType, dfrapCfgDdsTable=dfrapCfgDdsTable, dfrapLocalUnitLoopbackEnabledTrap=dfrapLocalUnitLoopbackEnabledTrap, dfrapVnipTopoVBertTxDESetFrames=dfrapVnipTopoVBertTxDESetFrames, dfrapPerfNetwProtoPerDlciTxArp=dfrapPerfNetwProtoPerDlciTxArp, dfrapSysResetNode=dfrapSysResetNode, dfrapStatusMgmtDefaultDLCIStatus=dfrapStatusMgmtDefaultDLCIStatus, dfrapPerfThruputPerDlciCreateTime=dfrapPerfThruputPerDlciCreateTime, dfrapPerfArpPerDlciEntry=dfrapPerfArpPerDlciEntry)
mibBuilder.exportSymbols("DFRAP-MIB", dfrapSysSoftRev=dfrapSysSoftRev, dfrapCfgFrPerfLTDlciFilterDlciNum=dfrapCfgFrPerfLTDlciFilterDlciNum, dfrapCfgFrPerfDlciNamesTable=dfrapCfgFrPerfDlciNamesTable, dfrapDiagVnipDlci=dfrapDiagVnipDlci, dfrapPerfNetwProtoPerDlciTxCisco=dfrapPerfNetwProtoPerDlciTxCisco, dfrapNonIncrLmiSeqNumDdsTrap=dfrapNonIncrLmiSeqNumDdsTrap, dfrapPerfRoutingPerDlciTxNetbios=dfrapPerfRoutingPerDlciTxNetbios, dfrapCfgTransitDelayEntry=dfrapCfgTransitDelayEntry, dfrapVBertClear=dfrapVBertClear, dfrapV54LoopbackDisabledTrap=dfrapV54LoopbackDisabledTrap, dfrapPerfIcmpPerDlciTxEchoRep=dfrapPerfIcmpPerDlciTxEchoRep, dfrapBPVThresholdAcceptableTrap=dfrapBPVThresholdAcceptableTrap, dfrapPerfThruputPerDlciTxDe=dfrapPerfThruputPerDlciTxDe, dfrapPerfArpPerDlciValue=dfrapPerfArpPerDlciValue, dfrapStatusDteModeLED=dfrapStatusDteModeLED, dfrapVnipTopoVBertPerUtilEIR=dfrapVnipTopoVBertPerUtilEIR, dfrapPerfIpxPerDlciTxSpx=dfrapPerfIpxPerDlciTxSpx, dfrapSysLTFNumProtocols=dfrapSysLTFNumProtocols, dfrapPerfLmiPerDlciRxLivoEnqByteCnt=dfrapPerfLmiPerDlciRxLivoEnqByteCnt, dfrapCfgFrPerfLTProtocolFilterEntry=dfrapCfgFrPerfLTProtocolFilterEntry, dfrapDiagUnitTimeRemaining=dfrapDiagUnitTimeRemaining, dfrapPerfApplicationTotalInterval=dfrapPerfApplicationTotalInterval, dfrapPerfNetwProtoTotalTxSna=dfrapPerfNetwProtoTotalTxSna, dfrapPerfIcmpTotalTxParamProb=dfrapPerfIcmpTotalTxParamProb, dfrapLocalConfigTrap=dfrapLocalConfigTrap, dfrapPerfMgmtIpTCPOutSegs=dfrapPerfMgmtIpTCPOutSegs, dfrap=dfrap, dfrapCfgSnmpMgrIndex=dfrapCfgSnmpMgrIndex, dfrapPerfIpxPerDlciEntry=dfrapPerfIpxPerDlciEntry, dfrapPercentUtilization=dfrapPercentUtilization, dfrapCfgLock=dfrapCfgLock, dfrapPvcTxUtilizationClearedTrap=dfrapPvcTxUtilizationClearedTrap, dfrapPerfNetwLongTermValue=dfrapPerfNetwLongTermValue, dfrapCfgIpMaxMTU=dfrapCfgIpMaxMTU, dfrapPerfThruputCmdClearDteStats=dfrapPerfThruputCmdClearDteStats, dfrapCfgFrPerfDlciNamesDlciValue=dfrapCfgFrPerfDlciNamesDlciValue, dfrapVloopRequestFailed=dfrapVloopRequestFailed, dfrapCfgCommParity=dfrapCfgCommParity, dfrapStatusLmiAutosense=dfrapStatusLmiAutosense, dfrapPerfApplicationPerDlciTxCustom2=dfrapPerfApplicationPerDlciTxCustom2, dfrapPerfCirTxPercentUtilizationRange8=dfrapPerfCirTxPercentUtilizationRange8, dfrapPerfIcmpTotalTable=dfrapPerfIcmpTotalTable, dfrapPerfApplicationPerDlciValue=dfrapPerfApplicationPerDlciValue, dfrapEventLogClear=dfrapEventLogClear, dfrapPerfIpxPerDlciTxOther=dfrapPerfIpxPerDlciTxOther, dfrapLocalDteLoopbackFailedTrap=dfrapLocalDteLoopbackFailedTrap, dfrapCfgVnipTransitDelayFrequency=dfrapCfgVnipTransitDelayFrequency, dfrapPerfCurrentPerDlciUtilizationEntry=dfrapPerfCurrentPerDlciUtilizationEntry, dfrapLocalNetLoopbackFailedTrap=dfrapLocalNetLoopbackFailedTrap, dfrapPerfCirPercentUtilizationTable=dfrapPerfCirPercentUtilizationTable, dfrapVnipTopoVBertPerUtilCIR=dfrapVnipTopoVBertPerUtilCIR, dfrapPerfApplicationTotalTxSnmp=dfrapPerfApplicationTotalTxSnmp, dfrapPerfLmiPerDlciInterval=dfrapPerfLmiPerDlciInterval, dfrapSysNumUserProtocols=dfrapSysNumUserProtocols, dfrapVnipTopoVBertTransitDelayAvg=dfrapVnipTopoVBertTransitDelayAvg, dfrapPerfThruputCmdClearDdsStats=dfrapPerfThruputCmdClearDdsStats, dfrapCfgVnipInactivityTimer=dfrapCfgVnipInactivityTimer, dfrapCfgIpMask=dfrapCfgIpMask, dfrapCfgAppFormat=dfrapCfgAppFormat, dfrapCfgFrLmiInactivityTimeout=dfrapCfgFrLmiInactivityTimeout, dfrapPerfIpxPerDlciTxSap=dfrapPerfIpxPerDlciTxSap, dfrapPerfApplicationPerDlciTable=dfrapPerfApplicationPerDlciTable, dfrapPerfIcmpPerDlciInterval=dfrapPerfIcmpPerDlciInterval, dfrapPerfMgmtIpIFOperStatus=dfrapPerfMgmtIpIFOperStatus, dfrapCfgDteRts=dfrapCfgDteRts, dfrapPerfLmiPerDlciRxOtherByteCnt=dfrapPerfLmiPerDlciRxOtherByteCnt, dfrapPerfIcmpTotalTxEchoReq=dfrapPerfIcmpTotalTxEchoReq, dfrapPerfIcmpTotalRxPktTooBig=dfrapPerfIcmpTotalRxPktTooBig, dfrapPerfIpxPerDlciTable=dfrapPerfIpxPerDlciTable, dfrapPerfSnaTotalRxPeriph=dfrapPerfSnaTotalRxPeriph, dfrapPerfThruputPerDlciAvailability=dfrapPerfThruputPerDlciAvailability, dfrapPerfIpPerDlciTxOther=dfrapPerfIpPerDlciTxOther, dfrapPerfRoutingTotalTxRip=dfrapPerfRoutingTotalTxRip, dfrapDiagBertResyncs=dfrapDiagBertResyncs, dfrapCfgCliPassword=dfrapCfgCliPassword, dfrapPerfApplicationTotalEntry=dfrapPerfApplicationTotalEntry, dfrapDLCINum=dfrapDLCINum, dfrapPerfSnaPerDlciRxSubarea=dfrapPerfSnaPerDlciRxSubarea, dfrapPerfCirRxPercentUtilizationRange8=dfrapPerfCirRxPercentUtilizationRange8, dfrapPerfMgmtIpICMPOutRedirects=dfrapPerfMgmtIpICMPOutRedirects, dfrapLocalUnitLoopbackFailedTrap=dfrapLocalUnitLoopbackFailedTrap, dfrapVloopDown=dfrapVloopDown, dfrapPerfSnaPerDlciRxNetbios=dfrapPerfSnaPerDlciRxNetbios, dfrapPerfApplicationPerDlciTxTftp=dfrapPerfApplicationPerDlciTxTftp, dfrapV54LoopDownCompletedTrap=dfrapV54LoopDownCompletedTrap, dfrapPerfIcmpPerDlciTxGmQuery=dfrapPerfIcmpPerDlciTxGmQuery, dfrapCfgTransitDelayTableClear=dfrapCfgTransitDelayTableClear)
