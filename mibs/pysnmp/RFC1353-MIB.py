#
# PySNMP MIB module RFC1353-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1353-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
system, = mibBuilder.importSymbols("SNMPv2-MIB", "system")
iso, Integer32, ModuleIdentity, Bits, NotificationType, ObjectIdentity, IpAddress, MibIdentifier, Unsigned32, Counter32, Counter64, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ModuleIdentity", "Bits", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "Unsigned32", "Counter32", "Counter64", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snmpParties = MibIdentifier((1, 3, 6, 1, 2, 1, 20))
partyAdmin = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1))
partyPublic = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 2))
snmpSecrets = MibIdentifier((1, 3, 6, 1, 2, 1, 21))
partyPrivate = MibIdentifier((1, 3, 6, 1, 2, 1, 21, 1))
partyAccess = MibIdentifier((1, 3, 6, 1, 2, 1, 21, 2))
partyViews = MibIdentifier((1, 3, 6, 1, 2, 1, 21, 3))
class Party(ObjectIdentifier):
    pass

class Clock(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TAddress(OctetString):
    pass

partyProtocols = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 1))
noAuth = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 1, 1))
noPriv = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 1, 3))
desPrivProtocol = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 1, 4))
md5AuthProtocol = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 1, 5))
transportDomains = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 2))
rfc1351Domain = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 2, 1))
proxyDomains = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 3))
noProxy = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 3, 1))
initialPartyId = MibIdentifier((1, 3, 6, 1, 2, 1, 20, 1, 4))
partyTable = MibTable((1, 3, 6, 1, 2, 1, 20, 2, 1), )
if mibBuilder.loadTexts: partyTable.setStatus('mandatory')
partyEntry = MibTableRow((1, 3, 6, 1, 2, 1, 20, 2, 1, 1), ).setIndexNames((0, "RFC1353-MIB", "partyIdentity"))
if mibBuilder.loadTexts: partyEntry.setStatus('mandatory')
partyIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 1), Party()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyIdentity.setStatus('mandatory')
partyTDomain = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 2), ObjectIdentifier().clone((1, 3, 6, 1, 2, 1, 20, 1, 2, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyTDomain.setStatus('mandatory')
partyTAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 3), TAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyTAddress.setStatus('mandatory')
partyProxyFor = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 4), Party().clone((1, 3, 6, 1, 2, 1, 20, 1, 3, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyProxyFor.setStatus('mandatory')
partyAuthProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 5), ObjectIdentifier().clone((1, 3, 6, 1, 2, 1, 20, 1, 1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyAuthProtocol.setStatus('mandatory')
partyAuthClock = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 6), Clock()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyAuthClock.setStatus('mandatory')
partyAuthPublic = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 7), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyAuthPublic.setStatus('mandatory')
partyAuthLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyAuthLifetime.setStatus('mandatory')
partyPrivProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 9), ObjectIdentifier().clone((1, 3, 6, 1, 2, 1, 20, 1, 1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyPrivProtocol.setStatus('mandatory')
partyPrivPublic = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 10), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyPrivPublic.setStatus('mandatory')
partyMaxMessageSize = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 65507)).clone(484)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partyMaxMessageSize.setStatus('mandatory')
partyStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 20, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partyStatus.setStatus('mandatory')
partySecretsTable = MibTable((1, 3, 6, 1, 2, 1, 21, 1, 1), )
if mibBuilder.loadTexts: partySecretsTable.setStatus('mandatory')
partySecretsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 21, 1, 1, 1), ).setIndexNames((0, "RFC1353-MIB", "partySecretsIdentity"))
if mibBuilder.loadTexts: partySecretsEntry.setStatus('mandatory')
partySecretsIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 1, 1, 1, 1), Party()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partySecretsIdentity.setStatus('mandatory')
partySecretsAuthPrivate = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 1, 1, 1, 2), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partySecretsAuthPrivate.setStatus('mandatory')
partySecretsPrivPrivate = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 1, 1, 1, 3), OctetString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partySecretsPrivPrivate.setStatus('mandatory')
partySecretsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: partySecretsStatus.setStatus('mandatory')
aclTable = MibTable((1, 3, 6, 1, 2, 1, 21, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('mandatory')
aclEntry = MibTableRow((1, 3, 6, 1, 2, 1, 21, 2, 1, 1), ).setIndexNames((0, "RFC1353-MIB", "aclTarget"), (0, "RFC1353-MIB", "aclSubject"))
if mibBuilder.loadTexts: aclEntry.setStatus('mandatory')
aclTarget = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 2, 1, 1, 1), Party()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclTarget.setStatus('mandatory')
aclSubject = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 2, 1, 1, 2), Party()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclSubject.setStatus('mandatory')
aclPrivileges = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPrivileges.setStatus('mandatory')
aclStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclStatus.setStatus('mandatory')
viewTable = MibTable((1, 3, 6, 1, 2, 1, 21, 3, 1), )
if mibBuilder.loadTexts: viewTable.setStatus('mandatory')
viewEntry = MibTableRow((1, 3, 6, 1, 2, 1, 21, 3, 1, 1), ).setIndexNames((0, "RFC1353-MIB", "viewParty"), (0, "RFC1353-MIB", "viewSubtree"))
if mibBuilder.loadTexts: viewEntry.setStatus('mandatory')
viewParty = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 3, 1, 1, 1), Party()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viewParty.setStatus('mandatory')
viewSubtree = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viewSubtree.setStatus('mandatory')
viewStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2), ("invalid", 3))).clone('included')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viewStatus.setStatus('mandatory')
viewMask = MibTableColumn((1, 3, 6, 1, 2, 1, 21, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: viewMask.setStatus('mandatory')
mibBuilder.exportSymbols("RFC1353-MIB", partyAuthProtocol=partyAuthProtocol, partyViews=partyViews, partySecretsTable=partySecretsTable, partySecretsIdentity=partySecretsIdentity, partyPrivProtocol=partyPrivProtocol, partyAuthClock=partyAuthClock, aclSubject=aclSubject, snmpSecrets=snmpSecrets, viewMask=viewMask, partyEntry=partyEntry, aclPrivileges=aclPrivileges, viewSubtree=viewSubtree, TAddress=TAddress, partyStatus=partyStatus, viewStatus=viewStatus, partyTDomain=partyTDomain, aclTable=aclTable, partySecretsStatus=partySecretsStatus, partyPrivPublic=partyPrivPublic, viewTable=viewTable, partyMaxMessageSize=partyMaxMessageSize, partySecretsAuthPrivate=partySecretsAuthPrivate, proxyDomains=proxyDomains, noAuth=noAuth, aclStatus=aclStatus, md5AuthProtocol=md5AuthProtocol, partyProxyFor=partyProxyFor, viewParty=viewParty, viewEntry=viewEntry, noProxy=noProxy, rfc1351Domain=rfc1351Domain, partyAdmin=partyAdmin, partyPrivate=partyPrivate, partyPublic=partyPublic, partySecretsPrivPrivate=partySecretsPrivPrivate, Party=Party, partyTable=partyTable, noPriv=noPriv, Clock=Clock, initialPartyId=initialPartyId, partyIdentity=partyIdentity, partyTAddress=partyTAddress, partyAccess=partyAccess, partySecretsEntry=partySecretsEntry, partyAuthPublic=partyAuthPublic, snmpParties=snmpParties, aclEntry=aclEntry, aclTarget=aclTarget, desPrivProtocol=desPrivProtocol, partyAuthLifetime=partyAuthLifetime, transportDomains=transportDomains, partyProtocols=partyProtocols)
