#
# PySNMP MIB module NETI-VAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-VAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, iso, NotificationType, Integer32, Counter32, Gauge32, Bits, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "iso", "NotificationType", "Integer32", "Counter32", "Gauge32", "Bits", "enterprises")
TruthValue, DateAndTime, DisplayString, RowStatus, TextualConvention, TimeStamp, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "RowPointer")
netiVasMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 5))
netiVasMIB.setRevisions(('2015-04-20 07:00', '2015-04-01 00:00',))
if mibBuilder.loadTexts: netiVasMIB.setLastUpdated('201504200700Z')
if mibBuilder.loadTexts: netiVasMIB.setOrganization('Net Insight AB')
netinsight = MibIdentifier((1, 3, 6, 1, 4, 1, 2928))
netiGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2))
class VasConnectionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 9))
    namedValues = NamedValues(("offline", 0), ("connecting", 1), ("reconnecting", 2), ("connected", 3), ("unknown", 9))

class VasCipher(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("aes128", 1), ("aes192", 2), ("aes256", 3))

class VasResetStatistics(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("reset", 0))

class VasVideoFormat(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("unknown", 0), ("fmt525i59", 1), ("fmt625i50", 2), ("fmt720p23", 3), ("fmt720p24", 4), ("fmt720p25", 5), ("fmt720p29", 6), ("fmt720p30", 7), ("fmt720p50", 8), ("fmt720p59", 9), ("fmt720p60", 10), ("fmt1080p23", 11), ("fmt1080p24", 12), ("fmt1080p25", 13), ("fmt1080p29", 14), ("fmt1080p30", 15), ("fmt1080p50", 16), ("fmt1080p59", 17), ("fmt1080p60", 18), ("fmt1080i50", 19), ("fmt1080i59", 20), ("fmt1080i60", 21))

vasInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1))
vasEncoderPipeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2))
vasDecoderPipeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3))
vasTransportsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4))
vasStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5))
vasIfTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1), )
if mibBuilder.loadTexts: vasIfTable.setStatus('current')
vasIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasIfIndex"))
if mibBuilder.loadTexts: vasIfEntry.setStatus('current')
vasIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasIfIndex.setStatus('current')
vasIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfName.setStatus('current')
vasIfPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 3), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfPurpose.setStatus('current')
vasIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfAdminStatus.setStatus('current')
vasIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfOperStatus.setStatus('current')
vasIfFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfFailure.setStatus('current')
vasIfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfLastChanged.setStatus('current')
vasIfResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 8), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfResetStatistics.setStatus('current')
vasIfInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 9), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfInputFrom.setStatus('current')
vasIfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asiInput", 1), ("asiOutput", 2), ("sdiInput", 3), ("sdiOutput", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasIfPortMode.setStatus('current')
vasIfActiveFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 1, 1, 1, 11), VasVideoFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasIfActiveFormat.setStatus('current')
vasEncPipeTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1), )
if mibBuilder.loadTexts: vasEncPipeTable.setStatus('current')
vasEncPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasEncPipeIndex"))
if mibBuilder.loadTexts: vasEncPipeEntry.setStatus('current')
vasEncPipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasEncPipeIndex.setStatus('current')
vasEncPipeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeRowStatus.setStatus('current')
vasEncPipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeName.setStatus('current')
vasEncPipePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipePurpose.setStatus('current')
vasEncPipeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeAdminStatus.setStatus('current')
vasEncPipeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeOperStatus.setStatus('current')
vasEncPipeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeFailure.setStatus('current')
vasEncPipeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeLastChanged.setStatus('current')
vasEncPipeResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 9), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasEncPipeResetStatistics.setStatus('current')
vasEncPipeStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeStatsTr101.setStatus('current')
vasEncPipeEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeEnableTr101.setStatus('current')
vasEncPipeInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 12), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeInputFrom.setStatus('current')
vasEncPipeCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 13), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeCipher.setStatus('current')
vasEncPipeEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 14), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeEncryptKey.setStatus('current')
vasEncPipeProcessedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeProcessedFrames.setStatus('current')
vasEncPipeCurrentTsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasEncPipeCurrentTsBitrate.setStatus('current')
vasEncPipeVideoBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 2, 1, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasEncPipeVideoBitrate.setStatus('current')
vasDecPipeTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1), )
if mibBuilder.loadTexts: vasDecPipeTable.setStatus('current')
vasDecPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasDecPipeIndex"))
if mibBuilder.loadTexts: vasDecPipeEntry.setStatus('current')
vasDecPipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasDecPipeIndex.setStatus('current')
vasDecPipeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeRowStatus.setStatus('current')
vasDecPipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeName.setStatus('current')
vasDecPipePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipePurpose.setStatus('current')
vasDecPipeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeAdminStatus.setStatus('current')
vasDecPipeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeOperStatus.setStatus('current')
vasDecPipeFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeFailure.setStatus('current')
vasDecPipeLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeLastChanged.setStatus('current')
vasDecPipeResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 9), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasDecPipeResetStatistics.setStatus('current')
vasDecPipeInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 10), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeInputFrom.setStatus('current')
vasDecPipeCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 11), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeCipher.setStatus('current')
vasDecPipeDecryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 12), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasDecPipeDecryptKey.setStatus('current')
vasDecPipeProcessedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeProcessedFrames.setStatus('current')
vasDecPipeCurrentTsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeCurrentTsBitrate.setStatus('current')
vasDecPipeVideoBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasDecPipeVideoBitrate.setStatus('current')
vasStreamPort = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 1), InetPortNumber().clone(2088)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasStreamPort.setStatus('current')
vasUdpSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2), )
if mibBuilder.loadTexts: vasUdpSrcTable.setStatus('current')
vasUdpSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpSrcIndex"))
if mibBuilder.loadTexts: vasUdpSrcEntry.setStatus('current')
vasUdpSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpSrcIndex.setStatus('current')
vasUdpSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRowStatus.setStatus('current')
vasUdpSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcName.setStatus('current')
vasUdpSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcPurpose.setStatus('current')
vasUdpSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcAdminStatus.setStatus('current')
vasUdpSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcOperStatus.setStatus('current')
vasUdpSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcFailure.setStatus('current')
vasUdpSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcLastChanged.setStatus('current')
vasUdpSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcConnectionStatus.setStatus('current')
vasUdpSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasUdpSrcResetStatistics.setStatus('current')
vasUdpSrcStatsUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSrcStatsUdp.setStatus('current')
vasUdpSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 12), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcInputFrom.setStatus('current')
vasUdpSrcRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 13), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemoteHostType.setStatus('current')
vasUdpSrcRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 14), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemoteHostAddress.setStatus('current')
vasUdpSrcRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 15), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcRemotePort.setStatus('current')
vasUdpSrcLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 16), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalIfType.setStatus('current')
vasUdpSrcLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 17), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalIfAddress.setStatus('current')
vasUdpSrcLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 18), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcLocalPort.setStatus('current')
vasUdpSrcCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 19), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcCipher.setStatus('current')
vasUdpSrcDecryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 20), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcDecryptKey.setStatus('current')
vasUdpSrcTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcTtl.setStatus('current')
vasUdpSrcDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 2, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSrcDontFragment.setStatus('current')
vasUdpSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3), )
if mibBuilder.loadTexts: vasUdpSnkTable.setStatus('current')
vasUdpSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpSnkIndex"))
if mibBuilder.loadTexts: vasUdpSnkEntry.setStatus('current')
vasUdpSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpSnkIndex.setStatus('current')
vasUdpSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkRowStatus.setStatus('current')
vasUdpSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkName.setStatus('current')
vasUdpSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkPurpose.setStatus('current')
vasUdpSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkAdminStatus.setStatus('current')
vasUdpSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkOperStatus.setStatus('current')
vasUdpSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkFailure.setStatus('current')
vasUdpSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkLastChanged.setStatus('current')
vasUdpSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkConnectionStatus.setStatus('current')
vasUdpSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 10), VasResetStatistics()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkResetStatistics.setStatus('current')
vasUdpSnkStatsUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkStatsUdp.setStatus('current')
vasUdpSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkStatsTr101.setStatus('current')
vasUdpSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkEnableTr101.setStatus('current')
vasUdpSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkRemoteInetType.setStatus('current')
vasUdpSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpSnkRemoteInetAddress.setStatus('current')
vasUdpSnkLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 16), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalIfType.setStatus('current')
vasUdpSnkLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 17), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalIfAddress.setStatus('current')
vasUdpSnkLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 18), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkLocalPort.setStatus('current')
vasUdpSnkCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 19), VasCipher().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkCipher.setStatus('current')
vasUdpSnkEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 20), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkEncryptKey.setStatus('current')
vasUdpSnkMcastIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 21), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkMcastIpType.setStatus('current')
vasUdpSnkMcastIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 22), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkMcastIp.setStatus('current')
vasUdpSnkSsmSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 23), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkSsmSourceIp.setStatus('current')
vasUdpSnkCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasUdpSnkCompress.setStatus('current')
vasPulSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4), )
if mibBuilder.loadTexts: vasPulSrcTable.setStatus('current')
vasPulSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPulSrcIndex"))
if mibBuilder.loadTexts: vasPulSrcEntry.setStatus('current')
vasPulSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPulSrcIndex.setStatus('current')
vasPulSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcRowStatus.setStatus('current')
vasPulSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcName.setStatus('current')
vasPulSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcPurpose.setStatus('current')
vasPulSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcAdminStatus.setStatus('current')
vasPulSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dormant", 3), ("partial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcOperStatus.setStatus('current')
vasPulSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcFailure.setStatus('current')
vasPulSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcLastChanged.setStatus('current')
vasPulSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcConnectionStatus.setStatus('current')
vasPulSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPulSrcResetStatistics.setStatus('current')
vasPulSrcStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcStatsTrsp.setStatus('current')
vasPulSrcRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcRemoteInetType.setStatus('current')
vasPulSrcRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSrcRemoteInetAddress.setStatus('current')
vasPulSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcStreamId.setStatus('current')
vasPulSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 15), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcInputFrom.setStatus('current')
vasPulSrcRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcRemoteId.setStatus('current')
vasPulSrcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 4, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSrcPassword.setStatus('current')
vasMpuSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5), )
if mibBuilder.loadTexts: vasMpuSrcTable.setStatus('current')
vasMpuSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasMpuSrcIndex"))
if mibBuilder.loadTexts: vasMpuSrcEntry.setStatus('current')
vasMpuSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasMpuSrcIndex.setStatus('current')
vasMpuSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcRowStatus.setStatus('current')
vasMpuSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcName.setStatus('current')
vasMpuSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcPurpose.setStatus('current')
vasMpuSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcAdminStatus.setStatus('current')
vasMpuSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dormant", 3), ("partial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcOperStatus.setStatus('current')
vasMpuSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcFailure.setStatus('current')
vasMpuSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasMpuSrcLastChanged.setStatus('current')
vasMpuSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcStreamId.setStatus('current')
vasMpuSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 5, 1, 13), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasMpuSrcInputFrom.setStatus('current')
vasPulSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6), )
if mibBuilder.loadTexts: vasPulSnkTable.setStatus('current')
vasPulSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPulSnkIndex"))
if mibBuilder.loadTexts: vasPulSnkEntry.setStatus('current')
vasPulSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPulSnkIndex.setStatus('current')
vasPulSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRowStatus.setStatus('current')
vasPulSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkName.setStatus('current')
vasPulSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkPurpose.setStatus('current')
vasPulSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkAdminStatus.setStatus('current')
vasPulSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkOperStatus.setStatus('current')
vasPulSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkFailure.setStatus('current')
vasPulSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkLastChanged.setStatus('current')
vasPulSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkConnectionStatus.setStatus('current')
vasPulSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPulSnkResetStatistics.setStatus('current')
vasPulSnkStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkStatsTrsp.setStatus('current')
vasPulSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkStatsTr101.setStatus('current')
vasPulSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkEnableTr101.setStatus('current')
vasPulSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkRemoteInetType.setStatus('current')
vasPulSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPulSnkRemoteInetAddress.setStatus('current')
vasPulSnkStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkStreamId.setStatus('current')
vasPulSnkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkPassword.setStatus('current')
vasPulSnkRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 18), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostType.setStatus('current')
vasPulSnkRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 19), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress.setStatus('current')
vasPulSnkRemoteHostType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 20), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostType2.setStatus('current')
vasPulSnkRemoteHostAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 21), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemoteHostAddress2.setStatus('current')
vasPulSnkRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 22), InetPortNumber().clone(2088)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRemotePort.setStatus('current')
vasPulSnkRetransmitBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkRetransmitBuffer.setStatus('current')
vasPulSnkFecMaxOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecMaxOverhead.setStatus('current')
vasPulSnkFecOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecOptimize.setStatus('current')
vasPulSnkFecLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 6, 1, 26), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPulSnkFecLatency.setStatus('current')
vasPusSrcTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7), )
if mibBuilder.loadTexts: vasPusSrcTable.setStatus('current')
vasPusSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPusSrcIndex"))
if mibBuilder.loadTexts: vasPusSrcEntry.setStatus('current')
vasPusSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPusSrcIndex.setStatus('current')
vasPusSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRowStatus.setStatus('current')
vasPusSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcName.setStatus('current')
vasPusSrcPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcPurpose.setStatus('current')
vasPusSrcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcAdminStatus.setStatus('current')
vasPusSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcOperStatus.setStatus('current')
vasPusSrcFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcFailure.setStatus('current')
vasPusSrcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcLastChanged.setStatus('current')
vasPusSrcConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcConnectionStatus.setStatus('current')
vasPusSrcResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPusSrcResetStatistics.setStatus('current')
vasPusSrcStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcStatsTrsp.setStatus('current')
vasPusSrcRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcRemoteInetType.setStatus('current')
vasPusSrcRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSrcRemoteInetAddress.setStatus('current')
vasPusSrcStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcStreamId.setStatus('current')
vasPusSrcInputFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 15), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcInputFrom.setStatus('current')
vasPusSrcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 16), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcPassword.setStatus('current')
vasPusSrcRemoteHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 17), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostType.setStatus('current')
vasPusSrcRemoteHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 18), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress.setStatus('current')
vasPusSrcRemoteHostType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 19), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostType2.setStatus('current')
vasPusSrcRemoteHostAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 20), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemoteHostAddress2.setStatus('current')
vasPusSrcRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 21), InetPortNumber().clone(2088)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRemotePort.setStatus('current')
vasPusSrcLocalIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 22), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcLocalIfType.setStatus('current')
vasPusSrcLocalIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 23), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcLocalIfAddress.setStatus('current')
vasPusSrcRetransmitBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcRetransmitBuffer.setStatus('current')
vasPusSrcFecMaxOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecMaxOverhead.setStatus('current')
vasPusSrcFecOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecOptimize.setStatus('current')
vasPusSrcFecLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 7, 1, 27), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSrcFecLatency.setStatus('current')
vasPusSnkTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8), )
if mibBuilder.loadTexts: vasPusSnkTable.setStatus('current')
vasPusSnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasPusSnkIndex"))
if mibBuilder.loadTexts: vasPusSnkEntry.setStatus('current')
vasPusSnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasPusSnkIndex.setStatus('current')
vasPusSnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkRowStatus.setStatus('current')
vasPusSnkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkName.setStatus('current')
vasPusSnkPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 4), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkPurpose.setStatus('current')
vasPusSnkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkAdminStatus.setStatus('current')
vasPusSnkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkOperStatus.setStatus('current')
vasPusSnkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkFailure.setStatus('current')
vasPusSnkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkLastChanged.setStatus('current')
vasPusSnkConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 9), VasConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkConnectionStatus.setStatus('current')
vasPusSnkResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 10), VasResetStatistics()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vasPusSnkResetStatistics.setStatus('current')
vasPusSnkStatsTrsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkStatsTrsp.setStatus('current')
vasPusSnkStatsTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkStatsTr101.setStatus('current')
vasPusSnkEnableTr101 = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkEnableTr101.setStatus('current')
vasPusSnkRemoteInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkRemoteInetType.setStatus('current')
vasPusSnkRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasPusSnkRemoteInetAddress.setStatus('current')
vasPusSnkStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkStreamId.setStatus('current')
vasPusSnkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 4, 8, 1, 17), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vasPusSnkPassword.setStatus('current')
vasUdpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1), )
if mibBuilder.loadTexts: vasUdpStatisticsTable.setStatus('current')
vasUdpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasUdpStsIndex"))
if mibBuilder.loadTexts: vasUdpStatisticsEntry.setStatus('current')
vasUdpStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasUdpStsIndex.setStatus('current')
vasUdpStsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpStsOwner.setStatus('current')
vasUdpStsBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasUdpStsBitrate.setStatus('current')
vasTrspStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2), )
if mibBuilder.loadTexts: vasTrspStatisticsTable.setStatus('current')
vasTrspStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1), ).setIndexNames((0, "NETI-VAS-MIB", "vasTrspIndex"))
if mibBuilder.loadTexts: vasTrspStatisticsEntry.setStatus('current')
vasTrspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vasTrspIndex.setStatus('current')
vasTrspOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspOwner.setStatus('current')
vasTrspLastConnectionChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspLastConnectionChange.setStatus('current')
vasTrspConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspConnects.setStatus('current')
vasTrspDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspDisconnects.setStatus('current')
vasTrspNetRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvBitrate.setStatus('current')
vasTrspNetRecvBurstLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvBurstLoss.setStatus('current')
vasTrspNetRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOctets.setStatus('current')
vasTrspNetRecvLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvLatency.setStatus('current')
vasTrspNetRecvDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvDropped.setStatus('current')
vasTrspNetRecvJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvJitter.setStatus('current')
vasTrspNetRecvJitterRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvJitterRatio.setStatus('current')
vasTrspNetRecvOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOutOfOrder.setStatus('current')
vasTrspNetRecvOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvOverflows.setStatus('current')
vasTrspNetRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPackets.setStatus('current')
vasTrspNetRecvPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPacketRate.setStatus('current')
vasTrspNetRecvPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetRecvPacketLoss.setStatus('current')
vasTrspArqRecvAlmostDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvAlmostDropped.setStatus('current')
vasTrspArqRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvBitrate.setStatus('current')
vasTrspArqRecvDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvDropped.setStatus('current')
vasTrspArqRecvDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvDuplicates.setStatus('current')
vasTrspArqRecvOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvOverflows.setStatus('current')
vasTrspArqRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvPackets.setStatus('current')
vasTrspArqRecvRecovered = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvRecovered.setStatus('current')
vasTrspArqRecvRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqRecvRequests.setStatus('current')
vasTrspNetSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendBitrate.setStatus('current')
vasTrspNetSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendOctets.setStatus('current')
vasTrspNetSendLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendLimit.setStatus('current')
vasTrspNetSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendPackets.setStatus('current')
vasTrspNetSendRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendRtt.setStatus('current')
vasTrspNetSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspNetSendErrors.setStatus('current')
vasTrspArqSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendBitrate.setStatus('current')
vasTrspArqSendIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendIgnored.setStatus('current')
vasTrspArqSendMissed = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendMissed.setStatus('current')
vasTrspArqSendPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendPacketRate.setStatus('current')
vasTrspArqSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspArqSendPackets.setStatus('current')
vasTrspFecRecvBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvBitrate.setStatus('current')
vasTrspFecRecvPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvPacketRate.setStatus('current')
vasTrspFecRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvPackets.setStatus('current')
vasTrspFecRecvRecovered = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecRecvRecovered.setStatus('current')
vasTrspFecSendBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendBitrate.setStatus('current')
vasTrspFecSendPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendPacketRate.setStatus('current')
vasTrspFecSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 5, 5, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasTrspFecSendPackets.setStatus('current')
mibBuilder.exportSymbols("NETI-VAS-MIB", vasMpuSrcRowStatus=vasMpuSrcRowStatus, vasIfOperStatus=vasIfOperStatus, vasPusSnkIndex=vasPusSnkIndex, vasPulSrcName=vasPulSrcName, vasDecPipeFailure=vasDecPipeFailure, vasDecPipeLastChanged=vasDecPipeLastChanged, vasUdpSnkAdminStatus=vasUdpSnkAdminStatus, vasPusSrcFailure=vasPusSrcFailure, vasPusSrcStreamId=vasPusSrcStreamId, vasPulSnkRemoteHostType=vasPulSnkRemoteHostType, vasEncPipeProcessedFrames=vasEncPipeProcessedFrames, vasPusSrcLastChanged=vasPusSrcLastChanged, vasPusSrcResetStatistics=vasPusSrcResetStatistics, vasPulSnkRemoteHostType2=vasPulSnkRemoteHostType2, vasUdpSnkFailure=vasUdpSnkFailure, vasDecPipeIndex=vasDecPipeIndex, vasUdpSnkStatsUdp=vasUdpSnkStatsUdp, vasPulSrcStreamId=vasPulSrcStreamId, vasPulSrcRemoteId=vasPulSrcRemoteId, vasMpuSrcLastChanged=vasMpuSrcLastChanged, vasPulSnkTable=vasPulSnkTable, vasIfInputFrom=vasIfInputFrom, vasUdpSrcLocalIfAddress=vasUdpSrcLocalIfAddress, vasPusSrcRowStatus=vasPusSrcRowStatus, vasUdpSnkLastChanged=vasUdpSnkLastChanged, vasPusSnkTable=vasPusSnkTable, vasTrspFecSendPacketRate=vasTrspFecSendPacketRate, vasTrspNetRecvPacketRate=vasTrspNetRecvPacketRate, vasPusSnkRemoteInetAddress=vasPusSnkRemoteInetAddress, vasTrspArqSendPackets=vasTrspArqSendPackets, vasPulSrcLastChanged=vasPulSrcLastChanged, vasPusSnkLastChanged=vasPusSnkLastChanged, vasPusSrcRetransmitBuffer=vasPusSrcRetransmitBuffer, vasIfPurpose=vasIfPurpose, vasUdpSrcDontFragment=vasUdpSrcDontFragment, netiGeneric=netiGeneric, vasStreamPort=vasStreamPort, vasPusSrcInputFrom=vasPusSrcInputFrom, vasTrspNetSendBitrate=vasTrspNetSendBitrate, vasDecPipeCurrentTsBitrate=vasDecPipeCurrentTsBitrate, vasUdpSnkStatsTr101=vasUdpSnkStatsTr101, vasIfActiveFormat=vasIfActiveFormat, vasUdpSrcConnectionStatus=vasUdpSrcConnectionStatus, vasIfTable=vasIfTable, vasEncPipeCurrentTsBitrate=vasEncPipeCurrentTsBitrate, vasPulSrcRowStatus=vasPulSrcRowStatus, vasEncPipeEnableTr101=vasEncPipeEnableTr101, vasPulSnkFailure=vasPulSnkFailure, vasUdpSnkResetStatistics=vasUdpSnkResetStatistics, vasEncPipeEntry=vasEncPipeEntry, vasUdpSrcRemotePort=vasUdpSrcRemotePort, vasMpuSrcFailure=vasMpuSrcFailure, vasTransportsGroup=vasTransportsGroup, vasUdpSnkCompress=vasUdpSnkCompress, netiVasMIB=netiVasMIB, vasPulSnkStreamId=vasPulSnkStreamId, vasPusSnkRowStatus=vasPusSnkRowStatus, vasEncPipeAdminStatus=vasEncPipeAdminStatus, vasPusSnkFailure=vasPusSnkFailure, vasPusSrcTable=vasPusSrcTable, vasTrspFecRecvPacketRate=vasTrspFecRecvPacketRate, vasUdpSnkOperStatus=vasUdpSnkOperStatus, vasUdpStatisticsEntry=vasUdpStatisticsEntry, vasPusSrcStatsTrsp=vasPusSrcStatsTrsp, vasUdpSnkMcastIpType=vasUdpSnkMcastIpType, vasDecPipeOperStatus=vasDecPipeOperStatus, vasTrspIndex=vasTrspIndex, vasDecPipeName=vasDecPipeName, vasEncPipeName=vasEncPipeName, vasPulSrcEntry=vasPulSrcEntry, vasTrspNetSendLimit=vasTrspNetSendLimit, vasPusSnkEntry=vasPusSnkEntry, vasTrspArqSendIgnored=vasTrspArqSendIgnored, vasEncPipePurpose=vasEncPipePurpose, vasUdpSnkRemoteInetAddress=vasUdpSnkRemoteInetAddress, vasTrspFecSendBitrate=vasTrspFecSendBitrate, vasEncoderPipeGroup=vasEncoderPipeGroup, vasPulSrcInputFrom=vasPulSrcInputFrom, vasPusSrcName=vasPusSrcName, vasTrspNetSendOctets=vasTrspNetSendOctets, vasPusSnkName=vasPusSnkName, vasDecPipeEntry=vasDecPipeEntry, vasPulSnkEntry=vasPulSnkEntry, vasEncPipeInputFrom=vasEncPipeInputFrom, vasPulSnkPurpose=vasPulSnkPurpose, vasTrspFecRecvRecovered=vasTrspFecRecvRecovered, vasTrspConnects=vasTrspConnects, vasPulSnkOperStatus=vasPulSnkOperStatus, vasEncPipeCipher=vasEncPipeCipher, vasTrspDisconnects=vasTrspDisconnects, vasDecPipeDecryptKey=vasDecPipeDecryptKey, vasTrspNetRecvBitrate=vasTrspNetRecvBitrate, vasPusSrcFecLatency=vasPusSrcFecLatency, vasPusSrcPurpose=vasPusSrcPurpose, vasMpuSrcPurpose=vasMpuSrcPurpose, vasTrspStatisticsTable=vasTrspStatisticsTable, vasPusSrcRemoteHostAddress2=vasPusSrcRemoteHostAddress2, vasTrspArqRecvRecovered=vasTrspArqRecvRecovered, PYSNMP_MODULE_ID=netiVasMIB, vasEncPipeVideoBitrate=vasEncPipeVideoBitrate, vasTrspNetRecvJitter=vasTrspNetRecvJitter, vasEncPipeTable=vasEncPipeTable, vasTrspArqRecvDropped=vasTrspArqRecvDropped, vasUdpStsOwner=vasUdpStsOwner, vasUdpSrcDecryptKey=vasUdpSrcDecryptKey, vasPulSrcRemoteInetAddress=vasPulSrcRemoteInetAddress, vasTrspNetSendErrors=vasTrspNetSendErrors, vasTrspOwner=vasTrspOwner, vasPulSnkStatsTr101=vasPulSnkStatsTr101, vasTrspArqSendMissed=vasTrspArqSendMissed, vasTrspArqSendPacketRate=vasTrspArqSendPacketRate, vasPulSrcStatsTrsp=vasPulSrcStatsTrsp, vasUdpSnkCipher=vasUdpSnkCipher, vasUdpSrcResetStatistics=vasUdpSrcResetStatistics, vasUdpSnkLocalIfAddress=vasUdpSnkLocalIfAddress, vasEncPipeFailure=vasEncPipeFailure, vasUdpSrcLocalIfType=vasUdpSrcLocalIfType, vasUdpSrcTtl=vasUdpSrcTtl, vasPusSrcAdminStatus=vasPusSrcAdminStatus, vasPusSrcRemotePort=vasPusSrcRemotePort, vasPulSnkRemoteInetAddress=vasPulSnkRemoteInetAddress, vasPusSnkStreamId=vasPusSnkStreamId, vasTrspArqRecvBitrate=vasTrspArqRecvBitrate, vasPusSrcFecMaxOverhead=vasPusSrcFecMaxOverhead, vasTrspNetRecvOverflows=vasTrspNetRecvOverflows, vasPulSnkRemoteInetType=vasPulSnkRemoteInetType, vasUdpSrcAdminStatus=vasUdpSrcAdminStatus, vasUdpSrcStatsUdp=vasUdpSrcStatsUdp, vasPusSnkResetStatistics=vasPusSnkResetStatistics, vasPusSnkAdminStatus=vasPusSnkAdminStatus, vasUdpSnkConnectionStatus=vasUdpSnkConnectionStatus, vasEncPipeLastChanged=vasEncPipeLastChanged, vasPulSrcAdminStatus=vasPulSrcAdminStatus, vasMpuSrcEntry=vasMpuSrcEntry, vasTrspNetRecvOutOfOrder=vasTrspNetRecvOutOfOrder, vasPulSrcTable=vasPulSrcTable, vasPulSnkFecOptimize=vasPulSnkFecOptimize, vasTrspArqRecvDuplicates=vasTrspArqRecvDuplicates, vasTrspArqSendBitrate=vasTrspArqSendBitrate, vasTrspNetRecvJitterRatio=vasTrspNetRecvJitterRatio, vasPusSrcFecOptimize=vasPusSrcFecOptimize, vasPusSrcIndex=vasPusSrcIndex, vasPusSrcRemoteHostType2=vasPusSrcRemoteHostType2, vasUdpSnkName=vasUdpSnkName, vasTrspFecRecvBitrate=vasTrspFecRecvBitrate, vasIfPortMode=vasIfPortMode, vasUdpSrcEntry=vasUdpSrcEntry, VasCipher=VasCipher, vasUdpSnkEnableTr101=vasUdpSnkEnableTr101, vasUdpSnkMcastIp=vasUdpSnkMcastIp, vasPulSnkLastChanged=vasPulSnkLastChanged, vasPulSnkName=vasPulSnkName, vasPusSrcEntry=vasPusSrcEntry, vasPusSrcConnectionStatus=vasPusSrcConnectionStatus, VasResetStatistics=VasResetStatistics, vasUdpStsBitrate=vasUdpStsBitrate, vasEncPipeStatsTr101=vasEncPipeStatsTr101, vasPulSnkRetransmitBuffer=vasPulSnkRetransmitBuffer, vasDecPipeCipher=vasDecPipeCipher, vasTrspLastConnectionChange=vasTrspLastConnectionChange, vasUdpSrcCipher=vasUdpSrcCipher, vasPulSrcPassword=vasPulSrcPassword, vasPulSrcPurpose=vasPulSrcPurpose, vasPulSnkConnectionStatus=vasPulSnkConnectionStatus, vasPusSrcPassword=vasPusSrcPassword, vasUdpStsIndex=vasUdpStsIndex, vasPusSnkRemoteInetType=vasPusSnkRemoteInetType, vasDecPipeTable=vasDecPipeTable, vasTrspNetSendPackets=vasTrspNetSendPackets, vasUdpSnkEntry=vasUdpSnkEntry, vasTrspNetRecvLatency=vasTrspNetRecvLatency, vasUdpSrcOperStatus=vasUdpSrcOperStatus, vasPulSnkRemoteHostAddress=vasPulSnkRemoteHostAddress, VasConnectionStatus=VasConnectionStatus, vasUdpSrcRowStatus=vasUdpSrcRowStatus, vasDecPipeInputFrom=vasDecPipeInputFrom, vasPusSrcOperStatus=vasPusSrcOperStatus, vasUdpSrcIndex=vasUdpSrcIndex, vasUdpSnkEncryptKey=vasUdpSnkEncryptKey, vasTrspNetRecvBurstLoss=vasTrspNetRecvBurstLoss, vasTrspFecSendPackets=vasTrspFecSendPackets, vasTrspNetRecvDropped=vasTrspNetRecvDropped, vasUdpSnkTable=vasUdpSnkTable, vasTrspNetRecvPacketLoss=vasTrspNetRecvPacketLoss, vasEncPipeRowStatus=vasEncPipeRowStatus, vasMpuSrcStreamId=vasMpuSrcStreamId, vasTrspArqRecvRequests=vasTrspArqRecvRequests, vasTrspArqRecvPackets=vasTrspArqRecvPackets, vasPulSnkAdminStatus=vasPulSnkAdminStatus, vasMpuSrcName=vasMpuSrcName, vasPusSrcRemoteInetAddress=vasPusSrcRemoteInetAddress, vasUdpStatisticsTable=vasUdpStatisticsTable, vasPusSnkConnectionStatus=vasPusSnkConnectionStatus, vasMpuSrcTable=vasMpuSrcTable, vasTrspArqRecvOverflows=vasTrspArqRecvOverflows, vasInterfaceGroup=vasInterfaceGroup, vasTrspNetSendRtt=vasTrspNetSendRtt, vasMpuSrcIndex=vasMpuSrcIndex, vasUdpSnkSsmSourceIp=vasUdpSnkSsmSourceIp, vasPusSnkStatsTrsp=vasPusSnkStatsTrsp, vasPusSnkPurpose=vasPusSnkPurpose, vasDecPipeVideoBitrate=vasDecPipeVideoBitrate, vasIfLastChanged=vasIfLastChanged, vasUdpSrcTable=vasUdpSrcTable, vasUdpSnkIndex=vasUdpSnkIndex, vasPulSnkStatsTrsp=vasPulSnkStatsTrsp, vasUdpSrcPurpose=vasUdpSrcPurpose, vasPulSrcRemoteInetType=vasPulSrcRemoteInetType, vasUdpSnkRowStatus=vasUdpSnkRowStatus, vasPulSnkResetStatistics=vasPulSnkResetStatistics, vasPulSnkPassword=vasPulSnkPassword, vasPusSrcRemoteHostAddress=vasPusSrcRemoteHostAddress, vasPulSnkFecMaxOverhead=vasPulSnkFecMaxOverhead, vasPusSrcLocalIfAddress=vasPusSrcLocalIfAddress, vasPulSnkRemotePort=vasPulSnkRemotePort, vasPusSnkEnableTr101=vasPusSnkEnableTr101, netinsight=netinsight, vasPulSnkRowStatus=vasPulSnkRowStatus, vasUdpSrcRemoteHostType=vasUdpSrcRemoteHostType, vasUdpSnkPurpose=vasUdpSnkPurpose, vasTrspFecRecvPackets=vasTrspFecRecvPackets, vasIfFailure=vasIfFailure, vasEncPipeIndex=vasEncPipeIndex, vasDecPipeResetStatistics=vasDecPipeResetStatistics, vasUdpSnkRemoteInetType=vasUdpSnkRemoteInetType, vasIfIndex=vasIfIndex, vasDecoderPipeGroup=vasDecoderPipeGroup, vasUdpSrcInputFrom=vasUdpSrcInputFrom, vasPulSrcFailure=vasPulSrcFailure, vasPulSnkRemoteHostAddress2=vasPulSnkRemoteHostAddress2, vasUdpSnkLocalIfType=vasUdpSnkLocalIfType, vasUdpSrcRemoteHostAddress=vasUdpSrcRemoteHostAddress, vasPusSrcRemoteHostType=vasPusSrcRemoteHostType, vasPusSnkStatsTr101=vasPusSnkStatsTr101, vasMpuSrcInputFrom=vasMpuSrcInputFrom, vasPusSnkPassword=vasPusSnkPassword, vasDecPipePurpose=vasDecPipePurpose, vasTrspStatisticsEntry=vasTrspStatisticsEntry, vasPusSrcRemoteInetType=vasPusSrcRemoteInetType, vasIfAdminStatus=vasIfAdminStatus, vasDecPipeRowStatus=vasDecPipeRowStatus, vasDecPipeProcessedFrames=vasDecPipeProcessedFrames, vasTrspArqRecvAlmostDropped=vasTrspArqRecvAlmostDropped, vasEncPipeEncryptKey=vasEncPipeEncryptKey, vasIfResetStatistics=vasIfResetStatistics, vasTrspNetRecvOctets=vasTrspNetRecvOctets, vasPulSrcResetStatistics=vasPulSrcResetStatistics, vasMpuSrcOperStatus=vasMpuSrcOperStatus, vasEncPipeResetStatistics=vasEncPipeResetStatistics, vasTrspNetRecvPackets=vasTrspNetRecvPackets, VasVideoFormat=VasVideoFormat, vasEncPipeOperStatus=vasEncPipeOperStatus, vasPulSnkEnableTr101=vasPulSnkEnableTr101, vasIfName=vasIfName)
mibBuilder.exportSymbols("NETI-VAS-MIB", vasPulSnkIndex=vasPulSnkIndex, vasUdpSrcLocalPort=vasUdpSrcLocalPort, vasIfEntry=vasIfEntry, vasUdpSnkLocalPort=vasUdpSnkLocalPort, vasUdpSrcFailure=vasUdpSrcFailure, vasPulSrcConnectionStatus=vasPulSrcConnectionStatus, vasPulSnkFecLatency=vasPulSnkFecLatency, vasPusSrcLocalIfType=vasPusSrcLocalIfType, vasMpuSrcAdminStatus=vasMpuSrcAdminStatus, vasStatisticsGroup=vasStatisticsGroup, vasPusSnkOperStatus=vasPusSnkOperStatus, vasDecPipeAdminStatus=vasDecPipeAdminStatus, vasUdpSrcLastChanged=vasUdpSrcLastChanged, vasPulSrcOperStatus=vasPulSrcOperStatus, vasUdpSrcName=vasUdpSrcName, vasPulSrcIndex=vasPulSrcIndex)
