#
# PySNMP MIB module AVAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:16:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, enterprises, iso, NotificationType, Unsigned32, ModuleIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Counter64, Gauge32, Integer32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "enterprises", "iso", "NotificationType", "Unsigned32", "ModuleIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Counter64", "Gauge32", "Integer32", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniAVAS = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24))
avasProc = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 1))
avasNet = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 2))
avasElem = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 3))
avasCond = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 4))
avasGlobalData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 10))
avasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 11))
avasPSumStat = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 50, 99, 255))).clone(namedValues=NamedValues(("missing", 1), ("ready", 2), ("running", 3), ("errorSystem", 4), ("errorNet", 5), ("errorSignon", 50), ("unknown", 99), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasPSumStat.setStatus('mandatory')
avasPUpamStat = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 255))).clone(namedValues=NamedValues(("started", 1), ("ready", 2), ("running", 3), ("ended", 4), ("abended", 5), ("stop", 6), ("hold", 7), ("shutdown", 8), ("kill", 9), ("unknown", 99), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasPUpamStat.setStatus('mandatory')
avasPPlamStat = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 255))).clone(namedValues=NamedValues(("started", 1), ("ready", 2), ("running", 3), ("ended", 4), ("abended", 5), ("stop", 6), ("hold", 7), ("shutdown", 8), ("kill", 9), ("unknown", 99), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasPPlamStat.setStatus('mandatory')
avasPCentrStat = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 255))).clone(namedValues=NamedValues(("started", 1), ("ready", 2), ("running", 3), ("ended", 4), ("abended", 5), ("stop", 6), ("hold", 7), ("shutdown", 8), ("kill", 9), ("unknown", 99), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasPCentrStat.setStatus('mandatory')
avasPAvakNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasPAvakNum.setStatus('mandatory')
avasPAvakTab = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 6), )
if mibBuilder.loadTexts: avasPAvakTab.setStatus('mandatory')
avasPAvakTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 6, 1), ).setIndexNames((0, "AVAS-MIB", "avasPAvakTabIndex"))
if mibBuilder.loadTexts: avasPAvakTabEntry.setStatus('mandatory')
avasPAvakTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasPAvakTabIndex.setStatus('mandatory')
avasPAvakJvName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasPAvakJvName.setStatus('mandatory')
avasPAvakState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 99, 255))).clone(namedValues=NamedValues(("started", 1), ("ready", 2), ("running", 3), ("ended", 4), ("abended", 5), ("stop", 6), ("hold", 7), ("shutdown", 8), ("kill", 9), ("unknown", 99), ("undefined", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasPAvakState.setStatus('mandatory')
avasNStateF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 100))).clone(namedValues=NamedValues(("problem", 1), ("error", 5), ("hold", 6), ("running", 7), ("waiting", 8), ("condwait", 9), ("all", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasNStateF.setStatus('mandatory')
avasNPatF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasNPatF.setStatus('mandatory')
avasNNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNNum.setStatus('mandatory')
avasNTab = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4), )
if mibBuilder.loadTexts: avasNTab.setStatus('mandatory')
avasNTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1), ).setIndexNames((0, "AVAS-MIB", "avasNTabIndex"))
if mibBuilder.loadTexts: avasNTabEntry.setStatus('mandatory')
avasNTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNTabIndex.setStatus('mandatory')
avasNName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNName.setStatus('mandatory')
avasNStart = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStart.setStatus('mandatory')
avasNState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 21, 99))).clone(namedValues=NamedValues(("abended", 3), ("ended", 4), ("error", 5), ("hold", 6), ("running", 7), ("waiting", 8), ("condwait", 9), ("restarted", 10), ("resumed", 11), ("opwait", 12), ("ignored", 14), ("start", 17), ("shifted", 21), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNState.setStatus('mandatory')
avasNStateOfError = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStateOfError.setStatus('mandatory')
avasNStateOfRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStateOfRestart.setStatus('mandatory')
avasNStateOfCondwait = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStateOfCondwait.setStatus('mandatory')
avasNStateOfHold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStateOfHold.setStatus('mandatory')
avasNAvak = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNAvak.setStatus('mandatory')
avasNStartedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNStartedIndex.setStatus('mandatory')
avasNText = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 2, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasNText.setStatus('mandatory')
avasEEStateF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8, 13, 23))).clone(namedValues=NamedValues(("all", 1), ("abended", 3), ("error", 5), ("hold", 6), ("running-exec", 7), ("waiting", 8), ("skipped", 13), ("no-occure", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasEEStateF.setStatus('mandatory')
avasEETypeF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("all", 1), ("net", 2), ("jva", 3), ("ext", 4), ("mod", 5), ("std", 6), ("job", 7), ("res", 8), ("val", 9), ("tim", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasEETypeF.setStatus('mandatory')
avasEEFuncF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("all", 1), ("job", 2), ("proc", 3), ("comp", 4), ("add", 5), ("delete", 6), ("modify", 7), ("net", 8), ("wait", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasEEFuncF.setStatus('mandatory')
avasENStateF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 100))).clone(namedValues=NamedValues(("problem", 1), ("error", 5), ("hold", 6), ("running", 7), ("waiting", 8), ("condwait", 9), ("all", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasENStateF.setStatus('mandatory')
avasENPatF = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasENPatF.setStatus('mandatory')
avasENum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasENum.setStatus('mandatory')
avasETab = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7), )
if mibBuilder.loadTexts: avasETab.setStatus('mandatory')
avasETabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1), ).setIndexNames((0, "AVAS-MIB", "avasETabIndex"))
if mibBuilder.loadTexts: avasETabEntry.setStatus('mandatory')
avasETabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasETabIndex.setStatus('mandatory')
avasEName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEName.setStatus('mandatory')
avasEFu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 99))).clone(namedValues=NamedValues(("job", 2), ("proc", 3), ("comp", 4), ("add", 5), ("delete", 6), ("modify", 7), ("net", 8), ("wait", 9), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEFu.setStatus('mandatory')
avasEType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("net", 2), ("jva", 3), ("ext", 4), ("mod", 5), ("std", 6), ("job", 7), ("res", 8), ("val", 9), ("tim", 10), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEType.setStatus('mandatory')
avasEInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEInd.setStatus('mandatory')
avasESynInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasESynInd.setStatus('mandatory')
avasEState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 13, 14, 16, 18, 19, 20, 22, 23, 66, 99))).clone(namedValues=NamedValues(("created", 2), ("abended", 3), ("ended", 4), ("error", 5), ("hold", 6), ("running", 7), ("waiting", 8), ("skipped", 13), ("ignored", 14), ("executed", 16), ("no-plan", 18), ("deleted", 19), ("no-submit", 20), ("occurred", 22), ("no-occure", 23), ("error-cat", 66), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEState.setStatus('mandatory')
avasENet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasENet.setStatus('mandatory')
avasEDelSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("start", 1), ("ignore", 2), ("cancel", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEDelSolution.setStatus('mandatory')
avasELatest = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasELatest.setStatus('mandatory')
avasEJva = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEJva.setStatus('mandatory')
avasEJvaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 3, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasEJvaValue.setStatus('mandatory')
avasCFlag = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("free", 2), ("error", 3), ("share", 4), ("exclusiv", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avasCFlag.setStatus('mandatory')
avasCNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCNum.setStatus('mandatory')
avasCTab = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3), )
if mibBuilder.loadTexts: avasCTab.setStatus('mandatory')
avasCTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1), ).setIndexNames((0, "AVAS-MIB", "avasCTabIndex"))
if mibBuilder.loadTexts: avasCTabEntry.setStatus('mandatory')
avasCTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCTabIndex.setStatus('mandatory')
avasCName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCName.setStatus('mandatory')
avasCType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("net", 1), ("job", 2), ("res", 3), ("val", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCType.setStatus('mandatory')
avasCInd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCInd.setStatus('mandatory')
avasCState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2), ("ended", 3), ("abended", 4), ("free", 5), ("error", 6), ("ignored", 7), ("no-plan", 8), ("no-submit", 9), ("skipped", 10), ("shared", 11), ("exclusiv", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCState.setStatus('mandatory')
avasCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("created", 1), ("ended", 2), ("abended", 3), ("ignored", 4), ("free", 5), ("error", 6), ("deleted", 7), ("no-plan", 8), ("no-submit", 9), ("skipped", 10), ("shared", 11), ("exclusiv", 12), ("value", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCValue.setStatus('mandatory')
avasCCreateBy = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCCreateBy.setStatus('mandatory')
avasCCreateDate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCCreateDate.setStatus('mandatory')
avasCUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCUpdate.setStatus('mandatory')
avasCLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 24, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasCLifeTime.setStatus('mandatory')
avasagtVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasagtVersion.setStatus('mandatory')
avasSystemID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasSystemID.setStatus('mandatory')
avasTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 1))
avasLastMsg = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avasLastMsg.setStatus('mandatory')
avasStateTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10))
avasMissing = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,301)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasReady = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,302)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasRunning = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,303)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasErrorSystem = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,304)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasErrorNet = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,305)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProblemNet = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,307)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasErrorSignon = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 10) + (0,350)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProblemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11))
avasNetAbended = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,311)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasNetError = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,312)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasNetRestarted = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,313)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasNetCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,314)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasJobAbended = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,321)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasJobError = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,322)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasJobRestarted = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,323)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasJobCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,324)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProcAbended = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,331)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProcError = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,332)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProcRestarted = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,333)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasProcCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,334)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasUJobAbended = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,341)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasUJobError = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,342)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasUJobRestarted = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,343)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
avasUJobCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 24, 11, 11) + (0,344)).setObjects(("AVAS-MIB", "avasSystemID"), ("AVAS-MIB", "avasLastMsg"))
mibBuilder.exportSymbols("AVAS-MIB", avasNName=avasNName, avasNStart=avasNStart, avasNAvak=avasNAvak, avasEName=avasEName, avasProblemTraps=avasProblemTraps, avasENet=avasENet, avasNText=avasNText, avasCond=avasCond, avasTrapData=avasTrapData, avasEETypeF=avasEETypeF, avasCName=avasCName, avasRunning=avasRunning, avasEEStateF=avasEEStateF, sniProductMibs=sniProductMibs, avasUJobError=avasUJobError, avasEInd=avasEInd, avasProblemNet=avasProblemNet, avasNStateOfCondwait=avasNStateOfCondwait, avasUJobRestarted=avasUJobRestarted, avasErrorSystem=avasErrorSystem, avasCValue=avasCValue, avasEState=avasEState, avasMissing=avasMissing, avasReady=avasReady, avasProcRestarted=avasProcRestarted, avasENStateF=avasENStateF, avasEJvaValue=avasEJvaValue, avasPAvakTab=avasPAvakTab, avasPAvakState=avasPAvakState, avasNStateOfError=avasNStateOfError, avasElem=avasElem, avasPSumStat=avasPSumStat, avasUJobCancelled=avasUJobCancelled, avasagtVersion=avasagtVersion, avasEEFuncF=avasEEFuncF, avasJobError=avasJobError, avasCLifeTime=avasCLifeTime, avasJobCancelled=avasJobCancelled, avasCTabEntry=avasCTabEntry, avasNStateOfRestart=avasNStateOfRestart, avasPCentrStat=avasPCentrStat, avasCTabIndex=avasCTabIndex, avasNStateF=avasNStateF, avasStateTraps=avasStateTraps, avasEJva=avasEJva, avasNTab=avasNTab, avasETab=avasETab, avasETabIndex=avasETabIndex, avasNStateOfHold=avasNStateOfHold, avasProcAbended=avasProcAbended, avasELatest=avasELatest, avasErrorSignon=avasErrorSignon, avasEType=avasEType, avasNetRestarted=avasNetRestarted, sniAVAS=sniAVAS, avasNState=avasNState, avasPPlamStat=avasPPlamStat, avasErrorNet=avasErrorNet, avasProc=avasProc, avasNetError=avasNetError, avasUJobAbended=avasUJobAbended, avasCState=avasCState, avasNetCancelled=avasNetCancelled, avasENPatF=avasENPatF, avasCNum=avasCNum, avasProcError=avasProcError, avasENum=avasENum, avasPAvakJvName=avasPAvakJvName, avasPAvakTabIndex=avasPAvakTabIndex, avasESynInd=avasESynInd, avasNetAbended=avasNetAbended, avasPAvakTabEntry=avasPAvakTabEntry, avasProcCancelled=avasProcCancelled, avasETabEntry=avasETabEntry, avasEFu=avasEFu, avasCTab=avasCTab, sni=sni, avasCCreateBy=avasCCreateBy, avasCInd=avasCInd, avasCFlag=avasCFlag, avasTraps=avasTraps, avasPUpamStat=avasPUpamStat, avasNNum=avasNNum, avasJobAbended=avasJobAbended, avasNet=avasNet, avasNPatF=avasNPatF, avasEDelSolution=avasEDelSolution, avasJobRestarted=avasJobRestarted, avasLastMsg=avasLastMsg, avasGlobalData=avasGlobalData, avasCType=avasCType, avasNTabEntry=avasNTabEntry, avasCUpdate=avasCUpdate, avasSystemID=avasSystemID, avasNStartedIndex=avasNStartedIndex, avasCCreateDate=avasCCreateDate, avasNTabIndex=avasNTabIndex, avasPAvakNum=avasPAvakNum)
