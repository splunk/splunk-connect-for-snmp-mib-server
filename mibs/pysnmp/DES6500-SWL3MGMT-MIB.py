#
# PySNMP MIB module DES6500-SWL3MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES6500-SWL3MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
RouterID, PositiveInteger, Status, DesignatedRouterPriority, Metric, TOSType, AreaID, UpToMaxAge, HelloRange = mibBuilder.importSymbols("OSPF-MIB", "RouterID", "PositiveInteger", "Status", "DesignatedRouterPriority", "Metric", "TOSType", "AreaID", "UpToMaxAge", "HelloRange")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, Gauge32, Counter64, NotificationType, Counter32, MibIdentifier, Unsigned32, iso, ModuleIdentity, Integer32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Gauge32", "Counter64", "NotificationType", "Counter32", "MibIdentifier", "Unsigned32", "iso", "ModuleIdentity", "Integer32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TruthValue, PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "PhysAddress", "DisplayString", "TextualConvention")
des6500, = mibBuilder.importSymbols("SW6500PRIMGMT-MIB", "des6500")
swL3MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3))
if mibBuilder.loadTexts: swL3MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL3MgmtMIB.setOrganization('enterprise, Inc.')
class NodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

swL3DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1))
swL3IpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2))
swL3RelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3))
swL3IpCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1))
swL3IpFdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2))
swL3RelayDhcpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1))
swL3RelayDnsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2))
swL3DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1))
swL3DevCtrlRIPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setStatus('current')
swL3DevCtrlOSPFState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setStatus('current')
swL3DevCtrlDVMRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setStatus('current')
swL3DevCtrlVrrpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpState.setStatus('current')
swL3DevCtrlVrrpPingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setStatus('current')
swL3DevCtrlDHCPAutoConfigState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDHCPAutoConfigState.setStatus('current')
swL3DevCtrlPIMGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlPIMGlobalState.setStatus('current')
swL3IpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: swL3IpCtrlTable.setStatus('current')
swL3IpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpCtrlIpAddr"))
if mibBuilder.loadTexts: swL3IpCtrlEntry.setStatus('current')
swL3IpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setStatus('current')
swL3IpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setStatus('current')
swL3IpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setStatus('current')
swL3IpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setStatus('current')
swL3IpCtrlVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setStatus('current')
swL3IpCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlMode.setStatus('current')
swL3IpCtrlSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setStatus('current')
swL3IpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlState.setStatus('current')
swL3IpCtrlOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlOperState.setStatus('current')
swL3IpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setStatus('current')
swL3IpFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setStatus('current')
swL3IpFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpFdbInfoIpAddr"))
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setStatus('current')
swL3IpFdbInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setStatus('current')
swL3IpFdbInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setStatus('current')
swL3IpFdbInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setStatus('current')
swL3IpFdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoType.setStatus('current')
swL3IpArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpArpAgingTime.setStatus('current')
swL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5), )
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setStatus('current')
swL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteBkupState"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteNextHop"))
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setStatus('current')
swL3IpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setStatus('current')
swL3IpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setStatus('current')
swL3IpStaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setStatus('current')
swL3IpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setStatus('current')
swL3IpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setStatus('current')
swL3IpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setStatus('current')
swL3RelayBootpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpState.setStatus('current')
swL3RelayBootpHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpHopCount.setStatus('current')
swL3RelayBootpTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpTimeThreshold.setStatus('current')
swL3RelayDhcpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4), )
if mibBuilder.loadTexts: swL3RelayDhcpCtrlTable.setStatus('current')
swL3RelayDhcpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RelayDhcpCtrlInterfaceName"), (0, "DES6500-SWL3MGMT-MIB", "swL3RelayDhcpCtrlServer"))
if mibBuilder.loadTexts: swL3RelayDhcpCtrlEntry.setStatus('current')
swL3RelayDhcpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlInterfaceName.setStatus('current')
swL3RelayDhcpCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlServer.setStatus('current')
swL3RelayDhcpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlState.setStatus('current')
swL3RelayDhcpOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82State.setStatus('current')
swL3RelayDhcpOption82ChceckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82ChceckState.setStatus('current')
swL3RelayDhcpOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("replace", 0), ("drop", 1), ("keep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82Policy.setStatus('current')
swL3RelayDnsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsState.setStatus('current')
swL3RelayDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setStatus('current')
swL3RelayDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setStatus('current')
swL3RelayDnsCacheState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setStatus('current')
swL3RelayDnsStaticTableState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setStatus('current')
swL3RelayDnsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6), )
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setStatus('current')
swL3RelayDnsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RelayDnsCtrlDomainName"), (0, "DES6500-SWL3MGMT-MIB", "swL3RelayDnsCtrlIpAddr"))
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setStatus('current')
swL3RelayDnsCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setStatus('current')
swL3RelayDnsCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setStatus('current')
swL3RelayDnsCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setStatus('current')
swL3Md5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4), )
if mibBuilder.loadTexts: swL3Md5Table.setStatus('current')
swL3Md5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3Md5KeyId"))
if mibBuilder.loadTexts: swL3Md5Entry.setStatus('current')
swL3Md5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Md5KeyId.setStatus('current')
swL3Md5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5Key.setStatus('current')
swL3Md5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5RowStatus.setStatus('current')
swL3RouteRedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5), )
if mibBuilder.loadTexts: swL3RouteRedistriTable.setStatus('current')
swL3RouteRedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RouteRedistriSrcProtocol"), (0, "DES6500-SWL3MGMT-MIB", "swL3RouteRedistriDstProtocol"))
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setStatus('current')
swL3RouteRedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("static", 4), ("local", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setStatus('current')
swL3RouteRedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setStatus('current')
swL3RouteRedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("all", 0), ("internal", 1), ("external", 2), ("extType1", 3), ("extType2", 4), ("type-1", 5), ("type-2", 6), ("inter-E1", 7), ("inter-E2", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriType.setStatus('current')
swL3RouteRedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setStatus('current')
swL3RouteRedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setStatus('current')
swL3OspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6), )
if mibBuilder.loadTexts: swL3OspfHostTable.setStatus('current')
swL3OspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3OspfHostIpAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3OspfHostTOS"))
if mibBuilder.loadTexts: swL3OspfHostEntry.setStatus('current')
swL3OspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setStatus('current')
swL3OspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostTOS.setStatus('current')
swL3OspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostMetric.setStatus('current')
swL3OspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 4), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostAreaID.setStatus('current')
swL3OspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostStatus.setStatus('current')
swL3ospfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7), )
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setStatus('current')
swL3ospfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3ospfVirtIfAreaId"), (0, "DES6500-SWL3MGMT-MIB", "swL3ospfVirtIfNeighbor"))
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setStatus('current')
swL3ospfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setStatus('current')
swL3ospfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setStatus('current')
swL3ospfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setStatus('current')
swL3ospfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setStatus('current')
swL3ospfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setStatus('current')
swL3ospfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setStatus('current')
swL3ospfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfState.setStatus('current')
swL3ospfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setStatus('current')
swL3ospfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setStatus('current')
swL3ospfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setStatus('current')
swL3ospfVirtIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setStatus('current')
swL3ospfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setStatus('current')
swL3ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8), )
if mibBuilder.loadTexts: swL3ospfIfTable.setStatus('current')
swL3ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3ospfIfIpAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3ospfAddressLessIf"))
if mibBuilder.loadTexts: swL3ospfIfEntry.setStatus('current')
swL3ospfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setStatus('current')
swL3ospfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setStatus('current')
swL3ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAreaId.setStatus('current')
swL3ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfType.setStatus('current')
swL3ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setStatus('current')
swL3ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setStatus('current')
swL3ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setStatus('current')
swL3ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setStatus('current')
swL3ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setStatus('current')
swL3ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setStatus('current')
swL3ospfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setStatus('current')
swL3ospfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfState.setStatus('current')
swL3ospfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setStatus('current')
swL3ospfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setStatus('current')
swL3ospfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfEvents.setStatus('current')
swL3ospfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setStatus('current')
swL3ospfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfDemand.setStatus('current')
swL3ospfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthType.setStatus('current')
swL3ospfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setStatus('current')
swL3ospfIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setStatus('current')
swL3ospfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfStatus.setStatus('current')
swL3dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9), )
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setStatus('current')
swL3dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3dvmrpInterfaceIfIndex"))
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setStatus('current')
swL3dvmrpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setStatus('current')
swL3dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setStatus('current')
swL3dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setStatus('current')
swL3dvmrpInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setStatus('current')
swL3dvmrpInterfaceNbrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setStatus('current')
swL3dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setStatus('current')
swL3dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setStatus('current')
swL3dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setStatus('current')
swL3PimMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10))
swL3PimCbsrInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1))
swL3pimCbsrBootStrapPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCbsrBootStrapPeriod.setStatus('current')
swL3pimCbsrHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCbsrHashMaskLen.setStatus('current')
swL3pimCandidateRPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2))
swL3pimCandidateRPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPHoldtime.setStatus('current')
swL3pimCandidateRPPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPPriority.setStatus('current')
swL3pimCandidateRPWildcardPrefixCnt = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPWildcardPrefixCnt.setStatus('current')
swL3pimSptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3))
swL3pimLastHopSptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimLastHopSptThreshold.setStatus('current')
swL3pimRPSptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRPSptThreshold.setStatus('current')
swL3pimRegChksumIncDataTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4), )
if mibBuilder.loadTexts: swL3pimRegChksumIncDataTable.setStatus('current')
swL3pimRegChksumIncDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3SwL3pimRegChksumIncDataRpAddr"))
if mibBuilder.loadTexts: swL3pimRegChksumIncDataEntry.setStatus('current')
swL3SwL3pimRegChksumIncDataRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataRpAddr.setStatus('current')
swL3SwL3pimRegChksumIncDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataState.setStatus('current')
swL3PimInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5))
swL3pimRegisterProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRegisterProbeTime.setStatus('current')
swL3pimRegisterSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRegisterSuppressionTime.setStatus('current')
swL3pimInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3), )
if mibBuilder.loadTexts: swL3pimInfoTable.setStatus('current')
swL3pimInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3pimInterface"))
if mibBuilder.loadTexts: swL3pimInfoEntry.setStatus('current')
swL3pimInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swL3pimInterface.setStatus('current')
swL3pimDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimDRPriority.setStatus('current')
swL3pimStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6), )
if mibBuilder.loadTexts: swL3pimStaticRPTable.setStatus('current')
swL3pimStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPGroupAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPGroupMask"), (0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPAddress"))
if mibBuilder.loadTexts: swL3pimStaticRPEntry.setStatus('current')
swL3pimStaticRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPGroupAddress.setStatus('current')
swL3pimStaticRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPGroupMask.setStatus('current')
swL3pimStaticRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPAddress.setStatus('current')
swL3pimStaticRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3pimStaticRPRowStatus.setStatus('current')
mibBuilder.exportSymbols("DES6500-SWL3MGMT-MIB", swL3dvmrpInterfaceStatus=swL3dvmrpInterfaceStatus, swL3IpCtrlEntry=swL3IpCtrlEntry, swL3pimCbsrBootStrapPeriod=swL3pimCbsrBootStrapPeriod, swL3ospfIfPollInterval=swL3ospfIfPollInterval, swL3ospfVirtIfAuthKey=swL3ospfVirtIfAuthKey, swL3IpFdbMgmt=swL3IpFdbMgmt, swL3SwL3pimRegChksumIncDataRpAddr=swL3SwL3pimRegChksumIncDataRpAddr, swL3RouteRedistriRowStatus=swL3RouteRedistriRowStatus, swL3pimInfoEntry=swL3pimInfoEntry, swL3dvmrpInterfaceNbrTimeout=swL3dvmrpInterfaceNbrTimeout, swL3OspfHostEntry=swL3OspfHostEntry, swL3IpFdbInfoIpSubnetMask=swL3IpFdbInfoIpSubnetMask, swL3RelayMgmt=swL3RelayMgmt, swL3IpCtrlIpSubnetMask=swL3IpCtrlIpSubnetMask, swL3pimRegChksumIncDataTable=swL3pimRegChksumIncDataTable, swL3Md5Table=swL3Md5Table, swL3IpCtrlMgmt=swL3IpCtrlMgmt, swL3pimCandidateRPHoldtime=swL3pimCandidateRPHoldtime, swL3dvmrpInterfaceMetric=swL3dvmrpInterfaceMetric, swL3RelayDnsCtrlTable=swL3RelayDnsCtrlTable, swL3IpCtrlInterfaceName=swL3IpCtrlInterfaceName, swL3dvmrpInterfaceRcvBadPkts=swL3dvmrpInterfaceRcvBadPkts, swL3RelayDnsCtrlEntry=swL3RelayDnsCtrlEntry, swL3ospfIfState=swL3ospfIfState, swL3ospfIfAuthType=swL3ospfIfAuthType, swL3pimStaticRPEntry=swL3pimStaticRPEntry, swL3IpMgmt=swL3IpMgmt, swL3OspfHostMetric=swL3OspfHostMetric, swL3OspfHostIpAddress=swL3OspfHostIpAddress, swL3RelayDhcpOption82Policy=swL3RelayDhcpOption82Policy, swL3PimInfoMgmt=swL3PimInfoMgmt, swL3RouteRedistriDstProtocol=swL3RouteRedistriDstProtocol, swL3OspfHostAreaID=swL3OspfHostAreaID, swL3IpCtrlMode=swL3IpCtrlMode, swL3ospfIfMulticastForwarding=swL3ospfIfMulticastForwarding, swL3DevCtrlVrrpPingState=swL3DevCtrlVrrpPingState, swL3ospfIfRetransInterval=swL3ospfIfRetransInterval, swL3RelayDhcpMgmt=swL3RelayDhcpMgmt, swL3ospfIfRtrPriority=swL3ospfIfRtrPriority, swL3MgmtMIB=swL3MgmtMIB, swL3IpCtrlIpAddr=swL3IpCtrlIpAddr, swL3OspfHostTOS=swL3OspfHostTOS, swL3ospfIfDesignatedRouter=swL3ospfIfDesignatedRouter, swL3RelayDhcpCtrlEntry=swL3RelayDhcpCtrlEntry, swL3IpFdbInfoTable=swL3IpFdbInfoTable, swL3RelayDnsCacheState=swL3RelayDnsCacheState, NodeAddress=NodeAddress, swL3IpFdbInfoIpAddr=swL3IpFdbInfoIpAddr, swL3IpCtrlVlanName=swL3IpCtrlVlanName, swL3RelayDnsPrimaryServer=swL3RelayDnsPrimaryServer, swL3pimRegChksumIncDataEntry=swL3pimRegChksumIncDataEntry, swL3RelayDnsSecondaryServer=swL3RelayDnsSecondaryServer, swL3pimStaticRPGroupMask=swL3pimStaticRPGroupMask, swL3IpCtrlIfIndex=swL3IpCtrlIfIndex, swL3RelayDnsMgmt=swL3RelayDnsMgmt, swL3RelayDhcpCtrlInterfaceName=swL3RelayDhcpCtrlInterfaceName, swL3IpStaticRouteMask=swL3IpStaticRouteMask, swL3dvmrpInterfaceEntry=swL3dvmrpInterfaceEntry, swL3pimDRPriority=swL3pimDRPriority, swL3RelayDhcpOption82ChceckState=swL3RelayDhcpOption82ChceckState, swL3ospfIfEvents=swL3ospfIfEvents, swL3OspfHostTable=swL3OspfHostTable, swL3ospfIfTable=swL3ospfIfTable, swL3IpStaticRouteEntry=swL3IpStaticRouteEntry, swL3ospfIfAdminStat=swL3ospfIfAdminStat, swL3DevCtrlDHCPAutoConfigState=swL3DevCtrlDHCPAutoConfigState, swL3Md5RowStatus=swL3Md5RowStatus, swL3DevCtrlPIMGlobalState=swL3DevCtrlPIMGlobalState, swL3RelayDnsCtrlDomainName=swL3RelayDnsCtrlDomainName, swL3Md5Key=swL3Md5Key, swL3DevCtrlDVMRPState=swL3DevCtrlDVMRPState, swL3ospfIfHelloInterval=swL3ospfIfHelloInterval, swL3pimInfoTable=swL3pimInfoTable, swL3ospfIfAreaId=swL3ospfIfAreaId, swL3pimRPSptThreshold=swL3pimRPSptThreshold, swL3Md5Entry=swL3Md5Entry, swL3ospfVirtIfRetransInterval=swL3ospfVirtIfRetransInterval, swL3IpStaticRouteDest=swL3IpStaticRouteDest, swL3RouteRedistriType=swL3RouteRedistriType, swL3IpFdbInfoType=swL3IpFdbInfoType, swL3pimInterface=swL3pimInterface, swL3ospfVirtIfStatus=swL3ospfVirtIfStatus, swL3ospfIfEntry=swL3ospfIfEntry, swL3RouteRedistriTable=swL3RouteRedistriTable, swL3IpFdbInfoEntry=swL3IpFdbInfoEntry, swL3RelayDnsCtrlState=swL3RelayDnsCtrlState, swL3pimCandidateRPPriority=swL3pimCandidateRPPriority, swL3ospfIfAuthKey=swL3ospfIfAuthKey, swL3DevCtrl=swL3DevCtrl, swL3dvmrpInterfaceLocalAddress=swL3dvmrpInterfaceLocalAddress, swL3IpStaticRouteStatus=swL3IpStaticRouteStatus, swL3PimCbsrInfoMgmt=swL3PimCbsrInfoMgmt, swL3IpCtrlSecondary=swL3IpCtrlSecondary, swL3ospfIfType=swL3ospfIfType, swL3dvmrpInterfaceProbe=swL3dvmrpInterfaceProbe, swL3RelayBootpTimeThreshold=swL3RelayBootpTimeThreshold, swL3ospfVirtIfNeighbor=swL3ospfVirtIfNeighbor, swL3pimSptMgmt=swL3pimSptMgmt, swL3DevCtrlVrrpState=swL3DevCtrlVrrpState, swL3pimLastHopSptThreshold=swL3pimLastHopSptThreshold, swL3IpStaticRouteBkupState=swL3IpStaticRouteBkupState, swL3ospfIfBackupDesignatedRouter=swL3ospfIfBackupDesignatedRouter, swL3ospfVirtIfTable=swL3ospfVirtIfTable, swL3DevCtrlOSPFState=swL3DevCtrlOSPFState, swL3RelayBootpState=swL3RelayBootpState, swL3Md5KeyId=swL3Md5KeyId, NetAddress=NetAddress, swL3RelayDnsCtrlIpAddr=swL3RelayDnsCtrlIpAddr, PYSNMP_MODULE_ID=swL3MgmtMIB, swL3IpStaticRouteTable=swL3IpStaticRouteTable, swL3ospfIfIpAddress=swL3ospfIfIpAddress, swL3pimRegisterSuppressionTime=swL3pimRegisterSuppressionTime, swL3RelayDhcpCtrlTable=swL3RelayDhcpCtrlTable, swL3RelayDnsState=swL3RelayDnsState, swL3ospfVirtIfTransitDelay=swL3ospfVirtIfTransitDelay, swL3pimStaticRPRowStatus=swL3pimStaticRPRowStatus, swL3pimStaticRPTable=swL3pimStaticRPTable, swL3RelayDhcpCtrlServer=swL3RelayDhcpCtrlServer, swL3RelayDnsStaticTableState=swL3RelayDnsStaticTableState, swL3ospfIfTransitDelay=swL3ospfIfTransitDelay, swL3IpFdbInfoPort=swL3IpFdbInfoPort, swL3ospfVirtIfHelloInterval=swL3ospfVirtIfHelloInterval, swL3ospfIfStatus=swL3ospfIfStatus, swL3DevMgmt=swL3DevMgmt, swL3ospfVirtIfState=swL3ospfVirtIfState, swL3IpStaticRouteNextHop=swL3IpStaticRouteNextHop, swL3RouteRedistriMetric=swL3RouteRedistriMetric, swL3ospfVirtIfAuthType=swL3ospfVirtIfAuthType, swL3DevCtrlRIPState=swL3DevCtrlRIPState, swL3ospfAddressLessIf=swL3ospfAddressLessIf, swL3IpCtrlTable=swL3IpCtrlTable, swL3RouteRedistriSrcProtocol=swL3RouteRedistriSrcProtocol, swL3pimCbsrHashMaskLen=swL3pimCbsrHashMaskLen, swL3ospfIfDemand=swL3ospfIfDemand, swL3dvmrpInterfaceTable=swL3dvmrpInterfaceTable, swL3pimCandidateRPMgmt=swL3pimCandidateRPMgmt, swL3IpArpAgingTime=swL3IpArpAgingTime, swL3ospfVirtIfAreaId=swL3ospfVirtIfAreaId, swL3ospfIfAuthKeyID=swL3ospfIfAuthKeyID, swL3IpCtrlAdminState=swL3IpCtrlAdminState, swL3RouteRedistriEntry=swL3RouteRedistriEntry, swL3ospfVirtIfRtrDeadInterval=swL3ospfVirtIfRtrDeadInterval, swL3pimRegisterProbeTime=swL3pimRegisterProbeTime, swL3OspfHostStatus=swL3OspfHostStatus, swL3PimMgmt=swL3PimMgmt, swL3pimCandidateRPWildcardPrefixCnt=swL3pimCandidateRPWildcardPrefixCnt, swL3ospfVirtIfEntry=swL3ospfVirtIfEntry, swL3pimStaticRPAddress=swL3pimStaticRPAddress, swL3RelayDhcpCtrlState=swL3RelayDhcpCtrlState, swL3ospfVirtIfAuthKeyID=swL3ospfVirtIfAuthKeyID, swL3IpStaticRouteMetric=swL3IpStaticRouteMetric, swL3IpCtrlOperState=swL3IpCtrlOperState, swL3SwL3pimRegChksumIncDataState=swL3SwL3pimRegChksumIncDataState, swL3RelayDhcpOption82State=swL3RelayDhcpOption82State, swL3IpCtrlState=swL3IpCtrlState, swL3ospfIfRtrDeadInterval=swL3ospfIfRtrDeadInterval, swL3dvmrpInterfaceIfIndex=swL3dvmrpInterfaceIfIndex, swL3dvmrpInterfaceRcvBadRoutes=swL3dvmrpInterfaceRcvBadRoutes, swL3ospfVirtIfEvents=swL3ospfVirtIfEvents, swL3RelayBootpHopCount=swL3RelayBootpHopCount, swL3pimStaticRPGroupAddress=swL3pimStaticRPGroupAddress)
