#
# PySNMP MIB module HPN-ICF-LswDHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LswDHCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hpnicflswCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicflswCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, Gauge32, iso, NotificationType, ObjectIdentity, Counter32, Bits, Unsigned32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Gauge32", "iso", "NotificationType", "ObjectIdentity", "Counter32", "Bits", "Unsigned32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks")
RowStatus, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "MacAddress")
hpnicfLswDhcpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8))
hpnicfLswDhcpMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hpnicfLswDhcpMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hpnicfLswDhcpMib.setOrganization('')
hpnicfLswDhcpMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1))
hpnicfDhcpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1), )
if mibBuilder.loadTexts: hpnicfDhcpGroupTable.setStatus('current')
hpnicfDhcpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-LswDHCP-MIB", "hpnicfDhcpGroupID"))
if mibBuilder.loadTexts: hpnicfDhcpGroupEntry.setStatus('current')
hpnicfDhcpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpGroupID.setStatus('current')
hpnicfIpDhcpServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIpDhcpServerAddress1.setStatus('current')
hpnicfIpDhcpServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIpDhcpServerAddress2.setStatus('current')
hpnicfDhcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpRowStatus.setStatus('current')
hpnicfDhcpSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2), )
if mibBuilder.loadTexts: hpnicfDhcpSecurityTable.setStatus('current')
hpnicfDhcpSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-LswDHCP-MIB", "hpnicfDhcpClientIpAddress"))
if mibBuilder.loadTexts: hpnicfDhcpSecurityEntry.setStatus('current')
hpnicfDhcpClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpClientIpAddress.setStatus('current')
hpnicfDhcpClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpClientMacAddress.setStatus('current')
hpnicfDhcpClientProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpClientProperty.setStatus('current')
hpnicfDhcpClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpClientRowStatus.setStatus('current')
hpnicfDhcpToL3IfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3), )
if mibBuilder.loadTexts: hpnicfDhcpToL3IfTable.setStatus('current')
hpnicfDhcpToL3IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LswDHCP-MIB", "hpnicfDhcpToL3VlanIfIndex"))
if mibBuilder.loadTexts: hpnicfDhcpToL3IfEntry.setStatus('current')
hpnicfDhcpToL3VlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpToL3VlanIfIndex.setStatus('current')
hpnicfDhcpToL3GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpToL3GroupId.setStatus('current')
hpnicfDhcpToL3AddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpToL3AddressCheck.setStatus('current')
hpnicfDhcpToL3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 8, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpToL3RowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-LswDHCP-MIB", hpnicfDhcpGroupEntry=hpnicfDhcpGroupEntry, hpnicfDhcpGroupTable=hpnicfDhcpGroupTable, hpnicfDhcpClientMacAddress=hpnicfDhcpClientMacAddress, hpnicfDhcpClientIpAddress=hpnicfDhcpClientIpAddress, hpnicfDhcpClientProperty=hpnicfDhcpClientProperty, hpnicfIpDhcpServerAddress1=hpnicfIpDhcpServerAddress1, hpnicfDhcpToL3RowStatus=hpnicfDhcpToL3RowStatus, hpnicfDhcpGroupID=hpnicfDhcpGroupID, hpnicfLswDhcpMib=hpnicfLswDhcpMib, hpnicfDhcpSecurityEntry=hpnicfDhcpSecurityEntry, hpnicfLswDhcpMibObject=hpnicfLswDhcpMibObject, hpnicfDhcpRowStatus=hpnicfDhcpRowStatus, hpnicfIpDhcpServerAddress2=hpnicfIpDhcpServerAddress2, hpnicfDhcpToL3IfTable=hpnicfDhcpToL3IfTable, hpnicfDhcpClientRowStatus=hpnicfDhcpClientRowStatus, hpnicfDhcpSecurityTable=hpnicfDhcpSecurityTable, hpnicfDhcpToL3AddressCheck=hpnicfDhcpToL3AddressCheck, hpnicfDhcpToL3GroupId=hpnicfDhcpToL3GroupId, PYSNMP_MODULE_ID=hpnicfLswDhcpMib, hpnicfDhcpToL3IfEntry=hpnicfDhcpToL3IfEntry, hpnicfDhcpToL3VlanIfIndex=hpnicfDhcpToL3VlanIfIndex)
