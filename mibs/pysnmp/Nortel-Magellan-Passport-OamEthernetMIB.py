#
# PySNMP MIB module Nortel-Magellan-Passport-OamEthernetMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-OamEthernetMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
lp, lpIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-LogicalProcessorMIB", "lp", "lpIndex")
InterfaceIndex, RowStatus, MacAddress, StorageType, Integer32, Counter32, DisplayString, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "InterfaceIndex", "RowStatus", "MacAddress", "StorageType", "Integer32", "Counter32", "DisplayString", "Unsigned32")
NonReplicated, Link, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "Link", "AsciiString")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, ObjectIdentity, TimeTicks, MibIdentifier, IpAddress, NotificationType, Integer32, Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "NotificationType", "Integer32", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
oamEthernetMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79))
lpOamEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27))
lpOamEnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1), )
if mibBuilder.loadTexts: lpOamEnetRowStatusTable.setStatus('mandatory')
lpOamEnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetRowStatusEntry.setStatus('mandatory')
lpOamEnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetRowStatus.setStatus('mandatory')
lpOamEnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetComponentName.setStatus('mandatory')
lpOamEnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetStorageType.setStatus('mandatory')
lpOamEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: lpOamEnetIndex.setStatus('mandatory')
lpOamEnetCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 10), )
if mibBuilder.loadTexts: lpOamEnetCidDataTable.setStatus('mandatory')
lpOamEnetCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetCidDataEntry.setStatus('mandatory')
lpOamEnetCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetCustomerIdentifier.setStatus('mandatory')
lpOamEnetIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 11), )
if mibBuilder.loadTexts: lpOamEnetIfEntryTable.setStatus('mandatory')
lpOamEnetIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetIfEntryEntry.setStatus('mandatory')
lpOamEnetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetIfAdminStatus.setStatus('mandatory')
lpOamEnetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetIfIndex.setStatus('mandatory')
lpOamEnetProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 12), )
if mibBuilder.loadTexts: lpOamEnetProvTable.setStatus('mandatory')
lpOamEnetProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetProvEntry.setStatus('mandatory')
lpOamEnetApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 12, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetApplicationFramerName.setStatus('mandatory')
lpOamEnetSwitchoverOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetSwitchoverOnFailure.setStatus('mandatory')
lpOamEnetExtendedStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetExtendedStatistics.setStatus('mandatory')
lpOamEnetAdminInfoTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 13), )
if mibBuilder.loadTexts: lpOamEnetAdminInfoTable.setStatus('mandatory')
lpOamEnetAdminInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetAdminInfoEntry.setStatus('mandatory')
lpOamEnetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 13, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetVendor.setStatus('mandatory')
lpOamEnetCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 13, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetCommentText.setStatus('mandatory')
lpOamEnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 15), )
if mibBuilder.loadTexts: lpOamEnetStateTable.setStatus('mandatory')
lpOamEnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetStateEntry.setStatus('mandatory')
lpOamEnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetAdminState.setStatus('mandatory')
lpOamEnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetOperationalState.setStatus('mandatory')
lpOamEnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetUsageState.setStatus('mandatory')
lpOamEnetOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 16), )
if mibBuilder.loadTexts: lpOamEnetOperStatusTable.setStatus('mandatory')
lpOamEnetOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetOperStatusEntry.setStatus('mandatory')
lpOamEnetSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetSnmpOperStatus.setStatus('mandatory')
lpOamEnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 17), )
if mibBuilder.loadTexts: lpOamEnetOperTable.setStatus('mandatory')
lpOamEnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetOperEntry.setStatus('mandatory')
lpOamEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 17, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetMacAddress.setStatus('mandatory')
lpOamEnetActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetActiveStatus.setStatus('mandatory')
lpOamEnetStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetStandbyStatus.setStatus('mandatory')
lpOamEnetOamEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18), )
if mibBuilder.loadTexts: lpOamEnetOamEnetStatsTable.setStatus('mandatory')
lpOamEnetOamEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetOamEnetStatsEntry.setStatus('mandatory')
lpOamEnetClearToSendSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetClearToSendSignalLoss.setStatus('mandatory')
lpOamEnetFrameTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetFrameTooShort.setStatus('mandatory')
lpOamEnetNumberOfRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetNumberOfRxCollisions.setStatus('mandatory')
lpOamEnetLackOfResourcesDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetLackOfResourcesDiscards.setStatus('mandatory')
lpOamEnetOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetOverrunErrors.setStatus('mandatory')
lpOamEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19), )
if mibBuilder.loadTexts: lpOamEnetStatsTable.setStatus('mandatory')
lpOamEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"))
if mibBuilder.loadTexts: lpOamEnetStatsEntry.setStatus('mandatory')
lpOamEnetAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetAlignmentErrors.setStatus('mandatory')
lpOamEnetFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetFcsErrors.setStatus('mandatory')
lpOamEnetSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetSingleCollisionFrames.setStatus('mandatory')
lpOamEnetMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetMultipleCollisionFrames.setStatus('mandatory')
lpOamEnetSqeTestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetSqeTestErrors.setStatus('mandatory')
lpOamEnetDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetDeferredTransmissions.setStatus('mandatory')
lpOamEnetLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetLateCollisions.setStatus('mandatory')
lpOamEnetExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetExcessiveCollisions.setStatus('mandatory')
lpOamEnetMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetMacTransmitErrors.setStatus('mandatory')
lpOamEnetCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetCarrierSenseErrors.setStatus('mandatory')
lpOamEnetFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetFrameTooLongs.setStatus('mandatory')
lpOamEnetMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetMacReceiveErrors.setStatus('mandatory')
lpOamEnetTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2))
lpOamEnetTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1), )
if mibBuilder.loadTexts: lpOamEnetTestRowStatusTable.setStatus('mandatory')
lpOamEnetTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetTestIndex"))
if mibBuilder.loadTexts: lpOamEnetTestRowStatusEntry.setStatus('mandatory')
lpOamEnetTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetTestRowStatus.setStatus('mandatory')
lpOamEnetTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetTestComponentName.setStatus('mandatory')
lpOamEnetTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetTestStorageType.setStatus('mandatory')
lpOamEnetTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: lpOamEnetTestIndex.setStatus('mandatory')
lpOamEnetTestOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 10), )
if mibBuilder.loadTexts: lpOamEnetTestOperTable.setStatus('mandatory')
lpOamEnetTestOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetTestIndex"))
if mibBuilder.loadTexts: lpOamEnetTestOperEntry.setStatus('mandatory')
lpOamEnetTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hardwareLogic", 0), ("configuration", 1), ("memoryMap", 2), ("tdr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpOamEnetTestType.setStatus('mandatory')
lpOamEnetTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 11), )
if mibBuilder.loadTexts: lpOamEnetTestResultsTable.setStatus('mandatory')
lpOamEnetTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-LogicalProcessorMIB", "lpIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetIndex"), (0, "Nortel-Magellan-Passport-OamEthernetMIB", "lpOamEnetTestIndex"))
if mibBuilder.loadTexts: lpOamEnetTestResultsEntry.setStatus('mandatory')
lpOamEnetTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("testComplete", 5))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetTestCauseOfTermination.setStatus('mandatory')
lpOamEnetTestTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 12, 27, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("neverRun", 0), ("fail", 1), ("pass", 2), ("running", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpOamEnetTestTestResult.setStatus('mandatory')
oamEthernetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 1))
oamEthernetGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 1, 27))
oamEthernetGroupCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 1, 27, 2))
oamEthernetGroupCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 1, 27, 2, 2))
oamEthernetCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 3))
oamEthernetCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 3, 27))
oamEthernetCapabilitiesCA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 3, 27, 2))
oamEthernetCapabilitiesCA01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 79, 3, 27, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-OamEthernetMIB", lpOamEnetCustomerIdentifier=lpOamEnetCustomerIdentifier, lpOamEnetActiveStatus=lpOamEnetActiveStatus, lpOamEnetLateCollisions=lpOamEnetLateCollisions, lpOamEnetAdminInfoEntry=lpOamEnetAdminInfoEntry, lpOamEnetOperEntry=lpOamEnetOperEntry, lpOamEnetStandbyStatus=lpOamEnetStandbyStatus, lpOamEnetOperStatusEntry=lpOamEnetOperStatusEntry, oamEthernetMIB=oamEthernetMIB, lpOamEnetComponentName=lpOamEnetComponentName, lpOamEnetTestResultsEntry=lpOamEnetTestResultsEntry, oamEthernetGroup=oamEthernetGroup, lpOamEnetOperStatusTable=lpOamEnetOperStatusTable, lpOamEnetIfEntryEntry=lpOamEnetIfEntryEntry, lpOamEnetProvEntry=lpOamEnetProvEntry, lpOamEnetClearToSendSignalLoss=lpOamEnetClearToSendSignalLoss, lpOamEnetTestComponentName=lpOamEnetTestComponentName, lpOamEnetTestStorageType=lpOamEnetTestStorageType, lpOamEnetNumberOfRxCollisions=lpOamEnetNumberOfRxCollisions, oamEthernetCapabilitiesCA01=oamEthernetCapabilitiesCA01, lpOamEnetMultipleCollisionFrames=lpOamEnetMultipleCollisionFrames, lpOamEnetMacTransmitErrors=lpOamEnetMacTransmitErrors, lpOamEnetIfEntryTable=lpOamEnetIfEntryTable, lpOamEnetFrameTooLongs=lpOamEnetFrameTooLongs, lpOamEnetDeferredTransmissions=lpOamEnetDeferredTransmissions, oamEthernetGroupCA01A=oamEthernetGroupCA01A, lpOamEnetAdminState=lpOamEnetAdminState, lpOamEnetTest=lpOamEnetTest, oamEthernetCapabilities=oamEthernetCapabilities, lpOamEnetTestResultsTable=lpOamEnetTestResultsTable, lpOamEnetTestIndex=lpOamEnetTestIndex, lpOamEnetOamEnetStatsTable=lpOamEnetOamEnetStatsTable, lpOamEnetTestRowStatusTable=lpOamEnetTestRowStatusTable, lpOamEnetOverrunErrors=lpOamEnetOverrunErrors, lpOamEnet=lpOamEnet, lpOamEnetExtendedStatistics=lpOamEnetExtendedStatistics, lpOamEnetStateTable=lpOamEnetStateTable, lpOamEnetRowStatusTable=lpOamEnetRowStatusTable, lpOamEnetMacReceiveErrors=lpOamEnetMacReceiveErrors, lpOamEnetFcsErrors=lpOamEnetFcsErrors, lpOamEnetSnmpOperStatus=lpOamEnetSnmpOperStatus, lpOamEnetRowStatusEntry=lpOamEnetRowStatusEntry, lpOamEnetUsageState=lpOamEnetUsageState, lpOamEnetOamEnetStatsEntry=lpOamEnetOamEnetStatsEntry, lpOamEnetOperationalState=lpOamEnetOperationalState, lpOamEnetSqeTestErrors=lpOamEnetSqeTestErrors, lpOamEnetApplicationFramerName=lpOamEnetApplicationFramerName, lpOamEnetTestType=lpOamEnetTestType, lpOamEnetProvTable=lpOamEnetProvTable, lpOamEnetVendor=lpOamEnetVendor, lpOamEnetStateEntry=lpOamEnetStateEntry, lpOamEnetMacAddress=lpOamEnetMacAddress, lpOamEnetSwitchoverOnFailure=lpOamEnetSwitchoverOnFailure, lpOamEnetTestOperEntry=lpOamEnetTestOperEntry, lpOamEnetAdminInfoTable=lpOamEnetAdminInfoTable, lpOamEnetAlignmentErrors=lpOamEnetAlignmentErrors, lpOamEnetIfIndex=lpOamEnetIfIndex, lpOamEnetTestCauseOfTermination=lpOamEnetTestCauseOfTermination, lpOamEnetCommentText=lpOamEnetCommentText, lpOamEnetStatsTable=lpOamEnetStatsTable, oamEthernetCapabilitiesCA=oamEthernetCapabilitiesCA, lpOamEnetIndex=lpOamEnetIndex, lpOamEnetStatsEntry=lpOamEnetStatsEntry, lpOamEnetCidDataEntry=lpOamEnetCidDataEntry, lpOamEnetCidDataTable=lpOamEnetCidDataTable, lpOamEnetOperTable=lpOamEnetOperTable, oamEthernetGroupCA=oamEthernetGroupCA, lpOamEnetFrameTooShort=lpOamEnetFrameTooShort, lpOamEnetStorageType=lpOamEnetStorageType, lpOamEnetExcessiveCollisions=lpOamEnetExcessiveCollisions, lpOamEnetTestRowStatusEntry=lpOamEnetTestRowStatusEntry, lpOamEnetSingleCollisionFrames=lpOamEnetSingleCollisionFrames, oamEthernetGroupCA01=oamEthernetGroupCA01, lpOamEnetTestOperTable=lpOamEnetTestOperTable, lpOamEnetCarrierSenseErrors=lpOamEnetCarrierSenseErrors, lpOamEnetRowStatus=lpOamEnetRowStatus, lpOamEnetIfAdminStatus=lpOamEnetIfAdminStatus, oamEthernetCapabilitiesCA01A=oamEthernetCapabilitiesCA01A, lpOamEnetTestTestResult=lpOamEnetTestTestResult, lpOamEnetTestRowStatus=lpOamEnetTestRowStatus, lpOamEnetLackOfResourcesDiscards=lpOamEnetLackOfResourcesDiscards)
