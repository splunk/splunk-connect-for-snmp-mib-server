#
# PySNMP MIB module EQUIPE-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQUIPE-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, ObjectIdentity, Gauge32, Counter64, Counter32, Unsigned32, iso, IpAddress, enterprises, NotificationType, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "Counter64", "Counter32", "Unsigned32", "iso", "IpAddress", "enterprises", "NotificationType", "MibIdentifier", "Integer32")
DisplayString, DateAndTime, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "RowStatus")
equipe = MibIdentifier((1, 3, 6, 1, 4, 1, 5022))
eqSystemMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5022, 1))
if mibBuilder.loadTexts: eqSystemMib.setLastUpdated('0112040001Z')
if mibBuilder.loadTexts: eqSystemMib.setOrganization('')
class EqModuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("powerSupply", 2), ("fanTray", 3), ("controlProcessor", 4), ("timingControl", 5), ("mgmtInterface", 6), ("processorCard", 7), ("crossConnect", 8), ("switchFabric", 9), ("switchScheduler", 10), ("universalPort16xOC3", 11), ("universalPort8xOC12", 12), ("universalPort16xOC12", 13), ("universalPort4xOC48", 14))

class EqModuleStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("diags", 1), ("booting", 2), ("up", 3), ("reset", 4), ("failed", 5), ("disabled", 6), ("mismatched", 7))

class EqModuleHealthStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("good", 1), ("marginal", 2), ("bad", 3))

class EqModuleFeedStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notAvail", 1), ("good", 2), ("bad", 3))

class EqModuleRedRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("primary", 2), ("backup", 3))

class EqIfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("sonetPort", 2), ("stsPath", 3), ("atmIntf", 4), ("virtAtmIntf", 5))

class EqAtmPvcType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("atmHardPvc", 1), ("atmSoftPvc", 2))

class EqApsLineState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("active", 2), ("signalFail", 3), ("signalDegrade", 4), ("manualSwitch", 5), ("forceSwitch", 6), ("clear", 7), ("lockoutOfProtect", 8))

class EqSeverityLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("debug", 1), ("normal", 2), ("informational", 3), ("warning", 4), ("minor", 5), ("major", 6), ("critical", 7))

class EqFaultClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hardware", 1), ("software", 2))

class EqFaultSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hard", 1), ("soft", 2))

class EqFaultScope(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("softwareLoadModule", 1), ("module", 2), ("chassis", 3))

class EqReleaseVerificationStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unverified", 1), ("verifying", 2), ("verified", 3), ("noPackingList", 4), ("parseError", 5), ("missingModule", 6), ("checksumError", 7), ("internalError", 8), ("removing", 9), ("backupNotFound", 10))

class EqReleaseUpgradeScope(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("hot", 1), ("cold", 2), ("frosty", 3))

class EqReleaseState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("activeCommitted", 1), ("active", 2), ("committed", 3), ("inactive", 4))

class EqReleaseCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("upgrade", 2), ("delete", 3), ("verify", 4), ("boot", 5), ("commit", 6))

class EqReleaseCommandStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("clear", 1), ("processing", 2), ("done", 3), ("error", 4))

class EqReleaseSchemaChange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("change", 1), ("nochange", 2))

class EqReleaseConfigAvail(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("avail", 1), ("notAvail", 2))

class EqReleaseRevert(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("revertInactive", 1), ("revertActive", 2), ("revertStart", 3), ("revertAllowed", 4), ("revertNotAllowed", 5))

eqSysProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 1))
eqSysSystemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 2))
eqSysModuleGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 3))
eqSysFaultGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 4))
eqSysSmsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 5))
eqSysIntfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 6))
eqSysProductE3200 = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 1, 1))
eqSysSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 2, 1))
eqSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 2, 2))
eqSysModule = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1))
eqSysFault = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1))
eqSysSms = MibIdentifier((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1))
eqSysSystemId = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSysSystemId.setStatus('current')
eqSysPhysEntLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSysPhysEntLastChangeTime.setStatus('current')
eqSysCfgCopyConfigFileAction = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("copyCfgFile", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqSysCfgCopyConfigFileAction.setStatus('current')
eqSysCfgCopyConfigFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("copyCfgIdle", 1), ("copyCfgInProgress", 2), ("copyCfgDoneSuccess", 3), ("copyCfgDoneError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqSysCfgCopyConfigFileStatus.setStatus('current')
eqSysCfgSavedFilename = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSysCfgSavedFilename.setStatus('current')
eqEidReqTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3), )
if mibBuilder.loadTexts: eqEidReqTable.setStatus('current')
eqEidReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqEidReqIndex"))
if mibBuilder.loadTexts: eqEidReqEntry.setStatus('current')
eqEidReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqEidReqIndex.setStatus('current')
eqEidReqUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqEidReqUser.setStatus('current')
eqEidReqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqEidReqCount.setStatus('current')
eqEidReqCountAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqEidReqCountAlloc.setStatus('current')
eqEidReqAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("alloc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqEidReqAction.setStatus('current')
eqEidReqActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("reqSuccess", 2), ("reqErrorReqCountTooBig", 3), ("reqErrorEidsUnavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqEidReqActionStatus.setStatus('current')
eqEidReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqEidReqRowStatus.setStatus('current')
eqEidResTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 2, 4), )
if mibBuilder.loadTexts: eqEidResTable.setStatus('current')
eqEidResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 2, 4, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqEidReqIndex"), (0, "EQUIPE-SYSTEM-MIB", "eqEidResIndex"))
if mibBuilder.loadTexts: eqEidResEntry.setStatus('current')
eqEidResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqEidResIndex.setStatus('current')
eqEidResData = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 2, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqEidResData.setStatus('current')
eqModuleTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1), )
if mibBuilder.loadTexts: eqModuleTable.setStatus('current')
eqModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleEntry.setStatus('current')
eqModuleEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleEid.setStatus('current')
eqModuleShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleShelfId.setStatus('current')
eqModuleSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleSlotId.setStatus('current')
eqModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 4), EqModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleType.setStatus('current')
eqModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleHwVersion.setStatus('current')
eqModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 6), EqModuleStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleStatus.setStatus('current')
eqModuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqModuleAction.setStatus('current')
eqModuleHealthTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2), )
if mibBuilder.loadTexts: eqModuleHealthTable.setStatus('current')
eqModuleHealthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqModuleEid"))
if mibBuilder.loadTexts: eqModuleHealthEntry.setStatus('current')
eqModuleHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 1), EqModuleHealthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleHealthStatus.setStatus('current')
eqModuleMemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleMemTotal.setStatus('current')
eqModuleMemUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleMemUsed.setStatus('current')
eqModuleMemUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleMemUsedPercent.setStatus('current')
eqModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleTemp.setStatus('current')
eqModuleCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleCpuUtil.setStatus('current')
eqModuleFeedStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 7), EqModuleFeedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleFeedStatusA.setStatus('current')
eqModuleFeedStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 2, 1, 8), EqModuleFeedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleFeedStatusB.setStatus('current')
eqHardDiskTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3), )
if mibBuilder.loadTexts: eqHardDiskTable.setStatus('current')
eqHardDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqHardDiskEid"))
if mibBuilder.loadTexts: eqHardDiskEntry.setStatus('current')
eqHardDiskEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskEid.setStatus('current')
eqHardDiskShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskShelfId.setStatus('current')
eqHardDiskSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskSlotId.setStatus('current')
eqHardDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskCapacity.setStatus('current')
eqHardDiskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskUsed.setStatus('current')
eqHardDiskUsedHiMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskUsedHiMark.setStatus('current')
eqHardDiskUsedLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqHardDiskUsedLowMark.setStatus('current')
eqFanUnitTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4), )
if mibBuilder.loadTexts: eqFanUnitTable.setStatus('current')
eqFanUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqFanUnitEid"))
if mibBuilder.loadTexts: eqFanUnitEntry.setStatus('current')
eqFanUnitEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitEid.setStatus('current')
eqFanUnitShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitShelfId.setStatus('current')
eqFanUnitSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitSlotId.setStatus('current')
eqFanUnitRpm = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitRpm.setStatus('current')
eqFanUnitRpmHiMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitRpmHiMark.setStatus('current')
eqFanUnitRpmLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFanUnitRpmLowMark.setStatus('current')
eqModuleRedTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5), )
if mibBuilder.loadTexts: eqModuleRedTable.setStatus('current')
eqModuleRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqModuleRedEid"))
if mibBuilder.loadTexts: eqModuleRedEntry.setStatus('current')
eqModuleRedEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleRedEid.setStatus('current')
eqModuleRedAdminRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1, 2), EqModuleRedRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleRedAdminRole.setStatus('current')
eqModuleRedOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1, 3), EqModuleRedRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleRedOperRole.setStatus('current')
eqModuleRedPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqModuleRedPeerId.setStatus('current')
eqModuleRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("switchRole", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqModuleRedAction.setStatus('current')
eqStratumCentTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6), )
if mibBuilder.loadTexts: eqStratumCentTable.setStatus('current')
eqStratumCentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqStratumCentEid"))
if mibBuilder.loadTexts: eqStratumCentEntry.setStatus('current')
eqStratumCentEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentEid.setStatus('current')
eqStratumCentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("freeRun", 2), ("holdover", 3), ("lockedPrimary", 4), ("lockedSecondary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentStatus.setStatus('current')
eqStratumCentRedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("offline", 2), ("standby", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentRedStatus.setStatus('current')
eqStratumCentLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("stratum1", 1), ("stratum2", 2), ("stratum3E", 3), ("stratum3", 4), ("stratum4", 5), ("sonetMin", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentLevel.setStatus('current')
eqStratumCentPrimaryRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qualified", 1), ("noSignal", 2), ("outOfRange", 3), ("outOfLock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentPrimaryRefStatus.setStatus('current')
eqStratumCentSecondaryRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qualified", 1), ("noSignal", 2), ("outOfRange", 3), ("outOfLock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumCentSecondaryRefStatus.setStatus('current')
eqStratumCentStatusAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("freeRun", 2), ("holdOver", 3), ("lockedPrimary", 4), ("lockedSecondary", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqStratumCentStatusAction.setStatus('current')
eqStratumCentRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("offline", 3), ("standby", 4), ("online", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqStratumCentRedAction.setStatus('current')
eqStratumLocalTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7), )
if mibBuilder.loadTexts: eqStratumLocalTable.setStatus('current')
eqStratumLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqStratumLocalEid"))
if mibBuilder.loadTexts: eqStratumLocalEntry.setStatus('current')
eqStratumLocalEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalEid.setStatus('current')
eqStratumLocalInputA1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalInputA1Status.setStatus('current')
eqStratumLocalInputA2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalInputA2Status.setStatus('current')
eqStratumLocalInputB1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalInputB1Status.setStatus('current')
eqStratumLocalInputB2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("noSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalInputB2Status.setStatus('current')
eqStratumLocalInputUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("usingInputA", 2), ("usingInputB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalInputUsed.setStatus('current')
eqStratumLocalRecoveredRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("priRef", 2), ("secRef", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqStratumLocalRecoveredRefStatus.setStatus('current')
eqStratumLocalStatusAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 3, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("useNeither", 2), ("useInputA", 3), ("useInputB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqStratumLocalStatusAction.setStatus('current')
eqFaultTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1), )
if mibBuilder.loadTexts: eqFaultTable.setStatus('current')
eqFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqFaultDomain"), (0, "EQUIPE-SYSTEM-MIB", "eqFaultHandle"))
if mibBuilder.loadTexts: eqFaultEntry.setStatus('current')
eqFaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultDomain.setStatus('current')
eqFaultHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultHandle.setStatus('current')
eqFaultClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 3), EqFaultClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultClass.setStatus('current')
eqFaultSubclass = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultSubclass.setStatus('current')
eqFaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultType.setStatus('current')
eqFaultInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultInstance.setStatus('current')
eqFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 7), EqFaultSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultSeverity.setStatus('current')
eqFaultScope = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 8), EqFaultScope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultScope.setStatus('current')
eqFaultSwlm = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqFaultSwlm.setStatus('current')
eqFaultModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqFaultModule.setStatus('current')
eqFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqFaultTime.setStatus('current')
eqFaultDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 4, 1, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqFaultDetails.setStatus('current')
eqReleaseNextId = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseNextId.setStatus('current')
eqReleaseRevert = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 2), EqReleaseRevert()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqReleaseRevert.setStatus('current')
eqReleaseTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3), )
if mibBuilder.loadTexts: eqReleaseTable.setStatus('current')
eqReleaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqReleaseId"))
if mibBuilder.loadTexts: eqReleaseEntry.setStatus('current')
eqReleaseId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseId.setStatus('current')
eqReleaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqReleaseName.setStatus('current')
eqReleaseVerificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 3), EqReleaseVerificationStatus().clone('unverified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseVerificationStatus.setStatus('current')
eqReleaseUpgradeScope = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 4), EqReleaseUpgradeScope().clone('cold')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseUpgradeScope.setStatus('current')
eqReleaseSchemaChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 5), EqReleaseSchemaChange().clone('nochange')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseSchemaChange.setStatus('current')
eqReleaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 6), EqReleaseState().clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseState.setStatus('current')
eqReleaseModulesVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseModulesVerified.setStatus('current')
eqReleaseNumModules = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseNumModules.setStatus('current')
eqReleaseBadModule = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseBadModule.setStatus('current')
eqReleaseCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 10), EqReleaseCommand().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqReleaseCommand.setStatus('current')
eqReleaseCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 11), EqReleaseCommandStatus().clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqReleaseCommandStatus.setStatus('current')
eqReleaseSchemaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseSchemaVersion.setStatus('current')
eqReleaseConfigAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 13), EqReleaseConfigAvail().clone('notAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqReleaseConfigAvail.setStatus('current')
eqReleaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eqReleaseRowStatus.setStatus('current')
eqInstallTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 4), )
if mibBuilder.loadTexts: eqInstallTable.setStatus('current')
eqInstallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 4, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqInstallId"))
if mibBuilder.loadTexts: eqInstallEntry.setStatus('current')
eqInstallId = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqInstallId.setStatus('current')
eqInstallPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqInstallPath.setStatus('current')
eqUpgradeState = MibScalar((1, 3, 6, 1, 4, 1, 5022, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqUpgradeState.setStatus('current')
eqIntfBertTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1), )
if mibBuilder.loadTexts: eqIntfBertTable.setStatus('current')
eqIntfBertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1), ).setIndexNames((0, "EQUIPE-SYSTEM-MIB", "eqIntfBertEid"))
if mibBuilder.loadTexts: eqIntfBertEntry.setStatus('current')
eqIntfBertEid = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertEid.setStatus('current')
eqIntfBertGeneratorState = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertGeneratorState.setStatus('current')
eqIntfBertMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertMonitorState.setStatus('current')
eqIntfBertMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertMonitorStatus.setStatus('current')
eqIntfBertMonitorOutOfSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertMonitorOutOfSyncTime.setStatus('current')
eqIntfBertRequestedBitErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertRequestedBitErrorCount.setStatus('current')
eqIntfBertInsertedBitErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertInsertedBitErrorCount.setStatus('current')
eqIntfBertMeasuredByteErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertMeasuredByteErrorCount.setStatus('current')
eqIntfBertTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertTestStartTime.setStatus('current')
eqIntfBertTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqIntfBertTestDuration.setStatus('current')
eqIntfBertAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("insertBitError", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqIntfBertAction.setStatus('current')
mibBuilder.exportSymbols("EQUIPE-SYSTEM-MIB", eqReleaseSchemaChange=eqReleaseSchemaChange, eqInstallEntry=eqInstallEntry, eqModuleTable=eqModuleTable, eqFaultTable=eqFaultTable, EqReleaseConfigAvail=EqReleaseConfigAvail, eqModuleCpuUtil=eqModuleCpuUtil, EqModuleRedRole=EqModuleRedRole, eqEidReqUser=eqEidReqUser, eqHardDiskUsed=eqHardDiskUsed, eqHardDiskShelfId=eqHardDiskShelfId, eqStratumLocalRecoveredRefStatus=eqStratumLocalRecoveredRefStatus, eqHardDiskUsedLowMark=eqHardDiskUsedLowMark, eqSysSms=eqSysSms, eqSysProductE3200=eqSysProductE3200, eqFanUnitRpm=eqFanUnitRpm, eqStratumCentEntry=eqStratumCentEntry, eqEidReqRowStatus=eqEidReqRowStatus, eqFaultTime=eqFaultTime, eqEidResTable=eqEidResTable, eqModuleMemUsedPercent=eqModuleMemUsedPercent, eqSysModule=eqSysModule, eqIntfBertMonitorStatus=eqIntfBertMonitorStatus, eqModuleRedTable=eqModuleRedTable, eqFanUnitTable=eqFanUnitTable, eqModuleFeedStatusB=eqModuleFeedStatusB, EqReleaseCommandStatus=EqReleaseCommandStatus, eqFanUnitEntry=eqFanUnitEntry, eqEidResData=eqEidResData, eqModuleMemUsed=eqModuleMemUsed, EqFaultSeverity=EqFaultSeverity, eqStratumLocalInputB2Status=eqStratumLocalInputB2Status, eqIntfBertGeneratorState=eqIntfBertGeneratorState, eqEidResIndex=eqEidResIndex, eqModuleRedPeerId=eqModuleRedPeerId, eqUpgradeState=eqUpgradeState, eqInstallTable=eqInstallTable, eqFaultInstance=eqFaultInstance, eqFaultScope=eqFaultScope, eqIntfBertEntry=eqIntfBertEntry, eqSysProducts=eqSysProducts, eqFanUnitSlotId=eqFanUnitSlotId, eqSysModuleGrp=eqSysModuleGrp, eqModuleShelfId=eqModuleShelfId, eqReleaseTable=eqReleaseTable, EqFaultClass=EqFaultClass, eqStratumLocalInputA2Status=eqStratumLocalInputA2Status, eqIntfBertInsertedBitErrorCount=eqIntfBertInsertedBitErrorCount, eqHardDiskCapacity=eqHardDiskCapacity, eqIntfBertTestDuration=eqIntfBertTestDuration, eqModuleRedOperRole=eqModuleRedOperRole, eqFaultModule=eqFaultModule, EqReleaseState=EqReleaseState, eqModuleRedEid=eqModuleRedEid, eqModuleHealthEntry=eqModuleHealthEntry, eqReleaseCommandStatus=eqReleaseCommandStatus, eqFanUnitShelfId=eqFanUnitShelfId, eqReleaseVerificationStatus=eqReleaseVerificationStatus, eqReleaseNumModules=eqReleaseNumModules, eqFanUnitRpmHiMark=eqFanUnitRpmHiMark, eqModuleHwVersion=eqModuleHwVersion, eqFaultType=eqFaultType, eqStratumLocalEntry=eqStratumLocalEntry, eqEidReqEntry=eqEidReqEntry, eqIntfBertTestStartTime=eqIntfBertTestStartTime, eqModuleFeedStatusA=eqModuleFeedStatusA, eqModuleType=eqModuleType, eqReleaseName=eqReleaseName, eqModuleRedAdminRole=eqModuleRedAdminRole, eqStratumLocalInputA1Status=eqStratumLocalInputA1Status, eqFaultSwlm=eqFaultSwlm, eqHardDiskUsedHiMark=eqHardDiskUsedHiMark, eqEidReqCountAlloc=eqEidReqCountAlloc, eqHardDiskTable=eqHardDiskTable, eqReleaseUpgradeScope=eqReleaseUpgradeScope, eqStratumLocalInputUsed=eqStratumLocalInputUsed, eqReleaseState=eqReleaseState, EqReleaseCommand=EqReleaseCommand, eqSysCfgCopyConfigFileAction=eqSysCfgCopyConfigFileAction, eqStratumCentSecondaryRefStatus=eqStratumCentSecondaryRefStatus, eqSysConfig=eqSysConfig, EqSeverityLevel=EqSeverityLevel, eqInstallId=eqInstallId, eqReleaseCommand=eqReleaseCommand, eqStratumCentRedStatus=eqStratumCentRedStatus, eqFaultClass=eqFaultClass, eqReleaseEntry=eqReleaseEntry, eqModuleRedEntry=eqModuleRedEntry, eqStratumCentRedAction=eqStratumCentRedAction, eqIntfBertRequestedBitErrorCount=eqIntfBertRequestedBitErrorCount, eqReleaseBadModule=eqReleaseBadModule, EqReleaseRevert=EqReleaseRevert, eqSysIntfGrp=eqSysIntfGrp, eqHardDiskEntry=eqHardDiskEntry, eqModuleTemp=eqModuleTemp, eqReleaseRowStatus=eqReleaseRowStatus, eqSystemMib=eqSystemMib, eqStratumCentStatusAction=eqStratumCentStatusAction, eqInstallPath=eqInstallPath, eqEidReqActionStatus=eqEidReqActionStatus, EqApsLineState=EqApsLineState, EqModuleHealthStatus=EqModuleHealthStatus, EqFaultScope=EqFaultScope, eqEidReqAction=eqEidReqAction, eqSysCfgCopyConfigFileStatus=eqSysCfgCopyConfigFileStatus, eqModuleEntry=eqModuleEntry, eqReleaseId=eqReleaseId, eqFanUnitEid=eqFanUnitEid, eqModuleRedAction=eqModuleRedAction, eqStratumLocalStatusAction=eqStratumLocalStatusAction, eqModuleHealthStatus=eqModuleHealthStatus, eqStratumCentTable=eqStratumCentTable, eqIntfBertAction=eqIntfBertAction, eqFaultSeverity=eqFaultSeverity, eqSysPhysEntLastChangeTime=eqSysPhysEntLastChangeTime, eqStratumCentStatus=eqStratumCentStatus, eqFaultDetails=eqFaultDetails, eqIntfBertMonitorState=eqIntfBertMonitorState, eqIntfBertMonitorOutOfSyncTime=eqIntfBertMonitorOutOfSyncTime, eqReleaseSchemaVersion=eqReleaseSchemaVersion, eqModuleSlotId=eqModuleSlotId, eqReleaseConfigAvail=eqReleaseConfigAvail, eqFaultSubclass=eqFaultSubclass, eqReleaseModulesVerified=eqReleaseModulesVerified, eqReleaseRevert=eqReleaseRevert, eqSysCfgSavedFilename=eqSysCfgSavedFilename, eqIntfBertEid=eqIntfBertEid, eqModuleEid=eqModuleEid, eqModuleAction=eqModuleAction, eqSysSystemGrp=eqSysSystemGrp, eqSysFault=eqSysFault, eqFanUnitRpmLowMark=eqFanUnitRpmLowMark, eqStratumLocalInputB1Status=eqStratumLocalInputB1Status, eqFaultHandle=eqFaultHandle, eqFaultEntry=eqFaultEntry, eqSysSmsGrp=eqSysSmsGrp, eqEidReqTable=eqEidReqTable, eqStratumCentEid=eqStratumCentEid, EqModuleType=EqModuleType, equipe=equipe, eqSysFaultGrp=eqSysFaultGrp, EqModuleStatus=EqModuleStatus, eqModuleStatus=eqModuleStatus, PYSNMP_MODULE_ID=eqSystemMib, EqReleaseVerificationStatus=EqReleaseVerificationStatus, eqHardDiskEid=eqHardDiskEid, eqEidReqIndex=eqEidReqIndex, eqFaultDomain=eqFaultDomain, eqStratumCentPrimaryRefStatus=eqStratumCentPrimaryRefStatus, eqStratumCentLevel=eqStratumCentLevel, eqEidResEntry=eqEidResEntry, eqModuleMemTotal=eqModuleMemTotal, eqHardDiskSlotId=eqHardDiskSlotId, EqModuleFeedStatus=EqModuleFeedStatus, EqIfType=EqIfType, eqStratumLocalEid=eqStratumLocalEid, EqReleaseSchemaChange=EqReleaseSchemaChange, eqEidReqCount=eqEidReqCount, eqModuleHealthTable=eqModuleHealthTable, eqIntfBertMeasuredByteErrorCount=eqIntfBertMeasuredByteErrorCount, eqSysSystem=eqSysSystem, EqReleaseUpgradeScope=EqReleaseUpgradeScope, eqIntfBertTable=eqIntfBertTable, eqReleaseNextId=eqReleaseNextId, eqStratumLocalTable=eqStratumLocalTable, EqAtmPvcType=EqAtmPvcType, eqSysSystemId=eqSysSystemId)
