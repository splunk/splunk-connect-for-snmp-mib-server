#
# PySNMP MIB module REPEATER-REV4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REPEATER-REV4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
repeaterRev4, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "repeaterRev4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Integer32, Gauge32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
repeaterrev4 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4))
rptr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1))
rptrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1))
rptrMgmtName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtName.setStatus('mandatory')
rptrMgmtPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortCount.setStatus('mandatory')
rptrMgmtPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setStatus('mandatory')
rptrMgmtPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOn.setStatus('mandatory')
rptrMgmtPortsOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOper.setStatus('mandatory')
rptrMgmtBoardMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtBoardMap.setStatus('mandatory')
rptrMgmtInterfaceNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setStatus('mandatory')
rptrMgmtResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reseStaticCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtResetCounters.setStatus('mandatory')
rptrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2))
rptrPktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1))
rptrPktStatsPackets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsPackets.setStatus('mandatory')
rptrPktStatsBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBytes.setStatus('mandatory')
rptrPktStatsColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsColls.setStatus('mandatory')
rptrPktStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsErrors.setStatus('mandatory')
rptrPktStatsAlign = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsAlign.setStatus('mandatory')
rptrPktStatsCRC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsCRC.setStatus('mandatory')
rptrPktStatsOOW = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsOOW.setStatus('mandatory')
rptrPktStatsNoRsc = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setStatus('mandatory')
rptrPktStatsBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBroadcasts.setStatus('mandatory')
rptrPktStatsMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsMulticasts.setStatus('mandatory')
rptrProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2))
rptrProtocolsOSI = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOSI.setStatus('mandatory')
rptrProtocolsNovell = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsNovell.setStatus('mandatory')
rptrProtocolsBanyan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsBanyan.setStatus('mandatory')
rptrProtocolsDECNet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsDECNet.setStatus('mandatory')
rptrProtocolsXNS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsXNS.setStatus('mandatory')
rptrProtocolsIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsIP.setStatus('mandatory')
rptrProtocolsCtron = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsCtron.setStatus('mandatory')
rptrProtocolsAppletalk = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setStatus('mandatory')
rptrProtocolsOther = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOther.setStatus('mandatory')
rptrFrameSizes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3))
rptrFrameSzRunt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzRunt.setStatus('mandatory')
rptrFrameSz64To127 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz64To127.setStatus('mandatory')
rptrFrameSz128To255 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz128To255.setStatus('mandatory')
rptrFrameSz256To511 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz256To511.setStatus('mandatory')
rptrFrameSz512To1023 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz512To1023.setStatus('mandatory')
rptrFrameSz1024To1518 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setStatus('mandatory')
rptrFrameSzGiant = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzGiant.setStatus('mandatory')
rptrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3))
rptrAlarmsTrafEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setStatus('mandatory')
rptrAlarmsTrafThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setStatus('mandatory')
rptrAlarmsCollEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setStatus('mandatory')
rptrAlarmsCollThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setStatus('mandatory')
rptrAlarmsErrEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setStatus('mandatory')
rptrAlarmsErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setStatus('mandatory')
rptrAlarmsErrSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrSource.setStatus('mandatory')
rptrAlarmsAlarmTimebase = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setStatus('mandatory')
rptrAlarmsBroadEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsBroadEnable.setStatus('mandatory')
rptrAlarmsBroadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsBroadThreshold.setStatus('mandatory')
rptrRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4))
rptrRedund = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1))
rptrRedundReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundReset.setStatus('mandatory')
rptrRedundPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPollInterval.setStatus('mandatory')
rptrRedundTestTOD = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundTestTOD.setStatus('mandatory')
rptrRedundPerformTest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPerformTest.setStatus('mandatory')
rptrRedundMaxCrcts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setStatus('mandatory')
rptrRedundCrctTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2), )
if mibBuilder.loadTexts: rptrRedundCrctTable.setStatus('mandatory')
rptrRedundCrctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundCrctId"))
if mibBuilder.loadTexts: rptrRedundCrctEntry.setStatus('mandatory')
rptrRedundCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctId.setStatus('mandatory')
rptrRedundCrctName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctName.setStatus('mandatory')
rptrRedundCrctRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setStatus('mandatory')
rptrRedundCrctNumBPs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setStatus('mandatory')
rptrRedundCrctNumAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setStatus('mandatory')
rptrRedundCrctAddAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setStatus('mandatory')
rptrRedundCrctDelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setStatus('mandatory')
rptrRedundCrctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctEnable.setStatus('mandatory')
rptrRedundCrctReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctReset.setStatus('mandatory')
rptrRedundPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3), )
if mibBuilder.loadTexts: rptrRedundPortTable.setStatus('mandatory')
rptrRedundPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundPortCrctId"), (0, "REPEATER-REV4-MIB", "rptrRedundPortId"))
if mibBuilder.loadTexts: rptrRedundPortEntry.setStatus('mandatory')
rptrRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortId.setStatus('mandatory')
rptrRedundPortCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortCrctId.setStatus('mandatory')
rptrRedundPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortNum.setStatus('mandatory')
rptrRedundPortBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setStatus('mandatory')
rptrRedundPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortType.setStatus('mandatory')
rptrRedundAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4), )
if mibBuilder.loadTexts: rptrRedundAddrTable.setStatus('mandatory')
rptrRedundAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundAddrCrctId"), (0, "REPEATER-REV4-MIB", "rptrRedundAddrId"))
if mibBuilder.loadTexts: rptrRedundAddrEntry.setStatus('mandatory')
rptrRedundAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrId.setStatus('mandatory')
rptrRedundAddrCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setStatus('mandatory')
rptrRedundAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setStatus('mandatory')
rptrSourceAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5))
rptrSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1), )
if mibBuilder.loadTexts: rptrSrcAddrListTable.setStatus('mandatory')
rptrSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrSrcAddrListId"))
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setStatus('mandatory')
rptrSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrListId.setStatus('mandatory')
rptrSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setStatus('mandatory')
rptrSrcAddrSrcTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2), )
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setStatus('mandatory')
rptrSrcAddrSrcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrSrcAddrSrcTableEntryId"))
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setStatus('mandatory')
rptrSrcAddrSrcTableEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setStatus('mandatory')
rptrSrcAddrSrcTableEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setStatus('mandatory')
rptrSrcAddrSrcTableEntryPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setStatus('mandatory')
rptrSrcAddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3))
rptrSrcAddrMgmtSrcAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setStatus('mandatory')
rptrSrcAddrMgmtPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setStatus('mandatory')
rptrSrcAddrMgmtActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setStatus('mandatory')
rptrSrcAddrMgmtHashType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDecHash", 1), ("decHash", 2))).clone('noDecHash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtHashType.setStatus('mandatory')
rptrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6))
rptrHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1))
rptrSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 2))
rptrHwTrapSetLink = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrHwTrapSetLink.setStatus('mandatory')
rptrHwTrapSetSeg = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrHwTrapSetSeg.setStatus('mandatory')
rptrSaTrapSetSrcaddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSaTrapSetSrcaddr.setStatus('mandatory')
rptrSaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7))
rptrSecurityLockState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLockState.setStatus('mandatory')
rptrSecuritySecureState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2), ("portMisMatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecuritySecureState.setStatus('mandatory')
rptrSecurityLearnState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLearnState.setStatus('mandatory')
rptrSecurityLearnMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLearnMode.setStatus('mandatory')
rptrPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2))
rptrPortGrpMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setStatus('mandatory')
rptrPortGrpMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setStatus('mandatory')
rptrPortGrpMgmtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setStatus('mandatory')
rptrPortGrpMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setStatus('mandatory')
rptrPortGrpMgmtPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setStatus('mandatory')
rptrPortGrpMgmtPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setStatus('mandatory')
rptrPortGrpMgmtPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setStatus('mandatory')
rptrPortGrpMgmtPortsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setStatus('mandatory')
rptrPortGrpMgmtLogPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtLogPortCount.setStatus('mandatory')
rptrPortGrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2))
rptrPortGrpPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setStatus('mandatory')
rptrPortGrpPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpPktStatsId"))
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setStatus('mandatory')
rptrPortGrpPktStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setStatus('mandatory')
rptrPortGrpPktStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setStatus('mandatory')
rptrPortGrpPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setStatus('mandatory')
rptrPortGrpPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setStatus('mandatory')
rptrPortGrpPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setStatus('mandatory')
rptrPortGrpPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setStatus('mandatory')
rptrPortGrpPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setStatus('mandatory')
rptrPortGrpPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setStatus('mandatory')
rptrPortGrpPktStatsBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBroadcasts.setStatus('mandatory')
rptrPortGrpPktStatsMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsMulticasts.setStatus('mandatory')
rptrPortGrpProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setStatus('mandatory')
rptrPortGrpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpProtocolId"))
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setStatus('mandatory')
rptrPortGrpProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setStatus('mandatory')
rptrPortGrpProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setStatus('mandatory')
rptrPortGrpProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setStatus('mandatory')
rptrPortGrpProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setStatus('mandatory')
rptrPortGrpProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setStatus('mandatory')
rptrPortGrpProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setStatus('mandatory')
rptrPortGrpProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setStatus('mandatory')
rptrPortGrpProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setStatus('mandatory')
rptrPortGrpProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setStatus('mandatory')
rptrPortGrpProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setStatus('mandatory')
rptrPortGrpFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setStatus('mandatory')
rptrPortGrpFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpFrameSzId"))
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setStatus('mandatory')
rptrPortGrpFrameSzId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setStatus('mandatory')
rptrPortGrpFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setStatus('mandatory')
rptrPortGrpFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setStatus('mandatory')
rptrPortGrpFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setStatus('mandatory')
rptrPortGrpFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setStatus('mandatory')
rptrPortGrpFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setStatus('mandatory')
rptrPortGrpFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setStatus('mandatory')
rptrPortGrpFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setStatus('mandatory')
rptrPortGrpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setStatus('mandatory')
rptrPortGrpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpAlarmId"))
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setStatus('mandatory')
rptrPortGrpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setStatus('mandatory')
rptrPortGrpAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setStatus('mandatory')
rptrPortGrpAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setStatus('mandatory')
rptrPortGrpAlarmTrafGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setStatus('mandatory')
rptrPortGrpAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setStatus('mandatory')
rptrPortGrpAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setStatus('mandatory')
rptrPortGrpAlarmCollBdDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setStatus('mandatory')
rptrPortGrpAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setStatus('mandatory')
rptrPortGrpAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setStatus('mandatory')
rptrPortGrpAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setStatus('mandatory')
rptrPortGrpAlarmErrGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setStatus('mandatory')
rptrPortGrpAlarmBroadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadEnable.setStatus('mandatory')
rptrPortGrpAlarmBroadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadThreshold.setStatus('mandatory')
rptrPortGrpAlarmBroadGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadGrpDisable.setStatus('mandatory')
rptrPortGrpSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setStatus('mandatory')
rptrPortGrpSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSrcAddrId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setStatus('mandatory')
rptrPortGrpSrcAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setStatus('mandatory')
rptrPortGrpSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setStatus('mandatory')
rptrPortGrpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5))
rptrPortGrpHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1))
rptrPortGrpSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2))
rptrPortGrpHwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: rptrPortGrpHwTrapTable.setStatus('mandatory')
rptrPortGrpHwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpHwTrapSetGrpId"))
if mibBuilder.loadTexts: rptrPortGrpHwTrapEntry.setStatus('mandatory')
rptrPortGrpHwTrapSetGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetGrpId.setStatus('mandatory')
rptrPortGrpHwTrapSetLink = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetLink.setStatus('mandatory')
rptrPortGrpHwTrapSetSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetSeg.setStatus('mandatory')
rptrPortGrpSaTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpSaTrapTable.setStatus('mandatory')
rptrPortGrpSaTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSaTrapSetGrpId"))
if mibBuilder.loadTexts: rptrPortGrpSaTrapEntry.setStatus('mandatory')
rptrPortGrpSaTrapSetGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetGrpId.setStatus('mandatory')
rptrPortGrpSaTrapSetSrcaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetSrcaddr.setStatus('mandatory')
rptrPortGrpSrcAddrLockTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockTable.setStatus('mandatory')
rptrPortGrpSrcAddrLockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockEntry.setStatus('mandatory')
rptrPortGrpSrcAddrLockGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockGrpId.setStatus('mandatory')
rptrPortGrpSrcAddrLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLock.setStatus('mandatory')
rptrPortGrpSASecuritySecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2), ("portMisMatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSASecuritySecureState.setStatus('mandatory')
rptrPortGrpSASecurityLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnState.setStatus('mandatory')
rptrPortGrpSASecurityLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnMode.setStatus('mandatory')
rptrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3))
rptrPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: rptrPortMgmtTable.setStatus('mandatory')
rptrPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortMgmtPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: rptrPortMgmtEntry.setStatus('mandatory')
rptrPortMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortId.setStatus('mandatory')
rptrPortMgmtPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setStatus('mandatory')
rptrPortMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtName.setStatus('mandatory')
rptrPortMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setStatus('mandatory')
rptrPortMgmtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtOperState.setStatus('mandatory')
rptrPortMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortType.setStatus('mandatory')
rptrPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2))
rptrPortPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setStatus('mandatory')
rptrPortPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortPktStatsPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortPktStatsPortId"))
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setStatus('mandatory')
rptrPortPktStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setStatus('mandatory')
rptrPortPktStatsPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setStatus('mandatory')
rptrPortPktStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setStatus('mandatory')
rptrPortPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setStatus('mandatory')
rptrPortPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsColls.setStatus('mandatory')
rptrPortPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setStatus('mandatory')
rptrPortPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setStatus('mandatory')
rptrPortPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setStatus('mandatory')
rptrPortPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setStatus('mandatory')
rptrPortPktStatsBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBroadcasts.setStatus('mandatory')
rptrPortPktStatsMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsMulticasts.setStatus('mandatory')
rptrPortProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: rptrPortProtocolTbl.setStatus('mandatory')
rptrPortProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortProtocolPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortProtocolPortId"))
if mibBuilder.loadTexts: rptrPortProtocolEntry.setStatus('mandatory')
rptrPortProtocolPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortId.setStatus('mandatory')
rptrPortProtocolPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setStatus('mandatory')
rptrPortProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOSI.setStatus('mandatory')
rptrPortProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolNovell.setStatus('mandatory')
rptrPortProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setStatus('mandatory')
rptrPortProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setStatus('mandatory')
rptrPortProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolXNS.setStatus('mandatory')
rptrPortProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolIP.setStatus('mandatory')
rptrPortProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolCtron.setStatus('mandatory')
rptrPortProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setStatus('mandatory')
rptrPortProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOther.setStatus('mandatory')
rptrPortFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setStatus('mandatory')
rptrPortFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortFrameSzPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortFrameSzPortId"))
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setStatus('mandatory')
rptrPortFrameSzPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setStatus('mandatory')
rptrPortFrameSzPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setStatus('mandatory')
rptrPortFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setStatus('mandatory')
rptrPortFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setStatus('mandatory')
rptrPortFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setStatus('mandatory')
rptrPortFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setStatus('mandatory')
rptrPortFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setStatus('mandatory')
rptrPortFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setStatus('mandatory')
rptrPortFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setStatus('mandatory')
rptrPortAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: rptrPortAlarmTable.setStatus('mandatory')
rptrPortAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortAlarmPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortAlarmPortId"))
if mibBuilder.loadTexts: rptrPortAlarmEntry.setStatus('mandatory')
rptrPortAlarmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortId.setStatus('mandatory')
rptrPortAlarmPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setStatus('mandatory')
rptrPortAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setStatus('mandatory')
rptrPortAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setStatus('mandatory')
rptrPortAlarmTrafPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setStatus('mandatory')
rptrPortAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setStatus('mandatory')
rptrPortAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setStatus('mandatory')
rptrPortAlarmCollPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setStatus('mandatory')
rptrPortAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setStatus('mandatory')
rptrPortAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setStatus('mandatory')
rptrPortAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setStatus('mandatory')
rptrPortAlarmErrPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setStatus('mandatory')
rptrPortAlarmBroadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadEnable.setStatus('mandatory')
rptrPortAlarmBroadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadThreshold.setStatus('mandatory')
rptrPortAlarmBroadPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadPortDisable.setStatus('mandatory')
rptrPortRedundTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: rptrPortRedundTable.setStatus('mandatory')
rptrPortRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortRedundPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortRedundPortId"))
if mibBuilder.loadTexts: rptrPortRedundEntry.setStatus('mandatory')
rptrPortRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortId.setStatus('mandatory')
rptrPortRedundPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setStatus('mandatory')
rptrPortRedundCrctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setStatus('mandatory')
rptrPortRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundType.setStatus('mandatory')
rptrPortRedundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundStatus.setStatus('mandatory')
rptrPortSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setStatus('mandatory')
rptrPortSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSrcAddrPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrPortId"))
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setStatus('mandatory')
rptrPortSrcAddrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setStatus('mandatory')
rptrPortSrcAddrPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setStatus('mandatory')
rptrPortSrcAddrTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setStatus('mandatory')
rptrPortSrcAddrForceTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setStatus('mandatory')
rptrPortSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setStatus('mandatory')
rptrPortSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setStatus('mandatory')
rptrPortSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListPortId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListId"))
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setStatus('mandatory')
rptrPortSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setStatus('mandatory')
rptrPortSrcAddrListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setStatus('mandatory')
rptrPortSrcAddrListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setStatus('mandatory')
rptrPortSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setStatus('mandatory')
rptrPortHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7), )
if mibBuilder.loadTexts: rptrPortHardwareTable.setStatus('mandatory')
rptrPortHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortHardwarePortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortHardwarePortId"))
if mibBuilder.loadTexts: rptrPortHardwareEntry.setStatus('mandatory')
rptrPortHardwarePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortId.setStatus('mandatory')
rptrPortHardwarePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setStatus('mandatory')
rptrPortHardwareSegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSegmented", 1), ("segmented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setStatus('mandatory')
rptrPortHardwareLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLinked", 1), ("linked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setStatus('mandatory')
rptrPortTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8))
rptrPortHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1))
rptrPortSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2))
rptrPortHwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1), )
if mibBuilder.loadTexts: rptrPortHwTrapTable.setStatus('mandatory')
rptrPortHwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortHwTrapSetPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortHwTrapSetPortId"))
if mibBuilder.loadTexts: rptrPortHwTrapEntry.setStatus('mandatory')
rptrPortHwTrapSetPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHwTrapSetPortId.setStatus('mandatory')
rptrPortHwTrapSetPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHwTrapSetPortGrpId.setStatus('mandatory')
rptrPortHwTrapSetLink = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortHwTrapSetLink.setStatus('mandatory')
rptrPortHwTrapSetSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortHwTrapSetSeg.setStatus('mandatory')
rptrPortSaTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1), )
if mibBuilder.loadTexts: rptrPortSaTrapTable.setStatus('mandatory')
rptrPortSaTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSaTrapSetPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSaTrapSetPortId"))
if mibBuilder.loadTexts: rptrPortSaTrapEntry.setStatus('mandatory')
rptrPortSaTrapSetPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSaTrapSetPortId.setStatus('mandatory')
rptrPortSaTrapSetPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSaTrapSetPortGrpId.setStatus('mandatory')
rptrPortSaTrapSetSrcaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSaTrapSetSrcaddr.setStatus('mandatory')
rptrPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9))
rptrPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1), )
if mibBuilder.loadTexts: rptrPortSecurityTable.setStatus('mandatory')
rptrPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityPortId"))
if mibBuilder.loadTexts: rptrPortSecurityEntry.setStatus('mandatory')
rptrPortSecurityPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityPortGrpId.setStatus('mandatory')
rptrPortSecurityPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityPortId.setStatus('mandatory')
rptrPortSecurityLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockStatus.setStatus('mandatory')
rptrPortSecurityLockAddAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockAddAddress.setStatus('mandatory')
rptrPortSecurityLockDelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockDelAddress.setStatus('mandatory')
rptrPortSecurityDisableOnViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityDisableOnViolation.setStatus('mandatory')
rptrPortSecurityFullSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partialSecurity", 1), ("fullSecurity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityFullSecEnabled.setStatus('mandatory')
rptrPortSecuritySecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecuritySecureState.setStatus('mandatory')
rptrPortSecurityForceNonSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("forceNonSecure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityForceNonSecure.setStatus('mandatory')
rptrPortSecurityLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLearnState.setStatus('mandatory')
rptrPortSecurityLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLearnMode.setStatus('mandatory')
rptrPortSecurityListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2), )
if mibBuilder.loadTexts: rptrPortSecurityListTable.setStatus('mandatory')
rptrPortSecurityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSecurityListPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityListPortId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityListIndex"))
if mibBuilder.loadTexts: rptrPortSecurityListEntry.setStatus('mandatory')
rptrPortSecurityListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListPortGrpId.setStatus('mandatory')
rptrPortSecurityListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListPortId.setStatus('mandatory')
rptrPortSecurityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListIndex.setStatus('mandatory')
rptrPortSecurityListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListAddress.setStatus('mandatory')
rptrPortAssoc = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4))
rptrPortAssocTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: rptrPortAssocTable.setStatus('mandatory')
rptrPortAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortAssocBoard"))
if mibBuilder.loadTexts: rptrPortAssocEntry.setStatus('mandatory')
rptrPortAssocBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAssocBoard.setStatus('mandatory')
rptrPortAssocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("defaultPort", 1), ("otherPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAssocStatus.setStatus('mandatory')
mibBuilder.exportSymbols("REPEATER-REV4-MIB", rptrRedundPortEntry=rptrRedundPortEntry, rptrPortGrpSaTrapSetGrpId=rptrPortGrpSaTrapSetGrpId, rptrSrcAddrMgmtHashType=rptrSrcAddrMgmtHashType, rptrPortFrameSz512To1023=rptrPortFrameSz512To1023, rptrPortHwTrapSetSeg=rptrPortHwTrapSetSeg, rptrPortMgmtTable=rptrPortMgmtTable, rptrPortGrpProtocolDECNet=rptrPortGrpProtocolDECNet, rptrPortSecurityLockStatus=rptrPortSecurityLockStatus, rptrPortPktStatsBroadcasts=rptrPortPktStatsBroadcasts, rptrPortGrpAlarmBroadGrpDisable=rptrPortGrpAlarmBroadGrpDisable, rptrPortGrpFrameSz256To511=rptrPortGrpFrameSz256To511, rptrRedundReset=rptrRedundReset, rptrPortPktStatsOOW=rptrPortPktStatsOOW, rptrRedundPollInterval=rptrRedundPollInterval, rptrPortAssocTable=rptrPortAssocTable, rptrPortGrpProtocolTbl=rptrPortGrpProtocolTbl, rptrRedundCrctEnable=rptrRedundCrctEnable, rptrPortSecurityFullSecEnabled=rptrPortSecurityFullSecEnabled, rptrPortSaTrapSetPortId=rptrPortSaTrapSetPortId, rptrRedund=rptrRedund, rptrPortMgmtPortType=rptrPortMgmtPortType, rptrHwTrapSetSeg=rptrHwTrapSetSeg, rptrPortSecurityListIndex=rptrPortSecurityListIndex, rptrPortAlarmErrSource=rptrPortAlarmErrSource, rptrPortGrpFrameSzRunt=rptrPortGrpFrameSzRunt, rptrPortGrpHwTrapSetGrpId=rptrPortGrpHwTrapSetGrpId, repeaterrev4=repeaterrev4, rptrSrcAddrSrcTableEntryPort=rptrSrcAddrSrcTableEntryPort, rptrPortSecurityTable=rptrPortSecurityTable, rptrSourceAddress=rptrSourceAddress, rptrRedundPortId=rptrRedundPortId, rptrPortAlarmCollPortDisable=rptrPortAlarmCollPortDisable, rptrPortProtocolOther=rptrPortProtocolOther, rptrPortGrpSrcAddrId=rptrPortGrpSrcAddrId, rptrPortGrpFrameSzId=rptrPortGrpFrameSzId, rptrPortGrpSASecuritySecureState=rptrPortGrpSASecuritySecureState, rptrPortSaTrapEntry=rptrPortSaTrapEntry, rptrPortRedundPortGrpId=rptrPortRedundPortGrpId, rptrProtocolsCtron=rptrProtocolsCtron, rptrPortGrpAlarmErrGrpDisable=rptrPortGrpAlarmErrGrpDisable, rptrMgmtInterfaceNum=rptrMgmtInterfaceNum, rptrPortGrpHwTrapEntry=rptrPortGrpHwTrapEntry, rptrSrcAddrSrcTableEntryId=rptrSrcAddrSrcTableEntryId, rptrPortGrpMgmtPortsOper=rptrPortGrpMgmtPortsOper, rptrRedundPortBoardNum=rptrRedundPortBoardNum, rptrPortGrpFrameSzEntry=rptrPortGrpFrameSzEntry, rptrRedundTestTOD=rptrRedundTestTOD, rptrRedundCrctDelAddr=rptrRedundCrctDelAddr, rptrAlarmsErrSource=rptrAlarmsErrSource, rptrPortSaTrapSetPortGrpId=rptrPortSaTrapSetPortGrpId, rptrPortSrcAddrForceTrunk=rptrPortSrcAddrForceTrunk, rptrProtocolsAppletalk=rptrProtocolsAppletalk, rptrPortGrpAlarmCollEnable=rptrPortGrpAlarmCollEnable, rptrPortSecurityEntry=rptrPortSecurityEntry, rptrPortGrpPktStatsCRC=rptrPortGrpPktStatsCRC, rptrPortHardwarePortGrpId=rptrPortHardwarePortGrpId, rptrPktStatsBytes=rptrPktStatsBytes, rptrPortFrameSzTbl=rptrPortFrameSzTbl, rptrPortGrpMgmtPortsOn=rptrPortGrpMgmtPortsOn, rptrPortSecuritySecureState=rptrPortSecuritySecureState, rptrPortGrpFrameSz1024To1518=rptrPortGrpFrameSz1024To1518, rptrSrcAddrMgmtActiveUsers=rptrSrcAddrMgmtActiveUsers, rptrPortHardwareLinkStatus=rptrPortHardwareLinkStatus, rptrPktStatsAlign=rptrPktStatsAlign, rptrPortSecurityPortId=rptrPortSecurityPortId, rptrPortFrameSzPortId=rptrPortFrameSzPortId, rptrPortGrpProtocolAppletalk=rptrPortGrpProtocolAppletalk, rptrPortSecurityListPortId=rptrPortSecurityListPortId, rptrPortPktStatsEntry=rptrPortPktStatsEntry, rptrPortFrameSz256To511=rptrPortFrameSz256To511, rptrFrameSz1024To1518=rptrFrameSz1024To1518, rptrPortGrpAlarmEntry=rptrPortGrpAlarmEntry, rptrPortGrpProtocolNovell=rptrPortGrpProtocolNovell, rptrPortSrcAddrPortGrpId=rptrPortSrcAddrPortGrpId, rptrAlarmsTrafThreshold=rptrAlarmsTrafThreshold, rptrPortRedundPortId=rptrPortRedundPortId, rptrProtocolsIP=rptrProtocolsIP, rptrFrameSzGiant=rptrFrameSzGiant, rptrPortProtocolCtron=rptrPortProtocolCtron, rptrHwTrapSetLink=rptrHwTrapSetLink, rptrPortGrpMgmtLogPortCount=rptrPortGrpMgmtLogPortCount, rptrPortAlarmPortGrpId=rptrPortAlarmPortGrpId, rptrSecurityLearnState=rptrSecurityLearnState, rptrPortHardwareEntry=rptrPortHardwareEntry, rptrSecuritySecureState=rptrSecuritySecureState, rptrMgmtBoardMap=rptrMgmtBoardMap, rptrRedundCrctRetrys=rptrRedundCrctRetrys, rptrPortProtocolPortId=rptrPortProtocolPortId, rptrPortGrpPktStatsErrors=rptrPortGrpPktStatsErrors, rptrPortGrpHwTrapSet=rptrPortGrpHwTrapSet, rptrPortTrap=rptrPortTrap, rptrPortSecurityDisableOnViolation=rptrPortSecurityDisableOnViolation, rptrFrameSz64To127=rptrFrameSz64To127, rptrPortMgmtPortGrpId=rptrPortMgmtPortGrpId, rptrPortSrcAddrEntry=rptrPortSrcAddrEntry, rptrAlarmsErrThreshold=rptrAlarmsErrThreshold, rptrPktStatsColls=rptrPktStatsColls, rptrPktStats=rptrPktStats, rptrAlarms=rptrAlarms, rptrPortGrpSrcAddrLockGrpId=rptrPortGrpSrcAddrLockGrpId, rptrPortMgmtEntry=rptrPortMgmtEntry, rptrPortSecurityListAddress=rptrPortSecurityListAddress, rptrProtocolsNovell=rptrProtocolsNovell, rptrRedundPortTable=rptrRedundPortTable, rptrPortSrcAddrListId=rptrPortSrcAddrListId, rptrSaTrapSet=rptrSaTrapSet, rptrStats=rptrStats, rptrPortSrcAddrListPortGrpId=rptrPortSrcAddrListPortGrpId, rptrPortAlarmCollThreshold=rptrPortAlarmCollThreshold, rptrPortSrcAddrActiveUsers=rptrPortSrcAddrActiveUsers, rptrPortGrpFrameSz64To127=rptrPortGrpFrameSz64To127, rptrPortSecurityPortGrpId=rptrPortSecurityPortGrpId, rptrPortFrameSz1024To1518=rptrPortFrameSz1024To1518, rptrPortGrpAlarmTrafGrpDisable=rptrPortGrpAlarmTrafGrpDisable, rptrSrcAddrSrcTableEntryPortGroup=rptrSrcAddrSrcTableEntryPortGroup, rptrRedundAddrId=rptrRedundAddrId, rptrFrameSizes=rptrFrameSizes, rptrPortHwTrapTable=rptrPortHwTrapTable, rptrRedundMaxCrcts=rptrRedundMaxCrcts, rptrMgmtPortCount=rptrMgmtPortCount, rptrPortGrpSaTrapSetSrcaddr=rptrPortGrpSaTrapSetSrcaddr, rptr=rptr, rptrMgmtPortsOper=rptrMgmtPortsOper, rptrPortGrpAlarmCollThreshold=rptrPortGrpAlarmCollThreshold, rptrPortGrpSaTrapTable=rptrPortGrpSaTrapTable, rptrPortSaTrapSetSrcaddr=rptrPortSaTrapSetSrcaddr, rptrMgmtPortsEnable=rptrMgmtPortsEnable, rptrFrameSzRunt=rptrFrameSzRunt, rptrAlarmsCollThreshold=rptrAlarmsCollThreshold, rptrPortGrpMgmtEntry=rptrPortGrpMgmtEntry, rptrPortGrpHwTrapSetSeg=rptrPortGrpHwTrapSetSeg, rptrPortAlarmBroadEnable=rptrPortAlarmBroadEnable, rptrPortFrameSzRunt=rptrPortFrameSzRunt, rptrPortGrpPktStatsBroadcasts=rptrPortGrpPktStatsBroadcasts, rptrPortGrpProtocolOSI=rptrPortGrpProtocolOSI, rptrFrameSz128To255=rptrFrameSz128To255, rptrPortAlarmBroadPortDisable=rptrPortAlarmBroadPortDisable, rptrPortSecurityLearnMode=rptrPortSecurityLearnMode, rptrPortGrpAlarmId=rptrPortGrpAlarmId, rptrPortPktStatsMulticasts=rptrPortPktStatsMulticasts, rptrRedundAddrEntry=rptrRedundAddrEntry, rptrPortGrpPktStatsColls=rptrPortGrpPktStatsColls, rptrPortGrpFrameSz128To255=rptrPortGrpFrameSz128To255, rptrSrcAddrMgmt=rptrSrcAddrMgmt, rptrPortProtocolAppletalk=rptrPortProtocolAppletalk, rptrHwTrapSet=rptrHwTrapSet, rptrPortGrpProtocolEntry=rptrPortGrpProtocolEntry, rptrProtocolsBanyan=rptrProtocolsBanyan, rptrPortGrpPktStatsEntry=rptrPortGrpPktStatsEntry, rptrPortGrpPktStatsId=rptrPortGrpPktStatsId, rptrRedundAddrTable=rptrRedundAddrTable, rptrPortHwTrapSetPortId=rptrPortHwTrapSetPortId, rptrPortGrpFrameSz512To1023=rptrPortGrpFrameSz512To1023, rptrPortHardwarePortId=rptrPortHardwarePortId, rptrPortFrameSz64To127=rptrPortFrameSz64To127, rptrPortGrpSrcAddrLock=rptrPortGrpSrcAddrLock, rptrPortGrpPktStatsAlign=rptrPortGrpPktStatsAlign, rptrSaTrapSetSrcaddr=rptrSaTrapSetSrcaddr, rptrPortGrpSrcAddrLockEntry=rptrPortGrpSrcAddrLockEntry, rptrPortGrpFrameSzGiant=rptrPortGrpFrameSzGiant, rptrPortGrpPktStatsPkts=rptrPortGrpPktStatsPkts, rptrPortProtocolNovell=rptrPortProtocolNovell, rptrPortFrameSzPortGrpId=rptrPortFrameSzPortGrpId, rptrProtocols=rptrProtocols, rptrPortGrpAlarmErrThreshold=rptrPortGrpAlarmErrThreshold, rptrPortGrpStats=rptrPortGrpStats, rptrPortSecurityLockDelAddress=rptrPortSecurityLockDelAddress, rptrPortGrpProtocolIP=rptrPortGrpProtocolIP, rptrRedundCrctId=rptrRedundCrctId, rptrPortGrpSaTrapEntry=rptrPortGrpSaTrapEntry, rptrPortSecurity=rptrPortSecurity, rptrPortStats=rptrPortStats, rptrMgmtPortsOn=rptrMgmtPortsOn, rptrPortFrameSz128To255=rptrPortFrameSz128To255, rptrPortRedundStatus=rptrPortRedundStatus, rptrPortGrpSrcAddrTable=rptrPortGrpSrcAddrTable, rptrPortGrpAlarmTable=rptrPortGrpAlarmTable, rptrPortGrpProtocolCtron=rptrPortGrpProtocolCtron, rptrPortGrpMgmtPortCount=rptrPortGrpMgmtPortCount, rptrProtocolsOSI=rptrProtocolsOSI, rptrFrameSz512To1023=rptrFrameSz512To1023, rptrPortGrpPktStatsOOW=rptrPortGrpPktStatsOOW, rptrSrcAddrListEntry=rptrSrcAddrListEntry, rptrAlarmsAlarmTimebase=rptrAlarmsAlarmTimebase, rptrAlarmsCollEnable=rptrAlarmsCollEnable, rptrSrcAddrSrcTable=rptrSrcAddrSrcTable, rptrPortGrpMgmtPortsEnable=rptrPortGrpMgmtPortsEnable, rptrPortRedundType=rptrPortRedundType, rptrPortGrpProtocolId=rptrPortGrpProtocolId, rptrMgmtName=rptrMgmtName, rptrPortGrpAlarmBroadEnable=rptrPortGrpAlarmBroadEnable, rptrSecurityLearnMode=rptrSecurityLearnMode, rptrRedundCrctName=rptrRedundCrctName, rptrPortRedundEntry=rptrPortRedundEntry, rptrPortProtocolPortGrpId=rptrPortProtocolPortGrpId, rptrAlarmsErrEnable=rptrAlarmsErrEnable, rptrRedundPortCrctId=rptrRedundPortCrctId, rptrPortAlarmErrPortDisable=rptrPortAlarmErrPortDisable, rptrPortGrpAlarmErrEnable=rptrPortGrpAlarmErrEnable, rptrRedundAddrCrctId=rptrRedundAddrCrctId, rptrTrap=rptrTrap, rptrSrcAddrListId=rptrSrcAddrListId, rptrPortFrameSzGiant=rptrPortFrameSzGiant, rptrPortGrpProtocolXNS=rptrPortGrpProtocolXNS, rptrPortGrpAlarmTrafEnable=rptrPortGrpAlarmTrafEnable, rptrSrcAddrListTable=rptrSrcAddrListTable, rptrPortGroup=rptrPortGroup, rptrPortGrpSaTrapSet=rptrPortGrpSaTrapSet, rptrPortProtocolEntry=rptrPortProtocolEntry, rptrPktStatsNoRsc=rptrPktStatsNoRsc, rptrMgmtResetCounters=rptrMgmtResetCounters, rptrPortGrpProtocolOther=rptrPortGrpProtocolOther, rptrPortSaTrapSet=rptrPortSaTrapSet, rptrRedundCrctNumAddr=rptrRedundCrctNumAddr, rptrPortSecurityLearnState=rptrPortSecurityLearnState, rptrProtocolsDECNet=rptrProtocolsDECNet, rptrPktStatsMulticasts=rptrPktStatsMulticasts, rptrPortAssocBoard=rptrPortAssocBoard, rptrPortPktStatsPortId=rptrPortPktStatsPortId, rptrPortMgmtName=rptrPortMgmtName, rptrPortAssocEntry=rptrPortAssocEntry, rptrPort=rptrPort, rptrPortGrpPktStatsMulticasts=rptrPortGrpPktStatsMulticasts, rptrPortProtocolIP=rptrPortProtocolIP, rptrPortAlarmCollEnable=rptrPortAlarmCollEnable, rptrProtocolsXNS=rptrProtocolsXNS, rptrPortSecurityForceNonSecure=rptrPortSecurityForceNonSecure, rptrRedundAddrIPAddr=rptrRedundAddrIPAddr, rptrPortGrpAlarmCollBdDisable=rptrPortGrpAlarmCollBdDisable, rptrPortHwTrapSetPortGrpId=rptrPortHwTrapSetPortGrpId, rptrSecurityLockState=rptrSecurityLockState, rptrPortAlarmTrafPortDisable=rptrPortAlarmTrafPortDisable, rptrPortProtocolDECNet=rptrPortProtocolDECNet, rptrPortGrpAlarmBroadThreshold=rptrPortGrpAlarmBroadThreshold, rptrPortPktStatsAlign=rptrPortPktStatsAlign, rptrSaSecurity=rptrSaSecurity, rptrPortAlarmErrEnable=rptrPortAlarmErrEnable, rptrPortProtocolXNS=rptrPortProtocolXNS, rptrPortHwTrapSetLink=rptrPortHwTrapSetLink, rptrPortHardwareTable=rptrPortHardwareTable, rptrPortRedundCrctNum=rptrPortRedundCrctNum, rptrPortPktStatsErrors=rptrPortPktStatsErrors, rptrPortAlarmPortId=rptrPortAlarmPortId, rptrPortRedundTable=rptrPortRedundTable, rptrPortAlarmEntry=rptrPortAlarmEntry, rptrPortPktStatsTbl=rptrPortPktStatsTbl, rptrPortHwTrapSet=rptrPortHwTrapSet, rptrPortAssocStatus=rptrPortAssocStatus, rptrPortPktStatsBytes=rptrPortPktStatsBytes, rptrPortMgmtPortId=rptrPortMgmtPortId, rptrRedundCrctAddAddr=rptrRedundCrctAddAddr, rptrPortGrpMgmtGrpId=rptrPortGrpMgmtGrpId, rptrRedundPortType=rptrRedundPortType, rptrPktStatsBroadcasts=rptrPktStatsBroadcasts)
mibBuilder.exportSymbols("REPEATER-REV4-MIB", rptrPortGrpSrcAddrEntry=rptrPortGrpSrcAddrEntry, rptrPortHwTrapEntry=rptrPortHwTrapEntry, rptrPortSrcAddrAddressList=rptrPortSrcAddrAddressList, rptrPortSrcAddrListTable=rptrPortSrcAddrListTable, rptrPortGrpAlarmTrafThreshold=rptrPortGrpAlarmTrafThreshold, rptrPortFrameSzEntry=rptrPortFrameSzEntry, rptrRedundPortNum=rptrRedundPortNum, rptrPortSrcAddrListPortId=rptrPortSrcAddrListPortId, rptrPortGrpSASecurityLearnState=rptrPortGrpSASecurityLearnState, rptrPortSrcAddrListEntry=rptrPortSrcAddrListEntry, rptrSrcAddrMgmtSrcAgeInterval=rptrSrcAddrMgmtSrcAgeInterval, rptrPortSecurityListPortGrpId=rptrPortSecurityListPortGrpId, rptrPktStatsErrors=rptrPktStatsErrors, rptrPortPktStatsCRC=rptrPortPktStatsCRC, rptrPortGrpHwTrapTable=rptrPortGrpHwTrapTable, rptrPortGrpAlarmErrSource=rptrPortGrpAlarmErrSource, rptrPortHardwareSegStatus=rptrPortHardwareSegStatus, rptrSrcAddrMgmtPortLock=rptrSrcAddrMgmtPortLock, rptrPortAlarmTable=rptrPortAlarmTable, rptrAlarmsBroadThreshold=rptrAlarmsBroadThreshold, rptrAlarmsBroadEnable=rptrAlarmsBroadEnable, rptrSrcAddrSrcTableEntry=rptrSrcAddrSrcTableEntry, rptrPortGrpSrcAddrLockTable=rptrPortGrpSrcAddrLockTable, rptrPortPktStatsPortGrpId=rptrPortPktStatsPortGrpId, rptrPortGrpMgmtTable=rptrPortGrpMgmtTable, rptrPortSecurityListEntry=rptrPortSecurityListEntry, rptrMgmt=rptrMgmt, rptrPortAlarmBroadThreshold=rptrPortAlarmBroadThreshold, rptrPortGrpSrcAddrActiveUsers=rptrPortGrpSrcAddrActiveUsers, rptrPktStatsOOW=rptrPktStatsOOW, rptrPortPktStatsPackets=rptrPortPktStatsPackets, rptrPortSrcAddrPortId=rptrPortSrcAddrPortId, rptrPortAlarmTrafEnable=rptrPortAlarmTrafEnable, rptrRedundCrctReset=rptrRedundCrctReset, rptrPortGrpPktStatsTbl=rptrPortGrpPktStatsTbl, rptrRedundCrctEntry=rptrRedundCrctEntry, rptrRedundPerformTest=rptrRedundPerformTest, rptrAlarmsTrafEnable=rptrAlarmsTrafEnable, rptrPortProtocolOSI=rptrPortProtocolOSI, rptrPortMgmtOperState=rptrPortMgmtOperState, rptrPortSaTrapTable=rptrPortSaTrapTable, rptrPortGrpHwTrapSetLink=rptrPortGrpHwTrapSetLink, rptrPortGrpProtocolBanyan=rptrPortGrpProtocolBanyan, rptrPortGrpMgmtName=rptrPortGrpMgmtName, rptrPortProtocolBanyan=rptrPortProtocolBanyan, rptrPortProtocolTbl=rptrPortProtocolTbl, rptrPktStatsPackets=rptrPktStatsPackets, rptrPortAlarmErrThreshold=rptrPortAlarmErrThreshold, rptrPortGrpSASecurityLearnMode=rptrPortGrpSASecurityLearnMode, rptrPortSecurityLockAddAddress=rptrPortSecurityLockAddAddress, rptrPortPktStatsColls=rptrPortPktStatsColls, rptrProtocolsOther=rptrProtocolsOther, rptrPortAlarmTrafThreshold=rptrPortAlarmTrafThreshold, rptrRedundancy=rptrRedundancy, rptrPortAssoc=rptrPortAssoc, rptrSrcAddrAddressList=rptrSrcAddrAddressList, rptrPortGrpPktStatsBytes=rptrPortGrpPktStatsBytes, rptrPortSecurityListTable=rptrPortSecurityListTable, rptrPortGrpFrameSzTbl=rptrPortGrpFrameSzTbl, rptrFrameSz256To511=rptrFrameSz256To511, rptrPortMgmtAdminState=rptrPortMgmtAdminState, rptrPktStatsCRC=rptrPktStatsCRC, rptrPortSrcAddrTopoState=rptrPortSrcAddrTopoState, rptrPortSrcAddrTable=rptrPortSrcAddrTable, rptrRedundCrctNumBPs=rptrRedundCrctNumBPs, rptrPortGrpTrap=rptrPortGrpTrap, rptrRedundCrctTable=rptrRedundCrctTable)
