#
# PySNMP MIB module IBMTCPIPMVS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMTCPIPMVS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ipForwardEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipForwardEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, Bits, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ObjectIdentity, NotificationType, iso, Integer32, Counter32, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Bits", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ObjectIdentity", "NotificationType", "iso", "Integer32", "Counter32", "enterprises", "Counter64")
DisplayString, RowStatus, DateAndTime, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "DateAndTime", "TextualConvention", "TruthValue")
tcpConnEntry, = mibBuilder.importSymbols("TCP-MIB", "tcpConnEntry")
udpEntry, = mibBuilder.importSymbols("UDP-MIB", "udpEntry")
ibmTCPIPmvsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 19, 2))
ibmTCPIPmvsMIB.setRevisions(('2001-03-23 00:00', '1900-05-08 00:00', '1999-04-01 00:00', '1998-09-16 00:00', '1998-08-26 00:00', '1998-06-03 00:00', '1998-03-05 00:00',))
if mibBuilder.loadTexts: ibmTCPIPmvsMIB.setLastUpdated('200103230000Z')
if mibBuilder.loadTexts: ibmTCPIPmvsMIB.setOrganization('IBM z/OS Communications Server Development')
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
mvsSNMPagent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19))
ibmAgentCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 11))
ibmTCPIPmvsMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0))
ibmTCPIPmvsAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 1))
ibmTCPIPmvsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2))
ibmTCPIPmvsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3))
class TypeOfService(TextualConvention, Integer32):
    status = 'obsolete'
    displayHint = '1a'

class DeviceLinkTypes(TextualConvention, Integer32):
    status = 'current'
    displayHint = '1a'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("unknown", 0), ("lcs", 1), ("ctc", 2), ("claw", 3), ("cdlc", 4), ("atm", 5), ("x25npsi", 6), ("vipa", 7), ("loopback", 8), ("hch", 9), ("ethernet", 10), ("t8023", 11), ("etheror8023", 12), ("ibmtr", 13), ("fddi", 14), ("ip", 15), ("iucv", 16), ("stack", 17), ("mpcptp", 18), ("snalu0", 19), ("snalu62", 20), ("mpcipa", 21), ("ipaqenet", 22), ("mpcosa", 24), ("osafddi", 25), ("osaenet", 26), ("ipaqtr", 27), ("ipaqidio", 28))

ibmRemotePingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1))
ibmTcpipMvsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2))
ibmTcpipMvsInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3))
ibmTcpipMvsPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4))
ibmTcpipMvsRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5))
ibmTcpipMvsAtmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6))
ibmTcpipMvsTcpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7))
ibmTcpipMvsUdpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8))
ibmTcpipMvsIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9))
ibmTcpipMvsOsaExpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10))
ibmTcpipMvsDVIPAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11))
ibmSNMPRemPing = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSNMPRemPing.setStatus('obsolete')
ibmRemotePingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1), )
if mibBuilder.loadTexts: ibmRemotePingTable.setStatus('current')
ibmRemotePingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsRPingPacketSize"), (0, "IBMTCPIPMVS-MIB", "ibmMvsRPingTimeOut"), (0, "IBMTCPIPMVS-MIB", "ibmMvsRPingHostAddress"))
if mibBuilder.loadTexts: ibmRemotePingEntry.setStatus('current')
ibmMvsRPingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmMvsRPingPacketSize.setStatus('current')
ibmMvsRPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: ibmMvsRPingTimeOut.setStatus('current')
ibmMvsRPingHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: ibmMvsRPingHostAddress.setStatus('current')
ibmMvsRPingResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsRPingResponseTime.setStatus('current')
ibmMvsSubagentCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsSubagentCacheTime.setStatus('current')
ibmMvsIgnoreRedirect = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("process", 0), ("ignore", 1))).clone('process')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsIgnoreRedirect.setStatus('current')
ibmMvsArpCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsArpCacheTimeout.setStatus('current')
ibmMvsTcpKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35791)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpKeepAliveTimer.setStatus('current')
ibmMvsTcpReceiveBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 524288)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpReceiveBufferSize.setStatus('current')
ibmMvsTcpSendBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 262144)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpSendBufferSize.setStatus('current')
ibmMvsUdpChecksum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsUdpChecksum.setStatus('current')
ibmMvsIplDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIplDateAndTime.setStatus('current')
ibmMvsNoUdpQueueLimit = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("queueLimit", 0), ("noQueueLimit", 1))).clone('queueLimit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsNoUdpQueueLimit.setStatus('current')
ibmMvsSoMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsSoMaxConn.setStatus('current')
ibmMvsTcpipProcname = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpipProcname.setStatus('current')
ibmMvsTcpipAsid = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpipAsid.setStatus('current')
ibmMvsSourceVipaEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsSourceVipaEnabled.setStatus('current')
ibmMvsOsasfSysplexName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsasfSysplexName.setStatus('current')
ibmMvsOsasfHostName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsasfHostName.setStatus('current')
ibmMvsOsasfProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsasfProductVersion.setStatus('current')
ibmMvsPrimaryInterfaceIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsPrimaryInterfaceIfIndex.setStatus('current')
ibmMvsIpMaxReassemblySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 18), Integer32().clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpMaxReassemblySize.setStatus('current')
ibmMvsTcpRestrictLowPorts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpRestrictLowPorts.setStatus('current')
ibmMvsUdpRestrictLowPorts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsUdpRestrictLowPorts.setStatus('current')
ibmMvsUdpSendBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsUdpSendBufferSize.setStatus('current')
ibmMvsUdpRecvBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsUdpRecvBufferSize.setStatus('current')
ibmMvsTcpipStatisticsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpipStatisticsEnabled.setStatus('current')
ibmMvsFirewallEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsFirewallEnabled.setStatus('current')
ibmMvsMaximumRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 25), Integer32().clone(120000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsMaximumRetransmitTime.setStatus('current')
ibmMvsMinimumRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 26), Integer32().clone(500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsMinimumRetransmitTime.setStatus('current')
ibmMvsRoundTripGain = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 27), Integer32().clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsRoundTripGain.setStatus('current')
ibmMvsVarianceGain = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 28), Integer32().clone(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsVarianceGain.setStatus('current')
ibmMvsVarianceMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 29), Integer32().clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsVarianceMultiplier.setStatus('current')
ibmMvsSendGarbageEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsSendGarbageEnabled.setStatus('current')
ibmMvsTcpMaxReceiveBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 524288)).clone(262144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpMaxReceiveBufferSize.setStatus('current')
ibmMvsMultipathEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsMultipathEnabled.setStatus('obsolete')
ibmMvsPathMtuDscEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsPathMtuDscEnabled.setStatus('current')
ibmMvsMultipathType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("nomultipath", 0), ("perconnection", 2), ("perpacket", 3))).clone('nomultipath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsMultipathType.setStatus('current')
ibmMvsIpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notForwarding", 1), ("forwardingNoMultipath", 2), ("forwardingMultipathPkt", 3))).clone('forwardingNoMultipath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsIpForwarding.setStatus('current')
ibmMvsDevRetryDuration = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsDevRetryDuration.setStatus('current')
ibmMvsTcpFinwait2Time = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpFinwait2Time.setStatus('current')
ibmMvsTcpTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 38), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsTcpTimeStamp.setStatus('current')
ibmMvsTcpipSubagentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("v1r2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpipSubagentVersion.setStatus('current')
ibmTcpipMvsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1), )
if mibBuilder.loadTexts: ibmTcpipMvsDeviceTable.setStatus('current')
ibmTcpipMvsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmTcpipMvsDeviceEntry.setStatus('current')
ibmMvsDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 1), DeviceLinkTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceType.setStatus('current')
ibmMvsDeviceBaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceBaseNumber.setStatus('current')
ibmMvsDeviceIoBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32768, 65535)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceIoBufferSize.setStatus('current')
ibmMvsDeviceAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceAutoRestart.setStatus('current')
ibmMvsDeviceNetmanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 5), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceNetmanEnabled.setStatus('current')
ibmMvsDeviceHostClawName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceHostClawName.setStatus('current')
ibmMvsDeviceWorkstationClawName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceWorkstationClawName.setStatus('current')
ibmMvsDeviceReadBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceReadBuffers.setStatus('current')
ibmMvsDeviceReadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceReadSize.setStatus('current')
ibmMvsDeviceWriteBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceWriteBuffers.setStatus('current')
ibmMvsDeviceWriteSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceWriteSize.setStatus('current')
ibmMvsDeviceProcname = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceProcname.setStatus('current')
ibmMvsDeviceIncomingSvcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceIncomingSvcEnabled.setStatus('current')
ibmMvsDeviceLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceLuName.setStatus('current')
ibmMvsDeviceRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 15), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceRouterStatus.setStatus('current')
ibmMvsDeviceActualRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 16), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceActualRouterStatus.setStatus('current')
ibmMvsDeviceConfigPackingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 17), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceConfigPackingMode.setStatus('current')
ibmMvsDeviceActualPackingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 1, 1, 18), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDeviceActualPackingMode.setStatus('current')
ibmTcpipMvsLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2), )
if mibBuilder.loadTexts: ibmTcpipMvsLinkTable.setStatus('current')
ibmTcpipMvsLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmTcpipMvsLinkEntry.setStatus('current')
ibmMvsLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 1), DeviceLinkTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkType.setStatus('current')
ibmMvsLinkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkDeviceIndex.setStatus('current')
ibmMvsLinkAdapterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 3), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkAdapterAddr.setStatus('current')
ibmMvsLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 4), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkNumber.setStatus('current')
ibmMvsLinkIbmtrCanonical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 5), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkIbmtrCanonical.setStatus('current')
ibmMvsLinkIbmtrBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 6), Integer32().clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkIbmtrBcast.setStatus('current')
ibmMvsLinkMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkMcast.setStatus('current')
ibmMvsLinkChecksumEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkChecksumEnabled.setStatus('current')
ibmMvsLinkArpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("tcpipArp", 2), ("offloadNoInfo", 3), ("offloadArpInfo", 4), ("unknown", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkArpSupport.setStatus('current')
ibmMvsLinkMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkMacAddress.setStatus('current')
ibmTcpipMvsLinkMcastTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 3), )
if mibBuilder.loadTexts: ibmTcpipMvsLinkMcastTable.setStatus('current')
ibmTcpipMvsLinkMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMTCPIPMVS-MIB", "ibmMvsLinkMcastGroupAddr"))
if mibBuilder.loadTexts: ibmTcpipMvsLinkMcastEntry.setStatus('current')
ibmMvsLinkMcastGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ibmMvsLinkMcastGroupAddr.setStatus('current')
ibmMvsLinkMcastRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsLinkMcastRefCount.setStatus('current')
ibmTcpipMvsPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1), )
if mibBuilder.loadTexts: ibmTcpipMvsPortTable.setStatus('current')
ibmTcpipMvsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsPortNumberLow"), (0, "IBMTCPIPMVS-MIB", "ibmMvsPortNumberHigh"), (0, "IBMTCPIPMVS-MIB", "ibmMvsPortProtocol"), (0, "IBMTCPIPMVS-MIB", "ibmMvsPortProcName"))
if mibBuilder.loadTexts: ibmTcpipMvsPortEntry.setStatus('current')
ibmMvsPortNumberLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortNumberLow.setStatus('current')
ibmMvsPortNumberHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortNumberHigh.setStatus('current')
ibmMvsPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortProtocol.setStatus('current')
ibmMvsPortProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortProcName.setStatus('current')
ibmMvsPortAutoLoggable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortAutoLoggable.setStatus('current')
ibmMvsPortDelayAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortDelayAcks.setStatus('current')
ibmMvsPortOptMaxSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortOptMaxSegmentSize.setStatus('current')
ibmMvsPortSharePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortSharePort.setStatus('current')
ibmMvsPortBindIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortBindIpAddr.setStatus('current')
ibmMvsPortSAFResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortSAFResource.setStatus('current')
ibmMvsPortReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 4, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsPortReuse.setStatus('current')
ibmTcpipMvsGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1), )
if mibBuilder.loadTexts: ibmTcpipMvsGatewayTable.setStatus('current')
ibmTcpipMvsGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1), )
ipForwardEntry.registerAugmentions(("IBMTCPIPMVS-MIB", "ibmTcpipMvsGatewayEntry"))
ibmTcpipMvsGatewayEntry.setIndexNames(*ipForwardEntry.getIndexNames())
if mibBuilder.loadTexts: ibmTcpipMvsGatewayEntry.setStatus('current')
ibmMvsGatewayMaximumRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 1), Integer32().clone(6000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayMaximumRetransmitTime.setStatus('current')
ibmMvsGatewayMinimumRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 2), Integer32().clone(75)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayMinimumRetransmitTime.setStatus('current')
ibmMvsGatewayRoundTripGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 3), Integer32().clone(1200)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayRoundTripGain.setStatus('current')
ibmMvsGatewayVarianceGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 4), Integer32().clone(2500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayVarianceGain.setStatus('current')
ibmMvsGatewayVarianceMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 5), Integer32().clone(20000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayVarianceMultiplier.setStatus('current')
ibmMvsGatewayDelayAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsGatewayDelayAcks.setStatus('current')
osasfChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1), )
if mibBuilder.loadTexts: osasfChannelTable.setStatus('current')
osasfChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: osasfChannelEntry.setStatus('current')
ibmMvsAtmOsasfChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelNumber.setStatus('current')
ibmMvsAtmOsasfChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("osaExp155", 16), ("osaExp155QDIO", 17), ("osa", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelType.setStatus('current')
ibmMvsAtmOsasfChannelSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelSubType.setStatus('current')
ibmMvsAtmOsasfChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("passthruMode", 2), ("snaMode", 3), ("atmLeTcpipMode", 4), ("atmLeSnaMode", 5), ("atmLeSnaTcpipMode", 6), ("atmNativeMode", 7), ("atmIpFwdMode", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelMode.setStatus('current')
ibmMvsAtmOsasfChannelHwModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("osa1", 1), ("osa2", 2), ("osa2Atm", 3), ("osaExp155", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelHwModel.setStatus('current')
ibmMvsAtmOsasfChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("online", 1), ("notinst", 3), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelState.setStatus('current')
ibmMvsAtmOsasfChannelShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelShared.setStatus('current')
ibmMvsAtmOsasfChannelNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelNumPorts.setStatus('current')
ibmMvsAtmOsasfChannelDeterNodeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelDeterNodeDesc.setStatus('current')
ibmMvsAtmOsasfChannelControlUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelControlUnitNumber.setStatus('current')
ibmMvsAtmOsasfChannelCodeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelCodeLevel.setStatus('current')
ibmMvsAtmOsasfChannelEcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelEcLevel.setStatus('obsolete')
ibmMvsAtmOsasfChannelCurLparName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelCurLparName.setStatus('current')
ibmMvsAtmOsasfChannelCurLparNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelCurLparNum.setStatus('current')
ibmMvsAtmOsasfChannelManParnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelManParnName.setStatus('current')
ibmMvsAtmOsasfChannelManParnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelManParnNum.setStatus('current')
ibmMvsAtmOsasfChannelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelDate.setStatus('obsolete')
ibmMvsAtmOsasfChannelTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelTime.setStatus('obsolete')
ibmMvsAtmOsasfChannelFlashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelFlashLevel.setStatus('current')
ibmMvsAtmOsasfChannelVtamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfChannelVtamId.setStatus('obsolete')
osasfPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2), )
if mibBuilder.loadTexts: osasfPortTable.setStatus('current')
osasfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: osasfPortEntry.setStatus('current')
ibmMvsAtmOsasfPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortNumber.setStatus('current')
ibmMvsAtmOsasfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 41))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("atm", 9), ("osaExp155", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortType.setStatus('current')
ibmMvsAtmOsasfPortHardwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("enabled", 0), ("hostDisabled", 1), ("externallyDisabled", 2), ("internallyDisabled", 3), ("secmHostDisabled", 4), ("secmExternallyDisabled", 5), ("secmInternallyDisabled", 6), ("linkMonitor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortHardwareState.setStatus('current')
ibmMvsAtmOsasfPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("coaxCable", 1), ("singleModeFiber", 2), ("multimodeFiber", 3), ("shieldedTwistedPair", 4), ("unshieldedTwistedPair", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortMediaType.setStatus('current')
ibmMvsAtmOsasfPortUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortUniType.setStatus('current')
ibmMvsAtmOsasfPortUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version20", 1), ("version30", 2), ("version31", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortUniVersion.setStatus('current')
ibmMvsAtmOsasfPortNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortNetPrefix.setStatus('current')
ibmMvsAtmOsasfPortNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortNetPrefixPrefix.setStatus('current')
ibmMvsAtmOsasfPortNetPrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortNetPrefixStatus.setStatus('current')
ibmMvsAtmOsasfPortCodeLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("configRejected", 3), ("outOfSync", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortCodeLoadStatus.setStatus('current')
ibmMvsAtmOsasfPortMacAddrBurntIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortMacAddrBurntIn.setStatus('current')
ibmMvsAtmOsasfPortMacAddrActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortMacAddrActive.setStatus('current')
ibmMvsAtmOsasfPortMaxPcmConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortMaxPcmConnections.setStatus('current')
ibmMvsAtmOsasfPortPcmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortPcmName.setStatus('current')
ibmMvsAtmOsasfPortAAL5InPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortAAL5InPackets.setStatus('current')
ibmMvsAtmOsasfPortAAL5OutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortAAL5OutPackets.setStatus('current')
ibmMvsAtmOsasfPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPortIpAddress.setStatus('current')
osasfPvcTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3), )
if mibBuilder.loadTexts: osasfPvcTable.setStatus('current')
osasfPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"))
if mibBuilder.loadTexts: osasfPvcEntry.setStatus('current')
ibmMvsAtmOsasfPvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcName.setStatus('current')
ibmMvsAtmOsasfPvcBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcBestEffort.setStatus('current')
ibmMvsAtmOsasfPvcFwdPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcFwdPeakCellRate.setStatus('current')
ibmMvsAtmOsasfPvcBwdPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcBwdPeakCellRate.setStatus('current')
ibmMvsAtmOsasfPvcFwdsustainCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcFwdsustainCellRate.setStatus('current')
ibmMvsAtmOsasfPvcBwdsustainCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcBwdsustainCellRate.setStatus('current')
ibmMvsAtmOsasfPvcFwdCellBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcFwdCellBurstSize.setStatus('current')
ibmMvsAtmOsasfPvcBwdCellBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcBwdCellBurstSize.setStatus('current')
ibmMvsAtmOsasfPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcVpi.setStatus('current')
ibmMvsAtmOsasfPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcVci.setStatus('current')
ibmMvsAtmOsasfPvcFwdMaxAal5PduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9188))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcFwdMaxAal5PduSize.setStatus('current')
ibmMvsAtmOsasfPvcBwdMaxAal5PduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9188))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmOsasfPvcBwdMaxAal5PduSize.setStatus('current')
ibmMvsAtmSnaLeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4), )
if mibBuilder.loadTexts: ibmMvsAtmSnaLeTable.setStatus('current')
ibmMvsAtmSnaLeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmSnaLeEntry.setStatus('current')
ibmMvsAtmSnaLeLlcTi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeLlcTi.setStatus('current')
ibmMvsAtmSnaLeLlcT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeLlcT1.setStatus('current')
ibmMvsAtmSnaLeLlcT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeLlcT2.setStatus('current')
ibmMvsAtmSnaleMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaleMaxStations.setStatus('current')
ibmMvsAtmSnaLeMaxSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeMaxSaps.setStatus('current')
ibmMvsAtmSnaleMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaleMaxIn.setStatus('current')
ibmMvsAtmSnaLeMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeMaxOut.setStatus('current')
ibmMvsAtmSnaLeCrsGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeCrsGroupAddress.setStatus('current')
ibmMvsAtmSnaLeUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeUserData.setStatus('current')
ibmMvsAtmSnaLeClientEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notDefined", 1), ("lecActivating", 2), ("enabled", 3), ("internalFailureDisabled", 4), ("physicalPortDisabled", 5), ("osasfDisabled", 6), ("externalDisabled", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeClientEnableState.setStatus('current')
ibmMvsAtmSnaLeBestEffortPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeBestEffortPeakRate.setStatus('current')
ibmMvsAtmSnaLeMaxLECConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeMaxLECConnections.setStatus('current')
ibmMvsAtmSnaLeTrEnableLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeTrEnableLoadBalancing.setStatus('current')
ibmMvsAtmSnaLeTrLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeTrLoadBalancing.setStatus('current')
ibmMvsAtmSnaLeTrSessionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 375))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmSnaLeTrSessionDelay.setStatus('current')
ibmMvsAtmLecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5), )
if mibBuilder.loadTexts: ibmMvsAtmLecConfigTable.setStatus('current')
ibmMvsAtmLecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmLecConfigEntry.setStatus('current')
ibmMvsAtmLecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigMode.setStatus('current')
ibmMvsAtmLecConfigLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigLanType.setStatus('current')
ibmMvsAtmLecConfigMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("f1516", 2), ("f4544", 3), ("f9234", 4), ("f18190", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigMaxDataFrameSize.setStatus('current')
ibmMvsAtmLecConfigLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigLanName.setStatus('current')
ibmMvsAtmLecConfigLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigLesAtmAddress.setStatus('current')
ibmMvsAtmLecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlTimeout.setStatus('current')
ibmMvsAtmLecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMaxUnknownFrameCount.setStatus('current')
ibmMvsAtmLecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMaxUnknownFrameTime.setStatus('current')
ibmMvsAtmLecVccTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecVccTimeoutPeriod.setStatus('current')
ibmMvsAtmLecMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMaxRetryCount.setStatus('current')
ibmMvsAtmLecAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecAgingTime.setStatus('current')
ibmMvsAtmLecForwardDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecForwardDelayTime.setStatus('current')
ibmMvsAtmLecExpectedArpResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecExpectedArpResponseTime.setStatus('current')
ibmMvsAtmLecFlushTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecFlushTimeout.setStatus('current')
ibmMvsAtmLecPathSwitchingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecPathSwitchingDelay.setStatus('current')
ibmMvsAtmLecLocalSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecLocalSegmentID.setStatus('current')
ibmMvsAtmLecMulticastSendType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bestEffort", 1), ("variableBitRate", 2), ("constantBitRate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendType.setStatus('current')
ibmMvsAtmLecMulticastSendAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendAvgRate.setStatus('current')
ibmMvsAtmLecMulticastSendPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendPeakRate.setStatus('current')
ibmMvsAtmLecConnectionCompleteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConnectionCompleteTimer.setStatus('current')
ibmMvsAtmLecPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecPortName.setStatus('current')
ibmMvsAtmLecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6), )
if mibBuilder.loadTexts: ibmMvsAtmLecStatusTable.setStatus('current')
ibmMvsAtmLecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmLecStatusEntry.setStatus('current')
ibmMvsAtmLecPrimaryAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecPrimaryAtmAddress.setStatus('current')
ibmMvsAtmLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecID.setStatus('current')
ibmMvsAtmLecInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecInterfaceState.setStatus('current')
ibmMvsAtmLecLastFailureRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("undefinedError", 3), ("versionNotSupported", 4), ("invalidRequestParameters", 5), ("duplicateLanDestination", 6), ("duplicateAtmAddress", 7), ("insufficientResources", 8), ("accessDenied", 9), ("invalidRequesterId", 10), ("invalidLanDestination", 11), ("invalidAtmAddress", 12), ("noConfiguration", 13), ("leConfigureError", 14), ("insufficientInformation", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecLastFailureRespCode.setStatus('current')
ibmMvsAtmLecLastFailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecLastFailureState.setStatus('current')
ibmMvsAtmLecProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecProtocol.setStatus('current')
ibmMvsAtmLecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecVersion.setStatus('current')
ibmMvsAtmLecTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecTopologyChange.setStatus('current')
ibmMvsAtmLecConfigServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigServerAtmAddress.setStatus('current')
ibmMvsAtmLecConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gotAddressViaIlmi", 1), ("usedWellKnownAddress", 2), ("usedLecsPvc", 3), ("didNotUseLecs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigSource.setStatus('current')
ibmMvsAtmLecActualLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecActualLanType.setStatus('current')
ibmMvsAtmLecActualMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("f1516", 2), ("f4544", 3), ("f9234", 4), ("f18190", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecActualMaxDataFrameSize.setStatus('current')
ibmMvsAtmLecActualLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecActualLanName.setStatus('current')
ibmMvsAtmLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecAtmAddress.setStatus('current')
ibmMvsAtmLecProxyClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecProxyClient.setStatus('current')
ibmMvsAtmLecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7), )
if mibBuilder.loadTexts: ibmMvsAtmLecStatisticsTable.setStatus('current')
ibmMvsAtmLecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmLecStatisticsEntry.setStatus('current')
ibmMvsAtmLecArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecArpRequestsOut.setStatus('current')
ibmMvsAtmLecArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecArpRequestsIn.setStatus('current')
ibmMvsAtmLecArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecArpRepliesOut.setStatus('current')
ibmMvsAtmLecArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecArpRepliesIn.setStatus('current')
ibmMvsAtmLecControlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlFramesOut.setStatus('current')
ibmMvsAtmLecControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlFramesIn.setStatus('current')
ibmMvsAtmLecSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecSvcFailures.setStatus('current')
ibmMvsAtmLecServerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8), )
if mibBuilder.loadTexts: ibmMvsAtmLecServerTable.setStatus('current')
ibmMvsAtmLecServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmLecServerEntry.setStatus('current')
ibmMvsAtmLecConfigDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigDirectInterface.setStatus('current')
ibmMvsAtmLecConfigDirectVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigDirectVPI.setStatus('current')
ibmMvsAtmLecConfigDirectVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecConfigDirectVCI.setStatus('current')
ibmMvsAtmLecControlDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDirectInterface.setStatus('current')
ibmMvsAtmLecControlDirectVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDirectVPI.setStatus('current')
ibmMvsAtmLecControlDirectVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDirectVCI.setStatus('current')
ibmMvsAtmLecControlDistributeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDistributeInterface.setStatus('current')
ibmMvsAtmLecControlDistributeVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDistributeVPI.setStatus('current')
ibmMvsAtmLecControlDistributeVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecControlDistributeVCI.setStatus('current')
ibmMvsAtmLecMulticastSendInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendInterface.setStatus('current')
ibmMvsAtmLecMulticastSendVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendVPI.setStatus('current')
ibmMvsAtmLecMulticastSendVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastSendVCI.setStatus('current')
ibmMvsAtmLecMulticastFwdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastFwdInterface.setStatus('current')
ibmMvsAtmLecMulticastFwdVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastFwdVPI.setStatus('current')
ibmMvsAtmLecMulticastFwdVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMulticastFwdVCI.setStatus('current')
ibmMvsAtmLecMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 9), )
if mibBuilder.loadTexts: ibmMvsAtmLecMacAddressTable.setStatus('current')
ibmMvsAtmLecMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibmMvsAtmLecMacAddressEntry.setStatus('current')
ibmMvsAtmLecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 6, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsAtmLecMacAddress.setStatus('current')
ibmTcpipMvsTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1), )
if mibBuilder.loadTexts: ibmTcpipMvsTcpConnTable.setStatus('current')
ibmTcpipMvsTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1), )
tcpConnEntry.registerAugmentions(("IBMTCPIPMVS-MIB", "ibmTcpipMvsTcpConnEntry"))
ibmTcpipMvsTcpConnEntry.setIndexNames(*tcpConnEntry.getIndexNames())
if mibBuilder.loadTexts: ibmTcpipMvsTcpConnEntry.setStatus('current')
ibmMvsTcpConnLastActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnLastActivity.setStatus('current')
ibmMvsTcpConnBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnBytesIn.setStatus('current')
ibmMvsTcpConnBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnBytesOut.setStatus('current')
ibmMvsTcpConnActiveOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnActiveOpen.setStatus('obsolete')
ibmMvsTcpConnIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 5), TypeOfService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnIpTos.setStatus('obsolete')
ibmMvsTcpConnOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOptions.setStatus('current')
ibmMvsTcpConnOutBuffered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOutBuffered.setStatus('current')
ibmMvsTcpConnUsrSndNxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnUsrSndNxt.setStatus('current')
ibmMvsTcpConnSndNxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndNxt.setStatus('current')
ibmMvsTcpConnSndUna = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndUna.setStatus('current')
ibmMvsTcpConnOutgoingPush = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOutgoingPush.setStatus('current')
ibmMvsTcpConnOutgoingUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOutgoingUrg.setStatus('current')
ibmMvsTcpConnOutgoingWinSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOutgoingWinSeq.setStatus('current')
ibmMvsTcpConnSendWindowSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSendWindowSeq.setStatus('obsolete')
ibmMvsTcpConnSendWindowAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSendWindowAck.setStatus('obsolete')
ibmMvsTcpConnInBuffered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnInBuffered.setStatus('current')
ibmMvsTcpConnRcvNxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnRcvNxt.setStatus('current')
ibmMvsTcpConnUsrRcvNxt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnUsrRcvNxt.setStatus('current')
ibmMvsTcpConnIncomingPush = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnIncomingPush.setStatus('current')
ibmMvsTcpConnIncomingUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnIncomingUrg.setStatus('current')
ibmMvsTcpConnIncomingWinSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnIncomingWinSeq.setStatus('current')
ibmMvsTcpConnReXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnReXmt.setStatus('current')
ibmMvsTcpConnMaxSndWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnMaxSndWnd.setStatus('current')
ibmMvsTcpConnReXmtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnReXmtCount.setStatus('current')
ibmMvsTcpConnCongestionWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnCongestionWnd.setStatus('current')
ibmMvsTcpConnSSThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSSThresh.setStatus('current')
ibmMvsTcpConnRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnRoundTripTime.setStatus('current')
ibmMvsTcpConnRoundTripVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnRoundTripVariance.setStatus('current')
ibmMvsTcpConnInitSndSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnInitSndSeq.setStatus('current')
ibmMvsTcpConnInitRcvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnInitRcvSeq.setStatus('current')
ibmMvsTcpConnSendMSS = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSendMSS.setStatus('current')
ibmMvsTcpConnSndWl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndWl1.setStatus('current')
ibmMvsTcpConnSndWl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndWl2.setStatus('current')
ibmMvsTcpConnSndWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndWnd.setStatus('current')
ibmMvsTcpConnPendTcpRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnPendTcpRecv.setStatus('obsolete')
ibmMvsTcpConnRcvBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnRcvBufSize.setStatus('current')
ibmMvsTcpConnResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnResourceName.setStatus('current')
ibmMvsTcpConnSubtask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSubtask.setStatus('current')
ibmMvsTcpConnResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnResourceId.setStatus('current')
ibmMvsTcpConnSockOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSockOpt.setStatus('current')
ibmMvsTcpConnTcpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTcpTimer.setStatus('obsolete')
ibmMvsTcpConnTcpSig = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTcpSig.setStatus('obsolete')
ibmMvsTcpConnTcpSel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTcpSel.setStatus('obsolete')
ibmMvsTcpConnRttSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnRttSeq.setStatus('current')
ibmMvsTcpConnBackoffCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnBackoffCount.setStatus('obsolete')
ibmMvsTcpConnTcpDet = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 46), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTcpDet.setStatus('obsolete')
ibmMvsTcpConnTcpPol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTcpPol.setStatus('obsolete')
ibmMvsTcpConnTargetAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTargetAppl.setStatus('current')
ibmMvsTcpConnLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnLuName.setStatus('current')
ibmMvsTcpConnClientUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnClientUserId.setStatus('current')
ibmMvsTcpConnLogMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnLogMode.setStatus('current')
ibmMvsTcpConnProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 52), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnProto.setStatus('current')
ibmMvsTcpConnDupacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnDupacks.setStatus('current')
ibmMvsTcpConnOptMaxSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOptMaxSegmentSize.setStatus('current')
ibmMvsTcpConnClusterConnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnClusterConnFlag.setStatus('current')
ibmMvsTcpConnInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnInSegs.setStatus('current')
ibmMvsTcpConnOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnOutSegs.setStatus('current')
ibmMvsTcpConnDSField = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 58), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnDSField.setStatus('current')
ibmMvsTcpConnSndBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnSndBufSize.setStatus('current')
ibmMvsTcpConnAcceptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnAcceptCount.setStatus('current')
ibmMvsTcpConnExceedBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnExceedBacklog.setStatus('current')
ibmMvsTcpConnCurrBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnCurrBacklog.setStatus('current')
ibmMvsTcpConnMaxBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnMaxBacklog.setStatus('current')
ibmMvsTcpConnWindowScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 64), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnWindowScale.setStatus('current')
ibmMvsTcpConnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 65), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnTimeStamp.setStatus('current')
ibmMvsTcpConnServerResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 1, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnServerResourceId.setStatus('current')
ibmMvsTcpConnsClosed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpConnsClosed.setStatus('current')
ibmMvsTcpPassiveDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpPassiveDrops.setStatus('current')
ibmMvsTcpTimeWaitReused = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpTimeWaitReused.setStatus('current')
ibmMvsTcpPredictAck = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpPredictAck.setStatus('current')
ibmMvsTcpPredictData = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpPredictData.setStatus('current')
ibmMvsTcpInDupAck = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInDupAck.setStatus('current')
ibmMvsTcpInBadSum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInBadSum.setStatus('current')
ibmMvsTcpInBadLen = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInBadLen.setStatus('current')
ibmMvsTcpInShort = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInShort.setStatus('current')
ibmMvsTcpInPawsDrop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInPawsDrop.setStatus('current')
ibmMvsTcpInAllBeforeWin = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInAllBeforeWin.setStatus('current')
ibmMvsTcpInSomeBeforeWin = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInSomeBeforeWin.setStatus('current')
ibmMvsTcpInAllAfterWin = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInAllAfterWin.setStatus('current')
ibmMvsTcpInSomeAfterWin = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInSomeAfterWin.setStatus('current')
ibmMvsTcpInOutOfOrder = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInOutOfOrder.setStatus('current')
ibmMvsTcpInAfterClose = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInAfterClose.setStatus('current')
ibmMvsTcpInWinProbes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInWinProbes.setStatus('current')
ibmMvsTcpInWinUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpInWinUpdates.setStatus('current')
ibmMvsTcpOutWinUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpOutWinUpdates.setStatus('current')
ibmMvsTcpOutDelayAcks = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpOutDelayAcks.setStatus('current')
ibmMvsTcpOutWinProbes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpOutWinProbes.setStatus('current')
ibmMvsTcpRxmtTimers = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpRxmtTimers.setStatus('current')
ibmMvsTcpRxmtDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpRxmtDrops.setStatus('current')
ibmMvsTcpPMTURxmts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpPMTURxmts.setStatus('current')
ibmMvsTcpPMTUErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpPMTUErrors.setStatus('current')
ibmMvsTcpProbeDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpProbeDrops.setStatus('current')
ibmMvsTcpKeepAliveProbes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpKeepAliveProbes.setStatus('current')
ibmMvsTcpKeepAliveDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpKeepAliveDrops.setStatus('current')
ibmMvsTcpFinwait2Drops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpFinwait2Drops.setStatus('current')
ibmTcpipMvsTcpListenerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31), )
if mibBuilder.loadTexts: ibmTcpipMvsTcpListenerTable.setStatus('current')
ibmTcpipMvsTcpListenerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsTcpListenerResourceId"))
if mibBuilder.loadTexts: ibmTcpipMvsTcpListenerEntry.setStatus('current')
ibmMvsTcpListenerResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ibmMvsTcpListenerResourceId.setStatus('current')
ibmMvsTcpListenerLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerLocalAddrType.setStatus('current')
ibmMvsTcpListenerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerLocalAddr.setStatus('current')
ibmMvsTcpListenerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerLocalPort.setStatus('current')
ibmMvsTcpListenerRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerRemoteAddrType.setStatus('current')
ibmMvsTcpListenerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerRemoteAddr.setStatus('current')
ibmMvsTcpListenerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerRemotePort.setStatus('current')
ibmMvsTcpListenerAcceptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerAcceptCount.setStatus('current')
ibmMvsTcpListenerExceedBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerExceedBacklog.setStatus('current')
ibmMvsTcpListenerCurrBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerCurrBacklog.setStatus('current')
ibmMvsTcpListenerMaxBacklog = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerMaxBacklog.setStatus('current')
ibmMvsTcpListenerResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 7, 31, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsTcpListenerResourceName.setStatus('current')
ibmTcpipMvsUdpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1), )
if mibBuilder.loadTexts: ibmTcpipMvsUdpTable.setStatus('current')
ibmTcpipMvsUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1), )
udpEntry.registerAugmentions(("IBMTCPIPMVS-MIB", "ibmTcpipMvsUdpEntry"))
ibmTcpipMvsUdpEntry.setIndexNames(*udpEntry.getIndexNames())
if mibBuilder.loadTexts: ibmTcpipMvsUdpEntry.setStatus('current')
ibmMvsUdpLastAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpLastAct.setStatus('current')
ibmMvsUdpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 2), TypeOfService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpTos.setStatus('obsolete')
ibmMvsUdpIpOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpIpOpts.setStatus('current')
ibmMvsUdpDgramIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpDgramIn.setStatus('current')
ibmMvsUdpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpBytesIn.setStatus('current')
ibmMvsUdpDgramOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpDgramOut.setStatus('current')
ibmMvsUdpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpBytesOut.setStatus('current')
ibmMvsUdpResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpResourceName.setStatus('current')
ibmMvsUdpSubtask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpSubtask.setStatus('current')
ibmMvsUdpResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpResourceId.setStatus('current')
ibmMvsUdpSockOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpSockOpt.setStatus('current')
ibmMvsUdpSendLim = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpSendLim.setStatus('current')
ibmMvsUdpRecvLim = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpRecvLim.setStatus('current')
ibmMvsUdpEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsUdpEntryState.setStatus('current')
ibmMvsUdpMcastTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 15), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpMcastTTL.setStatus('current')
ibmMvsUdpMcastLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpMcastLoopback.setStatus('current')
ibmMvsUdpMcastLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpMcastLinkAddr.setStatus('current')
ibmMvsUdpDSField = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpDSField.setStatus('current')
ibmTcpipMvsUdpMcastRecvTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2), )
if mibBuilder.loadTexts: ibmTcpipMvsUdpMcastRecvTable.setStatus('current')
ibmTcpipMvsUdpMcastRecvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvLocalAddress"), (0, "IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvLocalPort"), (0, "IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvGroup"), (0, "IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvLinkAddr"))
if mibBuilder.loadTexts: ibmTcpipMvsUdpMcastRecvEntry.setStatus('current')
ibmMvsUdpMcastRecvLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ibmMvsUdpMcastRecvLocalAddress.setStatus('current')
ibmMvsUdpMcastRecvLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmMvsUdpMcastRecvLocalPort.setStatus('current')
ibmMvsUdpMcastRecvGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: ibmMvsUdpMcastRecvGroup.setStatus('current')
ibmMvsUdpMcastRecvLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 8, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsUdpMcastRecvLinkAddr.setStatus('current')
ibmMvsIpInDevLayerCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpInDevLayerCalls.setStatus('current')
ibmMvsIpInUnpackErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpInUnpackErrors.setStatus('current')
ibmMvsIpInDiscardsMemory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpInDiscardsMemory.setStatus('current')
ibmMvsIpOutDiscardsDlcSynch = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpOutDiscardsDlcSynch.setStatus('current')
ibmMvsIpOutDiscardsDlcAsynch = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpOutDiscardsDlcAsynch.setStatus('current')
ibmMvsIpOutDiscardsMemory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsIpOutDiscardsMemory.setStatus('current')
osaexpChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1), )
if mibBuilder.loadTexts: osaexpChannelTable.setStatus('current')
osaexpChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: osaexpChannelEntry.setStatus('current')
ibmMvsOsaExpChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelNumber.setStatus('current')
ibmMvsOsaExpChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17))).clone(namedValues=NamedValues(("ose", 16), ("osd", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelType.setStatus('current')
ibmMvsOsaExpChannelSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("gigabit", 2), ("fastEthernet", 3), ("atmNative", 4), ("atmLanEmulation", 5), ("noPortsDefined", 6), ("oneLogicalEthPort", 7), ("oneLogicalTokenRingPort", 8), ("twoLogicalEthPorts", 9), ("twoLogicalTokenRingPorts", 10), ("logicalEthernetAndTokenRingPorts", 11), ("logicalTokenRingAndEthPorts", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelSubType.setStatus('current')
ibmMvsOsaExpChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nothingConfigured", 1), ("passthruMode", 2), ("snaMode", 3), ("passthruAndSna", 4), ("atmLePassthru", 5), ("atmLeSna", 6), ("atmLePassthruAndSna", 7), ("atmNative", 8), ("atmLe", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelMode.setStatus('current')
ibmMvsOsaExpChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("online", 1), ("notinst", 3), ("offline", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelState.setStatus('current')
ibmMvsOsaExpChannelShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelShared.setStatus('current')
ibmMvsOsaExpChannelNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelNumPorts.setStatus('current')
ibmMvsOsaExpChannelDeterNodeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelDeterNodeDesc.setStatus('current')
ibmMvsOsaExpChannelControlUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelControlUnitNumber.setStatus('current')
ibmMvsOsaExpChannelCodeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelCodeLevel.setStatus('current')
ibmMvsOsaExpChannelCurLparName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelCurLparName.setStatus('current')
ibmMvsOsaExpChannelCurLparNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelCurLparNum.setStatus('current')
ibmMvsOsaExpChannelManLparName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelManLparName.setStatus('current')
ibmMvsOsaExpChannelManLparNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelManLparNum.setStatus('current')
ibmMvsOsaExpChannelPCIBusUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelPCIBusUtil1Min.setStatus('current')
ibmMvsOsaExpChannelProcessorUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelProcessorUtil1Min.setStatus('current')
ibmMvsOsaExpChannelPCIBusUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelPCIBusUtil5Min.setStatus('current')
ibmMvsOsaExpChannelProcessorUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelProcessorUtil5Min.setStatus('current')
ibmMvsOsaExpChannelPCIBusUtilHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelPCIBusUtilHour.setStatus('current')
ibmMvsOsaExpChannelProcessorUtilHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpChannelProcessorUtilHour.setStatus('current')
osaexpPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2), )
if mibBuilder.loadTexts: osaexpPerfTable.setStatus('current')
osaexpPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfLparNum"))
if mibBuilder.loadTexts: osaexpPerfEntry.setStatus('current')
ibmMvsOsaExpPerfLparNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmMvsOsaExpPerfLparNum.setStatus('current')
ibmMvsOsaExpPerfProcessorUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfProcessorUtil1Min.setStatus('current')
ibmMvsOsaExpPerfInKbytesRate1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfInKbytesRate1Min.setStatus('current')
ibmMvsOsaExpPerfOutKbytesRate1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfOutKbytesRate1Min.setStatus('current')
ibmMvsOsaExpPerfProcessorUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfProcessorUtil5Min.setStatus('current')
ibmMvsOsaExpPerfInKbytesRate5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfInKbytesRate5Min.setStatus('current')
ibmMvsOsaExpPerfOutKbytesRate5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfOutKbytesRate5Min.setStatus('current')
ibmMvsOsaExpPerfProcessorUtilHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfProcessorUtilHour.setStatus('current')
ibmMvsOsaExpPerfInKbytesRateHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfInKbytesRateHour.setStatus('current')
ibmMvsOsaExpPerfOutKbytesRateHour = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpPerfOutKbytesRateHour.setStatus('current')
osaexpEthPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3), )
if mibBuilder.loadTexts: osaexpEthPortTable.setStatus('current')
osaexpEthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: osaexpEthPortEntry.setStatus('current')
ibmMvsOsaExpEthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortNumber.setStatus('current')
ibmMvsOsaExpEthPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65, 81))).clone(namedValues=NamedValues(("gigabitEthernet", 65), ("fastEthernet", 81)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortType.setStatus('current')
ibmMvsOsaExpEthPortHardwareState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("linkFailure", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortHardwareState.setStatus('current')
ibmMvsOsaExpEthPortServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonserviceMode", 0), ("serviceMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortServiceMode.setStatus('current')
ibmMvsOsaExpEthPortDisabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortDisabledStatus.setStatus('current')
ibmMvsOsaExpEthPortConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortConfigName.setStatus('current')
ibmMvsOsaExpEthPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("autoNegotiate", 0), ("halfDuplex10Mb", 1), ("fullDuplex10Mb", 2), ("halfDuplex100Mb", 3), ("fullDuplex100Mb", 4), ("fullDuplex1000Mb", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortConfigSpeed.setStatus('current')
ibmMvsOsaExpEthPortActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("unknown", 0), ("halfDuplex10Mb", 1), ("fullDuplex10Mb", 2), ("halfDuplex100Mb", 3), ("fullDuplex100Mb", 4), ("fullDuplex1000Mb", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortActiveSpeed.setStatus('current')
ibmMvsOsaExpEthPortMacAddrActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortMacAddrActive.setStatus('current')
ibmMvsOsaExpEthPortMacAddrBurntIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortMacAddrBurntIn.setStatus('current')
ibmMvsOsaExpEthPortUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortUserData.setStatus('current')
ibmMvsOsaExpEthPortOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortOutPackets.setStatus('current')
ibmMvsOsaExpEthPortInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortInPackets.setStatus('current')
ibmMvsOsaExpEthPortInGroupFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortInGroupFrames.setStatus('current')
ibmMvsOsaExpEthPortInBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortInBroadcastFrames.setStatus('current')
ibmMvsOsaExpEthPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortName.setStatus('current')
ibmMvsOsaExpEthPortInUnknownIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortInUnknownIPFrames.setStatus('current')
ibmMvsOsaExpEthPortGroupMacAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthPortGroupMacAddrs.setStatus('current')
osaexpEthSnaTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4), )
if mibBuilder.loadTexts: osaexpEthSnaTable.setStatus('current')
osaexpEthSnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: osaexpEthSnaEntry.setStatus('current')
ibmMvsOsaExpEthSnaInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthSnaInactTimer.setStatus('current')
ibmMvsOsaExpEthSnaRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthSnaRespTimer.setStatus('current')
ibmMvsOsaExpEthSnaAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2040))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthSnaAckTimer.setStatus('current')
ibmMvsOsaExpEthSnaMaxIFramesBeforeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthSnaMaxIFramesBeforeAck.setStatus('current')
ibmMvsOsaExpEthSnaMaxTransmitWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsOsaExpEthSnaMaxTransmitWindow.setStatus('current')
ibmMvsDVIPATable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1), )
if mibBuilder.loadTexts: ibmMvsDVIPATable.setStatus('current')
ibmMvsDVIPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddr"))
if mibBuilder.loadTexts: ibmMvsDVIPAEntry.setStatus('current')
ibmMvsDVIPAIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPAIpAddrType.setStatus('current')
ibmMvsDVIPAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPAIpAddr.setStatus('current')
ibmMvsDVIPAMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAMaskType.setStatus('current')
ibmMvsDVIPAMaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAMaskAddr.setStatus('current')
ibmMvsDVIPAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("backup", 3), ("moving", 4), ("quiescing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAStatus.setStatus('current')
ibmMvsDVIPAOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("backup", 2), ("define", 3), ("rangeBind", 4), ("rangeIoctl", 5), ("target", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAOrigin.setStatus('current')
ibmMvsDVIPARank = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPARank.setStatus('current')
ibmMvsDVIPADistributeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("distributor", 2), ("target", 3), ("disgtributorAndTarget", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPADistributeStatus.setStatus('current')
ibmMvsDVIPAMoveable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("immediate", 2), ("whenIdle", 3), ("nonDisruptive", 4), ("disruptive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAMoveable.setStatus('current')
ibmMvsDVIPAServMgrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAServMgrEnabled.setStatus('current')
ibmMvsDVIPARangeConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2), )
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfTable.setStatus('current')
ibmMvsDVIPARangeConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfIpAddr"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfMaskType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfMaskAddr"))
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfEntry.setStatus('current')
ibmMvsDVIPARangeConfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfIpAddrType.setStatus('current')
ibmMvsDVIPARangeConfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfIpAddr.setStatus('current')
ibmMvsDVIPARangeConfMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 3), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfMaskType.setStatus('current')
ibmMvsDVIPARangeConfMaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfMaskAddr.setStatus('current')
ibmMvsDVIPARangeConfMoveable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonDisruptive", 1), ("disruptive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfMoveable.setStatus('current')
ibmMvsDVIPARangeConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ibmMvsDVIPARangeConfStatus.setStatus('current')
ibmMvsDVIPADistConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3), )
if mibBuilder.loadTexts: ibmMvsDVIPADistConfTable.setStatus('current')
ibmMvsDVIPADistConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfIpAddr"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfPort"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfTargetDynXcfIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfTargetDynXcfIpAddr"))
if mibBuilder.loadTexts: ibmMvsDVIPADistConfEntry.setStatus('current')
ibmMvsDVIPADistConfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPADistConfIpAddrType.setStatus('current')
ibmMvsDVIPADistConfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPADistConfIpAddr.setStatus('current')
ibmMvsDVIPADistConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmMvsDVIPADistConfPort.setStatus('current')
ibmMvsDVIPADistConfTargetDynXcfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 4), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPADistConfTargetDynXcfIpAddrType.setStatus('current')
ibmMvsDVIPADistConfTargetDynXcfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPADistConfTargetDynXcfIpAddr.setStatus('current')
ibmMvsDVIPADistConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ibmMvsDVIPADistConfStatus.setStatus('current')
ibmMvsDVIPAConnRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4), )
if mibBuilder.loadTexts: ibmMvsDVIPAConnRoutingTable.setStatus('current')
ibmMvsDVIPAConnRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddr"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnPort"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnRemIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnRemIpAddr"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnRemPort"))
if mibBuilder.loadTexts: ibmMvsDVIPAConnRoutingEntry.setStatus('current')
ibmMvsDVIPAConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmMvsDVIPAConnPort.setStatus('current')
ibmMvsDVIPAConnRemIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPAConnRemIpAddrType.setStatus('current')
ibmMvsDVIPAConnRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPAConnRemIpAddr.setStatus('current')
ibmMvsDVIPAConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmMvsDVIPAConnRemPort.setStatus('current')
ibmMvsDVIPAConnDynXcfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAConnDynXcfIpAddrType.setStatus('current')
ibmMvsDVIPAConnDynXcfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAConnDynXcfIpAddr.setStatus('current')
ibmMvsDVIPAConnPolicyRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAConnPolicyRuleName.setStatus('current')
ibmMvsDVIPAConnPolicyActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 4, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAConnPolicyActionName.setStatus('current')
ibmMvsDVIPADistPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5), )
if mibBuilder.loadTexts: ibmMvsDVIPADistPortTable.setStatus('current')
ibmMvsDVIPADistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1), ).setIndexNames((0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPAIpAddr"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortPort"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortTargetDynXcfIpAddrType"), (0, "IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortTargetDynXcfIpAddr"))
if mibBuilder.loadTexts: ibmMvsDVIPADistPortEntry.setStatus('current')
ibmMvsDVIPADistPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ibmMvsDVIPADistPortPort.setStatus('current')
ibmMvsDVIPADistPortTargetDynXcfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ibmMvsDVIPADistPortTargetDynXcfIpAddrType.setStatus('current')
ibmMvsDVIPADistPortTargetDynXcfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: ibmMvsDVIPADistPortTargetDynXcfIpAddr.setStatus('current')
ibmMvsDVIPADistPortReadyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPADistPortReadyCount.setStatus('current')
ibmMvsDVIPADistPortTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPADistPortTotalConn.setStatus('current')
ibmMvsDVIPADistPortWlmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPADistPortWlmWeight.setStatus('current')
ibmMvsDVIPAServMgrMulticastIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAServMgrMulticastIpAddrType.setStatus('current')
ibmMvsDVIPAServMgrMulticastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 7), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAServMgrMulticastIpAddr.setStatus('current')
ibmMvsDVIPAServMgrPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAServMgrPort.setStatus('current')
ibmMvsDVIPAServMgrPasswordSpecified = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmMvsDVIPAServMgrPasswordSpecified.setStatus('current')
ibmMvsDVIPATrapControl = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 2, 11, 10), Bits().clone(namedValues=NamedValues(("dvipaStatusChange", 0), ("dvipaRemoved", 1), ("targetAdded", 2), ("targetRemoved", 3), ("targetServerStarted", 4), ("targetServerEnded", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmMvsDVIPATrapControl.setStatus('current')
ibmMvsAtmOsasfAtmPvcCreate = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 1)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"))
if mibBuilder.loadTexts: ibmMvsAtmOsasfAtmPvcCreate.setStatus('current')
ibmMvsAtmOsasfAtmPvcDelete = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 2)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"))
if mibBuilder.loadTexts: ibmMvsAtmOsasfAtmPvcDelete.setStatus('current')
ibmMvsDVIPAStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 3)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPAStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAOrigin"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARank"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAMoveable"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrEnabled"))
if mibBuilder.loadTexts: ibmMvsDVIPAStatusChange.setStatus('current')
ibmMvsDVIPARemoved = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 4)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPAStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAOrigin"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARank"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAMoveable"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrEnabled"))
if mibBuilder.loadTexts: ibmMvsDVIPARemoved.setStatus('current')
ibmMvsDVIPATargetAdded = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 5)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfStatus"))
if mibBuilder.loadTexts: ibmMvsDVIPATargetAdded.setStatus('current')
ibmMvsDVIPATargetRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 6)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfStatus"))
if mibBuilder.loadTexts: ibmMvsDVIPATargetRemoved.setStatus('current')
ibmMvsDVIPATargetServerStarted = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 7)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortReadyCount"))
if mibBuilder.loadTexts: ibmMvsDVIPATargetServerStarted.setStatus('current')
ibmMvsDVIPATargetServerEnded = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 8)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortReadyCount"))
if mibBuilder.loadTexts: ibmMvsDVIPATargetServerEnded.setStatus('current')
ibmMvsTcpipSubagentColdStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 0, 9))
if mibBuilder.loadTexts: ibmMvsTcpipSubagentColdStart.setStatus('current')
ibmTCPIPmvsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 1))
ibmTCPIPmvsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2))
ibmTCPIPmvsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 1, 1)).setObjects(("IBMTCPIPMVS-MIB", "ibmTCPIPmvsPingGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsSystemGroup7"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsTcpGroup6"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsUdpGroup3"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsInterfacesGroup5"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsPortGroup2"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsRoutingGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsIpGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsSystemNotificationGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsAtmSupportGroup4"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsAtmNotificationGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsAtmLeGroup2"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsOsaExpGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsDVIPAGroup"), ("IBMTCPIPMVS-MIB", "ibmTCPIPmvsDVIPANotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsCompliance = ibmTCPIPmvsCompliance.setStatus('current')
ibmTCPIPmvsPingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 1)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsRPingResponseTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsPingGroup = ibmTCPIPmvsPingGroup.setStatus('current')
ibmTCPIPmvsRoutingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 11)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsGatewayMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsGatewayMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsGatewayRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsGatewayVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsGatewayVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsGatewayDelayAcks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsRoutingGroup = ibmTCPIPmvsRoutingGroup.setStatus('current')
ibmTCPIPmvsPortGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 26)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsPortNumberLow"), ("IBMTCPIPMVS-MIB", "ibmMvsPortNumberHigh"), ("IBMTCPIPMVS-MIB", "ibmMvsPortProtocol"), ("IBMTCPIPMVS-MIB", "ibmMvsPortProcName"), ("IBMTCPIPMVS-MIB", "ibmMvsPortAutoLoggable"), ("IBMTCPIPMVS-MIB", "ibmMvsPortDelayAcks"), ("IBMTCPIPMVS-MIB", "ibmMvsPortOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsPortSharePort"), ("IBMTCPIPMVS-MIB", "ibmMvsPortBindIpAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsPortSAFResource"), ("IBMTCPIPMVS-MIB", "ibmMvsPortReuse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsPortGroup2 = ibmTCPIPmvsPortGroup2.setStatus('current')
ibmTCPIPmvsAtmSupportGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 27)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelSubType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelHwModel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelShared"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDeterNodeDesc"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelControlUnitNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCodeLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelFlashLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortHardwareState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMediaType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortCodeLoadStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrBurntIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrActive"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMaxPcmConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortPcmName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5InPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5OutPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortIpAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBestEffort"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVpi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVci"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdMaxAal5PduSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdMaxAal5PduSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmSupportGroup4 = ibmTCPIPmvsAtmSupportGroup4.setStatus('current')
ibmTCPIPmvsUdpGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 29)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsUdpLastAct"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpIpOpts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpEntryState"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastTTL"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastLoopback"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastLinkAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDSField"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvLinkAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsUdpGroup3 = ibmTCPIPmvsUdpGroup3.setStatus('current')
ibmTCPIPmvsAtmLeGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 30)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcTi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcT1"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcT2"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaleMaxStations"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxSaps"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaleMaxIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeCrsGroupAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeUserData"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeClientEnableState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeBestEffortPeakRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxLECConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrEnableLoadBalancing"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrLoadBalancing"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrSessionDelay"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLanType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigMaxDataFrameSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLanName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLesAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxUnknownFrameCount"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxUnknownFrameTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecVccTimeoutPeriod"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxRetryCount"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecAgingTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecForwardDelayTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecExpectedArpResponseTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecFlushTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecPathSwitchingDelay"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLocalSegmentID"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendAvgRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendPeakRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConnectionCompleteTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecPortName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecPrimaryAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecID"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecInterfaceState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLastFailureRespCode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLastFailureState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecProtocol"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecTopologyChange"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigServerAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigSource"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualLanType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualMaxDataFrameSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualLanName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecProxyClient"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRequestsOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRequestsIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRepliesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRepliesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlFramesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlFramesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecSvcFailures"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmLeGroup2 = ibmTCPIPmvsAtmLeGroup2.setStatus('current')
ibmTCPIPmvsTcpGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 32)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTargetAppl"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClientUserId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLogMode"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnProto"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDupacks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClusterConnFlag"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInSegs"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutSegs"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDSField"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnAcceptCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnExceedBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCurrBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnWindowScale"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTimeStamp"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnServerResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnsClosed"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpPassiveDrops"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpTimeWaitReused"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpPredictAck"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpPredictData"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInDupAck"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInBadSum"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInBadLen"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInShort"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInPawsDrop"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInAllBeforeWin"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInSomeBeforeWin"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInAllAfterWin"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInSomeAfterWin"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInOutOfOrder"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInAfterClose"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInWinProbes"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpInWinUpdates"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpOutWinUpdates"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpOutDelayAcks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpOutWinProbes"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRxmtTimers"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRxmtDrops"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpPMTURxmts"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpPMTUErrors"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpProbeDrops"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveProbes"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveDrops"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpFinwait2Drops"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerLocalAddrType"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerLocalAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerLocalPort"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerRemoteAddrType"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerRemoteAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerRemotePort"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerAcceptCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerExceedBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerCurrBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerMaxBacklog"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpListenerResourceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup6 = ibmTCPIPmvsTcpGroup6.setStatus('current')
ibmTCPIPmvsIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 33)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsIpInDevLayerCalls"), ("IBMTCPIPMVS-MIB", "ibmMvsIpInUnpackErrors"), ("IBMTCPIPMVS-MIB", "ibmMvsIpInDiscardsMemory"), ("IBMTCPIPMVS-MIB", "ibmMvsIpOutDiscardsDlcSynch"), ("IBMTCPIPMVS-MIB", "ibmMvsIpOutDiscardsDlcAsynch"), ("IBMTCPIPMVS-MIB", "ibmMvsIpOutDiscardsMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsIpGroup = ibmTCPIPmvsIpGroup.setStatus('current')
ibmTCPIPmvsSystemGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 34)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpMaxReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsPathMtuDscEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMultipathType"), ("IBMTCPIPMVS-MIB", "ibmMvsIpForwarding"), ("IBMTCPIPMVS-MIB", "ibmMvsDevRetryDuration"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpFinwait2Time"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpTimeStamp"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipSubagentVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup7 = ibmTCPIPmvsSystemGroup7.setStatus('current')
ibmTCPIPmvsOsaExpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 35)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelType"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelSubType"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelMode"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelState"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelShared"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelNumPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelDeterNodeDesc"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelControlUnitNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelCodeLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelCurLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelCurLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelManLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelManLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelPCIBusUtil1Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelProcessorUtil1Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelPCIBusUtil5Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelProcessorUtil5Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelPCIBusUtilHour"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpChannelProcessorUtilHour"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfProcessorUtil1Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfInKbytesRate1Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfOutKbytesRate1Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfProcessorUtil5Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfInKbytesRate5Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfOutKbytesRate5Min"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfProcessorUtilHour"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfInKbytesRateHour"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpPerfOutKbytesRateHour"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortType"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortHardwareState"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortServiceMode"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortDisabledStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortConfigName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortConfigSpeed"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortActiveSpeed"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortMacAddrActive"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortMacAddrBurntIn"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortUserData"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortOutPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortInPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortInGroupFrames"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortInBroadcastFrames"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortInUnknownIPFrames"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthPortGroupMacAddrs"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthSnaInactTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthSnaRespTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthSnaAckTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthSnaMaxIFramesBeforeAck"), ("IBMTCPIPMVS-MIB", "ibmMvsOsaExpEthSnaMaxTransmitWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsOsaExpGroup = ibmTCPIPmvsOsaExpGroup.setStatus('current')
ibmTCPIPmvsInterfacesGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 36)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDeviceType"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceBaseNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIoBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceAutoRestart"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceNetmanEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceHostClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWorkstationClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIncomingSvcEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceRouterStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceActualRouterStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceConfigPackingMode"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceActualPackingMode"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkType"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkDeviceIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkAdapterAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrCanonical"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrBcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkChecksumEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkArpSupport"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMacAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcastRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsInterfacesGroup5 = ibmTCPIPmvsInterfacesGroup5.setStatus('current')
ibmTCPIPmvsDVIPAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 37)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPAMaskType"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAMaskAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAOrigin"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARank"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistributeStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAMoveable"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfMoveable"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARangeConfStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistConfStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnDynXcfIpAddrType"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnDynXcfIpAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnPolicyRuleName"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAConnPolicyActionName"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortReadyCount"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortTotalConn"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPADistPortWlmWeight"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrMulticastIpAddrType"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrMulticastIpAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrPort"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPAServMgrPasswordSpecified"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPATrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsDVIPAGroup = ibmTCPIPmvsDVIPAGroup.setStatus('current')
ibmTCPIPmvsDVIPANotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 38)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDVIPAStatusChange"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPARemoved"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPATargetAdded"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPATargetRemoved"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPATargetServerStarted"), ("IBMTCPIPMVS-MIB", "ibmMvsDVIPATargetServerEnded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsDVIPANotificationGroup = ibmTCPIPmvsDVIPANotificationGroup.setStatus('current')
ibmTCPIPmvsSystemNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 39)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpipSubagentColdStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemNotificationGroup = ibmTCPIPmvsSystemNotificationGroup.setStatus('current')
ibmTCPIPmvsAtmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 7)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfAtmPvcCreate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfAtmPvcDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmNotificationGroup = ibmTCPIPmvsAtmNotificationGroup.setStatus('current')
ibmTCPIPmvsObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 6)).setObjects(("IBMTCPIPMVS-MIB", "ibmSNMPRemPing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsObsoleteGroup = ibmTCPIPmvsObsoleteGroup.setStatus('obsolete')
ibmTCPIPmvsTcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 3)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnActiveOpen"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendWindowSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendWindowAck"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnPendTcpRecv"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSig"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSel"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBackoffCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpDet"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpPol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup = ibmTCPIPmvsTcpGroup.setStatus('obsolete')
ibmTCPIPmvsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 2)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup = ibmTCPIPmvsSystemGroup.setStatus('obsolete')
ibmTCPIPmvsSystemGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 13)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup2 = ibmTCPIPmvsSystemGroup2.setStatus('obsolete')
ibmTCPIPmvsAtmSupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 5)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelSubType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelHwModel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelShared"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDeterNodeDesc"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelControlUnitNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCodeLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelEcLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelFlashLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelVtamId"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortHardwareState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMediaType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortCodeLoadStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrBurntIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrActive"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMaxPcmConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortPcmName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBestEffort"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVpi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVci"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdMaxAal5PduSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdMaxAal5PduSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmSupportGroup = ibmTCPIPmvsAtmSupportGroup.setStatus('obsolete')
ibmTCPIPmvsInterfacesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 8)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDeviceType"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceBaseNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIoBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceAutoRestart"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceNetmanEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceHostClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWorkstationClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIncomingSvcEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkType"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkDeviceIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkAdapterAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrCanonical"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrBcast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsInterfacesGroup = ibmTCPIPmvsInterfacesGroup.setStatus('obsolete')
ibmTCPIPmvsUdpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 4)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsUdpLastAct"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpIpOpts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpEntryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsUdpGroup = ibmTCPIPmvsUdpGroup.setStatus('obsolete')
ibmTCPIPmvsSystemGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 15)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpMaxReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsMultipathEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup3 = ibmTCPIPmvsSystemGroup3.setStatus('obsolete')
ibmTCPIPmvsInterfacesGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 16)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDeviceType"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceBaseNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIoBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceAutoRestart"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceNetmanEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceHostClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWorkstationClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIncomingSvcEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkType"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkDeviceIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkAdapterAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrCanonical"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrBcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcastRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsInterfacesGroup2 = ibmTCPIPmvsInterfacesGroup2.setStatus('obsolete')
ibmTCPIPmvsTcpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 12)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnActiveOpen"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnPendTcpRecv"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSig"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSel"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBackoffCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpDet"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpPol"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTargetAppl"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClientUserId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLogMode"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnProto"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDupacks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptMaxSegmentSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup2 = ibmTCPIPmvsTcpGroup2.setStatus('obsolete')
ibmTCPIPmvsSystemGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 18)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpMaxReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsMultipathEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsPathMtuDscEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup4 = ibmTCPIPmvsSystemGroup4.setStatus('obsolete')
ibmTCPIPmvsTcpGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 20)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnActiveOpen"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnPendTcpRecv"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSig"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSel"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBackoffCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpDet"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpPol"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTargetAppl"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClientUserId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLogMode"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnProto"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDupacks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClusterConnFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup3 = ibmTCPIPmvsTcpGroup3.setStatus('obsolete')
ibmTCPIPmvsAtmSupportGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 14)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelSubType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelHwModel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelShared"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDeterNodeDesc"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelControlUnitNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCodeLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelEcLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelFlashLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelVtamId"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortHardwareState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMediaType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortCodeLoadStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrBurntIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrActive"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMaxPcmConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortPcmName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5InPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5OutPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortIpAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBestEffort"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVpi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVci"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdMaxAal5PduSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdMaxAal5PduSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmSupportGroup2 = ibmTCPIPmvsAtmSupportGroup2.setStatus('obsolete')
ibmTCPIPmvsInterfacesGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 19)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDeviceType"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceBaseNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIoBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceAutoRestart"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceNetmanEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceHostClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWorkstationClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIncomingSvcEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceRouterStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkType"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkDeviceIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkAdapterAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrCanonical"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrBcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkChecksumEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcastRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsInterfacesGroup3 = ibmTCPIPmvsInterfacesGroup3.setStatus('obsolete')
ibmTCPIPmvsPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 10)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsPortNumberLow"), ("IBMTCPIPMVS-MIB", "ibmMvsPortNumberHigh"), ("IBMTCPIPMVS-MIB", "ibmMvsPortProtocol"), ("IBMTCPIPMVS-MIB", "ibmMvsPortProcName"), ("IBMTCPIPMVS-MIB", "ibmMvsPortAutoLoggable"), ("IBMTCPIPMVS-MIB", "ibmMvsPortDelayAcks"), ("IBMTCPIPMVS-MIB", "ibmMvsPortOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsPortSharePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsPortGroup = ibmTCPIPmvsPortGroup.setStatus('obsolete')
ibmTCPIPmvsAtmSupportGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 24)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelSubType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelHwModel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelShared"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelNumPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDeterNodeDesc"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelControlUnitNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCodeLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelEcLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelCurLparNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelManParnNum"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelDate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfChannelFlashLevel"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortHardwareState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMediaType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortUniVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixPrefix"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortNetPrefixStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortCodeLoadStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrBurntIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMacAddrActive"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortMaxPcmConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortPcmName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5InPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortAAL5OutPackets"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPortIpAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBestEffort"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdPeakCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdsustainCellRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdCellBurstSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVpi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcVci"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcFwdMaxAal5PduSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmOsasfPvcBwdMaxAal5PduSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmSupportGroup3 = ibmTCPIPmvsAtmSupportGroup3.setStatus('obsolete')
ibmTCPIPmvsTcpGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 22)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSig"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSel"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpDet"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpPol"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTargetAppl"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClientUserId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLogMode"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnProto"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDupacks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClusterConnFlag"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInSegs"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutSegs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup4 = ibmTCPIPmvsTcpGroup4.setStatus('obsolete')
ibmTCPIPmvsUdpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 17)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsUdpLastAct"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpTos"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpIpOpts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpDgramOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvLim"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpEntryState"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastTTL"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastLoopback"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastLinkAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpMcastRecvLinkAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsUdpGroup2 = ibmTCPIPmvsUdpGroup2.setStatus('obsolete')
ibmTCPIPmvsAtmLeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 9)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcTi"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcT1"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeLlcT2"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaleMaxStations"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxSaps"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaleMaxIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeCrsGroupAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeUserData"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeClientEnableState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeBestEffortPeakRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeMaxLECConnections"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrEnableLoadBalancing"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrLoadBalancing"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmSnaLeTrSessionDelay"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigMode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLanType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigMaxDataFrameSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLanName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigLesAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxUnknownFrameCount"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxUnknownFrameTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecVccTimeoutPeriod"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMaxRetryCount"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecAgingTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecForwardDelayTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecExpectedArpResponseTime"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecFlushTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecPathSwitchingDelay"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLocalSegmentID"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendAvgRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendPeakRate"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConnectionCompleteTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecPrimaryAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecID"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecInterfaceState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLastFailureRespCode"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecLastFailureState"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecProtocol"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecTopologyChange"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigServerAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigSource"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualLanType"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualMaxDataFrameSize"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecActualLanName"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecAtmAddress"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecProxyClient"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRequestsOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRequestsIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRepliesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecArpRepliesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlFramesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlFramesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecSvcFailures"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecConfigDirectVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDirectVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecControlDistributeVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastSendVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdInterface"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdVPI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMulticastFwdVCI"), ("IBMTCPIPMVS-MIB", "ibmMvsAtmLecMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsAtmLeGroup = ibmTCPIPmvsAtmLeGroup.setStatus('obsolete')
ibmTCPIPmvsSystemGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 21)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpMaxReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsPathMtuDscEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMultipathType"), ("IBMTCPIPMVS-MIB", "ibmMvsIpForwarding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup5 = ibmTCPIPmvsSystemGroup5.setStatus('obsolete')
ibmTCPIPmvsTcpGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 28)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLastActivity"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesIn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnBytesOut"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptions"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndUna"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutgoingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInBuffered"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnUsrRcvNxt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingPush"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingUrg"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnIncomingWinSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnMaxSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnReXmtCount"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnCongestionWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSSThresh"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripTime"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRoundTripVariance"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitSndSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInitRcvSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSendMSS"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl1"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWl2"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSndWnd"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRcvBufSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSubtask"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnResourceId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnSockOpt"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSig"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpSel"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnRttSeq"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpDet"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTcpPol"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnTargetAppl"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClientUserId"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnLogMode"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnProto"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDupacks"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOptMaxSegmentSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnClusterConnFlag"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnInSegs"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnOutSegs"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpConnDSField"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsTcpGroup5 = ibmTCPIPmvsTcpGroup5.setStatus('obsolete')
ibmTCPIPmvsSystemGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 31)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsSubagentCacheTime"), ("IBMTCPIPMVS-MIB", "ibmMvsIgnoreRedirect"), ("IBMTCPIPMVS-MIB", "ibmMvsArpCacheTimeout"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpKeepAliveTimer"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpChecksum"), ("IBMTCPIPMVS-MIB", "ibmMvsIplDateAndTime"), ("IBMTCPIPMVS-MIB", "ibmMvsNoUdpQueueLimit"), ("IBMTCPIPMVS-MIB", "ibmMvsSoMaxConn"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipAsid"), ("IBMTCPIPMVS-MIB", "ibmMvsSourceVipaEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfSysplexName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfHostName"), ("IBMTCPIPMVS-MIB", "ibmMvsOsasfProductVersion"), ("IBMTCPIPMVS-MIB", "ibmMvsPrimaryInterfaceIfIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsIpMaxReassemblySize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRestrictLowPorts"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpSendBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsUdpRecvBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpipStatisticsEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsFirewallEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMaximumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsMinimumRetransmitTime"), ("IBMTCPIPMVS-MIB", "ibmMvsRoundTripGain"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceMultiplier"), ("IBMTCPIPMVS-MIB", "ibmMvsVarianceGain"), ("IBMTCPIPMVS-MIB", "ibmMvsSendGarbageEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsTcpMaxReceiveBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsPathMtuDscEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsMultipathType"), ("IBMTCPIPMVS-MIB", "ibmMvsIpForwarding"), ("IBMTCPIPMVS-MIB", "ibmMvsDevRetryDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsSystemGroup6 = ibmTCPIPmvsSystemGroup6.setStatus('obsolete')
ibmTCPIPmvsInterfacesGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 19, 2, 3, 2, 25)).setObjects(("IBMTCPIPMVS-MIB", "ibmMvsDeviceType"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceBaseNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIoBufferSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceAutoRestart"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceNetmanEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceHostClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWorkstationClawName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceReadSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteBuffers"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceWriteSize"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceProcname"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceIncomingSvcEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceLuName"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceRouterStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsDeviceActualRouterStatus"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkType"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkDeviceIndex"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkAdapterAddr"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkNumber"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrCanonical"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkIbmtrBcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcast"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkChecksumEnabled"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkArpSupport"), ("IBMTCPIPMVS-MIB", "ibmMvsLinkMcastRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmTCPIPmvsInterfacesGroup4 = ibmTCPIPmvsInterfacesGroup4.setStatus('obsolete')
mibBuilder.exportSymbols("IBMTCPIPMVS-MIB", ibmMvsDeviceIoBufferSize=ibmMvsDeviceIoBufferSize, osasfPvcEntry=osasfPvcEntry, ibmMvsTcpConnClientUserId=ibmMvsTcpConnClientUserId, ibmMvsTcpPredictAck=ibmMvsTcpPredictAck, ibmMvsUdpEntryState=ibmMvsUdpEntryState, ibmMvsDVIPARank=ibmMvsDVIPARank, ibmMvsDVIPAServMgrEnabled=ibmMvsDVIPAServMgrEnabled, ibmMvsAtmOsasfChannelManParnNum=ibmMvsAtmOsasfChannelManParnNum, ibmMvsAtmOsasfChannelMode=ibmMvsAtmOsasfChannelMode, ibmMvsUdpBytesOut=ibmMvsUdpBytesOut, ibmMvsOsaExpChannelType=ibmMvsOsaExpChannelType, ibmMvsDVIPATrapControl=ibmMvsDVIPATrapControl, ibmMvsRPingHostAddress=ibmMvsRPingHostAddress, ibmTcpipMvsPortEntry=ibmTcpipMvsPortEntry, ibmMvsOsaExpChannelMode=ibmMvsOsaExpChannelMode, osaexpEthSnaTable=osaexpEthSnaTable, osaexpEthSnaEntry=osaexpEthSnaEntry, ibmMvsOsaExpPerfInKbytesRate1Min=ibmMvsOsaExpPerfInKbytesRate1Min, ibmMvsDVIPADistConfPort=ibmMvsDVIPADistConfPort, ibmMvsDVIPADistributeStatus=ibmMvsDVIPADistributeStatus, ibmMvsMaximumRetransmitTime=ibmMvsMaximumRetransmitTime, ibmMvsAtmOsasfPortIpAddress=ibmMvsAtmOsasfPortIpAddress, ibmMvsTcpListenerAcceptCount=ibmMvsTcpListenerAcceptCount, ibmTCPIPmvsInterfacesGroup3=ibmTCPIPmvsInterfacesGroup3, ibmMvsAtmLecPrimaryAtmAddress=ibmMvsAtmLecPrimaryAtmAddress, ibmMvsAtmLecMulticastSendType=ibmMvsAtmLecMulticastSendType, ibmMvsAtmOsasfPortNetPrefix=ibmMvsAtmOsasfPortNetPrefix, ibmMvsTcpConnAcceptCount=ibmMvsTcpConnAcceptCount, ibmTCPIPmvsAtmSupportGroup4=ibmTCPIPmvsAtmSupportGroup4, ibmTcpipMvsInterfaceGroup=ibmTcpipMvsInterfaceGroup, ibmTcpipMvsPortTable=ibmTcpipMvsPortTable, ibmTCPIPmvsTcpGroup6=ibmTCPIPmvsTcpGroup6, ibmMvsOsaExpChannelNumber=ibmMvsOsaExpChannelNumber, ibmMvsLinkAdapterAddr=ibmMvsLinkAdapterAddr, ibmMvsOsaExpChannelPCIBusUtil5Min=ibmMvsOsaExpChannelPCIBusUtil5Min, ibmMvsAtmLecControlFramesIn=ibmMvsAtmLecControlFramesIn, ibmMvsDeviceConfigPackingMode=ibmMvsDeviceConfigPackingMode, ibmMvsUdpTos=ibmMvsUdpTos, ibmMvsAtmLecConfigServerAtmAddress=ibmMvsAtmLecConfigServerAtmAddress, ibmMvsAtmOsasfChannelShared=ibmMvsAtmOsasfChannelShared, ibmMvsAtmSnaLeBestEffortPeakRate=ibmMvsAtmSnaLeBestEffortPeakRate, ibmTCPIPmvsIpGroup=ibmTCPIPmvsIpGroup, ibmMvsTcpInBadSum=ibmMvsTcpInBadSum, ibmMvsTcpRxmtDrops=ibmMvsTcpRxmtDrops, ibmTcpipMvsUdpEntry=ibmTcpipMvsUdpEntry, ibmMvsLinkChecksumEnabled=ibmMvsLinkChecksumEnabled, ibmMvsAtmOsasfPvcBwdCellBurstSize=ibmMvsAtmOsasfPvcBwdCellBurstSize, ibmMvsTcpConnSndWl2=ibmMvsTcpConnSndWl2, ibmTcpipMvsDeviceTable=ibmTcpipMvsDeviceTable, ibmMvsOsaExpEthSnaMaxTransmitWindow=ibmMvsOsaExpEthSnaMaxTransmitWindow, ibmMvsOsaExpChannelProcessorUtilHour=ibmMvsOsaExpChannelProcessorUtilHour, ibmMvsDVIPAStatus=ibmMvsDVIPAStatus, ibmTcpipMvsLinkMcastEntry=ibmTcpipMvsLinkMcastEntry, ibmMvsOsaExpEthPortNumber=ibmMvsOsaExpEthPortNumber, ibmTCPIPmvsMIB=ibmTCPIPmvsMIB, ibmMvsUdpResourceName=ibmMvsUdpResourceName, ibmMvsAtmLecControlDirectVPI=ibmMvsAtmLecControlDirectVPI, ibmTCPIPmvsTcpGroup4=ibmTCPIPmvsTcpGroup4, ibmMvsDVIPADistPortTargetDynXcfIpAddrType=ibmMvsDVIPADistPortTargetDynXcfIpAddrType, ibmMvsAtmOsasfAtmPvcDelete=ibmMvsAtmOsasfAtmPvcDelete, ibmMvsDVIPARangeConfIpAddr=ibmMvsDVIPARangeConfIpAddr, ibmMvsUdpDgramOut=ibmMvsUdpDgramOut, ibmTcpipMvsUdpMcastRecvEntry=ibmTcpipMvsUdpMcastRecvEntry, ibmTcpipMvsLinkEntry=ibmTcpipMvsLinkEntry, ibmMvsSubagentCacheTime=ibmMvsSubagentCacheTime, ibmTCPIPmvsSystemGroup=ibmTCPIPmvsSystemGroup, ibmMvsUdpMcastLinkAddr=ibmMvsUdpMcastLinkAddr, ibmMvsAtmOsasfChannelDeterNodeDesc=ibmMvsAtmOsasfChannelDeterNodeDesc, ibmMvsAtmLecFlushTimeout=ibmMvsAtmLecFlushTimeout, ibmMvsOsaExpChannelManLparNum=ibmMvsOsaExpChannelManLparNum, ibmMvsDeviceRouterStatus=ibmMvsDeviceRouterStatus, ibmMvsTcpKeepAliveTimer=ibmMvsTcpKeepAliveTimer, ibmMvsRPingTimeOut=ibmMvsRPingTimeOut, ibmMvsNoUdpQueueLimit=ibmMvsNoUdpQueueLimit, ibmMvsTcpPMTURxmts=ibmMvsTcpPMTURxmts, ibmMvsAtmLecControlDirectVCI=ibmMvsAtmLecControlDirectVCI, ibmMvsDVIPADistConfTargetDynXcfIpAddrType=ibmMvsDVIPADistConfTargetDynXcfIpAddrType, ibmMvsPortReuse=ibmMvsPortReuse, ibmMvsDVIPARangeConfMaskType=ibmMvsDVIPARangeConfMaskType, ibmMvsAtmLecSvcFailures=ibmMvsAtmLecSvcFailures, ibmMvsAtmOsasfPortCodeLoadStatus=ibmMvsAtmOsasfPortCodeLoadStatus, ibmMvsTcpConnSndNxt=ibmMvsTcpConnSndNxt, ibmMvsAtmLecMulticastFwdVPI=ibmMvsAtmLecMulticastFwdVPI, ibmMvsTcpConnActiveOpen=ibmMvsTcpConnActiveOpen, ibmMvsOsaExpEthSnaAckTimer=ibmMvsOsaExpEthSnaAckTimer, ibmMvsDVIPATargetRemoved=ibmMvsDVIPATargetRemoved, ibmMvsDVIPADistConfTable=ibmMvsDVIPADistConfTable, ibmMvsTcpConnTcpPol=ibmMvsTcpConnTcpPol, ibmMvsDVIPATargetServerStarted=ibmMvsDVIPATargetServerStarted, ibmMvsTcpConnSendWindowSeq=ibmMvsTcpConnSendWindowSeq, ibmMvsTcpConnRttSeq=ibmMvsTcpConnRttSeq, ibmMvsDeviceLuName=ibmMvsDeviceLuName, ibmMvsAtmLecID=ibmMvsAtmLecID, ibmMvsAtmLecInterfaceState=ibmMvsAtmLecInterfaceState, ibmMvsIpOutDiscardsMemory=ibmMvsIpOutDiscardsMemory, ibmMvsDVIPAMaskAddr=ibmMvsDVIPAMaskAddr, ibmMvsDVIPADistPortTotalConn=ibmMvsDVIPADistPortTotalConn, ibmMvsUdpMcastTTL=ibmMvsUdpMcastTTL, ibmMvsAtmSnaLeLlcTi=ibmMvsAtmSnaLeLlcTi, ibmMvsUdpMcastRecvLinkAddr=ibmMvsUdpMcastRecvLinkAddr, ibmMvsAtmLecAgingTime=ibmMvsAtmLecAgingTime, ibmTCPIPmvsAtmSupportGroup=ibmTCPIPmvsAtmSupportGroup, ibmMvsTcpConnIncomingWinSeq=ibmMvsTcpConnIncomingWinSeq, ibmMvsAtmOsasfPortNetPrefixPrefix=ibmMvsAtmOsasfPortNetPrefixPrefix, ibmMvsTcpConnServerResourceId=ibmMvsTcpConnServerResourceId, ibmMvsTcpListenerResourceName=ibmMvsTcpListenerResourceName, osaexpChannelTable=osaexpChannelTable, ibmMvsGatewayDelayAcks=ibmMvsGatewayDelayAcks, ibmMvsAtmOsasfChannelFlashLevel=ibmMvsAtmOsasfChannelFlashLevel, ibmMvsDVIPARemoved=ibmMvsDVIPARemoved, ibmMvsDVIPAServMgrPort=ibmMvsDVIPAServMgrPort, osasfPvcTable=osasfPvcTable, ibmMvsLinkMcastRefCount=ibmMvsLinkMcastRefCount, ibmMvsOsaExpEthPortConfigSpeed=ibmMvsOsaExpEthPortConfigSpeed, ibmMvsDeviceReadBuffers=ibmMvsDeviceReadBuffers, ibmMvsAtmOsasfPvcVci=ibmMvsAtmOsasfPvcVci, ibmTcpipMvsSystem=ibmTcpipMvsSystem, ibmMvsAtmLecConfigDirectInterface=ibmMvsAtmLecConfigDirectInterface, ibmMvsTcpConnOptMaxSegmentSize=ibmMvsTcpConnOptMaxSegmentSize, ibmMvsTcpConnUsrRcvNxt=ibmMvsTcpConnUsrRcvNxt, ibmMvsDVIPARangeConfIpAddrType=ibmMvsDVIPARangeConfIpAddrType, ibmMvsTcpInShort=ibmMvsTcpInShort, ibmTCPIPmvsSystemGroup2=ibmTCPIPmvsSystemGroup2, ibmMvsAtmSnaLeMaxSaps=ibmMvsAtmSnaLeMaxSaps, ibmMvsTcpInAllAfterWin=ibmMvsTcpInAllAfterWin, ibmMvsAtmLecControlDistributeVPI=ibmMvsAtmLecControlDistributeVPI, ibmMvsTcpInWinUpdates=ibmMvsTcpInWinUpdates, ibmMvsDVIPAServMgrMulticastIpAddrType=ibmMvsDVIPAServMgrMulticastIpAddrType, ibmMvsAtmLecActualMaxDataFrameSize=ibmMvsAtmLecActualMaxDataFrameSize, ibmMvsPortBindIpAddr=ibmMvsPortBindIpAddr, ibmMvsGatewayMinimumRetransmitTime=ibmMvsGatewayMinimumRetransmitTime, ibmMvsAtmLecExpectedArpResponseTime=ibmMvsAtmLecExpectedArpResponseTime, ibmMvsAtmSnaLeEntry=ibmMvsAtmSnaLeEntry, ibmMvsOsaExpEthPortServiceMode=ibmMvsOsaExpEthPortServiceMode, ibmMvsAtmOsasfPortMacAddrActive=ibmMvsAtmOsasfPortMacAddrActive, ibmTcpipMvsUdpGroup=ibmTcpipMvsUdpGroup, ibmMvsTcpPMTUErrors=ibmMvsTcpPMTUErrors, ibmTcpipMvsTcpConnTable=ibmTcpipMvsTcpConnTable, ibmMvsAtmLecTopologyChange=ibmMvsAtmLecTopologyChange, ibmMvsTcpipSubagentVersion=ibmMvsTcpipSubagentVersion, ibmTCPIPmvsOsaExpGroup=ibmTCPIPmvsOsaExpGroup, ibmMvsTcpConnInSegs=ibmMvsTcpConnInSegs, ibmMvsAtmOsasfPvcVpi=ibmMvsAtmOsasfPvcVpi, ibmMvsOsaExpEthPortName=ibmMvsOsaExpEthPortName, ibmMvsAtmLecControlFramesOut=ibmMvsAtmLecControlFramesOut, ibmMvsAtmLecStatisticsEntry=ibmMvsAtmLecStatisticsEntry, ibmMvsOsaExpChannelCodeLevel=ibmMvsOsaExpChannelCodeLevel, ibmTCPIPmvsSystemGroup7=ibmTCPIPmvsSystemGroup7, ibmMvsAtmLecLocalSegmentID=ibmMvsAtmLecLocalSegmentID, ibmMvsUdpSubtask=ibmMvsUdpSubtask, ibmMvsLinkDeviceIndex=ibmMvsLinkDeviceIndex, ibmTCPIPmvsSystemGroup6=ibmTCPIPmvsSystemGroup6, ibmMvsTcpConnOptions=ibmMvsTcpConnOptions, ibmMvsTcpConnPendTcpRecv=ibmMvsTcpConnPendTcpRecv, ibmMvsOsaExpChannelControlUnitNumber=ibmMvsOsaExpChannelControlUnitNumber, ibmMvsTcpInDupAck=ibmMvsTcpInDupAck, ibmMvsTcpKeepAliveProbes=ibmMvsTcpKeepAliveProbes, ibmMvsAtmOsasfChannelCodeLevel=ibmMvsAtmOsasfChannelCodeLevel, osaexpPerfEntry=osaexpPerfEntry, ibmMvsAtmLecProtocol=ibmMvsAtmLecProtocol, ibmMvsLinkMcastGroupAddr=ibmMvsLinkMcastGroupAddr, ibmMvsAtmLecMaxUnknownFrameTime=ibmMvsAtmLecMaxUnknownFrameTime, ibmMvsMinimumRetransmitTime=ibmMvsMinimumRetransmitTime, ibmMvsAtmOsasfPvcFwdPeakCellRate=ibmMvsAtmOsasfPvcFwdPeakCellRate, ibmMvsAtmSnaLeTrSessionDelay=ibmMvsAtmSnaLeTrSessionDelay, osaexpPerfTable=osaexpPerfTable, ibmMvsTcpInOutOfOrder=ibmMvsTcpInOutOfOrder, ibmMvsAtmOsasfChannelCurLparNum=ibmMvsAtmOsasfChannelCurLparNum, osasfPortEntry=osasfPortEntry, ibmMvsAtmOsasfChannelState=ibmMvsAtmOsasfChannelState, ibmMvsTcpConnRoundTripTime=ibmMvsTcpConnRoundTripTime, ibmTcpipMvsOsaExpGroup=ibmTcpipMvsOsaExpGroup, ibmMvsAtmOsasfPortNumber=ibmMvsAtmOsasfPortNumber, ibmMvsAtmOsasfPortPcmName=ibmMvsAtmOsasfPortPcmName, ibmMvsTcpTimeWaitReused=ibmMvsTcpTimeWaitReused, ibmTCPIPmvsAtmSupportGroup3=ibmTCPIPmvsAtmSupportGroup3, ibmMvsAtmOsasfChannelType=ibmMvsAtmOsasfChannelType, ibmTCPIPmvsSystemGroup4=ibmTCPIPmvsSystemGroup4, ibmMvsDeviceActualRouterStatus=ibmMvsDeviceActualRouterStatus, ibmMvsTcpConnInitRcvSeq=ibmMvsTcpConnInitRcvSeq, osasfChannelEntry=osasfChannelEntry, ibmMvsAtmLecMulticastFwdVCI=ibmMvsAtmLecMulticastFwdVCI, ibmMvsOsaExpEthPortActiveSpeed=ibmMvsOsaExpEthPortActiveSpeed, ibmMvsRoundTripGain=ibmMvsRoundTripGain, ibmMvsDeviceWorkstationClawName=ibmMvsDeviceWorkstationClawName, ibmMvsTcpConnClusterConnFlag=ibmMvsTcpConnClusterConnFlag, ibmMvsAtmLecControlDirectInterface=ibmMvsAtmLecControlDirectInterface, ibmMvsLinkMcast=ibmMvsLinkMcast, ibmMvsDeviceHostClawName=ibmMvsDeviceHostClawName, ibmTCPIPmvsUdpGroup3=ibmTCPIPmvsUdpGroup3, ibmMvsAtmLecVccTimeoutPeriod=ibmMvsAtmLecVccTimeoutPeriod, ibmMvsRPingPacketSize=ibmMvsRPingPacketSize, ibmMvsTcpListenerExceedBacklog=ibmMvsTcpListenerExceedBacklog, ibmMvsTcpReceiveBufferSize=ibmMvsTcpReceiveBufferSize, ibmMvsTcpipStatisticsEnabled=ibmMvsTcpipStatisticsEnabled, ibmMvsOsaExpPerfProcessorUtil1Min=ibmMvsOsaExpPerfProcessorUtil1Min, ibmMvsDVIPADistConfIpAddr=ibmMvsDVIPADistConfIpAddr, ibmTCPIPmvsObsoleteGroup=ibmTCPIPmvsObsoleteGroup, ibmMvsOsasfHostName=ibmMvsOsasfHostName, ibmMvsAtmOsasfPvcFwdsustainCellRate=ibmMvsAtmOsasfPvcFwdsustainCellRate, ibmMvsTcpConnReXmt=ibmMvsTcpConnReXmt, DeviceLinkTypes=DeviceLinkTypes, ibmMvsOsaExpEthPortMacAddrBurntIn=ibmMvsOsaExpEthPortMacAddrBurntIn, ibmMvsOsaExpEthSnaMaxIFramesBeforeAck=ibmMvsOsaExpEthSnaMaxIFramesBeforeAck, ibmMvsIpOutDiscardsDlcAsynch=ibmMvsIpOutDiscardsDlcAsynch, ibmMvsTcpConnMaxSndWnd=ibmMvsTcpConnMaxSndWnd, ibmTCPIPmvsTcpGroup3=ibmTCPIPmvsTcpGroup3, ibmMvsDVIPARangeConfTable=ibmMvsDVIPARangeConfTable, ibmMvsOsaExpEthPortConfigName=ibmMvsOsaExpEthPortConfigName, ibmMvsAtmOsasfChannelVtamId=ibmMvsAtmOsasfChannelVtamId, ibmMvsAtmOsasfPortHardwareState=ibmMvsAtmOsasfPortHardwareState, ibmMvsAtmLecConfigSource=ibmMvsAtmLecConfigSource, ibmMvsTcpFinwait2Drops=ibmMvsTcpFinwait2Drops, ibmMvsTcpConnSubtask=ibmMvsTcpConnSubtask, osasfChannelTable=osasfChannelTable, ibmMvsGatewayVarianceMultiplier=ibmMvsGatewayVarianceMultiplier, ibmMvsOsaExpEthPortHardwareState=ibmMvsOsaExpEthPortHardwareState, ibmTCPIPmvsSystemGroup3=ibmTCPIPmvsSystemGroup3, ibmMvsPortProtocol=ibmMvsPortProtocol, ibmMvsTcpInAllBeforeWin=ibmMvsTcpInAllBeforeWin, ibmTCPIPmvsPortGroup=ibmTCPIPmvsPortGroup, ibmMvsOsaExpEthPortDisabledStatus=ibmMvsOsaExpEthPortDisabledStatus, ibmMvsAtmLecConfigLanType=ibmMvsAtmLecConfigLanType, ibmMvsAtmLecMulticastSendInterface=ibmMvsAtmLecMulticastSendInterface, ibmMvsOsaExpEthPortInBroadcastFrames=ibmMvsOsaExpEthPortInBroadcastFrames, ibmMvsDVIPAConnRemIpAddrType=ibmMvsDVIPAConnRemIpAddrType, ibmMvsTcpConnLuName=ibmMvsTcpConnLuName, ibmMvsOsaExpPerfOutKbytesRate5Min=ibmMvsOsaExpPerfOutKbytesRate5Min, ibmMvsAtmOsasfChannelEcLevel=ibmMvsAtmOsasfChannelEcLevel, ibmMvsTcpListenerRemotePort=ibmMvsTcpListenerRemotePort, ibmMvsIpMaxReassemblySize=ibmMvsIpMaxReassemblySize, ibmMvsAtmOsasfPortMacAddrBurntIn=ibmMvsAtmOsasfPortMacAddrBurntIn, ibmMvsTcpConnMaxBacklog=ibmMvsTcpConnMaxBacklog, ibmMvsUdpMcastRecvGroup=ibmMvsUdpMcastRecvGroup, ibmMvsTcpListenerMaxBacklog=ibmMvsTcpListenerMaxBacklog, ibmMvsTcpConnTimeStamp=ibmMvsTcpConnTimeStamp, ibmMvsAtmSnaLeLlcT2=ibmMvsAtmSnaLeLlcT2, ibmMvsTcpConnWindowScale=ibmMvsTcpConnWindowScale, ibmMvsTcpInPawsDrop=ibmMvsTcpInPawsDrop, ibmMvsTcpOutWinUpdates=ibmMvsTcpOutWinUpdates, ibmMvsDVIPAConnPort=ibmMvsDVIPAConnPort, ibmMvsAtmLecArpRepliesOut=ibmMvsAtmLecArpRepliesOut, ibmMvsAtmOsasfPvcFwdCellBurstSize=ibmMvsAtmOsasfPvcFwdCellBurstSize, ibmMvsAtmOsasfChannelCurLparName=ibmMvsAtmOsasfChannelCurLparName, ibmTCPIPmvsMIBTraps=ibmTCPIPmvsMIBTraps, ibmMvsTcpConnResourceId=ibmMvsTcpConnResourceId, ibmMvsAtmOsasfPortMediaType=ibmMvsAtmOsasfPortMediaType, ibmMvsAtmOsasfChannelTime=ibmMvsAtmOsasfChannelTime, ibmMvsTcpInAfterClose=ibmMvsTcpInAfterClose, ibmMvsOsaExpEthSnaInactTimer=ibmMvsOsaExpEthSnaInactTimer, ibmMvsAtmLecMulticastSendPeakRate=ibmMvsAtmLecMulticastSendPeakRate, ibmMvsOsaExpChannelCurLparNum=ibmMvsOsaExpChannelCurLparNum, ibmMvsTcpConnBytesOut=ibmMvsTcpConnBytesOut, osaexpEthPortEntry=osaexpEthPortEntry)
mibBuilder.exportSymbols("IBMTCPIPMVS-MIB", ibmMvsOsaExpChannelCurLparName=ibmMvsOsaExpChannelCurLparName, ibmMvsOsaExpEthPortType=ibmMvsOsaExpEthPortType, ibmMvsTcpListenerLocalPort=ibmMvsTcpListenerLocalPort, ibmMvsOsaExpChannelProcessorUtil1Min=ibmMvsOsaExpChannelProcessorUtil1Min, ibmMvsTcpConnSendMSS=ibmMvsTcpConnSendMSS, ibmMvsTcpConnRcvNxt=ibmMvsTcpConnRcvNxt, ibmMvsOsaExpEthPortGroupMacAddrs=ibmMvsOsaExpEthPortGroupMacAddrs, ibmMvsTcpRxmtTimers=ibmMvsTcpRxmtTimers, ibmMvsTcpConnSndWnd=ibmMvsTcpConnSndWnd, ibmMvsAtmOsasfPortAAL5OutPackets=ibmMvsAtmOsasfPortAAL5OutPackets, ibmMvsDVIPADistConfIpAddrType=ibmMvsDVIPADistConfIpAddrType, ibmMvsUdpSendLim=ibmMvsUdpSendLim, ibmMvsOsaExpChannelPCIBusUtil1Min=ibmMvsOsaExpChannelPCIBusUtil1Min, ibmMvsTcpOutWinProbes=ibmMvsTcpOutWinProbes, ibmRemotePingGroup=ibmRemotePingGroup, ibmMvsDVIPAConnRemIpAddr=ibmMvsDVIPAConnRemIpAddr, ibmMvsIpForwarding=ibmMvsIpForwarding, ibmMvsUdpMcastLoopback=ibmMvsUdpMcastLoopback, ibmMvsTcpConnSendWindowAck=ibmMvsTcpConnSendWindowAck, ibmMvsAtmLecControlDistributeInterface=ibmMvsAtmLecControlDistributeInterface, ibmMvsDeviceWriteBuffers=ibmMvsDeviceWriteBuffers, ibmMvsAtmLecArpRequestsIn=ibmMvsAtmLecArpRequestsIn, ibmMvsTcpConnTcpSel=ibmMvsTcpConnTcpSel, ibmMvsDVIPAIpAddrType=ibmMvsDVIPAIpAddrType, ibmMvsPortSAFResource=ibmMvsPortSAFResource, ibmTcpipMvsLinkMcastTable=ibmTcpipMvsLinkMcastTable, ibmTCPIPmvsAtmNotificationGroup=ibmTCPIPmvsAtmNotificationGroup, ibmTCPIPmvsUdpGroup=ibmTCPIPmvsUdpGroup, ibmRemotePingEntry=ibmRemotePingEntry, ibmMvsOsaExpChannelSubType=ibmMvsOsaExpChannelSubType, ibmMvsTcpConnOutgoingPush=ibmMvsTcpConnOutgoingPush, ibmMvsGatewayRoundTripGain=ibmMvsGatewayRoundTripGain, ibmMvsTcpConnOutgoingWinSeq=ibmMvsTcpConnOutgoingWinSeq, TypeOfService=TypeOfService, ibmMvsIpOutDiscardsDlcSynch=ibmMvsIpOutDiscardsDlcSynch, ibmTCPIPmvsTcpGroup2=ibmTCPIPmvsTcpGroup2, ibmMvsPortAutoLoggable=ibmMvsPortAutoLoggable, ibmMvsAtmLecConnectionCompleteTimer=ibmMvsAtmLecConnectionCompleteTimer, ibmMvsTcpConnTcpSig=ibmMvsTcpConnTcpSig, ibmMvsAtmOsasfPvcName=ibmMvsAtmOsasfPvcName, ibmMvsAtmLecConfigLanName=ibmMvsAtmLecConfigLanName, ibmMvsAtmSnaleMaxStations=ibmMvsAtmSnaleMaxStations, ibmMvsTcpConnDSField=ibmMvsTcpConnDSField, mvsSNMPagent=mvsSNMPagent, ibmTCPIPmvsInterfacesGroup=ibmTCPIPmvsInterfacesGroup, osasfPortTable=osasfPortTable, ibmMvsTcpConnRoundTripVariance=ibmMvsTcpConnRoundTripVariance, ibmMvsTcpConnLogMode=ibmMvsTcpConnLogMode, ibmMvsAtmOsasfChannelNumber=ibmMvsAtmOsasfChannelNumber, ibmMvsTcpPassiveDrops=ibmMvsTcpPassiveDrops, ibmMvsTcpConnOutBuffered=ibmMvsTcpConnOutBuffered, ibmMvsAtmLecConfigMode=ibmMvsAtmLecConfigMode, ibmTcpipMvsTcpListenerEntry=ibmTcpipMvsTcpListenerEntry, ibmMvsDVIPARangeConfMoveable=ibmMvsDVIPARangeConfMoveable, ibmMvsAtmLecLastFailureRespCode=ibmMvsAtmLecLastFailureRespCode, ibmMvsOsaExpEthPortInUnknownIPFrames=ibmMvsOsaExpEthPortInUnknownIPFrames, ibmMvsTcpConnInitSndSeq=ibmMvsTcpConnInitSndSeq, ibmMvsDVIPAConnPolicyRuleName=ibmMvsDVIPAConnPolicyRuleName, ibmMvsTcpConnTcpDet=ibmMvsTcpConnTcpDet, ibmMvsUdpDSField=ibmMvsUdpDSField, ibmMvsIpInDiscardsMemory=ibmMvsIpInDiscardsMemory, ibmSNMPRemPing=ibmSNMPRemPing, ibmRemotePingTable=ibmRemotePingTable, ibmTcpipMvsDeviceEntry=ibmTcpipMvsDeviceEntry, ibmMvsIgnoreRedirect=ibmMvsIgnoreRedirect, ibmMvsSoMaxConn=ibmMvsSoMaxConn, ibmMvsAtmLecStatusTable=ibmMvsAtmLecStatusTable, ibmMvsSourceVipaEnabled=ibmMvsSourceVipaEnabled, ibmMvsOsaExpChannelDeterNodeDesc=ibmMvsOsaExpChannelDeterNodeDesc, ibmMvsDVIPAMoveable=ibmMvsDVIPAMoveable, ibmMvsDVIPAOrigin=ibmMvsDVIPAOrigin, ibmMvsDVIPAConnRoutingEntry=ibmMvsDVIPAConnRoutingEntry, ibmMvsDeviceType=ibmMvsDeviceType, ibmTcpipMvsUdpTable=ibmTcpipMvsUdpTable, ibmMvsSendGarbageEnabled=ibmMvsSendGarbageEnabled, ibmMvsAtmLecForwardDelayTime=ibmMvsAtmLecForwardDelayTime, ibmMvsTcpListenerLocalAddrType=ibmMvsTcpListenerLocalAddrType, ibmMvsAtmOsasfChannelSubType=ibmMvsAtmOsasfChannelSubType, ibmMvsDeviceProcname=ibmMvsDeviceProcname, ibmMvsUdpSockOpt=ibmMvsUdpSockOpt, ibmMvsOsaExpEthPortUserData=ibmMvsOsaExpEthPortUserData, ibmMvsOsaExpPerfOutKbytesRate1Min=ibmMvsOsaExpPerfOutKbytesRate1Min, ibmMvsAtmOsasfChannelNumPorts=ibmMvsAtmOsasfChannelNumPorts, ibmMvsAtmOsasfPortNetPrefixStatus=ibmMvsAtmOsasfPortNetPrefixStatus, ibmMvsUdpRecvLim=ibmMvsUdpRecvLim, ibmMvsTcpConnIncomingPush=ibmMvsTcpConnIncomingPush, ibmMvsTcpConnSndUna=ibmMvsTcpConnSndUna, ibmMvsAtmLecConfigDirectVPI=ibmMvsAtmLecConfigDirectVPI, ibmMvsAtmLecServerEntry=ibmMvsAtmLecServerEntry, ibmMvsAtmLecMulticastSendAvgRate=ibmMvsAtmLecMulticastSendAvgRate, ibmMvsTcpPredictData=ibmMvsTcpPredictData, ibmMvsDVIPADistPortWlmWeight=ibmMvsDVIPADistPortWlmWeight, ibmMvsAtmOsasfPortType=ibmMvsAtmOsasfPortType, ibmMvsTcpConnSockOpt=ibmMvsTcpConnSockOpt, ibmMvsDevRetryDuration=ibmMvsDevRetryDuration, ibmTcpipMvsTcpConnEntry=ibmTcpipMvsTcpConnEntry, ibmMvsDeviceActualPackingMode=ibmMvsDeviceActualPackingMode, ibmMvsTcpConnBackoffCount=ibmMvsTcpConnBackoffCount, ibmTCPIPmvsCompliance=ibmTCPIPmvsCompliance, ibmMvsTcpProbeDrops=ibmMvsTcpProbeDrops, ibmTCPIPmvsTcpGroup5=ibmTCPIPmvsTcpGroup5, ibmMvsAtmSnaLeCrsGroupAddress=ibmMvsAtmSnaLeCrsGroupAddress, ibmTCPIPmvsSystemGroup5=ibmTCPIPmvsSystemGroup5, ibmMvsDVIPAServMgrMulticastIpAddr=ibmMvsDVIPAServMgrMulticastIpAddr, ibmMvsPortNumberHigh=ibmMvsPortNumberHigh, ibmMvsTcpConnSndWl1=ibmMvsTcpConnSndWl1, ibmTCPIPmvsAtmLeGroup=ibmTCPIPmvsAtmLeGroup, ibmMvsPortOptMaxSegmentSize=ibmMvsPortOptMaxSegmentSize, ibmMvsAtmOsasfPvcBestEffort=ibmMvsAtmOsasfPvcBestEffort, ibmTCPIPmvsInterfacesGroup4=ibmTCPIPmvsInterfacesGroup4, ibmMvsAtmLecConfigTable=ibmMvsAtmLecConfigTable, ibmMvsTcpConnResourceName=ibmMvsTcpConnResourceName, ibmMvsUdpChecksum=ibmMvsUdpChecksum, ibmMvsTcpConnExceedBacklog=ibmMvsTcpConnExceedBacklog, ibmMvsTcpConnTcpTimer=ibmMvsTcpConnTcpTimer, ibmTCPIPmvsTcpGroup=ibmTCPIPmvsTcpGroup, ibmMvsPathMtuDscEnabled=ibmMvsPathMtuDscEnabled, ibmMvsAtmLecControlTimeout=ibmMvsAtmLecControlTimeout, ibmMvsTcpConnBytesIn=ibmMvsTcpConnBytesIn, ibmMvsUdpMcastRecvLocalAddress=ibmMvsUdpMcastRecvLocalAddress, ibmMvsTcpInWinProbes=ibmMvsTcpInWinProbes, ibmMvsDVIPARangeConfStatus=ibmMvsDVIPARangeConfStatus, ibmMvsAtmSnaLeLlcT1=ibmMvsAtmSnaLeLlcT1, ibmMvsTcpListenerRemoteAddr=ibmMvsTcpListenerRemoteAddr, ibmTCPIPmvsDVIPANotificationGroup=ibmTCPIPmvsDVIPANotificationGroup, ibmMvsAtmOsasfPortAAL5InPackets=ibmMvsAtmOsasfPortAAL5InPackets, ibmMvsLinkIbmtrCanonical=ibmMvsLinkIbmtrCanonical, ibmMvsAtmLecConfigMaxDataFrameSize=ibmMvsAtmLecConfigMaxDataFrameSize, ibmTcpipMvsUdpMcastRecvTable=ibmTcpipMvsUdpMcastRecvTable, ibmMvsOsaExpPerfInKbytesRate5Min=ibmMvsOsaExpPerfInKbytesRate5Min, ibmMvsTcpConnOutSegs=ibmMvsTcpConnOutSegs, ibmMvsAtmSnaLeClientEnableState=ibmMvsAtmSnaLeClientEnableState, ibmMvsAtmLecProxyClient=ibmMvsAtmLecProxyClient, ibmMvsTcpConnIncomingUrg=ibmMvsTcpConnIncomingUrg, ibmMvsDeviceNetmanEnabled=ibmMvsDeviceNetmanEnabled, ibmMvsDVIPADistConfTargetDynXcfIpAddr=ibmMvsDVIPADistConfTargetDynXcfIpAddr, ibmMvsAtmLecArpRequestsOut=ibmMvsAtmLecArpRequestsOut, ibmMvsTcpConnSSThresh=ibmMvsTcpConnSSThresh, ibmMvsAtmOsasfChannelDate=ibmMvsAtmOsasfChannelDate, ibmMvsTcpConnDupacks=ibmMvsTcpConnDupacks, ibmMvsAtmSnaLeUserData=ibmMvsAtmSnaLeUserData, ibmMvsOsaExpPerfOutKbytesRateHour=ibmMvsOsaExpPerfOutKbytesRateHour, ibmMvsGatewayMaximumRetransmitTime=ibmMvsGatewayMaximumRetransmitTime, ibmMvsOsaExpEthPortMacAddrActive=ibmMvsOsaExpEthPortMacAddrActive, ibmMvsTcpConnsClosed=ibmMvsTcpConnsClosed, ibmMvsOsaExpEthSnaRespTimer=ibmMvsOsaExpEthSnaRespTimer, ibmMvsOsaExpChannelShared=ibmMvsOsaExpChannelShared, ibmTCPIPmvsDVIPAGroup=ibmTCPIPmvsDVIPAGroup, ibmTcpipMvsDVIPAGroup=ibmTcpipMvsDVIPAGroup, ibmMvsAtmLecConfigLesAtmAddress=ibmMvsAtmLecConfigLesAtmAddress, ibmMvsRPingResponseTime=ibmMvsRPingResponseTime, ibmMvsAtmLecLastFailureState=ibmMvsAtmLecLastFailureState, ibmMvsLinkArpSupport=ibmMvsLinkArpSupport, ibmMvsAtmLecArpRepliesIn=ibmMvsAtmLecArpRepliesIn, ibmMvsPortNumberLow=ibmMvsPortNumberLow, ibmMvsUdpIpOpts=ibmMvsUdpIpOpts, ibmMvsAtmLecActualLanType=ibmMvsAtmLecActualLanType, ibmMvsDeviceIncomingSvcEnabled=ibmMvsDeviceIncomingSvcEnabled, ibmMvsAtmLecPortName=ibmMvsAtmLecPortName, ibmMvsOsaExpPerfInKbytesRateHour=ibmMvsOsaExpPerfInKbytesRateHour, ibmMvsIpInUnpackErrors=ibmMvsIpInUnpackErrors, ibmTCPIPmvsInterfacesGroup2=ibmTCPIPmvsInterfacesGroup2, ibmProd=ibmProd, ibmMvsTcpConnIpTos=ibmMvsTcpConnIpTos, ibmMvsOsasfSysplexName=ibmMvsOsasfSysplexName, ibmMvsDVIPADistPortTargetDynXcfIpAddr=ibmMvsDVIPADistPortTargetDynXcfIpAddr, ibmMvsLinkNumber=ibmMvsLinkNumber, ibmMvsUdpRestrictLowPorts=ibmMvsUdpRestrictLowPorts, ibmMvsUdpResourceId=ibmMvsUdpResourceId, ibmMvsOsaExpPerfLparNum=ibmMvsOsaExpPerfLparNum, ibmMvsFirewallEnabled=ibmMvsFirewallEnabled, ibmMvsDVIPADistPortEntry=ibmMvsDVIPADistPortEntry, ibmMvsAtmOsasfPortMaxPcmConnections=ibmMvsAtmOsasfPortMaxPcmConnections, ibmMvsTcpInSomeBeforeWin=ibmMvsTcpInSomeBeforeWin, ibmMvsAtmSnaLeMaxOut=ibmMvsAtmSnaLeMaxOut, osaexpChannelEntry=osaexpChannelEntry, ibmMvsTcpInSomeAfterWin=ibmMvsTcpInSomeAfterWin, ibmMvsOsaExpEthPortOutPackets=ibmMvsOsaExpEthPortOutPackets, ibmMvsAtmLecPathSwitchingDelay=ibmMvsAtmLecPathSwitchingDelay, ibmTCPIPmvsCompliances=ibmTCPIPmvsCompliances, ibmTCPIPmvsPortGroup2=ibmTCPIPmvsPortGroup2, ibmTCPIPmvsPingGroup=ibmTCPIPmvsPingGroup, ibmMvsAtmLecMacAddressEntry=ibmMvsAtmLecMacAddressEntry, ibmMvsTcpConnRcvBufSize=ibmMvsTcpConnRcvBufSize, ibmMvsOsaExpEthPortInPackets=ibmMvsOsaExpEthPortInPackets, ibmMvsOsaExpChannelPCIBusUtilHour=ibmMvsOsaExpChannelPCIBusUtilHour, ibmMvsAtmLecMulticastSendVPI=ibmMvsAtmLecMulticastSendVPI, ibmMvsTcpListenerCurrBacklog=ibmMvsTcpListenerCurrBacklog, ibmMvsTcpConnUsrSndNxt=ibmMvsTcpConnUsrSndNxt, PYSNMP_MODULE_ID=ibmTCPIPmvsMIB, ibmTCPIPmvsConformance=ibmTCPIPmvsConformance, ibmMvsGatewayVarianceGain=ibmMvsGatewayVarianceGain, ibmTCPIPmvsGroups=ibmTCPIPmvsGroups, ibmMvsTcpSendBufferSize=ibmMvsTcpSendBufferSize, ibmMvsMultipathType=ibmMvsMultipathType, ibmMvsAtmOsasfAtmPvcCreate=ibmMvsAtmOsasfAtmPvcCreate, ibmTcpipMvsAtmGroup=ibmTcpipMvsAtmGroup, ibmMvsPrimaryInterfaceIfIndex=ibmMvsPrimaryInterfaceIfIndex, ibmMvsAtmSnaLeTrEnableLoadBalancing=ibmMvsAtmSnaLeTrEnableLoadBalancing, ibmMvsIplDateAndTime=ibmMvsIplDateAndTime, ibmMvsMultipathEnabled=ibmMvsMultipathEnabled, ibmMvsArpCacheTimeout=ibmMvsArpCacheTimeout, ibmTcpipMvsPortGroup=ibmTcpipMvsPortGroup, ibmTcpipMvsIpGroup=ibmTcpipMvsIpGroup, ibmMvsAtmLecVersion=ibmMvsAtmLecVersion, ibmMvsDVIPADistConfStatus=ibmMvsDVIPADistConfStatus, ibmMvsAtmLecMulticastSendVCI=ibmMvsAtmLecMulticastSendVCI, ibmTCPIPmvsMIBObjects=ibmTCPIPmvsMIBObjects, ibmMvsTcpFinwait2Time=ibmMvsTcpFinwait2Time, ibmMvsTcpConnInBuffered=ibmMvsTcpConnInBuffered, ibmMvsOsaExpChannelProcessorUtil5Min=ibmMvsOsaExpChannelProcessorUtil5Min, ibmMvsDVIPARangeConfEntry=ibmMvsDVIPARangeConfEntry, ibmMvsVarianceGain=ibmMvsVarianceGain, ibmMvsAtmSnaLeMaxLECConnections=ibmMvsAtmSnaLeMaxLECConnections, ibmMvsDeviceWriteSize=ibmMvsDeviceWriteSize, ibmMvsAtmLecMaxUnknownFrameCount=ibmMvsAtmLecMaxUnknownFrameCount, ibmMvsAtmOsasfChannelManParnName=ibmMvsAtmOsasfChannelManParnName, ibmMvsAtmOsasfChannelControlUnitNumber=ibmMvsAtmOsasfChannelControlUnitNumber, ibmMvsDVIPADistPortReadyCount=ibmMvsDVIPADistPortReadyCount, ibmMvsAtmLecAtmAddress=ibmMvsAtmLecAtmAddress, ibmMvsDVIPATargetServerEnded=ibmMvsDVIPATargetServerEnded, ibmMvsDVIPAConnDynXcfIpAddr=ibmMvsDVIPAConnDynXcfIpAddr, ibmMvsTcpipSubagentColdStart=ibmMvsTcpipSubagentColdStart, ibmMvsTcpipAsid=ibmMvsTcpipAsid, ibmMvsOsaExpPerfProcessorUtilHour=ibmMvsOsaExpPerfProcessorUtilHour, ibmMvsDVIPADistPortTable=ibmMvsDVIPADistPortTable, ibmAgentCaps=ibmAgentCaps, ibmMvsAtmOsasfPortUniVersion=ibmMvsAtmOsasfPortUniVersion, ibmMvsLinkMacAddress=ibmMvsLinkMacAddress, ibmMvsDVIPAConnRoutingTable=ibmMvsDVIPAConnRoutingTable, ibmMvsDVIPADistConfEntry=ibmMvsDVIPADistConfEntry, ibmMvsTcpConnOutgoingUrg=ibmMvsTcpConnOutgoingUrg, ibmMvsAtmSnaleMaxIn=ibmMvsAtmSnaleMaxIn, ibmMvsAtmOsasfPvcFwdMaxAal5PduSize=ibmMvsAtmOsasfPvcFwdMaxAal5PduSize, ibmMvsDVIPAIpAddr=ibmMvsDVIPAIpAddr, ibmMvsDeviceReadSize=ibmMvsDeviceReadSize, ibmMvsTcpConnCurrBacklog=ibmMvsTcpConnCurrBacklog, ibmMvsPortDelayAcks=ibmMvsPortDelayAcks, ibmMvsOsaExpChannelManLparName=ibmMvsOsaExpChannelManLparName, ibmMvsOsaExpEthPortInGroupFrames=ibmMvsOsaExpEthPortInGroupFrames, ibmMvsAtmSnaLeTrLoadBalancing=ibmMvsAtmSnaLeTrLoadBalancing, ibmTcpipMvsTcpListenerTable=ibmTcpipMvsTcpListenerTable, ibmMvsUdpSendBufferSize=ibmMvsUdpSendBufferSize, ibmMvsAtmLecMaxRetryCount=ibmMvsAtmLecMaxRetryCount, ibm=ibm, ibmMvsDVIPAMaskType=ibmMvsDVIPAMaskType, ibmMvsDVIPAConnDynXcfIpAddrType=ibmMvsDVIPAConnDynXcfIpAddrType, ibmMvsAtmOsasfChannelHwModel=ibmMvsAtmOsasfChannelHwModel, ibmMvsTcpConnProto=ibmMvsTcpConnProto, ibmMvsOsasfProductVersion=ibmMvsOsasfProductVersion, ibmTCPIPmvsAdmin=ibmTCPIPmvsAdmin, ibmMvsAtmLecControlDistributeVCI=ibmMvsAtmLecControlDistributeVCI, ibmMvsVarianceMultiplier=ibmMvsVarianceMultiplier, ibmMvsDVIPAConnRemPort=ibmMvsDVIPAConnRemPort)
mibBuilder.exportSymbols("IBMTCPIPMVS-MIB", ibmMvsTcpConnLastActivity=ibmMvsTcpConnLastActivity, ibmMvsOsaExpPerfProcessorUtil5Min=ibmMvsOsaExpPerfProcessorUtil5Min, ibmMvsTcpInBadLen=ibmMvsTcpInBadLen, ibmMvsPortSharePort=ibmMvsPortSharePort, ibmMvsDVIPATargetAdded=ibmMvsDVIPATargetAdded, ibmMvsTcpKeepAliveDrops=ibmMvsTcpKeepAliveDrops, ibmMvsTcpListenerLocalAddr=ibmMvsTcpListenerLocalAddr, ibmMvsAtmLecMacAddress=ibmMvsAtmLecMacAddress, ibmMvsIpInDevLayerCalls=ibmMvsIpInDevLayerCalls, ibmMvsAtmOsasfPvcBwdPeakCellRate=ibmMvsAtmOsasfPvcBwdPeakCellRate, ibmTcpipMvsGatewayTable=ibmTcpipMvsGatewayTable, ibmMvsAtmSnaLeTable=ibmMvsAtmSnaLeTable, ibmMvsAtmLecServerTable=ibmMvsAtmLecServerTable, ibmMvsDVIPAEntry=ibmMvsDVIPAEntry, ibmTCPIPmvsAtmSupportGroup2=ibmTCPIPmvsAtmSupportGroup2, ibmMvsUdpBytesIn=ibmMvsUdpBytesIn, ibmTCPIPmvsInterfacesGroup5=ibmTCPIPmvsInterfacesGroup5, ibmMvsDeviceBaseNumber=ibmMvsDeviceBaseNumber, ibmMvsUdpMcastRecvLocalPort=ibmMvsUdpMcastRecvLocalPort, ibmMvsAtmLecMacAddressTable=ibmMvsAtmLecMacAddressTable, osaexpEthPortTable=osaexpEthPortTable, ibmMvsUdpRecvBufferSize=ibmMvsUdpRecvBufferSize, ibmTcpipMvsLinkTable=ibmTcpipMvsLinkTable, ibmMvsTcpConnCongestionWnd=ibmMvsTcpConnCongestionWnd, ibmTcpipMvsGatewayEntry=ibmTcpipMvsGatewayEntry, ibmMvsLinkIbmtrBcast=ibmMvsLinkIbmtrBcast, ibmMvsDVIPAServMgrPasswordSpecified=ibmMvsDVIPAServMgrPasswordSpecified, ibmMvsDVIPARangeConfMaskAddr=ibmMvsDVIPARangeConfMaskAddr, ibmMvsTcpListenerRemoteAddrType=ibmMvsTcpListenerRemoteAddrType, ibmMvsTcpConnTargetAppl=ibmMvsTcpConnTargetAppl, ibmMvsTcpConnReXmtCount=ibmMvsTcpConnReXmtCount, ibmMvsTcpMaxReceiveBufferSize=ibmMvsTcpMaxReceiveBufferSize, ibmMvsTcpRestrictLowPorts=ibmMvsTcpRestrictLowPorts, ibmMvsDVIPAStatusChange=ibmMvsDVIPAStatusChange, ibmMvsAtmLecConfigEntry=ibmMvsAtmLecConfigEntry, ibmMvsTcpOutDelayAcks=ibmMvsTcpOutDelayAcks, ibmMvsAtmLecStatusEntry=ibmMvsAtmLecStatusEntry, ibmTCPIPmvsAtmLeGroup2=ibmTCPIPmvsAtmLeGroup2, ibmMvsDVIPADistPortPort=ibmMvsDVIPADistPortPort, ibmMvsDVIPATable=ibmMvsDVIPATable, ibmMvsOsaExpChannelState=ibmMvsOsaExpChannelState, ibmTCPIPmvsUdpGroup2=ibmTCPIPmvsUdpGroup2, ibmMvsTcpipProcname=ibmMvsTcpipProcname, ibmTcpipMvsRouteGroup=ibmTcpipMvsRouteGroup, ibmMvsAtmOsasfPortUniType=ibmMvsAtmOsasfPortUniType, ibmMvsAtmOsasfPvcBwdMaxAal5PduSize=ibmMvsAtmOsasfPvcBwdMaxAal5PduSize, ibmMvsAtmLecStatisticsTable=ibmMvsAtmLecStatisticsTable, ibmMvsOsaExpChannelNumPorts=ibmMvsOsaExpChannelNumPorts, ibmMvsDVIPAConnPolicyActionName=ibmMvsDVIPAConnPolicyActionName, ibmTCPIPmvsSystemNotificationGroup=ibmTCPIPmvsSystemNotificationGroup, ibmMvsAtmLecConfigDirectVCI=ibmMvsAtmLecConfigDirectVCI, ibmMvsTcpTimeStamp=ibmMvsTcpTimeStamp, ibmMvsUdpLastAct=ibmMvsUdpLastAct, ibmTCPIPmvsRoutingGroup=ibmTCPIPmvsRoutingGroup, ibmMvsTcpConnSndBufSize=ibmMvsTcpConnSndBufSize, ibmMvsLinkType=ibmMvsLinkType, ibmMvsAtmOsasfPvcBwdsustainCellRate=ibmMvsAtmOsasfPvcBwdsustainCellRate, ibmMvsAtmLecActualLanName=ibmMvsAtmLecActualLanName, ibmMvsUdpDgramIn=ibmMvsUdpDgramIn, ibmMvsTcpListenerResourceId=ibmMvsTcpListenerResourceId, ibmMvsAtmLecMulticastFwdInterface=ibmMvsAtmLecMulticastFwdInterface, ibmMvsDeviceAutoRestart=ibmMvsDeviceAutoRestart, ibmTcpipMvsTcpGroup=ibmTcpipMvsTcpGroup, ibmMvsPortProcName=ibmMvsPortProcName)
