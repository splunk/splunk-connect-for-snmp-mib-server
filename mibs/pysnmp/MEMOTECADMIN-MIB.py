#
# PySNMP MIB module MEMOTECADMIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MEMOTECADMIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
Alias, = mibBuilder.importSymbols("CXProduct-SMI", "Alias")
memotecAdmin, = mibBuilder.importSymbols("MEMOTEC-SMI", "memotecAdmin")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, Gauge32, ObjectIdentity, iso, IpAddress, MibIdentifier, TimeTicks, NotificationType, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "Gauge32", "ObjectIdentity", "iso", "IpAddress", "MibIdentifier", "TimeTicks", "NotificationType", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
memotecAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('memotec')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: memotecAdminCommunity.setStatus('mandatory')
memotecAdminViewInacTimer = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminViewInacTimer.setStatus('mandatory')
memotecAdminAgentInterfaceAlias = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminAgentInterfaceAlias.setStatus('mandatory')
memotecAdminStatisticsHeartBeat = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminStatisticsHeartBeat.setStatus('mandatory')
memotecAdminCardAliveHeartBeat = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminCardAliveHeartBeat.setStatus('mandatory')
memotecAdminSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 3, 6))
memotecCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 1), )
if mibBuilder.loadTexts: memotecCommunityTable.setStatus('mandatory')
memotecCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecCommunityIndex"))
if mibBuilder.loadTexts: memotecCommunityEntry.setStatus('mandatory')
memotecCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecCommunityIndex.setStatus('mandatory')
memotecCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityName.setStatus('mandatory')
memotecCommunityNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityNetAddress.setStatus('mandatory')
memotecCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("readOnly", 1), ("writeOnly", 2), ("readWrite", 3), ("notAccess", 4))).clone('readOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityAccess.setStatus('mandatory')
memotecCommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunitySecurityLevel.setStatus('mandatory')
memotecCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityRowStatus.setStatus('mandatory')
memotecSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 2), )
if mibBuilder.loadTexts: memotecSecurityTable.setStatus('mandatory')
memotecSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecSecurityLevelIndex"), (0, "MEMOTECADMIN-MIB", "memotecSecurityViewIndex"))
if mibBuilder.loadTexts: memotecSecurityEntry.setStatus('mandatory')
memotecSecurityLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecSecurityLevelIndex.setStatus('mandatory')
memotecSecurityViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecSecurityViewIndex.setStatus('mandatory')
memotecSecurityView = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecSecurityView.setStatus('mandatory')
memotecSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecSecurityRowStatus.setStatus('mandatory')
memotecTrapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 3), )
if mibBuilder.loadTexts: memotecTrapTable.setStatus('mandatory')
memotecTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecTrapIndex"))
if mibBuilder.loadTexts: memotecTrapEntry.setStatus('mandatory')
memotecTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecTrapIndex.setStatus('mandatory')
memotecTrapNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapNetAddress.setStatus('mandatory')
memotecTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 3), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapCommunity.setStatus('mandatory')
memotecTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapRowStatus.setStatus('mandatory')
memotecAdminMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 3, 7))
memotecAdminMibModules = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecAdminMibModules.setStatus('mandatory')
memotecAdminMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecAdminMibLevel.setStatus('mandatory')
mibBuilder.exportSymbols("MEMOTECADMIN-MIB", memotecAdminAgentInterfaceAlias=memotecAdminAgentInterfaceAlias, memotecTrapTable=memotecTrapTable, memotecCommunityRowStatus=memotecCommunityRowStatus, memotecAdminMibs=memotecAdminMibs, memotecSecurityViewIndex=memotecSecurityViewIndex, memotecCommunityAccess=memotecCommunityAccess, memotecCommunitySecurityLevel=memotecCommunitySecurityLevel, memotecCommunityNetAddress=memotecCommunityNetAddress, memotecAdminViewInacTimer=memotecAdminViewInacTimer, memotecSecurityView=memotecSecurityView, memotecTrapIndex=memotecTrapIndex, memotecSecurityLevelIndex=memotecSecurityLevelIndex, memotecCommunityName=memotecCommunityName, memotecCommunityIndex=memotecCommunityIndex, memotecTrapNetAddress=memotecTrapNetAddress, memotecTrapEntry=memotecTrapEntry, memotecAdminMibLevel=memotecAdminMibLevel, memotecAdminCommunity=memotecAdminCommunity, memotecTrapCommunity=memotecTrapCommunity, memotecAdminStatisticsHeartBeat=memotecAdminStatisticsHeartBeat, memotecCommunityEntry=memotecCommunityEntry, memotecCommunityTable=memotecCommunityTable, memotecSecurityEntry=memotecSecurityEntry, memotecAdminMibModules=memotecAdminMibModules, memotecAdminSecurity=memotecAdminSecurity, memotecSecurityTable=memotecSecurityTable, memotecSecurityRowStatus=memotecSecurityRowStatus, memotecTrapRowStatus=memotecTrapRowStatus, memotecAdminCardAliveHeartBeat=memotecAdminCardAliveHeartBeat)
