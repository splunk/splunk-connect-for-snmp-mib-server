#
# PySNMP MIB module DGS3612-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3612-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:31:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Bits, MibIdentifier, TimeTicks, Counter64, NotificationType, ModuleIdentity, Counter32, iso, Integer32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "NotificationType", "ModuleIdentity", "Counter32", "iso", "Integer32", "Gauge32", "Unsigned32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
dgs3612, = mibBuilder.importSymbols("SW36XXPRIMGMT-MIB", "dgs3612")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization(' ')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1))
swL2MultiFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 14))
swL2IpLimitedMulticastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17))
swL2dot1vProtocolMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18))
swL2MulticastRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3), )
if mibBuilder.loadTexts: swDevModuleInfoTable.setStatus('current')
swDevModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swDevModuleInfoUnitID"), (0, "DGS3612-L2MGMT-MIB", "swDevModuleInfoModuleID"))
if mibBuilder.loadTexts: swDevModuleInfoEntry.setStatus('current')
swDevModuleInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setStatus('current')
swDevModuleInfoModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleID.setStatus('current')
swDevModuleInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setStatus('current')
swDevModuleInfoReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoReversion.setStatus('current')
swDevModuleInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoSerial.setStatus('current')
swDevModuleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoDescription.setStatus('current')
swDevInfoBootPromVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoBootPromVersion.setStatus('current')
swDevInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFirmwareVersion.setStatus('current')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 6), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 13))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
swL2DevCtrlLedPOEState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLedPOEState.setStatus('current')
swL2DevCtrlClipagingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlClipagingState.setStatus('current')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2MultiFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 2, 1), )
if mibBuilder.loadTexts: swL2MultiFilterTable.setStatus('current')
swL2MultiFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 2, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2MultiFilterVid"))
if mibBuilder.loadTexts: swL2MultiFilterEntry.setStatus('current')
swL2MultiFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MultiFilterVid.setStatus('current')
swL2MultiFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MultiFilterMode.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3612-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("portType-none", 0), ("portType-100Base-T", 2), ("portType-100Base-X", 3), ("portType-1000Base-T", 4), ("portType-1000Base-X", 5), ("portType-10GBase-R", 6), ("portType-10GBase-CX4", 7), ("portType-SIO", 8), ("portType-module-empty", 9), ("portType-user-last", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortInfoErrDisReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("err-none", 1), ("storm-control", 2), ("lbd-control", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrDisReason.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3612-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('current')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
swL2PortCtrlAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setStatus('current')
swL2PortCtrlAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 2, 1, 12), IANAifMauAutoNegCapBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
swL2PortAutoNegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8), )
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setStatus('current')
swL2PortAutoNegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2PortAutoNegInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setStatus('current')
swL2PortAutoNegInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setStatus('current')
swL2PortAutoNegInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setStatus('current')
swL2PortAutoNegInfoCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1, 3), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setStatus('current')
swL2PortAutoNegInfoCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1, 4), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setStatus('current')
swL2PortAutoNegInfoCapReceivedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 8, 1, 5), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setStatus('current')
swL2PortDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9), )
if mibBuilder.loadTexts: swL2PortDropCounterTable.setStatus('current')
swL2PortDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2PortDropCounterPortIndex"))
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setStatus('current')
swL2PortDropCounterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setStatus('current')
swL2PortBufferFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setStatus('current')
swL2PortACLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortACLDrops.setStatus('current')
swL2PortMulticastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMulticastDrops.setStatus('current')
swL2PortVLANIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setStatus('current')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2QOSSchedulingPort"), (0, "DGS3612-L2MGMT-MIB", "swL2QOSSchedulingClassID"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
swL2QOSSchedulingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingPort.setStatus('current')
swL2QOSSchedulingClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassID.setStatus('current')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("strict", 1), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
swL2QOSSchedulingMechanismEffec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("strict", 1), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismEffec.setStatus('current')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 3, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 4, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("strict", 1), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
swL2QOSHolPreventionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setStatus('current')
swCosBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7), )
if mibBuilder.loadTexts: swCosBandwidthControlTable.setStatus('current')
swCosBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swCosBandwidthPort"), (0, "DGS3612-L2MGMT-MIB", "swCosBandwidthClassID"))
if mibBuilder.loadTexts: swCosBandwidthControlEntry.setStatus('current')
swCosBandwidthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCosBandwidthPort.setStatus('current')
swCosBandwidthClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCosBandwidthClassID.setStatus('current')
swCosBandwidthMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 10000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCosBandwidthMinRate.setStatus('current')
swCosBandwidthMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 10000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCosBandwidthMaxRate.setStatus('current')
swCpuRxRateControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 8), )
if mibBuilder.loadTexts: swCpuRxRateControlTable.setStatus('current')
swCpuRxRateControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 8, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swCpuRxClassID"))
if mibBuilder.loadTexts: swCpuRxRateControlEntry.setStatus('current')
swCpuRxClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: swCpuRxClassID.setStatus('current')
swCpuRxRateControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCpuRxRateControlStatus.setStatus('current')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 2))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 2, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 3, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkActivePorts.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 5, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 6, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2MirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5), )
if mibBuilder.loadTexts: swL2MirrorGroupTable.setStatus('current')
swL2MirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2MirrorGroupID"))
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setStatus('current')
swL2MirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2MirrorGroupID.setStatus('current')
swL2MirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setStatus('current')
swL2MirrorGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupState.setStatus('current')
swL2MirrorGroupLogicTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupLogicTargetPort.setStatus('current')
swL2MirrorGroupPortSourceIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceIngress.setStatus('current')
swL2MirrorGroupPortSourceEngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 10, 5, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupPortSourceEngress.setStatus('current')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
swL2IGMPQueryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryVersion.setStatus('current')
swL2IGMPReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPReportSuppression.setStatus('current')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 4, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPVid"), (0, "DGS3612-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
swL2IGMPRouterPortsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6), )
if mibBuilder.loadTexts: swL2IGMPRouterPortsTable.setStatus('current')
swL2IGMPRouterPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPRouterPortsVid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortsEntry.setStatus('current')
swL2IGMPRouterPortsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortsVid.setStatus('current')
swL2IGMPRouterStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterStaticPortList.setStatus('current')
swL2IGMPRouterDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterDynamicPortList.setStatus('current')
swL2IGMPRouterForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 6, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterForbiddenPortList.setStatus('current')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
swL2IGMPMulticastVlanReplaceSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIP.setStatus('current')
swL2IGMPMulticastVlanRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRangeName.setStatus('current')
swL2IGMPMulticastVlanRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("delete", 3), ("deleteAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRangeState.setStatus('current')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
swL2IGMPMulticastVlanUntagSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setStatus('current')
swL2IGMPMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setStatus('current')
swL2IGMPMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setStatus('current')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 7, 1, 13), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
swL2IGMPForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8), )
if mibBuilder.loadTexts: swL2IGMPForwardingTable.setStatus('current')
swL2IGMPForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPForwardingVid"), (0, "DGS3612-L2MGMT-MIB", "swL2IGMPForwardingSrcIp"), (0, "DGS3612-L2MGMT-MIB", "swL2IGMPForwardingGroupAddr"))
if mibBuilder.loadTexts: swL2IGMPForwardingEntry.setStatus('current')
swL2IGMPForwardingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardingVid.setStatus('current')
swL2IGMPForwardingSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardingSrcIp.setStatus('current')
swL2IGMPForwardingGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardingGroupAddr.setStatus('current')
swL2IGMPForwardingPortMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 8, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPForwardingPortMember.setStatus('current')
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DGS3612-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupRangeName"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
swL2IGMPMulticastVlanGroupRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupRangeName.setStatus('current')
swL2IGMPMulticastVlanGroupHead = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupHead.setStatus('current')
swL2IGMPMulticastVlanGroupTail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTail.setStatus('current')
swIGMPSnoopingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11), )
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setStatus('current')
swIGMPSnoopingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swIGMPSnoopingGroupVid"), (0, "DGS3612-L2MGMT-MIB", "swIGMPSnoopingGroupGroupAddr"), (0, "DGS3612-L2MGMT-MIB", "swIGMPSnoopingGroupSourceAddr"))
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setStatus('current')
swIGMPSnoopingGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setStatus('current')
swIGMPSnoopingGroupGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setStatus('current')
swIGMPSnoopingGroupSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setStatus('current')
swIGMPSnoopingGroupIncludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setStatus('current')
swIGMPSnoopingGroupExcludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 11, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setStatus('current')
swL2IGMPSnoopingStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16), )
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupTable.setStatus('current')
swL2IGMPSnoopingStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupVID"), (0, "DGS3612-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupIPaddress"))
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupEntry.setStatus('current')
swL2IGMPSnoopingStaticGroupVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupVID.setStatus('current')
swL2IGMPSnoopingStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupIPaddress.setStatus('current')
swL2IGMPSnoopingStaticGroupMemberPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupMemberPortList.setStatus('current')
swL2IGMPSnoopingStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 11, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupRowStatus.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 14, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2IpLimitedMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1), )
if mibBuilder.loadTexts: swL2IpLimitedMulticastTable.setStatus('current')
swL2IpLimitedMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2IpLimitedMulticastPortIndex"))
if mibBuilder.loadTexts: swL2IpLimitedMulticastEntry.setStatus('current')
swL2IpLimitedMulticastPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpLimitedMulticastPortIndex.setStatus('current')
swL2IpLimitedMulticastHead = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: swL2IpLimitedMulticastHead.setStatus('obsolete')
swL2IpLimitedMulticastTail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: swL2IpLimitedMulticastTail.setStatus('obsolete')
swL2IpLimitedMulticastAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastAccess.setStatus('current')
swL2IpLimitedMulticastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastState.setStatus('current')
swL2IpLimitedMulticastDelState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))))
if mibBuilder.loadTexts: swL2IpLimitedMulticastDelState.setStatus('obsolete')
swL2IpLimitedMulticastRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastRangeName.setStatus('current')
swL2IpLimitedMulticastRangeNameState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3), ("deleteAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpLimitedMulticastRangeNameState.setStatus('current')
swL2LimitedMulticastAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2), )
if mibBuilder.loadTexts: swL2LimitedMulticastAddressTable.setStatus('current')
swL2LimitedMulticastAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2LimitedMulticastAddressPort"), (0, "DGS3612-L2MGMT-MIB", "swL2LimitedMulticastAddressRangeName"))
if mibBuilder.loadTexts: swL2LimitedMulticastAddressEntry.setStatus('current')
swL2LimitedMulticastAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastAddressPort.setStatus('current')
swL2LimitedMulticastAddressRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastAddressRangeName.setStatus('current')
swL2LimitedMulticastAddressHead = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastAddressHead.setStatus('current')
swL2LimitedMulticastAddressTail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 15, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastAddressTail.setStatus('current')
swL2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1), )
if mibBuilder.loadTexts: swL2VlanTable.setStatus('current')
swL2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
swL2VlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid-vlan-type", 0), ("static-1q-vlan", 1), ("dynamic-vlan", 2), ("port-base-vlan", 3), ("protocolvlan", 4), ("double-vlan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanType.setStatus('current')
swL2VlanMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanMemberPorts.setStatus('current')
swL2VlanStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticPorts.setStatus('current')
swL2VlanStaticTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticTaggedPorts.setStatus('current')
swL2VlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanStaticUntaggedPorts.setStatus('current')
swL2VlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanForbiddenPorts.setStatus('current')
swL2VlanCurrentTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 9), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanCurrentTaggedPorts.setStatus('current')
swL2VlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 10), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanCurrentUntaggedPorts.setStatus('current')
swL2VlanAdvertisementState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertisementState.setStatus('current')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
swL2dot1vProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1), )
if mibBuilder.loadTexts: swL2dot1vProtocolGroupTable.setStatus('current')
swL2dot1vProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2dot1vProtocolTemplateFrameType"), (0, "DGS3612-L2MGMT-MIB", "swL2dot1vProtocolTemplateProtocolValue"))
if mibBuilder.loadTexts: swL2dot1vProtocolGroupEntry.setStatus('current')
swL2dot1vProtocolTemplateFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("rfc1042", 2), ("llcOther", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2dot1vProtocolTemplateFrameType.setStatus('current')
swL2dot1vProtocolTemplateProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2dot1vProtocolTemplateProtocolValue.setStatus('current')
swL2dot1vProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2dot1vProtocolGroupId.setStatus('current')
swL2dot1vProtocolGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2dot1vProtocolGroupRowStatus.setStatus('current')
swL2dot1vProtocolPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2), )
if mibBuilder.loadTexts: swL2dot1vProtocolPortTable.setStatus('current')
swL2dot1vProtocolPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2dot1vProtocolPort"), (0, "DGS3612-L2MGMT-MIB", "swL2dot1vProtocolPortGroupId"))
if mibBuilder.loadTexts: swL2dot1vProtocolPortEntry.setStatus('current')
swL2dot1vProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2dot1vProtocolPort.setStatus('current')
swL2dot1vProtocolPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2dot1vProtocolPortGroupId.setStatus('current')
swL2dot1vProtocolPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2dot1vProtocolPortGroupVid.setStatus('current')
swL2dot1vProtocolPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 18, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2dot1vProtocolPortRowStatus.setStatus('current')
swL2MulticastRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1), )
if mibBuilder.loadTexts: swL2MulticastRangeTable.setStatus('current')
swL2MulticastRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2MulticastRangeName"))
if mibBuilder.loadTexts: swL2MulticastRangeEntry.setStatus('current')
swL2MulticastRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastRangeName.setStatus('current')
swL2MulticastRangeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeHead.setStatus('current')
swL2MulticastRangeTail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeTail.setStatus('current')
swL2MulticastRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 19, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeState.setStatus('current')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 20, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0))
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0, 1)).setObjects(("DGS3612-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0, 3)).setObjects(("DGS3612-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0, 4)).setObjects(("DGS3612-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0, 5)).setObjects(("DGS3612-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3612-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 0, 6)).setObjects(("DGS3612-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3612-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 16, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24, 2, 1), ).setIndexNames((0, "DGS3612-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 70, 10, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
mibBuilder.exportSymbols("DGS3612-L2MGMT-MIB", PortList=PortList, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2IpLimitedMulticastRangeNameState=swL2IpLimitedMulticastRangeNameState, swL2IGMPMulticastVlanUntagSourcePort=swL2IGMPMulticastVlanUntagSourcePort, swL2dot1vProtocolPortGroupVid=swL2dot1vProtocolPortGroupVid, swL2VlanStaticPorts=swL2VlanStaticPorts, swIGMPSnoopingGroupExcludePortMap=swIGMPSnoopingGroupExcludePortMap, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2LoopDetectMode=swL2LoopDetectMode, swCosBandwidthClassID=swCosBandwidthClassID, swL2VlanMemberPorts=swL2VlanMemberPorts, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2IpLimitedMulticastTable=swL2IpLimitedMulticastTable, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2PortInfoTable=swL2PortInfoTable, swL2VlanCurrentTaggedPorts=swL2VlanCurrentTaggedPorts, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2PortAutoNegInfoCapabilityBits=swL2PortAutoNegInfoCapabilityBits, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swDevModuleInfoModuleID=swDevModuleInfoModuleID, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2IGMPForwardingTable=swL2IGMPForwardingTable, swL2PortMgmt=swL2PortMgmt, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2IGMPMulticastVlanRangeState=swL2IGMPMulticastVlanRangeState, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2IpLimitedMulticastAccess=swL2IpLimitedMulticastAccess, swL2IGMPMulticastVlanRangeName=swL2IGMPMulticastVlanRangeName, swL2IGMPRouterPortsVid=swL2IGMPRouterPortsVid, swL2IGMPMulticastVlanGroupRangeName=swL2IGMPMulticastVlanGroupRangeName, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2MulticastRangeName=swL2MulticastRangeName, swL2MulticastRangeHead=swL2MulticastRangeHead, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2IGMPMulticastVlanReplacePriority=swL2IGMPMulticastVlanReplacePriority, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swDevModuleInfoEntry=swDevModuleInfoEntry, swCpuRxRateControlTable=swCpuRxRateControlTable, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2macNotifyInfo=swL2macNotifyInfo, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2VlanIndex=swL2VlanIndex, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swCosBandwidthMaxRate=swCosBandwidthMaxRate, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2IGMPRobustness=swL2IGMPRobustness, swL2IGMPSnoopingStaticGroupEntry=swL2IGMPSnoopingStaticGroupEntry, swL2MirrorGroupLogicTargetPort=swL2MirrorGroupLogicTargetPort, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2TrunkType=swL2TrunkType, swL2PortDropCounterPortIndex=swL2PortDropCounterPortIndex, swL2macNotification=swL2macNotification, swL2IGMPRouterPortsTable=swL2IGMPRouterPortsTable, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swCpuRxRateControlEntry=swCpuRxRateControlEntry, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, swL2QOSSchedulingClassID=swL2QOSSchedulingClassID, swIGMPSnoopingGroupIncludePortMap=swIGMPSnoopingGroupIncludePortMap, swL2QOSSchedulingMechanismEffec=swL2QOSSchedulingMechanismEffec, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swIGMPSnoopingGroupSourceAddr=swIGMPSnoopingGroupSourceAddr, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swDevModuleInfoTable=swDevModuleInfoTable, swL2IGMPPortMap=swL2IGMPPortMap, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2DevAlarm=swL2DevAlarm, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2VlanStaticTaggedPorts=swL2VlanStaticTaggedPorts, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2IGMPForwardingGroupAddr=swL2IGMPForwardingGroupAddr, swCpuRxRateControlStatus=swCpuRxRateControlStatus, swL2IGMPForwardingVid=swL2IGMPForwardingVid, swL2MirrorGroupID=swL2MirrorGroupID, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2MultiFilterMode=swL2MultiFilterMode, swL2LimitedMulticastAddressEntry=swL2LimitedMulticastAddressEntry, swL2IpLimitedMulticastPortIndex=swL2IpLimitedMulticastPortIndex, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2TrunkMgmt=swL2TrunkMgmt, swL2QOSMgmt=swL2QOSMgmt, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swL2MirrorGroupState=swL2MirrorGroupState, swL2TrunkState=swL2TrunkState, swL2TrafficSegTable=swL2TrafficSegTable, swL2MultiFilterVid=swL2MultiFilterVid, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2IGMPReportSuppression=swL2IGMPReportSuppression, swL2IpLimitedMulticastHead=swL2IpLimitedMulticastHead, swL2VlanEntry=swL2VlanEntry, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2IGMPMulticastVlanGroupHead=swL2IGMPMulticastVlanGroupHead, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2LimitedMulticastAddressPort=swL2LimitedMulticastAddressPort, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2TrunkVLANState=swL2TrunkVLANState, swL2MACNotifyState=swL2MACNotifyState, swL2MACNotifyInterval=swL2MACNotifyInterval, swCosBandwidthMinRate=swCosBandwidthMinRate, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2PortCtrlAutoNegCapAdvertisedBits=swL2PortCtrlAutoNegCapAdvertisedBits, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swIGMPSnoopingGroupVid=swIGMPSnoopingGroupVid, swL2PortAutoNegInfoCapReceivedBits=swL2PortAutoNegInfoCapReceivedBits, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2dot1vProtocolPortTable=swL2dot1vProtocolPortTable, swL2IGMPQueryVersion=swL2IGMPQueryVersion, swIGMPSnoopingGroupEntry=swIGMPSnoopingGroupEntry, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2DevCtrlClipagingState=swL2DevCtrlClipagingState, swL2TrunkActivePorts=swL2TrunkActivePorts, swL2PortAutoNegInfoAdminStatus=swL2PortAutoNegInfoAdminStatus, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2IGMPForwardingPortMember=swL2IGMPForwardingPortMember, swL2PortAutoNegInfoEntry=swL2PortAutoNegInfoEntry, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IpLimitedMulticastTail=swL2IpLimitedMulticastTail, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2IGMPSnoopingStaticGroupIPaddress=swL2IGMPSnoopingStaticGroupIPaddress, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2IGMPQueryState=swL2IGMPQueryState, swL2QOSHolPreventionCtrl=swL2QOSHolPreventionCtrl, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2PortCtrlTable=swL2PortCtrlTable, swL2dot1vProtocolGroupRowStatus=swL2dot1vProtocolGroupRowStatus, swL2VlanForbiddenPorts=swL2VlanForbiddenPorts, VlanId=VlanId, swL2IGMPSnoopingStaticGroupVID=swL2IGMPSnoopingStaticGroupVID, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swL2TrafficSegPort=swL2TrafficSegPort, swDevModuleInfoUnitID=swDevModuleInfoUnitID, swL2VlanTable=swL2VlanTable, swL2PortSecurityMode=swL2PortSecurityMode, swL2dot1vProtocolTemplateProtocolValue=swL2dot1vProtocolTemplateProtocolValue, swL2IGMPForwardingSrcIp=swL2IGMPForwardingSrcIp, swL2NotifFirmware=swL2NotifFirmware, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swCosBandwidthControlEntry=swCosBandwidthControlEntry, swL2PortLoopOccurred=swL2PortLoopOccurred, swDevModuleInfoSerial=swDevModuleInfoSerial, swL2PortACLDrops=swL2PortACLDrops, swl2NotificationBidings=swl2NotificationBidings, swL2IGMPRouterStaticPortList=swL2IGMPRouterStaticPortList, swL2dot1vProtocolMgmt=swL2dot1vProtocolMgmt, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2PortVLANIngressDrops=swL2PortVLANIngressDrops, swL2IGMPRouterDynamicPortList=swL2IGMPRouterDynamicPortList, swCpuRxClassID=swCpuRxClassID, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2IpLimitedMulticastDelState=swL2IpLimitedMulticastDelState, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2dot1vProtocolGroupEntry=swL2dot1vProtocolGroupEntry, swL2dot1vProtocolPortRowStatus=swL2dot1vProtocolPortRowStatus, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2MulticastRangeEntry=swL2MulticastRangeEntry, swL2IpLimitedMulticastState=swL2IpLimitedMulticastState, swL2IGMPMgmt=swL2IGMPMgmt, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swIGMPSnoopingGroupGroupAddr=swIGMPSnoopingGroupGroupAddr, swL2PortInfoType=swL2PortInfoType, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2VlanAdvertisementState=swL2VlanAdvertisementState, swL2IGMPForwardingEntry=swL2IGMPForwardingEntry, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swCosBandwidthPort=swCosBandwidthPort, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2PortInfoEntry=swL2PortInfoEntry, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2IpLimitedMulticastEntry=swL2IpLimitedMulticastEntry, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2LimitedMulticastAddressHead=swL2LimitedMulticastAddressHead, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2IpLimitedMulticastMgmt=swL2IpLimitedMulticastMgmt, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2PortDropCounterTable=swL2PortDropCounterTable, swL2IGMPSnoopingStaticGroupMemberPortList=swL2IGMPSnoopingStaticGroupMemberPortList, swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2MirrorGroupEntry=swL2MirrorGroupEntry, swL2VlanName=swL2VlanName, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2TrunkMember=swL2TrunkMember, swL2IGMPMulticastVlanGroupTail=swL2IGMPMulticastVlanGroupTail, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2IGMPRouterPortsEntry=swL2IGMPRouterPortsEntry, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2PortAutoNegInfoPortIndex=swL2PortAutoNegInfoPortIndex, swL2MirrorMgmt=swL2MirrorMgmt, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swDevModuleInfoReversion=swDevModuleInfoReversion, swL2QOSSchedulingPort=swL2QOSSchedulingPort, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2MultiFilterEntry=swL2MultiFilterEntry, swIGMPSnoopingGroupTable=swIGMPSnoopingGroupTable, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2DevMgmt=swL2DevMgmt, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2LimitedMulticastAddressRangeName=swL2LimitedMulticastAddressRangeName, swL2MultiFilter=swL2MultiFilter, swL2MulticastRangeTail=swL2MulticastRangeTail, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2VlanType=swL2VlanType)
mibBuilder.exportSymbols("DGS3612-L2MGMT-MIB", swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2DevCtrl=swL2DevCtrl, swL2LimitedMulticastAddressTable=swL2LimitedMulticastAddressTable, swL2DevCtrlLedPOEState=swL2DevCtrlLedPOEState, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2IGMPMulticastVlanRemapPriority=swL2IGMPMulticastVlanRemapPriority, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2MulticastRangeTable=swL2MulticastRangeTable, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2dot1vProtocolTemplateFrameType=swL2dot1vProtocolTemplateFrameType, swL2VlanCurrentUntaggedPorts=swL2VlanCurrentUntaggedPorts, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortCtrlAutoNegRestart=swL2PortCtrlAutoNegRestart, swL2PortAutoNegInfoTable=swL2PortAutoNegInfoTable, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2PortMulticastDrops=swL2PortMulticastDrops, swL2LimitedMulticastAddressTail=swL2LimitedMulticastAddressTail, swL2dot1vProtocolGroupId=swL2dot1vProtocolGroupId, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swDevInfoBootPromVersion=swDevInfoBootPromVersion, swL2MulticastRangeMgmt=swL2MulticastRangeMgmt, swL2PortAutoNegInfoCapAdvertisedBits=swL2PortAutoNegInfoCapAdvertisedBits, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2MultiFilterTable=swL2MultiFilterTable, swCosBandwidthControlTable=swCosBandwidthControlTable, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swDevModuleInfoDescription=swDevModuleInfoDescription, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2dot1vProtocolPortEntry=swL2dot1vProtocolPortEntry, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2dot1vProtocolPort=swL2dot1vProtocolPort, swL2MirrorPortState=swL2MirrorPortState, swL2VlanMgmt=swL2VlanMgmt, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2PortDropCounterEntry=swL2PortDropCounterEntry, swL2PortBufferFullDrops=swL2PortBufferFullDrops, swL2DevInfo=swL2DevInfo, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swL2VlanStaticUntaggedPorts=swL2VlanStaticUntaggedPorts, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2TrunkIndex=swL2TrunkIndex, swDevModuleInfoModuleName=swDevModuleInfoModuleName, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2PortLoopRestart=swL2PortLoopRestart, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2MirrorGroupPortSourceIngress=swL2MirrorGroupPortSourceIngress, swL2dot1vProtocolGroupTable=swL2dot1vProtocolGroupTable, swL2IGMPVid=swL2IGMPVid, swL2PortInfoErrDisReason=swL2PortInfoErrDisReason, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2MulticastRangeState=swL2MulticastRangeState, swL2NotifyPrefix=swL2NotifyPrefix, swL2IGMPSnoopingStaticGroupRowStatus=swL2IGMPSnoopingStaticGroupRowStatus, swL2MgmtMIB=swL2MgmtMIB, swL2MirrorGroupTable=swL2MirrorGroupTable, swDevInfoFirmwareVersion=swDevInfoFirmwareVersion, swL2MirrorGroupRowStatus=swL2MirrorGroupRowStatus, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2IpLimitedMulticastRangeName=swL2IpLimitedMulticastRangeName, swL2IGMPMulticastVlanReplaceSourceIP=swL2IGMPMulticastVlanReplaceSourceIP, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2dot1vProtocolPortGroupId=swL2dot1vProtocolPortGroupId, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, MacAddress=MacAddress, swL2Notify=swL2Notify, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2IGMPSnoopingStaticGroupTable=swL2IGMPSnoopingStaticGroupTable, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2PortCtrlLockState=swL2PortCtrlLockState, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2MirrorGroupPortSourceEngress=swL2MirrorGroupPortSourceEngress, swL2IGMPRouterForbiddenPortList=swL2IGMPRouterForbiddenPortList)
