#
# PySNMP MIB module UNISYS-TIMEPLEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UNISYS-TIMEPLEX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, mgmt, Gauge32, enterprises, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Unsigned32, Bits, MibIdentifier, TimeTicks, IpAddress, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "mgmt", "Gauge32", "enterprises", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Unsigned32", "Bits", "MibIdentifier", "TimeTicks", "IpAddress", "ObjectIdentity", "iso")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
unisys_timeplex = MibIdentifier((1, 3, 6, 1, 4, 1, 16)).setLabel("unisys-timeplex")
umgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2))
umib = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1))
usystem = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 1))
uinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 2))
uat = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 3))
uip = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 4))
uicmp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 5))
utcp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 6))
uudp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 7))
uegp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 8))
uggp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 12))
urip = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 13))
usnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 14))
uhfp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 15))
uddn = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 16))
ux25 = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 17))
ufddi = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18))
ufddiSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1))
ufddiSMTStationIdGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 1))
ufddiSMTStationCfgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 2))
ufddiSMTOperationalGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 3))
ufddiMACTable = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2))
ufddiMACEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1))
ufddiMACAddressGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 1))
ufddiMACCfgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 2))
ufddiMACOperGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 3))
ufddiMACCountersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 4))
ufddiMACErrorCntrsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 5))
ufddiMACSTATUSGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 6))
ufddiPHYTable = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3))
ufddiPHYEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1))
ufddiPHYCfgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1))
tlip = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 1, 19))
tl1mib = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2))
tl1system = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 1))
tl1interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 2))
tl1at = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 3))
tl1ip = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 4))
tl1icmp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 5))
tl1tcp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 6))
tl1udp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 7))
tl1egp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 8))
tl1snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 11))
tl1bre = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 12))
tl1breConfigParams = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 1))
tl1rip = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 13))
tl1x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 14))
tl1fddi = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 15))
tl1stap = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 16))
tl1stapBridgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1))
tl1stapBridgeState = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3))
tl1idp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 17))
tl1ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 18))
tl1srtb = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 19))
tl1srtbFilterDbParams = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 6))
tl1srtbStaticFilterDbParams = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8))
tl1srtbMaskAcfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11))
tl1ospf = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 20))
tl1tok = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 2, 2, 21))
usystemAction = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reset", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usystemAction.setStatus('mandatory')
usystemReboots = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usystemReboots.setStatus('mandatory')
usystemErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usystemErrorCode.setStatus('mandatory')
uifTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifTable.setStatus('mandatory')
uifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifEntry.setStatus('mandatory')
uifEthernetArpWait = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifEthernetArpWait.setStatus('mandatory')
uifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifIpAddr.setStatus('mandatory')
uifSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifSubnetMask.setStatus('mandatory')
uifHdlcBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcBaudRate.setStatus('mandatory')
uifHdlcRto = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcRto.setStatus('mandatory')
uifHdlcAckTo = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcAckTo.setStatus('mandatory')
uifHdlcSabmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcSabmInterval.setStatus('mandatory')
uifHdlcRnrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcRnrInterval.setStatus('mandatory')
uifHdlcClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("dte-accepts-tx-and-rx-clocks", 3), ("dce-generates-tx-and-rx-clocks", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcClockType.setStatus('mandatory')
uifHdlcDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcDCE.setStatus('mandatory')
uifHdlcThrowaway = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcThrowaway.setStatus('mandatory')
uifHdlcAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifHdlcAckCount.setStatus('mandatory')
uifFddiArpWait = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uifFddiArpWait.setStatus('mandatory')
uipLogicalDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipLogicalDisconnect.setStatus('mandatory')
uipLoopback = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipLoopback.setStatus('mandatory')
uipRemoteg1 = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRemoteg1.setStatus('mandatory')
uipRemoteg2 = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRemoteg2.setStatus('mandatory')
uipNet1MaxPkt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipNet1MaxPkt.setStatus('mandatory')
uipNet2MaxPkt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipNet2MaxPkt.setStatus('mandatory')
uipRedirectTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRedirectTo.setStatus('mandatory')
uipMasker = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipMasker.setStatus('mandatory')
uipWellKnownGateway = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipWellKnownGateway.setStatus('mandatory')
uipMaxRoutePids = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uipMaxRoutePids.setStatus('mandatory')
uipRoutePidsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 11), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRoutePidsTable.setStatus('mandatory')
uipRoutePidsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 11, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRoutePidsEntry.setStatus('mandatory')
uipRoutePid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7, 8, 1))).clone(namedValues=NamedValues(("gateway-to-gateway-protocol", 3), ("routing-information-protocol", 7), ("exterior-gateway-protocol", 8), ("internet-protocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipRoutePid.setStatus('mandatory')
uipNbrStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uipNbrStaticRoutes.setStatus('mandatory')
uipStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipStaticRouteTable.setStatus('mandatory')
uipStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipStaticRouteEntry.setStatus('mandatory')
uipStaticRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uipStaticRouteNetwork.setStatus('mandatory')
uipStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipStaticRouteGateway.setStatus('mandatory')
uipStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipStaticRouteCost.setStatus('mandatory')
uipStaticRouteOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 4, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uipStaticRouteOverride.setStatus('mandatory')
utcpRetransTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpRetransTo.setStatus('mandatory')
utcpRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpRtoMin.setStatus('mandatory')
utcpRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65635))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpRtoMax.setStatus('mandatory')
utcpWakeup = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpWakeup.setStatus('mandatory')
utcpAckTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpAckTime.setStatus('mandatory')
utcpTimeToLive = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpTimeToLive.setStatus('mandatory')
utcpThruput = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpThruput.setStatus('mandatory')
utcpFlowAck = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utcpFlowAck.setStatus('mandatory')
uegpMaxNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uegpMaxNeighbors.setStatus('mandatory')
uegpNumberTrustedNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpNumberTrustedNeighbors.setStatus('mandatory')
uegpNumberNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpNumberNeighbors.setStatus('mandatory')
uegpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpNeighborTable.setStatus('mandatory')
uegpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpNeighborEntry.setStatus('mandatory')
uegpNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpNeighbor.setStatus('mandatory')
uegpAutoSysNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpAutoSysNumber.setStatus('mandatory')
uegpMinHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpMinHelloInterval.setStatus('mandatory')
uegpMinPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpMinPollInterval.setStatus('mandatory')
uegpRequestCeaseInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpRequestCeaseInterval.setStatus('mandatory')
uegpDeclareDownInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpDeclareDownInterval.setStatus('mandatory')
uegpAcquireCeaseInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpAcquireCeaseInterval.setStatus('mandatory')
uegpEnoughInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpEnoughInterval.setStatus('mandatory')
uegpPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpPurgeInterval.setStatus('mandatory')
uegpMode = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both-active-and-passive", 0), ("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpMode.setStatus('mandatory')
uegpErrorTreatment = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpErrorTreatment.setStatus('mandatory')
uegpSharedNetwork = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 8, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uegpSharedNetwork.setStatus('mandatory')
uggpEchoInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uggpEchoInterval.setStatus('mandatory')
uggpMaxNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uggpMaxNeighbors.setStatus('mandatory')
uggpNumberNeighbors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uggpNumberNeighbors.setStatus('mandatory')
uggpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uggpNeighborTable.setStatus('mandatory')
uggpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uggpNeighborEntry.setStatus('mandatory')
uggpNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 12, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uggpNeighbor.setStatus('mandatory')
usnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usnmpVersion.setStatus('mandatory')
usnmpCommunity = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 14, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usnmpCommunity.setStatus('mandatory')
usnmpRequests = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usnmpRequests.setStatus('mandatory')
usnmpTraps = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usnmpTraps.setStatus('mandatory')
usnmpForwardTraps = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usnmpForwardTraps.setStatus('mandatory')
uhfpMaxMsg = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 1420))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uhfpMaxMsg.setStatus('mandatory')
uhfpPad = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uhfpPad.setStatus('mandatory')
uhfpSwap = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uhfpSwap.setStatus('mandatory')
uddnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uddnTimeout.setStatus('mandatory')
uddnMsgout = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uddnMsgout.setStatus('mandatory')
uddnHipUp = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnHipUp.setStatus('mandatory')
uddnHdhUp = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnHdhUp.setStatus('mandatory')
uddnLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnLinkUp.setStatus('mandatory')
uddnTotalQ = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnTotalQ.setStatus('mandatory')
uddnConnections = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnConnections.setStatus('mandatory')
uddnLinkDownTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnLinkDownTo.setStatus('mandatory')
uddnRcvIncomplete = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnRcvIncomplete.setStatus('mandatory')
uddnConnectionsReused = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnConnectionsReused.setStatus('mandatory')
uddnHdhWentDown = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnHdhWentDown.setStatus('mandatory')
uddnLinkWentDown = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnLinkWentDown.setStatus('mandatory')
uddnLeaderErrs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnLeaderErrs.setStatus('mandatory')
uddnPSNGoingDown = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnPSNGoingDown.setStatus('mandatory')
uddnDeadHostSTATUS = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnDeadHostSTATUS.setStatus('mandatory')
uddnIfReset = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 16, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uddnIfReset.setStatus('mandatory')
ux25IfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 17, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25IfTable.setStatus('mandatory')
ux25IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 17, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25IfEntry.setStatus('mandatory')
ux25Service = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 7))).clone(namedValues=NamedValues(("basic-service", 0), ("standard-service", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25Service.setStatus('mandatory')
ux25Window = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25Window.setStatus('mandatory')
ux25PktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25PktSize.setStatus('mandatory')
ufddiSMTStationId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTStationId.setStatus('mandatory')
ufddiSMTStationType = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("concentrator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTStationType.setStatus('mandatory')
ufddiSMTVersionId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTVersionId.setStatus('mandatory')
ufddiSMTMACCount = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTMACCount.setStatus('mandatory')
ufddiSMTAttachCount = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTAttachCount.setStatus('mandatory')
ufddiSMTSpurCount = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTSpurCount.setStatus('mandatory')
ufddiSMTDasScmState = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("isolated", 1), ("wrap-a", 2), ("wrap-b", 3), ("thru", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiSMTDasScmState.setStatus('mandatory')
ufddiMACSMTLongAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACSMTLongAddr.setStatus('mandatory')
ufddiMACShortGrpAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACShortGrpAddr.setStatus('mandatory')
ufddiMACUpstreamNeighbor = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACUpstreamNeighbor.setStatus('mandatory')
ufddiMACDownstreamNeighbor = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACDownstreamNeighbor.setStatus('mandatory')
ufddiMACResourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACResourceIndex.setStatus('mandatory')
ufddiMACConnectedResId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACConnectedResId.setStatus('mandatory')
ufddiMACTReq = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACTReq.setStatus('mandatory')
ufddiMACTMax = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACTMax.setStatus('mandatory')
ufddiMACTvxValue = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACTvxValue.setStatus('mandatory')
ufddiMACTMin = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiMACTMin.setStatus('mandatory')
ufddiMACReceiveCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACReceiveCt.setStatus('mandatory')
ufddiMACTransmitCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACTransmitCt.setStatus('mandatory')
ufddiMACTokenCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACTokenCt.setStatus('mandatory')
ufddiMACTvxExpiredCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACTvxExpiredCt.setStatus('mandatory')
ufddiMACNotCopiedCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACNotCopiedCt.setStatus('mandatory')
ufddiMACLateCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACLateCt.setStatus('mandatory')
ufddiMACReceiveOverflowCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACReceiveOverflowCt.setStatus('mandatory')
ufddiMACRingOpCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACRingOpCt.setStatus('mandatory')
ufddiMACEnteredBeaconCt = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 2, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiMACEnteredBeaconCt.setStatus('mandatory')
ufddiPHYType = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("m", 3), ("s", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYType.setStatus('mandatory')
ufddiPHYConnectState = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYConnectState.setStatus('mandatory')
ufddiPHYRemotePHYType = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("m", 3), ("s", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYRemotePHYType.setStatus('mandatory')
ufddiPHYRemoteMACIndicated = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYRemoteMACIndicated.setStatus('mandatory')
ufddiPHYResourceIndex = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYResourceIndex.setStatus('mandatory')
ufddiPHYConnectedResId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufddiPHYConnectedResId.setStatus('mandatory')
ufddiPHYAction = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufddiPHYAction.setStatus('mandatory')
tlipLogicalDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipLogicalDisconnect.setStatus('mandatory')
tlipLoopback = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipLoopback.setStatus('mandatory')
tlipRedirectTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRedirectTo.setStatus('mandatory')
tlipMasker = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipMasker.setStatus('mandatory')
tlipWellKnownGateway = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipWellKnownGateway.setStatus('mandatory')
tlipMaxRoutePids = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlipMaxRoutePids.setStatus('mandatory')
tlipRoutePidsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 7), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRoutePidsTable.setStatus('mandatory')
tlipRoutePidsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 7, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRoutePidsEntry.setStatus('mandatory')
tlipRoutePid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7, 8, 1))).clone(namedValues=NamedValues(("gateway-to-gateway-protocol", 3), ("routing-information-protocol", 7), ("exterior-gateway-protocol", 8), ("internet-protocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRoutePid.setStatus('mandatory')
tlipNbrStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlipNbrStaticRoutes.setStatus('mandatory')
tlipStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipStaticRouteTable.setStatus('mandatory')
tlipStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipStaticRouteEntry.setStatus('mandatory')
tlipStaticRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlipStaticRouteNetwork.setStatus('mandatory')
tlipStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipStaticRouteGateway.setStatus('mandatory')
tlipStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipStaticRouteCost.setStatus('mandatory')
tlipStaticRouteOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipStaticRouteOverride.setStatus('mandatory')
tlipRemotegTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 10), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRemotegTable.setStatus('mandatory')
tlipRemotegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 10, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRemotegEntry.setStatus('mandatory')
tlipRemoteg = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipRemoteg.setStatus('mandatory')
tlipNetMaxPktTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 11), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipNetMaxPktTable.setStatus('mandatory')
tlipNetMaxPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 11, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipNetMaxPktEntry.setStatus('mandatory')
tlipNetMaxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlipNetMaxPkt.setStatus('mandatory')
tl1systemAction = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reset", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1systemAction.setStatus('mandatory')
tl1systemReboots = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1systemReboots.setStatus('mandatory')
tl1systemErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1systemErrorCode.setStatus('mandatory')
tl1ifTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifTable.setStatus('mandatory')
tl1ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifEntry.setStatus('mandatory')
tl1ifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifIpAddr.setStatus('mandatory')
tl1ifSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifSubnetMask.setStatus('mandatory')
tl1ifProxyARP = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifProxyARP.setStatus('mandatory')
tl1ifType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-configured", 0), ("ethernet-II", 1), ("iso802-3", 2), ("fddi", 3), ("lapb", 4), ("x25", 5), ("ppp", 6), ("token-ring", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifType.setStatus('mandatory')
tl1ifHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ifHardwareAddress.setStatus('mandatory')
tl1ipLogicalDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipLogicalDisconnect.setStatus('mandatory')
tl1ipLoopback = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipLoopback.setStatus('mandatory')
tl1ipRedirectTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipRedirectTo.setStatus('mandatory')
tl1ipMaxRoutePids = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ipMaxRoutePids.setStatus('mandatory')
tl1ipRoutePidsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 5), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipRoutePidsTable.setStatus('mandatory')
tl1ipRoutePidsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 5, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipRoutePidsEntry.setStatus('mandatory')
tl1ipRoutePid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23, 7, 8, 1, 0))).clone(namedValues=NamedValues(("open-Shortest-Path-First", 23), ("routing-Information-Protocol", 7), ("exterior-Gateway-Protocol", 8), ("internet-Protocol", 1), ("static-Routes", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipRoutePid.setStatus('mandatory')
tl1ipNbrStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipNbrStaticRoutes.setStatus('mandatory')
tl1ipStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteTable.setStatus('mandatory')
tl1ipStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteEntry.setStatus('mandatory')
tl1ipStaticRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ipStaticRouteNetwork.setStatus('mandatory')
tl1ipStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteGateway.setStatus('mandatory')
tl1ipStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteCost.setStatus('mandatory')
tl1ipStaticRouteOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteOverride.setStatus('mandatory')
tl1ipStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipStaticRouteMask.setStatus('mandatory')
tl1ipConfigIntfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 8), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipConfigIntfTable.setStatus('mandatory')
tl1ipConfigIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 8, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipConfigIntfEntry.setStatus('mandatory')
tl1ipRemoteg = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipRemoteg.setStatus('mandatory')
tl1ipNetMaxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipNetMaxPkt.setStatus('mandatory')
tl1ipMasker = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipMasker.setStatus('mandatory')
tl1ipNumFilters = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ipNumFilters.setStatus('mandatory')
tl1ipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterTable.setStatus('mandatory')
tl1ipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterEntry.setStatus('mandatory')
tl1ipFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterSrcMask.setStatus('mandatory')
tl1ipFilterSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterSrcNet.setStatus('mandatory')
tl1ipFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterDstMask.setStatus('mandatory')
tl1ipFilterDstNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterDstNet.setStatus('mandatory')
tl1ipFilterNbrExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterNbrExceptions.setStatus('mandatory')
tl1ipFilterExceptionTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 11), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterExceptionTable.setStatus('mandatory')
tl1ipFilterExceptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 11, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterExceptionEntry.setStatus('mandatory')
tl1ipFilterExceptionSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterExceptionSrcNet.setStatus('mandatory')
tl1ipFilterExceptionDstNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 4, 11, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ipFilterExceptionDstNet.setStatus('mandatory')
tl1tcpRetransTo = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpRetransTo.setStatus('mandatory')
tl1tcpRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpRtoMin.setStatus('mandatory')
tl1tcpRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65635))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpRtoMax.setStatus('mandatory')
tl1tcpWakeup = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpWakeup.setStatus('mandatory')
tl1tcpAckTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpAckTime.setStatus('mandatory')
tl1tcpTimeToLive = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpTimeToLive.setStatus('mandatory')
tl1tcpThruput = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpThruput.setStatus('mandatory')
tl1tcpFlowAck = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tcpFlowAck.setStatus('mandatory')
tl1egpMaxNbrs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1egpMaxNbrs.setStatus('mandatory')
tl1egpNumberTrustedNbrs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpNumberTrustedNbrs.setStatus('mandatory')
tl1egpNumberNbrs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpNumberNbrs.setStatus('mandatory')
tl1egpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpNbrTable.setStatus('mandatory')
tl1egpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpNbrEntry.setStatus('mandatory')
tl1egpNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpNbr.setStatus('mandatory')
tl1egpAutoSysNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpAutoSysNumber.setStatus('mandatory')
tl1egpMinHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpMinHelloInterval.setStatus('mandatory')
tl1egpMinPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpMinPollInterval.setStatus('mandatory')
tl1egpRequestCeaseInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpRequestCeaseInterval.setStatus('mandatory')
tl1egpDeclareDownInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpDeclareDownInterval.setStatus('mandatory')
tl1egpAcquireCeaseInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpAcquireCeaseInterval.setStatus('mandatory')
tl1egpEnoughInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpEnoughInterval.setStatus('mandatory')
tl1egpPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpPurgeInterval.setStatus('mandatory')
tl1egpMode = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("active-and-passive", 0), ("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpMode.setStatus('mandatory')
tl1egpErrorTreatment = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpErrorTreatment.setStatus('mandatory')
tl1egpSharedNetwork = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 8, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1egpSharedNetwork.setStatus('mandatory')
tl1snmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1snmpVersion.setStatus('mandatory')
tl1snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpTrapTable.setStatus('mandatory')
tl1snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpTrapEntry.setStatus('mandatory')
tl1snmpTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpTrapAddress.setStatus('mandatory')
tl1snmpForwardTraps = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("forward", 2), ("dont-forward", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpForwardTraps.setStatus('mandatory')
tl1snmpLastTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1snmpLastTrapMessage.setStatus('mandatory')
tl1snmpNMSTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 5), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpNMSTable.setStatus('mandatory')
tl1snmpNMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 5, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpNMSEntry.setStatus('mandatory')
tl1snmpNMSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 11, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1snmpNMSAddress.setStatus('mandatory')
tl1breBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breBridgeNumber.setStatus('mandatory')
tl1breBridgeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breBridgeIpAddress.setStatus('mandatory')
tl1breForwardTableAgeingTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breForwardTableAgeingTime.setStatus('mandatory')
tl1breNumConfigBrdgLstEntries = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breNumConfigBrdgLstEntries.setStatus('mandatory')
tl1breConfigBridgeListTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breConfigBridgeListTable.setStatus('mandatory')
tl1breCBridgeListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breCBridgeListEntry.setStatus('mandatory')
tl1breCblBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breCblBridgeNumber.setStatus('mandatory')
tl1breCblVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breCblVLanId.setStatus('mandatory')
tl1breCblSrBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breCblSrBridgeNumber.setStatus('mandatory')
tl1breCblIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1breCblIpAddress.setStatus('mandatory')
tl1breBridgeListTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBridgeListTable.setStatus('mandatory')
tl1breBridgeListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBridgeListEntry.setStatus('mandatory')
tl1breBlBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBlBridgeNumber.setStatus('mandatory')
tl1breBlVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBlVLanId.setStatus('mandatory')
tl1breBlSrBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBlSrBridgeNumber.setStatus('mandatory')
tl1breBlIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breBlIpAddress.setStatus('mandatory')
tl1breForwardTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breForwardTable.setStatus('mandatory')
tl1breForwardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 4, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breForwardTableEntry.setStatus('mandatory')
tl1breFtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breFtMacAddress.setStatus('mandatory')
tl1breFtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breFtIpAddress.setStatus('mandatory')
tl1breStatTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breStatTable.setStatus('mandatory')
tl1breStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breStatEntry.setStatus('mandatory')
tl1breInTSFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breInTSFs.setStatus('mandatory')
tl1breInSRFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breInSRFs.setStatus('mandatory')
tl1breInEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breInEFs.setStatus('mandatory')
tl1breInBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breInBPDUs.setStatus('mandatory')
tl1breInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breInErrors.setStatus('mandatory')
tl1breOutTSFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breOutTSFs.setStatus('mandatory')
tl1breOutSRFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breOutSRFs.setStatus('mandatory')
tl1breOutEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breOutEFs.setStatus('mandatory')
tl1breOutBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 12, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1breOutBPDUs.setStatus('mandatory')
tl1ripInPkts = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripInPkts.setStatus('mandatory')
tl1ripOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripOutPkts.setStatus('mandatory')
tl1ripBadSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadSize.setStatus('mandatory')
tl1ripBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadVersion.setStatus('mandatory')
tl1ripNonZero = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripNonZero.setStatus('mandatory')
tl1ripBadFamily = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadFamily.setStatus('mandatory')
tl1ripBadPort = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadPort.setStatus('mandatory')
tl1ripBadMetric = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadMetric.setStatus('mandatory')
tl1ripBadAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadAddr.setStatus('mandatory')
tl1ripBadCommand = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadCommand.setStatus('mandatory')
tl1ripBadClass = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadClass.setStatus('mandatory')
tl1ripBadNbr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripBadNbr.setStatus('mandatory')
tl1ripOwnAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ripOwnAddr.setStatus('mandatory')
tl1ripConfigTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripConfigTable.setStatus('mandatory')
tl1ripConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripConfigEntry.setStatus('mandatory')
tl1ripMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("silent", 2), ("fully-operational", 3), ("deaf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripMode.setStatus('mandatory')
tl1ripSimple = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("simple-split-horizon", 2), ("poisoned-reverse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripSimple.setStatus('mandatory')
tl1ripAdverStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("advertise", 2), ("dont-advertise", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripAdverStatic.setStatus('mandatory')
tl1ripAdverIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("advertise", 2), ("dont-advertise", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripAdverIntf.setStatus('mandatory')
tl1ripHolddown = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 13, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ripHolddown.setStatus('mandatory')
tl1x25IfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1x25IfTable.setStatus('mandatory')
tl1x25IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1x25IfEntry.setStatus('mandatory')
tl1x25InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25InPkts.setStatus('mandatory')
tl1x25OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25OutPkts.setStatus('mandatory')
tl1x25GFI = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25GFI.setStatus('mandatory')
tl1x25PktInv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PktInv.setStatus('mandatory')
tl1x25PinvR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvR1.setStatus('mandatory')
tl1x25PinvR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvR2.setStatus('mandatory')
tl1x25PinvR3 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvR3.setStatus('mandatory')
tl1x25PinvP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP1.setStatus('mandatory')
tl1x25PinvP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP2.setStatus('mandatory')
tl1x25PinvP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP3.setStatus('mandatory')
tl1x25PinvP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP4.setStatus('mandatory')
tl1x25PinvP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP5.setStatus('mandatory')
tl1x25PinvP6 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP6.setStatus('mandatory')
tl1x25PinvP7 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvP7.setStatus('mandatory')
tl1x25PinvD1 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvD1.setStatus('mandatory')
tl1x25PinvD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvD2.setStatus('mandatory')
tl1x25PinvD3 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PinvD3.setStatus('mandatory')
tl1x25PktLong = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PktLong.setStatus('mandatory')
tl1x25PktShort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25PktShort.setStatus('mandatory')
tl1x25CallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25CallingAddr.setStatus('mandatory')
tl1x25CalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25CalledAddr.setStatus('mandatory')
tl1x25CallBad = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25CallBad.setStatus('mandatory')
tl1x25FacParam = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25FacParam.setStatus('mandatory')
tl1x25FacCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25FacCode.setStatus('mandatory')
tl1x25BadPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25BadPkt.setStatus('mandatory')
tl1x25RejInv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25RejInv.setStatus('mandatory')
tl1x25LcRestr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25LcRestr.setStatus('mandatory')
tl1x25IntrCPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25IntrCPkt.setStatus('mandatory')
tl1x25CallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25CallTimer.setStatus('mandatory')
tl1x25ResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1x25ResetTimer.setStatus('mandatory')
tl1x25Service = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic-service", 1), ("standard-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1x25Service.setStatus('mandatory')
tl1x25Window = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1x25Window.setStatus('mandatory')
tl1x25PktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 14, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1x25PktSize.setStatus('mandatory')
tl1fddiMACStatTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACStatTable.setStatus('mandatory')
tl1fddiMACStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACStatEntry.setStatus('mandatory')
tl1fddiMACRcvAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRcvAbort.setStatus('mandatory')
tl1fddiMACRcvOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRcvOverflow.setStatus('mandatory')
tl1fddiMACRcvUnderflow = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRcvUnderflow.setStatus('mandatory')
tl1fddiMACRbcCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRbcCollision.setStatus('mandatory')
tl1fddiMACTxSyncChain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxSyncChain.setStatus('mandatory')
tl1fddiMACTxAsyncChain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxAsyncChain.setStatus('mandatory')
tl1fddiMACTxSyncFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxSyncFrm.setStatus('mandatory')
tl1fddiMACTxAsyncFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxAsyncFrm.setStatus('mandatory')
tl1fddiMACTxSyncDone = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxSyncDone.setStatus('mandatory')
tl1fddiMACTxAsyncDone = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxAsyncDone.setStatus('mandatory')
tl1fddiMACTxBufEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxBufEmpty.setStatus('mandatory')
tl1fddiMACTxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTxAbort.setStatus('mandatory')
tl1fddiMACRxFrmsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRxFrmsRcvd.setStatus('mandatory')
tl1fddiMACRxSmallGap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRxSmallGap.setStatus('mandatory')
tl1fddiMACDpcCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACDpcCollision.setStatus('mandatory')
tl1fddiMACBadSyncPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACBadSyncPtr.setStatus('mandatory')
tl1fddiMACBadAsyncPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACBadAsyncPtr.setStatus('mandatory')
tl1fddiMACOtherBecRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACOtherBecRcvd.setStatus('mandatory')
tl1fddiMACOwnBecRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACOwnBecRcvd.setStatus('mandatory')
tl1fddiMACHighClmRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACHighClmRcvd.setStatus('mandatory')
tl1fddiMACLowClmRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACLowClmRcvd.setStatus('mandatory')
tl1fddiMACWonClaimBid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACWonClaimBid.setStatus('mandatory')
tl1fddiMACPktsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACPktsDetected.setStatus('mandatory')
tl1fddiMACTokenCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTokenCt.setStatus('mandatory')
tl1fddiMACLateCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACLateCt.setStatus('mandatory')
tl1fddiMACTvxExpiredCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTvxExpiredCt.setStatus('mandatory')
tl1fddiMACEnterBeacontCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACEnterBeacontCt.setStatus('mandatory')
tl1fddiMACEnterClaimCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACEnterClaimCt.setStatus('mandatory')
tl1fddiMACMultiTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACMultiTokens.setStatus('mandatory')
tl1fddiMACNotCopiedCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACNotCopiedCt.setStatus('mandatory')
tl1fddiMACDuplicateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACDuplicateAddr.setStatus('mandatory')
tl1fddiMACRingOpCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACRingOpCt.setStatus('mandatory')
tl1fddiMACFrameCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACFrameCt.setStatus('mandatory')
tl1fddiMACLostCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACLostCt.setStatus('mandatory')
tl1fddiMACErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACErrorCt.setStatus('mandatory')
tl1fddiMACOutOfBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACOutOfBuf.setStatus('mandatory')
tl1fddiMACReceiveCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACReceiveCt.setStatus('mandatory')
tl1fddiMACTransmitCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTransmitCt.setStatus('mandatory')
tl1fddiMACInternalErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACInternalErrorCt.setStatus('mandatory')
tl1fddiMACTneg = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiMACTneg.setStatus('mandatory')
tl1fddiSMTStnStateTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnStateTable.setStatus('mandatory')
tl1fddiSMTStnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnStateEntry.setStatus('mandatory')
tl1fddiSMTStnType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("concentrator", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnType.setStatus('mandatory')
tl1fddiSMTVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTVersionId.setStatus('mandatory')
tl1fddiSMTMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTMACCount.setStatus('mandatory')
tl1fddiSMTAttachCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTAttachCount.setStatus('mandatory')
tl1fddiSMTMasterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTMasterCount.setStatus('mandatory')
tl1fddiSMTDasScmState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("isolated", 1), ("wrap-a", 2), ("wrap-b", 3), ("thru", 4), ("cleave-a", 6), ("cleave-b", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTDasScmState.setStatus('mandatory')
tl1fddiSMTStnId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnId.setStatus('mandatory')
tl1fddiPHYStateTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYStateTable.setStatus('mandatory')
tl1fddiPHYStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYStateEntry.setStatus('mandatory')
tl1fddiPHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYType.setStatus('mandatory')
tl1fddiPHYConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYConnectState.setStatus('mandatory')
tl1fddiPHYRemotePHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("s", 3), ("m", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYRemotePHYType.setStatus('mandatory')
tl1fddiPHYRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYRemoteMACIndicated.setStatus('mandatory')
tl1fddiPHYResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYResourceIndex.setStatus('mandatory')
tl1fddiPHYConnectedResId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiPHYConnectedResId.setStatus('mandatory')
tl1fddiSMTOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTOperationalTable.setStatus('mandatory')
tl1fddiSMTOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTOperationalEntry.setStatus('mandatory')
tl1fddiSMTLinkErrorRateCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTLinkErrorRateCutoff.setStatus('mandatory')
tl1fddiSMTLinkErrorRateAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTLinkErrorRateAlarm.setStatus('mandatory')
tl1fddiSMTByPassSwitchPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTByPassSwitchPresent.setStatus('mandatory')
tl1fddiSMTAttachConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cleave-A", 1), ("cleave-B", 2), ("dualattach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiSMTAttachConfiguration.setStatus('mandatory')
tl1fddiMACOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACOperationalTable.setStatus('mandatory')
tl1fddiMACOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACOperationalEntry.setStatus('mandatory')
tl1fddiMACTReq = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 335540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACTReq.setStatus('mandatory')
tl1fddiMACTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 335540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACTMax.setStatus('mandatory')
tl1fddiMACTvxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACTvxValue.setStatus('mandatory')
tl1fddiMACTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 335540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACTMin.setStatus('mandatory')
tl1fddiMACRcvThrot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiMACRcvThrot.setStatus('mandatory')
tl1fddiPHYOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 6), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiPHYOperationalTable.setStatus('mandatory')
tl1fddiPHYOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 6, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiPHYOperationalEntry.setStatus('mandatory')
tl1fddiPHYAction = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1fddiPHYAction.setStatus('mandatory')
tl1fddiSMTNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTNeighborTable.setStatus('mandatory')
tl1fddiSMTNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 7, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTNeighborEntry.setStatus('mandatory')
tl1fddiSMTStnUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnUpstreamNbr.setStatus('mandatory')
tl1fddiSMTStnDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 15, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1fddiSMTStnDownstreamNbr.setStatus('mandatory')
tl1stapSpanningTreeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapSpanningTreeEnabled.setStatus('mandatory')
tl1stapCMaxBridgeTransDelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCMaxBridgeTransDelay.setStatus('mandatory')
tl1stapCMaxBpduTransDelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCMaxBpduTransDelay.setStatus('mandatory')
tl1stapCBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCBridgeHelloTime.setStatus('mandatory')
tl1stapCBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCBridgeMaxAge.setStatus('mandatory')
tl1stapCForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCForwardDelay.setStatus('mandatory')
tl1stapCBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCBridgePriority.setStatus('mandatory')
tl1stapPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapPortConfigTable.setStatus('mandatory')
tl1stapPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapPortConfigEntry.setStatus('mandatory')
tl1stapCPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCPortState.setStatus('mandatory')
tl1stapCPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCPortPriority.setStatus('mandatory')
tl1stapCPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1stapCPathCost.setStatus('mandatory')
tl1stapBridgeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapBridgeIdentifier.setStatus('mandatory')
tl1stapTimeSinceTopChange = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapTimeSinceTopChange.setStatus('mandatory')
tl1stapTopologyChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapTopologyChangeCount.setStatus('mandatory')
tl1stapTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapTopologyChange.setStatus('mandatory')
tl1stapDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapDesignatedRoot.setStatus('mandatory')
tl1stapRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapRootPathCost.setStatus('mandatory')
tl1stapRootPort = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapRootPort.setStatus('mandatory')
tl1stapMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapMaxAge.setStatus('mandatory')
tl1stapHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapHelloTime.setStatus('mandatory')
tl1stapForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapForwardDelay.setStatus('mandatory')
tl1stapBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapBridgeMaxAge.setStatus('mandatory')
tl1stapBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapBridgeHelloTime.setStatus('mandatory')
tl1stapBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapBridgeForwardDelay.setStatus('mandatory')
tl1stapHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapHoldTime.setStatus('mandatory')
tl1stapPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPortStateTable.setStatus('mandatory')
tl1stapPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPortStateEntry.setStatus('mandatory')
tl1stapPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPortIdentifier.setStatus('mandatory')
tl1stapPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("listening", 1), ("learning", 2), ("forwarding", 3), ("blocking", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPortState.setStatus('mandatory')
tl1stapPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPathCost.setStatus('mandatory')
tl1stapPDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPDesignatedRoot.setStatus('mandatory')
tl1stapPDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPDesignatedCost.setStatus('mandatory')
tl1stapPDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPDesignatedBridge.setStatus('mandatory')
tl1stapPDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPDesignatedPort.setStatus('mandatory')
tl1stapPTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPTopologyChangeAck.setStatus('mandatory')
tl1stapPConfigPending = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 16, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1stapPConfigPending.setStatus('mandatory')
tl1idpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpInterfaceTable.setStatus('mandatory')
tl1idpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpInterfaceEntry.setStatus('mandatory')
tl1idpRouteSupplier = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpRouteSupplier.setStatus('mandatory')
tl1idpGenChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpGenChecksum.setStatus('mandatory')
tl1idpBroadcastInterval = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpBroadcastInterval.setStatus('mandatory')
tl1idpRouteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpRouteTimeout.setStatus('mandatory')
tl1idpWellKnownGatewayNet = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpWellKnownGatewayNet.setStatus('mandatory')
tl1idpWellKnownGatewayHost = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpWellKnownGatewayHost.setStatus('mandatory')
tl1idpNbrStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNbrStaticRoutes.setStatus('mandatory')
tl1idpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteTable.setStatus('mandatory')
tl1idpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteEntry.setStatus('mandatory')
tl1idpStaticRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpStaticRouteNetwork.setStatus('mandatory')
tl1idpStaticRouteGatewayNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteGatewayNet.setStatus('mandatory')
tl1idpStaticRouteGatewayHost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteGatewayHost.setStatus('mandatory')
tl1idpStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteCost.setStatus('mandatory')
tl1idpStaticRouteOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpStaticRouteOverride.setStatus('mandatory')
tl1idpNbrFilters = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNbrFilters.setStatus('mandatory')
tl1idpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterTable.setStatus('mandatory')
tl1idpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterEntry.setStatus('mandatory')
tl1idpFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterSourceMask.setStatus('mandatory')
tl1idpFilterSourceNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterSourceNet.setStatus('mandatory')
tl1idpFilterSourceHost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterSourceHost.setStatus('mandatory')
tl1idpFilterDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterDestinationMask.setStatus('mandatory')
tl1idpFilterDestinationNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterDestinationNet.setStatus('mandatory')
tl1idpFilterDestinationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterDestinationHost.setStatus('mandatory')
tl1idpFilterNbrExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterNbrExceptions.setStatus('mandatory')
tl1idpFilterExceptionTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionTable.setStatus('mandatory')
tl1idpFilterExceptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionEntry.setStatus('mandatory')
tl1idpFilterExceptionSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionSrcNet.setStatus('mandatory')
tl1idpFilterExceptionSrcHost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionSrcHost.setStatus('mandatory')
tl1idpFilterExceptionDstNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionDstNet.setStatus('mandatory')
tl1idpFilterExceptionDstHost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpFilterExceptionDstHost.setStatus('mandatory')
tl1idpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gateway-thus-forward", 1), ("host-thus-dont-forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpForwarding.setStatus('mandatory')
tl1idpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInReceives.setStatus('mandatory')
tl1idpInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInHdrErrors.setStatus('mandatory')
tl1idpForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpForwDatagrams.setStatus('mandatory')
tl1idpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpOutNoRoutes.setStatus('mandatory')
tl1idpNumStatic = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpNumStatic.setStatus('mandatory')
tl1idpBadSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadSize.setStatus('mandatory')
tl1idpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInMsgs.setStatus('mandatory')
tl1idpErrInEchos = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInEchos.setStatus('mandatory')
tl1idpInEchos = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInEchos.setStatus('mandatory')
tl1idpInEchoReply = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInEchoReply.setStatus('mandatory')
tl1idpOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpOutEchoReps.setStatus('mandatory')
tl1idpErrInUnspecified = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInUnspecified.setStatus('mandatory')
tl1idpErrInChecksum = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInChecksum.setStatus('mandatory')
tl1idpErrInSocket = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInSocket.setStatus('mandatory')
tl1idpErrInResources = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInResources.setStatus('mandatory')
tl1idpErrInNohost = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInNohost.setStatus('mandatory')
tl1idpErrInMaxhops = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInMaxhops.setStatus('mandatory')
tl1idpErrInSizetoobig = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInSizetoobig.setStatus('mandatory')
tl1idpErrInErrors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrInErrors.setStatus('mandatory')
tl1idpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInErrors.setStatus('mandatory')
tl1idpErrOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutMsgs.setStatus('mandatory')
tl1idpErrOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutErrors.setStatus('mandatory')
tl1idpErrOutUnspecified = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutUnspecified.setStatus('mandatory')
tl1idpErrOutChecksum = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutChecksum.setStatus('mandatory')
tl1idpErrOutSocket = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutSocket.setStatus('mandatory')
tl1idpErrOutResources = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutResources.setStatus('mandatory')
tl1idpErrOutNohost = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutNohost.setStatus('mandatory')
tl1idpErrOutMaxhops = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutMaxhops.setStatus('mandatory')
tl1idpErrOutSizetoobig = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpErrOutSizetoobig.setStatus('mandatory')
tl1idpInOwnAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInOwnAddr.setStatus('mandatory')
tl1idpInNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpInNoRoutes.setStatus('mandatory')
tl1idpFilter = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpFilter.setStatus('mandatory')
tl1idpHashHit = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpHashHit.setStatus('mandatory')
tl1idpHashMiss = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpHashMiss.setStatus('mandatory')
tl1idpBadMetric = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadMetric.setStatus('mandatory')
tl1idpBadAlloc = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadAlloc.setStatus('mandatory')
tl1idpBadNbr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadNbr.setStatus('mandatory')
tl1idpBadCommand = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadCommand.setStatus('mandatory')
tl1idpBadAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1idpBadAddr.setStatus('mandatory')
tl1idpNetworkIntfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 51), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNetworkIntfTable.setStatus('mandatory')
tl1idpNetworkIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 51, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNetworkIntfEntry.setStatus('mandatory')
tl1idpNetworkMaximumPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 51, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNetworkMaximumPacket.setStatus('mandatory')
tl1idpNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 17, 51, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1idpNetworkAddress.setStatus('mandatory')
tl1pppInfoTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppInfoTable.setStatus('mandatory')
tl1pppInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppInfoEntry.setStatus('mandatory')
tl1pppLcpAO = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppLcpAO.setStatus('mandatory')
tl1pppIpcpAO = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppIpcpAO.setStatus('mandatory')
tl1pppIdpcpAO = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppIdpcpAO.setStatus('mandatory')
tl1pppIpxcpAO = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppIpxcpAO.setStatus('mandatory')
tl1pppLqdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppLqdTimeout.setStatus('mandatory')
tl1pppPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppPhaseTable.setStatus('mandatory')
tl1pppPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppPhaseEntry.setStatus('mandatory')
tl1pppCrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppCrCount.setStatus('mandatory')
tl1pppTrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppTrCount.setStatus('mandatory')
tl1pppCtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppCtTimeout.setStatus('mandatory')
tl1pppRsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppRsTimeout.setStatus('mandatory')
tl1pppStatTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppStatTable.setStatus('mandatory')
tl1pppStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1pppStatEntry.setStatus('mandatory')
tl1pppBadProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadProtocol.setStatus('mandatory')
tl1pppBadAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadAddress.setStatus('mandatory')
tl1pppBadLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadLcp.setStatus('mandatory')
tl1pppBadIpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadIpcp.setStatus('mandatory')
tl1pppBadIdpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadIdpcp.setStatus('mandatory')
tl1pppBadIpxcp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppBadIpxcp.setStatus('mandatory')
tl1pppNumCrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppNumCrSent.setStatus('mandatory')
tl1pppNumCrRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppNumCrRecd.setStatus('mandatory')
tl1pppNumTrRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 18, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1pppNumTrRecd.setStatus('mandatory')
tl1srtbInternalLanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbInternalLanEnabled.setStatus('mandatory')
tl1srtbInternalLanId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbInternalLanId.setStatus('mandatory')
tl1srtbUpTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbUpTime.setStatus('mandatory')
tl1srtbPortParamsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbPortParamsTable.setStatus('mandatory')
tl1srtbPortParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbPortParamsEntry.setStatus('mandatory')
tl1srtbBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbBridgeNumber.setStatus('mandatory')
tl1srtbRoutingType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("tb", 0), ("srt", 1), ("sr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbRoutingType.setStatus('mandatory')
tl1srtbLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbLanId.setStatus('mandatory')
tl1srtbIsVLan = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbIsVLan.setStatus('mandatory')
tl1srtbRdLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbRdLimit.setStatus('mandatory')
tl1srtbOutUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbOutUserPriority.setStatus('mandatory')
tl1srtbOutAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbOutAccessPriority.setStatus('mandatory')
tl1srtbPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbPortCounterTable.setStatus('mandatory')
tl1srtbPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbPortCounterEntry.setStatus('mandatory')
tl1srtbInTSFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbInTSFramesReceived.setStatus('mandatory')
tl1srtbInTSFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbInTSFramesDiscarded.setStatus('mandatory')
tl1srtbOutTSFramesFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbOutTSFramesFrwd.setStatus('mandatory')
tl1srtbDiscardBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDiscardBuffers.setStatus('mandatory')
tl1srtbDiscardTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDiscardTransitDelay.setStatus('mandatory')
tl1srtbDiscardOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDiscardOnError.setStatus('mandatory')
tl1srtbInvalidRi = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbInvalidRi.setStatus('mandatory')
tl1srtbLanIdMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbLanIdMismatch.setStatus('mandatory')
tl1srtbDupLanIdOrTreeError = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDupLanIdOrTreeError.setStatus('mandatory')
tl1srtbDiscardHopCountExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDiscardHopCountExcd.setStatus('mandatory')
tl1srtbExplorerFramesFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbExplorerFramesFrwd.setStatus('mandatory')
tl1srtbExplorerOctetsFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbExplorerOctetsFrwd.setStatus('mandatory')
tl1srtbNonExplorFramesFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbNonExplorFramesFrwd.setStatus('mandatory')
tl1srtbNonExplorOctetsFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbNonExplorOctetsFrwd.setStatus('mandatory')
tl1srtbTotalSRFrwd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbTotalSRFrwd.setStatus('mandatory')
tl1srtbValidSRFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbValidSRFramesReceived.setStatus('mandatory')
tl1srtbValidExplorOctetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbValidExplorOctetsRcvd.setStatus('mandatory')
tl1srtbValidSRDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbValidSRDiscarded.setStatus('mandatory')
tl1srtbTotalSRDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbTotalSRDiscarded.setStatus('mandatory')
tl1srtbFilterDbSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbFilterDbSize.setStatus('mandatory')
tl1srtbPermDbSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbPermDbSize.setStatus('mandatory')
tl1srtbNumDynamicEntries = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbNumDynamicEntries.setStatus('mandatory')
tl1srtbFilterDbAgeingTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbFilterDbAgeingTime.setStatus('mandatory')
tl1srtbDynamicFilterDbTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDynamicFilterDbTable.setStatus('mandatory')
tl1srtbDynamicFilterDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 7, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDynamicFilterDbEntry.setStatus('mandatory')
tl1srtbDynamicMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDynamicMacAddr.setStatus('mandatory')
tl1srtbDynamicPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1srtbDynamicPortNumber.setStatus('mandatory')
tl1srtbStatEntMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntMacAddrTable.setStatus('mandatory')
tl1srtbStatEntMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntMacAddrEntry.setStatus('mandatory')
tl1srtbStaticEntryMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStaticEntryMacAddr.setStatus('mandatory')
tl1srtbStatEntPortArrayTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntPortArrayTable.setStatus('mandatory')
tl1srtbStatEntPortArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntPortArrayEntry.setStatus('mandatory')
tl1srtbStaticEntryPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStaticEntryPermit.setStatus('mandatory')
tl1srtbStatEntSizeTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntSizeTable.setStatus('mandatory')
tl1srtbStatEntSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 3, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbStatEntSizeEntry.setStatus('mandatory')
tl1srtbNumStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 8, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbNumStaticEntries.setStatus('mandatory')
tl1srtbNumMacAddrAcfEntrs = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbNumMacAddrAcfEntrs.setStatus('mandatory')
tl1srtbMacAddrAcfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 10), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMacAddrAcfTable.setStatus('mandatory')
tl1srtbMacAddrAcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 10, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMacAddrAcfEntry.setStatus('mandatory')
tl1srtbAcfSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbAcfSrcMacAddr.setStatus('mandatory')
tl1srtbAcfDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbAcfDestMacAddr.setStatus('mandatory')
tl1srtbMaskAcfParamsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMaskAcfParamsTable.setStatus('mandatory')
tl1srtbMaskAcfParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMaskAcfParamsEntry.setStatus('mandatory')
tl1srtbNumMaskAcfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbNumMaskAcfEntries.setStatus('mandatory')
tl1srtbMaskAcfPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMaskAcfPermit.setStatus('mandatory')
tl1srtbMaskAcfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMaskAcfTable.setStatus('mandatory')
tl1srtbMaskAcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbMaskAcfEntry.setStatus('mandatory')
tl1srtbAcfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbAcfValue.setStatus('mandatory')
tl1srtbAcfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbAcfMask.setStatus('mandatory')
tl1srtbAcfOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 19, 11, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1srtbAcfOffset.setStatus('mandatory')
tl1ospfRtrId = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfRtrId.setStatus('mandatory')
tl1ospfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAreaTable.setStatus('mandatory')
tl1ospfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAreaEntry.setStatus('mandatory')
tl1ospfAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAreaID.setStatus('mandatory')
tl1ospfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAuthType.setStatus('mandatory')
tl1ospfNetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfNetCount.setStatus('mandatory')
tl1ospfAreaNetTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAreaNetTable.setStatus('mandatory')
tl1ospfAreaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 3, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAreaNetEntry.setStatus('mandatory')
tl1ospfNet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfNet.setStatus('mandatory')
tl1ospfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfMask.setStatus('mandatory')
tl1ospfVirtualIfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfVirtualIfTable.setStatus('mandatory')
tl1ospfVirtualIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfVirtualIfEntry.setStatus('mandatory')
tl1ospfNbrId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfNbrId.setStatus('mandatory')
tl1ospfTransArea = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfTransArea.setStatus('mandatory')
tl1ospfTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfTransDelay.setStatus('mandatory')
tl1ospfRxmtIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfRxmtIntvl.setStatus('mandatory')
tl1ospfHelloIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfHelloIntvl.setStatus('mandatory')
tl1ospfRtrDeadIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfRtrDeadIntvl.setStatus('mandatory')
tl1ospfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAuthKey.setStatus('mandatory')
tl1ospfIntfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfTable.setStatus('mandatory')
tl1ospfIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfEntry.setStatus('mandatory')
tl1ospfIntfRun = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("run", 1), ("dont-run", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfRun.setStatus('mandatory')
tl1ospfIntfAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfAreaID.setStatus('mandatory')
tl1ospfIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfType.setStatus('mandatory')
tl1ospfIntfTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfTransDelay.setStatus('mandatory')
tl1ospfIntfRxmtIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfRxmtIntvl.setStatus('mandatory')
tl1ospfIntfHelloIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfHelloIntvl.setStatus('mandatory')
tl1ospfIntfRtrDeadIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfRtrDeadIntvl.setStatus('mandatory')
tl1ospfIntfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfPriority.setStatus('mandatory')
tl1ospfIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfAuthKey.setStatus('mandatory')
tl1ospfIntfPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfPollIntvl.setStatus('mandatory')
tl1ospfIntfPtopIntAddr = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 5, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfPtopIntAddr.setStatus('mandatory')
tl1ospfNBMATable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 6), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfNBMATable.setStatus('mandatory')
tl1ospfNBMAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 6, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfNBMAEntry.setStatus('mandatory')
tl1ospfAttRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfAttRtrIpAddr.setStatus('mandatory')
tl1ospfPriority = MibScalar((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfPriority.setStatus('mandatory')
tl1ospfCumlogTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 7), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ospfCumlogTable.setStatus('mandatory')
tl1ospfCumLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 7, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ospfCumLogEntry.setStatus('mandatory')
tl1ospfStat = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1ospfStat.setStatus('mandatory')
tl1ospfIntfTOSTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 8), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfTOSTable.setStatus('mandatory')
tl1ospfIntfTOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 8, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIntfTOSEntry.setStatus('mandatory')
tl1ospfIfTOSCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 20, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65335))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1ospfIfTOSCost.setStatus('mandatory')
tl1tokConfigTable = MibTable((1, 3, 6, 1, 4, 1, 16, 2, 2, 21, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tokConfigTable.setStatus('mandatory')
tl1tokConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 2, 2, 21, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tokConfigEntry.setStatus('mandatory')
tl1tokEarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tokEarlyTokenRelease.setStatus('mandatory')
tl1tokRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 2, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("four-Mbps", 0), ("sixteen-Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tl1tokRingSpeed.setStatus('mandatory')
mibBuilder.exportSymbols("UNISYS-TIMEPLEX-MIB", tl1stapPDesignatedRoot=tl1stapPDesignatedRoot, tl1fddiSMTAttachConfiguration=tl1fddiSMTAttachConfiguration, tl1x25PktInv=tl1x25PktInv, tl1ipFilterExceptionTable=tl1ipFilterExceptionTable, tl1ipConfigIntfTable=tl1ipConfigIntfTable, tl1srtbLanIdMismatch=tl1srtbLanIdMismatch, tl1fddiMACErrorCt=tl1fddiMACErrorCt, tl1fddiSMTStnStateTable=tl1fddiSMTStnStateTable, tl1pppBadProtocol=tl1pppBadProtocol, ufddiSMTOperationalGrp=ufddiSMTOperationalGrp, tl1srtbTotalSRDiscarded=tl1srtbTotalSRDiscarded, ufddiMACCountersGrp=ufddiMACCountersGrp, tl1tokRingSpeed=tl1tokRingSpeed, tlipStaticRouteTable=tlipStaticRouteTable, tl1srtbOutAccessPriority=tl1srtbOutAccessPriority, tlipStaticRouteCost=tlipStaticRouteCost, ufddiPHYRemotePHYType=ufddiPHYRemotePHYType, tl1idpInEchos=tl1idpInEchos, tl1srtbInTSFramesReceived=tl1srtbInTSFramesReceived, tl1ipStaticRouteOverride=tl1ipStaticRouteOverride, tl1idpFilterSourceNet=tl1idpFilterSourceNet, uddnConnectionsReused=uddnConnectionsReused, ufddiSMTStationCfgGrp=ufddiSMTStationCfgGrp, tl1fddiPHYType=tl1fddiPHYType, tl1breCblIpAddress=tl1breCblIpAddress, tl1x25PinvP7=tl1x25PinvP7, tl1ripConfigTable=tl1ripConfigTable, tlipLogicalDisconnect=tlipLogicalDisconnect, tl1srtbNumStaticEntries=tl1srtbNumStaticEntries, tl1stapBridgeConfig=tl1stapBridgeConfig, tl1idpNbrFilters=tl1idpNbrFilters, tl1ripNonZero=tl1ripNonZero, uipRoutePid=uipRoutePid, tl1idpForwarding=tl1idpForwarding, tl1fddiMACReceiveCt=tl1fddiMACReceiveCt, tl1ospfIntfTOSTable=tl1ospfIntfTOSTable, tl1srtbExplorerFramesFrwd=tl1srtbExplorerFramesFrwd, ufddiMACTable=ufddiMACTable, tl1x25FacCode=tl1x25FacCode, tl1srtbUpTime=tl1srtbUpTime, uegpMaxNeighbors=uegpMaxNeighbors, tl1pppIdpcpAO=tl1pppIdpcpAO, tl1ospfIntfEntry=tl1ospfIntfEntry, tl1fddiMACStatEntry=tl1fddiMACStatEntry, ux25Window=ux25Window, tl1srtbMacAddrAcfTable=tl1srtbMacAddrAcfTable, tl1srtbPortCounterEntry=tl1srtbPortCounterEntry, tl1pppCrCount=tl1pppCrCount, tl1pppStatTable=tl1pppStatTable, uip=uip, tl1ospfAuthKey=tl1ospfAuthKey, tl1breForwardTableAgeingTime=tl1breForwardTableAgeingTime, tl1fddiMACMultiTokens=tl1fddiMACMultiTokens, tl1ipStaticRouteCost=tl1ipStaticRouteCost, ux25PktSize=ux25PktSize, ufddiMACOperGrp=ufddiMACOperGrp, tl1breForwardTable=tl1breForwardTable, tl1ipNbrStaticRoutes=tl1ipNbrStaticRoutes, tl1fddiMACTxSyncChain=tl1fddiMACTxSyncChain, uifEntry=uifEntry, ufddiMACTReq=ufddiMACTReq, tl1srtbNumMaskAcfEntries=tl1srtbNumMaskAcfEntries, uegpAcquireCeaseInterval=uegpAcquireCeaseInterval, tl1ipRemoteg=tl1ipRemoteg, tl1fddiSMTStnId=tl1fddiSMTStnId, uddnTotalQ=uddnTotalQ, tl1ospfStat=tl1ospfStat, tl1icmp=tl1icmp, ufddiSMTAttachCount=ufddiSMTAttachCount, tl1stapPortState=tl1stapPortState, tlipNetMaxPkt=tlipNetMaxPkt, tl1ipConfigIntfEntry=tl1ipConfigIntfEntry, tl1idpStaticRouteTable=tl1idpStaticRouteTable, uddnIfReset=uddnIfReset, tl1fddiMACTxSyncDone=tl1fddiMACTxSyncDone, umib=umib, tl1x25IntrCPkt=tl1x25IntrCPkt, tl1egpAcquireCeaseInterval=tl1egpAcquireCeaseInterval, tl1fddiMACTxAsyncFrm=tl1fddiMACTxAsyncFrm, tl1srtbAcfMask=tl1srtbAcfMask, uipStaticRouteGateway=uipStaticRouteGateway, ufddiMACResourceIndex=ufddiMACResourceIndex, tl1x25PinvD1=tl1x25PinvD1, uipStaticRouteNetwork=uipStaticRouteNetwork, tl1ripBadCommand=tl1ripBadCommand, tl1fddiMACDuplicateAddr=tl1fddiMACDuplicateAddr, tl1tcpRetransTo=tl1tcpRetransTo, tl1stapPortStateTable=tl1stapPortStateTable, uegpRequestCeaseInterval=uegpRequestCeaseInterval, tl1breInBPDUs=tl1breInBPDUs, tl1srtbDynamicMacAddr=tl1srtbDynamicMacAddr, tl1srtbMaskAcfEntry=tl1srtbMaskAcfEntry, tl1breInErrors=tl1breInErrors, tl1x25=tl1x25, tl1srtbDynamicFilterDbEntry=tl1srtbDynamicFilterDbEntry, uifHdlcClockType=uifHdlcClockType, tlipStaticRouteGateway=tlipStaticRouteGateway, tl1x25LcRestr=tl1x25LcRestr, uipNet1MaxPkt=uipNet1MaxPkt, uegpDeclareDownInterval=uegpDeclareDownInterval, ufddiPHYResourceIndex=ufddiPHYResourceIndex, tl1idpRouteTimeout=tl1idpRouteTimeout, uddnLeaderErrs=uddnLeaderErrs, usnmpVersion=usnmpVersion, tl1ripConfigEntry=tl1ripConfigEntry, tl1stapPConfigPending=tl1stapPConfigPending, tl1idpOutNoRoutes=tl1idpOutNoRoutes, tl1x25IfEntry=tl1x25IfEntry, tl1egpMinPollInterval=tl1egpMinPollInterval, tl1stapCPathCost=tl1stapCPathCost, tl1ipFilterDstMask=tl1ipFilterDstMask, tl1idpInReceives=tl1idpInReceives, tl1x25PinvP4=tl1x25PinvP4, tl1srtbOutUserPriority=tl1srtbOutUserPriority, tl1ripBadSize=tl1ripBadSize, tl1fddiSMTNeighborEntry=tl1fddiSMTNeighborEntry, uddnRcvIncomplete=uddnRcvIncomplete, tl1srtbStaticEntryPermit=tl1srtbStaticEntryPermit, ufddiMACLateCt=ufddiMACLateCt, uifHdlcRnrInterval=uifHdlcRnrInterval, tl1idpBadMetric=tl1idpBadMetric, tl1fddiMACEnterBeacontCt=tl1fddiMACEnterBeacontCt, tl1ospfRxmtIntvl=tl1ospfRxmtIntvl, tl1pppCtTimeout=tl1pppCtTimeout, uifFddiArpWait=uifFddiArpWait, tl1idpErrInErrors=tl1idpErrInErrors, tl1pppBadIdpcp=tl1pppBadIdpcp, tl1ospfIntfTable=tl1ospfIntfTable, tl1srtbAcfSrcMacAddr=tl1srtbAcfSrcMacAddr, tl1fddiPHYOperationalEntry=tl1fddiPHYOperationalEntry, tl1snmpTrapEntry=tl1snmpTrapEntry, uegpNumberTrustedNeighbors=uegpNumberTrustedNeighbors, uddnHdhUp=uddnHdhUp, tl1pppBadIpxcp=tl1pppBadIpxcp, tl1x25CalledAddr=tl1x25CalledAddr, uggpNeighborEntry=uggpNeighborEntry, tl1ipFilterExceptionEntry=tl1ipFilterExceptionEntry, uegpNeighbor=uegpNeighbor, tl1fddiMACTokenCt=tl1fddiMACTokenCt, tl1srtbPortParamsEntry=tl1srtbPortParamsEntry, tl1tokConfigEntry=tl1tokConfigEntry, tl1ospfAreaNetEntry=tl1ospfAreaNetEntry, tl1tcpRtoMin=tl1tcpRtoMin, tlipRoutePidsEntry=tlipRoutePidsEntry, tl1ripBadVersion=tl1ripBadVersion, tl1srtb=tl1srtb, tl1idpFilterDestinationMask=tl1idpFilterDestinationMask, tl1idpStaticRouteGatewayHost=tl1idpStaticRouteGatewayHost, tl1pppLcpAO=tl1pppLcpAO, ufddiPHYTable=ufddiPHYTable, tl1srtbDupLanIdOrTreeError=tl1srtbDupLanIdOrTreeError, tl1ripInPkts=tl1ripInPkts, tl1pppNumTrRecd=tl1pppNumTrRecd, tl1fddiMACOutOfBuf=tl1fddiMACOutOfBuf, tl1stapPDesignatedBridge=tl1stapPDesignatedBridge, tl1idpHashHit=tl1idpHashHit, usnmp=usnmp, tl1ospfAreaTable=tl1ospfAreaTable, ufddiMACCfgGrp=ufddiMACCfgGrp, tl1idpErrOutResources=tl1idpErrOutResources, tlipStaticRouteNetwork=tlipStaticRouteNetwork, tl1ospfTransDelay=tl1ospfTransDelay, ufddiMACTMax=ufddiMACTMax, tl1fddiMACInternalErrorCt=tl1fddiMACInternalErrorCt, usystemReboots=usystemReboots, tl1idpFilter=tl1idpFilter, tl1srtbRoutingType=tl1srtbRoutingType, tl1srtbBridgeNumber=tl1srtbBridgeNumber, tl1fddiMACTxBufEmpty=tl1fddiMACTxBufEmpty, tl1ifHardwareAddress=tl1ifHardwareAddress, tl1fddiSMTNeighborTable=tl1fddiSMTNeighborTable, tl1srtbExplorerOctetsFrwd=tl1srtbExplorerOctetsFrwd, uipMasker=uipMasker, tl1fddiSMTOperationalEntry=tl1fddiSMTOperationalEntry, utcpAckTime=utcpAckTime, tl1fddiSMTLinkErrorRateCutoff=tl1fddiSMTLinkErrorRateCutoff, tl1fddiMACNotCopiedCt=tl1fddiMACNotCopiedCt, ux25Service=ux25Service, tl1fddiMACOperationalEntry=tl1fddiMACOperationalEntry, tl1ripBadAddr=tl1ripBadAddr, tl1ppp=tl1ppp, tl1breStatTable=tl1breStatTable, tl1tok=tl1tok, tl1x25CallBad=tl1x25CallBad, tl1snmpVersion=tl1snmpVersion, tl1pppNumCrRecd=tl1pppNumCrRecd, tl1stap=tl1stap, tl1ipMasker=tl1ipMasker, tl1stapMaxAge=tl1stapMaxAge, tl1idpStaticRouteCost=tl1idpStaticRouteCost, uipWellKnownGateway=uipWellKnownGateway, uddn=uddn, tl1idpBadAlloc=tl1idpBadAlloc, tl1srtbValidExplorOctetsRcvd=tl1srtbValidExplorOctetsRcvd, tl1srtbAcfDestMacAddr=tl1srtbAcfDestMacAddr, tl1fddiMACBadSyncPtr=tl1fddiMACBadSyncPtr, tl1stapRootPort=tl1stapRootPort, tl1srtbFilterDbAgeingTime=tl1srtbFilterDbAgeingTime, tl1breNumConfigBrdgLstEntries=tl1breNumConfigBrdgLstEntries, tl1fddiMACTvxExpiredCt=tl1fddiMACTvxExpiredCt, tl1idpHashMiss=tl1idpHashMiss, tl1srtbDiscardOnError=tl1srtbDiscardOnError, tl1pppBadAddress=tl1pppBadAddress, ufddiMACEnteredBeaconCt=ufddiMACEnteredBeaconCt, tl1fddiPHYRemotePHYType=tl1fddiPHYRemotePHYType, tl1idpFilterExceptionEntry=tl1idpFilterExceptionEntry, tl1ospfIntfPtopIntAddr=tl1ospfIntfPtopIntAddr, tl1breBridgeListTable=tl1breBridgeListTable, tl1ripOwnAddr=tl1ripOwnAddr, tl1pppInfoEntry=tl1pppInfoEntry, tl1rip=tl1rip, uegpMode=uegpMode, tl1idpErrInEchos=tl1idpErrInEchos, uddnMsgout=uddnMsgout, tl1x25PinvD3=tl1x25PinvD3, tl1fddi=tl1fddi, tl1ipStaticRouteNetwork=tl1ipStaticRouteNetwork, tl1x25RejInv=tl1x25RejInv, uifEthernetArpWait=uifEthernetArpWait, tl1breForwardTableEntry=tl1breForwardTableEntry, tl1stapHelloTime=tl1stapHelloTime, utcpTimeToLive=utcpTimeToLive, uifHdlcBaudRate=uifHdlcBaudRate, tl1breOutTSFs=tl1breOutTSFs, tl1egpNumberNbrs=tl1egpNumberNbrs, tl1ipNetMaxPkt=tl1ipNetMaxPkt, tl1tcpTimeToLive=tl1tcpTimeToLive, tl1tcpRtoMax=tl1tcpRtoMax, tl1ospfMask=tl1ospfMask, tlipRoutePid=tlipRoutePid, tl1srtbMaskAcfParamsTable=tl1srtbMaskAcfParamsTable, uipStaticRouteCost=uipStaticRouteCost, tl1system=tl1system, uegpNumberNeighbors=uegpNumberNeighbors, ufddiMACSMTLongAddr=ufddiMACSMTLongAddr, tl1srtbFilterDbSize=tl1srtbFilterDbSize, tl1udp=tl1udp, tl1fddiPHYResourceIndex=tl1fddiPHYResourceIndex, tl1breBridgeListEntry=tl1breBridgeListEntry, tl1x25PinvR3=tl1x25PinvR3, tl1ipRoutePid=tl1ipRoutePid, tl1snmpForwardTraps=tl1snmpForwardTraps, tl1idpErrInResources=tl1idpErrInResources, tl1idpStaticRouteGatewayNet=tl1idpStaticRouteGatewayNet, tl1fddiPHYStateEntry=tl1fddiPHYStateEntry, tl1tcpThruput=tl1tcpThruput, tl1ripBadClass=tl1ripBadClass, tl1idpNetworkIntfTable=tl1idpNetworkIntfTable, tlipRemoteg=tlipRemoteg, usystemAction=usystemAction, tl1pppLqdTimeout=tl1pppLqdTimeout, ufddi=ufddi, uifTable=uifTable, tl1srtbStatEntMacAddrEntry=tl1srtbStatEntMacAddrEntry)
mibBuilder.exportSymbols("UNISYS-TIMEPLEX-MIB", tl1ospfAreaID=tl1ospfAreaID, tl1breOutEFs=tl1breOutEFs, tl1stapPDesignatedPort=tl1stapPDesignatedPort, tl1ospfVirtualIfEntry=tl1ospfVirtualIfEntry, tl1idpErrOutUnspecified=tl1idpErrOutUnspecified, tl1breCBridgeListEntry=tl1breCBridgeListEntry, tl1stapCMaxBridgeTransDelay=tl1stapCMaxBridgeTransDelay, uggpNeighborTable=uggpNeighborTable, uegp=uegp, ufddiMACTMin=ufddiMACTMin, ufddiMACRingOpCt=ufddiMACRingOpCt, tl1x25Service=tl1x25Service, uipRemoteg2=uipRemoteg2, uipMaxRoutePids=uipMaxRoutePids, ux25IfEntry=ux25IfEntry, tl1stapBridgeForwardDelay=tl1stapBridgeForwardDelay, tl1idpErrInSizetoobig=tl1idpErrInSizetoobig, tl1ripBadPort=tl1ripBadPort, usnmpRequests=usnmpRequests, tlipNetMaxPktTable=tlipNetMaxPktTable, tl1ipStaticRouteTable=tl1ipStaticRouteTable, tl1ospfCumlogTable=tl1ospfCumlogTable, tl1pppInfoTable=tl1pppInfoTable, uhfpSwap=uhfpSwap, uegpErrorTreatment=uegpErrorTreatment, tl1tcpFlowAck=tl1tcpFlowAck, uipStaticRouteTable=uipStaticRouteTable, tl1snmpLastTrapMessage=tl1snmpLastTrapMessage, urip=urip, tl1idpNbrStaticRoutes=tl1idpNbrStaticRoutes, uipRemoteg1=uipRemoteg1, ufddiMACAddressGrp=ufddiMACAddressGrp, tl1ifSubnetMask=tl1ifSubnetMask, tl1fddiSMTMasterCount=tl1fddiSMTMasterCount, tl1ospfNbrId=tl1ospfNbrId, tl1tcpWakeup=tl1tcpWakeup, tl1ospfIntfHelloIntvl=tl1ospfIntfHelloIntvl, tl1idpNetworkAddress=tl1idpNetworkAddress, uegpMinHelloInterval=uegpMinHelloInterval, uddnLinkWentDown=uddnLinkWentDown, tl1ospfAreaEntry=tl1ospfAreaEntry, uddnHdhWentDown=uddnHdhWentDown, tl1ipFilterTable=tl1ipFilterTable, ufddiSMTDasScmState=ufddiSMTDasScmState, tl1tcpAckTime=tl1tcpAckTime, ufddiPHYType=ufddiPHYType, tl1breInTSFs=tl1breInTSFs, uipNet2MaxPkt=uipNet2MaxPkt, tl1fddiSMTMACCount=tl1fddiSMTMACCount, tl1x25OutPkts=tl1x25OutPkts, tl1breFtMacAddress=tl1breFtMacAddress, tl1srtbPortParamsTable=tl1srtbPortParamsTable, tl1breConfigBridgeListTable=tl1breConfigBridgeListTable, tl1egpMinHelloInterval=tl1egpMinHelloInterval, usnmpTraps=usnmpTraps, tl1x25CallingAddr=tl1x25CallingAddr, tl1idpNetworkIntfEntry=tl1idpNetworkIntfEntry, tl1ospfAreaNetTable=tl1ospfAreaNetTable, tl1idpFilterExceptionDstHost=tl1idpFilterExceptionDstHost, tl1idpErrOutMaxhops=tl1idpErrOutMaxhops, tl1ospfTransArea=tl1ospfTransArea, tl1bre=tl1bre, tl1idpWellKnownGatewayHost=tl1idpWellKnownGatewayHost, tl1x25PinvD2=tl1x25PinvD2, ufddiMACTransmitCt=ufddiMACTransmitCt, tl1idp=tl1idp, tl1ipRoutePidsEntry=tl1ipRoutePidsEntry, tl1ospfIntfRun=tl1ospfIntfRun, uddnHipUp=uddnHipUp, tl1fddiMACBadAsyncPtr=tl1fddiMACBadAsyncPtr, tl1tcp=tl1tcp, tl1breBridgeNumber=tl1breBridgeNumber, uddnPSNGoingDown=uddnPSNGoingDown, tl1srtbAcfOffset=tl1srtbAcfOffset, uggp=uggp, tl1ipMaxRoutePids=tl1ipMaxRoutePids, tl1stapPDesignatedCost=tl1stapPDesignatedCost, tl1srtbDiscardHopCountExcd=tl1srtbDiscardHopCountExcd, tl1stapBridgeState=tl1stapBridgeState, uifHdlcDCE=uifHdlcDCE, tl1ripAdverIntf=tl1ripAdverIntf, tl1idpBadAddr=tl1idpBadAddr, utcpRtoMin=utcpRtoMin, tl1fddiMACLateCt=tl1fddiMACLateCt, uifHdlcSabmInterval=uifHdlcSabmInterval, tl1ripAdverStatic=tl1ripAdverStatic, tl1srtbStatEntSizeTable=tl1srtbStatEntSizeTable, tl1mib=tl1mib, uipNbrStaticRoutes=uipNbrStaticRoutes, tl1stapCForwardDelay=tl1stapCForwardDelay, tl1ospfCumLogEntry=tl1ospfCumLogEntry, tl1fddiSMTByPassSwitchPresent=tl1fddiSMTByPassSwitchPresent, tl1fddiMACRingOpCt=tl1fddiMACRingOpCt, tl1srtbNonExplorFramesFrwd=tl1srtbNonExplorFramesFrwd, tl1breCblBridgeNumber=tl1breCblBridgeNumber, tl1pppBadLcp=tl1pppBadLcp, tl1snmpNMSEntry=tl1snmpNMSEntry, tl1srtbInternalLanId=tl1srtbInternalLanId, ufddiPHYEntry=ufddiPHYEntry, ufddiMACReceiveOverflowCt=ufddiMACReceiveOverflowCt, tl1idpFilterEntry=tl1idpFilterEntry, tl1ospfIntfPriority=tl1ospfIntfPriority, tl1x25BadPkt=tl1x25BadPkt, tl1ripBadMetric=tl1ripBadMetric, tl1fddiMACTxAsyncDone=tl1fddiMACTxAsyncDone, tlipStaticRouteEntry=tlipStaticRouteEntry, tl1fddiPHYRemoteMACIndicated=tl1fddiPHYRemoteMACIndicated, tl1ospfAuthType=tl1ospfAuthType, tl1x25PinvP6=tl1x25PinvP6, tl1srtbStatEntPortArrayTable=tl1srtbStatEntPortArrayTable, tl1idpForwDatagrams=tl1idpForwDatagrams, tl1idpFilterExceptionSrcHost=tl1idpFilterExceptionSrcHost, tl1idpFilterSourceMask=tl1idpFilterSourceMask, tl1fddiMACOwnBecRcvd=tl1fddiMACOwnBecRcvd, tl1breBlSrBridgeNumber=tl1breBlSrBridgeNumber, uicmp=uicmp, tl1x25PktShort=tl1x25PktShort, tl1ifIpAddr=tl1ifIpAddr, tl1snmpTrapAddress=tl1snmpTrapAddress, tl1srtbValidSRDiscarded=tl1srtbValidSRDiscarded, tl1systemAction=tl1systemAction, tlipRemotegEntry=tlipRemotegEntry, uat=uat, tl1fddiMACTxAbort=tl1fddiMACTxAbort, tl1pppPhaseTable=tl1pppPhaseTable, tl1snmp=tl1snmp, tl1stapPortConfigEntry=tl1stapPortConfigEntry, tlipRemotegTable=tlipRemotegTable, uifHdlcAckTo=uifHdlcAckTo, tl1stapPortIdentifier=tl1stapPortIdentifier, tl1idpInNoRoutes=tl1idpInNoRoutes, tl1breBlIpAddress=tl1breBlIpAddress, tlipNetMaxPktEntry=tlipNetMaxPktEntry, ufddiSMTSpurCount=ufddiSMTSpurCount, tl1ipStaticRouteMask=tl1ipStaticRouteMask, tl1ripMode=tl1ripMode, tl1egpAutoSysNumber=tl1egpAutoSysNumber, tl1srtbInvalidRi=tl1srtbInvalidRi, tl1fddiMACRxFrmsRcvd=tl1fddiMACRxFrmsRcvd, ufddiSMTVersionId=ufddiSMTVersionId, tl1fddiMACDpcCollision=tl1fddiMACDpcCollision, tl1fddiMACTvxValue=tl1fddiMACTvxValue, ux25IfTable=ux25IfTable, tl1pppNumCrSent=tl1pppNumCrSent, tl1stapTopologyChangeCount=tl1stapTopologyChangeCount, tl1idpBadCommand=tl1idpBadCommand, tl1ospfNetCount=tl1ospfNetCount, tl1breCblVLanId=tl1breCblVLanId, tl1ospfVirtualIfTable=tl1ospfVirtualIfTable, tl1x25GFI=tl1x25GFI, tl1tokEarlyTokenRelease=tl1tokEarlyTokenRelease, tl1srtbIsVLan=tl1srtbIsVLan, usnmpForwardTraps=usnmpForwardTraps, tl1idpInHdrErrors=tl1idpInHdrErrors, tl1srtbNumDynamicEntries=tl1srtbNumDynamicEntries, uudp=uudp, tl1ospfIntfRtrDeadIntvl=tl1ospfIntfRtrDeadIntvl, tl1srtbDiscardTransitDelay=tl1srtbDiscardTransitDelay, tl1idpErrOutMsgs=tl1idpErrOutMsgs, tl1stapPortConfigTable=tl1stapPortConfigTable, tlip=tlip, ufddiSMTStationType=ufddiSMTStationType, ufddiMACSTATUSGrp=ufddiMACSTATUSGrp, tl1ospf=tl1ospf, uddnDeadHostSTATUS=uddnDeadHostSTATUS, tlipMasker=tlipMasker, tl1ip=tl1ip, tl1interfaces=tl1interfaces, tl1fddiPHYStateTable=tl1fddiPHYStateTable, tl1srtbStatEntSizeEntry=tl1srtbStatEntSizeEntry, tl1egpMaxNbrs=tl1egpMaxNbrs, ufddiMACDownstreamNeighbor=ufddiMACDownstreamNeighbor, tl1stapPortStateEntry=tl1stapPortStateEntry, tl1idpErrOutNohost=tl1idpErrOutNohost, tl1ospfPriority=tl1ospfPriority, tl1fddiMACRcvOverflow=tl1fddiMACRcvOverflow, tl1idpFilterTable=tl1idpFilterTable, tl1ospfIfTOSCost=tl1ospfIfTOSCost, tl1ipRoutePidsTable=tl1ipRoutePidsTable, tl1breConfigParams=tl1breConfigParams, uggpNumberNeighbors=uggpNumberNeighbors, tl1srtbMaskAcfParamsEntry=tl1srtbMaskAcfParamsEntry, ufddiMACUpstreamNeighbor=ufddiMACUpstreamNeighbor, tl1ripBadNbr=tl1ripBadNbr, tl1stapBridgeMaxAge=tl1stapBridgeMaxAge, tl1ospfNet=tl1ospfNet, tl1ospfHelloIntvl=tl1ospfHelloIntvl, tl1fddiMACTMin=tl1fddiMACTMin, tl1idpErrOutChecksum=tl1idpErrOutChecksum, tl1stapBridgeIdentifier=tl1stapBridgeIdentifier, tl1egp=tl1egp, tl1x25ResetTimer=tl1x25ResetTimer, tl1ipFilterNbrExceptions=tl1ipFilterNbrExceptions, tlipWellKnownGateway=tlipWellKnownGateway, tl1breOutBPDUs=tl1breOutBPDUs, tl1idpWellKnownGatewayNet=tl1idpWellKnownGatewayNet, tl1snmpNMSTable=tl1snmpNMSTable, tl1idpErrInChecksum=tl1idpErrInChecksum, ufddiMACReceiveCt=ufddiMACReceiveCt, tl1srtbTotalSRFrwd=tl1srtbTotalSRFrwd, tl1srtbDynamicFilterDbTable=tl1srtbDynamicFilterDbTable, tl1idpInterfaceTable=tl1idpInterfaceTable, tl1srtbFilterDbParams=tl1srtbFilterDbParams, tl1x25FacParam=tl1x25FacParam, tlipRedirectTo=tlipRedirectTo, tl1breFtIpAddress=tl1breFtIpAddress, tl1stapCMaxBpduTransDelay=tl1stapCMaxBpduTransDelay, tl1x25PktSize=tl1x25PktSize, tl1fddiMACTneg=tl1fddiMACTneg, tl1ipNumFilters=tl1ipNumFilters, tl1ospfIntfAreaID=tl1ospfIntfAreaID, tl1fddiMACRxSmallGap=tl1fddiMACRxSmallGap, tl1idpRouteSupplier=tl1idpRouteSupplier, ufddiPHYRemoteMACIndicated=ufddiPHYRemoteMACIndicated, uegpPurgeInterval=uegpPurgeInterval, unisys_timeplex=unisys_timeplex, tl1srtbPortCounterTable=tl1srtbPortCounterTable, tl1breCblSrBridgeNumber=tl1breCblSrBridgeNumber, uegpNeighborEntry=uegpNeighborEntry, tl1pppPhaseEntry=tl1pppPhaseEntry, tl1x25PktLong=tl1x25PktLong, tl1x25PinvP3=tl1x25PinvP3, tl1fddiMACPktsDetected=tl1fddiMACPktsDetected, uhfpPad=uhfpPad, uddnLinkUp=uddnLinkUp, tl1stapForwardDelay=tl1stapForwardDelay, tl1egpRequestCeaseInterval=tl1egpRequestCeaseInterval, tl1at=tl1at, utcpRetransTo=utcpRetransTo, tl1ifType=tl1ifType, tl1ifTable=tl1ifTable, tl1stapRootPathCost=tl1stapRootPathCost, tl1egpNbr=tl1egpNbr, tl1fddiMACLowClmRcvd=tl1fddiMACLowClmRcvd, tl1ipRedirectTo=tl1ipRedirectTo, tl1fddiMACLostCt=tl1fddiMACLostCt, uggpMaxNeighbors=uggpMaxNeighbors, tl1srtbAcfValue=tl1srtbAcfValue, tl1snmpNMSAddress=tl1snmpNMSAddress, uipLogicalDisconnect=uipLogicalDisconnect, utcpRtoMax=utcpRtoMax, tl1x25CallTimer=tl1x25CallTimer, tl1ifProxyARP=tl1ifProxyARP, tl1systemReboots=tl1systemReboots, tl1idpErrInUnspecified=tl1idpErrInUnspecified, uipStaticRouteOverride=uipStaticRouteOverride, tlipMaxRoutePids=tlipMaxRoutePids, ux25=ux25, tl1srtbOutTSFramesFrwd=tl1srtbOutTSFramesFrwd, tl1srtbRdLimit=tl1srtbRdLimit, ufddiPHYCfgGrp=ufddiPHYCfgGrp, uifIpAddr=uifIpAddr, tl1x25PinvP2=tl1x25PinvP2, usystemErrorCode=usystemErrorCode)
mibBuilder.exportSymbols("UNISYS-TIMEPLEX-MIB", tl1egpNbrEntry=tl1egpNbrEntry, tl1ipFilterExceptionSrcNet=tl1ipFilterExceptionSrcNet, tl1idpFilterSourceHost=tl1idpFilterSourceHost, tl1egpDeclareDownInterval=tl1egpDeclareDownInterval, tl1idpInOwnAddr=tl1idpInOwnAddr, tl1fddiMACEnterClaimCt=tl1fddiMACEnterClaimCt, tl1egpNumberTrustedNbrs=tl1egpNumberTrustedNbrs, tl1stapCPortState=tl1stapCPortState, tl1srtbInTSFramesDiscarded=tl1srtbInTSFramesDiscarded, tl1ospfRtrDeadIntvl=tl1ospfRtrDeadIntvl, tl1srtbDiscardBuffers=tl1srtbDiscardBuffers, tl1stapTimeSinceTopChange=tl1stapTimeSinceTopChange, tl1idpErrOutErrors=tl1idpErrOutErrors, tl1idpGenChecksum=tl1idpGenChecksum, tl1x25PinvR2=tl1x25PinvR2, tl1idpErrOutSizetoobig=tl1idpErrOutSizetoobig, ufddiMACTokenCt=ufddiMACTokenCt, tl1fddiPHYAction=tl1fddiPHYAction, uhfpMaxMsg=uhfpMaxMsg, tl1fddiSMTStnUpstreamNbr=tl1fddiSMTStnUpstreamNbr, uipRoutePidsEntry=uipRoutePidsEntry, tl1fddiSMTOperationalTable=tl1fddiSMTOperationalTable, tl1idpStaticRouteOverride=tl1idpStaticRouteOverride, tl1idpInErrors=tl1idpInErrors, tl1idpFilterDestinationHost=tl1idpFilterDestinationHost, tl1stapTopologyChange=tl1stapTopologyChange, tl1idpFilterExceptionSrcNet=tl1idpFilterExceptionSrcNet, tl1ipFilterSrcMask=tl1ipFilterSrcMask, tlipNbrStaticRoutes=tlipNbrStaticRoutes, tl1stapPathCost=tl1stapPathCost, tl1srtbMaskAcfInfo=tl1srtbMaskAcfInfo, ufddiSMT=ufddiSMT, tl1stapCBridgeHelloTime=tl1stapCBridgeHelloTime, tl1ripBadFamily=tl1ripBadFamily, tl1ospfIntfRxmtIntvl=tl1ospfIntfRxmtIntvl, tlipStaticRouteOverride=tlipStaticRouteOverride, tl1srtbStaticFilterDbParams=tl1srtbStaticFilterDbParams, uifHdlcAckCount=uifHdlcAckCount, tlipLoopback=tlipLoopback, tl1ripOutPkts=tl1ripOutPkts, uipLoopback=uipLoopback, tl1breBridgeIpAddress=tl1breBridgeIpAddress, uinterfaces=uinterfaces, tl1idpFilterExceptionTable=tl1idpFilterExceptionTable, tl1idpFilterExceptionDstNet=tl1idpFilterExceptionDstNet, tl1ripSimple=tl1ripSimple, utcpWakeup=utcpWakeup, tl1idpErrInNohost=tl1idpErrInNohost, tl1egpPurgeInterval=tl1egpPurgeInterval, tl1snmpTrapTable=tl1snmpTrapTable, tl1idpErrInMaxhops=tl1idpErrInMaxhops, uipRoutePidsTable=uipRoutePidsTable, tl1ifEntry=tl1ifEntry, tl1fddiSMTVersionId=tl1fddiSMTVersionId, uegpNeighborTable=uegpNeighborTable, tl1idpNumStatic=tl1idpNumStatic, tl1idpFilterNbrExceptions=tl1idpFilterNbrExceptions, umgmt=umgmt, tl1stapCBridgePriority=tl1stapCBridgePriority, tl1ospfNBMATable=tl1ospfNBMATable, uhfp=uhfp, tl1stapHoldTime=tl1stapHoldTime, tl1breInEFs=tl1breInEFs, tl1idpNetworkMaximumPacket=tl1idpNetworkMaximumPacket, tl1idpBadSize=tl1idpBadSize, tl1fddiMACTMax=tl1fddiMACTMax, ufddiMACTvxValue=ufddiMACTvxValue, uifSubnetMask=uifSubnetMask, tl1srtbStaticEntryMacAddr=tl1srtbStaticEntryMacAddr, ufddiMACConnectedResId=ufddiMACConnectedResId, usnmpCommunity=usnmpCommunity, tl1x25PinvP1=tl1x25PinvP1, tl1fddiMACRcvUnderflow=tl1fddiMACRcvUnderflow, ufddiSMTMACCount=ufddiSMTMACCount, tl1idpInterfaceEntry=tl1idpInterfaceEntry, tl1ospfIntfPollIntvl=tl1ospfIntfPollIntvl, tl1srtbInternalLanEnabled=tl1srtbInternalLanEnabled, ufddiSMTStationId=ufddiSMTStationId, tl1ospfIntfTOSEntry=tl1ospfIntfTOSEntry, tl1fddiMACTReq=tl1fddiMACTReq, ufddiMACNotCopiedCt=ufddiMACNotCopiedCt, tl1breInSRFs=tl1breInSRFs, tl1pppIpxcpAO=tl1pppIpxcpAO, utcp=utcp, tl1x25InPkts=tl1x25InPkts, tl1pppStatEntry=tl1pppStatEntry, tl1egpEnoughInterval=tl1egpEnoughInterval, tl1fddiSMTStnStateEntry=tl1fddiSMTStnStateEntry, ufddiMACErrorCntrsGrp=ufddiMACErrorCntrsGrp, tl1pppTrCount=tl1pppTrCount, tl1fddiMACRcvAbort=tl1fddiMACRcvAbort, utcpFlowAck=utcpFlowAck, tl1idpStaticRouteEntry=tl1idpStaticRouteEntry, tl1fddiPHYConnectedResId=tl1fddiPHYConnectedResId, tl1ipStaticRouteGateway=tl1ipStaticRouteGateway, tl1srtbNonExplorOctetsFrwd=tl1srtbNonExplorOctetsFrwd, tl1srtbNumMacAddrAcfEntrs=tl1srtbNumMacAddrAcfEntrs, tl1breBlVLanId=tl1breBlVLanId, tl1idpErrInSocket=tl1idpErrInSocket, tl1x25IfTable=tl1x25IfTable, uddnLinkDownTo=uddnLinkDownTo, tl1tokConfigTable=tl1tokConfigTable, tl1stapBridgeHelloTime=tl1stapBridgeHelloTime, tl1ospfRtrId=tl1ospfRtrId, tl1idpBroadcastInterval=tl1idpBroadcastInterval, tl1fddiSMTStnDownstreamNbr=tl1fddiSMTStnDownstreamNbr, tl1ospfIntfAuthKey=tl1ospfIntfAuthKey, tl1ospfIntfType=tl1ospfIntfType, tl1fddiSMTLinkErrorRateAlarm=tl1fddiSMTLinkErrorRateAlarm, tl1pppIpcpAO=tl1pppIpcpAO, ufddiSMTStationIdGrp=ufddiSMTStationIdGrp, tl1srtbStatEntMacAddrTable=tl1srtbStatEntMacAddrTable, tl1fddiMACWonClaimBid=tl1fddiMACWonClaimBid, tl1idpOutEchoReps=tl1idpOutEchoReps, tl1idpErrOutSocket=tl1idpErrOutSocket, uegpEnoughInterval=uegpEnoughInterval, tl1ipFilterSrcNet=tl1ipFilterSrcNet, tl1x25PinvR1=tl1x25PinvR1, tl1x25PinvP5=tl1x25PinvP5, tl1egpMode=tl1egpMode, tl1stapCPortPriority=tl1stapCPortPriority, uggpNeighbor=uggpNeighbor, tl1srtbDynamicPortNumber=tl1srtbDynamicPortNumber, tl1fddiMACStatTable=tl1fddiMACStatTable, tl1ipFilterDstNet=tl1ipFilterDstNet, tl1breStatEntry=tl1breStatEntry, uifHdlcThrowaway=uifHdlcThrowaway, tl1egpSharedNetwork=tl1egpSharedNetwork, tl1ripHolddown=tl1ripHolddown, tl1fddiMACRbcCollision=tl1fddiMACRbcCollision, tl1ipStaticRouteEntry=tl1ipStaticRouteEntry, tl1pppRsTimeout=tl1pppRsTimeout, tl1srtbMacAddrAcfEntry=tl1srtbMacAddrAcfEntry, uegpSharedNetwork=uegpSharedNetwork, tl1systemErrorCode=tl1systemErrorCode, tl1srtbMaskAcfPermit=tl1srtbMaskAcfPermit, tl1fddiMACHighClmRcvd=tl1fddiMACHighClmRcvd, tl1ipLoopback=tl1ipLoopback, ufddiMACEntry=ufddiMACEntry, tl1breBlBridgeNumber=tl1breBlBridgeNumber, tl1ipLogicalDisconnect=tl1ipLogicalDisconnect, tl1fddiSMTDasScmState=tl1fddiSMTDasScmState, tl1egpErrorTreatment=tl1egpErrorTreatment, tl1x25Window=tl1x25Window, tl1breOutSRFs=tl1breOutSRFs, tl1fddiSMTStnType=tl1fddiSMTStnType, ufddiMACShortGrpAddr=ufddiMACShortGrpAddr, ufddiPHYAction=ufddiPHYAction, ufddiPHYConnectState=ufddiPHYConnectState, tl1fddiMACOtherBecRcvd=tl1fddiMACOtherBecRcvd, tl1egpNbrTable=tl1egpNbrTable, uegpMinPollInterval=uegpMinPollInterval, uegpAutoSysNumber=uegpAutoSysNumber, tl1fddiMACTxSyncFrm=tl1fddiMACTxSyncFrm, tl1stapCBridgeMaxAge=tl1stapCBridgeMaxAge, tl1idpFilterDestinationNet=tl1idpFilterDestinationNet, tl1fddiMACTxAsyncChain=tl1fddiMACTxAsyncChain, tl1ospfAttRtrIpAddr=tl1ospfAttRtrIpAddr, tl1srtbValidSRFramesReceived=tl1srtbValidSRFramesReceived, uifHdlcRto=uifHdlcRto, uipStaticRouteEntry=uipStaticRouteEntry, tl1fddiPHYOperationalTable=tl1fddiPHYOperationalTable, tl1idpInMsgs=tl1idpInMsgs, tl1ospfIntfTransDelay=tl1ospfIntfTransDelay, tl1fddiMACRcvThrot=tl1fddiMACRcvThrot, tl1ospfNBMAEntry=tl1ospfNBMAEntry, usystem=usystem, tl1stapPTopologyChangeAck=tl1stapPTopologyChangeAck, tl1srtbLanId=tl1srtbLanId, ufddiPHYConnectedResId=ufddiPHYConnectedResId, tl1fddiMACTransmitCt=tl1fddiMACTransmitCt, tl1fddiMACOperationalTable=tl1fddiMACOperationalTable, tl1idpStaticRouteNetwork=tl1idpStaticRouteNetwork, tl1idpInEchoReply=tl1idpInEchoReply, tl1pppBadIpcp=tl1pppBadIpcp, tl1srtbStatEntPortArrayEntry=tl1srtbStatEntPortArrayEntry, tl1fddiSMTAttachCount=tl1fddiSMTAttachCount, tl1ipFilterExceptionDstNet=tl1ipFilterExceptionDstNet, tl1fddiPHYConnectState=tl1fddiPHYConnectState, tlipRoutePidsTable=tlipRoutePidsTable, tl1stapSpanningTreeEnabled=tl1stapSpanningTreeEnabled, uddnConnections=uddnConnections, tl1ipFilterEntry=tl1ipFilterEntry, uipRedirectTo=uipRedirectTo, tl1stapDesignatedRoot=tl1stapDesignatedRoot, tl1srtbMaskAcfTable=tl1srtbMaskAcfTable, tl1srtbPermDbSize=tl1srtbPermDbSize, utcpThruput=utcpThruput, ufddiMACTvxExpiredCt=ufddiMACTvxExpiredCt, tl1idpBadNbr=tl1idpBadNbr, uggpEchoInterval=uggpEchoInterval, tl1fddiMACFrameCt=tl1fddiMACFrameCt, uddnTimeout=uddnTimeout)
