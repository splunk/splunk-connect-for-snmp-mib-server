#
# PySNMP MIB module NNC-ATM-PROTOSTATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNC-ATM-PROTOSTATISTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:12:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nncExtensions, NncExtCounter64 = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions", "NncExtCounter64")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Counter32, Gauge32, IpAddress, MibIdentifier, Integer32, ObjectIdentity, Bits, NotificationType, TimeTicks, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Gauge32", "IpAddress", "MibIdentifier", "Integer32", "ObjectIdentity", "Bits", "NotificationType", "TimeTicks", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nncAtmProtoStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 54))
if mibBuilder.loadTexts: nncAtmProtoStatistics.setLastUpdated('9604240330Z')
if mibBuilder.loadTexts: nncAtmProtoStatistics.setOrganization('Newbridge Networks Corporation')
nncAtmProtoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 54, 1))
nncAtmProtoGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 54, 2))
nncAtmProtoCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 54, 3))
nncAtmProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1), )
if mibBuilder.loadTexts: nncAtmProtoCurrTable.setStatus('current')
nncAtmProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncAtmProtoCurrEntry.setStatus('current')
nncAtmProtoCurrValidInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1, 1), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoCurrValidInCells.setStatus('current')
nncAtmProtoCurrCorrHeaderInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoCurrCorrHeaderInCells.setStatus('current')
nncAtmProtoCurrDisHECInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoCurrDisHECInCells.setStatus('current')
nncAtmProtoCurrDisInvalidVPIVCIInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoCurrDisInvalidVPIVCIInCells.setStatus('current')
nncAtmProtoCurrOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 1, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoCurrOutCells.setStatus('current')
nncAtmProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2), )
if mibBuilder.loadTexts: nncAtmProtoHistTable.setStatus('current')
nncAtmProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistIndex"))
if mibBuilder.loadTexts: nncAtmProtoHistEntry.setStatus('current')
nncAtmProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: nncAtmProtoHistIndex.setStatus('current')
nncAtmProtoHistValidInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoHistValidInCells.setStatus('current')
nncAtmProtoHistCorrHeaderInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoHistCorrHeaderInCells.setStatus('current')
nncAtmProtoHistDisHECInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoHistDisHECInCells.setStatus('current')
nncAtmProtoHistDisInvalidVPIVCIInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoHistDisInvalidVPIVCIInCells.setStatus('current')
nncAtmProtoHistOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoHistOutCells.setStatus('current')
nncAtmProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3), )
if mibBuilder.loadTexts: nncAtmProtoTotalTable.setStatus('current')
nncAtmProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncAtmProtoTotalEntry.setStatus('current')
nncAtmProtoTotalValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalValidIntervals.setStatus('current')
nncAtmProtoTotalValidInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalValidInCells.setStatus('current')
nncAtmProtoTotalCorrHeaderInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalCorrHeaderInCells.setStatus('current')
nncAtmProtoTotalDisHECInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalDisHECInCells.setStatus('current')
nncAtmProtoTotalDisInvalidVPIVCIInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalDisInvalidVPIVCIInCells.setStatus('current')
nncAtmProtoTotalOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoTotalOutCells.setStatus('current')
nncAtmProtoRawTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4), )
if mibBuilder.loadTexts: nncAtmProtoRawTable.setStatus('current')
nncAtmProtoRawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncAtmProtoRawEntry.setStatus('current')
nncAtmProtoRawValidInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoRawValidInCells.setStatus('current')
nncAtmProtoRawCorrHeaderInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoRawCorrHeaderInCells.setStatus('current')
nncAtmProtoRawDisHECInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoRawDisHECInCells.setStatus('current')
nncAtmProtoRawDisInvalidVPIVCIInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoRawDisInvalidVPIVCIInCells.setStatus('current')
nncAtmProtoRawOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 54, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmProtoRawOutCells.setStatus('current')
nncAtmProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 54, 2, 1)).setObjects(("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrValidInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrCorrHeaderInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrDisHECInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrDisInvalidVPIVCIInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrOutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmProtoCurrGroup = nncAtmProtoCurrGroup.setStatus('current')
nncAtmProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 54, 2, 2)).setObjects(("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistIndex"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistValidInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistCorrHeaderInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistDisHECInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistDisInvalidVPIVCIInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistOutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmProtoHistGroup = nncAtmProtoHistGroup.setStatus('current')
nncAtmProtoTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 54, 2, 3)).setObjects(("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalValidIntervals"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalValidInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalCorrHeaderInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalDisHECInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalDisInvalidVPIVCIInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalOutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmProtoTotalGroup = nncAtmProtoTotalGroup.setStatus('current')
nncAtmProtoRawGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 54, 2, 4)).setObjects(("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawValidInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawCorrHeaderInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawDisHECInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawDisInvalidVPIVCIInCells"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawOutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmProtoRawGroup = nncAtmProtoRawGroup.setStatus('current')
nncAtmProtoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 54, 3, 1)).setObjects(("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoCurrGroup"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoHistGroup"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoTotalGroup"), ("NNC-ATM-PROTOSTATISTICS-MIB", "nncAtmProtoRawGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmProtoCompliance = nncAtmProtoCompliance.setStatus('current')
mibBuilder.exportSymbols("NNC-ATM-PROTOSTATISTICS-MIB", nncAtmProtoRawTable=nncAtmProtoRawTable, nncAtmProtoCurrCorrHeaderInCells=nncAtmProtoCurrCorrHeaderInCells, nncAtmProtoCurrGroup=nncAtmProtoCurrGroup, nncAtmProtoRawDisInvalidVPIVCIInCells=nncAtmProtoRawDisInvalidVPIVCIInCells, nncAtmProtoStatistics=nncAtmProtoStatistics, nncAtmProtoObjects=nncAtmProtoObjects, nncAtmProtoHistDisInvalidVPIVCIInCells=nncAtmProtoHistDisInvalidVPIVCIInCells, nncAtmProtoTotalEntry=nncAtmProtoTotalEntry, nncAtmProtoRawGroup=nncAtmProtoRawGroup, nncAtmProtoTotalValidInCells=nncAtmProtoTotalValidInCells, nncAtmProtoRawEntry=nncAtmProtoRawEntry, nncAtmProtoCurrEntry=nncAtmProtoCurrEntry, nncAtmProtoGroups=nncAtmProtoGroups, nncAtmProtoCompliances=nncAtmProtoCompliances, nncAtmProtoHistGroup=nncAtmProtoHistGroup, nncAtmProtoHistDisHECInCells=nncAtmProtoHistDisHECInCells, nncAtmProtoRawOutCells=nncAtmProtoRawOutCells, nncAtmProtoCurrValidInCells=nncAtmProtoCurrValidInCells, nncAtmProtoHistEntry=nncAtmProtoHistEntry, nncAtmProtoTotalDisHECInCells=nncAtmProtoTotalDisHECInCells, nncAtmProtoRawValidInCells=nncAtmProtoRawValidInCells, nncAtmProtoCurrOutCells=nncAtmProtoCurrOutCells, nncAtmProtoHistIndex=nncAtmProtoHistIndex, nncAtmProtoHistTable=nncAtmProtoHistTable, nncAtmProtoRawDisHECInCells=nncAtmProtoRawDisHECInCells, nncAtmProtoTotalDisInvalidVPIVCIInCells=nncAtmProtoTotalDisInvalidVPIVCIInCells, nncAtmProtoCompliance=nncAtmProtoCompliance, nncAtmProtoHistCorrHeaderInCells=nncAtmProtoHistCorrHeaderInCells, nncAtmProtoCurrTable=nncAtmProtoCurrTable, nncAtmProtoCurrDisHECInCells=nncAtmProtoCurrDisHECInCells, nncAtmProtoCurrDisInvalidVPIVCIInCells=nncAtmProtoCurrDisInvalidVPIVCIInCells, PYSNMP_MODULE_ID=nncAtmProtoStatistics, nncAtmProtoHistValidInCells=nncAtmProtoHistValidInCells, nncAtmProtoTotalGroup=nncAtmProtoTotalGroup, nncAtmProtoTotalOutCells=nncAtmProtoTotalOutCells, nncAtmProtoTotalTable=nncAtmProtoTotalTable, nncAtmProtoHistOutCells=nncAtmProtoHistOutCells, nncAtmProtoTotalCorrHeaderInCells=nncAtmProtoTotalCorrHeaderInCells, nncAtmProtoTotalValidIntervals=nncAtmProtoTotalValidIntervals, nncAtmProtoRawCorrHeaderInCells=nncAtmProtoRawCorrHeaderInCells)
