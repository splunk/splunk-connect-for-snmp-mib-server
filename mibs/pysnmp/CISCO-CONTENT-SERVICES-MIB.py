#
# PySNMP MIB module CISCO-CONTENT-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CONTENT-SERVICES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:36:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
MplsVpnId, = mibBuilder.importSymbols("MPLS-VPN-MIB", "MplsVpnId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, iso, ObjectIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Gauge32, NotificationType, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "iso", "ObjectIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Gauge32", "NotificationType", "ModuleIdentity", "Counter32", "TimeTicks")
TextualConvention, TruthValue, RowStatus, TimeStamp, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "TimeStamp", "TimeInterval", "DisplayString")
ciscoContentServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 597))
ciscoContentServicesMIB.setRevisions(('2012-11-09 00:00', '2012-04-27 00:00', '2012-02-13 00:00', '2011-02-05 00:00', '2010-01-28 00:00', '2009-08-12 00:00', '2009-01-28 00:00', '2008-09-26 00:00', '2008-04-21 00:00', '2007-03-21 00:00',))
if mibBuilder.loadTexts: ciscoContentServicesMIB.setLastUpdated('201211090000Z')
if mibBuilder.loadTexts: ciscoContentServicesMIB.setOrganization('Cisco Systems, Inc.')
ciscoContentServicesMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 0))
ciscoContentServicesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1))
ciscoContentServicesMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2))
ccsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1))
ccsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2))
ccsNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3))
ccsNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4))
class CcsServerPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1000)

ccsGlobalCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1), )
if mibBuilder.loadTexts: ccsGlobalCfgTable.setStatus('current')
ccsGlobalCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsGlobalCfgTableEntry.setStatus('current')
ccsgcBMALostRecordTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 2), TimeInterval().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgcBMALostRecordTimer.setStatus('current')
ccsgcQuotaMgrLostRecordTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 3), TimeInterval().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgcQuotaMgrLostRecordTimer.setStatus('current')
ccsgsUserThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 4), Unsigned32()).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserThreshold.setStatus('current')
ccsAdControlAlarmUpdateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsAdControlAlarmUpdateTimer.setStatus('current')
ccsNetServerResponseFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseFailAlarmThreshold.setStatus('current')
ccsNetServerResponseFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseFailClearThreshold.setStatus('current')
ccsNetServerFirstPayloadResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 8), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerFirstPayloadResponseTime.setStatus('current')
ccsNetServerResponseTimeFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailAlarmThreshold.setStatus('current')
ccsNetServerResponseTimeFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailClearThreshold.setStatus('current')
ccsProtocolParseFailAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(5)).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsProtocolParseFailAlarmThreshold.setStatus('current')
ccsProtocolParseFailClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967293))).setUnits('errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsProtocolParseFailClearThreshold.setStatus('current')
ccsgsUserEntriesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(300000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserEntriesThreshold.setStatus('current')
ccsgsSessionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsSessionThreshold.setStatus('current')
ccsGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1), )
if mibBuilder.loadTexts: ccsGlobalStatsTable.setStatus('current')
ccsGlobalStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsGlobalStatsTableEntry.setStatus('current')
ccsgsUserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 1), Gauge32()).setUnits('users').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsUserCurrent.setStatus('current')
ccsgsUserHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 2), Gauge32()).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsUserHighWater.setStatus('current')
ccsgsUserHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsUserHighWaterResetTime.setStatus('current')
ccsgsSessionCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 4), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsSessionCurrent.setStatus('current')
ccsgsSessionHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsSessionHighWater.setStatus('current')
ccsgsSessionHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsSessionHighWaterResetTime.setStatus('current')
ccsgsGTPBMARejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMARejected.setStatus('current')
ccsgsHCGTPBMARejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMARejected.setStatus('current')
ccsgsGTPBMADropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMADropped.setStatus('current')
ccsgsHCGTPBMADropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 10), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMADropped.setStatus('current')
ccsgsGTPBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPBMARetransmit.setStatus('current')
ccsgsHCGTPBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 12), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPBMARetransmit.setStatus('current')
ccsgsGTPQuotaMgrRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRejected.setStatus('current')
ccsgsHCGTPQuotaMgrRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 14), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRejected.setStatus('current')
ccsgsGTPQuotaMgrDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 15), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrDropped.setStatus('current')
ccsgsHCGTPQuotaMgrDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 16), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrDropped.setStatus('current')
ccsgsGTPQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 17), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRetransmit.setStatus('current')
ccsgsHCGTPQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 18), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHCGTPQuotaMgrRetransmit.setStatus('current')
ccsgsGTPBMARateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 19), TimeInterval().clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsGTPBMARateInterval.setStatus('current')
ccsgsGTPQuotaMgrRateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 20), TimeInterval().clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsgsGTPQuotaMgrRateInterval.setStatus('current')
ccsgsGxRuleActivationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 21), Counter32()).setUnits('Gx Rule').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRuleActivationFail.setStatus('current')
ccsgsGxRuleDeactivationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 22), Counter32()).setUnits('Gx Rule').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRuleDeactivationFail.setStatus('current')
ccsgsGxRevalidationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 23), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRevalidationSuccess.setStatus('current')
ccsgsGxRevalidationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 24), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsGxRevalidationFail.setStatus('current')
ccsgsHTTPHdrObscure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 25), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHTTPHdrObscure.setStatus('current')
ccsgsHTTPHdrBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 1, 1, 26), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsgsHTTPHdrBlock.setStatus('current')
ccsUserDbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2), )
if mibBuilder.loadTexts: ccsUserDbTable.setStatus('current')
ccsUserDbTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsUserDbPort"))
if mibBuilder.loadTexts: ccsUserDbTableEntry.setStatus('current')
ccsUserDbVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsUserDbVrfName.setStatus('current')
ccsUserDbIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsUserDbIpAddrType.setStatus('current')
ccsUserDbIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsUserDbIpAddr.setStatus('current')
ccsUserDbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsUserDbPort.setStatus('current')
ccsUserDbState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("active", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbState.setStatus('current')
ccsUserDbRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 6), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbRequests.setStatus('current')
ccsUserDbHCRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 7), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCRequests.setStatus('current')
ccsUserDbUidsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 8), Counter32()).setUnits('returned identifiers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbUidsReturned.setStatus('current')
ccsUserDbHCUidsReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 9), Counter64()).setUnits('returned identifiers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCUidsReturned.setStatus('current')
ccsUserDbReqResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 10), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqResent.setStatus('current')
ccsUserDbHCReqResent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqResent.setStatus('current')
ccsUserDbReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 12), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqTimeouts.setStatus('current')
ccsUserDbHCReqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 13), Counter64()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqTimeouts.setStatus('current')
ccsUserDbReqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 14), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbReqErrors.setStatus('current')
ccsUserDbHCReqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 15), Counter64()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsUserDbHCReqErrors.setStatus('current')
ccsUserDbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsUserDbRowStatus.setStatus('current')
ccsBMATable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3), )
if mibBuilder.loadTexts: ccsBMATable.setStatus('current')
ccsBMATableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsBMAPort"))
if mibBuilder.loadTexts: ccsBMATableEntry.setStatus('current')
ccsBMAVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsBMAVrfName.setStatus('current')
ccsBMAIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsBMAIpAddrType.setStatus('current')
ccsBMAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsBMAIpAddr.setStatus('current')
ccsBMAPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsBMAPort.setStatus('current')
ccsBMAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 5), CcsServerPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMAPriority.setStatus('current')
ccsBMAState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standby", 1), ("failed", 2), ("active", 3), ("echowait", 4), ("nawait", 5), ("suspended", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAState.setStatus('current')
ccsBMALostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 7), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMALostRecords.setStatus('current')
ccsBMAHCLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCLostRecords.setStatus('current')
ccsBMATotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 9), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMATotalSent.setStatus('current')
ccsBMAHCTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 10), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCTotalSent.setStatus('current')
ccsBMAFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 11), Counter32()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAFailAck.setStatus('current')
ccsBMAHCFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 12), Counter64()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCFailAck.setStatus('current')
ccsBMAOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 13), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAOutstanding.setStatus('current')
ccsBMAHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 14), Gauge32()).setUnits('messages').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMAHighWater.setStatus('current')
ccsBMAHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHighWaterResetTime.setStatus('current')
ccsBMABadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 16), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMABadRecord.setStatus('current')
ccsBMAHCBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 17), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCBadRecord.setStatus('current')
ccsBMARetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 18), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMARetransmit.setStatus('current')
ccsBMAHCRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 19), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAHCRetransmit.setStatus('current')
ccsBMARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsBMARowStatus.setStatus('current')
ccsBMAPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 21), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAPacketRate.setStatus('current')
ccsBMAAckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 3, 1, 22), Gauge32()).setUnits('acknowledgments').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsBMAAckRate.setStatus('current')
ccsQuotaMgrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4), )
if mibBuilder.loadTexts: ccsQuotaMgrTable.setStatus('current')
ccsQuotaMgrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrVrfName"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrIpAddrType"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrIpAddr"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPort"))
if mibBuilder.loadTexts: ccsQuotaMgrTableEntry.setStatus('current')
ccsQuotaMgrVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 1), MplsVpnId())
if mibBuilder.loadTexts: ccsQuotaMgrVrfName.setStatus('current')
ccsQuotaMgrIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ccsQuotaMgrIpAddrType.setStatus('current')
ccsQuotaMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: ccsQuotaMgrIpAddr.setStatus('current')
ccsQuotaMgrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: ccsQuotaMgrPort.setStatus('current')
ccsQuotaMgrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 5), CcsServerPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrPriority.setStatus('current')
ccsQuotaMgrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("standby", 1), ("failed", 2), ("active", 3), ("echowait", 4), ("nawait", 5), ("suspended", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrState.setStatus('current')
ccsQuotaMgrLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 7), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrLostRecords.setStatus('current')
ccsQuotaMgrHCLostRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCLostRecords.setStatus('current')
ccsQuotaMgrTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 9), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrTotalSent.setStatus('current')
ccsQuotaMgrHCTotalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 10), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCTotalSent.setStatus('current')
ccsQuotaMgrFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 11), Counter32()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrFailAck.setStatus('current')
ccsQuotaMgrHCFailAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 12), Counter64()).setUnits('acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCFailAck.setStatus('current')
ccsQuotaMgrOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 13), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrOutstanding.setStatus('current')
ccsQuotaMgrHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 14), Gauge32()).setUnits('messages').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrHighWater.setStatus('current')
ccsQuotaMgrHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHighWaterResetTime.setStatus('current')
ccsQuotaMgrBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 16), Counter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrBadRecord.setStatus('current')
ccsQuotaMgrHCBadRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 17), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCBadRecord.setStatus('current')
ccsQuotaMgrRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 18), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrRetransmit.setStatus('current')
ccsQuotaMgrHCRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 19), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrHCRetransmit.setStatus('current')
ccsQuotaMgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccsQuotaMgrRowStatus.setStatus('current')
ccsQuotaMgrPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 21), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrPacketRate.setStatus('current')
ccsQuotaMgrAckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 4, 1, 22), Gauge32()).setUnits('acknowledgments').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsQuotaMgrAckRate.setStatus('current')
ccsLoadStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5))
ccsProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6), )
if mibBuilder.loadTexts: ccsProtocolStatsTable.setStatus('current')
ccsProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccspsInspectionMethod"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccspsProtocolName"))
if mibBuilder.loadTexts: ccsProtocolStatsEntry.setStatus('current')
ccspsInspectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("nbar", 2))))
if mibBuilder.loadTexts: ccspsInspectionMethod.setStatus('current')
ccspsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ccspsProtocolName.setStatus('current')
ccspsTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 3), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransaction.setStatus('current')
ccspsHCTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 4), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCTransaction.setStatus('current')
ccspsTransactionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 5), Gauge32()).setUnits('transactions per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRate.setStatus('current')
ccspsTransactionRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 6), Gauge32()).setUnits('transactions per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsTransactionRateHighWater.setStatus('current')
ccspsTransactionRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterResetTime.setStatus('current')
ccspsTransactionRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsTransactionRateHighWaterTime.setStatus('current')
ccspsSubOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPackets.setStatus('current')
ccspsHCSubOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCSubOutPackets.setStatus('current')
ccspsSubOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 11), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRate.setStatus('current')
ccspsSubOutPacketRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 12), Gauge32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWater.setStatus('current')
ccspsSubOutPacketRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterResetTime.setStatus('current')
ccspsSubOutPacketRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutPacketRateHighWaterTime.setStatus('current')
ccspsNetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPackets.setStatus('current')
ccspsHCNetOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCNetOutPackets.setStatus('current')
ccspsNetOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 17), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRate.setStatus('current')
ccspsNetOutPacketRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 18), Gauge32()).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWater.setStatus('current')
ccspsNetOutPacketRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterResetTime.setStatus('current')
ccspsNetOutPacketRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutPacketRateHighWaterTime.setStatus('current')
ccspsSubOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 21), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBytes.setStatus('current')
ccspsHCSubOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 22), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCSubOutBytes.setStatus('current')
ccspsSubOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 23), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRate.setStatus('current')
ccspsSubOutBitRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 24), Gauge32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWater.setStatus('current')
ccspsSubOutBitRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterResetTime.setStatus('current')
ccspsSubOutBitRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsSubOutBitRateHighWaterTime.setStatus('current')
ccspsNetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 27), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBytes.setStatus('current')
ccspsHCNetOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 28), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsHCNetOutBytes.setStatus('current')
ccspsNetOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 29), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRate.setStatus('current')
ccspsNetOutBitRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 30), Gauge32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWater.setStatus('current')
ccspsNetOutBitRateHighWaterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterResetTime.setStatus('current')
ccspsNetOutBitRateHighWaterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 6, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccspsNetOutBitRateHighWaterTime.setStatus('current')
ccsBillingPlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7), )
if mibBuilder.loadTexts: ccsBillingPlanStatsTable.setStatus('current')
ccsBillingPlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-CONTENT-SERVICES-MIB", "ccsbpsBillingPlanName"))
if mibBuilder.loadTexts: ccsBillingPlanStatsEntry.setStatus('current')
ccsbpsBillingPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ccsbpsBillingPlanName.setStatus('current')
ccsbpsSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 2), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsSubscribers.setStatus('current')
ccsbpsHCSubscribers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 3), CounterBasedGauge64()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsHCSubscribers.setStatus('current')
ccsbpsSubscribersHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 4), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsSubscribersHighWater.setStatus('current')
ccsbpsHCSubscribersHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 7, 1, 5), CounterBasedGauge64()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsbpsHCSubscribersHighWater.setStatus('current')
ccsLoadStatRadiusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ccsLoadStatRadiusTable.setStatus('current')
ccsLoadStatRadiusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatRadiusEntry.setStatus('current')
ccsLoadStatRadiusStartAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowed.setStatus('current')
ccsLoadStatHCRadiusStartAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowed.setStatus('current')
ccsLoadStatRadiusStartAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRate.setStatus('current')
ccsLoadStatRadiusStartAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartAllowedRateHighWater.setStatus('current')
ccsLoadStatHCRadiusStartAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRateHighWater.setStatus('current')
ccsLoadStatRadiusStartIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatRadiusStartDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenied.setStatus('current')
ccsLoadStatHCRadiusStartDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenied.setStatus('current')
ccsLoadStatRadiusStartDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRate.setStatus('current')
ccsLoadStatRadiusStartDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatRadiusStartDenialRateHighWater.setStatus('current')
ccsLoadStatHCRadiusStartDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRateHighWater.setStatus('current')
ccsLoadStatHCRadiusStartAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartAllowedRate.setStatus('current')
ccsLoadStatHCRadiusStartDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 1, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCRadiusStartDenialRate.setStatus('current')
ccsLoadStatUserDBTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2), )
if mibBuilder.loadTexts: ccsLoadStatUserDBTable.setStatus('current')
ccsLoadStatUserDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatUserDBEntry.setStatus('current')
ccsLoadStatUserDBReqAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowed.setStatus('current')
ccsLoadStatHCUserDBReqAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowed.setStatus('current')
ccsLoadStatUserDBReqAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRate.setStatus('current')
ccsLoadStatUserDBReqAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqAllowedRateHighWater.setStatus('current')
ccsLoadStatHCUserDBReqAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRateHighWater.setStatus('current')
ccsLoadStatUserDBReqIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatUserDBReqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenied.setStatus('current')
ccsLoadStatHCUserDBReqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenied.setStatus('current')
ccsLoadStatUserDBReqDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRate.setStatus('current')
ccsLoadStatUserDBReqDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatUserDBReqDenialRateHighWater.setStatus('current')
ccsLoadStatHCUserDBReqDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRateHighWater.setStatus('current')
ccsLoadStatHCUserDBReqAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqAllowedRate.setStatus('current')
ccsLoadStatHCUserDBReqDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 2, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCUserDBReqDenialRate.setStatus('current')
ccsLoadStatSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3), )
if mibBuilder.loadTexts: ccsLoadStatSessionTable.setStatus('current')
ccsLoadStatSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatSessionEntry.setStatus('current')
ccsLoadStatSessionCreateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 1), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowed.setStatus('current')
ccsLoadStatHCSessionCreateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 2), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowed.setStatus('current')
ccsLoadStatSessionCreateAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 3), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRate.setStatus('current')
ccsLoadStatSessionCreateAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 4), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateAllowedRateHighWater.setStatus('current')
ccsLoadStatHCSessionCreateAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 5), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRateHighWater.setStatus('current')
ccsLoadStatSessionCreateIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatSessionCreateDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenied.setStatus('current')
ccsLoadStatHCSessionCreateDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 8), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenied.setStatus('current')
ccsLoadStatSessionCreateDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 9), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRate.setStatus('current')
ccsLoadStatSessionCreateDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 10), Gauge32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatSessionCreateDenialRateHighWater.setStatus('current')
ccsLoadStatHCSessionCreateDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 11), Counter64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRateHighWater.setStatus('current')
ccsLoadStatHCSessionCreateAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 12), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateAllowedRate.setStatus('current')
ccsLoadStatHCSessionCreateDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 3, 1, 13), CounterBasedGauge64()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCSessionCreateDenialRate.setStatus('current')
ccsLoadStatBMATable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4), )
if mibBuilder.loadTexts: ccsLoadStatBMATable.setStatus('current')
ccsLoadStatBMAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatBMAEntry.setStatus('current')
ccsLoadStatBMAMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowed.setStatus('current')
ccsLoadStatHCBMAMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 2), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowed.setStatus('current')
ccsLoadStatBMAMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 3), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRate.setStatus('current')
ccsLoadStatBMAMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 4), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsAllowedRateHighWater.setStatus('current')
ccsLoadStatHCBMAMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRateHighWater.setStatus('current')
ccsLoadStatBMAMsgsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatBMAMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenied.setStatus('current')
ccsLoadStatHCBMAMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenied.setStatus('current')
ccsLoadStatBMAMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 9), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRate.setStatus('current')
ccsLoadStatBMAMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 10), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatBMAMsgsDenialRateHighWater.setStatus('current')
ccsLoadStatHCBMAMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRateHighWater.setStatus('current')
ccsLoadStatHCBMAMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 12), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsAllowedRate.setStatus('current')
ccsLoadStatHCBMAMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 4, 1, 13), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCBMAMsgsDenialRate.setStatus('current')
ccsLoadStatQuotaMgrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5), )
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrTable.setStatus('current')
ccsLoadStatQuotaMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrEntry.setStatus('current')
ccsLoadStatQuotaMgrMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowed.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 2), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowed.setStatus('current')
ccsLoadStatQuotaMgrMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 3), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRate.setStatus('current')
ccsLoadStatQuotaMgrMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 4), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsAllowedRateHighWater.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater.setStatus('current')
ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatQuotaMgrMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenied.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenied.setStatus('current')
ccsLoadStatQuotaMgrMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 9), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRate.setStatus('current')
ccsLoadStatQuotaMgrMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 10), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatQuotaMgrMsgsDenialRateHighWater.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 12), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsAllowedRate.setStatus('current')
ccsLoadStatHCQuotaMgrMsgsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 5, 1, 13), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCQuotaMgrMsgsDenialRate.setStatus('current')
ccsLoadStatGxEventTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6), )
if mibBuilder.loadTexts: ccsLoadStatGxEventTable.setStatus('current')
ccsLoadStatGxEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsLoadStatGxEventEntry.setStatus('current')
ccsLoadStatGxEventsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowed.setStatus('current')
ccsLoadStatHCGxEventsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 2), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowed.setStatus('current')
ccsLoadStatGxEventsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 3), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRate.setStatus('current')
ccsLoadStatGxEventsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 4), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsAllowedRateHighWater.setStatus('current')
ccsLoadStatHCGxEventsAllowedRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 5), Counter64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRateHighWater.setStatus('current')
ccsLoadStatGxEventsIPCQueueDepthTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsIPCQueueDepthTolerance.setStatus('current')
ccsLoadStatGxEventsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 7), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenied.setStatus('current')
ccsLoadStatHCGxEventsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 8), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenied.setStatus('current')
ccsLoadStatGxEventsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 9), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRate.setStatus('current')
ccsLoadStatGxEventsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 10), Gauge32()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatGxEventsDenialRateHighWater.setStatus('current')
ccsLoadStatHCGxEventsDenialRateHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 11), Counter64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRateHighWater.setStatus('current')
ccsLoadStatHCGxEventsAllowedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 12), CounterBasedGauge64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsAllowedRate.setStatus('current')
ccsLoadStatHCGxEventsDenialRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 2, 5, 6, 1, 13), CounterBasedGauge64()).setUnits('notifications per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLoadStatHCGxEventsDenialRate.setStatus('current')
ccsNotifCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1), )
if mibBuilder.loadTexts: ccsNotifCfgTable.setStatus('current')
ccsNotifCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ccsNotifCfgTableEntry.setStatus('current')
ccsBMAStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsBMAStateChangeNotifEnabled.setStatus('current')
ccsQuotaMgrStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsQuotaMgrStateChangeNotifEnabled.setStatus('current')
ccsUserDbStateChangeNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserDbStateChangeNotifEnabled.setStatus('current')
ccsBMALostRecordEventNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsBMALostRecordEventNotifEnabled.setStatus('current')
ccsQuotaMgrLostRecordEventNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsQuotaMgrLostRecordEventNotifEnabled.setStatus('current')
ccsUserThresholdExceededNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserThresholdExceededNotifEnabled.setStatus('current')
ccsAdControlNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsAdControlNotifEnabled.setStatus('current')
ccsUserEntriesThresholdNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsUserEntriesThresholdNotifEnabled.setStatus('current')
ccsSessionThresholdNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsSessionThresholdNotifEnabled.setStatus('current')
ccsTPIndexNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsTPIndexNotifInfo.setStatus('current')
ccsServiceNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsServiceNameNotifInfo.setStatus('current')
ccsContentNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsContentNameNotifInfo.setStatus('current')
ccsPolicyNameNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsPolicyNameNotifInfo.setStatus('current')
ccsNetServerIpAddrTypeNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 5), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerIpAddrTypeNotifInfo.setStatus('current')
ccsNetServerIpAddrNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 6), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerIpAddrNotifInfo.setStatus('current')
ccsNetServerPortNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 7), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerPortNotifInfo.setStatus('current')
ccsSubscriberIpAddrTypeNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 8), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberIpAddrTypeNotifInfo.setStatus('current')
ccsSubscriberIpAddrNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 9), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberIpAddrNotifInfo.setStatus('current')
ccsSubscriberPortNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 10), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsSubscriberPortNotifInfo.setStatus('current')
ccsNetServerResponseFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerResponseFailCountNotifInfo.setStatus('current')
ccsNetServerResponseTimeFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsNetServerResponseTimeFailCountNotifInfo.setStatus('current')
ccsProtocolParseFailCountNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsProtocolParseFailCountNotifInfo.setStatus('current')
ccsgUserSessionSeverityNotifInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 597, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccsgUserSessionSeverityNotifInfo.setStatus('current')
ciscoContentServicesBMAStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesBMAStateChange.setStatus('current')
ciscoContentServicesQuotaMgrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrStateChange.setStatus('current')
ciscoContentServicesUserDbStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqErrors"))
if mibBuilder.loadTexts: ciscoContentServicesUserDbStateChange.setStatus('current')
ciscoContentServicesBMALostRecordEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesBMALostRecordEvent.setStatus('current')
ciscoContentServicesQuotaMgrLostRecordEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"))
if mibBuilder.loadTexts: ciscoContentServicesQuotaMgrLostRecordEvent.setStatus('current')
ciscoContentServicesUserThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 6)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesUserThresholdExceeded.setStatus('current')
ciscoContentServicesNetServerResponseFailExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailExceeded.setStatus('current')
ciscoContentServicesNetServerResponseTimeExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeExceeded.setStatus('current')
ciscoContentServicesProtocolParseFailExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailExceeded.setStatus('current')
ciscoContentServicesNetServerResponseFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseFailAlarmCleared.setStatus('current')
ciscoContentServicesNetServerResponseTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 11)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesNetServerResponseTimeAlarmCleared.setStatus('current')
ciscoContentServicesProtocolParseFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 12)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if mibBuilder.loadTexts: ciscoContentServicesProtocolParseFailAlarmCleared.setStatus('current')
ciscoContentServicesUserEntriesThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 13)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"))
if mibBuilder.loadTexts: ciscoContentServicesUserEntriesThreshold.setStatus('current')
ciscoContentServicesSessionThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 597, 0, 14)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"))
if mibBuilder.loadTexts: ciscoContentServicesSessionThreshold.setStatus('current')
ciscoContentServicesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1))
ciscoContentServicesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2))
ciscoContentServicesMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBCompliance = ciscoContentServicesMIBCompliance.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev1 = ciscoContentServicesMIBComplianceRev1.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev2 = ciscoContentServicesMIBComplianceRev2.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev3 = ciscoContentServicesMIBComplianceRev3.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev4 = ciscoContentServicesMIBComplianceRev4.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 6)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev5 = ciscoContentServicesMIBComplianceRev5.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev6 = ciscoContentServicesMIBComplianceRev6.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev7 = ciscoContentServicesMIBComplianceRev7.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalHTTPGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev8 = ciscoContentServicesMIBComplianceRev8.setStatus('deprecated')
ciscoContentServicesMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 1, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifInfoGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServiceProtocolStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBillingPlanStatsGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatRadiusGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatUserDBGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatSessionGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatBMAGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatQuotaMgrGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesLoadStatGxEventGroupSup1"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalStatsGroupSup2"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalHTTPGroup"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesGlobalCfgGroupSup3"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifEnableGroupSup3"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNotifGroupSup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesMIBComplianceRev9 = ciscoContentServicesMIBComplianceRev9.setStatus('current')
ciscoContentServicesGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 1)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgcBMALostRecordTimer"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgcQuotaMgrLostRecordTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroup = ciscoContentServicesGlobalCfgGroup.setStatus('current')
ciscoContentServicesGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 2)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionCurrent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionHighWaterResetTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroup = ciscoContentServicesGlobalStatsGroup.setStatus('current')
ciscoContentServicesUserDbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 3)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCRequests"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCUidsReturned"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqResent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqTimeouts"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbReqErrors"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbHCReqErrors"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesUserDbGroup = ciscoContentServicesUserDbGroup.setStatus('current')
ciscoContentServicesBMAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 4)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAPriority"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMATotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMABadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAHCRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMARowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBMAGroup = ciscoContentServicesBMAGroup.setStatus('current')
ciscoContentServicesQuotaMgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 5)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPriority"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrState"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCLostRecords"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCTotalSent"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCFailAck"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrOutstanding"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCBadRecord"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrHCRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesQuotaMgrGroup = ciscoContentServicesQuotaMgrGroup.setStatus('current')
ciscoContentServicesNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 7)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsUserDbStateChangeNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMALostRecordEventNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrLostRecordEventNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroup = ciscoContentServicesNotifEnableGroup.setStatus('current')
ciscoContentServicesNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 8)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMAStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserDbStateChange"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesBMALostRecordEvent"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesQuotaMgrLostRecordEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroup = ciscoContentServicesNotifGroup.setStatus('current')
ciscoContentServicesLoadStatRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 9)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatRadiusGroup = ciscoContentServicesLoadStatRadiusGroup.setStatus('deprecated')
ciscoContentServicesLoadStatUserDBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 10)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatUserDBGroup = ciscoContentServicesLoadStatUserDBGroup.setStatus('deprecated')
ciscoContentServicesLoadStatSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 11)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatSessionGroup = ciscoContentServicesLoadStatSessionGroup.setStatus('deprecated')
ciscoContentServicesLoadStatBMAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 12)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatBMAGroup = ciscoContentServicesLoadStatBMAGroup.setStatus('deprecated')
ciscoContentServicesLoadStatQuotaMgrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 13)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatQuotaMgrGroup = ciscoContentServicesLoadStatQuotaMgrGroup.setStatus('deprecated')
ciscoContentServicesGlobalStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 14)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMARejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMADropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMADropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPBMARetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrRejected"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrDropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrDropped"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHCGTPQuotaMgrRetransmit"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPBMARateInterval"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGTPQuotaMgrRateInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroupSup1 = ciscoContentServicesGlobalStatsGroupSup1.setStatus('current')
ciscoContentServicesBMAGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 15)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsBMAPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsBMAAckRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBMAGroupSup1 = ciscoContentServicesBMAGroupSup1.setStatus('current')
ciscoContentServicesQuotaMgrGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 16)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsQuotaMgrAckRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesQuotaMgrGroupSup1 = ciscoContentServicesQuotaMgrGroupSup1.setStatus('current')
ciscoContentServicesGlobalCfgGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 17)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup1 = ciscoContentServicesGlobalCfgGroupSup1.setStatus('current')
ciscoContentServicesNotifEnableGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 18)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserThresholdExceededNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup1 = ciscoContentServicesNotifEnableGroupSup1.setStatus('current')
ciscoContentServicesNotifGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 19)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserThresholdExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup1 = ciscoContentServicesNotifGroupSup1.setStatus('current')
ciscoContentServicesGlobalCfgGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 20)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsAdControlAlarmUpdateTimer"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailClearThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerFirstPayloadResponseTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailClearThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailAlarmThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailClearThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup2 = ciscoContentServicesGlobalCfgGroupSup2.setStatus('current')
ciscoContentServicesNotifEnableGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 21)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsAdControlNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup2 = ciscoContentServicesNotifEnableGroupSup2.setStatus('current')
ciscoContentServicesNotifGroupSup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 22)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseFailExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseTimeExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesProtocolParseFailExceeded"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseFailAlarmCleared"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesNetServerResponseTimeAlarmCleared"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesProtocolParseFailAlarmCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup2 = ciscoContentServicesNotifGroupSup2.setStatus('current')
ciscoContentServicesNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 23)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsTPIndexNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsServiceNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsContentNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsPolicyNameNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrTypeNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberIpAddrNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSubscriberPortNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsNetServerResponseTimeFailCountNotifInfo"), ("CISCO-CONTENT-SERVICES-MIB", "ccsProtocolParseFailCountNotifInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifInfoGroup = ciscoContentServicesNotifInfoGroup.setStatus('current')
ciscoContentServiceProtocolStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 24)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccspsTransaction"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCTransaction"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsTransactionRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCSubOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutPacketRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCNetOutPackets"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutPacketRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCSubOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsSubOutBitRateHighWaterTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsHCNetOutBytes"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWaterResetTime"), ("CISCO-CONTENT-SERVICES-MIB", "ccspsNetOutBitRateHighWaterTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServiceProtocolStatsGroup = ciscoContentServiceProtocolStatsGroup.setStatus('current')
ciscoContentServicesLoadStatGxEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 25)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatGxEventGroup = ciscoContentServicesLoadStatGxEventGroup.setStatus('deprecated')
ciscoContentServicesBillingPlanStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 26)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsbpsSubscribers"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsHCSubscribers"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsSubscribersHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsbpsHCSubscribersHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesBillingPlanStatsGroup = ciscoContentServicesBillingPlanStatsGroup.setStatus('current')
ciscoContentServicesLoadStatRadiusGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 27)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatRadiusStartDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCRadiusStartDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatRadiusGroupSup1 = ciscoContentServicesLoadStatRadiusGroupSup1.setStatus('current')
ciscoContentServicesLoadStatUserDBGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 28)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatUserDBReqDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCUserDBReqDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatUserDBGroupSup1 = ciscoContentServicesLoadStatUserDBGroupSup1.setStatus('current')
ciscoContentServicesLoadStatSessionGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 29)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatSessionCreateDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCSessionCreateDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatSessionGroupSup1 = ciscoContentServicesLoadStatSessionGroupSup1.setStatus('current')
ciscoContentServicesLoadStatBMAGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 30)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatBMAMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCBMAMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatBMAGroupSup1 = ciscoContentServicesLoadStatBMAGroupSup1.setStatus('current')
ciscoContentServicesLoadStatQuotaMgrGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 31)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatQuotaMgrMsgsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatQuotaMgrGroupSup1 = ciscoContentServicesLoadStatQuotaMgrGroupSup1.setStatus('current')
ciscoContentServicesLoadStatGxEventGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 32)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowed"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsAllowedRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsIPCQueueDepthTolerance"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenied"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRate"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatGxEventsDenialRateHighWater"), ("CISCO-CONTENT-SERVICES-MIB", "ccsLoadStatHCGxEventsDenialRateHighWater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesLoadStatGxEventGroupSup1 = ciscoContentServicesLoadStatGxEventGroupSup1.setStatus('current')
ciscoContentServicesGlobalStatsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 33)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRuleActivationFail"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRuleDeactivationFail"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRevalidationSuccess"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsGxRevalidationFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalStatsGroupSup2 = ciscoContentServicesGlobalStatsGroupSup2.setStatus('current')
ciscoContentServicesGlobalHTTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 34)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsHTTPHdrObscure"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsHTTPHdrBlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalHTTPGroup = ciscoContentServicesGlobalHTTPGroup.setStatus('current')
ciscoContentServicesGlobalCfgGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 35)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgsUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ccsgsSessionThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesGlobalCfgGroupSup3 = ciscoContentServicesGlobalCfgGroupSup3.setStatus('current')
ciscoContentServicesNotifEnableGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 36)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsUserEntriesThresholdNotifEnabled"), ("CISCO-CONTENT-SERVICES-MIB", "ccsSessionThresholdNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifEnableGroupSup3 = ciscoContentServicesNotifEnableGroupSup3.setStatus('current')
ciscoContentServicesNotifGroupSup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 37)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesUserEntriesThreshold"), ("CISCO-CONTENT-SERVICES-MIB", "ciscoContentServicesSessionThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifGroupSup3 = ciscoContentServicesNotifGroupSup3.setStatus('current')
ciscoContentServicesNotifInfoGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 597, 2, 2, 38)).setObjects(("CISCO-CONTENT-SERVICES-MIB", "ccsgUserSessionSeverityNotifInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoContentServicesNotifInfoGroupSup1 = ciscoContentServicesNotifInfoGroupSup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-CONTENT-SERVICES-MIB", ccsLoadStatHCUserDBReqAllowed=ccsLoadStatHCUserDBReqAllowed, ccsQuotaMgrAckRate=ccsQuotaMgrAckRate, ccsgsUserCurrent=ccsgsUserCurrent, ccsBMAVrfName=ccsBMAVrfName, ccsLoadStatBMAEntry=ccsLoadStatBMAEntry, ccsgcQuotaMgrLostRecordTimer=ccsgcQuotaMgrLostRecordTimer, ccsNotifCfgTableEntry=ccsNotifCfgTableEntry, ccsQuotaMgrLostRecordEventNotifEnabled=ccsQuotaMgrLostRecordEventNotifEnabled, ccsUserDbHCReqResent=ccsUserDbHCReqResent, ciscoContentServicesGlobalCfgGroupSup3=ciscoContentServicesGlobalCfgGroupSup3, ccsLoadStatHCGxEventsAllowedRate=ccsLoadStatHCGxEventsAllowedRate, ccsgsSessionThreshold=ccsgsSessionThreshold, ciscoContentServicesLoadStatSessionGroup=ciscoContentServicesLoadStatSessionGroup, ccsgsSessionCurrent=ccsgsSessionCurrent, ccsUserDbState=ccsUserDbState, ccsNotifInfo=ccsNotifInfo, ccsgsUserThreshold=ccsgsUserThreshold, ccsgsHCGTPQuotaMgrRejected=ccsgsHCGTPQuotaMgrRejected, ciscoContentServicesNotifInfoGroupSup1=ciscoContentServicesNotifInfoGroupSup1, ccspsNetOutPacketRateHighWater=ccspsNetOutPacketRateHighWater, ciscoContentServicesSessionThreshold=ciscoContentServicesSessionThreshold, ccsUserDbVrfName=ccsUserDbVrfName, ccsgsGxRuleActivationFail=ccsgsGxRuleActivationFail, ccsLoadStatGxEventsAllowedRateHighWater=ccsLoadStatGxEventsAllowedRateHighWater, ccspsSubOutBitRateHighWaterTime=ccspsSubOutBitRateHighWaterTime, ccsLoadStatGxEventsDenialRate=ccsLoadStatGxEventsDenialRate, ciscoContentServicesNotifEnableGroupSup3=ciscoContentServicesNotifEnableGroupSup3, ccspsTransactionRateHighWaterResetTime=ccspsTransactionRateHighWaterResetTime, ccsLoadStatBMAMsgsDenialRate=ccsLoadStatBMAMsgsDenialRate, ccsLoadStatHCUserDBReqAllowedRate=ccsLoadStatHCUserDBReqAllowedRate, ccsUserDbIpAddr=ccsUserDbIpAddr, ccsLoadStatUserDBReqDenialRate=ccsLoadStatUserDBReqDenialRate, ccsLoadStatHCRadiusStartAllowed=ccsLoadStatHCRadiusStartAllowed, ccsLoadStatSessionCreateDenied=ccsLoadStatSessionCreateDenied, ccsLoadStatHCGxEventsDenialRate=ccsLoadStatHCGxEventsDenialRate, ccsgsGxRevalidationSuccess=ccsgsGxRevalidationSuccess, ccsLoadStatGxEventTable=ccsLoadStatGxEventTable, ccsQuotaMgrLostRecords=ccsQuotaMgrLostRecords, ccsLoadStatHCSessionCreateDenied=ccsLoadStatHCSessionCreateDenied, ciscoContentServiceProtocolStatsGroup=ciscoContentServiceProtocolStatsGroup, ccsLoadStatHCBMAMsgsDenied=ccsLoadStatHCBMAMsgsDenied, ccsgcBMALostRecordTimer=ccsgcBMALostRecordTimer, ccspsInspectionMethod=ccspsInspectionMethod, ciscoContentServicesUserDbStateChange=ciscoContentServicesUserDbStateChange, ccsBMALostRecordEventNotifEnabled=ccsBMALostRecordEventNotifEnabled, ccspsNetOutPacketRate=ccspsNetOutPacketRate, ccsBMAAckRate=ccsBMAAckRate, ccsUserDbTable=ccsUserDbTable, ciscoContentServicesMIBGroups=ciscoContentServicesMIBGroups, ccsQuotaMgrFailAck=ccsQuotaMgrFailAck, ccspsHCSubOutPackets=ccspsHCSubOutPackets, ccsBMAPriority=ccsBMAPriority, ccsLoadStatGxEventsAllowedRate=ccsLoadStatGxEventsAllowedRate, ccsNetServerResponseTimeFailAlarmThreshold=ccsNetServerResponseTimeFailAlarmThreshold, ccsLoadStatHCBMAMsgsDenialRateHighWater=ccsLoadStatHCBMAMsgsDenialRateHighWater, ccsBMATableEntry=ccsBMATableEntry, ccsBMAHCLostRecords=ccsBMAHCLostRecords, ccsNetServerFirstPayloadResponseTime=ccsNetServerFirstPayloadResponseTime, ccsLoadStatRadiusStartDenialRateHighWater=ccsLoadStatRadiusStartDenialRateHighWater, ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance=ccsLoadStatQuotaMgrMsgsIPCQueueDepthTolerance, ccsBMAPort=ccsBMAPort, ccsLoadStatHCRadiusStartDenialRateHighWater=ccsLoadStatHCRadiusStartDenialRateHighWater, ccsbpsBillingPlanName=ccsbpsBillingPlanName, ccsBMATable=ccsBMATable, ciscoContentServicesMIBComplianceRev6=ciscoContentServicesMIBComplianceRev6, CcsServerPriority=CcsServerPriority, ciscoContentServicesProtocolParseFailAlarmCleared=ciscoContentServicesProtocolParseFailAlarmCleared, ccsNetServerResponseFailCountNotifInfo=ccsNetServerResponseFailCountNotifInfo, ccsServiceNameNotifInfo=ccsServiceNameNotifInfo, ciscoContentServicesNetServerResponseTimeAlarmCleared=ciscoContentServicesNetServerResponseTimeAlarmCleared, ccsLoadStatHCQuotaMgrMsgsDenied=ccsLoadStatHCQuotaMgrMsgsDenied, ccsProtocolStatsTable=ccsProtocolStatsTable, ccsgsGTPBMARateInterval=ccsgsGTPBMARateInterval, ccsgsSessionHighWater=ccsgsSessionHighWater, ccsgsGTPQuotaMgrRejected=ccsgsGTPQuotaMgrRejected, ciscoContentServicesLoadStatQuotaMgrGroup=ciscoContentServicesLoadStatQuotaMgrGroup, ccsProtocolParseFailClearThreshold=ccsProtocolParseFailClearThreshold, ccsNetServerPortNotifInfo=ccsNetServerPortNotifInfo, ciscoContentServicesGlobalStatsGroupSup1=ciscoContentServicesGlobalStatsGroupSup1, ccsAdControlAlarmUpdateTimer=ccsAdControlAlarmUpdateTimer, ccsTPIndexNotifInfo=ccsTPIndexNotifInfo, ccsLoadStatHCSessionCreateDenialRateHighWater=ccsLoadStatHCSessionCreateDenialRateHighWater, ccsLoadStatSessionCreateAllowed=ccsLoadStatSessionCreateAllowed, ccsUserDbIpAddrType=ccsUserDbIpAddrType, ccsLoadStatRadiusTable=ccsLoadStatRadiusTable, ccsQuotaMgrTable=ccsQuotaMgrTable, ccsQuotaMgrTableEntry=ccsQuotaMgrTableEntry, ccsbpsSubscribers=ccsbpsSubscribers, ccsAdControlNotifEnabled=ccsAdControlNotifEnabled, ccsUserEntriesThresholdNotifEnabled=ccsUserEntriesThresholdNotifEnabled, ccsLoadStatRadiusStartAllowedRate=ccsLoadStatRadiusStartAllowedRate, ccsQuotaMgrHighWaterResetTime=ccsQuotaMgrHighWaterResetTime, ccsLoadStatHCUserDBReqDenialRateHighWater=ccsLoadStatHCUserDBReqDenialRateHighWater, ccsgsUserHighWater=ccsgsUserHighWater, ccsLoadStatHCUserDBReqAllowedRateHighWater=ccsLoadStatHCUserDBReqAllowedRateHighWater, ccsgsUserEntriesThreshold=ccsgsUserEntriesThreshold, ccsQuotaMgrPriority=ccsQuotaMgrPriority, ccspsHCNetOutBytes=ccspsHCNetOutBytes, ccsQuotaMgrStateChangeNotifEnabled=ccsQuotaMgrStateChangeNotifEnabled, ciscoContentServicesLoadStatUserDBGroup=ciscoContentServicesLoadStatUserDBGroup, PYSNMP_MODULE_ID=ciscoContentServicesMIB, ccsQuotaMgrPort=ccsQuotaMgrPort, ccsLoadStatHCRadiusStartAllowedRateHighWater=ccsLoadStatHCRadiusStartAllowedRateHighWater, ccsLoadStatUserDBReqDenialRateHighWater=ccsLoadStatUserDBReqDenialRateHighWater, ccsNotifConfig=ccsNotifConfig, ccsLoadStatGxEventsAllowed=ccsLoadStatGxEventsAllowed, ccsbpsHCSubscribers=ccsbpsHCSubscribers, ccsLoadStatHCUserDBReqDenialRate=ccsLoadStatHCUserDBReqDenialRate, ccsGlobalCfgTable=ccsGlobalCfgTable, ciscoContentServicesMIBComplianceRev4=ciscoContentServicesMIBComplianceRev4, ccsLoadStatRadiusStartIPCQueueDepthTolerance=ccsLoadStatRadiusStartIPCQueueDepthTolerance, ccsNetServerIpAddrNotifInfo=ccsNetServerIpAddrNotifInfo, ccsBMAHCTotalSent=ccsBMAHCTotalSent, ccsBillingPlanStatsEntry=ccsBillingPlanStatsEntry, ccsBMALostRecords=ccsBMALostRecords, ccsgsGTPBMARejected=ccsgsGTPBMARejected, ccsLoadStatGxEventsDenied=ccsLoadStatGxEventsDenied, ccsLoadStatRadiusStartDenied=ccsLoadStatRadiusStartDenied, ciscoContentServicesLoadStatGxEventGroupSup1=ciscoContentServicesLoadStatGxEventGroupSup1, ccsgsHCGTPBMARetransmit=ccsgsHCGTPBMARetransmit, ccsBMAStateChangeNotifEnabled=ccsBMAStateChangeNotifEnabled, ccsUserDbReqResent=ccsUserDbReqResent, ccsgsSessionHighWaterResetTime=ccsgsSessionHighWaterResetTime, ccsLoadStatHCSessionCreateAllowed=ccsLoadStatHCSessionCreateAllowed, ccsNetServerResponseTimeFailClearThreshold=ccsNetServerResponseTimeFailClearThreshold, ccsLoadStatHCSessionCreateAllowedRate=ccsLoadStatHCSessionCreateAllowedRate, ccsLoadStatHCGxEventsAllowedRateHighWater=ccsLoadStatHCGxEventsAllowedRateHighWater, ciscoContentServicesMIBCompliance=ciscoContentServicesMIBCompliance, ccsSubscriberIpAddrNotifInfo=ccsSubscriberIpAddrNotifInfo, ccsLoadStatHCQuotaMgrMsgsAllowed=ccsLoadStatHCQuotaMgrMsgsAllowed, ccsQuotaMgrHCFailAck=ccsQuotaMgrHCFailAck, ciscoContentServicesNetServerResponseFailExceeded=ciscoContentServicesNetServerResponseFailExceeded, ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater=ccsLoadStatHCQuotaMgrMsgsDenialRateHighWater, ccsbpsSubscribersHighWater=ccsbpsSubscribersHighWater, ccsQuotaMgrBadRecord=ccsQuotaMgrBadRecord, ccsLoadStatRadiusStartAllowedRateHighWater=ccsLoadStatRadiusStartAllowedRateHighWater, ccsUserDbPort=ccsUserDbPort, ccsBMATotalSent=ccsBMATotalSent, ccsLoadStatGxEventsDenialRateHighWater=ccsLoadStatGxEventsDenialRateHighWater, ccsQuotaMgrHCRetransmit=ccsQuotaMgrHCRetransmit, ciscoContentServicesMIBComplianceRev3=ciscoContentServicesMIBComplianceRev3, ccspsNetOutPacketRateHighWaterTime=ccspsNetOutPacketRateHighWaterTime, ccspsProtocolName=ccspsProtocolName, ciscoContentServicesBMAGroupSup1=ciscoContentServicesBMAGroupSup1, ccsLoadStatHCBMAMsgsDenialRate=ccsLoadStatHCBMAMsgsDenialRate, ccsLoadStatSessionCreateAllowedRateHighWater=ccsLoadStatSessionCreateAllowedRateHighWater, ccspsNetOutPacketRateHighWaterResetTime=ccspsNetOutPacketRateHighWaterResetTime, ccsBMAIpAddrType=ccsBMAIpAddrType, ccsQuotaMgrOutstanding=ccsQuotaMgrOutstanding, ciscoContentServicesMIBCompliances=ciscoContentServicesMIBCompliances, ccsLoadStatUserDBReqAllowedRate=ccsLoadStatUserDBReqAllowedRate, ccsgsGTPQuotaMgrRateInterval=ccsgsGTPQuotaMgrRateInterval, ccsBMAHCFailAck=ccsBMAHCFailAck, ciscoContentServicesMIBComplianceRev9=ciscoContentServicesMIBComplianceRev9, ccsgsHCGTPQuotaMgrRetransmit=ccsgsHCGTPQuotaMgrRetransmit, ciscoContentServicesMIBConform=ciscoContentServicesMIBConform, ccsbpsHCSubscribersHighWater=ccsbpsHCSubscribersHighWater, ccsUserDbHCRequests=ccsUserDbHCRequests, ccsBMABadRecord=ccsBMABadRecord, ccspsSubOutBitRateHighWater=ccspsSubOutBitRateHighWater, ccsGlobalStatsTableEntry=ccsGlobalStatsTableEntry, ccsBillingPlanStatsTable=ccsBillingPlanStatsTable, ciscoContentServicesQuotaMgrGroupSup1=ciscoContentServicesQuotaMgrGroupSup1, ccsQuotaMgrState=ccsQuotaMgrState, ciscoContentServicesLoadStatGxEventGroup=ciscoContentServicesLoadStatGxEventGroup, ciscoContentServicesGlobalCfgGroupSup2=ciscoContentServicesGlobalCfgGroupSup2, ccsgsGTPBMARetransmit=ccsgsGTPBMARetransmit, ciscoContentServicesLoadStatSessionGroupSup1=ciscoContentServicesLoadStatSessionGroupSup1, ccspsSubOutBytes=ccspsSubOutBytes, ccsBMAState=ccsBMAState, ccsgUserSessionSeverityNotifInfo=ccsgUserSessionSeverityNotifInfo, ccsgsHTTPHdrObscure=ccsgsHTTPHdrObscure, ccsLoadStatUserDBReqDenied=ccsLoadStatUserDBReqDenied, ccsLoadStatBMAMsgsDenied=ccsLoadStatBMAMsgsDenied, ccsLoadStatQuotaMgrMsgsDenialRateHighWater=ccsLoadStatQuotaMgrMsgsDenialRateHighWater, ccsBMAHCBadRecord=ccsBMAHCBadRecord, ccspsNetOutPackets=ccspsNetOutPackets, ccsLoadStatUserDBReqAllowed=ccsLoadStatUserDBReqAllowed, ccsLoadStatBMAMsgsDenialRateHighWater=ccsLoadStatBMAMsgsDenialRateHighWater, ccspsTransaction=ccspsTransaction, ccsBMARetransmit=ccsBMARetransmit, ccsgsHCGTPBMARejected=ccsgsHCGTPBMARejected, ciscoContentServicesQuotaMgrLostRecordEvent=ciscoContentServicesQuotaMgrLostRecordEvent, ccsSessionThresholdNotifEnabled=ccsSessionThresholdNotifEnabled, ccsUserDbHCUidsReturned=ccsUserDbHCUidsReturned, ccsUserDbStateChangeNotifEnabled=ccsUserDbStateChangeNotifEnabled, ciscoContentServicesMIB=ciscoContentServicesMIB, ccsQuotaMgrVrfName=ccsQuotaMgrVrfName, ccsgsGxRevalidationFail=ccsgsGxRevalidationFail, ccsSubscriberIpAddrTypeNotifInfo=ccsSubscriberIpAddrTypeNotifInfo, ccsLoadStatSessionCreateDenialRate=ccsLoadStatSessionCreateDenialRate, ccsLoadStatSessionTable=ccsLoadStatSessionTable, ccsgsGTPQuotaMgrDropped=ccsgsGTPQuotaMgrDropped, ciscoContentServicesGlobalCfgGroup=ciscoContentServicesGlobalCfgGroup, ciscoContentServicesQuotaMgrStateChange=ciscoContentServicesQuotaMgrStateChange, ciscoContentServicesUserDbGroup=ciscoContentServicesUserDbGroup, ccsNetServerResponseFailClearThreshold=ccsNetServerResponseFailClearThreshold, ccsLoadStatQuotaMgrTable=ccsLoadStatQuotaMgrTable, ciscoContentServicesLoadStatBMAGroupSup1=ciscoContentServicesLoadStatBMAGroupSup1, ciscoContentServicesLoadStatRadiusGroup=ciscoContentServicesLoadStatRadiusGroup, ccsLoadStatBMAMsgsIPCQueueDepthTolerance=ccsLoadStatBMAMsgsIPCQueueDepthTolerance, ccsLoadStatQuotaMgrMsgsAllowedRate=ccsLoadStatQuotaMgrMsgsAllowedRate, ciscoContentServicesLoadStatQuotaMgrGroupSup1=ciscoContentServicesLoadStatQuotaMgrGroupSup1, ccsBMAFailAck=ccsBMAFailAck, ciscoContentServicesGlobalHTTPGroup=ciscoContentServicesGlobalHTTPGroup, ccsBMAOutstanding=ccsBMAOutstanding, ccsBMAHCRetransmit=ccsBMAHCRetransmit, ccsNotifCfgTable=ccsNotifCfgTable, ccsUserThresholdExceededNotifEnabled=ccsUserThresholdExceededNotifEnabled, ccsgsGTPBMADropped=ccsgsGTPBMADropped, ccsUserDbRequests=ccsUserDbRequests, ccsUserDbTableEntry=ccsUserDbTableEntry, ccsGlobalStatsTable=ccsGlobalStatsTable, ciscoContentServicesMIBComplianceRev8=ciscoContentServicesMIBComplianceRev8, ccsQuotaMgrHCTotalSent=ccsQuotaMgrHCTotalSent, ccspsHCTransaction=ccspsHCTransaction, ciscoContentServicesMIBComplianceRev7=ciscoContentServicesMIBComplianceRev7, ccsLoadStatQuotaMgrEntry=ccsLoadStatQuotaMgrEntry, ccsLoadStatSessionCreateIPCQueueDepthTolerance=ccsLoadStatSessionCreateIPCQueueDepthTolerance, ccsLoadStatSessionEntry=ccsLoadStatSessionEntry, ccsBMARowStatus=ccsBMARowStatus, ciscoContentServicesLoadStatRadiusGroupSup1=ciscoContentServicesLoadStatRadiusGroupSup1, ccsLoadStatHCSessionCreateDenialRate=ccsLoadStatHCSessionCreateDenialRate, ccsLoadStatBMAMsgsAllowedRateHighWater=ccsLoadStatBMAMsgsAllowedRateHighWater, ciscoContentServicesGlobalStatsGroup=ciscoContentServicesGlobalStatsGroup, ciscoContentServicesMIBComplianceRev2=ciscoContentServicesMIBComplianceRev2, ccsLoadStatRadiusStartAllowed=ccsLoadStatRadiusStartAllowed, ccsLoadStatQuotaMgrMsgsAllowedRateHighWater=ccsLoadStatQuotaMgrMsgsAllowedRateHighWater, ccsLoadStatQuotaMgrMsgsDenialRate=ccsLoadStatQuotaMgrMsgsDenialRate, ciscoContentServicesMIBComplianceRev1=ciscoContentServicesMIBComplianceRev1, ccsConfig=ccsConfig, ccspsSubOutPacketRateHighWaterResetTime=ccspsSubOutPacketRateHighWaterResetTime, ciscoContentServicesBMAStateChange=ciscoContentServicesBMAStateChange, ccsQuotaMgrHighWater=ccsQuotaMgrHighWater, ccsUserDbReqTimeouts=ccsUserDbReqTimeouts, ccsLoadStatUserDBTable=ccsLoadStatUserDBTable, ccspsNetOutBitRateHighWaterResetTime=ccspsNetOutBitRateHighWaterResetTime, ccspsTransactionRateHighWater=ccspsTransactionRateHighWater, ccsLoadStatUserDBReqAllowedRateHighWater=ccsLoadStatUserDBReqAllowedRateHighWater, ccsLoadStatHCRadiusStartAllowedRate=ccsLoadStatHCRadiusStartAllowedRate, ccspsSubOutBitRateHighWaterResetTime=ccspsSubOutBitRateHighWaterResetTime, ccsLoadStatHCQuotaMgrMsgsAllowedRate=ccsLoadStatHCQuotaMgrMsgsAllowedRate, ccsQuotaMgrHCBadRecord=ccsQuotaMgrHCBadRecord, ccspsSubOutPacketRate=ccspsSubOutPacketRate, ccsContentNameNotifInfo=ccsContentNameNotifInfo, ccsBMAIpAddr=ccsBMAIpAddr, ccsgsUserHighWaterResetTime=ccsgsUserHighWaterResetTime, ciscoContentServicesMIBNotifs=ciscoContentServicesMIBNotifs, ciscoContentServicesNotifGroup=ciscoContentServicesNotifGroup, ccspsHCSubOutBytes=ccspsHCSubOutBytes, ciscoContentServicesLoadStatBMAGroup=ciscoContentServicesLoadStatBMAGroup, ccspsSubOutPacketRateHighWaterTime=ccspsSubOutPacketRateHighWaterTime, ciscoContentServicesProtocolParseFailExceeded=ciscoContentServicesProtocolParseFailExceeded, ccsLoadStatGxEventEntry=ccsLoadStatGxEventEntry)
mibBuilder.exportSymbols("CISCO-CONTENT-SERVICES-MIB", ccsUserDbReqErrors=ccsUserDbReqErrors, ciscoContentServicesNotifInfoGroup=ciscoContentServicesNotifInfoGroup, ciscoContentServicesNotifGroupSup1=ciscoContentServicesNotifGroupSup1, ccsLoadStatHCGxEventsDenialRateHighWater=ccsLoadStatHCGxEventsDenialRateHighWater, ciscoContentServicesNetServerResponseTimeExceeded=ciscoContentServicesNetServerResponseTimeExceeded, ccsLoadStatHCGxEventsAllowed=ccsLoadStatHCGxEventsAllowed, ccsLoadStatHCQuotaMgrMsgsDenialRate=ccsLoadStatHCQuotaMgrMsgsDenialRate, ccsLoadStatBMAMsgsAllowedRate=ccsLoadStatBMAMsgsAllowedRate, ciscoContentServicesGlobalCfgGroupSup1=ciscoContentServicesGlobalCfgGroupSup1, ciscoContentServicesLoadStatUserDBGroupSup1=ciscoContentServicesLoadStatUserDBGroupSup1, ccsQuotaMgrRetransmit=ccsQuotaMgrRetransmit, ccsgsHTTPHdrBlock=ccsgsHTTPHdrBlock, ccspsSubOutPacketRateHighWater=ccspsSubOutPacketRateHighWater, ccspsSubOutPackets=ccspsSubOutPackets, ccsQuotaMgrTotalSent=ccsQuotaMgrTotalSent, ccspsSubOutBitRate=ccspsSubOutBitRate, ccsLoadStatBMATable=ccsLoadStatBMATable, ccsgsHCGTPQuotaMgrDropped=ccsgsHCGTPQuotaMgrDropped, ccsNetServerIpAddrTypeNotifInfo=ccsNetServerIpAddrTypeNotifInfo, ccsLoadStatSessionCreateAllowedRate=ccsLoadStatSessionCreateAllowedRate, ccsLoadStatUserDBEntry=ccsLoadStatUserDBEntry, ccsGlobalCfgTableEntry=ccsGlobalCfgTableEntry, ccsSubscriberPortNotifInfo=ccsSubscriberPortNotifInfo, ccsProtocolParseFailAlarmThreshold=ccsProtocolParseFailAlarmThreshold, ccsLoadStatBMAMsgsAllowed=ccsLoadStatBMAMsgsAllowed, ccspsNetOutBitRateHighWater=ccspsNetOutBitRateHighWater, ccsLoadStatHCBMAMsgsAllowedRateHighWater=ccsLoadStatHCBMAMsgsAllowedRateHighWater, ccsLoadStatSessionCreateDenialRateHighWater=ccsLoadStatSessionCreateDenialRateHighWater, ccsUserDbHCReqErrors=ccsUserDbHCReqErrors, ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater=ccsLoadStatHCQuotaMgrMsgsAllowedRateHighWater, ccsBMAHighWater=ccsBMAHighWater, ccsNetServerResponseTimeFailCountNotifInfo=ccsNetServerResponseTimeFailCountNotifInfo, ccsQuotaMgrHCLostRecords=ccsQuotaMgrHCLostRecords, ciscoContentServicesBillingPlanStatsGroup=ciscoContentServicesBillingPlanStatsGroup, ciscoContentServicesNotifGroupSup3=ciscoContentServicesNotifGroupSup3, ccsLoadStatHCGxEventsDenied=ccsLoadStatHCGxEventsDenied, ciscoContentServicesUserThresholdExceeded=ciscoContentServicesUserThresholdExceeded, ciscoContentServicesNotifEnableGroupSup2=ciscoContentServicesNotifEnableGroupSup2, ccsUserDbUidsReturned=ccsUserDbUidsReturned, ccspsHCNetOutPackets=ccspsHCNetOutPackets, ccsPolicyNameNotifInfo=ccsPolicyNameNotifInfo, ccsLoadStatistics=ccsLoadStatistics, ccsQuotaMgrPacketRate=ccsQuotaMgrPacketRate, ccsgsHCGTPBMADropped=ccsgsHCGTPBMADropped, ccsLoadStatHCRadiusStartDenialRate=ccsLoadStatHCRadiusStartDenialRate, ccsProtocolParseFailCountNotifInfo=ccsProtocolParseFailCountNotifInfo, ccsBMAHighWaterResetTime=ccsBMAHighWaterResetTime, ccsQuotaMgrRowStatus=ccsQuotaMgrRowStatus, ccsLoadStatUserDBReqIPCQueueDepthTolerance=ccsLoadStatUserDBReqIPCQueueDepthTolerance, ccsQuotaMgrIpAddrType=ccsQuotaMgrIpAddrType, ccsNetServerResponseFailAlarmThreshold=ccsNetServerResponseFailAlarmThreshold, ccsLoadStatHCRadiusStartDenied=ccsLoadStatHCRadiusStartDenied, ccspsNetOutBytes=ccspsNetOutBytes, ccsLoadStatQuotaMgrMsgsDenied=ccsLoadStatQuotaMgrMsgsDenied, ccspsTransactionRate=ccspsTransactionRate, ccsUserDbHCReqTimeouts=ccsUserDbHCReqTimeouts, ccsLoadStatHCUserDBReqDenied=ccsLoadStatHCUserDBReqDenied, ccsLoadStatHCBMAMsgsAllowedRate=ccsLoadStatHCBMAMsgsAllowedRate, ciscoContentServicesNotifGroupSup2=ciscoContentServicesNotifGroupSup2, ccsLoadStatHCBMAMsgsAllowed=ccsLoadStatHCBMAMsgsAllowed, ciscoContentServicesQuotaMgrGroup=ciscoContentServicesQuotaMgrGroup, ciscoContentServicesGlobalStatsGroupSup2=ciscoContentServicesGlobalStatsGroupSup2, ccspsNetOutBitRate=ccspsNetOutBitRate, ccspsNetOutBitRateHighWaterTime=ccspsNetOutBitRateHighWaterTime, ccsgsGxRuleDeactivationFail=ccsgsGxRuleDeactivationFail, ccsUserDbRowStatus=ccsUserDbRowStatus, ccspsTransactionRateHighWaterTime=ccspsTransactionRateHighWaterTime, ciscoContentServicesBMALostRecordEvent=ciscoContentServicesBMALostRecordEvent, ccsgsGTPQuotaMgrRetransmit=ccsgsGTPQuotaMgrRetransmit, ciscoContentServicesNetServerResponseFailAlarmCleared=ciscoContentServicesNetServerResponseFailAlarmCleared, ciscoContentServicesNotifEnableGroupSup1=ciscoContentServicesNotifEnableGroupSup1, ccsLoadStatRadiusStartDenialRate=ccsLoadStatRadiusStartDenialRate, ccsQuotaMgrIpAddr=ccsQuotaMgrIpAddr, ccsLoadStatRadiusEntry=ccsLoadStatRadiusEntry, ccsLoadStatGxEventsIPCQueueDepthTolerance=ccsLoadStatGxEventsIPCQueueDepthTolerance, ccsStats=ccsStats, ccsLoadStatHCSessionCreateAllowedRateHighWater=ccsLoadStatHCSessionCreateAllowedRateHighWater, ciscoContentServicesNotifEnableGroup=ciscoContentServicesNotifEnableGroup, ciscoContentServicesBMAGroup=ciscoContentServicesBMAGroup, ciscoContentServicesMIBObjects=ciscoContentServicesMIBObjects, ccsProtocolStatsEntry=ccsProtocolStatsEntry, ccsLoadStatQuotaMgrMsgsAllowed=ccsLoadStatQuotaMgrMsgsAllowed, ciscoContentServicesMIBComplianceRev5=ciscoContentServicesMIBComplianceRev5, ccsBMAPacketRate=ccsBMAPacketRate, ciscoContentServicesUserEntriesThreshold=ciscoContentServicesUserEntriesThreshold)
