#
# PySNMP MIB module CENTILLION-FILTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-FILTERS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
StatusIndicator, sysConfig = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "StatusIndicator", "sysConfig")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, IpAddress, NotificationType, iso, Unsigned32, ObjectIdentity, TimeTicks, Integer32, Counter64, Counter32, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "iso", "Unsigned32", "ObjectIdentity", "TimeTicks", "Integer32", "Counter64", "Counter32", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class GeneralFilterName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class NetbiosFilterName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class NetbiosFilterAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("discard", 1), ("forward", 2))

filterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11))
filterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1), )
if mibBuilder.loadTexts: filterGroupTable.setStatus('mandatory')
filterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1), ).setIndexNames((0, "CENTILLION-FILTERS-MIB", "filterGroupName"), (0, "CENTILLION-FILTERS-MIB", "filterGroupIndex"))
if mibBuilder.loadTexts: filterGroupEntry.setStatus('mandatory')
filterGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 1), GeneralFilterName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupName.setStatus('mandatory')
filterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupIndex.setStatus('mandatory')
filterGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 3), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupStatus.setStatus('mandatory')
filterGroupMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("le", 3), ("gt", 4), ("ne", 5), ("ge", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupMatch.setStatus('mandatory')
filterGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macFilter", 1), ("llcFilter", 2), ("vlanFilter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupType.setStatus('mandatory')
filterGroupOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupOffset.setStatus('mandatory')
filterGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupValue.setStatus('mandatory')
filterGroupForward = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("normClear", 1), ("alt", 2), ("add", 3), ("addAlt", 4), ("norm", 5), ("normAlt", 6), ("normAdd", 7), ("normAddAlt", 8), ("drop", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupForward.setStatus('mandatory')
filterGroupNextIfMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupNextIfMatch.setStatus('mandatory')
filterGroupNextIfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupNextIfFail.setStatus('mandatory')
filterGroupAdditionalDests = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupAdditionalDests.setStatus('deprecated')
filterGroupMonitorDests = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupMonitorDests.setStatus('deprecated')
filterGroupAdditionalDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupAdditionalDestinations.setStatus('mandatory')
filterGroupAlternateDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterGroupAlternateDestination.setStatus('mandatory')
filterPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2), )
if mibBuilder.loadTexts: filterPortTable.setStatus('mandatory')
filterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1), ).setIndexNames((0, "CENTILLION-FILTERS-MIB", "filterPortCardNumber"), (0, "CENTILLION-FILTERS-MIB", "filterPortPortNumber"), (0, "CENTILLION-FILTERS-MIB", "filterPortIndex"))
if mibBuilder.loadTexts: filterPortEntry.setStatus('mandatory')
filterPortCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortCardNumber.setStatus('mandatory')
filterPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortPortNumber.setStatus('mandatory')
filterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortIndex.setStatus('mandatory')
filterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1, 4), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortStatus.setStatus('mandatory')
filterPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 2, 1, 5), GeneralFilterName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortGroupName.setStatus('mandatory')
netbiosFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3), )
if mibBuilder.loadTexts: netbiosFilterPortTable.setStatus('mandatory')
netbiosFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1), ).setIndexNames((0, "CENTILLION-FILTERS-MIB", "netbiosFilterPortCardNumber"), (0, "CENTILLION-FILTERS-MIB", "netbiosFilterPortPortNumber"), (0, "CENTILLION-FILTERS-MIB", "netbiosFilterPortIndex"))
if mibBuilder.loadTexts: netbiosFilterPortEntry.setStatus('mandatory')
netbiosFilterPortCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortCardNumber.setStatus('mandatory')
netbiosFilterPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortPortNumber.setStatus('mandatory')
netbiosFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortIndex.setStatus('mandatory')
netbiosFilterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 4), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortStatus.setStatus('mandatory')
netbiosFilterPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 5), NetbiosFilterName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortName.setStatus('mandatory')
netbiosFilterPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 3, 1, 6), NetbiosFilterAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterPortAction.setStatus('mandatory')
netbiosFilterRingTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4), )
if mibBuilder.loadTexts: netbiosFilterRingTable.setStatus('mandatory')
netbiosFilterRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1), ).setIndexNames((0, "CENTILLION-FILTERS-MIB", "netbiosFilterRingNumber"), (0, "CENTILLION-FILTERS-MIB", "netbiosFilterRingIndex"))
if mibBuilder.loadTexts: netbiosFilterRingEntry.setStatus('mandatory')
netbiosFilterRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterRingNumber.setStatus('mandatory')
netbiosFilterRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterRingIndex.setStatus('mandatory')
netbiosFilterRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1, 3), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterRingStatus.setStatus('mandatory')
netbiosFilterRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1, 4), NetbiosFilterName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterRingName.setStatus('mandatory')
netbiosFilterRingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 4, 1, 5), NetbiosFilterAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosFilterRingAction.setStatus('mandatory')
outputFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5), )
if mibBuilder.loadTexts: outputFilterPortTable.setStatus('mandatory')
outputFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1), ).setIndexNames((0, "CENTILLION-FILTERS-MIB", "outputFilterPortCardNumber"), (0, "CENTILLION-FILTERS-MIB", "outputFilterPortPortNumber"), (0, "CENTILLION-FILTERS-MIB", "outputFilterPortIndex"))
if mibBuilder.loadTexts: outputFilterPortEntry.setStatus('mandatory')
outputFilterPortCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputFilterPortCardNumber.setStatus('mandatory')
outputFilterPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputFilterPortPortNumber.setStatus('mandatory')
outputFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputFilterPortIndex.setStatus('mandatory')
outputFilterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1, 4), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputFilterPortStatus.setStatus('mandatory')
outputFilterPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 11, 5, 1, 5), GeneralFilterName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputFilterPortGroupName.setStatus('mandatory')
mibBuilder.exportSymbols("CENTILLION-FILTERS-MIB", filterPortPortNumber=filterPortPortNumber, filterPortStatus=filterPortStatus, netbiosFilterRingNumber=netbiosFilterRingNumber, filterGroup=filterGroup, outputFilterPortEntry=outputFilterPortEntry, netbiosFilterPortStatus=netbiosFilterPortStatus, filterGroupAdditionalDests=filterGroupAdditionalDests, filterPortTable=filterPortTable, netbiosFilterPortEntry=netbiosFilterPortEntry, filterPortIndex=filterPortIndex, netbiosFilterPortName=netbiosFilterPortName, filterGroupOffset=filterGroupOffset, filterGroupStatus=filterGroupStatus, filterGroupEntry=filterGroupEntry, NetbiosFilterAction=NetbiosFilterAction, filterGroupAlternateDestination=filterGroupAlternateDestination, filterGroupTable=filterGroupTable, filterPortEntry=filterPortEntry, netbiosFilterRingName=netbiosFilterRingName, netbiosFilterRingAction=netbiosFilterRingAction, netbiosFilterRingTable=netbiosFilterRingTable, netbiosFilterPortIndex=netbiosFilterPortIndex, filterGroupNextIfMatch=filterGroupNextIfMatch, outputFilterPortTable=outputFilterPortTable, filterGroupNextIfFail=filterGroupNextIfFail, netbiosFilterPortTable=netbiosFilterPortTable, netbiosFilterPortAction=netbiosFilterPortAction, netbiosFilterRingStatus=netbiosFilterRingStatus, netbiosFilterPortPortNumber=netbiosFilterPortPortNumber, filterGroupMonitorDests=filterGroupMonitorDests, NetbiosFilterName=NetbiosFilterName, outputFilterPortCardNumber=outputFilterPortCardNumber, netbiosFilterRingEntry=netbiosFilterRingEntry, netbiosFilterPortCardNumber=netbiosFilterPortCardNumber, outputFilterPortIndex=outputFilterPortIndex, filterGroupType=filterGroupType, netbiosFilterRingIndex=netbiosFilterRingIndex, filterGroupMatch=filterGroupMatch, filterGroupName=filterGroupName, filterGroupValue=filterGroupValue, outputFilterPortPortNumber=outputFilterPortPortNumber, filterGroupIndex=filterGroupIndex, filterPortCardNumber=filterPortCardNumber, filterGroupAdditionalDestinations=filterGroupAdditionalDestinations, filterGroupForward=filterGroupForward, filterPortGroupName=filterPortGroupName, GeneralFilterName=GeneralFilterName, outputFilterPortStatus=outputFilterPortStatus, outputFilterPortGroupName=outputFilterPortGroupName)
