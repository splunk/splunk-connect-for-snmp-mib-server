#
# PySNMP MIB module ZHONE-COM-IP-ICMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-ICMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, iso, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, NotificationType, MibIdentifier, IpAddress, Counter32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "iso", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "NotificationType", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rdEntry, = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "rdEntry")
zhoneIp, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneIp", "zhoneModules")
comIpIcmp = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 55))
comIpIcmp.setRevisions(('2000-09-11 16:25',))
if mibBuilder.loadTexts: comIpIcmp.setLastUpdated('200009111648Z')
if mibBuilder.loadTexts: comIpIcmp.setOrganization('Zhone Technologies')
icmp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5))
if mibBuilder.loadTexts: icmp.setStatus('current')
zhoneIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1), )
if mibBuilder.loadTexts: zhoneIcmpTable.setStatus('current')
zhoneIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1), )
rdEntry.registerAugmentions(("ZHONE-COM-IP-ICMP-MIB", "zhoneIcmpEntry"))
zhoneIcmpEntry.setIndexNames(*rdEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneIcmpEntry.setStatus('current')
zhIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInMsgs.setStatus('current')
zhIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInErrors.setStatus('current')
zhIcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInDestUnreachs.setStatus('current')
zhIcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInTimeExcds.setStatus('current')
zhIcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInParmProbs.setStatus('current')
zhIcmpInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInSrcQuenchs.setStatus('current')
zhIcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInRedirects.setStatus('current')
zhIcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInEchos.setStatus('current')
zhIcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInEchoReps.setStatus('current')
zhIcmpInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInTimestamps.setStatus('current')
zhIcmpInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInTimestampReps.setStatus('current')
zhIcmpInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInAddrMasks.setStatus('current')
zhIcmpInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpInAddrMaskReps.setStatus('current')
zhIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutMsgs.setStatus('current')
zhIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutErrors.setStatus('current')
zhIcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutDestUnreachs.setStatus('current')
zhIcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutTimeExcds.setStatus('current')
zhIcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutParmProbs.setStatus('current')
zhIcmpOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutSrcQuenchs.setStatus('current')
zhIcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutRedirects.setStatus('current')
zhIcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutEchos.setStatus('current')
zhIcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutEchoReps.setStatus('current')
zhIcmpOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutTimestamps.setStatus('current')
zhIcmpOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutTimestampReps.setStatus('current')
zhIcmpOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutAddrMasks.setStatus('current')
zhIcmpOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhIcmpOutAddrMaskReps.setStatus('current')
mibBuilder.exportSymbols("ZHONE-COM-IP-ICMP-MIB", zhIcmpOutErrors=zhIcmpOutErrors, zhIcmpOutMsgs=zhIcmpOutMsgs, zhIcmpInEchos=zhIcmpInEchos, zhoneIcmpTable=zhoneIcmpTable, zhIcmpOutDestUnreachs=zhIcmpOutDestUnreachs, PYSNMP_MODULE_ID=comIpIcmp, zhIcmpInTimestampReps=zhIcmpInTimestampReps, zhIcmpOutRedirects=zhIcmpOutRedirects, zhIcmpOutTimestamps=zhIcmpOutTimestamps, zhIcmpOutEchos=zhIcmpOutEchos, zhIcmpInDestUnreachs=zhIcmpInDestUnreachs, zhIcmpOutTimeExcds=zhIcmpOutTimeExcds, zhIcmpOutAddrMaskReps=zhIcmpOutAddrMaskReps, zhoneIcmpEntry=zhoneIcmpEntry, zhIcmpInSrcQuenchs=zhIcmpInSrcQuenchs, zhIcmpInEchoReps=zhIcmpInEchoReps, comIpIcmp=comIpIcmp, zhIcmpOutAddrMasks=zhIcmpOutAddrMasks, zhIcmpInErrors=zhIcmpInErrors, icmp=icmp, zhIcmpInAddrMaskReps=zhIcmpInAddrMaskReps, zhIcmpOutParmProbs=zhIcmpOutParmProbs, zhIcmpInParmProbs=zhIcmpInParmProbs, zhIcmpInRedirects=zhIcmpInRedirects, zhIcmpOutSrcQuenchs=zhIcmpOutSrcQuenchs, zhIcmpInAddrMasks=zhIcmpInAddrMasks, zhIcmpInMsgs=zhIcmpInMsgs, zhIcmpInTimeExcds=zhIcmpInTimeExcds, zhIcmpInTimestamps=zhIcmpInTimestamps, zhIcmpOutEchoReps=zhIcmpOutEchoReps, zhIcmpOutTimestampReps=zhIcmpOutTimestampReps)
