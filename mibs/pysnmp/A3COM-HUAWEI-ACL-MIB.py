#
# PySNMP MIB module A3COM-HUAWEI-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:49:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, Counter64, Bits, Counter32, iso, NotificationType, Gauge32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Counter64", "Bits", "Counter32", "iso", "NotificationType", "Gauge32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "ObjectIdentity")
TextualConvention, RowStatus, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString", "MacAddress")
h3cAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8))
if mibBuilder.loadTexts: h3cAcl.setLastUpdated('200409211936Z')
if mibBuilder.loadTexts: h3cAcl.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class RuleAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("permit", 2), ("deny", 3))

class CounterClear(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("nouse", 2))

class PortOp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5))

class DSCPValue(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )
class TCPFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("tcpack", 1), ("tcpfin", 2), ("tcppsh", 3), ("tcprst", 4), ("tcpsyn", 5), ("tcpurg", 6))

class FragmentFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("fragment", 1), ("fragmentSubseq", 2), ("nonFragment", 3), ("nonSubseq", 4))

class AddressFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("t64SrcAddrPre64DestAddrPre", 1), ("t64SrcAddrPre64DestAddrSuf", 2), ("t64SrcAddrSuf64DestAddrPre", 3), ("t64SrcAddrSuf64DestAddrSuf", 4), ("t128SourceAddress", 5), ("t128DestinationAddress", 6))

class DirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

h3cAclMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1))
h3cAclMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2))).clone('ipBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclMode.setStatus('current')
h3cAclNumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2), )
if mibBuilder.loadTexts: h3cAclNumGroupTable.setStatus('current')
h3cAclNumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumGroupAclNum"))
if mibBuilder.loadTexts: h3cAclNumGroupEntry.setStatus('current')
h3cAclNumGroupAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 5999)))
if mibBuilder.loadTexts: h3cAclNumGroupAclNum.setStatus('current')
h3cAclNumGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumGroupMatchOrder.setStatus('current')
h3cAclNumGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclNumGroupSubitemNum.setStatus('current')
h3cAclNumGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclNumGroupDescription.setStatus('current')
h3cAclNumGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumGroupCountClear.setStatus('current')
h3cAclNumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumGroupRowStatus.setStatus('current')
h3cAclNameGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3), )
if mibBuilder.loadTexts: h3cAclNameGroupTable.setStatus('current')
h3cAclNameGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNameGroupIndex"))
if mibBuilder.loadTexts: h3cAclNameGroupEntry.setStatus('current')
h3cAclNameGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 12999)))
if mibBuilder.loadTexts: h3cAclNameGroupIndex.setStatus('current')
h3cAclNameGroupCreateName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNameGroupCreateName.setStatus('current')
h3cAclNameGroupTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2), ("ifBased", 3), ("link", 4), ("user", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNameGroupTypes.setStatus('current')
h3cAclNameGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNameGroupMatchOrder.setStatus('current')
h3cAclNameGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclNameGroupSubitemNum.setStatus('current')
h3cAclNameGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNameGroupRowStatus.setStatus('current')
h3cAclBasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4), )
if mibBuilder.loadTexts: h3cAclBasicRuleTable.setStatus('current')
h3cAclBasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclBasicAclNum"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclBasicSubitem"))
if mibBuilder.loadTexts: h3cAclBasicRuleEntry.setStatus('current')
h3cAclBasicAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclBasicAclNum.setStatus('current')
h3cAclBasicSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: h3cAclBasicSubitem.setStatus('current')
h3cAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicAct.setStatus('current')
h3cAclBasicSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicSrcIp.setStatus('current')
h3cAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicSrcWild.setStatus('current')
h3cAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicTimeRangeName.setStatus('current')
h3cAclBasicFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicFragments.setStatus('current')
h3cAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicLog.setStatus('current')
h3cAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclBasicEnable.setStatus('current')
h3cAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclBasicCount.setStatus('current')
h3cAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicCountClear.setStatus('current')
h3cAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclBasicRowStatus.setStatus('current')
h3cAclAdvancedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5), )
if mibBuilder.loadTexts: h3cAclAdvancedRuleTable.setStatus('current')
h3cAclAdvancedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclAdvancedAclNum"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclAdvancedSubitem"))
if mibBuilder.loadTexts: h3cAclAdvancedRuleEntry.setStatus('current')
h3cAclAdvancedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclAdvancedAclNum.setStatus('current')
h3cAclAdvancedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: h3cAclAdvancedSubitem.setStatus('current')
h3cAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedAct.setStatus('current')
h3cAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedProtocol.setStatus('current')
h3cAclAdvancedSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedSrcIp.setStatus('current')
h3cAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedSrcWild.setStatus('current')
h3cAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedSrcOp.setStatus('current')
h3cAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedSrcPort1.setStatus('current')
h3cAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedSrcPort2.setStatus('current')
h3cAclAdvancedDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDestIp.setStatus('current')
h3cAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDestWild.setStatus('current')
h3cAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDestOp.setStatus('current')
h3cAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDestPort1.setStatus('current')
h3cAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDestPort2.setStatus('current')
h3cAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedPrecedence.setStatus('current')
h3cAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedTos.setStatus('current')
h3cAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedDscp.setStatus('current')
h3cAclAdvancedEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedEstablish.setStatus('current')
h3cAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedTimeRangeName.setStatus('current')
h3cAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedIcmpType.setStatus('current')
h3cAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedIcmpCode.setStatus('current')
h3cAclAdvancedFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedFragments.setStatus('current')
h3cAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedLog.setStatus('current')
h3cAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclAdvancedEnable.setStatus('current')
h3cAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclAdvancedCount.setStatus('current')
h3cAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedCountClear.setStatus('current')
h3cAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 5, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclAdvancedRowStatus.setStatus('current')
h3cAclIfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6), )
if mibBuilder.loadTexts: h3cAclIfRuleTable.setStatus('current')
h3cAclIfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclIfAclNum"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclIfSubitem"))
if mibBuilder.loadTexts: h3cAclIfRuleEntry.setStatus('current')
h3cAclIfAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 1999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclIfAclNum.setStatus('current')
h3cAclIfSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: h3cAclIfSubitem.setStatus('current')
h3cAclIfAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfAct.setStatus('current')
h3cAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfIndex.setStatus('current')
h3cAclIfAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfAny.setStatus('current')
h3cAclIfTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfTimeRangeName.setStatus('current')
h3cAclIfLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfLog.setStatus('current')
h3cAclIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIfEnable.setStatus('current')
h3cAclIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIfCount.setStatus('current')
h3cAclIfCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfCountClear.setStatus('current')
h3cAclIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIfRowStatus.setStatus('current')
h3cAclLinkTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7), )
if mibBuilder.loadTexts: h3cAclLinkTable.setStatus('current')
h3cAclLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclLinkAclNum"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclLinkSubitem"))
if mibBuilder.loadTexts: h3cAclLinkEntry.setStatus('current')
h3cAclLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclLinkAclNum.setStatus('current')
h3cAclLinkSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: h3cAclLinkSubitem.setStatus('current')
h3cAclLinkAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkAct.setStatus('current')
h3cAclLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2048, 2054, 32821, 34915, 34916, 34887))).clone(namedValues=NamedValues(("invalid", 0), ("ip", 2048), ("arp", 2054), ("rarp", 32821), ("pppoeControl", 34915), ("pppoeData", 34916), ("mpls", 34887))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkProtocol.setStatus('current')
h3cAclLinkFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot3And2", 3), ("ieee802Dot3", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkFormatType.setStatus('current')
h3cAclLinkVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("tagged", 1), ("untagged", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkVlanTag.setStatus('current')
h3cAclLinkVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkVlanPri.setStatus('current')
h3cAclLinkSrcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkSrcVlanId.setStatus('current')
h3cAclLinkSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkSrcMac.setStatus('current')
h3cAclLinkSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkSrcMacWild.setStatus('current')
h3cAclLinkSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkSrcIfIndex.setStatus('current')
h3cAclLinkSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkSrcAny.setStatus('current')
h3cAclLinkDestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkDestVlanId.setStatus('current')
h3cAclLinkDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkDestMac.setStatus('current')
h3cAclLinkDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkDestMacWild.setStatus('current')
h3cAclLinkDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkDestIfIndex.setStatus('current')
h3cAclLinkDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkDestAny.setStatus('current')
h3cAclLinkTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkTimeRangeName.setStatus('current')
h3cAclLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclLinkEnable.setStatus('current')
h3cAclLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkRowStatus.setStatus('current')
h3cAclLinkTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkTypeCode.setStatus('current')
h3cAclLinkTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkTypeMask.setStatus('current')
h3cAclLinkLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkLsapCode.setStatus('current')
h3cAclLinkLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkLsapMask.setStatus('current')
h3cAclLinkL2LabelRangeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkL2LabelRangeOp.setStatus('current')
h3cAclLinkL2LabelRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkL2LabelRangeBegin.setStatus('current')
h3cAclLinkL2LabelRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkL2LabelRangeEnd.setStatus('current')
h3cAclLinkMplsExp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 7, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclLinkMplsExp.setStatus('current')
h3cAclUserTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8), )
if mibBuilder.loadTexts: h3cAclUserTable.setStatus('current')
h3cAclUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclUserAclNum"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclUserSubitem"))
if mibBuilder.loadTexts: h3cAclUserEntry.setStatus('current')
h3cAclUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclUserAclNum.setStatus('current')
h3cAclUserSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: h3cAclUserSubitem.setStatus('current')
h3cAclUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserAct.setStatus('current')
h3cAclUserFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot2And3", 3), ("ieee802Dot4", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserFormatType.setStatus('current')
h3cAclUserVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("invalid", 0))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserVlanTag.setStatus('current')
h3cAclUserRuleStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserRuleStr.setStatus('current')
h3cAclUserRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserRuleMask.setStatus('current')
h3cAclUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserTimeRangeName.setStatus('current')
h3cAclUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclUserEnable.setStatus('current')
h3cAclUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclUserRowStatus.setStatus('current')
h3cAclActiveTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9), )
if mibBuilder.loadTexts: h3cAclActiveTable.setStatus('current')
h3cAclActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclActiveAclIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclActiveIfIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclActiveVlanID"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclActiveDirection"))
if mibBuilder.loadTexts: h3cAclActiveEntry.setStatus('current')
h3cAclActiveAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: h3cAclActiveAclIndex.setStatus('current')
h3cAclActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cAclActiveIfIndex.setStatus('current')
h3cAclActiveVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: h3cAclActiveVlanID.setStatus('current')
h3cAclActiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3), ("invalid", 0))))
if mibBuilder.loadTexts: h3cAclActiveDirection.setStatus('current')
h3cAclActiveUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveUserAclNum.setStatus('current')
h3cAclActiveUserAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveUserAclSubitem.setStatus('current')
h3cAclActiveIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveIpAclNum.setStatus('current')
h3cAclActiveIpAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveIpAclSubitem.setStatus('current')
h3cAclActiveLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveLinkAclNum.setStatus('current')
h3cAclActiveLinkAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveLinkAclSubitem.setStatus('current')
h3cAclActiveRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclActiveRuntime.setStatus('current')
h3cAclActiveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 9, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclActiveRowStatus.setStatus('current')
h3cAclIDSTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10), )
if mibBuilder.loadTexts: h3cAclIDSTable.setStatus('current')
h3cAclIDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1), ).setIndexNames((1, "A3COM-HUAWEI-ACL-MIB", "h3cAclIDSName"))
if mibBuilder.loadTexts: h3cAclIDSEntry.setStatus('current')
h3cAclIDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h3cAclIDSName.setStatus('current')
h3cAclIDSSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSSrcMac.setStatus('current')
h3cAclIDSDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSDestMac.setStatus('current')
h3cAclIDSSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSSrcIp.setStatus('current')
h3cAclIDSSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSSrcWild.setStatus('current')
h3cAclIDSDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSDestIp.setStatus('current')
h3cAclIDSDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSDestWild.setStatus('current')
h3cAclIDSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSSrcPort.setStatus('current')
h3cAclIDSDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSDestPort.setStatus('current')
h3cAclIDSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSProtocol.setStatus('current')
h3cAclIDSDenyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSDenyTime.setStatus('current')
h3cAclIDSAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSAct.setStatus('current')
h3cAclIDSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 1, 10, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIDSRowStatus.setStatus('current')
h3cAclMib2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2))
h3cAclMib2GlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1))
h3cAclMib2NodesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 1))
h3cAclMib2Mode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclMib2Mode.setStatus('current')
h3cAclMib2Version = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMib2Version.setStatus('current')
h3cAclMib2ObjectsCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("h3cAclMib2Mode", 0), ("h3cAclVersion", 1), ("h3cAclMib2ObjectsCapabilities", 2), ("h3cAclMib2CapabilityTable", 3), ("h3cAclNumberGroupTable", 4), ("h3cAclIPAclBasicTable", 5), ("h3cAclIPAclAdvancedTable", 6), ("h3cAclMACTable", 7), ("h3cAclEnUserTable", 8), ("h3cAclMib2ProcessingStatus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMib2ObjectsCapabilities.setStatus('current')
h3cAclMib2ProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processing", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMib2ProcessingStatus.setStatus('current')
h3cAclMib2CapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2), )
if mibBuilder.loadTexts: h3cAclMib2CapabilityTable.setStatus('current')
h3cAclMib2CapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclMib2EntityType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclMib2EntityIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclMib2ModuleIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclMib2CharacteristicsIndex"))
if mibBuilder.loadTexts: h3cAclMib2CapabilityEntry.setStatus('current')
h3cAclMib2EntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("interface", 2))))
if mibBuilder.loadTexts: h3cAclMib2EntityType.setStatus('current')
h3cAclMib2EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cAclMib2EntityIndex.setStatus('current')
h3cAclMib2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("layer3", 1), ("layer2", 2), ("userDefined", 3))))
if mibBuilder.loadTexts: h3cAclMib2ModuleIndex.setStatus('current')
h3cAclMib2CharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: h3cAclMib2CharacteristicsIndex.setStatus('current')
h3cAclMib2CharacteristicsDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMib2CharacteristicsDesc.setStatus('current')
h3cAclMib2CharacteristicsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMib2CharacteristicsValue.setStatus('current')
h3cAclNumberGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3), )
if mibBuilder.loadTexts: h3cAclNumberGroupTable.setStatus('current')
h3cAclNumberGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupIndex"))
if mibBuilder.loadTexts: h3cAclNumberGroupEntry.setStatus('current')
h3cAclNumberGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4'))
if mibBuilder.loadTexts: h3cAclNumberGroupType.setStatus('current')
h3cAclNumberGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2000, 5999), ValueRangeConstraint(10000, 42767), )))
if mibBuilder.loadTexts: h3cAclNumberGroupIndex.setStatus('current')
h3cAclNumberGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumberGroupRowStatus.setStatus('current')
h3cAclNumberGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumberGroupMatchOrder.setStatus('current')
h3cAclNumberGroupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumberGroupStep.setStatus('current')
h3cAclNumberGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumberGroupDescription.setStatus('current')
h3cAclNumberGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 7), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclNumberGroupCountClear.setStatus('current')
h3cAclNumberGroupRuleCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclNumberGroupRuleCounter.setStatus('current')
h3cAclNumberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclNumberGroupName.setStatus('current')
h3cAclIPAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2))
h3cAclIPAclBasicTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2), )
if mibBuilder.loadTexts: h3cAclIPAclBasicTable.setStatus('current')
h3cAclIPAclBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclIPAclBasicRuleIndex"))
if mibBuilder.loadTexts: h3cAclIPAclBasicEntry.setStatus('current')
h3cAclIPAclBasicRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cAclIPAclBasicRuleIndex.setStatus('current')
h3cAclIPAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicRowStatus.setStatus('current')
h3cAclIPAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicAct.setStatus('current')
h3cAclIPAclBasicSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicSrcAddrType.setStatus('current')
h3cAclIPAclBasicSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicSrcAddr.setStatus('current')
h3cAclIPAclBasicSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicSrcPrefix.setStatus('current')
h3cAclIPAclBasicSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicSrcAny.setStatus('current')
h3cAclIPAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicSrcWild.setStatus('current')
h3cAclIPAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicTimeRangeName.setStatus('current')
h3cAclIPAclBasicFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 10), FragmentFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicFragmentFlag.setStatus('current')
h3cAclIPAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicLog.setStatus('current')
h3cAclIPAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIPAclBasicCount.setStatus('current')
h3cAclIPAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclIPAclBasicCountClear.setStatus('current')
h3cAclIPAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIPAclBasicEnable.setStatus('current')
h3cAclIPAclBasicVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicVpnInstanceName.setStatus('current')
h3cAclIPAclBasicComment = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicComment.setStatus('current')
h3cAclIPAclBasicCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicCounting.setStatus('current')
h3cAclIPAclBasicRouteTypeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicRouteTypeAny.setStatus('current')
h3cAclIPAclBasicRouteTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclBasicRouteTypeValue.setStatus('current')
h3cAclIPAclAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3), )
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTable.setStatus('current')
h3cAclIPAclAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclIPAclAdvancedRuleIndex"))
if mibBuilder.loadTexts: h3cAclIPAclAdvancedEntry.setStatus('current')
h3cAclIPAclAdvancedRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cAclIPAclAdvancedRuleIndex.setStatus('current')
h3cAclIPAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedRowStatus.setStatus('current')
h3cAclIPAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedAct.setStatus('current')
h3cAclIPAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedProtocol.setStatus('current')
h3cAclIPAclAdvancedAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 5), AddressFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedAddrFlag.setStatus('current')
h3cAclIPAclAdvancedSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcAddrType.setStatus('current')
h3cAclIPAclAdvancedSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcAddr.setStatus('current')
h3cAclIPAclAdvancedSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcPrefix.setStatus('current')
h3cAclIPAclAdvancedSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcAny.setStatus('current')
h3cAclIPAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcWild.setStatus('current')
h3cAclIPAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 11), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcOp.setStatus('current')
h3cAclIPAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcPort1.setStatus('current')
h3cAclIPAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedSrcPort2.setStatus('current')
h3cAclIPAclAdvancedDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 14), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestAddrType.setStatus('current')
h3cAclIPAclAdvancedDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 15), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestAddr.setStatus('current')
h3cAclIPAclAdvancedDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 16), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestPrefix.setStatus('current')
h3cAclIPAclAdvancedDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestAny.setStatus('current')
h3cAclIPAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestWild.setStatus('current')
h3cAclIPAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 19), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestOp.setStatus('current')
h3cAclIPAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestPort1.setStatus('current')
h3cAclIPAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDestPort2.setStatus('current')
h3cAclIPAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedIcmpType.setStatus('current')
h3cAclIPAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedIcmpCode.setStatus('current')
h3cAclIPAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedPrecedence.setStatus('current')
h3cAclIPAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTos.setStatus('current')
h3cAclIPAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 26), DSCPValue().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedDscp.setStatus('current')
h3cAclIPAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTimeRangeName.setStatus('current')
h3cAclIPAclAdvancedTCPFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 28), TCPFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTCPFlag.setStatus('current')
h3cAclIPAclAdvancedFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 29), FragmentFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedFragmentFlag.setStatus('current')
h3cAclIPAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedLog.setStatus('current')
h3cAclIPAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedCount.setStatus('current')
h3cAclIPAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 32), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedCountClear.setStatus('current')
h3cAclIPAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 33), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedEnable.setStatus('current')
h3cAclIPAclAdvancedVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedVpnInstanceName.setStatus('current')
h3cAclIPAclAdvancedComment = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedComment.setStatus('current')
h3cAclIPAclAdvancedReflective = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 36), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedReflective.setStatus('current')
h3cAclIPAclAdvancedCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 37), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedCounting.setStatus('current')
h3cAclIPAclAdvancedTCPFlagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 38), Bits().clone(namedValues=NamedValues(("tcpack", 0), ("tcpfin", 1), ("tcppsh", 2), ("tcprst", 3), ("tcpsyn", 4), ("tcpurg", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTCPFlagMask.setStatus('current')
h3cAclIPAclAdvancedTCPFlagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 39), Bits().clone(namedValues=NamedValues(("tcpack", 0), ("tcpfin", 1), ("tcppsh", 2), ("tcprst", 3), ("tcpsyn", 4), ("tcpurg", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedTCPFlagValue.setStatus('current')
h3cAclIPAclAdvancedRouteTypeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedRouteTypeAny.setStatus('current')
h3cAclIPAclAdvancedRouteTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedRouteTypeValue.setStatus('current')
h3cAclIPAclAdvancedFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 2, 3, 1, 42), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1048575), ValueRangeConstraint(4294967295, 4294967295), )).clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclIPAclAdvancedFlowLabel.setStatus('current')
h3cAclMACAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3))
h3cAclMACTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1), )
if mibBuilder.loadTexts: h3cAclMACTable.setStatus('current')
h3cAclMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclMACRuleIndex"))
if mibBuilder.loadTexts: h3cAclMACEntry.setStatus('current')
h3cAclMACRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cAclMACRuleIndex.setStatus('current')
h3cAclMACRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACRowStatus.setStatus('current')
h3cAclMACAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACAct.setStatus('current')
h3cAclMACTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACTypeCode.setStatus('current')
h3cAclMACTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACTypeMask.setStatus('current')
h3cAclMACSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACSrcMac.setStatus('current')
h3cAclMACSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACSrcMacWild.setStatus('current')
h3cAclMACDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACDestMac.setStatus('current')
h3cAclMACDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACDestMacWild.setStatus('current')
h3cAclMACLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACLsapCode.setStatus('current')
h3cAclMACLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACLsapMask.setStatus('current')
h3cAclMACCos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACCos.setStatus('current')
h3cAclMACTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACTimeRangeName.setStatus('current')
h3cAclMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMACCount.setStatus('current')
h3cAclMACCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 15), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclMACCountClear.setStatus('current')
h3cAclMACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclMACEnable.setStatus('current')
h3cAclMACComment = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACComment.setStatus('current')
h3cAclMACLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACLog.setStatus('current')
h3cAclMACCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 3, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclMACCounting.setStatus('current')
h3cAclEnUserAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4))
h3cAclEnUserTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3), )
if mibBuilder.loadTexts: h3cAclEnUserTable.setStatus('current')
h3cAclEnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclNumberGroupIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclEnUserRuleIndex"))
if mibBuilder.loadTexts: h3cAclEnUserEntry.setStatus('current')
h3cAclEnUserRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cAclEnUserRuleIndex.setStatus('current')
h3cAclEnUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserRowStatus.setStatus('current')
h3cAclEnUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserAct.setStatus('current')
h3cAclEnUserStartString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserStartString.setStatus('current')
h3cAclEnUserL2String = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserL2String.setStatus('current')
h3cAclEnUserMplsString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserMplsString.setStatus('current')
h3cAclEnUserIPv4String = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserIPv4String.setStatus('current')
h3cAclEnUserIPv6String = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserIPv6String.setStatus('current')
h3cAclEnUserL4String = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserL4String.setStatus('current')
h3cAclEnUserL5String = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserL5String.setStatus('current')
h3cAclEnUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserTimeRangeName.setStatus('current')
h3cAclEnUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclEnUserCount.setStatus('current')
h3cAclEnUserCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cAclEnUserCountClear.setStatus('current')
h3cAclEnUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclEnUserEnable.setStatus('current')
h3cAclEnUserComment = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserComment.setStatus('current')
h3cAclEnUserLog = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserLog.setStatus('current')
h3cAclEnUserCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 4, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cAclEnUserCounting.setStatus('current')
h3cAclResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5))
h3cAclResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1), )
if mibBuilder.loadTexts: h3cAclResourceUsageTable.setStatus('current')
h3cAclResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cAclResourceChassis"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclResourceSlot"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclResourceChip"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cAclResourceType"))
if mibBuilder.loadTexts: h3cAclResourceUsageEntry.setStatus('current')
h3cAclResourceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cAclResourceChassis.setStatus('current')
h3cAclResourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: h3cAclResourceSlot.setStatus('current')
h3cAclResourceChip = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: h3cAclResourceChip.setStatus('current')
h3cAclResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: h3cAclResourceType.setStatus('current')
h3cAclPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclPortRange.setStatus('current')
h3cAclResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclResourceTotal.setStatus('current')
h3cAclResourceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclResourceReserved.setStatus('current')
h3cAclResourceConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclResourceConfigured.setStatus('current')
h3cAclResourceUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclResourceUsagePercent.setStatus('current')
h3cAclResourceTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 2, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAclResourceTypeDescription.setStatus('current')
h3cAclPacketFilterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3))
h3cPfilterScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 1))
h3cPfilterDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPfilterDefaultAction.setStatus('current')
h3cPfilterProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("processing", 1), ("done", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterProcessingStatus.setStatus('current')
h3cPfilterApplyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2), )
if mibBuilder.loadTexts: h3cPfilterApplyTable.setStatus('current')
h3cPfilterApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyDirection"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclIndex"))
if mibBuilder.loadTexts: h3cPfilterApplyEntry.setStatus('current')
h3cPfilterApplyObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("vlan", 2), ("global", 3))))
if mibBuilder.loadTexts: h3cPfilterApplyObjType.setStatus('current')
h3cPfilterApplyObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: h3cPfilterApplyObjIndex.setStatus('current')
h3cPfilterApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 3), DirectionType())
if mibBuilder.loadTexts: h3cPfilterApplyDirection.setStatus('current')
h3cPfilterApplyAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("default", 3))))
if mibBuilder.loadTexts: h3cPfilterApplyAclType.setStatus('current')
h3cPfilterApplyAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 5999), )))
if mibBuilder.loadTexts: h3cPfilterApplyAclIndex.setStatus('current')
h3cPfilterApplyHardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPfilterApplyHardCount.setStatus('current')
h3cPfilterApplySequence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterApplySequence.setStatus('current')
h3cPfilterApplyCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 8), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cPfilterApplyCountClear.setStatus('current')
h3cPfilterApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cPfilterApplyRowStatus.setStatus('current')
h3cPfilterAclGroupRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3), )
if mibBuilder.loadTexts: h3cPfilterAclGroupRunInfoTable.setStatus('current')
h3cPfilterAclGroupRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyDirection"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclIndex"))
if mibBuilder.loadTexts: h3cPfilterAclGroupRunInfoEntry.setStatus('current')
h3cPfilterAclGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupStatus.setStatus('current')
h3cPfilterAclGroupCountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupCountStatus.setStatus('current')
h3cPfilterAclGroupPermitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupPermitPkts.setStatus('current')
h3cPfilterAclGroupPermitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupPermitBytes.setStatus('current')
h3cPfilterAclGroupDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupDenyPkts.setStatus('current')
h3cPfilterAclGroupDenyBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclGroupDenyBytes.setStatus('current')
h3cPfilterAclRuleRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4), )
if mibBuilder.loadTexts: h3cPfilterAclRuleRunInfoTable.setStatus('current')
h3cPfilterAclRuleRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyObjIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyDirection"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterApplyAclIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterAclRuleIndex"))
if mibBuilder.loadTexts: h3cPfilterAclRuleRunInfoEntry.setStatus('current')
h3cPfilterAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cPfilterAclRuleIndex.setStatus('current')
h3cPfilterAclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclRuleStatus.setStatus('current')
h3cPfilterAclRuleCountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failed", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclRuleCountStatus.setStatus('current')
h3cPfilterAclRuleMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclRuleMatchPackets.setStatus('current')
h3cPfilterAclRuleMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterAclRuleMatchBytes.setStatus('current')
h3cPfilterStatisticSumTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5), )
if mibBuilder.loadTexts: h3cPfilterStatisticSumTable.setStatus('current')
h3cPfilterStatisticSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterSumDirection"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterSumAclType"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterSumAclIndex"), (0, "A3COM-HUAWEI-ACL-MIB", "h3cPfilterSumRuleIndex"))
if mibBuilder.loadTexts: h3cPfilterStatisticSumEntry.setStatus('current')
h3cPfilterSumDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 1), DirectionType())
if mibBuilder.loadTexts: h3cPfilterSumDirection.setStatus('current')
h3cPfilterSumAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: h3cPfilterSumAclType.setStatus('current')
h3cPfilterSumAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 5999)))
if mibBuilder.loadTexts: h3cPfilterSumAclIndex.setStatus('current')
h3cPfilterSumRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: h3cPfilterSumRuleIndex.setStatus('current')
h3cPfilterSumRuleMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterSumRuleMatchPackets.setStatus('current')
h3cPfilterSumRuleMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cPfilterSumRuleMatchBytes.setStatus('current')
h3cAclPacketfilterTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4))
h3cPfilterInterface = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterInterface.setStatus('current')
h3cPfilterDirection = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterDirection.setStatus('current')
h3cPfilterACLNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterACLNumber.setStatus('current')
h3cPfilterAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterAction.setStatus('current')
h3cMACfilterSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACfilterSourceMac.setStatus('current')
h3cMACfilterDestinationMac = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACfilterDestinationMac.setStatus('current')
h3cPfilterPacketNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterPacketNumber.setStatus('current')
h3cPfilterReceiveInterface = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 4, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cPfilterReceiveInterface.setStatus('current')
h3cAclPacketfilterTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 5))
h3cPfilterTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 5, 0))
h3cMACfilterTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 8, 5, 0, 1)).setObjects(("A3COM-HUAWEI-ACL-MIB", "h3cPfilterInterface"), ("A3COM-HUAWEI-ACL-MIB", "h3cPfilterDirection"), ("A3COM-HUAWEI-ACL-MIB", "h3cPfilterACLNumber"), ("A3COM-HUAWEI-ACL-MIB", "h3cPfilterAction"), ("A3COM-HUAWEI-ACL-MIB", "h3cMACfilterSourceMac"), ("A3COM-HUAWEI-ACL-MIB", "h3cMACfilterDestinationMac"), ("A3COM-HUAWEI-ACL-MIB", "h3cPfilterPacketNumber"), ("A3COM-HUAWEI-ACL-MIB", "h3cPfilterReceiveInterface"))
if mibBuilder.loadTexts: h3cMACfilterTrap.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-ACL-MIB", h3cAclIDSSrcIp=h3cAclIDSSrcIp, h3cAclMibObjects=h3cAclMibObjects, h3cAclIPAclAdvancedSrcPort1=h3cAclIPAclAdvancedSrcPort1, h3cAclAdvancedCountClear=h3cAclAdvancedCountClear, h3cAclActiveIpAclNum=h3cAclActiveIpAclNum, h3cAclUserFormatType=h3cAclUserFormatType, h3cAclLinkDestAny=h3cAclLinkDestAny, h3cPfilterApplySequence=h3cPfilterApplySequence, h3cAclNumberGroupName=h3cAclNumberGroupName, h3cAclIPAclAdvancedDestAny=h3cAclIPAclAdvancedDestAny, h3cAclMACDestMacWild=h3cAclMACDestMacWild, AddressFlag=AddressFlag, h3cAclUserTable=h3cAclUserTable, h3cAclLinkDestMac=h3cAclLinkDestMac, h3cAclBasicRuleEntry=h3cAclBasicRuleEntry, h3cAclIPAclAdvancedFlowLabel=h3cAclIPAclAdvancedFlowLabel, h3cAclIPAclAdvancedDestPort1=h3cAclIPAclAdvancedDestPort1, h3cAclBasicAclNum=h3cAclBasicAclNum, h3cAclNumGroupAclNum=h3cAclNumGroupAclNum, h3cMACfilterTrap=h3cMACfilterTrap, h3cAclMACCos=h3cAclMACCos, h3cAclMib2CharacteristicsDesc=h3cAclMib2CharacteristicsDesc, h3cAclIDSDestMac=h3cAclIDSDestMac, h3cAclIPAclAdvancedCountClear=h3cAclIPAclAdvancedCountClear, h3cAclUserVlanTag=h3cAclUserVlanTag, h3cAclLinkSrcMac=h3cAclLinkSrcMac, h3cAclResourceReserved=h3cAclResourceReserved, h3cAclResourceChip=h3cAclResourceChip, h3cAclMib2NodesGroup=h3cAclMib2NodesGroup, h3cAclAdvancedEnable=h3cAclAdvancedEnable, h3cAclNumGroupMatchOrder=h3cAclNumGroupMatchOrder, h3cAclMACTypeMask=h3cAclMACTypeMask, h3cAclIPAclAdvancedRouteTypeValue=h3cAclIPAclAdvancedRouteTypeValue, h3cPfilterACLNumber=h3cPfilterACLNumber, h3cAclIPAclBasicSrcPrefix=h3cAclIPAclBasicSrcPrefix, h3cPfilterAclGroupPermitPkts=h3cPfilterAclGroupPermitPkts, h3cAclBasicEnable=h3cAclBasicEnable, h3cAclAdvancedDscp=h3cAclAdvancedDscp, FragmentFlag=FragmentFlag, h3cAclMACLsapMask=h3cAclMACLsapMask, h3cAclResourceSlot=h3cAclResourceSlot, h3cPfilterDirection=h3cPfilterDirection, h3cAclAdvancedRuleTable=h3cAclAdvancedRuleTable, h3cAclIPAclBasicRouteTypeValue=h3cAclIPAclBasicRouteTypeValue, h3cAclNumberGroupTable=h3cAclNumberGroupTable, h3cAclResourceConfigured=h3cAclResourceConfigured, h3cAclMACCountClear=h3cAclMACCountClear, h3cAclNumGroupDescription=h3cAclNumGroupDescription, h3cPfilterAclRuleRunInfoTable=h3cPfilterAclRuleRunInfoTable, h3cPfilterProcessingStatus=h3cPfilterProcessingStatus, h3cAclIfEnable=h3cAclIfEnable, h3cAclNameGroupCreateName=h3cAclNameGroupCreateName, h3cAclIPAclAdvancedDestAddrType=h3cAclIPAclAdvancedDestAddrType, h3cAclAdvancedProtocol=h3cAclAdvancedProtocol, h3cAclIPAclBasicEntry=h3cAclIPAclBasicEntry, h3cPfilterApplyObjIndex=h3cPfilterApplyObjIndex, h3cAclLinkAclNum=h3cAclLinkAclNum, h3cAclNumGroupCountClear=h3cAclNumGroupCountClear, h3cAclMib2GlobalGroup=h3cAclMib2GlobalGroup, h3cPfilterInterface=h3cPfilterInterface, h3cAclMACComment=h3cAclMACComment, h3cAclBasicCountClear=h3cAclBasicCountClear, h3cPfilterSumAclType=h3cPfilterSumAclType, h3cAclIPAclAdvancedSrcAddr=h3cAclIPAclAdvancedSrcAddr, h3cAclNumberGroupType=h3cAclNumberGroupType, h3cPfilterApplyDirection=h3cPfilterApplyDirection, h3cAclMib2Objects=h3cAclMib2Objects, h3cAclIPAclAdvancedSrcPrefix=h3cAclIPAclAdvancedSrcPrefix, h3cAclIPAclBasicAct=h3cAclIPAclBasicAct, h3cAclAdvancedTimeRangeName=h3cAclAdvancedTimeRangeName, h3cAclEnUserCount=h3cAclEnUserCount, h3cAclIPAclAdvancedProtocol=h3cAclIPAclAdvancedProtocol, h3cAcl=h3cAcl, h3cAclEnUserRuleIndex=h3cAclEnUserRuleIndex, h3cAclAdvancedDestPort1=h3cAclAdvancedDestPort1, h3cAclIPAclAdvancedTCPFlagValue=h3cAclIPAclAdvancedTCPFlagValue, h3cAclLinkDestIfIndex=h3cAclLinkDestIfIndex, h3cAclMACSrcMac=h3cAclMACSrcMac, h3cAclAdvancedEstablish=h3cAclAdvancedEstablish, h3cAclIDSEntry=h3cAclIDSEntry, h3cPfilterAclRuleMatchPackets=h3cPfilterAclRuleMatchPackets, h3cAclMib2Mode=h3cAclMib2Mode, h3cAclIfSubitem=h3cAclIfSubitem, h3cAclIPAclBasicEnable=h3cAclIPAclBasicEnable, h3cAclNumberGroupIndex=h3cAclNumberGroupIndex, h3cAclIPAclBasicCounting=h3cAclIPAclBasicCounting, h3cPfilterApplyObjType=h3cPfilterApplyObjType, h3cAclIDSDestPort=h3cAclIDSDestPort, h3cAclNameGroupEntry=h3cAclNameGroupEntry, h3cAclActiveUserAclNum=h3cAclActiveUserAclNum, h3cAclLinkAct=h3cAclLinkAct, h3cAclAdvancedAclNum=h3cAclAdvancedAclNum, h3cAclIPAclBasicRouteTypeAny=h3cAclIPAclBasicRouteTypeAny, h3cAclIPAclAdvancedDestOp=h3cAclIPAclAdvancedDestOp, h3cAclActiveDirection=h3cAclActiveDirection, h3cAclMACEnable=h3cAclMACEnable, h3cAclIPAclBasicTimeRangeName=h3cAclIPAclBasicTimeRangeName, h3cPfilterAclRuleCountStatus=h3cPfilterAclRuleCountStatus, h3cAclNumGroupTable=h3cAclNumGroupTable, h3cAclIPAclAdvancedReflective=h3cAclIPAclAdvancedReflective, h3cAclNameGroupTypes=h3cAclNameGroupTypes, h3cAclLinkProtocol=h3cAclLinkProtocol, h3cAclIPAclAdvancedDestAddr=h3cAclIPAclAdvancedDestAddr, h3cAclLinkLsapMask=h3cAclLinkLsapMask, h3cAclIPAclAdvancedSrcAny=h3cAclIPAclAdvancedSrcAny, h3cAclIPAclBasicSrcAny=h3cAclIPAclBasicSrcAny, h3cAclIPAclAdvancedEntry=h3cAclIPAclAdvancedEntry, h3cAclIPAclAdvancedLog=h3cAclIPAclAdvancedLog, h3cAclActiveTable=h3cAclActiveTable, h3cAclLinkSrcVlanId=h3cAclLinkSrcVlanId, h3cPfilterPacketNumber=h3cPfilterPacketNumber, h3cAclIPAclBasicSrcAddrType=h3cAclIPAclBasicSrcAddrType, h3cPfilterAclRuleRunInfoEntry=h3cPfilterAclRuleRunInfoEntry, h3cAclMACTimeRangeName=h3cAclMACTimeRangeName, h3cAclMib2CapabilityTable=h3cAclMib2CapabilityTable, h3cAclIDSSrcMac=h3cAclIDSSrcMac, h3cAclMib2EntityType=h3cAclMib2EntityType, h3cPfilterStatisticSumEntry=h3cPfilterStatisticSumEntry, h3cPfilterApplyRowStatus=h3cPfilterApplyRowStatus, h3cAclIPAclAdvancedDscp=h3cAclIPAclAdvancedDscp, h3cAclLinkRowStatus=h3cAclLinkRowStatus, h3cAclLinkEntry=h3cAclLinkEntry, h3cAclActiveIfIndex=h3cAclActiveIfIndex, h3cAclIDSSrcWild=h3cAclIDSSrcWild, h3cAclIPAclGroup=h3cAclIPAclGroup, h3cPfilterScalarGroup=h3cPfilterScalarGroup, h3cAclBasicLog=h3cAclBasicLog, PYSNMP_MODULE_ID=h3cAcl, h3cAclAdvancedTos=h3cAclAdvancedTos, h3cAclEnUserAct=h3cAclEnUserAct, h3cAclEnUserCountClear=h3cAclEnUserCountClear, h3cAclAdvancedFragments=h3cAclAdvancedFragments, h3cAclIfCountClear=h3cAclIfCountClear, h3cAclBasicFragments=h3cAclBasicFragments, h3cAclUserAclNum=h3cAclUserAclNum, h3cAclIPAclAdvancedDestWild=h3cAclIPAclAdvancedDestWild, h3cAclEnUserIPv4String=h3cAclEnUserIPv4String, h3cPfilterAction=h3cPfilterAction, h3cAclEnUserLog=h3cAclEnUserLog, h3cAclEnUserTimeRangeName=h3cAclEnUserTimeRangeName, h3cAclResourceGroup=h3cAclResourceGroup, h3cAclNumGroupRowStatus=h3cAclNumGroupRowStatus, h3cAclAdvancedIcmpCode=h3cAclAdvancedIcmpCode, h3cAclEnUserL5String=h3cAclEnUserL5String, h3cPfilterApplyCountClear=h3cPfilterApplyCountClear, h3cAclResourceUsageEntry=h3cAclResourceUsageEntry, h3cAclAdvancedPrecedence=h3cAclAdvancedPrecedence, h3cPfilterSumDirection=h3cPfilterSumDirection, h3cAclIPAclAdvancedTCPFlag=h3cAclIPAclAdvancedTCPFlag, h3cAclLinkSrcMacWild=h3cAclLinkSrcMacWild, h3cAclMib2ProcessingStatus=h3cAclMib2ProcessingStatus, h3cAclEnUserStartString=h3cAclEnUserStartString, h3cAclUserSubitem=h3cAclUserSubitem, h3cAclBasicCount=h3cAclBasicCount, h3cAclIDSRowStatus=h3cAclIDSRowStatus, h3cAclMib2ObjectsCapabilities=h3cAclMib2ObjectsCapabilities, h3cPfilterStatisticSumTable=h3cPfilterStatisticSumTable, h3cAclIPAclBasicFragmentFlag=h3cAclIPAclBasicFragmentFlag, h3cAclUserRowStatus=h3cAclUserRowStatus, h3cAclLinkSrcAny=h3cAclLinkSrcAny, h3cAclActiveUserAclSubitem=h3cAclActiveUserAclSubitem, h3cAclLinkDestMacWild=h3cAclLinkDestMacWild, h3cAclAdvancedRuleEntry=h3cAclAdvancedRuleEntry, h3cAclIDSDestWild=h3cAclIDSDestWild, h3cAclIDSDenyTime=h3cAclIDSDenyTime, h3cAclPacketfilterTrapObjects=h3cAclPacketfilterTrapObjects, h3cAclActiveVlanID=h3cAclActiveVlanID, h3cPfilterReceiveInterface=h3cPfilterReceiveInterface, h3cAclLinkVlanTag=h3cAclLinkVlanTag, DirectionType=DirectionType, h3cAclMib2CharacteristicsIndex=h3cAclMib2CharacteristicsIndex, h3cAclResourceTypeDescription=h3cAclResourceTypeDescription, h3cAclIPAclBasicRowStatus=h3cAclIPAclBasicRowStatus, h3cAclIfLog=h3cAclIfLog, h3cAclIPAclAdvancedAddrFlag=h3cAclIPAclAdvancedAddrFlag, h3cPfilterTrapPrefix=h3cPfilterTrapPrefix, h3cPfilterApplyAclType=h3cPfilterApplyAclType, h3cAclActiveEntry=h3cAclActiveEntry, h3cAclUserAct=h3cAclUserAct, h3cAclAdvancedDestOp=h3cAclAdvancedDestOp, h3cPfilterAclGroupDenyPkts=h3cPfilterAclGroupDenyPkts, h3cAclIPAclBasicLog=h3cAclIPAclBasicLog, h3cAclLinkMplsExp=h3cAclLinkMplsExp, h3cAclEnUserCounting=h3cAclEnUserCounting, h3cAclMACCount=h3cAclMACCount, h3cAclPacketFilterObjects=h3cAclPacketFilterObjects, h3cAclUserEntry=h3cAclUserEntry, h3cAclActiveIpAclSubitem=h3cAclActiveIpAclSubitem, h3cAclMib2ModuleIndex=h3cAclMib2ModuleIndex, h3cAclLinkTypeCode=h3cAclLinkTypeCode, h3cAclIPAclAdvancedCount=h3cAclIPAclAdvancedCount, h3cAclAdvancedSubitem=h3cAclAdvancedSubitem, h3cAclLinkEnable=h3cAclLinkEnable, h3cAclAdvancedSrcPort1=h3cAclAdvancedSrcPort1, h3cPfilterApplyHardCount=h3cPfilterApplyHardCount, h3cAclBasicSubitem=h3cAclBasicSubitem, h3cAclEnUserIPv6String=h3cAclEnUserIPv6String, h3cAclIPAclAdvancedIcmpCode=h3cAclIPAclAdvancedIcmpCode, h3cAclIDSAct=h3cAclIDSAct, h3cAclMACCounting=h3cAclMACCounting, h3cAclIDSProtocol=h3cAclIDSProtocol, h3cAclEnUserL4String=h3cAclEnUserL4String, h3cAclBasicSrcIp=h3cAclBasicSrcIp, h3cAclMACDestMac=h3cAclMACDestMac, h3cAclAdvancedDestWild=h3cAclAdvancedDestWild, h3cAclIPAclAdvancedSrcPort2=h3cAclIPAclAdvancedSrcPort2, h3cAclLinkTable=h3cAclLinkTable, h3cAclMACTypeCode=h3cAclMACTypeCode, h3cAclAdvancedSrcWild=h3cAclAdvancedSrcWild, h3cAclIPAclAdvancedDestPrefix=h3cAclIPAclAdvancedDestPrefix, h3cPfilterAclRuleIndex=h3cPfilterAclRuleIndex, h3cAclBasicTimeRangeName=h3cAclBasicTimeRangeName, h3cAclIPAclAdvancedTable=h3cAclIPAclAdvancedTable, h3cAclIPAclAdvancedRuleIndex=h3cAclIPAclAdvancedRuleIndex, h3cAclIPAclAdvancedSrcWild=h3cAclIPAclAdvancedSrcWild, h3cAclNameGroupSubitemNum=h3cAclNameGroupSubitemNum, h3cAclIPAclAdvancedEnable=h3cAclIPAclAdvancedEnable, h3cPfilterSumRuleMatchBytes=h3cPfilterSumRuleMatchBytes, DSCPValue=DSCPValue, h3cAclIfAclNum=h3cAclIfAclNum, h3cAclAdvancedAct=h3cAclAdvancedAct, h3cAclResourceUsagePercent=h3cAclResourceUsagePercent, h3cAclNumberGroupRowStatus=h3cAclNumberGroupRowStatus, h3cAclNumGroupSubitemNum=h3cAclNumGroupSubitemNum, h3cAclMACAct=h3cAclMACAct, h3cAclActiveRowStatus=h3cAclActiveRowStatus, h3cAclAdvancedCount=h3cAclAdvancedCount, h3cAclLinkSubitem=h3cAclLinkSubitem, h3cAclMode=h3cAclMode, h3cAclNumberGroupEntry=h3cAclNumberGroupEntry, h3cAclPacketfilterTrap=h3cAclPacketfilterTrap, h3cAclLinkLsapCode=h3cAclLinkLsapCode, h3cAclIPAclBasicSrcWild=h3cAclIPAclBasicSrcWild, h3cAclUserTimeRangeName=h3cAclUserTimeRangeName, h3cAclAdvancedIcmpType=h3cAclAdvancedIcmpType, h3cAclLinkTimeRangeName=h3cAclLinkTimeRangeName, h3cPfilterApplyEntry=h3cPfilterApplyEntry, h3cPfilterAclRuleMatchBytes=h3cPfilterAclRuleMatchBytes, h3cAclIfRuleEntry=h3cAclIfRuleEntry, h3cAclEnUserTable=h3cAclEnUserTable, h3cPfilterSumAclIndex=h3cPfilterSumAclIndex, h3cAclEnUserComment=h3cAclEnUserComment, h3cAclIPAclBasicVpnInstanceName=h3cAclIPAclBasicVpnInstanceName, h3cAclResourceChassis=h3cAclResourceChassis, h3cAclIPAclAdvancedTimeRangeName=h3cAclIPAclAdvancedTimeRangeName, h3cAclActiveLinkAclNum=h3cAclActiveLinkAclNum, h3cAclNumberGroupCountClear=h3cAclNumberGroupCountClear, h3cAclIPAclBasicRuleIndex=h3cAclIPAclBasicRuleIndex, h3cAclAdvancedDestIp=h3cAclAdvancedDestIp, h3cAclIPAclAdvancedFragmentFlag=h3cAclIPAclAdvancedFragmentFlag, h3cAclIPAclAdvancedRowStatus=h3cAclIPAclAdvancedRowStatus, h3cAclNumberGroupStep=h3cAclNumberGroupStep, h3cPfilterSumRuleMatchPackets=h3cPfilterSumRuleMatchPackets, h3cAclIPAclAdvancedTCPFlagMask=h3cAclIPAclAdvancedTCPFlagMask)
mibBuilder.exportSymbols("A3COM-HUAWEI-ACL-MIB", h3cAclPortRange=h3cAclPortRange, h3cAclEnUserEnable=h3cAclEnUserEnable, h3cAclIPAclBasicTable=h3cAclIPAclBasicTable, h3cAclMACTable=h3cAclMACTable, h3cAclIfRowStatus=h3cAclIfRowStatus, h3cAclNumGroupEntry=h3cAclNumGroupEntry, h3cAclIPAclAdvancedRouteTypeAny=h3cAclIPAclAdvancedRouteTypeAny, h3cAclMACSrcMacWild=h3cAclMACSrcMacWild, PortOp=PortOp, h3cAclAdvancedSrcIp=h3cAclAdvancedSrcIp, h3cPfilterAclGroupRunInfoEntry=h3cPfilterAclGroupRunInfoEntry, h3cAclNameGroupMatchOrder=h3cAclNameGroupMatchOrder, h3cAclIfAny=h3cAclIfAny, h3cAclIPAclAdvancedComment=h3cAclIPAclAdvancedComment, h3cAclMACAclGroup=h3cAclMACAclGroup, h3cAclLinkL2LabelRangeEnd=h3cAclLinkL2LabelRangeEnd, h3cAclEnUserAclGroup=h3cAclEnUserAclGroup, h3cAclLinkSrcIfIndex=h3cAclLinkSrcIfIndex, h3cPfilterApplyAclIndex=h3cPfilterApplyAclIndex, h3cAclIfCount=h3cAclIfCount, h3cAclIPAclAdvancedDestPort2=h3cAclIPAclAdvancedDestPort2, h3cAclAdvancedSrcOp=h3cAclAdvancedSrcOp, h3cPfilterApplyTable=h3cPfilterApplyTable, h3cAclBasicSrcWild=h3cAclBasicSrcWild, h3cAclMACEntry=h3cAclMACEntry, h3cAclNumberGroupMatchOrder=h3cAclNumberGroupMatchOrder, h3cAclEnUserRowStatus=h3cAclEnUserRowStatus, h3cPfilterAclGroupPermitBytes=h3cPfilterAclGroupPermitBytes, TCPFlag=TCPFlag, h3cPfilterSumRuleIndex=h3cPfilterSumRuleIndex, h3cAclIPAclBasicSrcAddr=h3cAclIPAclBasicSrcAddr, h3cAclBasicAct=h3cAclBasicAct, h3cAclLinkL2LabelRangeOp=h3cAclLinkL2LabelRangeOp, h3cAclMACRowStatus=h3cAclMACRowStatus, h3cAclNameGroupIndex=h3cAclNameGroupIndex, h3cAclResourceType=h3cAclResourceType, h3cAclIPAclAdvancedVpnInstanceName=h3cAclIPAclAdvancedVpnInstanceName, h3cAclEnUserL2String=h3cAclEnUserL2String, h3cAclNumberGroupDescription=h3cAclNumberGroupDescription, h3cAclActiveLinkAclSubitem=h3cAclActiveLinkAclSubitem, h3cAclLinkTypeMask=h3cAclLinkTypeMask, h3cAclIfAct=h3cAclIfAct, h3cAclAdvancedDestPort2=h3cAclAdvancedDestPort2, h3cAclLinkL2LabelRangeBegin=h3cAclLinkL2LabelRangeBegin, h3cAclLinkFormatType=h3cAclLinkFormatType, h3cAclIDSSrcPort=h3cAclIDSSrcPort, h3cAclNameGroupRowStatus=h3cAclNameGroupRowStatus, h3cAclResourceUsageTable=h3cAclResourceUsageTable, h3cAclActiveAclIndex=h3cAclActiveAclIndex, h3cAclIDSTable=h3cAclIDSTable, h3cAclMACLsapCode=h3cAclMACLsapCode, h3cAclMib2CapabilityEntry=h3cAclMib2CapabilityEntry, h3cMACfilterDestinationMac=h3cMACfilterDestinationMac, h3cAclIPAclBasicComment=h3cAclIPAclBasicComment, h3cAclMACLog=h3cAclMACLog, h3cAclBasicRuleTable=h3cAclBasicRuleTable, h3cPfilterAclGroupRunInfoTable=h3cPfilterAclGroupRunInfoTable, h3cAclUserEnable=h3cAclUserEnable, h3cAclResourceTotal=h3cAclResourceTotal, h3cMACfilterSourceMac=h3cMACfilterSourceMac, h3cAclIDSDestIp=h3cAclIDSDestIp, h3cAclIPAclAdvancedPrecedence=h3cAclIPAclAdvancedPrecedence, h3cAclActiveRuntime=h3cAclActiveRuntime, h3cAclNumberGroupRuleCounter=h3cAclNumberGroupRuleCounter, h3cAclIPAclAdvancedCounting=h3cAclIPAclAdvancedCounting, h3cAclBasicRowStatus=h3cAclBasicRowStatus, h3cAclMib2EntityIndex=h3cAclMib2EntityIndex, h3cAclMib2Version=h3cAclMib2Version, h3cAclEnUserEntry=h3cAclEnUserEntry, h3cAclAdvancedSrcPort2=h3cAclAdvancedSrcPort2, h3cAclIfIndex=h3cAclIfIndex, h3cAclAdvancedLog=h3cAclAdvancedLog, h3cAclLinkDestVlanId=h3cAclLinkDestVlanId, h3cAclEnUserMplsString=h3cAclEnUserMplsString, h3cAclUserRuleStr=h3cAclUserRuleStr, h3cAclLinkVlanPri=h3cAclLinkVlanPri, h3cAclIPAclBasicCount=h3cAclIPAclBasicCount, h3cPfilterDefaultAction=h3cPfilterDefaultAction, h3cAclUserRuleMask=h3cAclUserRuleMask, h3cAclIPAclAdvancedAct=h3cAclIPAclAdvancedAct, h3cAclIfRuleTable=h3cAclIfRuleTable, h3cAclIPAclAdvancedIcmpType=h3cAclIPAclAdvancedIcmpType, h3cAclIPAclAdvancedSrcAddrType=h3cAclIPAclAdvancedSrcAddrType, h3cAclIfTimeRangeName=h3cAclIfTimeRangeName, h3cAclIPAclAdvancedSrcOp=h3cAclIPAclAdvancedSrcOp, h3cPfilterAclGroupStatus=h3cPfilterAclGroupStatus, h3cAclIDSName=h3cAclIDSName, h3cAclMib2CharacteristicsValue=h3cAclMib2CharacteristicsValue, h3cPfilterAclGroupCountStatus=h3cPfilterAclGroupCountStatus, h3cAclIPAclBasicCountClear=h3cAclIPAclBasicCountClear, RuleAction=RuleAction, h3cAclMACRuleIndex=h3cAclMACRuleIndex, CounterClear=CounterClear, h3cAclNameGroupTable=h3cAclNameGroupTable, h3cPfilterAclGroupDenyBytes=h3cPfilterAclGroupDenyBytes, h3cPfilterAclRuleStatus=h3cPfilterAclRuleStatus, h3cAclAdvancedRowStatus=h3cAclAdvancedRowStatus, h3cAclIPAclAdvancedTos=h3cAclIPAclAdvancedTos)
