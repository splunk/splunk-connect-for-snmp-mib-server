#
# PySNMP MIB module HH3C-PPP-OVER-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-PPP-OVER-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, TimeTicks, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Unsigned32, Counter32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "TimeTicks", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Unsigned32", "Counter32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hh3cPos = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 19))
hh3cPos.setRevisions(('2013-10-10 17:00', '2010-05-19 17:00', '2007-07-19 17:00',))
if mibBuilder.loadTexts: hh3cPos.setLastUpdated('201310101700Z')
if mibBuilder.loadTexts: hh3cPos.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cPosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1))
hh3cPosParamTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1), )
if mibBuilder.loadTexts: hh3cPosParamTable.setStatus('current')
hh3cPosParamTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosParamTableEntry.setStatus('current')
hh3cPosCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc32", 1), ("crc16", 2))).clone('crc32')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosCRC.setStatus('current')
hh3cPosMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosMTU.setStatus('current')
hh3cPosScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosScramble.setStatus('current')
hh3cPosClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("line", 2))).clone('line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosClockSource.setStatus('current')
hh3cPosSdhFlagJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosSdhFlagJ0.setStatus('current')
hh3cPosSdhFlagJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosSdhFlagJ1.setStatus('current')
hh3cPosSonetFlagJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosSonetFlagJ0.setStatus('current')
hh3cPosSonetFlagJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosSonetFlagJ1.setStatus('current')
hh3cPosFlagC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosFlagC2.setStatus('current')
hh3cPosFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdh", 1), ("sonet", 2))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosFrameType.setStatus('current')
hh3cPosBindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosBindVlanId.setStatus('current')
hh3cPosEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("hdlc", 2), ("fr", 3))).clone('ppp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosEncapsulation.setStatus('current')
hh3cPoskeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPoskeepaliveTimeout.setStatus('current')
hh3cPosBERthresholdSF = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosBERthresholdSF.setStatus('current')
hh3cPosBERthresholdSD = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosBERthresholdSD.setStatus('current')
hh3cPosB1Error = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPosB1Error.setStatus('current')
hh3cPosB2Error = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPosB2Error.setStatus('current')
hh3cPosB3Error = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPosB3Error.setStatus('current')
hh3cPosM1Error = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPosM1Error.setStatus('current')
hh3cPosG1Error = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPosG1Error.setStatus('current')
hh3cPosFlagJ0Type = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdh", 1), ("sonet", 2))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosFlagJ0Type.setStatus('current')
hh3cPosFlagJ1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdh", 1), ("sonet", 2))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosFlagJ1Type.setStatus('current')
hh3cPosB1TCAThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB1TCAThreshold.setStatus('current')
hh3cPosB2TCAThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB2TCAThreshold.setStatus('current')
hh3cPosB3TCAThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB3TCAThreshold.setStatus('current')
hh3cPosB1TCAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB1TCAEnable.setStatus('current')
hh3cPosB2TCAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB2TCAEnable.setStatus('current')
hh3cPosB3TCAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 19, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cPosB3TCAEnable.setStatus('current')
hh3cPosMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2))
hh3cPosMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0))
hh3cPosLOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLOSAlarm.setStatus('current')
hh3cPosLOFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLOFAlarm.setStatus('current')
hh3cPosOOFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosOOFAlarm.setStatus('current')
hh3cPosLAISAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLAISAlarm.setStatus('current')
hh3cPosLRDIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLRDIAlarm.setStatus('current')
hh3cPosPRDIAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 6)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosPRDIAlarm.setStatus('current')
hh3cPosPAISAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosPAISAlarm.setStatus('current')
hh3cPosLOPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 8)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLOPAlarm.setStatus('current')
hh3cPosSTIMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 9)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosSTIMAlarm.setStatus('current')
hh3cPosPTIMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 10)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosPTIMAlarm.setStatus('current')
hh3cPosPSLMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 11)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosPSLMAlarm.setStatus('current')
hh3cPosLSDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 12)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLSDAlarm.setStatus('current')
hh3cPosLSFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosLSFAlarm.setStatus('current')
hh3cPosNormalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 14)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cPosNormalAlarm.setStatus('current')
hh3cPosB1TCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cPosB1TCAlarm.setStatus('current')
hh3cPosB2TCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cPosB2TCAlarm.setStatus('current')
hh3cPosB3TCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 19, 2, 0, 17)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cPosB3TCAlarm.setStatus('current')
mibBuilder.exportSymbols("HH3C-PPP-OVER-SONET-MIB", hh3cPosScramble=hh3cPosScramble, hh3cPosB3TCAThreshold=hh3cPosB3TCAThreshold, hh3cPosPSLMAlarm=hh3cPosPSLMAlarm, hh3cPosLSFAlarm=hh3cPosLSFAlarm, hh3cPosNormalAlarm=hh3cPosNormalAlarm, hh3cPosB2TCAEnable=hh3cPosB2TCAEnable, hh3cPosB2TCAThreshold=hh3cPosB2TCAThreshold, hh3cPosSTIMAlarm=hh3cPosSTIMAlarm, hh3cPosClockSource=hh3cPosClockSource, hh3cPoskeepaliveTimeout=hh3cPoskeepaliveTimeout, hh3cPosB3Error=hh3cPosB3Error, hh3cPosPRDIAlarm=hh3cPosPRDIAlarm, hh3cPosLOFAlarm=hh3cPosLOFAlarm, hh3cPosPAISAlarm=hh3cPosPAISAlarm, hh3cPosB1TCAEnable=hh3cPosB1TCAEnable, hh3cPosM1Error=hh3cPosM1Error, hh3cPosParamTableEntry=hh3cPosParamTableEntry, hh3cPosB3TCAEnable=hh3cPosB3TCAEnable, hh3cPosOOFAlarm=hh3cPosOOFAlarm, hh3cPosCRC=hh3cPosCRC, hh3cPosSdhFlagJ0=hh3cPosSdhFlagJ0, hh3cPosMIBNotificationsPrefix=hh3cPosMIBNotificationsPrefix, hh3cPosB3TCAlarm=hh3cPosB3TCAlarm, hh3cPosMIBObjects=hh3cPosMIBObjects, hh3cPosB2Error=hh3cPosB2Error, hh3cPosBERthresholdSD=hh3cPosBERthresholdSD, hh3cPosB1TCAThreshold=hh3cPosB1TCAThreshold, hh3cPosB2TCAlarm=hh3cPosB2TCAlarm, hh3cPosSdhFlagJ1=hh3cPosSdhFlagJ1, hh3cPosLOSAlarm=hh3cPosLOSAlarm, hh3cPosEncapsulation=hh3cPosEncapsulation, hh3cPosB1Error=hh3cPosB1Error, hh3cPosFlagJ1Type=hh3cPosFlagJ1Type, hh3cPosMIBNotifications=hh3cPosMIBNotifications, hh3cPosSonetFlagJ1=hh3cPosSonetFlagJ1, hh3cPosMTU=hh3cPosMTU, hh3cPosB1TCAlarm=hh3cPosB1TCAlarm, hh3cPosBERthresholdSF=hh3cPosBERthresholdSF, hh3cPosFrameType=hh3cPosFrameType, hh3cPosLAISAlarm=hh3cPosLAISAlarm, hh3cPosLRDIAlarm=hh3cPosLRDIAlarm, hh3cPosPTIMAlarm=hh3cPosPTIMAlarm, hh3cPosLOPAlarm=hh3cPosLOPAlarm, hh3cPosSonetFlagJ0=hh3cPosSonetFlagJ0, hh3cPosBindVlanId=hh3cPosBindVlanId, hh3cPosFlagJ0Type=hh3cPosFlagJ0Type, hh3cPosParamTable=hh3cPosParamTable, PYSNMP_MODULE_ID=hh3cPos, hh3cPosLSDAlarm=hh3cPosLSDAlarm, hh3cPosG1Error=hh3cPosG1Error, hh3cPos=hh3cPos, hh3cPosFlagC2=hh3cPosFlagC2)
