#
# PySNMP MIB module CXMCPRT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXMCPRT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cxMc600, = mibBuilder.importSymbols("CXProduct-SMI", "cxMc600")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, iso, MibIdentifier, IpAddress, Gauge32, Counter64, TimeTicks, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "iso", "MibIdentifier", "IpAddress", "Gauge32", "Counter64", "TimeTicks", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxMcPrt = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1))
cxMcPrtGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1))
cxMcPrtGlobalConsoleRate = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 19200)).clone(19200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalConsoleRate.setStatus('optional')
cxMcPrtGlobalResetStat = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalResetStat.setStatus('optional')
cxMcPrtGlobalStationId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone('           ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalStationId.setStatus('optional')
cxMcPrtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cxMcPrtCfgTable.setStatus('mandatory')
cxMcPrtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtCfgPortIndex"))
if mibBuilder.loadTexts: cxMcPrtCfgEntry.setStatus('mandatory')
cxMcPrtCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCfgPortIndex.setStatus('mandatory')
cxMcPrtCfgDriverUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCfgDriverUsed.setStatus('mandatory')
cxMcPrtCfgReinitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCfgReinitPort.setStatus('optional')
cxMcPrtCfgUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCfgUpdated.setStatus('mandatory')
cxMcPrtStatTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3), )
if mibBuilder.loadTexts: cxMcPrtStatTable.setStatus('mandatory')
cxMcPrtStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtStatPortNumber"))
if mibBuilder.loadTexts: cxMcPrtStatEntry.setStatus('mandatory')
cxMcPrtStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatPortNumber.setStatus('mandatory')
cxMcPrtStatRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatRts.setStatus('mandatory')
cxMcPrtStatDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDtr.setStatus('mandatory')
cxMcPrtStatDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDsr.setStatus('mandatory')
cxMcPrtStatDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDcd.setStatus('mandatory')
cxMcPrtStatCts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCts.setStatus('mandatory')
cxMcPrtStatCntMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntMsgTx.setStatus('mandatory')
cxMcPrtStatCntMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntMsgRx.setStatus('mandatory')
cxMcPrtStatCntReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntReinit.setStatus('mandatory')
cxMcPrtStatCntFlowCtrlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlTx.setStatus('mandatory')
cxMcPrtStatCntFlowCtrlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlRx.setStatus('mandatory')
cxMcPrtStatCntErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntErrTx.setStatus('mandatory')
cxMcPrtStatCntErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntErrRx.setStatus('mandatory')
cxMcPrtStatCntConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntConnect.setStatus('mandatory')
cxMcPrtStatCntChrDecomp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntChrDecomp.setStatus('mandatory')
cxMcPrtStatCntChrComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntChrComp.setStatus('mandatory')
cxMcPrtStatCntBitDecomp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntBitDecomp.setStatus('mandatory')
cxMcPrtStatCntBitComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntBitComp.setStatus('mandatory')
cxMcPrtStatStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatStation.setStatus('mandatory')
cxMcPrtStatRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatRoute.setStatus('mandatory')
cxMcPrtStatHwInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatHwInterface.setStatus('mandatory')
cxMcPrtStatTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatTimeTicks.setStatus('mandatory')
cxMcPrtPath = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4))
cxMcPrtPathStationPri = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathStationPri.setStatus('mandatory')
cxMcPrtPathRoutePri = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathRoutePri.setStatus('mandatory')
cxMcPrtPathStationScd = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathStationScd.setStatus('mandatory')
cxMcPrtPathRouteScd = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathRouteScd.setStatus('mandatory')
cxMcPrtDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5))
cxMcPrtBopTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: cxMcPrtBopTable.setStatus('mandatory')
cxMcPrtBopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtBopPortUsed"))
if mibBuilder.loadTexts: cxMcPrtBopEntry.setStatus('mandatory')
cxMcPrtBopPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtBopPortUsed.setStatus('mandatory')
cxMcPrtBopPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopPortStatus.setStatus('mandatory')
cxMcPrtBopComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopComRate.setStatus('mandatory')
cxMcPrtBopUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseLnkErrPassthro.setStatus('mandatory')
cxMcPrtBopInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopInterface.setStatus('mandatory')
cxMcPrtBopRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopRtsDcdModemCtrl.setStatus('mandatory')
cxMcPrtBopUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndDataTx.setStatus('mandatory')
cxMcPrtBopUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndLnk.setStatus('mandatory')
cxMcPrtBopUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndRem.setStatus('mandatory')
cxMcPrtBopDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDtrCtsModemCtrl.setStatus('mandatory')
cxMcPrtBopUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRts.setStatus('mandatory')
cxMcPrtBopUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndLnk.setStatus('mandatory')
cxMcPrtBopUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRem.setStatus('mandatory')
cxMcPrtBopLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitBeforeOut.setStatus('mandatory')
cxMcPrtBopUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseOutCndCtsDtrOn.setStatus('mandatory')
cxMcPrtBopUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseInCndDcdRtsOn.setStatus('mandatory')
cxMcPrtBopSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopSyncMode.setStatus('mandatory')
cxMcPrtBopDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDataLifetime.setStatus('mandatory')
cxMcPrtBopUseClockSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseClockSync.setStatus('mandatory')
cxMcPrtBopUseFlowCtrlClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseFlowCtrlClock.setStatus('mandatory')
cxMcPrtBopFlowCtrlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopFlowCtrlRate.setStatus('mandatory')
cxMcPrtBopLimitOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitOutFlowCtrl.setStatus('mandatory')
cxMcPrtBopLimitInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitInFlowCtrl.setStatus('mandatory')
cxMcPrtBopCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopCoding.setStatus('mandatory')
cxMcPrtBopOutIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flag", 1), ("mark", 2))).clone('flag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopOutIdleState.setStatus('mandatory')
cxMcPrtBopDelayBeforeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDelayBeforeIdle.setStatus('mandatory')
cxMcPrtBopOutPreambleLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopOutPreambleLng.setStatus('mandatory')
cxMcPrtAsyTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: cxMcPrtAsyTable.setStatus('mandatory')
cxMcPrtAsyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtAsyPortUsed"))
if mibBuilder.loadTexts: cxMcPrtAsyEntry.setStatus('mandatory')
cxMcPrtAsyPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtAsyPortUsed.setStatus('mandatory')
cxMcPrtAsyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyPortStatus.setStatus('mandatory')
cxMcPrtAsyComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 128000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyComRate.setStatus('mandatory')
cxMcPrtAsyUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseLnkErrPassthro.setStatus('mandatory')
cxMcPrtAsyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInterface.setStatus('mandatory')
cxMcPrtAsyRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyRtsDcdModemCtrl.setStatus('mandatory')
cxMcPrtAsyUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndDataTx.setStatus('mandatory')
cxMcPrtAsyUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndLnk.setStatus('mandatory')
cxMcPrtAsyUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndRem.setStatus('mandatory')
cxMcPrtAsyDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyDtrCtsModemCtrl.setStatus('mandatory')
cxMcPrtAsyUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRts.setStatus('mandatory')
cxMcPrtAsyUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndLnk.setStatus('mandatory')
cxMcPrtAsyUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRem.setStatus('mandatory')
cxMcPrtAsyLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyLimitBeforeOut.setStatus('mandatory')
cxMcPrtAsyOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyOutCndCtsDtrOn.setStatus('mandatory')
cxMcPrtAsyInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInCndDcdRtsOn.setStatus('mandatory')
cxMcPrtAsySyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsySyncMode.setStatus('mandatory')
cxMcPrtAsyUseDataLifeLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDataLifeLimited.setStatus('mandatory')
cxMcPrtAsyDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyDataLifetime.setStatus('mandatory')
cxMcPrtAsyOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("xonxoff", 2), ("ctsdtr", 3))).clone('xonxoff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyOutFlowCtrl.setStatus('mandatory')
cxMcPrtAsyInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("xonxoff", 2), ("ctsdtr", 3))).clone('xonxoff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInFlowCtrl.setStatus('mandatory')
cxMcPrtAsyXonChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyXonChr.setStatus('mandatory')
cxMcPrtAsyXoffChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyXoffChr.setStatus('mandatory')
cxMcPrtAsyNbBitPerChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("six", 1), ("seven", 2), ("eight", 3))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyNbBitPerChr.setStatus('mandatory')
cxMcPrtAsyParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyParity.setStatus('mandatory')
cxMcPrtAsyNbStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("onehalf", 2), ("two", 3))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyNbStopBit.setStatus('mandatory')
cxMcPrtAsyUseFlushOutChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseFlushOutChr.setStatus('mandatory')
cxMcPrtAsyFlushOutChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyFlushOutChr.setStatus('mandatory')
cxMcPrtCopTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: cxMcPrtCopTable.setStatus('mandatory')
cxMcPrtCopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtCopPortUsed"))
if mibBuilder.loadTexts: cxMcPrtCopEntry.setStatus('mandatory')
cxMcPrtCopPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCopPortUsed.setStatus('mandatory')
cxMcPrtCopPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopPortStatus.setStatus('mandatory')
cxMcPrtCopComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 128000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopComRate.setStatus('mandatory')
cxMcPrtCopUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseLnkErrPassthro.setStatus('mandatory')
cxMcPrtCopInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopInterfaceType.setStatus('mandatory')
cxMcPrtCopRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopRtsDcdModemCtrl.setStatus('mandatory')
cxMcPrtCopUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndDataTx.setStatus('mandatory')
cxMcPrtCopUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndLnk.setStatus('mandatory')
cxMcPrtCopUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndRem.setStatus('mandatory')
cxMcPrtCopDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDtrCtsModemCtrl.setStatus('mandatory')
cxMcPrtCopUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRts.setStatus('mandatory')
cxMcPrtCopUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndLnk.setStatus('mandatory')
cxMcPrtCopUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRem.setStatus('mandatory')
cxMcPrtCopLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitBeforeOut.setStatus('mandatory')
cxMcPrtCopUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseOutCndCtsDtrOn.setStatus('mandatory')
cxMcPrtCopUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseInCndDcdRtsOn.setStatus('mandatory')
cxMcPrtCopSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncMode.setStatus('mandatory')
cxMcPrtCopDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDataLifetime.setStatus('mandatory')
cxMcPrtCopUseClockSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseClockSync.setStatus('mandatory')
cxMcPrtCopUseFlowCtrlClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseFlowCtrlClock.setStatus('mandatory')
cxMcPrtCopFlowCtrlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 9600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopFlowCtrlRate.setStatus('mandatory')
cxMcPrtCopLimitOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitOutFlowCtrl.setStatus('mandatory')
cxMcPrtCopLimitInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitInFlowCtrl.setStatus('mandatory')
cxMcPrtCopOutIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("space", 1), ("mark", 2))).clone('mark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopOutIdleState.setStatus('mandatory')
cxMcPrtCopNbBitPerChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("six", 1), ("seven", 2), ("eight", 3))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbBitPerChr.setStatus('mandatory')
cxMcPrtCopParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopParity.setStatus('mandatory')
cxMcPrtCopSyncChrOne = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncChrOne.setStatus('mandatory')
cxMcPrtCopSyncChrTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncChrTwo.setStatus('mandatory')
cxMcPrtCopNbSyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbSyncChr.setStatus('mandatory')
cxMcPrtCopUseDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncChr.setStatus('mandatory')
cxMcPrtCopDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDesyncChr.setStatus('mandatory')
cxMcPrtCopNbDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbDesyncChr.setStatus('mandatory')
cxMcPrtCopUseDesyncRtsFall = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncRtsFall.setStatus('mandatory')
cxMcPrtCopBitSense = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopBitSense.setStatus('mandatory')
cxMcPrtBsyTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: cxMcPrtBsyTable.setStatus('mandatory')
cxMcPrtBsyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtBsyPortUsed"))
if mibBuilder.loadTexts: cxMcPrtBsyEntry.setStatus('mandatory')
cxMcPrtBsyPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtBsyPortUsed.setStatus('mandatory')
cxMcPrtBsyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyPortStatus.setStatus('mandatory')
cxMcPrtBsyComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 64000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyComRate.setStatus('mandatory')
cxMcPrtBsyUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseLnkErrPassthro.setStatus('mandatory')
cxMcPrtBsyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyInterface.setStatus('mandatory')
cxMcPrtBsyRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyRtsDcdModemCtrl.setStatus('mandatory')
cxMcPrtBsyUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndDataTx.setStatus('mandatory')
cxMcPrtBsyUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndLnk.setStatus('mandatory')
cxMcPrtBsyUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndRem.setStatus('mandatory')
cxMcPrtBsyDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyDtrCtsModemCtrl.setStatus('mandatory')
cxMcPrtBsyUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRts.setStatus('mandatory')
cxMcPrtBsyUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndLnk.setStatus('mandatory')
cxMcPrtBsyUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRem.setStatus('mandatory')
cxMcPrtBsyLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyLimitBeforeOut.setStatus('mandatory')
cxMcPrtBsyUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseOutCndCtsDtrOn.setStatus('mandatory')
cxMcPrtBsyUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseInCndDcdRtsOn.setStatus('mandatory')
cxMcPrtBsySyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsySyncMode.setStatus('mandatory')
cxMcPrtBsyDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyDataLifetime.setStatus('mandatory')
cxMcPrtBsyChrSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ebcdic", 1), ("usaascii", 2), ("trans", 3))).clone('usaascii')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyChrSet.setStatus('mandatory')
cxMcPrtBsyParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyParity.setStatus('mandatory')
cxMcPrtBsyBlkChkChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc", 1), ("lrc", 2))).clone('crc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyBlkChkChr.setStatus('mandatory')
cxMcPrtBsyNbSyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyNbSyncChr.setStatus('mandatory')
cxMcPrtBsyMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyMaxFrameSize.setStatus('mandatory')
mibBuilder.exportSymbols("CXMCPRT-MIB", cxMcPrtCfgEntry=cxMcPrtCfgEntry, cxMcPrt=cxMcPrt, cxMcPrtStatTable=cxMcPrtStatTable, cxMcPrtBsyDataLifetime=cxMcPrtBsyDataLifetime, cxMcPrtAsyPortStatus=cxMcPrtAsyPortStatus, cxMcPrtBopOutPreambleLng=cxMcPrtBopOutPreambleLng, cxMcPrtAsyInCndDcdRtsOn=cxMcPrtAsyInCndDcdRtsOn, cxMcPrtCopUseClockSync=cxMcPrtCopUseClockSync, cxMcPrtCopUseDesyncRtsFall=cxMcPrtCopUseDesyncRtsFall, cxMcPrtCopDesyncChr=cxMcPrtCopDesyncChr, cxMcPrtAsyPortUsed=cxMcPrtAsyPortUsed, cxMcPrtBsyUseLnkErrPassthro=cxMcPrtBsyUseLnkErrPassthro, cxMcPrtCopNbSyncChr=cxMcPrtCopNbSyncChr, cxMcPrtAsyUseDtrCtsCndLnk=cxMcPrtAsyUseDtrCtsCndLnk, cxMcPrtCopUseOutCndCtsDtrOn=cxMcPrtCopUseOutCndCtsDtrOn, cxMcPrtBsyChrSet=cxMcPrtBsyChrSet, cxMcPrtBsyUseInCndDcdRtsOn=cxMcPrtBsyUseInCndDcdRtsOn, cxMcPrtPathRoutePri=cxMcPrtPathRoutePri, cxMcPrtCopDtrCtsModemCtrl=cxMcPrtCopDtrCtsModemCtrl, cxMcPrtBsyBlkChkChr=cxMcPrtBsyBlkChkChr, cxMcPrtBopUseDtrCtsCndRem=cxMcPrtBopUseDtrCtsCndRem, cxMcPrtCopLimitOutFlowCtrl=cxMcPrtCopLimitOutFlowCtrl, cxMcPrtAsyDtrCtsModemCtrl=cxMcPrtAsyDtrCtsModemCtrl, cxMcPrtAsyTable=cxMcPrtAsyTable, cxMcPrtCopUseInCndDcdRtsOn=cxMcPrtCopUseInCndDcdRtsOn, cxMcPrtAsyLimitBeforeOut=cxMcPrtAsyLimitBeforeOut, cxMcPrtBopInterface=cxMcPrtBopInterface, cxMcPrtBsyInterface=cxMcPrtBsyInterface, cxMcPrtStatTimeTicks=cxMcPrtStatTimeTicks, cxMcPrtCopLimitBeforeOut=cxMcPrtCopLimitBeforeOut, cxMcPrtCopEntry=cxMcPrtCopEntry, cxMcPrtStatCntReinit=cxMcPrtStatCntReinit, cxMcPrtBopLimitBeforeOut=cxMcPrtBopLimitBeforeOut, cxMcPrtAsyRtsDcdModemCtrl=cxMcPrtAsyRtsDcdModemCtrl, cxMcPrtBopUseRtsDcdCndRem=cxMcPrtBopUseRtsDcdCndRem, cxMcPrtAsyParity=cxMcPrtAsyParity, cxMcPrtAsyUseRtsDcdCndDataTx=cxMcPrtAsyUseRtsDcdCndDataTx, cxMcPrtAsyNbStopBit=cxMcPrtAsyNbStopBit, cxMcPrtCopComRate=cxMcPrtCopComRate, cxMcPrtStatCntBitComp=cxMcPrtStatCntBitComp, cxMcPrtStatRts=cxMcPrtStatRts, cxMcPrtBopOutIdleState=cxMcPrtBopOutIdleState, cxMcPrtCopSyncChrOne=cxMcPrtCopSyncChrOne, cxMcPrtStatStation=cxMcPrtStatStation, cxMcPrtCopUseRtsDcdCndDataTx=cxMcPrtCopUseRtsDcdCndDataTx, cxMcPrtBopSyncMode=cxMcPrtBopSyncMode, cxMcPrtBopLimitOutFlowCtrl=cxMcPrtBopLimitOutFlowCtrl, cxMcPrtCopFlowCtrlRate=cxMcPrtCopFlowCtrlRate, cxMcPrtBopUseDtrCtsCndRts=cxMcPrtBopUseDtrCtsCndRts, cxMcPrtBsyUseRtsDcdCndLnk=cxMcPrtBsyUseRtsDcdCndLnk, cxMcPrtCopTable=cxMcPrtCopTable, cxMcPrtCopRtsDcdModemCtrl=cxMcPrtCopRtsDcdModemCtrl, cxMcPrtBsyUseRtsDcdCndDataTx=cxMcPrtBsyUseRtsDcdCndDataTx, cxMcPrtBsyTable=cxMcPrtBsyTable, cxMcPrtCfgTable=cxMcPrtCfgTable, cxMcPrtBopEntry=cxMcPrtBopEntry, cxMcPrtAsyOutCndCtsDtrOn=cxMcPrtAsyOutCndCtsDtrOn, cxMcPrtCopNbDesyncChr=cxMcPrtCopNbDesyncChr, cxMcPrtStatCntErrTx=cxMcPrtStatCntErrTx, cxMcPrtCopDataLifetime=cxMcPrtCopDataLifetime, cxMcPrtAsyNbBitPerChr=cxMcPrtAsyNbBitPerChr, cxMcPrtGlobal=cxMcPrtGlobal, cxMcPrtBsyParity=cxMcPrtBsyParity, cxMcPrtBsyEntry=cxMcPrtBsyEntry, cxMcPrtPathStationScd=cxMcPrtPathStationScd, cxMcPrtCopUseFlowCtrlClock=cxMcPrtCopUseFlowCtrlClock, cxMcPrtBopPortStatus=cxMcPrtBopPortStatus, cxMcPrtBopComRate=cxMcPrtBopComRate, cxMcPrtCopUseLnkErrPassthro=cxMcPrtCopUseLnkErrPassthro, cxMcPrtCopBitSense=cxMcPrtCopBitSense, cxMcPrtAsyUseDataLifeLimited=cxMcPrtAsyUseDataLifeLimited, cxMcPrtPath=cxMcPrtPath, cxMcPrtAsyInFlowCtrl=cxMcPrtAsyInFlowCtrl, cxMcPrtBsyPortStatus=cxMcPrtBsyPortStatus, cxMcPrtAsyInterface=cxMcPrtAsyInterface, cxMcPrtBopTable=cxMcPrtBopTable, cxMcPrtBsyComRate=cxMcPrtBsyComRate, cxMcPrtCopUseDesyncChr=cxMcPrtCopUseDesyncChr, cxMcPrtStatRoute=cxMcPrtStatRoute, cxMcPrtStatCntFlowCtrlRx=cxMcPrtStatCntFlowCtrlRx, cxMcPrtAsyOutFlowCtrl=cxMcPrtAsyOutFlowCtrl, cxMcPrtBsyUseDtrCtsCndRts=cxMcPrtBsyUseDtrCtsCndRts, cxMcPrtCfgReinitPort=cxMcPrtCfgReinitPort, cxMcPrtAsyFlushOutChr=cxMcPrtAsyFlushOutChr, cxMcPrtCopParity=cxMcPrtCopParity, cxMcPrtCopSyncMode=cxMcPrtCopSyncMode, cxMcPrtGlobalConsoleRate=cxMcPrtGlobalConsoleRate, cxMcPrtBsyLimitBeforeOut=cxMcPrtBsyLimitBeforeOut, cxMcPrtStatCntChrDecomp=cxMcPrtStatCntChrDecomp, cxMcPrtBopCoding=cxMcPrtBopCoding, cxMcPrtCopUseDtrCtsCndRts=cxMcPrtCopUseDtrCtsCndRts, cxMcPrtStatCts=cxMcPrtStatCts, cxMcPrtBopPortUsed=cxMcPrtBopPortUsed, cxMcPrtCopLimitInFlowCtrl=cxMcPrtCopLimitInFlowCtrl, cxMcPrtBopUseFlowCtrlClock=cxMcPrtBopUseFlowCtrlClock, cxMcPrtPathStationPri=cxMcPrtPathStationPri, cxMcPrtBopUseRtsDcdCndDataTx=cxMcPrtBopUseRtsDcdCndDataTx, cxMcPrtCopUseDtrCtsCndRem=cxMcPrtCopUseDtrCtsCndRem, cxMcPrtCfgUpdated=cxMcPrtCfgUpdated, cxMcPrtAsyUseRtsDcdCndLnk=cxMcPrtAsyUseRtsDcdCndLnk, cxMcPrtDriver=cxMcPrtDriver, cxMcPrtStatHwInterface=cxMcPrtStatHwInterface, cxMcPrtAsyUseDtrCtsCndRem=cxMcPrtAsyUseDtrCtsCndRem, cxMcPrtBsyPortUsed=cxMcPrtBsyPortUsed, cxMcPrtBopDataLifetime=cxMcPrtBopDataLifetime, cxMcPrtBsyUseRtsDcdCndRem=cxMcPrtBsyUseRtsDcdCndRem, cxMcPrtBsyUseDtrCtsCndRem=cxMcPrtBsyUseDtrCtsCndRem, cxMcPrtStatCntErrRx=cxMcPrtStatCntErrRx, cxMcPrtStatCntFlowCtrlTx=cxMcPrtStatCntFlowCtrlTx, cxMcPrtStatPortNumber=cxMcPrtStatPortNumber, cxMcPrtBsyUseOutCndCtsDtrOn=cxMcPrtBsyUseOutCndCtsDtrOn, cxMcPrtCopSyncChrTwo=cxMcPrtCopSyncChrTwo, cxMcPrtPathRouteScd=cxMcPrtPathRouteScd, cxMcPrtBopUseLnkErrPassthro=cxMcPrtBopUseLnkErrPassthro, cxMcPrtStatDcd=cxMcPrtStatDcd, cxMcPrtCopUseDtrCtsCndLnk=cxMcPrtCopUseDtrCtsCndLnk, cxMcPrtGlobalResetStat=cxMcPrtGlobalResetStat, cxMcPrtCopUseRtsDcdCndLnk=cxMcPrtCopUseRtsDcdCndLnk, cxMcPrtBopUseClockSync=cxMcPrtBopUseClockSync, cxMcPrtStatCntBitDecomp=cxMcPrtStatCntBitDecomp, cxMcPrtAsyEntry=cxMcPrtAsyEntry, cxMcPrtCfgPortIndex=cxMcPrtCfgPortIndex, cxMcPrtBsyMaxFrameSize=cxMcPrtBsyMaxFrameSize, cxMcPrtStatCntMsgTx=cxMcPrtStatCntMsgTx, cxMcPrtStatEntry=cxMcPrtStatEntry, cxMcPrtAsyUseFlushOutChr=cxMcPrtAsyUseFlushOutChr, cxMcPrtAsyUseLnkErrPassthro=cxMcPrtAsyUseLnkErrPassthro, cxMcPrtCopNbBitPerChr=cxMcPrtCopNbBitPerChr, cxMcPrtBsySyncMode=cxMcPrtBsySyncMode, cxMcPrtAsyComRate=cxMcPrtAsyComRate, cxMcPrtBopDtrCtsModemCtrl=cxMcPrtBopDtrCtsModemCtrl, cxMcPrtStatCntChrComp=cxMcPrtStatCntChrComp, cxMcPrtBopUseRtsDcdCndLnk=cxMcPrtBopUseRtsDcdCndLnk, cxMcPrtBopRtsDcdModemCtrl=cxMcPrtBopRtsDcdModemCtrl, cxMcPrtAsyXonChr=cxMcPrtAsyXonChr, cxMcPrtAsyXoffChr=cxMcPrtAsyXoffChr, cxMcPrtBsyRtsDcdModemCtrl=cxMcPrtBsyRtsDcdModemCtrl, cxMcPrtCopPortUsed=cxMcPrtCopPortUsed, cxMcPrtStatCntMsgRx=cxMcPrtStatCntMsgRx, cxMcPrtBopFlowCtrlRate=cxMcPrtBopFlowCtrlRate, cxMcPrtBopUseInCndDcdRtsOn=cxMcPrtBopUseInCndDcdRtsOn, cxMcPrtBsyDtrCtsModemCtrl=cxMcPrtBsyDtrCtsModemCtrl, cxMcPrtCopInterfaceType=cxMcPrtCopInterfaceType, cxMcPrtBsyUseDtrCtsCndLnk=cxMcPrtBsyUseDtrCtsCndLnk, cxMcPrtBopUseDtrCtsCndLnk=cxMcPrtBopUseDtrCtsCndLnk, cxMcPrtCfgDriverUsed=cxMcPrtCfgDriverUsed, cxMcPrtAsyUseRtsDcdCndRem=cxMcPrtAsyUseRtsDcdCndRem, cxMcPrtAsyUseDtrCtsCndRts=cxMcPrtAsyUseDtrCtsCndRts, cxMcPrtCopPortStatus=cxMcPrtCopPortStatus, cxMcPrtBsyNbSyncChr=cxMcPrtBsyNbSyncChr, cxMcPrtStatDtr=cxMcPrtStatDtr, cxMcPrtAsySyncMode=cxMcPrtAsySyncMode, cxMcPrtBopDelayBeforeIdle=cxMcPrtBopDelayBeforeIdle, cxMcPrtGlobalStationId=cxMcPrtGlobalStationId, cxMcPrtCopOutIdleState=cxMcPrtCopOutIdleState, cxMcPrtBopUseOutCndCtsDtrOn=cxMcPrtBopUseOutCndCtsDtrOn, cxMcPrtAsyDataLifetime=cxMcPrtAsyDataLifetime, cxMcPrtCopUseRtsDcdCndRem=cxMcPrtCopUseRtsDcdCndRem, cxMcPrtStatCntConnect=cxMcPrtStatCntConnect, cxMcPrtStatDsr=cxMcPrtStatDsr, cxMcPrtBopLimitInFlowCtrl=cxMcPrtBopLimitInFlowCtrl)
