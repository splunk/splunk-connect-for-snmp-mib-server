#
# PySNMP MIB module ALCATEL-IND1-MLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-MLD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:02:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Mld, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Mld")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressIPv6, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressIPv6", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, NotificationType, Gauge32, ObjectIdentity, iso, Unsigned32, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, ModuleIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "iso", "Unsigned32", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1MldMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1))
alcatelIND1MldMIB.setRevisions(('2011-02-23 00:00', '2008-09-10 00:00', '2008-08-08 00:00', '2007-04-03 00:00',))
if mibBuilder.loadTexts: alcatelIND1MldMIB.setLastUpdated('201102230000Z')
if mibBuilder.loadTexts: alcatelIND1MldMIB.setOrganization('Alcatel-Lucent')
alcatelIND1MldMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1))
alaMld = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1))
alaMldStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldStatus.setStatus('current')
alaMldQuerying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerying.setStatus('current')
alaMldSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSpoofing.setStatus('current')
alaMldZapping = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZapping.setStatus('current')
alaMldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 5), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVersion.setStatus('current')
alaMldRobustness = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRobustness.setStatus('current')
alaMldQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 7), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryInterval.setStatus('current')
alaMldQueryResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 8), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQueryResponseInterval.setStatus('current')
alaMldLastMemberQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 9), Unsigned32().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldLastMemberQueryInterval.setStatus('current')
alaMldRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 10), Unsigned32().clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldRouterTimeout.setStatus('current')
alaMldSourceTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 11), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldSourceTimeout.setStatus('current')
alaMldProxying = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldProxying.setStatus('current')
alaMldUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 13), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldUnsolicitedReportInterval.setStatus('current')
alaMldQuerierForwarding = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldQuerierForwarding.setStatus('current')
alaMldMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupLimit.setStatus('current')
alaMldMaxGroupExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldMaxGroupExceedAction.setStatus('current')
alaMldFloodUnknown = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldFloodUnknown.setStatus('current')
alaMldHelperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 18), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddressType.setStatus('current')
alaMldHelperAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 19), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldHelperAddress.setStatus('current')
alaMldZeroBasedQuery = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldZeroBasedQuery.setStatus('current')
alaMldVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2))
alaMldVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaMldVlanTable.setStatus('current')
alaMldVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanIndex"))
if mibBuilder.loadTexts: alaMldVlanEntry.setStatus('current')
alaMldVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanIndex.setStatus('current')
alaMldVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanStatus.setStatus('current')
alaMldVlanQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerying.setStatus('current')
alaMldVlanSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSpoofing.setStatus('current')
alaMldVlanZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZapping.setStatus('current')
alaMldVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanVersion.setStatus('current')
alaMldVlanRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRobustness.setStatus('current')
alaMldVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryInterval.setStatus('current')
alaMldVlanQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQueryResponseInterval.setStatus('current')
alaMldVlanLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanLastMemberQueryInterval.setStatus('current')
alaMldVlanRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanRouterTimeout.setStatus('current')
alaMldVlanSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanSourceTimeout.setStatus('current')
alaMldVlanProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanProxying.setStatus('current')
alaMldVlanUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanUnsolicitedReportInterval.setStatus('current')
alaMldVlanQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanQuerierForwarding.setStatus('current')
alaMldVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupLimit.setStatus('current')
alaMldVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanMaxGroupExceedAction.setStatus('current')
alaMldVlanZeroBasedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldVlanZeroBasedQuery.setStatus('current')
alaMldMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3))
alaMldMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaMldMemberTable.setStatus('current')
alaMldMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldMemberSourceAddress"))
if mibBuilder.loadTexts: alaMldMemberEntry.setStatus('current')
alaMldMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldMemberVlan.setStatus('current')
alaMldMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldMemberIfIndex.setStatus('current')
alaMldMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberGroupAddress.setStatus('current')
alaMldMemberSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldMemberSourceAddress.setStatus('current')
alaMldMemberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberMode.setStatus('current')
alaMldMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberCount.setStatus('current')
alaMldMemberTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberTimeout.setStatus('current')
alaMldStaticMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4))
alaMldStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaMldStaticMemberTable.setStatus('current')
alaMldStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroupAddress"))
if mibBuilder.loadTexts: alaMldStaticMemberEntry.setStatus('current')
alaMldStaticMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticMemberVlan.setStatus('current')
alaMldStaticMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticMemberIfIndex.setStatus('current')
alaMldStaticMemberGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldStaticMemberGroupAddress.setStatus('current')
alaMldStaticMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticMemberRowStatus.setStatus('current')
alaMldNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5))
alaMldNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaMldNeighborTable.setStatus('current')
alaMldNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldNeighborHostAddress"))
if mibBuilder.loadTexts: alaMldNeighborEntry.setStatus('current')
alaMldNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldNeighborVlan.setStatus('current')
alaMldNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldNeighborIfIndex.setStatus('current')
alaMldNeighborHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldNeighborHostAddress.setStatus('current')
alaMldNeighborCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborCount.setStatus('current')
alaMldNeighborTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborTimeout.setStatus('current')
alaMldStaticNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6))
alaMldStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaMldStaticNeighborTable.setStatus('current')
alaMldStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborIfIndex"))
if mibBuilder.loadTexts: alaMldStaticNeighborEntry.setStatus('current')
alaMldStaticNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticNeighborVlan.setStatus('current')
alaMldStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticNeighborIfIndex.setStatus('current')
alaMldStaticNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticNeighborRowStatus.setStatus('current')
alaMldQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7))
alaMldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaMldQuerierTable.setStatus('current')
alaMldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldQuerierHostAddress"))
if mibBuilder.loadTexts: alaMldQuerierEntry.setStatus('current')
alaMldQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldQuerierVlan.setStatus('current')
alaMldQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldQuerierIfIndex.setStatus('current')
alaMldQuerierHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldQuerierHostAddress.setStatus('current')
alaMldQuerierCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierCount.setStatus('current')
alaMldQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 7, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierTimeout.setStatus('current')
alaMldStaticQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8))
alaMldStaticQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaMldStaticQuerierTable.setStatus('current')
alaMldStaticQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierIfIndex"))
if mibBuilder.loadTexts: alaMldStaticQuerierEntry.setStatus('current')
alaMldStaticQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldStaticQuerierVlan.setStatus('current')
alaMldStaticQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaMldStaticQuerierIfIndex.setStatus('current')
alaMldStaticQuerierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticQuerierRowStatus.setStatus('current')
alaMldSource = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9))
alaMldSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaMldSourceTable.setStatus('current')
alaMldSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldSourceOrigAddress"))
if mibBuilder.loadTexts: alaMldSourceEntry.setStatus('current')
alaMldSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldSourceVlan.setStatus('current')
alaMldSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceIfIndex.setStatus('current')
alaMldSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceGroupAddress.setStatus('current')
alaMldSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceHostAddress.setStatus('current')
alaMldSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceDestAddress.setStatus('current')
alaMldSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldSourceOrigAddress.setStatus('current')
alaMldSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldSourceType.setStatus('current')
alaMldForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10))
alaMldForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaMldForwardTable.setStatus('current')
alaMldForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldForwardNextIfIndex"))
if mibBuilder.loadTexts: alaMldForwardEntry.setStatus('current')
alaMldForwardVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardVlan.setStatus('current')
alaMldForwardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardIfIndex.setStatus('current')
alaMldForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardGroupAddress.setStatus('current')
alaMldForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardHostAddress.setStatus('current')
alaMldForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardDestAddress.setStatus('current')
alaMldForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldForwardOrigAddress.setStatus('current')
alaMldForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardType.setStatus('current')
alaMldForwardNextVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 8), Unsigned32())
if mibBuilder.loadTexts: alaMldForwardNextVlan.setStatus('current')
alaMldForwardNextIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 9), InterfaceIndex())
if mibBuilder.loadTexts: alaMldForwardNextIfIndex.setStatus('current')
alaMldForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldForwardNextType.setStatus('current')
alaMldTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11))
alaMldTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1), )
if mibBuilder.loadTexts: alaMldTunnelTable.setStatus('current')
alaMldTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelVlan"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroupAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelHostAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelDestAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelOrigAddress"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextDestAddress"))
if mibBuilder.loadTexts: alaMldTunnelEntry.setStatus('current')
alaMldTunnelVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldTunnelVlan.setStatus('current')
alaMldTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelIfIndex.setStatus('current')
alaMldTunnelGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelGroupAddress.setStatus('current')
alaMldTunnelHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 4), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelHostAddress.setStatus('current')
alaMldTunnelDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 5), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelDestAddress.setStatus('current')
alaMldTunnelOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 6), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelOrigAddress.setStatus('current')
alaMldTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelType.setStatus('current')
alaMldTunnelNextDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 8), InetAddressIPv6())
if mibBuilder.loadTexts: alaMldTunnelNextDestAddress.setStatus('current')
alaMldTunnelNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldTunnelNextType.setStatus('current')
alaMldPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12))
alaMldPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1), )
if mibBuilder.loadTexts: alaMldPortTable.setStatus('current')
alaMldPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"))
if mibBuilder.loadTexts: alaMldPortEntry.setStatus('current')
alaMldPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaMldPortIfIndex.setStatus('current')
alaMldPortMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupLimit.setStatus('current')
alaMldPortMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldPortMaxGroupExceedAction.setStatus('current')
alaMldPortVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13))
alaMldPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1), )
if mibBuilder.loadTexts: alaMldPortVlanTable.setStatus('current')
alaMldPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-MLD-MIB", "alaMldPortIfIndex"), (0, "ALCATEL-IND1-MLD-MIB", "alaMldVlanId"))
if mibBuilder.loadTexts: alaMldPortVlanEntry.setStatus('current')
alaMldVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaMldVlanId.setStatus('current')
alaMldPortVlanCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanCurrentGroupCount.setStatus('current')
alaMldPortVlanMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupLimit.setStatus('current')
alaMldPortVlanMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldPortVlanMaxGroupExceedAction.setStatus('current')
alcatelIND1MldMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2))
alcatelIND1MldMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1))
alaMldCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortGroup"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldCompliance = alaMldCompliance.setStatus('current')
alcatelIND1MldMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2))
alaMldGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldFloodUnknown"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddressType"), ("ALCATEL-IND1-MLD-MIB", "alaMldHelperAddress"), ("ALCATEL-IND1-MLD-MIB", "alaMldZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldGroup = alaMldGroup.setStatus('current')
alaMldVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldVlanStatus"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSpoofing"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZapping"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanVersion"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRobustness"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQueryResponseInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanLastMemberQueryInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanRouterTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanSourceTimeout"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanProxying"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanUnsolicitedReportInterval"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanQuerierForwarding"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanMaxGroupExceedAction"), ("ALCATEL-IND1-MLD-MIB", "alaMldVlanZeroBasedQuery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldVlanGroup = alaMldVlanGroup.setStatus('current')
alaMldMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldMemberMode"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldMemberTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldMemberGroup = alaMldMemberGroup.setStatus('current')
alaMldStaticMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticMemberGroup = alaMldStaticMemberGroup.setStatus('current')
alaMldNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldNeighborCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldNeighborTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldNeighborGroup = alaMldNeighborGroup.setStatus('current')
alaMldStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticNeighborRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticNeighborGroup = alaMldStaticNeighborGroup.setStatus('current')
alaMldQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldQuerierCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldQuerierTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldQuerierGroup = alaMldQuerierGroup.setStatus('current')
alaMldStaticQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldStaticQuerierRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticQuerierGroup = alaMldStaticQuerierGroup.setStatus('current')
alaMldSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldSourceIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldSourceGroup = alaMldSourceGroup.setStatus('current')
alaMldForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldForwardIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardType"), ("ALCATEL-IND1-MLD-MIB", "alaMldForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldForwardGroup = alaMldForwardGroup.setStatus('current')
alaMldTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldTunnelIfIndex"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelType"), ("ALCATEL-IND1-MLD-MIB", "alaMldTunnelNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldTunnelGroup = alaMldTunnelGroup.setStatus('current')
alaMldPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortGroup = alaMldPortGroup.setStatus('current')
alaMldPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 35, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanCurrentGroupCount"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupLimit"), ("ALCATEL-IND1-MLD-MIB", "alaMldPortVlanMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldPortVlanGroup = alaMldPortVlanGroup.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-MLD-MIB", alaMldSourceGroupAddress=alaMldSourceGroupAddress, alaMldForwardDestAddress=alaMldForwardDestAddress, alaMldVlanRouterTimeout=alaMldVlanRouterTimeout, alaMldTunnelHostAddress=alaMldTunnelHostAddress, alaMldStaticQuerier=alaMldStaticQuerier, alaMldQuerierHostAddress=alaMldQuerierHostAddress, alaMldVlanMaxGroupExceedAction=alaMldVlanMaxGroupExceedAction, alaMldForwardVlan=alaMldForwardVlan, alaMldVlanId=alaMldVlanId, alaMldVlanGroup=alaMldVlanGroup, alaMldStaticQuerierIfIndex=alaMldStaticQuerierIfIndex, alaMldForwardNextVlan=alaMldForwardNextVlan, alaMldVlanMaxGroupLimit=alaMldVlanMaxGroupLimit, alaMldStaticMemberVlan=alaMldStaticMemberVlan, alaMldVlanStatus=alaMldVlanStatus, alaMldLastMemberQueryInterval=alaMldLastMemberQueryInterval, alaMldQuerying=alaMldQuerying, alaMldNeighborTable=alaMldNeighborTable, alaMldStaticQuerierRowStatus=alaMldStaticQuerierRowStatus, alaMldSourceVlan=alaMldSourceVlan, alaMldStaticNeighborTable=alaMldStaticNeighborTable, alaMldPortMaxGroupLimit=alaMldPortMaxGroupLimit, alaMldStaticQuerierGroup=alaMldStaticQuerierGroup, alaMldSpoofing=alaMldSpoofing, alaMldQuerierVlan=alaMldQuerierVlan, alaMldMember=alaMldMember, alaMldQuerierTable=alaMldQuerierTable, alaMldMemberSourceAddress=alaMldMemberSourceAddress, alaMldStaticMemberEntry=alaMldStaticMemberEntry, alaMldNeighborEntry=alaMldNeighborEntry, alaMldQueryInterval=alaMldQueryInterval, alaMldVersion=alaMldVersion, alaMldNeighborIfIndex=alaMldNeighborIfIndex, alaMldQuerierTimeout=alaMldQuerierTimeout, alaMldMemberGroupAddress=alaMldMemberGroupAddress, alaMldForwardEntry=alaMldForwardEntry, alaMldQuerierForwarding=alaMldQuerierForwarding, alaMldStaticNeighborIfIndex=alaMldStaticNeighborIfIndex, alaMldQuerier=alaMldQuerier, alaMldVlanLastMemberQueryInterval=alaMldVlanLastMemberQueryInterval, alaMldForward=alaMldForward, alaMldQuerierGroup=alaMldQuerierGroup, alaMldPortTable=alaMldPortTable, alaMldTunnelDestAddress=alaMldTunnelDestAddress, alaMldStaticMemberGroup=alaMldStaticMemberGroup, alaMldTunnelNextType=alaMldTunnelNextType, alaMldMemberGroup=alaMldMemberGroup, alaMldMaxGroupExceedAction=alaMldMaxGroupExceedAction, alaMldFloodUnknown=alaMldFloodUnknown, alaMldQuerierCount=alaMldQuerierCount, alaMldSourceType=alaMldSourceType, alaMldQueryResponseInterval=alaMldQueryResponseInterval, alaMldVlanQuerierForwarding=alaMldVlanQuerierForwarding, alaMldPortEntry=alaMldPortEntry, alaMldRouterTimeout=alaMldRouterTimeout, alaMldSource=alaMldSource, alaMldVlanEntry=alaMldVlanEntry, alaMldQuerierEntry=alaMldQuerierEntry, alaMldStaticQuerierTable=alaMldStaticQuerierTable, alaMld=alaMld, alaMldNeighborVlan=alaMldNeighborVlan, alaMldStaticNeighborGroup=alaMldStaticNeighborGroup, alaMldVlanQueryResponseInterval=alaMldVlanQueryResponseInterval, alaMldPortVlanCurrentGroupCount=alaMldPortVlanCurrentGroupCount, alaMldHelperAddressType=alaMldHelperAddressType, alaMldSourceTable=alaMldSourceTable, alaMldSourceIfIndex=alaMldSourceIfIndex, alaMldPortVlanMaxGroupExceedAction=alaMldPortVlanMaxGroupExceedAction, alaMldVlanIndex=alaMldVlanIndex, alaMldPort=alaMldPort, alaMldForwardNextType=alaMldForwardNextType, alaMldTunnelNextDestAddress=alaMldTunnelNextDestAddress, alaMldStaticMember=alaMldStaticMember, alaMldForwardTable=alaMldForwardTable, alaMldMemberEntry=alaMldMemberEntry, alaMldSourceDestAddress=alaMldSourceDestAddress, alaMldForwardGroupAddress=alaMldForwardGroupAddress, alaMldCompliance=alaMldCompliance, alaMldStaticNeighborVlan=alaMldStaticNeighborVlan, alaMldTunnelIfIndex=alaMldTunnelIfIndex, alaMldTunnelGroupAddress=alaMldTunnelGroupAddress, alaMldPortVlanGroup=alaMldPortVlanGroup, alaMldPortVlan=alaMldPortVlan, alaMldSourceOrigAddress=alaMldSourceOrigAddress, alaMldTunnelVlan=alaMldTunnelVlan, alaMldRobustness=alaMldRobustness, alaMldStaticMemberGroupAddress=alaMldStaticMemberGroupAddress, alaMldPortVlanEntry=alaMldPortVlanEntry, alaMldTunnelType=alaMldTunnelType, alcatelIND1MldMIBObjects=alcatelIND1MldMIBObjects, alaMldNeighborTimeout=alaMldNeighborTimeout, alaMldPortVlanMaxGroupLimit=alaMldPortVlanMaxGroupLimit, alaMldVlanTable=alaMldVlanTable, alaMldMaxGroupLimit=alaMldMaxGroupLimit, alaMldStaticQuerierVlan=alaMldStaticQuerierVlan, alaMldForwardGroup=alaMldForwardGroup, alaMldTunnel=alaMldTunnel, alaMldStatus=alaMldStatus, alaMldNeighborCount=alaMldNeighborCount, alaMldVlanZeroBasedQuery=alaMldVlanZeroBasedQuery, alaMldTunnelOrigAddress=alaMldTunnelOrigAddress, alcatelIND1MldMIB=alcatelIND1MldMIB, alaMldGroup=alaMldGroup, alaMldTunnelEntry=alaMldTunnelEntry, alaMldVlanUnsolicitedReportInterval=alaMldVlanUnsolicitedReportInterval, alaMldMemberTable=alaMldMemberTable, alaMldVlanSourceTimeout=alaMldVlanSourceTimeout, alaMldMemberIfIndex=alaMldMemberIfIndex, alaMldVlanRobustness=alaMldVlanRobustness, alaMldMemberMode=alaMldMemberMode, alaMldPortVlanTable=alaMldPortVlanTable, alaMldTunnelGroup=alaMldTunnelGroup, alaMldSourceHostAddress=alaMldSourceHostAddress, alaMldForwardNextIfIndex=alaMldForwardNextIfIndex, alaMldNeighbor=alaMldNeighbor, alaMldForwardType=alaMldForwardType, alaMldStaticMemberTable=alaMldStaticMemberTable, alaMldProxying=alaMldProxying, alaMldSourceEntry=alaMldSourceEntry, alaMldQuerierIfIndex=alaMldQuerierIfIndex, PYSNMP_MODULE_ID=alcatelIND1MldMIB, alcatelIND1MldMIBConformance=alcatelIND1MldMIBConformance, alaMldVlanProxying=alaMldVlanProxying, alaMldNeighborHostAddress=alaMldNeighborHostAddress, alaMldStaticMemberIfIndex=alaMldStaticMemberIfIndex, alaMldMemberCount=alaMldMemberCount, alaMldStaticNeighbor=alaMldStaticNeighbor, alcatelIND1MldMIBCompliances=alcatelIND1MldMIBCompliances, alaMldHelperAddress=alaMldHelperAddress, alaMldNeighborGroup=alaMldNeighborGroup, alaMldVlanSpoofing=alaMldVlanSpoofing, alaMldStaticMemberRowStatus=alaMldStaticMemberRowStatus, alaMldStaticQuerierEntry=alaMldStaticQuerierEntry, alaMldVlanVersion=alaMldVlanVersion, alaMldForwardHostAddress=alaMldForwardHostAddress, alaMldStaticNeighborEntry=alaMldStaticNeighborEntry, alaMldUnsolicitedReportInterval=alaMldUnsolicitedReportInterval, alaMldForwardIfIndex=alaMldForwardIfIndex, alaMldMemberVlan=alaMldMemberVlan, alaMldTunnelTable=alaMldTunnelTable, alaMldVlanQuerying=alaMldVlanQuerying, alaMldVlan=alaMldVlan, alaMldForwardOrigAddress=alaMldForwardOrigAddress, alaMldPortIfIndex=alaMldPortIfIndex, alaMldVlanQueryInterval=alaMldVlanQueryInterval, alaMldMemberTimeout=alaMldMemberTimeout, alaMldZapping=alaMldZapping, alaMldSourceTimeout=alaMldSourceTimeout, alaMldVlanZapping=alaMldVlanZapping, alcatelIND1MldMIBGroups=alcatelIND1MldMIBGroups, alaMldSourceGroup=alaMldSourceGroup, alaMldStaticNeighborRowStatus=alaMldStaticNeighborRowStatus, alaMldPortMaxGroupExceedAction=alaMldPortMaxGroupExceedAction, alaMldZeroBasedQuery=alaMldZeroBasedQuery, alaMldPortGroup=alaMldPortGroup)
