#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMDS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMDS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, MibIdentifier, iso, NotificationType, Bits, Unsigned32, Gauge32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibIdentifier", "iso", "NotificationType", "Bits", "Unsigned32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_ds3, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-ds3")
ncmhdmDs3PortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000), )
if mibBuilder.loadTexts: ncmhdmDs3PortTable.setStatus('mandatory')
ncmhdmDs3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3PortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3PortIndex"))
if mibBuilder.loadTexts: ncmhdmDs3PortEntry.setStatus('mandatory')
ncmhdmDs3PortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3PortNIDIndex.setStatus('mandatory')
ncmhdmDs3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3PortIndex.setStatus('mandatory')
ncmhdmDs3PerfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3PerfControl.setStatus('mandatory')
ncmhdmDs3LBOSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nORMAL-CABLE", 1), ("lONG-CABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LBOSelection.setStatus('mandatory')
ncmhdmDs3DataRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("only-NearEnd", 1), ("both-NearEndORFarEnd", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3DataRateMode.setStatus('mandatory')
ncmhdmDs3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3Rate.setStatus('mandatory')
ncmhdmDs3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("dsx3M13", 2), ("dSX3CBitParity", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LineType.setStatus('mandatory')
ncmhdmDs3LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dSX3CB3ZS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LineCode.setStatus('mandatory')
ncmhdmDs3AISCBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("aISCBit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3AISCBit.setStatus('mandatory')
ncmhdmDs3EquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3EquipCode.setStatus('mandatory')
ncmhdmDs3LocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LocationIDCode.setStatus('mandatory')
ncmhdmDs3FrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3FrameIDCode.setStatus('mandatory')
ncmhdmDs3UnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3UnitCode.setStatus('mandatory')
ncmhdmDs3FacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3FacilityIDCode.setStatus('mandatory')
ncmhdmDs3PortIdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3PortIdCode.setStatus('mandatory')
ncmhdmDs3CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3CircuitID.setStatus('mandatory')
ncmhdmDs3GenIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3GenIDCode.setStatus('mandatory')
ncmhdmDs3Inband = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3Inband.setStatus('mandatory')
ncmhdmHssi1PortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001), )
if mibBuilder.loadTexts: ncmhdmHssi1PortTable.setStatus('mandatory')
ncmhdmHssi1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3Hssi1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssi1PortIndex"))
if mibBuilder.loadTexts: ncmhdmHssi1PortEntry.setStatus('mandatory')
ncmhdmDs3Hssi1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3Hssi1NIDIndex.setStatus('mandatory')
ncmhdmHssi1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssi1PortIndex.setStatus('mandatory')
ncmhdmHssi1ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aUTOMATIC", 1), ("mANUAL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1ConfigMode.setStatus('mandatory')
ncmhdmHssi1PortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oUT-OF-SERVICE", 1), ("iN-SERVICE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1PortConfig.setStatus('mandatory')
ncmhdmHssi1TestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssi1TestMode.setStatus('mandatory')
ncmhdmHssi1DataRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("only-NearEnd", 1), ("both-NearEndORFarEnd", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1DataRateMode.setStatus('mandatory')
ncmhdmHssi1HssiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1HssiRate.setStatus('mandatory')
ncmhdmHssi1CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1CircuitID.setStatus('mandatory')
ncmhdmHssiStatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002), )
if mibBuilder.loadTexts: ncmhdmHssiStatTable.setStatus('mandatory')
ncmhdmHssiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssiStatNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssiStatIndex"))
if mibBuilder.loadTexts: ncmhdmHssiStatEntry.setStatus('mandatory')
ncmhdmHssiStatNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssiStatNIDIndex.setStatus('mandatory')
ncmhdmHssiStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssiStatIndex.setStatus('mandatory')
ncmhdmStatDCEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDCEReady.setStatus('mandatory')
ncmhdmStatDTEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDTEReady.setStatus('mandatory')
ncmhdmStatLpbkA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatLpbkA.setStatus('mandatory')
ncmhdmStatLpbkB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatLpbkB.setStatus('mandatory')
ncmhdmStatTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatTestMode.setStatus('mandatory')
ncmhdmStatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oUT-OF-SERVICE", 1), ("iN-SERVICE", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatPortState.setStatus('mandatory')
ncmhdmStatCIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 59, 63))).clone(namedValues=NamedValues(("cim-2080", 44), ("cdm-2080", 59), ("cdm-2182", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatCIMType.setStatus('mandatory')
ncmhdmStatDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDiagStatus.setStatus('mandatory')
ncmhdmCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003), )
if mibBuilder.loadTexts: ncmhdmCurrentTable.setStatus('mandatory')
ncmhdmCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmCurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmCurrentIndex"))
if mibBuilder.loadTexts: ncmhdmCurrentEntry.setStatus('mandatory')
ncmhdmCurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentNIDIndex.setStatus('mandatory')
ncmhdmCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentIndex.setStatus('mandatory')
ncmhdmCurrentCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCRC4Status.setStatus('mandatory')
ncmhdmCurrentTimeStampSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampSecs.setStatus('mandatory')
ncmhdmCurrentTimeStampMSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampMSecs.setStatus('mandatory')
ncmhdmCurrentSecsElaps = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentSecsElaps.setStatus('mandatory')
ncmhdmCurrentFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCCV.setStatus('mandatory')
ncmhdmCurrentFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCES.setStatus('mandatory')
ncmhdmCurrentFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCSES.setStatus('mandatory')
ncmhdmCurrentFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndLUAS.setStatus('mandatory')
ncmhdmCurrentLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLCV.setStatus('mandatory')
ncmhdmCurrentLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLES.setStatus('mandatory')
ncmhdmCurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLSESs.setStatus('mandatory')
ncmhdmCurrentPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPCV.setStatus('mandatory')
ncmhdmCurrentPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPES.setStatus('mandatory')
ncmhdmCurrentPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPSES.setStatus('mandatory')
ncmhdmCurrentCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCCV.setStatus('mandatory')
ncmhdmCurrentCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCES.setStatus('mandatory')
ncmhdmCurrentCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCSES.setStatus('mandatory')
ncmhdmCurrentSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentSEFS.setStatus('mandatory')
ncmhdmCurrentAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentAISS.setStatus('mandatory')
ncmhdmCurrentOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentOOSSs.setStatus('mandatory')
ncmhdmCurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLOSSs.setStatus('mandatory')
ncmhdmCurrentLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLOFSs.setStatus('mandatory')
ncmhdmIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004), )
if mibBuilder.loadTexts: ncmhdmIntervalTable.setStatus('mandatory')
ncmhdmIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalNumber"))
if mibBuilder.loadTexts: ncmhdmIntervalEntry.setStatus('mandatory')
ncmhdmIntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalNIDIndex.setStatus('mandatory')
ncmhdmIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalIndex.setStatus('mandatory')
ncmhdmIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalNumber.setStatus('mandatory')
ncmhdmIntervalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCCV.setStatus('mandatory')
ncmhdmIntervalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCES.setStatus('mandatory')
ncmhdmIntervalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCSES.setStatus('mandatory')
ncmhdmIntervalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndLUAS.setStatus('mandatory')
ncmhdmIntervalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLCV.setStatus('mandatory')
ncmhdmIntervalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLES.setStatus('mandatory')
ncmhdmIntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLSESs.setStatus('mandatory')
ncmhdmIntervalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPCV.setStatus('mandatory')
ncmhdmIntervalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPES.setStatus('mandatory')
ncmhdmIntervalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPSES.setStatus('mandatory')
ncmhdmIntervalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCCV.setStatus('mandatory')
ncmhdmIntervalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCES.setStatus('mandatory')
ncmhdmIntervalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCSES.setStatus('mandatory')
ncmhdmIntervalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalSEFS.setStatus('mandatory')
ncmhdmIntervalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalAISS.setStatus('mandatory')
ncmhdmIntervalOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalOOSSs.setStatus('mandatory')
ncmhdmIntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLOSSs.setStatus('mandatory')
ncmhdmIntervalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLOFSs.setStatus('mandatory')
ncmhdmTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005), )
if mibBuilder.loadTexts: ncmhdmTotalTable.setStatus('mandatory')
ncmhdmTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTotalIndex"))
if mibBuilder.loadTexts: ncmhdmTotalEntry.setStatus('mandatory')
ncmhdmTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalNIDIndex.setStatus('mandatory')
ncmhdmTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalIndex.setStatus('mandatory')
ncmhdmTotalCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCRC4Status.setStatus('mandatory')
ncmhdmTotalValidInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalValidInterv.setStatus('mandatory')
ncmhdmTotalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCCV.setStatus('mandatory')
ncmhdmTotalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCES.setStatus('mandatory')
ncmhdmTotalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCSES.setStatus('mandatory')
ncmhdmTotalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndLUAS.setStatus('mandatory')
ncmhdmTotalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLCV.setStatus('mandatory')
ncmhdmTotalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLES.setStatus('mandatory')
ncmhdmTotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLSESs.setStatus('mandatory')
ncmhdmTotalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPCV.setStatus('mandatory')
ncmhdmTotalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPES.setStatus('mandatory')
ncmhdmTotalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPSES.setStatus('mandatory')
ncmhdmTotalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCCV.setStatus('mandatory')
ncmhdmTotalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCES.setStatus('mandatory')
ncmhdmTotalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCSES.setStatus('mandatory')
ncmhdmTotalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalSEFS.setStatus('mandatory')
ncmhdmTotalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalAISS.setStatus('mandatory')
ncmhdmTotalOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalOOSSs.setStatus('mandatory')
ncmhdmTotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLOSSs.setStatus('mandatory')
ncmhdmTotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLOFSs.setStatus('mandatory')
ncmDs3PerformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006), )
if mibBuilder.loadTexts: ncmDs3PerformanceSnapShotTable.setStatus('mandatory')
ncmDs3PerformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmDs3SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmDs3SnapShotIndex"))
if mibBuilder.loadTexts: ncmDs3PerformanceSnapShotEntry.setStatus('mandatory')
ncmDs3SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotNIDIndex.setStatus('mandatory')
ncmDs3SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotIndex.setStatus('mandatory')
ncmDs3SnapShotCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotCRC4Status.setStatus('mandatory')
ncmDs3SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDs3SnapShot.setStatus('mandatory')
ncmDs3TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3TimeStampSec.setStatus('mandatory')
ncmDs3TimeStampMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3TimeStampMilliSec.setStatus('mandatory')
ncmDs3SnapShotSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotSecs.setStatus('mandatory')
ncmDs3ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDs3ResetPerfReg.setStatus('mandatory')
ncmhdmTCAQtrTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007), )
if mibBuilder.loadTexts: ncmhdmTCAQtrTable.setStatus('mandatory')
ncmhdmTCAQtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCAQtrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCAQtrIndex"))
if mibBuilder.loadTexts: ncmhdmTCAQtrEntry.setStatus('mandatory')
ncmhdmTCAQtrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCAQtrNIDIndex.setStatus('mandatory')
ncmhdmTCAQtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCAQtrIndex.setStatus('mandatory')
ncmhdmTCAQtrDs3FarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCCV.setStatus('mandatory')
ncmhdmTCAQtrDs3FarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCES.setStatus('mandatory')
ncmhdmTCAQtrDs3FarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCSES.setStatus('mandatory')
ncmhdmTCAQtrDs3FarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndLUAS.setStatus('mandatory')
ncmhdmTCAQtrDs3LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LCV.setStatus('mandatory')
ncmhdmTCAQtrDs3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LES.setStatus('mandatory')
ncmhdmTCAQtrDs3LSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LSESs.setStatus('mandatory')
ncmhdmTCAQtrDs3PCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PCV.setStatus('mandatory')
ncmhdmTCAQtrDs3PES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PES.setStatus('mandatory')
ncmhdmTCAQtrDs3PSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PSES.setStatus('mandatory')
ncmhdmTCAQtrDs3CCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CCV.setStatus('mandatory')
ncmhdmTCAQtrDs3CES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CES.setStatus('mandatory')
ncmhdmTCAQtrDs3CSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CSES.setStatus('mandatory')
ncmhdmTCAQtrDs3SEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3SEFS.setStatus('mandatory')
ncmhdmTCAQtrDs3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3AISS.setStatus('mandatory')
ncmhdmTCAQtrDs3LUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LUASs.setStatus('mandatory')
ncmhdmTCAQtrDs3LOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOSSs.setStatus('mandatory')
ncmhdmTCAQtrDs3LOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOFSs.setStatus('mandatory')
ncmhdmTCADayTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008), )
if mibBuilder.loadTexts: ncmhdmTCADayTable.setStatus('mandatory')
ncmhdmTCADayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCADayNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCADayIndex"))
if mibBuilder.loadTexts: ncmhdmTCADayEntry.setStatus('mandatory')
ncmhdmTCADayNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCADayNIDIndex.setStatus('mandatory')
ncmhdmTCADayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCADayIndex.setStatus('mandatory')
ncmhdmTCADayDs3FarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCCV.setStatus('mandatory')
ncmhdmTCADayDs3FarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCES.setStatus('mandatory')
ncmhdmTCADayDs3FarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCSES.setStatus('mandatory')
ncmhdmTCADayDs3FarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndLUAS.setStatus('mandatory')
ncmhdmTCADayDs3LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LCV.setStatus('mandatory')
ncmhdmTCADayDs3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LES.setStatus('mandatory')
ncmhdmTCADayDs3LSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LSESs.setStatus('mandatory')
ncmhdmTCADayDs3PCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PCV.setStatus('mandatory')
ncmhdmTCADayDs3PES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PES.setStatus('mandatory')
ncmhdmTCADayDs3PSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PSES.setStatus('mandatory')
ncmhdmTCADayDs3CCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CCV.setStatus('mandatory')
ncmhdmTCADayDs3CES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CES.setStatus('mandatory')
ncmhdmTCADayDs3CSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CSES.setStatus('mandatory')
ncmhdmTCADayDs3SEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3SEFS.setStatus('mandatory')
ncmhdmTCADayDs3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3AISS.setStatus('mandatory')
ncmhdmTCADayDs3LUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LUASs.setStatus('mandatory')
ncmhdmTCADayDs3LOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOSSs.setStatus('mandatory')
ncmhdmTCADayDs3LOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOFSs.setStatus('mandatory')
ncmhdmTxAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009), )
if mibBuilder.loadTexts: ncmhdmTxAlarmTable.setStatus('mandatory')
ncmhdmTxAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTxAlarmNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTxAlarmIndex"))
if mibBuilder.loadTexts: ncmhdmTxAlarmEntry.setStatus('mandatory')
ncmhdmTxAlarmNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTxAlarmNIDIndex.setStatus('mandatory')
ncmhdmTxAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTxAlarmIndex.setStatus('mandatory')
ncmhdmTxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxYellowAlarm.setStatus('mandatory')
ncmhdmTxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxAIS.setStatus('mandatory')
ncmhdmTxIdleSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxIdleSignal.setStatus('mandatory')
ncmhdmTxFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxFEBE.setStatus('mandatory')
ncmhdmTxFEACAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nO-FEAC-Alarm-enabled", 1), ("eqptFailureSA-Alarm", 2), ("lOSHBER-Alarm", 3), ("oOF-Alarm", 4), ("aISReceived-Alarm", 5), ("idleReceived-Alarm", 6), ("eqptFailureNSA-Alarm", 7), ("commonEqptFailureNSA-Alarm", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxFEACAlarm.setStatus('mandatory')
ncmhdmDs3StatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010), )
if mibBuilder.loadTexts: ncmhdmDs3StatTable.setStatus('mandatory')
ncmhdmDs3StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3StatNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3StatIndex"))
if mibBuilder.loadTexts: ncmhdmDs3StatEntry.setStatus('mandatory')
ncmhdmDs3StatNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatNIDIndex.setStatus('mandatory')
ncmhdmDs3StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatIndex.setStatus('mandatory')
ncmhdmDs3StatAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatAIS.setStatus('mandatory')
ncmhdmDs3StatIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatIdle.setStatus('mandatory')
ncmhdmDs3StatYellowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatYellowAlm.setStatus('mandatory')
ncmhdmDs3StatFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatFrameLoss.setStatus('mandatory')
ncmhdmDs3StatSigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatSigLoss.setStatus('mandatory')
ncmhdmDs3StatPLCPYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPYellow.setStatus('mandatory')
ncmhdmDs3StatPLCPFrmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPFrmLoss.setStatus('mandatory')
ncmhdmDs3StatPLCPOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPOOF.setStatus('mandatory')
ncmhdmDs3LpbkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkLocal.setStatus('mandatory')
ncmhdmDs3LpbkPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkPayload.setStatus('mandatory')
ncmhdmDs3LpbkFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkFEAC.setStatus('mandatory')
ncmhdmDs3LpbkFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkFarEnd.setStatus('mandatory')
ncmhdmds3LPBKTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011), )
if mibBuilder.loadTexts: ncmhdmds3LPBKTable.setStatus('mandatory')
ncmhdmds3LPBKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmLPBKNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmds3LPBKIndex"))
if mibBuilder.loadTexts: ncmhdmds3LPBKEntry.setStatus('mandatory')
ncmhdmLPBKNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmLPBKNIDIndex.setStatus('mandatory')
ncmhdmds3LPBKIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmds3LPBKIndex.setStatus('mandatory')
ncmhdmDs3LPBKActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("no-Loopback", 1), ("dS3-Internal-Activate", 2), ("dS3-Internal-De-activate", 3), ("dS3-Payload-Activate", 4), ("dS3-Payload-De-activate", 5), ("hSSI-A-Activate", 6), ("hSSI-A-De-activate", 7), ("hSSI-B-Activate", 8), ("hSSI-B-De-activate", 9), ("fEAC-Activate", 10), ("fEAC-De-activate", 11), ("far-End-Lpbk-Activate", 12), ("far-End-Lpbk-De-activate", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LPBKActivation.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMDS3-MIB", ncmhdmTCADayIndex=ncmhdmTCADayIndex, ncmhdmCurrentOOSSs=ncmhdmCurrentOOSSs, ncmhdmCurrentFarEndCSES=ncmhdmCurrentFarEndCSES, ncmhdmIntervalAISS=ncmhdmIntervalAISS, ncmhdmTCADayDs3FarEndLUAS=ncmhdmTCADayDs3FarEndLUAS, ncmhdmStatDTEReady=ncmhdmStatDTEReady, ncmhdmDs3StatPLCPFrmLoss=ncmhdmDs3StatPLCPFrmLoss, ncmhdmCurrentCCV=ncmhdmCurrentCCV, ncmhdmIntervalLSESs=ncmhdmIntervalLSESs, ncmhdmTCAQtrDs3CES=ncmhdmTCAQtrDs3CES, ncmhdmTCADayDs3FarEndCSES=ncmhdmTCADayDs3FarEndCSES, ncmhdmCurrentLES=ncmhdmCurrentLES, ncmhdmCurrentPES=ncmhdmCurrentPES, ncmDs3ResetPerfReg=ncmDs3ResetPerfReg, ncmhdmTCADayDs3LES=ncmhdmTCADayDs3LES, ncmhdmDs3StatNIDIndex=ncmhdmDs3StatNIDIndex, ncmhdmDs3Hssi1NIDIndex=ncmhdmDs3Hssi1NIDIndex, ncmDs3SnapShotNIDIndex=ncmDs3SnapShotNIDIndex, ncmhdmTxIdleSignal=ncmhdmTxIdleSignal, ncmhdmDs3StatPLCPOOF=ncmhdmDs3StatPLCPOOF, ncmhdmTxAlarmEntry=ncmhdmTxAlarmEntry, ncmhdmDs3PortTable=ncmhdmDs3PortTable, ncmhdmDs3PerfControl=ncmhdmDs3PerfControl, ncmhdmTotalSEFS=ncmhdmTotalSEFS, ncmhdmDs3StatIdle=ncmhdmDs3StatIdle, ncmhdmTxFEACAlarm=ncmhdmTxFEACAlarm, ncmhdmTotalPCV=ncmhdmTotalPCV, ncmhdmTotalLCV=ncmhdmTotalLCV, ncmhdmTotalLOFSs=ncmhdmTotalLOFSs, ncmhdmTxAlarmTable=ncmhdmTxAlarmTable, ncmhdmStatPortState=ncmhdmStatPortState, ncmhdmDs3LpbkPayload=ncmhdmDs3LpbkPayload, ncmhdmDs3AISCBit=ncmhdmDs3AISCBit, ncmhdmDs3StatSigLoss=ncmhdmDs3StatSigLoss, ncmhdmCurrentFarEndCES=ncmhdmCurrentFarEndCES, ncmhdmIntervalFarEndCES=ncmhdmIntervalFarEndCES, ncmhdmTCADayDs3LUASs=ncmhdmTCADayDs3LUASs, ncmhdmIntervalOOSSs=ncmhdmIntervalOOSSs, ncmhdmCurrentTimeStampSecs=ncmhdmCurrentTimeStampSecs, ncmhdmTotalFarEndCSES=ncmhdmTotalFarEndCSES, ncmhdmTotalFarEndLUAS=ncmhdmTotalFarEndLUAS, ncmhdmds3LPBKIndex=ncmhdmds3LPBKIndex, ncmhdmDs3GenIDCode=ncmhdmDs3GenIDCode, ncmhdmIntervalLCV=ncmhdmIntervalLCV, ncmhdmTotalCRC4Status=ncmhdmTotalCRC4Status, ncmhdmTCAQtrDs3AISS=ncmhdmTCAQtrDs3AISS, ncmhdmTCADayDs3FarEndCES=ncmhdmTCADayDs3FarEndCES, ncmhdmTotalEntry=ncmhdmTotalEntry, ncmhdmCurrentAISS=ncmhdmCurrentAISS, ncmhdmDs3LpbkFarEnd=ncmhdmDs3LpbkFarEnd, ncmhdmTCAQtrDs3LUASs=ncmhdmTCAQtrDs3LUASs, ncmhdmDs3LBOSelection=ncmhdmDs3LBOSelection, ncmhdmHssiStatEntry=ncmhdmHssiStatEntry, ncmhdmTotalLES=ncmhdmTotalLES, ncmhdmTCAQtrDs3PES=ncmhdmTCAQtrDs3PES, ncmhdmTCAQtrDs3FarEndCCV=ncmhdmTCAQtrDs3FarEndCCV, ncmhdmHssiStatIndex=ncmhdmHssiStatIndex, ncmhdmDs3LpbkFEAC=ncmhdmDs3LpbkFEAC, ncmhdmHssi1PortIndex=ncmhdmHssi1PortIndex, ncmhdmIntervalSEFS=ncmhdmIntervalSEFS, ncmhdmTotalNIDIndex=ncmhdmTotalNIDIndex, ncmhdmHssiStatNIDIndex=ncmhdmHssiStatNIDIndex, ncmhdmCurrentSEFS=ncmhdmCurrentSEFS, ncmhdmTotalFarEndCCV=ncmhdmTotalFarEndCCV, ncmhdmIntervalFarEndCCV=ncmhdmIntervalFarEndCCV, ncmhdmTCADayDs3LCV=ncmhdmTCADayDs3LCV, ncmhdmDs3StatYellowAlm=ncmhdmDs3StatYellowAlm, ncmhdmDs3PortEntry=ncmhdmDs3PortEntry, ncmhdmDs3UnitCode=ncmhdmDs3UnitCode, ncmhdmLPBKNIDIndex=ncmhdmLPBKNIDIndex, ncmhdmTotalCCV=ncmhdmTotalCCV, ncmhdmTCAQtrDs3FarEndCSES=ncmhdmTCAQtrDs3FarEndCSES, ncmhdmTCADayNIDIndex=ncmhdmTCADayNIDIndex, ncmhdmTCADayDs3LSESs=ncmhdmTCADayDs3LSESs, ncmhdmTCAQtrDs3LES=ncmhdmTCAQtrDs3LES, ncmhdmds3LPBKEntry=ncmhdmds3LPBKEntry, ncmhdmStatLpbkA=ncmhdmStatLpbkA, ncmhdmTCADayDs3CES=ncmhdmTCADayDs3CES, ncmhdmIntervalLOSSs=ncmhdmIntervalLOSSs, ncmhdmDs3FacilityIDCode=ncmhdmDs3FacilityIDCode, ncmhdmIntervalCSES=ncmhdmIntervalCSES, ncmDs3SnapShotSecs=ncmDs3SnapShotSecs, ncmhdmIntervalFarEndLUAS=ncmhdmIntervalFarEndLUAS, ncmhdmHssi1HssiRate=ncmhdmHssi1HssiRate, ncmhdmIntervalTable=ncmhdmIntervalTable, ncmhdmCurrentIndex=ncmhdmCurrentIndex, ncmhdmIntervalLES=ncmhdmIntervalLES, ncmhdmDs3CircuitID=ncmhdmDs3CircuitID, ncmhdmHssi1DataRateMode=ncmhdmHssi1DataRateMode, ncmhdmTCADayDs3PSES=ncmhdmTCADayDs3PSES, ncmhdmDs3StatPLCPYellow=ncmhdmDs3StatPLCPYellow, ncmhdmTotalCSES=ncmhdmTotalCSES, ncmhdmHssiStatTable=ncmhdmHssiStatTable, ncmhdmDs3StatFrameLoss=ncmhdmDs3StatFrameLoss, ncmhdmTCADayTable=ncmhdmTCADayTable, ncmhdmHssi1PortTable=ncmhdmHssi1PortTable, ncmhdmIntervalPES=ncmhdmIntervalPES, ncmhdmIntervalLOFSs=ncmhdmIntervalLOFSs, ncmhdmStatLpbkB=ncmhdmStatLpbkB, ncmhdmTCADayDs3PES=ncmhdmTCADayDs3PES, ncmhdmTCADayDs3LOSSs=ncmhdmTCADayDs3LOSSs, ncmhdmCurrentTimeStampMSecs=ncmhdmCurrentTimeStampMSecs, ncmDs3SnapShot=ncmDs3SnapShot, ncmhdmCurrentCES=ncmhdmCurrentCES, ncmhdmDs3Inband=ncmhdmDs3Inband, ncmhdmIntervalEntry=ncmhdmIntervalEntry, ncmhdmTotalOOSSs=ncmhdmTotalOOSSs, ncmhdmDs3DataRateMode=ncmhdmDs3DataRateMode, ncmhdmDs3StatAIS=ncmhdmDs3StatAIS, ncmhdmTotalAISS=ncmhdmTotalAISS, ncmhdmTCAQtrNIDIndex=ncmhdmTCAQtrNIDIndex, ncmhdmTCAQtrDs3SEFS=ncmhdmTCAQtrDs3SEFS, ncmhdmTCADayDs3FarEndCCV=ncmhdmTCADayDs3FarEndCCV, ncmhdmTCADayDs3SEFS=ncmhdmTCADayDs3SEFS, ncmhdmTotalValidInterv=ncmhdmTotalValidInterv, ncmhdmCurrentLCV=ncmhdmCurrentLCV, ncmhdmStatCIMType=ncmhdmStatCIMType, ncmhdmHssi1PortConfig=ncmhdmHssi1PortConfig, ncmhdmCurrentTable=ncmhdmCurrentTable, ncmhdmTCAQtrDs3LCV=ncmhdmTCAQtrDs3LCV, ncmDs3SnapShotCRC4Status=ncmDs3SnapShotCRC4Status, ncmhdmCurrentFarEndCCV=ncmhdmCurrentFarEndCCV, ncmhdmTotalLSESs=ncmhdmTotalLSESs, ncmhdmIntervalNIDIndex=ncmhdmIntervalNIDIndex, ncmhdmTotalPSES=ncmhdmTotalPSES, ncmhdmTCAQtrDs3FarEndLUAS=ncmhdmTCAQtrDs3FarEndLUAS, ncmhdmCurrentCSES=ncmhdmCurrentCSES, ncmhdmTxAlarmIndex=ncmhdmTxAlarmIndex, ncmhdmIntervalCES=ncmhdmIntervalCES, ncmhdmTxAlarmNIDIndex=ncmhdmTxAlarmNIDIndex, ncmhdmHssi1CircuitID=ncmhdmHssi1CircuitID, ncmhdmDs3StatTable=ncmhdmDs3StatTable, ncmhdmCurrentEntry=ncmhdmCurrentEntry, ncmhdmIntervalCCV=ncmhdmIntervalCCV, ncmhdmTCAQtrDs3PCV=ncmhdmTCAQtrDs3PCV, ncmhdmHssi1PortEntry=ncmhdmHssi1PortEntry, ncmhdmDs3FrameIDCode=ncmhdmDs3FrameIDCode, ncmDs3TimeStampMilliSec=ncmDs3TimeStampMilliSec, ncmhdmTCADayDs3CSES=ncmhdmTCADayDs3CSES, ncmhdmDs3LocationIDCode=ncmhdmDs3LocationIDCode, ncmhdmDs3LineType=ncmhdmDs3LineType, ncmhdmTxFEBE=ncmhdmTxFEBE, ncmhdmds3LPBKTable=ncmhdmds3LPBKTable, ncmhdmHssi1TestMode=ncmhdmHssi1TestMode, ncmhdmCurrentLOSSs=ncmhdmCurrentLOSSs, ncmhdmIntervalPCV=ncmhdmIntervalPCV, ncmhdmTCAQtrDs3FarEndCES=ncmhdmTCAQtrDs3FarEndCES, ncmhdmDs3EquipCode=ncmhdmDs3EquipCode, ncmhdmDs3PortIdCode=ncmhdmDs3PortIdCode, ncmhdmDs3StatEntry=ncmhdmDs3StatEntry, ncmhdmHssi1ConfigMode=ncmhdmHssi1ConfigMode, ncmhdmIntervalNumber=ncmhdmIntervalNumber, ncmhdmCurrentPCV=ncmhdmCurrentPCV, ncmhdmTCAQtrIndex=ncmhdmTCAQtrIndex, ncmhdmTotalFarEndCES=ncmhdmTotalFarEndCES, ncmhdmDs3PortIndex=ncmhdmDs3PortIndex, ncmhdmTCAQtrDs3LOSSs=ncmhdmTCAQtrDs3LOSSs, ncmhdmIntervalPSES=ncmhdmIntervalPSES, ncmhdmTCADayDs3AISS=ncmhdmTCADayDs3AISS, ncmhdmTCAQtrEntry=ncmhdmTCAQtrEntry, ncmhdmTCADayEntry=ncmhdmTCADayEntry, ncmDs3TimeStampSec=ncmDs3TimeStampSec, ncmhdmTotalTable=ncmhdmTotalTable, ncmDs3PerformanceSnapShotTable=ncmDs3PerformanceSnapShotTable, ncmDs3PerformanceSnapShotEntry=ncmDs3PerformanceSnapShotEntry, ncmhdmTCAQtrDs3LSESs=ncmhdmTCAQtrDs3LSESs, ncmhdmTCAQtrDs3LOFSs=ncmhdmTCAQtrDs3LOFSs, ncmhdmTCADayDs3LOFSs=ncmhdmTCADayDs3LOFSs, ncmhdmIntervalIndex=ncmhdmIntervalIndex, ncmhdmTxYellowAlarm=ncmhdmTxYellowAlarm, ncmhdmDs3StatIndex=ncmhdmDs3StatIndex, ncmhdmDs3LineCode=ncmhdmDs3LineCode, ncmhdmTotalIndex=ncmhdmTotalIndex, ncmhdmDs3PortNIDIndex=ncmhdmDs3PortNIDIndex, ncmhdmStatDCEReady=ncmhdmStatDCEReady, ncmhdmIntervalFarEndCSES=ncmhdmIntervalFarEndCSES, ncmhdmTotalLOSSs=ncmhdmTotalLOSSs, ncmhdmDs3Rate=ncmhdmDs3Rate, ncmhdmTCAQtrDs3PSES=ncmhdmTCAQtrDs3PSES, ncmhdmTCADayDs3PCV=ncmhdmTCADayDs3PCV, ncmhdmCurrentNIDIndex=ncmhdmCurrentNIDIndex, ncmhdmCurrentFarEndLUAS=ncmhdmCurrentFarEndLUAS, ncmhdmTCAQtrDs3CCV=ncmhdmTCAQtrDs3CCV, ncmhdmTotalPES=ncmhdmTotalPES, ncmhdmDs3LpbkLocal=ncmhdmDs3LpbkLocal, ncmDs3SnapShotIndex=ncmDs3SnapShotIndex, ncmhdmTCADayDs3CCV=ncmhdmTCADayDs3CCV, ncmhdmTCAQtrDs3CSES=ncmhdmTCAQtrDs3CSES, ncmhdmTotalCES=ncmhdmTotalCES, ncmhdmTCAQtrTable=ncmhdmTCAQtrTable, ncmhdmTxAIS=ncmhdmTxAIS, ncmhdmDs3LPBKActivation=ncmhdmDs3LPBKActivation, ncmhdmCurrentCRC4Status=ncmhdmCurrentCRC4Status, ncmhdmCurrentSecsElaps=ncmhdmCurrentSecsElaps, ncmhdmStatDiagStatus=ncmhdmStatDiagStatus, ncmhdmStatTestMode=ncmhdmStatTestMode, ncmhdmCurrentLSESs=ncmhdmCurrentLSESs, ncmhdmCurrentLOFSs=ncmhdmCurrentLOFSs, ncmhdmCurrentPSES=ncmhdmCurrentPSES)
