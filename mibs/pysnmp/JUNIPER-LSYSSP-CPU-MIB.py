#
# PySNMP MIB module JUNIPER-LSYSSP-CPU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LSYSSP-CPU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
jnxLsysSpCPU, = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpCPU")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, ModuleIdentity, Counter32, iso, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "ModuleIdentity", "Counter32", "iso", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxLsysSpCPUMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1))
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setLastUpdated('201005191644Z')
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setOrganization('Juniper Networks, Inc.')
jnxLsysSpCPUObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1))
jnxLsysSpCPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2))
jnxLsysSpCPSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1))
jnxLsysSpSPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2))
jnxLsysSpCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLsysSpCPUTable.setStatus('current')
jnxLsysSpCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LSYSSP-CPU-MIB", "jnxLsysSpCPULsysName"))
if mibBuilder.loadTexts: jnxLsysSpCPUEntry.setStatus('current')
jnxLsysSpCPULsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxLsysSpCPULsysName.setStatus('current')
jnxLsysSpCPUProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUProfileName.setStatus('current')
jnxLsysSpCPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUsage.setStatus('current')
jnxLsysSpSPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUUsage.setStatus('current')
jnxLsysSpCPUReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 5), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUReserved.setStatus('current')
jnxLsysSpCPUMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUMaximum.setStatus('current')
jnxLsysSpCPUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 1), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUsedAmount.setStatus('current')
jnxLsysSpCPMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 2), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPMaxQuota.setStatus('current')
jnxLsysSpCPAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPAvailableAmount.setStatus('current')
jnxLsysSpCPHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUsage.setStatus('current')
jnxLsysSpCPHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUser.setStatus('current')
jnxLsysSpCPLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUsage.setStatus('current')
jnxLsysSpCPLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUser.setStatus('current')
jnxLsysSpSPUUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 1), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUUsedAmount.setStatus('current')
jnxLsysSpSPUMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 2), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUMaxQuota.setStatus('current')
jnxLsysSpSPUAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUAvailableAmount.setStatus('current')
jnxLsysSpSPUHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUsage.setStatus('current')
jnxLsysSpSPUHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUser.setStatus('current')
jnxLsysSpSPULightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUsage.setStatus('current')
jnxLsysSpSPULightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUser.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-LSYSSP-CPU-MIB", jnxLsysSpCPUsage=jnxLsysSpCPUsage, jnxLsysSpCPSummary=jnxLsysSpCPSummary, jnxLsysSpCPUsedAmount=jnxLsysSpCPUsedAmount, jnxLsysSpSPUMaxQuota=jnxLsysSpSPUMaxQuota, jnxLsysSpSPUHeaviestUsage=jnxLsysSpSPUHeaviestUsage, jnxLsysSpSPULightestUsage=jnxLsysSpSPULightestUsage, jnxLsysSpCPLightestUser=jnxLsysSpCPLightestUser, jnxLsysSpCPUMaximum=jnxLsysSpCPUMaximum, jnxLsysSpSPUSummary=jnxLsysSpSPUSummary, jnxLsysSpSPULightestUser=jnxLsysSpSPULightestUser, jnxLsysSpSPUUsedAmount=jnxLsysSpSPUUsedAmount, jnxLsysSpCPUProfileName=jnxLsysSpCPUProfileName, jnxLsysSpCPUSummary=jnxLsysSpCPUSummary, jnxLsysSpCPULsysName=jnxLsysSpCPULsysName, jnxLsysSpCPUReserved=jnxLsysSpCPUReserved, jnxLsysSpCPUObjects=jnxLsysSpCPUObjects, jnxLsysSpCPMaxQuota=jnxLsysSpCPMaxQuota, jnxLsysSpCPAvailableAmount=jnxLsysSpCPAvailableAmount, jnxLsysSpSPUAvailableAmount=jnxLsysSpSPUAvailableAmount, jnxLsysSpSPUUsage=jnxLsysSpSPUUsage, jnxLsysSpSPUHeaviestUser=jnxLsysSpSPUHeaviestUser, jnxLsysSpCPHeaviestUsage=jnxLsysSpCPHeaviestUsage, jnxLsysSpCPHeaviestUser=jnxLsysSpCPHeaviestUser, jnxLsysSpCPLightestUsage=jnxLsysSpCPLightestUsage, PYSNMP_MODULE_ID=jnxLsysSpCPUMIB, jnxLsysSpCPUMIB=jnxLsysSpCPUMIB, jnxLsysSpCPUEntry=jnxLsysSpCPUEntry, jnxLsysSpCPUTable=jnxLsysSpCPUTable)
