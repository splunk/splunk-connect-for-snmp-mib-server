#
# PySNMP MIB module ZHNLANDEVICE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNLANDEVICE
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
enterprises, IpAddress, ModuleIdentity, Gauge32, Counter64, Integer32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Counter32, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "IpAddress", "ModuleIdentity", "Gauge32", "Counter64", "Integer32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Counter32", "TimeTicks", "NotificationType", "Bits")
TruthValue, RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
VlanTypeValues, = mibBuilder.importSymbols("ZHNLAYER2BRIDGING", "VlanTypeValues")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhnLANDevice = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41))
zhnLANDevice.setRevisions(('2012-06-13 12:00', '2012-05-10 12:00', '2012-04-11 02:11', '2012-01-27 12:00', '2011-01-11 00:00', '2010-07-21 00:00', '2010-04-01 00:00',))
if mibBuilder.loadTexts: zhnLANDevice.setLastUpdated('201206131200Z')
if mibBuilder.loadTexts: zhnLANDevice.setOrganization('Zhone Technologies, Inc.')
zhnLANDeviceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1))
class LANEthernetStatusValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANEthernetMaxBitRateValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANEthernetDuplexModeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANEthernetPauseModeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class IPInterfaceAddressingTypeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class IGMPSnoopingModeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class DNSTypeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class IpPppoeConnectionTypeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class PPPUserConnectionRequestValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class PPPAuthenticationProtocolValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class PPPEncryptionProtocolValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class PPPCompressionProtocolValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class WANPppConnectionStatusValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class WANPppLastConnectionErrorValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANRateLimitBurstSizeValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANRateLimitDirectionValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANEthernetAclValues(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class LANEthernetIpProtocolValues(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("igmp", 4), ("any", 5))

lanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1), )
if mibBuilder.loadTexts: lanDeviceTable.setStatus('current')
lanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"))
if mibBuilder.loadTexts: lanDeviceEntry.setStatus('current')
lanDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lanDeviceIndex.setStatus('current')
lanEthernetInterfaceNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanEthernetInterfaceNumberOfEntries.setStatus('current')
lanUSBInterfaceNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanUSBInterfaceNumberOfEntries.setStatus('current')
lanWLANConfigurationNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanWLANConfigurationNumberOfEntries.setStatus('current')
lanMocaInterfaceNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanMocaInterfaceNumberOfEntries.setStatus('current')
igmpSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 2), )
if mibBuilder.loadTexts: igmpSnoopingCfgTable.setStatus('current')
igmpSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 2, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"))
if mibBuilder.loadTexts: igmpSnoopingCfgEntry.setStatus('current')
igmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpEnable.setStatus('current')
igmpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 2, 1, 2), IGMPSnoopingModeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMode.setStatus('current')
igmpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpIfName.setStatus('current')
lanHostConfigManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3))
lanHostConfigManagementTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1), )
if mibBuilder.loadTexts: lanHostConfigManagementTable.setStatus('current')
lanHostConfigManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"))
if mibBuilder.loadTexts: lanHostConfigManagementEntry.setStatus('current')
dhcpServerConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerConfigurable.setStatus('current')
zhnDhcpServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnDhcpServerEnable.setStatus('current')
dhcpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelay.setStatus('current')
dhcpRelayServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServer.setStatus('current')
minAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minAddress.setStatus('current')
maxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxAddress.setStatus('current')
reservedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservedAddresses.setStatus('current')
subnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
dnsServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServers.setStatus('current')
domainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainName.setStatus('current')
ipRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouters.setStatus('current')
dhcpLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLeaseTime.setStatus('current')
ipInterfaceNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceNumberOfEntries.setStatus('current')
ipInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2))
zhnIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1), )
if mibBuilder.loadTexts: zhnIpInterfaceTable.setStatus('current')
zhnIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "ipInterfaceIndex"))
if mibBuilder.loadTexts: zhnIpInterfaceEntry.setStatus('current')
ipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ipInterfaceIndex.setStatus('current')
ipInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceEnable.setStatus('current')
ipInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceIPAddress.setStatus('current')
ipInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setStatus('current')
ipInterfaceAddressingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 5), IPInterfaceAddressingTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceAddressingType.setStatus('current')
ipInterfaceifName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceifName.setStatus('current')
firewallEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallEnabled.setStatus('current')
defaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
natEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natEnabled.setStatus('current')
dhcpcPid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpcPid.setStatus('current')
dnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 11), DNSTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsType.setStatus('current')
primaryDnsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryDnsIPAddress.setStatus('current')
secondaryDnsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondaryDnsIPAddress.setStatus('current')
zhnVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 14), VlanTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnVlanType.setStatus('current')
connectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 15), IpPppoeConnectionTypeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionType.setStatus('current')
maxMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxMTUSize.setStatus('current')
alternateWanIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alternateWanIfName.setStatus('current')
naptEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: naptEnabled.setStatus('current')
pppoeConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2))
pppoeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: pppoeConfigTable.setStatus('current')
pppoeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "ipInterfaceIndex"))
if mibBuilder.loadTexts: pppoeConfigEntry.setStatus('current')
pppoeIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoeIfName.setStatus('current')
pid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pid.setStatus('current')
connectionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 3), PPPUserConnectionRequestValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionRequest.setStatus('current')
username = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: username.setStatus('current')
password = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('current')
authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 6), PPPAuthenticationProtocolValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authentication.setStatus('current')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceName.setStatus('current')
encryptionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 8), PPPEncryptionProtocolValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryptionProtocol.setStatus('current')
compressionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 9), PPPCompressionProtocolValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compressionProtocol.setStatus('current')
idleDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleDisconnectTime.setStatus('current')
holdOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: holdOffTime.setStatus('current')
useStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useStaticIpAddress.setStatus('current')
staticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIpAddress.setStatus('current')
enableDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDebug.setStatus('current')
pppoeStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3))
pppoeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: pppoeStatusTable.setStatus('current')
pppoeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "ipInterfaceIndex"))
if mibBuilder.loadTexts: pppoeStatusEntry.setStatus('current')
connectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1, 1), WANPppConnectionStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionStatus.setStatus('current')
lastConnectionError = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1, 2), WANPppLastConnectionErrorValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastConnectionError.setStatus('current')
connectionEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionEstablishedTime.setStatus('current')
currentMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMTUSize.setStatus('current')
uptime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 2, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
zhnDhcpConditionalServingPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3))
zhnDhcpConditionalServingPoolTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1), )
if mibBuilder.loadTexts: zhnDhcpConditionalServingPoolTable.setStatus('current')
zhnDhcpConditionalServingPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "dhcpPoolIndex"))
if mibBuilder.loadTexts: zhnDhcpConditionalServingPoolEntry.setStatus('current')
dhcpPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dhcpPoolIndex.setStatus('current')
dhcpPoolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPoolEnable.setStatus('current')
dhcpPoolChaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolChaddr.setStatus('current')
dhcpPoolChaddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolChaddrMask.setStatus('current')
dhcpPoolMinAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolMinAddress.setStatus('current')
dhcpPoolMaxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolMaxAddress.setStatus('current')
dhcpPoolReservedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolReservedAddresses.setStatus('current')
dhcpPoolSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolSubnetMask.setStatus('current')
dhcpPoolDnsServers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolDnsServers.setStatus('current')
dhcpPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolDomainName.setStatus('current')
dhcpPoolIPRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolIPRouters.setStatus('current')
dhcpPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolLeaseTime.setStatus('current')
dhcpPoolUseWanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolUseWanVlan.setStatus('current')
dhcpPoolEnableStaticLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolEnableStaticLease.setStatus('current')
dhcpPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 3, 3, 1, 1, 15), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolRowStatus.setStatus('current')
zhnLANEthernetInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4))
lanEthernetInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1), )
if mibBuilder.loadTexts: lanEthernetInterfaceConfigTable.setStatus('current')
lanEthernetInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "lanEthernetIndex"))
if mibBuilder.loadTexts: lanEthernetInterfaceConfigEntry.setStatus('current')
lanEthernetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lanEthernetIndex.setStatus('current')
lanEthernetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanEthernetEnable.setStatus('current')
lanEthernetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 3), LANEthernetStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanEthernetStatus.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
macAddressControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddressControlEnabled.setStatus('current')
maxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 6), LANEthernetMaxBitRateValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBitRate.setStatus('current')
duplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 7), LANEthernetDuplexModeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplexMode.setStatus('current')
zhnIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnIfName.setStatus('current')
zhnEthernetPriorityMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnEthernetPriorityMark.setStatus('current')
dot1qPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPvid.setStatus('current')
lanEthernetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanEthernetAlias.setStatus('current')
pauseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 12), LANEthernetPauseModeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMode.setStatus('current')
lanEthernetAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 13), LANEthernetAclValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanEthernetAcl.setStatus('current')
lanEthernetAclRulesNumberofEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanEthernetAclRulesNumberofEntries.setStatus('current')
lanEthernetLanFollowsWan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanEthernetLanFollowsWan.setStatus('current')
lanEthernetIgmpPriorityMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanEthernetIgmpPriorityMark.setStatus('current')
lanEthernetIgmpPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanEthernetIgmpPvid.setStatus('current')
lanEthIntfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2), )
if mibBuilder.loadTexts: lanEthIntfStatisticsTable.setStatus('current')
lanEthIntfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "lanEthernetIndex"))
if mibBuilder.loadTexts: lanEthIntfStatisticsEntry.setStatus('current')
bytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesSent.setStatus('current')
bytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bytesReceived.setStatus('current')
packetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsSent.setStatus('current')
packetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: packetsReceived.setStatus('current')
txErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txErrors.setStatus('current')
rxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxErrors.setStatus('current')
txDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDrops.setStatus('current')
rxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDrops.setStatus('current')
lanEthIntfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3), )
if mibBuilder.loadTexts: lanEthIntfStatusTable.setStatus('current')
lanEthIntfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "lanEthernetIndex"))
if mibBuilder.loadTexts: lanEthIntfStatusEntry.setStatus('current')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3, 1, 1), LANEthernetStatusValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
rateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3, 1, 2), LANEthernetMaxBitRateValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateStatus.setStatus('current')
duplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3, 1, 3), LANEthernetDuplexModeValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duplexStatus.setStatus('current')
pauseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 3, 1, 4), LANEthernetPauseModeValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseStatus.setStatus('current')
lanEthIntfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4), )
if mibBuilder.loadTexts: lanEthIntfRateLimitTable.setStatus('current')
lanEthIntfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "lanEthernetIndex"))
if mibBuilder.loadTexts: lanEthIntfRateLimitEntry.setStatus('current')
rateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateLimitEnable.setStatus('current')
peakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peakRate.setStatus('current')
burstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1, 3), LANRateLimitBurstSizeValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: burstSize.setStatus('current')
rateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1, 4), LANRateLimitDirectionValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rateDirection.setStatus('current')
inboundPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inboundPeakRate.setStatus('current')
igmpGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5), )
if mibBuilder.loadTexts: igmpGroupsTable.setStatus('current')
igmpGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1), ).setIndexNames((0, "ZHNLANDEVICE", "igmpGroupIndex"))
if mibBuilder.loadTexts: igmpGroupsEntry.setStatus('current')
igmpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpGroupIndex.setStatus('current')
igmpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupAddress.setStatus('current')
igmpGroupReporterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupReporterIP.setStatus('current')
igmpGroupReporterMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupReporterMAC.setStatus('current')
igmpGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupInterface.setStatus('current')
igmpGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupVlan.setStatus('current')
igmpGroupExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupExpiration.setStatus('current')
igmpGroupQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupQuerier.setStatus('current')
zhnLANDeviceSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 6))
lanDefaultIfName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDefaultIfName.setStatus('current')
lanDefaultIfIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 6, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanDefaultIfIpAddress.setStatus('current')
lanEthAclRulesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7), )
if mibBuilder.loadTexts: lanEthAclRulesTable.setStatus('current')
lanEthAclRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1), ).setIndexNames((0, "ZHNLANDEVICE", "lanDeviceIndex"), (0, "ZHNLANDEVICE", "lanEthernetIndex"), (0, "ZHNLANDEVICE", "lanAclRuleKey"))
if mibBuilder.loadTexts: lanEthAclRulesEntry.setStatus('current')
lanAclRuleKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lanAclRuleKey.setStatus('current')
lanAclRuleIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanAclRuleIfName.setStatus('current')
lanAclRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleName.setStatus('current')
lanAclRuleSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleSourceIPAddress.setStatus('current')
lanAclRuleIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 5), LANEthernetIpProtocolValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleIPProtocol.setStatus('current')
lanAclRuleSourceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleSourceMACAddress.setStatus('current')
lanAclRuleSourceMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleSourceMACMask.setStatus('current')
lanAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 1, 7, 1, 8), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanAclRuleRowStatus.setStatus('current')
zhnLANDeviceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2))
zhnLANDeviceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1))
zhnLANDeviceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 2))
zhnLANDeviceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 2, 1)).setObjects(("ZHNLANDEVICE", "zhnLANDeviceGroup"), ("ZHNLANDEVICE", "zhnLANHostConfigManagementGroup"), ("ZHNLANDEVICE", "zhnIpInterfaceGroup"), ("ZHNLANDEVICE", "zhnLANEthernetInterfaceConfigGroup"), ("ZHNLANDEVICE", "zhnLANEthIntfStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANDeviceCompliance = zhnLANDeviceCompliance.setStatus('current')
zhnLANDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 1)).setObjects(("ZHNLANDEVICE", "lanEthernetInterfaceNumberOfEntries"), ("ZHNLANDEVICE", "lanUSBInterfaceNumberOfEntries"), ("ZHNLANDEVICE", "lanWLANConfigurationNumberOfEntries"), ("ZHNLANDEVICE", "lanMocaInterfaceNumberOfEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANDeviceGroup = zhnLANDeviceGroup.setStatus('current')
zhnLANIgmpSnoopingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 2)).setObjects(("ZHNLANDEVICE", "igmpEnable"), ("ZHNLANDEVICE", "igmpMode"), ("ZHNLANDEVICE", "igmpIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANIgmpSnoopingGroup = zhnLANIgmpSnoopingGroup.setStatus('current')
zhnLANHostConfigManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 3)).setObjects(("ZHNLANDEVICE", "dhcpServerConfigurable"), ("ZHNLANDEVICE", "zhnDhcpServerEnable"), ("ZHNLANDEVICE", "dhcpRelay"), ("ZHNLANDEVICE", "dhcpRelayServer"), ("ZHNLANDEVICE", "minAddress"), ("ZHNLANDEVICE", "maxAddress"), ("ZHNLANDEVICE", "reservedAddresses"), ("ZHNLANDEVICE", "subnetMask"), ("ZHNLANDEVICE", "dnsServers"), ("ZHNLANDEVICE", "domainName"), ("ZHNLANDEVICE", "ipRouters"), ("ZHNLANDEVICE", "dhcpLeaseTime"), ("ZHNLANDEVICE", "ipInterfaceNumberOfEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANHostConfigManagementGroup = zhnLANHostConfigManagementGroup.setStatus('current')
zhnIpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 4)).setObjects(("ZHNLANDEVICE", "ipInterfaceEnable"), ("ZHNLANDEVICE", "ipInterfaceIPAddress"), ("ZHNLANDEVICE", "ipInterfaceSubnetMask"), ("ZHNLANDEVICE", "ipInterfaceAddressingType"), ("ZHNLANDEVICE", "ipInterfaceifName"), ("ZHNLANDEVICE", "firewallEnabled"), ("ZHNLANDEVICE", "defaultGateway"), ("ZHNLANDEVICE", "natEnabled"), ("ZHNLANDEVICE", "dhcpcPid"), ("ZHNLANDEVICE", "dnsType"), ("ZHNLANDEVICE", "primaryDnsIPAddress"), ("ZHNLANDEVICE", "secondaryDnsIPAddress"), ("ZHNLANDEVICE", "zhnVlanType"), ("ZHNLANDEVICE", "connectionType"), ("ZHNLANDEVICE", "maxMTUSize"), ("ZHNLANDEVICE", "alternateWanIfName"), ("ZHNLANDEVICE", "natEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnIpInterfaceGroup = zhnIpInterfaceGroup.setStatus('current')
zhnPPPoEConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 5)).setObjects(("ZHNLANDEVICE", "pppoeIfName"), ("ZHNLANDEVICE", "pid"), ("ZHNLANDEVICE", "connectionRequest"), ("ZHNLANDEVICE", "username"), ("ZHNLANDEVICE", "password"), ("ZHNLANDEVICE", "authentication"), ("ZHNLANDEVICE", "serviceName"), ("ZHNLANDEVICE", "encryptionProtocol"), ("ZHNLANDEVICE", "compressionProtocol"), ("ZHNLANDEVICE", "idleDisconnectTime"), ("ZHNLANDEVICE", "holdOffTime"), ("ZHNLANDEVICE", "useStaticIpAddress"), ("ZHNLANDEVICE", "staticIpAddress"), ("ZHNLANDEVICE", "enableDebug"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPPPoEConfigGroup = zhnPPPoEConfigGroup.setStatus('current')
zhnPPPoEStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 6)).setObjects(("ZHNLANDEVICE", "connectionStatus"), ("ZHNLANDEVICE", "lastConnectionError"), ("ZHNLANDEVICE", "connectionEstablishedTime"), ("ZHNLANDEVICE", "currentMTUSize"), ("ZHNLANDEVICE", "uptime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPPPoEStatusGroup = zhnPPPoEStatusGroup.setStatus('current')
zhnLANEthernetInterfaceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 7)).setObjects(("ZHNLANDEVICE", "lanEthernetEnable"), ("ZHNLANDEVICE", "lanEthernetStatus"), ("ZHNLANDEVICE", "macAddress"), ("ZHNLANDEVICE", "macAddressControlEnabled"), ("ZHNLANDEVICE", "maxBitRate"), ("ZHNLANDEVICE", "duplexMode"), ("ZHNLANDEVICE", "zhnIfName"), ("ZHNLANDEVICE", "zhnEthernetPriorityMark"), ("ZHNLANDEVICE", "dot1qPvid"), ("ZHNLANDEVICE", "lanEthernetAlias"), ("ZHNLANDEVICE", "pauseMode"), ("ZHNLANDEVICE", "lanEthernetAcl"), ("ZHNLANDEVICE", "lanEthernetAclRulesNumberofEntries"), ("ZHNLANDEVICE", "lanEthernetLanFollowsWan"), ("ZHNLANDEVICE", "lanEthernetIgmpPriorityMark"), ("ZHNLANDEVICE", "lanEthernetIgmpPvid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANEthernetInterfaceConfigGroup = zhnLANEthernetInterfaceConfigGroup.setStatus('current')
zhnLANEthIntfStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 8)).setObjects(("ZHNLANDEVICE", "bytesSent"), ("ZHNLANDEVICE", "bytesReceived"), ("ZHNLANDEVICE", "packetsSent"), ("ZHNLANDEVICE", "packetsReceived"), ("ZHNLANDEVICE", "txErrors"), ("ZHNLANDEVICE", "rxErrors"), ("ZHNLANDEVICE", "txDrops"), ("ZHNLANDEVICE", "rxDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANEthIntfStatisticsGroup = zhnLANEthIntfStatisticsGroup.setStatus('current')
zhnLANEthIntfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 9)).setObjects(("ZHNLANDEVICE", "linkStatus"), ("ZHNLANDEVICE", "rateStatus"), ("ZHNLANDEVICE", "duplexStatus"), ("ZHNLANDEVICE", "pauseStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANEthIntfStatusGroup = zhnLANEthIntfStatusGroup.setStatus('current')
zhnLANEthIntfRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 10)).setObjects(("ZHNLANDEVICE", "rateLimitEnable"), ("ZHNLANDEVICE", "peakRate"), ("ZHNLANDEVICE", "burstSize"), ("ZHNLANDEVICE", "rateDirection"), ("ZHNLANDEVICE", "inboundPeakRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANEthIntfRateLimitGroup = zhnLANEthIntfRateLimitGroup.setStatus('current')
zhnLANIGMPMulticastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 11)).setObjects(("ZHNLANDEVICE", "igmpGroupAddress"), ("ZHNLANDEVICE", "igmpGroupReporterIP"), ("ZHNLANDEVICE", "igmpGroupReporterMAC"), ("ZHNLANDEVICE", "igmpGroupInterface"), ("ZHNLANDEVICE", "igmpGroupVlan"), ("ZHNLANDEVICE", "igmpGroupExpiration"), ("ZHNLANDEVICE", "igmpGroupQuerier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANIGMPMulticastGroup = zhnLANIGMPMulticastGroup.setStatus('current')
zhnLANSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 12)).setObjects(("ZHNLANDEVICE", "lanDefaultIfName"), ("ZHNLANDEVICE", "lanDefaultIfIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANSystemGroup = zhnLANSystemGroup.setStatus('current')
zhnLANAclRulesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 13)).setObjects(("ZHNLANDEVICE", "lanAclRuleIfName"), ("ZHNLANDEVICE", "lanAclRuleName"), ("ZHNLANDEVICE", "lanAclRuleSourceIPAddress"), ("ZHNLANDEVICE", "lanAclRuleIPProtocol"), ("ZHNLANDEVICE", "lanAclRuleSourceMACAddress"), ("ZHNLANDEVICE", "lanAclRuleSourceMACMask"), ("ZHNLANDEVICE", "lanAclRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnLANAclRulesGroup = zhnLANAclRulesGroup.setStatus('current')
zhnDhcpConditionalServingPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 41, 2, 1, 14)).setObjects(("ZHNLANDEVICE", "dhcpPoolIndex"), ("ZHNLANDEVICE", "dhcpPoolEnable"), ("ZHNLANDEVICE", "dhcpPoolChaddr"), ("ZHNLANDEVICE", "dhcpPoolChaddrMask"), ("ZHNLANDEVICE", "dhcpPoolMinAddress"), ("ZHNLANDEVICE", "dhcpPoolMaxAddress"), ("ZHNLANDEVICE", "dhcpPoolReservedAddresses"), ("ZHNLANDEVICE", "dhcpPoolSubnetMask"), ("ZHNLANDEVICE", "dhcpPoolDnsServers"), ("ZHNLANDEVICE", "dhcpPoolDomainName"), ("ZHNLANDEVICE", "dhcpPoolIPRouters"), ("ZHNLANDEVICE", "dhcpPoolLeaseTime"), ("ZHNLANDEVICE", "dhcpPoolUseWanVlan"), ("ZHNLANDEVICE", "dhcpPoolEnableStaticLease"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnDhcpConditionalServingPoolGroup = zhnDhcpConditionalServingPoolGroup.setStatus('current')
mibBuilder.exportSymbols("ZHNLANDEVICE", zhnVlanType=zhnVlanType, dot1qPvid=dot1qPvid, igmpGroupReporterIP=igmpGroupReporterIP, LANEthernetDuplexModeValues=LANEthernetDuplexModeValues, igmpGroupQuerier=igmpGroupQuerier, pppoeConfigObjects=pppoeConfigObjects, dhcpPoolRowStatus=dhcpPoolRowStatus, dhcpPoolLeaseTime=dhcpPoolLeaseTime, lanEthernetIgmpPvid=lanEthernetIgmpPvid, dhcpPoolChaddr=dhcpPoolChaddr, currentMTUSize=currentMTUSize, enableDebug=enableDebug, IpPppoeConnectionTypeValues=IpPppoeConnectionTypeValues, burstSize=burstSize, packetsSent=packetsSent, zhnLANEthernetInterfaceConfigGroup=zhnLANEthernetInterfaceConfigGroup, lanEthAclRulesEntry=lanEthAclRulesEntry, rateLimitEnable=rateLimitEnable, LANRateLimitBurstSizeValues=LANRateLimitBurstSizeValues, lanEthernetAlias=lanEthernetAlias, lanHostConfigManagementTable=lanHostConfigManagementTable, PPPCompressionProtocolValues=PPPCompressionProtocolValues, pppoeStatusObjects=pppoeStatusObjects, rxDrops=rxDrops, bytesReceived=bytesReceived, rateDirection=rateDirection, zhnDhcpConditionalServingPoolTable=zhnDhcpConditionalServingPoolTable, igmpGroupsTable=igmpGroupsTable, defaultGateway=defaultGateway, connectionEstablishedTime=connectionEstablishedTime, bytesSent=bytesSent, pppoeIfName=pppoeIfName, igmpGroupsEntry=igmpGroupsEntry, rateStatus=rateStatus, zhnEthernetPriorityMark=zhnEthernetPriorityMark, idleDisconnectTime=idleDisconnectTime, lanEthernetAclRulesNumberofEntries=lanEthernetAclRulesNumberofEntries, zhnDhcpServerEnable=zhnDhcpServerEnable, zhnLANDeviceGroup=zhnLANDeviceGroup, lanMocaInterfaceNumberOfEntries=lanMocaInterfaceNumberOfEntries, naptEnabled=naptEnabled, igmpMode=igmpMode, dhcpRelay=dhcpRelay, packetsReceived=packetsReceived, pauseStatus=pauseStatus, igmpGroupReporterMAC=igmpGroupReporterMAC, lanDeviceTable=lanDeviceTable, zhnLANDevice=zhnLANDevice, lanAclRuleIPProtocol=lanAclRuleIPProtocol, lanEthIntfRateLimitTable=lanEthIntfRateLimitTable, lanEthernetStatus=lanEthernetStatus, dhcpServerConfigurable=dhcpServerConfigurable, lanAclRuleRowStatus=lanAclRuleRowStatus, zhnLANIgmpSnoopingGroup=zhnLANIgmpSnoopingGroup, lanEthIntfRateLimitEntry=lanEthIntfRateLimitEntry, zhnLANHostConfigManagementGroup=zhnLANHostConfigManagementGroup, zhnLANAclRulesGroup=zhnLANAclRulesGroup, zhnIpInterfaceTable=zhnIpInterfaceTable, encryptionProtocol=encryptionProtocol, lanUSBInterfaceNumberOfEntries=lanUSBInterfaceNumberOfEntries, subnetMask=subnetMask, connectionStatus=connectionStatus, zhnIpInterfaceGroup=zhnIpInterfaceGroup, igmpEnable=igmpEnable, zhnLANDeviceCompliances=zhnLANDeviceCompliances, dhcpRelayServer=dhcpRelayServer, LANEthernetAclValues=LANEthernetAclValues, peakRate=peakRate, zhnIfName=zhnIfName, IGMPSnoopingModeValues=IGMPSnoopingModeValues, igmpGroupExpiration=igmpGroupExpiration, lanEthernetAcl=lanEthernetAcl, lanAclRuleSourceMACMask=lanAclRuleSourceMACMask, lanDefaultIfIpAddress=lanDefaultIfIpAddress, firewallEnabled=firewallEnabled, ipInterfaceIPAddress=ipInterfaceIPAddress, duplexStatus=duplexStatus, txDrops=txDrops, ipRouters=ipRouters, lanHostConfigManagementObjects=lanHostConfigManagementObjects, lanEthIntfStatisticsTable=lanEthIntfStatisticsTable, lanDeviceEntry=lanDeviceEntry, dhcpPoolMaxAddress=dhcpPoolMaxAddress, dhcpPoolDomainName=dhcpPoolDomainName, igmpGroupAddress=igmpGroupAddress, PPPUserConnectionRequestValues=PPPUserConnectionRequestValues, maxBitRate=maxBitRate, dnsType=dnsType, igmpGroupVlan=igmpGroupVlan, pppoeConfigEntry=pppoeConfigEntry, zhnLANEthernetInterfaceObjects=zhnLANEthernetInterfaceObjects, lanAclRuleIfName=lanAclRuleIfName, ipInterfaceSubnetMask=ipInterfaceSubnetMask, lanAclRuleKey=lanAclRuleKey, dhcpPoolEnableStaticLease=dhcpPoolEnableStaticLease, igmpIfName=igmpIfName, dhcpPoolIPRouters=dhcpPoolIPRouters, lanEthernetIgmpPriorityMark=lanEthernetIgmpPriorityMark, lanEthernetInterfaceConfigEntry=lanEthernetInterfaceConfigEntry, lanAclRuleSourceMACAddress=lanAclRuleSourceMACAddress, lanEthIntfStatusTable=lanEthIntfStatusTable, LANEthernetIpProtocolValues=LANEthernetIpProtocolValues, LANRateLimitDirectionValues=LANRateLimitDirectionValues, authentication=authentication, lanEthernetInterfaceNumberOfEntries=lanEthernetInterfaceNumberOfEntries, maxAddress=maxAddress, PPPAuthenticationProtocolValues=PPPAuthenticationProtocolValues, pid=pid, lastConnectionError=lastConnectionError, lanEthIntfStatisticsEntry=lanEthIntfStatisticsEntry, dhcpPoolUseWanVlan=dhcpPoolUseWanVlan, uptime=uptime, ipInterfaceIndex=ipInterfaceIndex, LANEthernetPauseModeValues=LANEthernetPauseModeValues, lanAclRuleName=lanAclRuleName, dhcpPoolDnsServers=dhcpPoolDnsServers, PYSNMP_MODULE_ID=zhnLANDevice, igmpSnoopingCfgEntry=igmpSnoopingCfgEntry, staticIpAddress=staticIpAddress, zhnPPPoEStatusGroup=zhnPPPoEStatusGroup, LANEthernetMaxBitRateValues=LANEthernetMaxBitRateValues, serviceName=serviceName, reservedAddresses=reservedAddresses, lanEthernetLanFollowsWan=lanEthernetLanFollowsWan, username=username, zhnLANEthIntfStatusGroup=zhnLANEthIntfStatusGroup, secondaryDnsIPAddress=secondaryDnsIPAddress, zhnLANEthIntfRateLimitGroup=zhnLANEthIntfRateLimitGroup, duplexMode=duplexMode, PPPEncryptionProtocolValues=PPPEncryptionProtocolValues, dhcpPoolSubnetMask=dhcpPoolSubnetMask, maxMTUSize=maxMTUSize, useStaticIpAddress=useStaticIpAddress, dhcpPoolEnable=dhcpPoolEnable, zhnDhcpConditionalServingPoolGroup=zhnDhcpConditionalServingPoolGroup, WANPppConnectionStatusValues=WANPppConnectionStatusValues, lanDeviceIndex=lanDeviceIndex, zhnLANDeviceCompliance=zhnLANDeviceCompliance, inboundPeakRate=inboundPeakRate, txErrors=txErrors, macAddress=macAddress, primaryDnsIPAddress=primaryDnsIPAddress, zhnIpInterfaceEntry=zhnIpInterfaceEntry, rxErrors=rxErrors, lanWLANConfigurationNumberOfEntries=lanWLANConfigurationNumberOfEntries, lanDefaultIfName=lanDefaultIfName, password=password, zhnPPPoEConfigGroup=zhnPPPoEConfigGroup, dhcpLeaseTime=dhcpLeaseTime, zhnLANDeviceObjects=zhnLANDeviceObjects, IPInterfaceAddressingTypeValues=IPInterfaceAddressingTypeValues, pppoeConfigTable=pppoeConfigTable, zhnDhcpConditionalServingPoolObjects=zhnDhcpConditionalServingPoolObjects, lanEthernetEnable=lanEthernetEnable, ipInterfaceObjects=ipInterfaceObjects, dhcpPoolIndex=dhcpPoolIndex, natEnabled=natEnabled, pppoeStatusTable=pppoeStatusTable, alternateWanIfName=alternateWanIfName, lanEthIntfStatusEntry=lanEthIntfStatusEntry, dhcpPoolMinAddress=dhcpPoolMinAddress, zhnLANDeviceConformance=zhnLANDeviceConformance, DNSTypeValues=DNSTypeValues, igmpGroupInterface=igmpGroupInterface, lanEthernetInterfaceConfigTable=lanEthernetInterfaceConfigTable, holdOffTime=holdOffTime, domainName=domainName, dhcpPoolReservedAddresses=dhcpPoolReservedAddresses, zhnDhcpConditionalServingPoolEntry=zhnDhcpConditionalServingPoolEntry, ipInterfaceEnable=ipInterfaceEnable, LANEthernetStatusValues=LANEthernetStatusValues, zhnLANSystemGroup=zhnLANSystemGroup, lanEthernetIndex=lanEthernetIndex, connectionType=connectionType, dhcpPoolChaddrMask=dhcpPoolChaddrMask, linkStatus=linkStatus, zhnLANIGMPMulticastGroup=zhnLANIGMPMulticastGroup, dnsServers=dnsServers, lanAclRuleSourceIPAddress=lanAclRuleSourceIPAddress, ipInterfaceifName=ipInterfaceifName, dhcpcPid=dhcpcPid, lanEthAclRulesTable=lanEthAclRulesTable, pppoeStatusEntry=pppoeStatusEntry, connectionRequest=connectionRequest, zhnLANDeviceGroups=zhnLANDeviceGroups, macAddressControlEnabled=macAddressControlEnabled, WANPppLastConnectionErrorValues=WANPppLastConnectionErrorValues, igmpSnoopingCfgTable=igmpSnoopingCfgTable, minAddress=minAddress, ipInterfaceNumberOfEntries=ipInterfaceNumberOfEntries, zhnLANEthIntfStatisticsGroup=zhnLANEthIntfStatisticsGroup, compressionProtocol=compressionProtocol, ipInterfaceAddressingType=ipInterfaceAddressingType, igmpGroupIndex=igmpGroupIndex, lanHostConfigManagementEntry=lanHostConfigManagementEntry, zhnLANDeviceSystemObjects=zhnLANDeviceSystemObjects, pauseMode=pauseMode)
