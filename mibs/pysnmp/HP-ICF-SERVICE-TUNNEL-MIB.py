#
# PySNMP MIB module HP-ICF-SERVICE-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-SERVICE-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:22:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifAlias, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAlias", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter32, Gauge32, TimeTicks, Counter64, MibIdentifier, iso, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter32", "Gauge32", "TimeTicks", "Counter64", "MibIdentifier", "iso", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
tunnelInetConfigEntry, tunnelIfEntry = mibBuilder.importSymbols("TUNNEL-MIB", "tunnelInetConfigEntry", "tunnelIfEntry")
hpicfServiceTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100))
hpicfServiceTunnel.setRevisions(('2014-06-17 00:00', '2013-06-13 00:00',))
if mibBuilder.loadTexts: hpicfServiceTunnel.setLastUpdated('201406170000Z')
if mibBuilder.loadTexts: hpicfServiceTunnel.setOrganization('HP Networking')
hpicfServiceTunnelNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 0))
hpicfServiceTunnelConfigurationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1))
hpicfServiceTunnelStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2))
hpicfServiceTunnelConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3))
hpicfServiceTunnelScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1))
hpicfServiceTunnelScalarStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1))
hpicfMaxIPv4ServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMaxIPv4ServiceTunnels.setStatus('current')
hpicfTotalIPv4ServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTotalIPv4ServiceTunnels.setStatus('current')
hpicfMaxInterceptServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMaxInterceptServiceTunnels.setStatus('current')
hpicfTotalIPv4InterceptServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTotalIPv4InterceptServiceTunnels.setStatus('current')
hpicfMaxIPv4TapServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMaxIPv4TapServiceTunnels.setStatus('current')
hpicfTotalIPv4TapServiceTunnels = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfTotalIPv4TapServiceTunnels.setStatus('current')
hpicfServiceTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 2), )
if mibBuilder.loadTexts: hpicfServiceTunnelTable.setStatus('current')
hpicfServiceTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 2, 1), )
tunnelInetConfigEntry.registerAugmentions(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelEntry"))
hpicfServiceTunnelEntry.setIndexNames(*tunnelInetConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfServiceTunnelEntry.setStatus('current')
hpicfServiceTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("intercept", 1), ("tap", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfServiceTunnelType.setStatus('current')
hpicfServiceTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfServiceTunnelName.setStatus('current')
hpicfServiceTunnelIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3), )
if mibBuilder.loadTexts: hpicfServiceTunnelIfTable.setStatus('current')
hpicfServiceTunnelIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3, 1), )
tunnelIfEntry.registerAugmentions(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelIfEntry"))
hpicfServiceTunnelIfEntry.setIndexNames(*tunnelIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfServiceTunnelIfEntry.setStatus('current')
hpicfServiceTunnelIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfServiceTunnelIfMTU.setStatus('current')
hpicfServiceTunnelInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelInterfaceStatus.setStatus('current')
hpicfServiceTunnelInterfaceDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("resourceUnavailable", 1), ("noRouteToDestination", 2), ("ifAdminDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelInterfaceDownReason.setStatus('current')
hpicfServiceTunnelInterfaceTruncate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfServiceTunnelInterfaceTruncate.setStatus('current')
hpicfServiceTunnelStatsRxInvalidKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsRxInvalidKey.setStatus('current')
hpicfServiceTunnelStatsRxFragmentDrops = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsRxFragmentDrops.setStatus('current')
hpicfServiceTunnelStatsTxMTUViolationDrop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsTxMTUViolationDrop.setStatus('current')
hpicfServiceTunnelStatsUnknownSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsUnknownSrcMac.setStatus('current')
hpicfServiceTunnelStatsScalarClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsScalarClear.setStatus('current')
hpicfServiceTunnelStatsIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2), )
if mibBuilder.loadTexts: hpicfServiceTunnelStatsIfTable.setStatus('current')
hpicfServiceTunnelStatsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1), )
tunnelIfEntry.registerAugmentions(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsIfEntry"))
hpicfServiceTunnelStatsIfEntry.setIndexNames(*tunnelIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfServiceTunnelStatsIfEntry.setStatus('current')
hpicfServiceTunnelStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsRxPackets.setStatus('current')
hpicfServiceTunnelStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsTxPackets.setStatus('current')
hpicfServiceTunnelStatsRxHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsRxHeartbeat.setStatus('current')
hpicfServiceTunnelStatsTxHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsTxHeartbeat.setStatus('current')
hpicfServiceTunnelLastHeartbeatPacketTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfServiceTunnelLastHeartbeatPacketTimestamp.setStatus('current')
hpicfServiceTunnelStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 2, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfServiceTunnelStatsClear.setStatus('current')
hpicfServiceTunnelIfUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: hpicfServiceTunnelIfUp.setStatus('current')
hpicfServiceTunnelIfDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAlias"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceDownReason"))
if mibBuilder.loadTexts: hpicfServiceTunnelIfDown.setStatus('current')
hpicfServiceTunnelCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 1))
hpicfServiceTunnelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2))
hpicfServiceTunnelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 1, 1)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceScalarsGroup"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceScalarsStatsGroup"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelGroup"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsGroup"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelNotificationGroup"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceScalarsGroup1"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceTunnelCompliance = hpicfServiceTunnelCompliance.setStatus('current')
hpicfServiceScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 1)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfMaxIPv4ServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfTotalIPv4ServiceTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceScalarsGroup = hpicfServiceScalarsGroup.setStatus('current')
hpicfServiceScalarsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 6)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfMaxIPv4ServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfTotalIPv4ServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfMaxInterceptServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfTotalIPv4InterceptServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfMaxIPv4TapServiceTunnels"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfTotalIPv4TapServiceTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceScalarsGroup1 = hpicfServiceScalarsGroup1.setStatus('current')
hpicfServiceScalarsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 2)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsRxInvalidKey"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsRxFragmentDrops"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsTxMTUViolationDrop"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsUnknownSrcMac"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsScalarClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceScalarsStatsGroup = hpicfServiceScalarsStatsGroup.setStatus('current')
hpicfServiceTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 3)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelType"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelName"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelIfMTU"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceStatus"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceTunnelGroup = hpicfServiceTunnelGroup.setStatus('current')
hpicfServiceTunnelGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 7)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelType"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelName"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelIfMTU"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceStatus"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceDownReason"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelInterfaceTruncate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceTunnelGroup1 = hpicfServiceTunnelGroup1.setStatus('current')
hpicfServiceTunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 4)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsRxPackets"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsTxPackets"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsRxHeartbeat"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsTxHeartbeat"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelLastHeartbeatPacketTimestamp"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceTunnelStatsGroup = hpicfServiceTunnelStatsGroup.setStatus('current')
hpicfServiceTunnelNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 100, 3, 2, 5)).setObjects(("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelIfUp"), ("HP-ICF-SERVICE-TUNNEL-MIB", "hpicfServiceTunnelIfDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfServiceTunnelNotificationGroup = hpicfServiceTunnelNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-SERVICE-TUNNEL-MIB", hpicfServiceTunnelStatisticsObjects=hpicfServiceTunnelStatisticsObjects, hpicfServiceTunnelStatsIfEntry=hpicfServiceTunnelStatsIfEntry, hpicfServiceTunnelGroup=hpicfServiceTunnelGroup, hpicfServiceTunnelStatsRxInvalidKey=hpicfServiceTunnelStatsRxInvalidKey, hpicfServiceScalarsGroup1=hpicfServiceScalarsGroup1, hpicfServiceTunnelIfUp=hpicfServiceTunnelIfUp, hpicfServiceTunnelConfigurationObjects=hpicfServiceTunnelConfigurationObjects, hpicfServiceTunnelNotifications=hpicfServiceTunnelNotifications, hpicfServiceTunnelTable=hpicfServiceTunnelTable, hpicfServiceTunnelStatsGroup=hpicfServiceTunnelStatsGroup, hpicfServiceTunnelStatsScalarClear=hpicfServiceTunnelStatsScalarClear, hpicfServiceTunnelInterfaceDownReason=hpicfServiceTunnelInterfaceDownReason, hpicfServiceTunnelType=hpicfServiceTunnelType, hpicfServiceTunnelIfMTU=hpicfServiceTunnelIfMTU, hpicfMaxIPv4TapServiceTunnels=hpicfMaxIPv4TapServiceTunnels, hpicfServiceTunnel=hpicfServiceTunnel, hpicfServiceTunnelEntry=hpicfServiceTunnelEntry, hpicfServiceTunnelCompliances=hpicfServiceTunnelCompliances, hpicfServiceTunnelStatsTxMTUViolationDrop=hpicfServiceTunnelStatsTxMTUViolationDrop, hpicfServiceTunnelStatsTxPackets=hpicfServiceTunnelStatsTxPackets, hpicfTotalIPv4ServiceTunnels=hpicfTotalIPv4ServiceTunnels, hpicfServiceTunnelScalarStats=hpicfServiceTunnelScalarStats, hpicfServiceTunnelGroup1=hpicfServiceTunnelGroup1, hpicfServiceTunnelStatsUnknownSrcMac=hpicfServiceTunnelStatsUnknownSrcMac, hpicfServiceTunnelGroups=hpicfServiceTunnelGroups, hpicfServiceTunnelName=hpicfServiceTunnelName, hpicfTotalIPv4InterceptServiceTunnels=hpicfTotalIPv4InterceptServiceTunnels, hpicfServiceTunnelStatsClear=hpicfServiceTunnelStatsClear, hpicfMaxInterceptServiceTunnels=hpicfMaxInterceptServiceTunnels, hpicfServiceTunnelIfEntry=hpicfServiceTunnelIfEntry, hpicfServiceTunnelStatsRxFragmentDrops=hpicfServiceTunnelStatsRxFragmentDrops, hpicfServiceScalarsGroup=hpicfServiceScalarsGroup, hpicfServiceTunnelInterfaceTruncate=hpicfServiceTunnelInterfaceTruncate, hpicfServiceScalarsStatsGroup=hpicfServiceScalarsStatsGroup, hpicfMaxIPv4ServiceTunnels=hpicfMaxIPv4ServiceTunnels, hpicfServiceTunnelIfTable=hpicfServiceTunnelIfTable, hpicfServiceTunnelLastHeartbeatPacketTimestamp=hpicfServiceTunnelLastHeartbeatPacketTimestamp, hpicfServiceTunnelScalars=hpicfServiceTunnelScalars, hpicfServiceTunnelConformance=hpicfServiceTunnelConformance, hpicfServiceTunnelStatsTxHeartbeat=hpicfServiceTunnelStatsTxHeartbeat, PYSNMP_MODULE_ID=hpicfServiceTunnel, hpicfServiceTunnelNotificationGroup=hpicfServiceTunnelNotificationGroup, hpicfServiceTunnelIfDown=hpicfServiceTunnelIfDown, hpicfTotalIPv4TapServiceTunnels=hpicfTotalIPv4TapServiceTunnels, hpicfServiceTunnelStatsIfTable=hpicfServiceTunnelStatsIfTable, hpicfServiceTunnelCompliance=hpicfServiceTunnelCompliance, hpicfServiceTunnelInterfaceStatus=hpicfServiceTunnelInterfaceStatus, hpicfServiceTunnelStatsRxHeartbeat=hpicfServiceTunnelStatsRxHeartbeat, hpicfServiceTunnelStatsRxPackets=hpicfServiceTunnelStatsRxPackets)
