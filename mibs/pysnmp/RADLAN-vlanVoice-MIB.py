#
# PySNMP MIB module RADLAN-vlanVoice-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-vlanVoice-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
VlanPriority, = mibBuilder.importSymbols("RADLAN-MIB", "VlanPriority")
vlan, = mibBuilder.importSymbols("RADLAN-vlan-MIB", "vlan")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, NotificationType, iso, MibIdentifier, Counter32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Gauge32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "NotificationType", "iso", "MibIdentifier", "Counter32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Gauge32", "ModuleIdentity", "Integer32")
DisplayString, TruthValue, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "TextualConvention", "RowStatus")
vlanVoice = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 48, 54))
vlanVoice.setRevisions(('2010-09-26 00:00', '2010-09-26 00:00',))
if mibBuilder.loadTexts: vlanVoice.setLastUpdated('201001090000Z')
if mibBuilder.loadTexts: vlanVoice.setOrganization('Marvell Computer Communications Ltd.')
vlanVoiceAdminState = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("auto-enabled", 1), ("auto-triggered", 2), ("oui-enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAdminState.setStatus('current')
vlanVoiceOperState = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("auto-enabled", 1), ("auto-triggered", 2), ("oui-enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOperState.setStatus('current')
vlanVoiceAdminVid = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAdminVid.setStatus('current')
vlanVoiceOperVid = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOperVid.setStatus('current')
vlanVoiceUcDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 54, 10), )
if mibBuilder.loadTexts: vlanVoiceUcDeviceTable.setStatus('current')
vlanVoiceUcDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1), ).setIndexNames((0, "RADLAN-vlanVoice-MIB", "vlanVoiceUcDeviceType"), (0, "RADLAN-vlanVoice-MIB", "vlanVoiceUcDeviceMacAddress"), (0, "RADLAN-vlanVoice-MIB", "vlanVoiceUcDeviceInterface"))
if mibBuilder.loadTexts: vlanVoiceUcDeviceEntry.setStatus('current')
vlanVoiceUcDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("static", 1), ("uc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceType.setStatus('current')
vlanVoiceUcDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceMacAddress.setStatus('current')
vlanVoiceUcDeviceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceInterface.setStatus('current')
vlanVoiceUcDeviceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceVid.setStatus('current')
vlanVoiceUcDeviceVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceVpt.setStatus('current')
vlanVoiceUcDeviceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceDscp.setStatus('current')
vlanVoiceUcDeviceIsBest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 10, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceIsBest.setStatus('current')
vlanVoiceAuto = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 48, 54, 11))
vlanVoiceAutoAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 1))
vlanVoiceAutoAdminVpt = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 1, 1), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoAdminVpt.setStatus('current')
vlanVoiceAutoAdminDscp = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoAdminDscp.setStatus('current')
vlanVoiceAutoOper = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 2))
vlanVoiceAutoOperVpt = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 2, 1), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperVpt.setStatus('current')
vlanVoiceAutoOperDscp = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperDscp.setStatus('current')
vlanVoiceAutoOperSource = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 2, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperSource.setStatus('current')
vlanVoiceAutoOperPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 10))).clone(namedValues=NamedValues(("staticActive", 0), ("staticInActive", 1), ("ucActive", 2), ("ucInActive", 3), ("default", 6), ("disabled", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperPriority.setStatus('current')
vlanVoiceAutoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoRefresh.setStatus('current')
vlanVoiceAutoAgreedVlanLastChange = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoAgreedVlanLastChange.setStatus('current')
vlanVoiceOUIBased = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 48, 54, 12))
vlanVoiceOUIBasedAdminPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 1), VlanPriority().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminPriority.setStatus('current')
vlanVoiceOUIBasedAdminRemark = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminRemark.setStatus('current')
vlanVoiceOUIBasedSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedSetToDefault.setStatus('current')
vlanVoiceOUIBasedTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 4), )
if mibBuilder.loadTexts: vlanVoiceOUIBasedTable.setStatus('current')
vlanVoiceOUIBasedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 4, 1), ).setIndexNames((0, "RADLAN-vlanVoice-MIB", "vlanVoiceOUIBasedPrefix"))
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntry.setStatus('current')
vlanVoiceOUIBasedPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: vlanVoiceOUIBasedPrefix.setStatus('current')
vlanVoiceOUIBasedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedDescription.setStatus('current')
vlanVoiceOUIBasedEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntryRowStatus.setStatus('current')
vlanVoiceOUIBasedPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5), )
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortTable.setStatus('current')
vlanVoiceOUIBasedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEntry.setStatus('current')
vlanVoiceOUIBasedPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEnable.setStatus('current')
vlanVoiceOUIBasedPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1, 2), VlanIndex().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortVlanIndex.setStatus('current')
vlanVoiceOUIBasedPortSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortSecure.setStatus('current')
vlanVoiceOUIBasedPortCurrentMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortCurrentMembership.setStatus('current')
vlanVoiceOUIBasedPortQosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortQosMode.setStatus('current')
vlanVoiceOUIBasedAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 48, 54, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(1440)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAgingTimeout.setStatus('current')
mibBuilder.exportSymbols("RADLAN-vlanVoice-MIB", vlanVoiceOUIBasedAdminRemark=vlanVoiceOUIBasedAdminRemark, vlanVoice=vlanVoice, PYSNMP_MODULE_ID=vlanVoice, vlanVoiceOUIBasedPortQosMode=vlanVoiceOUIBasedPortQosMode, vlanVoiceUcDeviceDscp=vlanVoiceUcDeviceDscp, vlanVoiceAdminState=vlanVoiceAdminState, vlanVoiceAutoAgreedVlanLastChange=vlanVoiceAutoAgreedVlanLastChange, vlanVoiceOUIBasedPortEnable=vlanVoiceOUIBasedPortEnable, vlanVoiceOUIBasedPortEntry=vlanVoiceOUIBasedPortEntry, vlanVoiceUcDeviceVpt=vlanVoiceUcDeviceVpt, vlanVoiceUcDeviceEntry=vlanVoiceUcDeviceEntry, vlanVoiceAutoOperDscp=vlanVoiceAutoOperDscp, vlanVoiceOUIBasedPortSecure=vlanVoiceOUIBasedPortSecure, vlanVoiceUcDeviceInterface=vlanVoiceUcDeviceInterface, vlanVoiceOUIBasedTable=vlanVoiceOUIBasedTable, vlanVoiceAutoAdminVpt=vlanVoiceAutoAdminVpt, vlanVoiceAutoOperSource=vlanVoiceAutoOperSource, vlanVoiceOperState=vlanVoiceOperState, vlanVoiceUcDeviceMacAddress=vlanVoiceUcDeviceMacAddress, vlanVoiceUcDeviceType=vlanVoiceUcDeviceType, vlanVoiceOUIBasedEntry=vlanVoiceOUIBasedEntry, vlanVoiceAdminVid=vlanVoiceAdminVid, vlanVoiceAutoOper=vlanVoiceAutoOper, vlanVoiceOUIBasedPrefix=vlanVoiceOUIBasedPrefix, vlanVoiceAutoAdmin=vlanVoiceAutoAdmin, vlanVoiceOUIBasedEntryRowStatus=vlanVoiceOUIBasedEntryRowStatus, vlanVoiceAutoAdminDscp=vlanVoiceAutoAdminDscp, vlanVoiceOUIBasedDescription=vlanVoiceOUIBasedDescription, vlanVoiceOUIBased=vlanVoiceOUIBased, vlanVoiceOperVid=vlanVoiceOperVid, vlanVoiceAutoOperVpt=vlanVoiceAutoOperVpt, vlanVoiceOUIBasedPortVlanIndex=vlanVoiceOUIBasedPortVlanIndex, vlanVoiceAutoRefresh=vlanVoiceAutoRefresh, vlanVoiceAuto=vlanVoiceAuto, vlanVoiceOUIBasedPortCurrentMembership=vlanVoiceOUIBasedPortCurrentMembership, vlanVoiceAutoOperPriority=vlanVoiceAutoOperPriority, vlanVoiceUcDeviceTable=vlanVoiceUcDeviceTable, vlanVoiceUcDeviceIsBest=vlanVoiceUcDeviceIsBest, vlanVoiceOUIBasedPortTable=vlanVoiceOUIBasedPortTable, vlanVoiceOUIBasedAgingTimeout=vlanVoiceOUIBasedAgingTimeout, vlanVoiceUcDeviceVid=vlanVoiceUcDeviceVid, vlanVoiceOUIBasedAdminPriority=vlanVoiceOUIBasedAdminPriority, vlanVoiceOUIBasedSetToDefault=vlanVoiceOUIBasedSetToDefault)
