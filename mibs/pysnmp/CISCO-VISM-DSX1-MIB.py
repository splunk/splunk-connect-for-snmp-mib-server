#
# PySNMP MIB module CISCO-VISM-DSX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-DSX1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:02:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
dsx1, = mibBuilder.importSymbols("BASIS-MIB", "dsx1")
dsx1AlmGrp, = mibBuilder.importSymbols("CISCO-MGX82XX-DSX1-MIB", "dsx1AlmGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ModuleIdentity, Gauge32, IpAddress, TimeTicks, Integer32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ModuleIdentity", "Gauge32", "IpAddress", "TimeTicks", "Integer32", "NotificationType", "ObjectIdentity")
DisplayString, TimeStamp, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention")
ciscoVismDsx1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 79))
ciscoVismDsx1MIB.setRevisions(('2005-09-30 00:00', '2005-01-20 00:00', '2004-04-16 00:00', '2004-03-09 00:00', '2004-02-17 00:00', '2004-02-15 00:00',))
if mibBuilder.loadTexts: ciscoVismDsx1MIB.setLastUpdated('200509300000Z')
if mibBuilder.loadTexts: ciscoVismDsx1MIB.setOrganization('Cisco Systems, Inc.')
dsx1Vism = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5))
dsx1VismCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1))
dsx1VismStatsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2))
dsx1VismCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1), )
if mibBuilder.loadTexts: dsx1VismCnfGrpTable.setStatus('current')
dsx1VismCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1), ).setIndexNames((0, "CISCO-VISM-DSX1-MIB", "vismLineNum"))
if mibBuilder.loadTexts: dsx1VismCnfGrpEntry.setStatus('current')
vismLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLineNum.setStatus('current')
vismEcanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismEcanEnabled.setStatus('current')
vismEcanToneDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ignore", 1), ("g-164", 2), ("reserve", 3), ("g-165", 4))).clone('g-165')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanToneDisable.setStatus('deprecated')
vismEcanCnfNRN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reenableOnModemData", 1), ("reenableOnCallEnd", 2))).clone('reenableOnModemData')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismEcanCnfNRN.setStatus('deprecated')
vismEcanTail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 128)).clone(32)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismEcanTail.setStatus('current')
vismEcanREC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cancelOnly", 1), ("suppressResidual", 2), ("reserved", 3), ("comfortNoise", 4))).clone('suppressResidual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismEcanREC.setStatus('current')
vismCompCnfVAD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCompCnfVAD.setStatus('current')
vismSignalingType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cas", 1), ("ccs", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSignalingType.setStatus('current')
vismCcsChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCcsChannels.setStatus('current')
vismCadenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCadenceTime.setStatus('deprecated')
vismTrunkConditionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismTrunkConditionEnable.setStatus('current')
vismDsx1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1CircuitIdentifier.setStatus('current')
vismDsx1TxDigitOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aniThenDnis", 1), ("dnisThenAni", 2))).clone('aniThenDnis')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1TxDigitOrder.setStatus('current')
vismDsx1TonePlanRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1TonePlanRegion.setStatus('current')
vismDsx1TonePlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1TonePlanVersion.setStatus('current')
vismDsx1RingingTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1RingingTO.setStatus('current')
vismDsx1RingBackTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1RingBackTO.setStatus('current')
vismDsx1BusyTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1BusyTO.setStatus('current')
vismDsx1ReorderTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1ReorderTO.setStatus('current')
vismDsx1DialTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(16)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1DialTO.setStatus('current')
vismDsx1StutterDialTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(16)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1StutterDialTO.setStatus('current')
vismDsx1OffHookAlertTO = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1OffHookAlertTO.setStatus('current')
vismDsx1RemoteRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proxy", 1), ("inband", 2))).clone('proxy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1RemoteRingback.setStatus('current')
vismDsx1MidcallTpart = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(16)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1MidcallTpart.setStatus('current')
vismDsx1MidcallTcrit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(4)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1MidcallTcrit.setStatus('current')
vismDsx1Sa4Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1Sa4Byte.setStatus('current')
vismDsx1Sa5Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1Sa5Byte.setStatus('current')
vismDsx1Sa6Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1Sa6Byte.setStatus('current')
vismDsx1Sa7Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1Sa7Byte.setStatus('current')
vismDsx1Sa8Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1Sa8Byte.setStatus('current')
vismDsx1State = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("is", 2), ("oos", 3), ("poos", 4), ("coos", 5), ("inactive", 6))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1State.setStatus('current')
vismDsx1AdminStateControl = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inService", 1), ("forcefulOutOfService", 2), ("gracefulOutOfService", 3), ("inactive", 4))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1AdminStateControl.setStatus('current')
vismBearerBusyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismBearerBusyCode.setStatus('current')
vismDsx1V110Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1V110Enable.setStatus('current')
vismDsx1AlarmLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1AlarmLogEnable.setStatus('current')
vismDsx1AlarmLogAdminTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(7200)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1AlarmLogAdminTimer.setStatus('current')
vismDsx1AlarmLogOperTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1AlarmLogOperTimer.setStatus('current')
vismDsx1ElectricalSignalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 1, 1, 1, 38), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismDsx1ElectricalSignalEnable.setStatus('current')
dsx1VismStatsGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1), )
if mibBuilder.loadTexts: dsx1VismStatsGrpTable.setStatus('current')
dsx1VismStatsGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1), )
dsx1VismCnfGrpEntry.registerAugmentions(("CISCO-VISM-DSX1-MIB", "dsx1VismStatsGrpEntry"))
dsx1VismStatsGrpEntry.setIndexNames(*dsx1VismCnfGrpEntry.getIndexNames())
if mibBuilder.loadTexts: dsx1VismStatsGrpEntry.setStatus('current')
vismDsx1TotalTxUncontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1TotalTxUncontrolledSlips.setStatus('current')
vismDsx1TotalTxFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1TotalTxFrameSlips.setStatus('current')
vismDsx1TotalRxUncontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1TotalRxUncontrolledSlips.setStatus('current')
vismDsx1TotalRxFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismDsx1TotalRxFrameSlips.setStatus('current')
vismSlipCntDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 5, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSlipCntDiscontinuityTime.setStatus('current')
dsx1AlmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2), )
if mibBuilder.loadTexts: dsx1AlmHistoryTable.setStatus('current')
dsx1AlmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-VISM-DSX1-MIB", "almlineNumber"), (0, "CISCO-VISM-DSX1-MIB", "almIntervalNumber"))
if mibBuilder.loadTexts: dsx1AlmHistoryEntry.setStatus('current')
almlineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almlineNumber.setStatus('current')
almIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almIntervalNumber.setStatus('current')
lCV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCV.setStatus('current')
lES = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lES.setStatus('current')
lSES = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSES.setStatus('current')
cRC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRC.setStatus('current')
cRCES = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCES.setStatus('current')
cRCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSES.setStatus('current')
sEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFS.setStatus('current')
aISS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISS.setStatus('current')
uAS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAS.setStatus('current')
percentErrorFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: percentErrorFreeSecs.setStatus('current')
rcvLOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvLOSCnt.setStatus('current')
rcvOOFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvOOFCnt.setStatus('current')
rcvRAICnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvRAICnt.setStatus('current')
rcvFECnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFECnt.setStatus('current')
dsx1AlmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1AlmClrButton.setStatus('current')
dsx1TxUncontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TxUncontrolledSlips.setStatus('current')
dsx1RxUncontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1RxUncontrolledSlips.setStatus('current')
dsx1TxFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TxFrameSlips.setStatus('current')
dsx1RxFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1RxFrameSlips.setStatus('current')
cvDsx1MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 79, 2))
cvDsx1MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1))
cvDsx1MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2))
cvDsx1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 1)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroup"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1Compliance = cvDsx1Compliance.setStatus('deprecated')
cvDsx1ComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 2)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupRev1"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ComplianceRev1 = cvDsx1ComplianceRev1.setStatus('deprecated')
cvDsx1ComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 3)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupRev2"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ComplianceRev2 = cvDsx1ComplianceRev2.setStatus('deprecated')
cvDsx1ComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 4)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupRev2"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroupRev1"), ("CISCO-VISM-DSX1-MIB", "cvDsx1StatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ComplianceRev3 = cvDsx1ComplianceRev3.setStatus('deprecated')
cvDsx1ComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 5)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupRev2"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroupRev1"), ("CISCO-VISM-DSX1-MIB", "cvDsx1StatsGroup"), ("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ComplianceRev4 = cvDsx1ComplianceRev4.setStatus('deprecated')
cvDsx1ComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 2, 6)).setObjects(("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupRev2"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlmHistoryGroupRev1"), ("CISCO-VISM-DSX1-MIB", "cvDsx1StatsGroup"), ("CISCO-VISM-DSX1-MIB", "cvDsx1ConfGroupSup1"), ("CISCO-VISM-DSX1-MIB", "cvDsx1AlarmLogGroup"), ("CISCO-VISM-DSX1-MIB", "cvDsx1ElecSigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ComplianceRev5 = cvDsx1ComplianceRev5.setStatus('current')
cvDsx1ConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 1)).setObjects(("CISCO-VISM-DSX1-MIB", "vismLineNum"), ("CISCO-VISM-DSX1-MIB", "vismEcanEnabled"), ("CISCO-VISM-DSX1-MIB", "vismEcanToneDisable"), ("CISCO-VISM-DSX1-MIB", "vismEcanCnfNRN"), ("CISCO-VISM-DSX1-MIB", "vismEcanTail"), ("CISCO-VISM-DSX1-MIB", "vismEcanREC"), ("CISCO-VISM-DSX1-MIB", "vismCompCnfVAD"), ("CISCO-VISM-DSX1-MIB", "vismSignalingType"), ("CISCO-VISM-DSX1-MIB", "vismCcsChannels"), ("CISCO-VISM-DSX1-MIB", "vismCadenceTime"), ("CISCO-VISM-DSX1-MIB", "vismTrunkConditionEnable"), ("CISCO-VISM-DSX1-MIB", "vismDsx1CircuitIdentifier"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TxDigitOrder"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanRegion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanVersion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingingTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingBackTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1BusyTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1ReorderTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1DialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1StutterDialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1OffHookAlertTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RemoteRingback"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTpart"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTcrit"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa4Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa5Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa6Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa7Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa8Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1State"), ("CISCO-VISM-DSX1-MIB", "vismDsx1AdminStateControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ConfGroup = cvDsx1ConfGroup.setStatus('deprecated')
cvDsx1AlmHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 2)).setObjects(("CISCO-VISM-DSX1-MIB", "almlineNumber"), ("CISCO-VISM-DSX1-MIB", "almIntervalNumber"), ("CISCO-VISM-DSX1-MIB", "lCV"), ("CISCO-VISM-DSX1-MIB", "lES"), ("CISCO-VISM-DSX1-MIB", "lSES"), ("CISCO-VISM-DSX1-MIB", "cRC"), ("CISCO-VISM-DSX1-MIB", "cRCES"), ("CISCO-VISM-DSX1-MIB", "cRCSES"), ("CISCO-VISM-DSX1-MIB", "sEFS"), ("CISCO-VISM-DSX1-MIB", "aISS"), ("CISCO-VISM-DSX1-MIB", "uAS"), ("CISCO-VISM-DSX1-MIB", "percentErrorFreeSecs"), ("CISCO-VISM-DSX1-MIB", "rcvLOSCnt"), ("CISCO-VISM-DSX1-MIB", "rcvOOFCnt"), ("CISCO-VISM-DSX1-MIB", "rcvRAICnt"), ("CISCO-VISM-DSX1-MIB", "rcvFECnt"), ("CISCO-VISM-DSX1-MIB", "dsx1AlmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1AlmHistoryGroup = cvDsx1AlmHistoryGroup.setStatus('deprecated')
cvDsx1ConfGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 3)).setObjects(("CISCO-VISM-DSX1-MIB", "vismLineNum"), ("CISCO-VISM-DSX1-MIB", "vismEcanEnabled"), ("CISCO-VISM-DSX1-MIB", "vismEcanTail"), ("CISCO-VISM-DSX1-MIB", "vismEcanREC"), ("CISCO-VISM-DSX1-MIB", "vismCompCnfVAD"), ("CISCO-VISM-DSX1-MIB", "vismSignalingType"), ("CISCO-VISM-DSX1-MIB", "vismCcsChannels"), ("CISCO-VISM-DSX1-MIB", "vismTrunkConditionEnable"), ("CISCO-VISM-DSX1-MIB", "vismDsx1CircuitIdentifier"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TxDigitOrder"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanRegion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanVersion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingingTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingBackTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1BusyTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1ReorderTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1DialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1StutterDialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1OffHookAlertTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RemoteRingback"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTpart"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTcrit"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa4Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa5Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa6Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa7Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa8Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1State"), ("CISCO-VISM-DSX1-MIB", "vismDsx1AdminStateControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ConfGroupRev1 = cvDsx1ConfGroupRev1.setStatus('deprecated')
cvDsx1ConfGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 4)).setObjects(("CISCO-VISM-DSX1-MIB", "vismLineNum"), ("CISCO-VISM-DSX1-MIB", "vismEcanEnabled"), ("CISCO-VISM-DSX1-MIB", "vismEcanTail"), ("CISCO-VISM-DSX1-MIB", "vismEcanREC"), ("CISCO-VISM-DSX1-MIB", "vismCompCnfVAD"), ("CISCO-VISM-DSX1-MIB", "vismSignalingType"), ("CISCO-VISM-DSX1-MIB", "vismCcsChannels"), ("CISCO-VISM-DSX1-MIB", "vismTrunkConditionEnable"), ("CISCO-VISM-DSX1-MIB", "vismDsx1CircuitIdentifier"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TxDigitOrder"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanRegion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TonePlanVersion"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingingTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RingBackTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1BusyTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1ReorderTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1DialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1StutterDialTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1OffHookAlertTO"), ("CISCO-VISM-DSX1-MIB", "vismDsx1RemoteRingback"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTpart"), ("CISCO-VISM-DSX1-MIB", "vismDsx1MidcallTcrit"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa4Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa5Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa6Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa7Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1Sa8Byte"), ("CISCO-VISM-DSX1-MIB", "vismDsx1State"), ("CISCO-VISM-DSX1-MIB", "vismDsx1AdminStateControl"), ("CISCO-VISM-DSX1-MIB", "vismBearerBusyCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ConfGroupRev2 = cvDsx1ConfGroupRev2.setStatus('current')
cvDsx1AlmHistoryGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 5)).setObjects(("CISCO-VISM-DSX1-MIB", "almlineNumber"), ("CISCO-VISM-DSX1-MIB", "almIntervalNumber"), ("CISCO-VISM-DSX1-MIB", "lCV"), ("CISCO-VISM-DSX1-MIB", "lES"), ("CISCO-VISM-DSX1-MIB", "lSES"), ("CISCO-VISM-DSX1-MIB", "cRC"), ("CISCO-VISM-DSX1-MIB", "cRCES"), ("CISCO-VISM-DSX1-MIB", "cRCSES"), ("CISCO-VISM-DSX1-MIB", "sEFS"), ("CISCO-VISM-DSX1-MIB", "aISS"), ("CISCO-VISM-DSX1-MIB", "uAS"), ("CISCO-VISM-DSX1-MIB", "percentErrorFreeSecs"), ("CISCO-VISM-DSX1-MIB", "rcvLOSCnt"), ("CISCO-VISM-DSX1-MIB", "rcvOOFCnt"), ("CISCO-VISM-DSX1-MIB", "rcvRAICnt"), ("CISCO-VISM-DSX1-MIB", "rcvFECnt"), ("CISCO-VISM-DSX1-MIB", "dsx1AlmClrButton"), ("CISCO-VISM-DSX1-MIB", "dsx1TxUncontrolledSlips"), ("CISCO-VISM-DSX1-MIB", "dsx1TxFrameSlips"), ("CISCO-VISM-DSX1-MIB", "dsx1RxUncontrolledSlips"), ("CISCO-VISM-DSX1-MIB", "dsx1RxFrameSlips"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1AlmHistoryGroupRev1 = cvDsx1AlmHistoryGroupRev1.setStatus('current')
cvDsx1StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 6)).setObjects(("CISCO-VISM-DSX1-MIB", "vismDsx1TotalTxUncontrolledSlips"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TotalTxFrameSlips"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TotalRxUncontrolledSlips"), ("CISCO-VISM-DSX1-MIB", "vismDsx1TotalRxFrameSlips"), ("CISCO-VISM-DSX1-MIB", "vismSlipCntDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1StatsGroup = cvDsx1StatsGroup.setStatus('current')
cvDsx1ConfGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 7)).setObjects(("CISCO-VISM-DSX1-MIB", "vismDsx1V110Enable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ConfGroupSup1 = cvDsx1ConfGroupSup1.setStatus('current')
cvDsx1AlarmLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 8)).setObjects(("CISCO-VISM-DSX1-MIB", "vismDsx1AlarmLogEnable"), ("CISCO-VISM-DSX1-MIB", "vismDsx1AlarmLogAdminTimer"), ("CISCO-VISM-DSX1-MIB", "vismDsx1AlarmLogOperTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1AlarmLogGroup = cvDsx1AlarmLogGroup.setStatus('current')
cvDsx1ElecSigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 79, 2, 1, 9)).setObjects(("CISCO-VISM-DSX1-MIB", "vismDsx1ElectricalSignalEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvDsx1ElecSigGroup = cvDsx1ElecSigGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-VISM-DSX1-MIB", almlineNumber=almlineNumber, vismDsx1TotalTxFrameSlips=vismDsx1TotalTxFrameSlips, vismLineNum=vismLineNum, dsx1AlmHistoryEntry=dsx1AlmHistoryEntry, vismDsx1State=vismDsx1State, cvDsx1ConfGroupRev2=cvDsx1ConfGroupRev2, sEFS=sEFS, cvDsx1AlmHistoryGroupRev1=cvDsx1AlmHistoryGroupRev1, vismEcanEnabled=vismEcanEnabled, dsx1RxFrameSlips=dsx1RxFrameSlips, vismDsx1V110Enable=vismDsx1V110Enable, vismDsx1CircuitIdentifier=vismDsx1CircuitIdentifier, dsx1VismStatsGrpEntry=dsx1VismStatsGrpEntry, vismDsx1DialTO=vismDsx1DialTO, vismDsx1Sa6Byte=vismDsx1Sa6Byte, dsx1VismStatsGrp=dsx1VismStatsGrp, cvDsx1ConfGroupSup1=cvDsx1ConfGroupSup1, vismEcanCnfNRN=vismEcanCnfNRN, cvDsx1ComplianceRev1=cvDsx1ComplianceRev1, cvDsx1ElecSigGroup=cvDsx1ElecSigGroup, percentErrorFreeSecs=percentErrorFreeSecs, aISS=aISS, vismDsx1AdminStateControl=vismDsx1AdminStateControl, cvDsx1ConfGroupRev1=cvDsx1ConfGroupRev1, dsx1TxFrameSlips=dsx1TxFrameSlips, cvDsx1MIBCompliances=cvDsx1MIBCompliances, vismDsx1RemoteRingback=vismDsx1RemoteRingback, cvDsx1ConfGroup=cvDsx1ConfGroup, cvDsx1ComplianceRev5=cvDsx1ComplianceRev5, vismDsx1Sa8Byte=vismDsx1Sa8Byte, vismTrunkConditionEnable=vismTrunkConditionEnable, dsx1AlmHistoryTable=dsx1AlmHistoryTable, dsx1VismCnfGrp=dsx1VismCnfGrp, vismDsx1StutterDialTO=vismDsx1StutterDialTO, vismDsx1AlarmLogOperTimer=vismDsx1AlarmLogOperTimer, dsx1Vism=dsx1Vism, dsx1VismCnfGrpTable=dsx1VismCnfGrpTable, vismDsx1BusyTO=vismDsx1BusyTO, vismEcanREC=vismEcanREC, rcvOOFCnt=rcvOOFCnt, vismDsx1ElectricalSignalEnable=vismDsx1ElectricalSignalEnable, rcvLOSCnt=rcvLOSCnt, cvDsx1Compliance=cvDsx1Compliance, dsx1VismCnfGrpEntry=dsx1VismCnfGrpEntry, vismSlipCntDiscontinuityTime=vismSlipCntDiscontinuityTime, vismDsx1Sa4Byte=vismDsx1Sa4Byte, vismDsx1TxDigitOrder=vismDsx1TxDigitOrder, vismDsx1TotalTxUncontrolledSlips=vismDsx1TotalTxUncontrolledSlips, dsx1VismStatsGrpTable=dsx1VismStatsGrpTable, vismDsx1Sa7Byte=vismDsx1Sa7Byte, vismDsx1RingBackTO=vismDsx1RingBackTO, cvDsx1ComplianceRev2=cvDsx1ComplianceRev2, dsx1AlmClrButton=dsx1AlmClrButton, vismDsx1ReorderTO=vismDsx1ReorderTO, cvDsx1MIBConformance=cvDsx1MIBConformance, vismDsx1TotalRxFrameSlips=vismDsx1TotalRxFrameSlips, vismDsx1RingingTO=vismDsx1RingingTO, vismDsx1AlarmLogAdminTimer=vismDsx1AlarmLogAdminTimer, cvDsx1StatsGroup=cvDsx1StatsGroup, rcvRAICnt=rcvRAICnt, cRC=cRC, vismEcanToneDisable=vismEcanToneDisable, vismCompCnfVAD=vismCompCnfVAD, lCV=lCV, vismDsx1TonePlanVersion=vismDsx1TonePlanVersion, uAS=uAS, vismCcsChannels=vismCcsChannels, cvDsx1AlmHistoryGroup=cvDsx1AlmHistoryGroup, vismDsx1OffHookAlertTO=vismDsx1OffHookAlertTO, vismDsx1MidcallTpart=vismDsx1MidcallTpart, rcvFECnt=rcvFECnt, almIntervalNumber=almIntervalNumber, vismCadenceTime=vismCadenceTime, lSES=lSES, vismDsx1Sa5Byte=vismDsx1Sa5Byte, cvDsx1ComplianceRev4=cvDsx1ComplianceRev4, ciscoVismDsx1MIB=ciscoVismDsx1MIB, vismEcanTail=vismEcanTail, PYSNMP_MODULE_ID=ciscoVismDsx1MIB, vismBearerBusyCode=vismBearerBusyCode, vismDsx1TotalRxUncontrolledSlips=vismDsx1TotalRxUncontrolledSlips, vismDsx1MidcallTcrit=vismDsx1MidcallTcrit, lES=lES, cvDsx1MIBGroups=cvDsx1MIBGroups, cvDsx1ComplianceRev3=cvDsx1ComplianceRev3, cRCES=cRCES, vismDsx1AlarmLogEnable=vismDsx1AlarmLogEnable, vismDsx1TonePlanRegion=vismDsx1TonePlanRegion, dsx1RxUncontrolledSlips=dsx1RxUncontrolledSlips, vismSignalingType=vismSignalingType, cRCSES=cRCSES, cvDsx1AlarmLogGroup=cvDsx1AlarmLogGroup, dsx1TxUncontrolledSlips=dsx1TxUncontrolledSlips)
