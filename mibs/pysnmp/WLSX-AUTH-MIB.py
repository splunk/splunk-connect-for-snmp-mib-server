#
# PySNMP MIB module WLSX-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-AUTH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaEnableValue, ArubaAuthServerType, ArubaHashAlgorithms, ArubaEncryptionMethods, ArubaAuthenticationMethods = mibBuilder.importSymbols("ARUBA-TC", "ArubaEnableValue", "ArubaAuthServerType", "ArubaHashAlgorithms", "ArubaEncryptionMethods", "ArubaAuthenticationMethods")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, MibIdentifier, NotificationType, Gauge32, iso, Counter64, Unsigned32, TimeTicks, Integer32, snmpModules, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Counter64", "Unsigned32", "TimeTicks", "Integer32", "snmpModules", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TAddress, RowStatus, MacAddress, TruthValue, TestAndIncr, TimeInterval, TDomain, StorageType, DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "RowStatus", "MacAddress", "TruthValue", "TestAndIncr", "TimeInterval", "TDomain", "StorageType", "DisplayString", "PhysAddress", "TextualConvention")
wlsxAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8))
wlsxAuthMIB.setRevisions(('1906-11-27 20:30',))
if mibBuilder.loadTexts: wlsxAuthMIB.setLastUpdated('0611272030Z')
if mibBuilder.loadTexts: wlsxAuthMIB.setOrganization('Aruba Wireless Networks')
wlsxAuthenticationServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1))
wlsxAuthenticationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 2))
wlsxAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 3))
wlsxAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: wlsxAuthenticationServerTable.setStatus('current')
wlsxAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxAuthenticationServerEntry.setStatus('current')
authServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: authServerName.setStatus('current')
authServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 2), ArubaAuthServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerType.setStatus('current')
authServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerAddress.setStatus('current')
authServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerPort.setStatus('current')
authServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerRetryCount.setStatus('current')
authServerTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerTimeOutValue.setStatus('current')
authServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerState.setStatus('current')
authServerInservice = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerInservice.setStatus('current')
authServerUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUsageCount.setStatus('current')
authServerSuccessfullAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerSuccessfullAuths.setStatus('current')
authServerFailedAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerFailedAuths.setStatus('current')
authServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerTimeouts.setStatus('current')
authServerAvgResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerAvgResponseTime.setStatus('current')
authServerOutStandingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerOutStandingRequests.setStatus('current')
authServerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUptime.setStatus('current')
wlsxPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2), )
if mibBuilder.loadTexts: wlsxPortalServerTable.setStatus('current')
wlsxPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "portalServerIndex"))
if mibBuilder.loadTexts: wlsxPortalServerEntry.setStatus('current')
portalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: portalServerIndex.setStatus('current')
portalServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerHost.setStatus('current')
portalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPort.setStatus('current')
portalServerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPage.setStatus('current')
portalServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerProtocol.setStatus('current')
wlsxLdapServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5), )
if mibBuilder.loadTexts: wlsxLdapServerStateTable.setStatus('current')
wlsxLdapServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxLdapServerStateEntry.setStatus('current')
ldapInitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapInitDone.setStatus('current')
ldapAdminBound = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapAdminBound.setStatus('current')
ldapReBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapReBindCount.setStatus('current')
mibBuilder.exportSymbols("WLSX-AUTH-MIB", wlsxLdapServerStateTable=wlsxLdapServerStateTable, authServerSuccessfullAuths=authServerSuccessfullAuths, ldapAdminBound=ldapAdminBound, authServerFailedAuths=authServerFailedAuths, portalServerProtocol=portalServerProtocol, wlsxAuthMIB=wlsxAuthMIB, authServerName=authServerName, authServerState=authServerState, wlsxAuthenticationServerGroup=wlsxAuthenticationServerGroup, authServerRetryCount=authServerRetryCount, authServerOutStandingRequests=authServerOutStandingRequests, portalServerIndex=portalServerIndex, authServerInservice=authServerInservice, PYSNMP_MODULE_ID=wlsxAuthMIB, portalServerPage=portalServerPage, portalServerHost=portalServerHost, wlsxAuthenticationServerTable=wlsxAuthenticationServerTable, authServerAvgResponseTime=authServerAvgResponseTime, authServerTimeOutValue=authServerTimeOutValue, wlsxLdapServerStateEntry=wlsxLdapServerStateEntry, wlsxPortalServerEntry=wlsxPortalServerEntry, ldapReBindCount=ldapReBindCount, authServerUptime=authServerUptime, authServerUsageCount=authServerUsageCount, wlsxAuthenticationServerEntry=wlsxAuthenticationServerEntry, authServerTimeouts=authServerTimeouts, wlsxPortalServerTable=wlsxPortalServerTable, wlsxAuthenticationGroup=wlsxAuthenticationGroup, authServerPort=authServerPort, wlsxAuthenticationInfoGroup=wlsxAuthenticationInfoGroup, portalServerPort=portalServerPort, ldapInitDone=ldapInitDone, authServerAddress=authServerAddress, authServerType=authServerType)
