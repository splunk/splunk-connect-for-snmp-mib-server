#
# PySNMP MIB module BSUWIRELESSIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUWIRELESSIF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
bsu, = mibBuilder.importSymbols("ANIROOT-MIB", "bsu")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, Unsigned32, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Integer32, IpAddress, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Unsigned32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Integer32", "IpAddress", "ObjectIdentity", "Gauge32")
TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
aniBsuWirelessIf = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 2))
if mibBuilder.loadTexts: aniBsuWirelessIf.setLastUpdated('0302101530Z')
if mibBuilder.loadTexts: aniBsuWirelessIf.setOrganization('Aperto Networks')
aniBsuWirelessPortTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1), )
if mibBuilder.loadTexts: aniBsuWirelessPortTable.setStatus('current')
aniBsuWirelessPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuWirelessPortEntry.setStatus('current')
aniBsuWirelessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("wireless-port1", 1), ("wireless-port2", 2), ("wireless-port3", 3), ("wireless-port4", 4), ("wireless-port5", 5), ("wireless-port6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPort.setStatus('current')
aniBsuPortMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuPortMacAddr.setStatus('current')
aniBsuPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unavailable", 1), ("initial", 2), ("unconfig", 3), ("starting", 4), ("configured-no-radio-detected", 5), ("operational-radio", 6), ("stopped", 7), ("resetting", 8), ("disabled", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuPortState.setStatus('current')
aniBsuPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuPortReset.setStatus('current')
aniBsuPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuPortFlag.setStatus('current')
aniBsuChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4), )
if mibBuilder.loadTexts: aniBsuChannelTable.setStatus('current')
aniBsuChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuChannelEntry.setStatus('current')
aniBsuChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 2), DisplayString()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuChannelFrequency.setStatus('current')
aniBsuFrequencyBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 4, 5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("unii-5-3GHz", 1), ("unii-5-8GHz", 2), ("general-5-8GHz", 3), ("ism-5-8GHz", 10), ("mmds-2-6GHz", 4), ("general-2-6GHz", 5), ("general-3-5GHz", 6), ("etsi-3-5GHz-50", 7), ("etsi-3-5GHz-100", 8), ("fdd-3-5GHz", 11), ("general-5-3GHz", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuFrequencyBand.setStatus('current')
aniBsuChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuChannelWidth.setStatus('current')
aniBsuNumServFlowsPerSu = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuNumServFlowsPerSu.setStatus('current')
aniBsuNumSusSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuNumSusSupported.setStatus('current')
aniBsuSuRadioRegPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 9), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuRadioRegPowerLimit.setStatus('current')
aniBsuTargetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 4, 1, 10), DisplayString()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuTargetFrequency.setStatus('current')
aniBsuQosLinkTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 6), )
if mibBuilder.loadTexts: aniBsuQosLinkTable.setStatus('current')
aniBsuQosLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 6, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuQosLinkEntry.setStatus('current')
aniBsuBEBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuBEBandwidth.setStatus('current')
aniBsuCIRBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuCIRBandwidth.setStatus('current')
aniBsuCBRBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuCBRBandwidth.setStatus('current')
aniBsuPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 7), )
if mibBuilder.loadTexts: aniBsuPowerControlTable.setStatus('current')
aniBsuPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 7, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuPowerControlEntry.setStatus('current')
aniBsuReceivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuReceivePower.setStatus('current')
aniBsuWssRadioRegPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 7, 1, 3), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWssRadioRegPowerLimit.setStatus('current')
aniBsuAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 8), )
if mibBuilder.loadTexts: aniBsuAntennaTable.setStatus('current')
aniBsuAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 8, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuAntennaEntry.setStatus('current')
aniBsuAntennaDiversityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuAntennaDiversityFlag.setStatus('current')
aniBsuAntennaDiversityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync-based", 1), ("training-seq-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuAntennaDiversityMode.setStatus('current')
aniBsuBcastAntennaPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("horizontal-and-vertical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuBcastAntennaPolarization.setStatus('current')
aniBsuSectorTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 9), )
if mibBuilder.loadTexts: aniBsuSectorTable.setStatus('current')
aniBsuSectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 9, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuSectorEntry.setStatus('current')
aniBsuSectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSectorName.setStatus('current')
aniBsuWirelessPtPConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10))
aniBsuWirelessPtPConfFrequencyBand = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unii-5-3GHz", 1), ("unii-5-8GHz", 2), ("general-5-8GHz", 3), ("ism-5-8GHz", 10), ("mmds-2-6GHz", 4), ("general-2-6GHz", 5), ("general-3-5GHz", 6), ("etsi-3-5GHz-50", 7), ("etsi-3-5GHz-100", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfFrequencyBand.setStatus('current')
aniBsuWirelessPtPConfChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 3000, 4000, 5000, 6000, 7000, 3500))).clone(namedValues=NamedValues(("width-2", 2000), ("width-3", 3000), ("width-4", 4000), ("width-5", 5000), ("width-6", 6000), ("width-7", 7000), ("width-3-5", 3500)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfChannelWidth.setStatus('current')
aniBsuWirelessPtPConfTDDFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low-latency", 1), ("normal-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfTDDFrameSize.setStatus('current')
aniBsuWirelessPtPConfCellRadius = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000))).clone(namedValues=NamedValues(("radius10km", 10000), ("radius20km", 20000), ("radius30km", 30000), ("radius40km", 40000), ("radius50km", 50000), ("radius60km", 60000), ("radius70km", 70000), ("radius80km", 80000), ("radius90km", 90000), ("radius100km", 100000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfCellRadius.setStatus('current')
aniBsuWirelessPtPConfDSUSRatio = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(70, 60, 50, 40, 30))).clone(namedValues=NamedValues(("ds70-us30", 70), ("ds60-us40", 60), ("ds50-us50", 50), ("ds40-us60", 40), ("ds30-us70", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfDSUSRatio.setStatus('current')
aniBsuWirelessPtPConfPolarization = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("vertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfPolarization.setStatus('current')
aniBsuWirelessPtPConfTargetFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 7), DisplayString()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfTargetFrequency.setStatus('current')
aniBsuWirelessPtPConfBsuRadioRegPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 8), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfBsuRadioRegPowerLimit.setStatus('current')
aniBsuWirelessPtPConfSuRadioRegPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 9), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfSuRadioRegPowerLimit.setStatus('current')
aniBsuWirelessPtPConfModify = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfModify.setStatus('current')
aniBsuWirelessPtPConfBsuId = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfBsuId.setStatus('current')
aniBsuWirelessPtPConfVerifyAllSu = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfVerifyAllSu.setStatus('current')
aniBsuWirelessPtPConfSwitchToFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 13), DisplayString()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfSwitchToFrequency.setStatus('current')
aniBsuWirelessPtPConfSuAFSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessPtPConfSuAFSTimeout.setStatus('current')
aniBsuWirelessPtPStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 3, 2, 11))
aniBsuWirelessPtPStatusMaxDSAvailBW = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPStatusMaxDSAvailBW.setStatus('current')
aniBsuWirelessPtPStatusMaxUSAvailBW = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 11, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPStatusMaxUSAvailBW.setStatus('current')
aniBsuWirelessPtPStatusTDDFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low-latency", 1), ("normal-mode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessPtPStatusTDDFrameSize.setStatus('current')
aniBsuWirelessFreqAdminTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 12), )
if mibBuilder.loadTexts: aniBsuWirelessFreqAdminTable.setStatus('current')
aniBsuWirelessFreqAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 12, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUWIRELESSIF-MIB", "aniBsuWirelessFreqAdminIndex"))
if mibBuilder.loadTexts: aniBsuWirelessFreqAdminEntry.setStatus('current')
aniBsuWirelessFreqAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessFreqAdminIndex.setStatus('current')
aniBsuWirelessFreqAdminFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 12, 1, 2), DisplayString()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessFreqAdminFreqValue.setStatus('current')
aniBsuWirelessFreqOperTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 13), )
if mibBuilder.loadTexts: aniBsuWirelessFreqOperTable.setStatus('current')
aniBsuWirelessFreqOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 13, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUWIRELESSIF-MIB", "aniBsuWirelessFreqOperIndex"))
if mibBuilder.loadTexts: aniBsuWirelessFreqOperEntry.setStatus('current')
aniBsuWirelessFreqOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessFreqOperIndex.setStatus('current')
aniBsuWirelessFreqOperFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 13, 1, 2), DisplayString()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessFreqOperFreqValue.setStatus('current')
aniBsuWirelessSysConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14))
aniBsuWirelessSysConfBsuId = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessSysConfBsuId.setStatus('current')
aniBsuWirelessSysConfFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessSysConfFrameSize.setStatus('current')
aniBsuWirelessSysConfFrameDownstreamSize = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessSysConfFrameDownstreamSize.setStatus('current')
aniBsuWirelessSysConfFrameUpstreamSize = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessSysConfFrameUpstreamSize.setStatus('current')
aniBsuWirelessSysConfDSUSRatio = MibScalar((1, 3, 6, 1, 4, 1, 4325, 3, 2, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(70, 60, 50, 40, 30))).clone(namedValues=NamedValues(("ds70-us30", 70), ("ds60-us40", 60), ("ds50-us50", 50), ("ds40-us60", 40), ("ds30-us70", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessSysConfDSUSRatio.setStatus('current')
aniBsuWirelessIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15), )
if mibBuilder.loadTexts: aniBsuWirelessIfConfTable.setStatus('current')
aniBsuWirelessIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuWirelessIfConfEntry.setStatus('current')
aniBsuWirelessIfConfTargetFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15, 1, 1), DisplayString()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessIfConfTargetFrequency.setStatus('current')
aniBsuWirelessIfConfVerifyAllSu = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuWirelessIfConfVerifyAllSu.setStatus('current')
aniBsuWirelessIfConfSwitchToFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15, 1, 3), DisplayString()).setUnits('MHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessIfConfSwitchToFrequency.setStatus('current')
aniBsuWirelessIfConfModify = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 15, 1, 50), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessIfConfModify.setStatus('current')
aniBsuWirelessAFSTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16), )
if mibBuilder.loadTexts: aniBsuWirelessAFSTable.setStatus('current')
aniBsuWirelessAFSConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuWirelessAFSConfEntry.setStatus('current')
aniBsuWirelessAFSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessAFSFlag.setStatus('current')
aniBsuWirelessAFSMinSwitchDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessAFSMinSwitchDuration.setStatus('current')
aniBsuWirelessAFSMinNotificationDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessAFSMinNotificationDuration.setStatus('current')
aniBsuWirelessAFSErrPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessAFSErrPercentage.setStatus('current')
aniBsuWirelessAFSMinSwitchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuWirelessAFSMinSwitchBytes.setStatus('current')
mibBuilder.exportSymbols("BSUWIRELESSIF-MIB", aniBsuWirelessIfConfEntry=aniBsuWirelessIfConfEntry, aniBsuWirelessAFSTable=aniBsuWirelessAFSTable, aniBsuWirelessAFSMinSwitchBytes=aniBsuWirelessAFSMinSwitchBytes, aniBsuSectorTable=aniBsuSectorTable, aniBsuWirelessAFSMinSwitchDuration=aniBsuWirelessAFSMinSwitchDuration, aniBsuWirelessPtPStatusMaxUSAvailBW=aniBsuWirelessPtPStatusMaxUSAvailBW, aniBsuBEBandwidth=aniBsuBEBandwidth, aniBsuPowerControlEntry=aniBsuPowerControlEntry, aniBsuWirelessAFSConfEntry=aniBsuWirelessAFSConfEntry, aniBsuWirelessPtPConfSuRadioRegPowerLimit=aniBsuWirelessPtPConfSuRadioRegPowerLimit, aniBsuFrequencyBand=aniBsuFrequencyBand, aniBsuWirelessIfConfVerifyAllSu=aniBsuWirelessIfConfVerifyAllSu, aniBsuBcastAntennaPolarization=aniBsuBcastAntennaPolarization, aniBsuWirelessPtPStatusGroup=aniBsuWirelessPtPStatusGroup, aniBsuWirelessPtPConfGroup=aniBsuWirelessPtPConfGroup, aniBsuCIRBandwidth=aniBsuCIRBandwidth, aniBsuWirelessIfConfTargetFrequency=aniBsuWirelessIfConfTargetFrequency, aniBsuWirelessPtPConfCellRadius=aniBsuWirelessPtPConfCellRadius, aniBsuSectorEntry=aniBsuSectorEntry, aniBsuWirelessIf=aniBsuWirelessIf, aniBsuSuRadioRegPowerLimit=aniBsuSuRadioRegPowerLimit, aniBsuWirelessSysConfBsuId=aniBsuWirelessSysConfBsuId, aniBsuWirelessIfConfTable=aniBsuWirelessIfConfTable, aniBsuWirelessPtPConfTDDFrameSize=aniBsuWirelessPtPConfTDDFrameSize, aniBsuChannelWidth=aniBsuChannelWidth, aniBsuWirelessPtPConfSwitchToFrequency=aniBsuWirelessPtPConfSwitchToFrequency, aniBsuWirelessFreqOperIndex=aniBsuWirelessFreqOperIndex, aniBsuAntennaDiversityMode=aniBsuAntennaDiversityMode, PYSNMP_MODULE_ID=aniBsuWirelessIf, aniBsuWirelessIfConfModify=aniBsuWirelessIfConfModify, aniBsuQosLinkEntry=aniBsuQosLinkEntry, aniBsuWirelessSysConfFrameDownstreamSize=aniBsuWirelessSysConfFrameDownstreamSize, aniBsuNumSusSupported=aniBsuNumSusSupported, aniBsuAntennaDiversityFlag=aniBsuAntennaDiversityFlag, aniBsuWirelessAFSFlag=aniBsuWirelessAFSFlag, aniBsuWirelessSysConfGroup=aniBsuWirelessSysConfGroup, aniBsuWirelessPort=aniBsuWirelessPort, aniBsuWirelessPtPConfSuAFSTimeout=aniBsuWirelessPtPConfSuAFSTimeout, aniBsuAntennaEntry=aniBsuAntennaEntry, aniBsuWirelessFreqAdminIndex=aniBsuWirelessFreqAdminIndex, aniBsuWirelessPtPConfFrequencyBand=aniBsuWirelessPtPConfFrequencyBand, aniBsuSectorName=aniBsuSectorName, aniBsuWirelessPtPStatusTDDFrameSize=aniBsuWirelessPtPStatusTDDFrameSize, aniBsuWirelessFreqOperTable=aniBsuWirelessFreqOperTable, aniBsuWirelessPtPConfDSUSRatio=aniBsuWirelessPtPConfDSUSRatio, aniBsuQosLinkTable=aniBsuQosLinkTable, aniBsuWirelessPtPStatusMaxDSAvailBW=aniBsuWirelessPtPStatusMaxDSAvailBW, aniBsuWirelessPtPConfVerifyAllSu=aniBsuWirelessPtPConfVerifyAllSu, aniBsuWirelessSysConfDSUSRatio=aniBsuWirelessSysConfDSUSRatio, aniBsuWssRadioRegPowerLimit=aniBsuWssRadioRegPowerLimit, aniBsuWirelessPtPConfPolarization=aniBsuWirelessPtPConfPolarization, aniBsuWirelessPortEntry=aniBsuWirelessPortEntry, aniBsuWirelessFreqAdminEntry=aniBsuWirelessFreqAdminEntry, aniBsuPortFlag=aniBsuPortFlag, aniBsuPowerControlTable=aniBsuPowerControlTable, aniBsuPortState=aniBsuPortState, aniBsuWirelessSysConfFrameSize=aniBsuWirelessSysConfFrameSize, aniBsuWirelessPtPConfBsuRadioRegPowerLimit=aniBsuWirelessPtPConfBsuRadioRegPowerLimit, aniBsuWirelessPortTable=aniBsuWirelessPortTable, aniBsuWirelessSysConfFrameUpstreamSize=aniBsuWirelessSysConfFrameUpstreamSize, aniBsuWirelessAFSMinNotificationDuration=aniBsuWirelessAFSMinNotificationDuration, aniBsuWirelessFreqAdminFreqValue=aniBsuWirelessFreqAdminFreqValue, aniBsuPortReset=aniBsuPortReset, aniBsuWirelessIfConfSwitchToFrequency=aniBsuWirelessIfConfSwitchToFrequency, aniBsuReceivePower=aniBsuReceivePower, aniBsuChannelTable=aniBsuChannelTable, aniBsuWirelessPtPConfModify=aniBsuWirelessPtPConfModify, aniBsuWirelessPtPConfChannelWidth=aniBsuWirelessPtPConfChannelWidth, aniBsuPortMacAddr=aniBsuPortMacAddr, aniBsuChannelEntry=aniBsuChannelEntry, aniBsuWirelessFreqOperEntry=aniBsuWirelessFreqOperEntry, aniBsuChannelFrequency=aniBsuChannelFrequency, aniBsuCBRBandwidth=aniBsuCBRBandwidth, aniBsuWirelessPtPConfTargetFrequency=aniBsuWirelessPtPConfTargetFrequency, aniBsuWirelessPtPConfBsuId=aniBsuWirelessPtPConfBsuId, aniBsuWirelessAFSErrPercentage=aniBsuWirelessAFSErrPercentage, aniBsuWirelessFreqAdminTable=aniBsuWirelessFreqAdminTable, aniBsuWirelessFreqOperFreqValue=aniBsuWirelessFreqOperFreqValue, aniBsuNumServFlowsPerSu=aniBsuNumServFlowsPerSu, aniBsuAntennaTable=aniBsuAntennaTable, aniBsuTargetFrequency=aniBsuTargetFrequency)
