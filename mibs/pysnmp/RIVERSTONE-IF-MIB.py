#
# PySNMP MIB module RIVERSTONE-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:49:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
riverstoneMibs, = mibBuilder.importSymbols("RIVERSTONE-SMI-MIB", "riverstoneMibs")
RsQueuePolicy, = mibBuilder.importSymbols("RIVERSTONE-TC-MIB", "RsQueuePolicy")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, Unsigned32, IpAddress, Bits, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, TimeTicks, Integer32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Integer32", "Counter64", "Counter32")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
rsIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 60))
rsIfMIB.setRevisions(('2002-10-17 00:00',))
if mibBuilder.loadTexts: rsIfMIB.setLastUpdated('200210170000Z')
if mibBuilder.loadTexts: rsIfMIB.setOrganization('Riverstone Networks, Inc')
rsIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1))
rsIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1), )
if mibBuilder.loadTexts: rsIfStatsTable.setStatus('current')
rsIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsIfStatsEntry.setStatus('current')
rsIfStatsCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("ifTotalUpTime", 0), ("ifTotalDownTime", 1), ("ifUpTransitions", 2), ("ifDownTransitions", 3), ("ifInCorrelatedLayer1Errors", 4), ("ifInBridgedOctets", 5), ("ifInLocalFrames", 6), ("ifInL2TableMisses", 7), ("ifInRoutedOctets", 8), ("ifInRoutedSwitchedPackets", 9), ("ifInRoutedCpuPackets", 10), ("ifInIpTableMisses", 11), ("ifInInvalidMacEncap", 12), ("ifInVlanTableDiscards", 13), ("ifOutBridgedOctets", 14), ("ifOutRoutedOctets", 15), ("ifOutVlanTableDiscards", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfStatsCapability.setStatus('current')
rsIfQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 2), RsQueuePolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfQueuePolicy.setStatus('current')
rsIfMru = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 3), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfMru.setStatus('current')
rsIfForceEtherIIState = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfForceEtherIIState.setStatus('current')
rsIfTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfTotalUpTime.setStatus('current')
rsIfTotalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfTotalDownTime.setStatus('current')
rsIfUpTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfUpTransitions.setStatus('current')
rsIfDownTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfDownTransitions.setStatus('current')
rsIfInCorrelatedLayer1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInCorrelatedLayer1Errors.setStatus('current')
rsIfInBridgedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 10), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInBridgedOctets.setStatus('current')
rsIfInLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 11), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInLocalFrames.setStatus('current')
rsIfInL2TableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInL2TableMisses.setStatus('current')
rsIfInRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 13), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInRoutedOctets.setStatus('current')
rsIfInRoutedSwitchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInRoutedSwitchedPackets.setStatus('current')
rsIfInRoutedCpuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInRoutedCpuPackets.setStatus('current')
rsIfInIpTableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInIpTableMisses.setStatus('current')
rsIfInInvalidMacEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 17), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInInvalidMacEncap.setStatus('current')
rsIfInVlanTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 18), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInVlanTableDiscards.setStatus('current')
rsIfOutBridgedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 19), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutBridgedOctets.setStatus('current')
rsIfOutRoutedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 20), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutRoutedOctets.setStatus('current')
rsIfOutVlanTableDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 1, 1, 21), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutVlanTableDiscards.setStatus('current')
rsIfGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2), )
if mibBuilder.loadTexts: rsIfGaugeTable.setStatus('current')
rsIfGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsIfGaugeEntry.setStatus('current')
rsIfGaugeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("ifInOneMinBitsPerSec", 0), ("ifInOneMinPktsDiscards", 1), ("ifInOneMinPktsErrors", 2), ("ifInOneMinUnicastPkts", 3), ("ifInOneMinMulticastPkts", 4), ("ifInOneMinBroadcastPkts", 5), ("ifOutOneMinBitsPerSec", 6), ("ifOutOneMinPktsDiscards", 7), ("ifOutOneMinPktsErrors", 8), ("ifOutOneMinUnicastPkts", 9), ("ifOutOneMinMulticastPkts", 10), ("ifOutOneMinBroadcastPkts", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfGaugeCapability.setStatus('current')
rsIfInOneMinBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 2), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinBitsPerSec.setStatus('current')
rsIfInOneMinPktsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 3), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinPktsDiscards.setStatus('current')
rsIfInOneMinPktsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 4), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinPktsErrors.setStatus('current')
rsIfInOneMinUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 5), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinUnicastPkts.setStatus('current')
rsIfInOneMinMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 6), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinMulticastPkts.setStatus('current')
rsIfInOneMinBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 7), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfInOneMinBroadcastPkts.setStatus('current')
rsIfOutOneMinBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 8), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinBitsPerSec.setStatus('current')
rsIfOutOneMinPktsDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 9), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinPktsDiscards.setStatus('current')
rsIfOutOneMinPktsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 10), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinPktsErrors.setStatus('current')
rsIfOutOneMinUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 11), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinUnicastPkts.setStatus('current')
rsIfOutOneMinMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 12), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinMulticastPkts.setStatus('current')
rsIfOutOneMinBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 60, 1, 2, 1, 13), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIfOutOneMinBroadcastPkts.setStatus('current')
rsIfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2))
rsIfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2, 1))
rsIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2, 2))
rsIfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2, 1, 1)).setObjects(("RIVERSTONE-IF-MIB", "rsIfStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIfCompliance = rsIfCompliance.setStatus('current')
rsIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2, 2, 1)).setObjects(("RIVERSTONE-IF-MIB", "rsIfStatsCapability"), ("RIVERSTONE-IF-MIB", "rsIfQueuePolicy"), ("RIVERSTONE-IF-MIB", "rsIfMru"), ("RIVERSTONE-IF-MIB", "rsIfForceEtherIIState"), ("RIVERSTONE-IF-MIB", "rsIfTotalUpTime"), ("RIVERSTONE-IF-MIB", "rsIfTotalDownTime"), ("RIVERSTONE-IF-MIB", "rsIfUpTransitions"), ("RIVERSTONE-IF-MIB", "rsIfDownTransitions"), ("RIVERSTONE-IF-MIB", "rsIfInCorrelatedLayer1Errors"), ("RIVERSTONE-IF-MIB", "rsIfInLocalFrames"), ("RIVERSTONE-IF-MIB", "rsIfInRoutedSwitchedPackets"), ("RIVERSTONE-IF-MIB", "rsIfInRoutedCpuPackets"), ("RIVERSTONE-IF-MIB", "rsIfInBridgedOctets"), ("RIVERSTONE-IF-MIB", "rsIfInRoutedOctets"), ("RIVERSTONE-IF-MIB", "rsIfInL2TableMisses"), ("RIVERSTONE-IF-MIB", "rsIfInIpTableMisses"), ("RIVERSTONE-IF-MIB", "rsIfInInvalidMacEncap"), ("RIVERSTONE-IF-MIB", "rsIfInVlanTableDiscards"), ("RIVERSTONE-IF-MIB", "rsIfOutBridgedOctets"), ("RIVERSTONE-IF-MIB", "rsIfOutRoutedOctets"), ("RIVERSTONE-IF-MIB", "rsIfOutVlanTableDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIfStatsGroup = rsIfStatsGroup.setStatus('current')
rsIfGaugeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 60, 2, 2, 2)).setObjects(("RIVERSTONE-IF-MIB", "rsIfGaugeCapability"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinBitsPerSec"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinPktsDiscards"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinPktsErrors"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinUnicastPkts"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinMulticastPkts"), ("RIVERSTONE-IF-MIB", "rsIfInOneMinBroadcastPkts"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinBitsPerSec"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinPktsDiscards"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinPktsErrors"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinUnicastPkts"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinMulticastPkts"), ("RIVERSTONE-IF-MIB", "rsIfOutOneMinBroadcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsIfGaugeGroup = rsIfGaugeGroup.setStatus('current')
mibBuilder.exportSymbols("RIVERSTONE-IF-MIB", rsIfOutOneMinPktsErrors=rsIfOutOneMinPktsErrors, rsIfGaugeEntry=rsIfGaugeEntry, rsIfInBridgedOctets=rsIfInBridgedOctets, rsIfInInvalidMacEncap=rsIfInInvalidMacEncap, rsIfForceEtherIIState=rsIfForceEtherIIState, rsIfGaugeCapability=rsIfGaugeCapability, rsIfOutOneMinUnicastPkts=rsIfOutOneMinUnicastPkts, rsIfStatsGroup=rsIfStatsGroup, rsIfTotalDownTime=rsIfTotalDownTime, rsIfCompliance=rsIfCompliance, rsIfStatsCapability=rsIfStatsCapability, rsIfInOneMinMulticastPkts=rsIfInOneMinMulticastPkts, rsIfQueuePolicy=rsIfQueuePolicy, rsIfInL2TableMisses=rsIfInL2TableMisses, rsIfInIpTableMisses=rsIfInIpTableMisses, rsIfInOneMinPktsDiscards=rsIfInOneMinPktsDiscards, rsIfInRoutedCpuPackets=rsIfInRoutedCpuPackets, rsIfDownTransitions=rsIfDownTransitions, rsIfGaugeGroup=rsIfGaugeGroup, rsIfOutBridgedOctets=rsIfOutBridgedOctets, rsIfOutOneMinBroadcastPkts=rsIfOutOneMinBroadcastPkts, rsIfGaugeTable=rsIfGaugeTable, rsIfInRoutedSwitchedPackets=rsIfInRoutedSwitchedPackets, rsIfTotalUpTime=rsIfTotalUpTime, rsIfGroups=rsIfGroups, rsIfInVlanTableDiscards=rsIfInVlanTableDiscards, rsIfConformance=rsIfConformance, rsIfInRoutedOctets=rsIfInRoutedOctets, rsIfInOneMinUnicastPkts=rsIfInOneMinUnicastPkts, rsIfUpTransitions=rsIfUpTransitions, rsIfInOneMinBitsPerSec=rsIfInOneMinBitsPerSec, rsIfOutOneMinPktsDiscards=rsIfOutOneMinPktsDiscards, rsIfCompliances=rsIfCompliances, rsIfStatsTable=rsIfStatsTable, rsIfOutVlanTableDiscards=rsIfOutVlanTableDiscards, rsIfMIB=rsIfMIB, rsIfMru=rsIfMru, rsIfInLocalFrames=rsIfInLocalFrames, rsIfOutRoutedOctets=rsIfOutRoutedOctets, rsIfInOneMinPktsErrors=rsIfInOneMinPktsErrors, rsIfInOneMinBroadcastPkts=rsIfInOneMinBroadcastPkts, rsIfOutOneMinBitsPerSec=rsIfOutOneMinBitsPerSec, PYSNMP_MODULE_ID=rsIfMIB, rsIfInCorrelatedLayer1Errors=rsIfInCorrelatedLayer1Errors, rsIfOutOneMinMulticastPkts=rsIfOutOneMinMulticastPkts, rsIfMIBObjects=rsIfMIBObjects, rsIfStatsEntry=rsIfStatsEntry)
