#
# PySNMP MIB module HPN-ICF-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
IPv6FlowLabelOrAny, = mibBuilder.importSymbols("IPV6-FLOW-LABEL-MIB", "IPv6FlowLabelOrAny")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, MibIdentifier, iso, Unsigned32, ObjectIdentity, Counter32, Gauge32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "MibIdentifier", "iso", "Unsigned32", "ObjectIdentity", "Counter32", "Gauge32", "ModuleIdentity", "TimeTicks")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hpnicfTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53))
hpnicfTunnel.setRevisions(('2013-02-28 00:00',))
if mibBuilder.loadTexts: hpnicfTunnel.setLastUpdated('201302280000Z')
if mibBuilder.loadTexts: hpnicfTunnel.setOrganization('')
class HpnicfTunnelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("direct", 2), ("gre", 3), ("minimal", 4), ("l2tp", 5), ("pptp", 6), ("l2f", 7), ("udp", 8), ("atmp", 9), ("msdp", 10), ("sixToFour", 11), ("sixOverFour", 12), ("isatap", 13), ("teredo", 14), ("tunnelModeReserve", 35), ("tunnelModeIPv4Gre", 36), ("tunnelModeIPv6Gre", 37), ("tunnelModeIPv4IPv4", 38), ("tunnelModeIPv4IPv6Config", 39), ("tunnelModeIPv4IPv6Auto", 40), ("tunnelModeIPv4IPv66to4", 41), ("tunnelModeIPv4IPv6Isatap", 42), ("tunnelModeIPv6IPv4", 43), ("tunnelModeIPv6IPv6", 44), ("tunnelModeIPv4UdpDVPN", 45), ("tunnelModeIPv4GreDVPN", 46), ("tunnelModeIPv6UdpDVPN", 47), ("tunnelModeIPv6GreDVPN", 48), ("tunnelModeCrLsp", 49), ("tunnelModeMax", 50), ("tunnelModeIPv4UdpVxlan", 51), ("tunnelModeIPv6UdpVxlan", 52), ("tunnelModeIPv4NVGRE", 53), ("tunnelModeIPv6NVGRE", 54))

hpnicfTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1))
hpnicfTunnelTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1))
hpnicfTunnelIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfTunnelIfTable.setStatus('current')
hpnicfTunnelIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfTunnelIfEntry.setStatus('current')
hpnicfTunnelIfEncapsMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 3), HpnicfTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsMethod.setStatus('current')
hpnicfTunnelIfHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfHopLimit.setStatus('current')
hpnicfTunnelIfSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipsec", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfSecurity.setStatus('current')
hpnicfTunnelIfTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfTOS.setStatus('current')
hpnicfTunnelIfFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 7), IPv6FlowLabelOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfFlowLabel.setStatus('current')
hpnicfTunnelIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfAddressType.setStatus('current')
hpnicfTunnelIfLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfLocalInetAddress.setStatus('current')
hpnicfTunnelIfRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfRemoteInetAddress.setStatus('current')
hpnicfTunnelIfEncapsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsLimit.setStatus('current')
hpnicfTunnelInetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTable.setStatus('current')
hpnicfTunnelInetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigSlot"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigSubSlot"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigEntry.setStatus('current')
hpnicfTunnelInetConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSlot.setStatus('current')
hpnicfTunnelInetConfigSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSubSlot.setStatus('current')
hpnicfTunnelInetConfigTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTunnNum.setStatus('current')
hpnicfTunnelInetConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelInetConfigIfIndex.setStatus('current')
hpnicfTunnelInetConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelInetConfigStatus.setStatus('current')
hpnicfTunnelEviTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4), )
if mibBuilder.loadTexts: hpnicfTunnelEviTable.setStatus('current')
hpnicfTunnelEviEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelEviEntry.setStatus('current')
hpnicfTunnelEviTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelEviTunnNum.setStatus('current')
hpnicfTunnelEviIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviIfIndex.setStatus('current')
hpnicfTunnelEviStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviStatus.setStatus('current')
hpnicfTunnelEviAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviAddressType.setStatus('current')
hpnicfTunnelEviLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviLocalAddr.setStatus('current')
hpnicfTunnelEviNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviNetworkID.setStatus('current')
hpnicfTunnelEviKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveInterval.setStatus('current')
hpnicfTunnelEviKeepaliveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveTimes.setStatus('current')
hpnicfTunnelEviLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5), )
if mibBuilder.loadTexts: hpnicfTunnelEviLinkTable.setStatus('current')
hpnicfTunnelEviLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviTunnNum"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviLinkNum"))
if mibBuilder.loadTexts: hpnicfTunnelEviLinkEntry.setStatus('current')
hpnicfTunnelEviLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelEviLinkNum.setStatus('current')
hpnicfTunnelEviLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkIfIndex.setStatus('current')
hpnicfTunnelEviLinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkAddressType.setStatus('current')
hpnicfTunnelEviLinkRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkRemoteAddr.setStatus('current')
hpnicfTunnelGreTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6), )
if mibBuilder.loadTexts: hpnicfTunnelGreTable.setStatus('current')
hpnicfTunnelGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelGreTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelGreEntry.setStatus('current')
hpnicfTunnelGreTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelGreTunnNum.setStatus('current')
hpnicfTunnelGreTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelGreTunnIfIndex.setStatus('current')
hpnicfTunnelGreAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreAddressType.setStatus('current')
hpnicfTunnelGreLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreLocalAddr.setStatus('current')
hpnicfTunnelGreRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreRemoteAddr.setStatus('current')
hpnicfTunnelGreKeepaliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveEnabled.setStatus('current')
hpnicfTunnelGreKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveInterval.setStatus('current')
hpnicfTunnelGreKeepaliveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveTimes.setStatus('current')
hpnicfTunnelGreSlbgGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreSlbgGroupNum.setStatus('current')
hpnicfTunnelGreTunnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreTunnStatus.setStatus('current')
hpnicfTunnelVxlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7), )
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTable.setStatus('current')
hpnicfTunnelVxlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelVxlanIfTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfEntry.setStatus('current')
hpnicfTunnelVxlanIfTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTunnNum.setStatus('current')
hpnicfTunnelVxlanTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelVxlanTunnIfIndex.setStatus('current')
hpnicfTunnelVxlanIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfAddressType.setStatus('current')
hpnicfTunnelVxlanIfLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfLocalAddr.setStatus('current')
hpnicfTunnelVxlanIfRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfRemoteAddr.setStatus('current')
hpnicfTunnelVxlanIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfStatus.setStatus('current')
hpnicfTunnelVxlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8))
hpnicfTunnelVxlanUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanUdpPort.setStatus('current')
hpnicfTunnelVxlanDropWrongCksmPkt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropWrongCksmPkt.setStatus('current')
hpnicfTunnelVxlanDropVlanTagPkt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropVlanTagPkt.setStatus('current')
hpnicfTunnelAvailableIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 9))
hpnicfTunnelAvailableID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelAvailableID.setStatus('current')
hpnicfTunnelTotalNumTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10), )
if mibBuilder.loadTexts: hpnicfTunnelTotalNumTable.setStatus('current')
hpnicfTunnelTotalNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEncapsMethod"))
if mibBuilder.loadTexts: hpnicfTunnelTotalNumEntry.setStatus('current')
hpnicfTunnelEncapsMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1, 1), HpnicfTunnelType())
if mibBuilder.loadTexts: hpnicfTunnelEncapsMethod.setStatus('current')
hpnicfTunnelTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelTotalNum.setStatus('current')
hpnicfTunnelNvgreIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11), )
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTable.setStatus('current')
hpnicfTunnelNvgreIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelNvgreIfTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfEntry.setStatus('current')
hpnicfTunnelNvgreIfTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTunnNum.setStatus('current')
hpnicfTunnelNvgreTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelNvgreTunnIfIndex.setStatus('current')
hpnicfTunnelNvgreIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfAddressType.setStatus('current')
hpnicfTunnelNvgreIfLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfLocalAddr.setStatus('current')
hpnicfTunnelNvgreIfRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfRemoteAddr.setStatus('current')
hpnicfTunnelNvgreIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-TUNNEL-MIB", hpnicfTunnelEviEntry=hpnicfTunnelEviEntry, hpnicfTunnelIfLocalInetAddress=hpnicfTunnelIfLocalInetAddress, hpnicfTunnelGreTunnNum=hpnicfTunnelGreTunnNum, hpnicfTunnelMIBObjects=hpnicfTunnelMIBObjects, hpnicfTunnelNvgreIfAddressType=hpnicfTunnelNvgreIfAddressType, PYSNMP_MODULE_ID=hpnicfTunnel, hpnicfTunnelInetConfigTable=hpnicfTunnelInetConfigTable, hpnicfTunnelEviLinkIfIndex=hpnicfTunnelEviLinkIfIndex, hpnicfTunnelNvgreIfLocalAddr=hpnicfTunnelNvgreIfLocalAddr, hpnicfTunnelGreKeepaliveTimes=hpnicfTunnelGreKeepaliveTimes, hpnicfTunnelEviTable=hpnicfTunnelEviTable, hpnicfTunnelVxlanConfigGroup=hpnicfTunnelVxlanConfigGroup, HpnicfTunnelType=HpnicfTunnelType, hpnicfTunnelAvailableID=hpnicfTunnelAvailableID, hpnicfTunnelEviStatus=hpnicfTunnelEviStatus, hpnicfTunnelTotalNumTable=hpnicfTunnelTotalNumTable, hpnicfTunnelEviLocalAddr=hpnicfTunnelEviLocalAddr, hpnicfTunnelEviKeepaliveTimes=hpnicfTunnelEviKeepaliveTimes, hpnicfTunnelInetConfigIfIndex=hpnicfTunnelInetConfigIfIndex, hpnicfTunnelAvailableIDGroup=hpnicfTunnelAvailableIDGroup, hpnicfTunnelVxlanDropWrongCksmPkt=hpnicfTunnelVxlanDropWrongCksmPkt, hpnicfTunnelNvgreIfEntry=hpnicfTunnelNvgreIfEntry, hpnicfTunnelGreLocalAddr=hpnicfTunnelGreLocalAddr, hpnicfTunnelVxlanIfEntry=hpnicfTunnelVxlanIfEntry, hpnicfTunnel=hpnicfTunnel, hpnicfTunnelEviLinkEntry=hpnicfTunnelEviLinkEntry, hpnicfTunnelGreKeepaliveEnabled=hpnicfTunnelGreKeepaliveEnabled, hpnicfTunnelVxlanIfRemoteAddr=hpnicfTunnelVxlanIfRemoteAddr, hpnicfTunnelInetConfigStatus=hpnicfTunnelInetConfigStatus, hpnicfTunnelIfRemoteInetAddress=hpnicfTunnelIfRemoteInetAddress, hpnicfTunnelVxlanIfTable=hpnicfTunnelVxlanIfTable, hpnicfTunnelNvgreIfTable=hpnicfTunnelNvgreIfTable, hpnicfTunnelInetConfigEntry=hpnicfTunnelInetConfigEntry, hpnicfTunnelVxlanTunnIfIndex=hpnicfTunnelVxlanTunnIfIndex, hpnicfTunnelIfEntry=hpnicfTunnelIfEntry, hpnicfTunnelInetConfigSubSlot=hpnicfTunnelInetConfigSubSlot, hpnicfTunnelIfTable=hpnicfTunnelIfTable, hpnicfTunnelEviNetworkID=hpnicfTunnelEviNetworkID, hpnicfTunnelVxlanIfAddressType=hpnicfTunnelVxlanIfAddressType, hpnicfTunnelVxlanIfLocalAddr=hpnicfTunnelVxlanIfLocalAddr, hpnicfTunnelGreAddressType=hpnicfTunnelGreAddressType, hpnicfTunnelIfHopLimit=hpnicfTunnelIfHopLimit, hpnicfTunnelVxlanIfStatus=hpnicfTunnelVxlanIfStatus, hpnicfTunnelEviTunnNum=hpnicfTunnelEviTunnNum, hpnicfTunnelIfAddressType=hpnicfTunnelIfAddressType, hpnicfTunnelNvgreIfRemoteAddr=hpnicfTunnelNvgreIfRemoteAddr, hpnicfTunnelTotalNum=hpnicfTunnelTotalNum, hpnicfTunnelEviKeepaliveInterval=hpnicfTunnelEviKeepaliveInterval, hpnicfTunnelInetConfigTunnNum=hpnicfTunnelInetConfigTunnNum, hpnicfTunnelIfEncapsMethod=hpnicfTunnelIfEncapsMethod, hpnicfTunnelEviAddressType=hpnicfTunnelEviAddressType, hpnicfTunnelGreSlbgGroupNum=hpnicfTunnelGreSlbgGroupNum, hpnicfTunnelIfEncapsLimit=hpnicfTunnelIfEncapsLimit, hpnicfTunnelGreRemoteAddr=hpnicfTunnelGreRemoteAddr, hpnicfTunnelEviLinkNum=hpnicfTunnelEviLinkNum, hpnicfTunnelEncapsMethod=hpnicfTunnelEncapsMethod, hpnicfTunnelEviLinkTable=hpnicfTunnelEviLinkTable, hpnicfTunnelInetConfigSlot=hpnicfTunnelInetConfigSlot, hpnicfTunnelVxlanUdpPort=hpnicfTunnelVxlanUdpPort, hpnicfTunnelIfTOS=hpnicfTunnelIfTOS, hpnicfTunnelVxlanIfTunnNum=hpnicfTunnelVxlanIfTunnNum, hpnicfTunnelTotalNumEntry=hpnicfTunnelTotalNumEntry, hpnicfTunnelTables=hpnicfTunnelTables, hpnicfTunnelVxlanDropVlanTagPkt=hpnicfTunnelVxlanDropVlanTagPkt, hpnicfTunnelGreTunnStatus=hpnicfTunnelGreTunnStatus, hpnicfTunnelEviLinkAddressType=hpnicfTunnelEviLinkAddressType, hpnicfTunnelNvgreTunnIfIndex=hpnicfTunnelNvgreTunnIfIndex, hpnicfTunnelGreEntry=hpnicfTunnelGreEntry, hpnicfTunnelGreKeepaliveInterval=hpnicfTunnelGreKeepaliveInterval, hpnicfTunnelNvgreIfStatus=hpnicfTunnelNvgreIfStatus, hpnicfTunnelEviLinkRemoteAddr=hpnicfTunnelEviLinkRemoteAddr, hpnicfTunnelIfFlowLabel=hpnicfTunnelIfFlowLabel, hpnicfTunnelIfSecurity=hpnicfTunnelIfSecurity, hpnicfTunnelEviIfIndex=hpnicfTunnelEviIfIndex, hpnicfTunnelNvgreIfTunnNum=hpnicfTunnelNvgreIfTunnNum, hpnicfTunnelGreTunnIfIndex=hpnicfTunnelGreTunnIfIndex, hpnicfTunnelGreTable=hpnicfTunnelGreTable)
