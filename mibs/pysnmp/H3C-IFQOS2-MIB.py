#
# PySNMP MIB module H3C-IFQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-IFQOS2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Counter32, Integer32, TimeTicks, MibIdentifier, Counter64, iso, Gauge32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Counter32", "Integer32", "TimeTicks", "MibIdentifier", "Counter64", "iso", "Gauge32", "ModuleIdentity", "NotificationType")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
h3cIfQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1))
if mibBuilder.loadTexts: h3cIfQos2.setLastUpdated('200812020000Z')
if mibBuilder.loadTexts: h3cIfQos2.setOrganization('H3C Technologies Co.,Ltd.')
h3cQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65))
class CarAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16))

class PriorityQueue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("top", 1), ("middle", 2), ("normal", 3), ("bottom", 4))

class Direction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

h3cIfQoSHardwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1))
h3cIfQoSHardwareQueueConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1))
h3cIfQoSQSModeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSQSModeTable.setStatus('current')
h3cIfQoSQSModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSQSModeEntry.setStatus('current')
h3cIfQoSQSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sp", 1), ("sp0", 2), ("sp1", 3), ("sp2", 4), ("wrr", 5), ("hwfq", 6), ("wrr-sp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSQSMode.setStatus('current')
h3cIfQoSQSWeightTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSQSWeightTable.setStatus('current')
h3cIfQoSQSWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSQueueID"))
if mibBuilder.loadTexts: h3cIfQoSQSWeightEntry.setStatus('current')
h3cIfQoSQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIfQoSQueueID.setStatus('current')
h3cIfQoSQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group0", 1), ("group1", 2), ("group2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSQueueGroupType.setStatus('current')
h3cIfQoSQSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weight", 1), ("byte-count", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSQSType.setStatus('current')
h3cIfQoSQSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSQSValue.setStatus('current')
h3cIfQoSQSMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 1, 2, 1, 5), Integer32().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSQSMaxDelay.setStatus('current')
h3cIfQoSHardwareQueueRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2))
h3cIfQoSHardwareQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSHardwareQueueRunInfoTable.setStatus('current')
h3cIfQoSHardwareQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSQueueID"))
if mibBuilder.loadTexts: h3cIfQoSHardwareQueueRunInfoEntry.setStatus('current')
h3cIfQoSPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPassPackets.setStatus('current')
h3cIfQoSDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSDropPackets.setStatus('current')
h3cIfQoSPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPassBytes.setStatus('current')
h3cIfQoSPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPassPPS.setStatus('current')
h3cIfQoSPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPassBPS.setStatus('current')
h3cIfQoSDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSDropBytes.setStatus('current')
h3cIfQoSQueueLengthInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSQueueLengthInPkts.setStatus('current')
h3cIfQoSQueueLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSQueueLengthInBytes.setStatus('current')
h3cIfQoSCurQueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCurQueuePkts.setStatus('current')
h3cIfQoSCurQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCurQueueBytes.setStatus('current')
h3cIfQoSCurQueuePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCurQueuePPS.setStatus('current')
h3cIfQoSCurQueueBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCurQueueBPS.setStatus('current')
h3cIfQoSTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTailDropPkts.setStatus('current')
h3cIfQoSTailDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTailDropBytes.setStatus('current')
h3cIfQoSTailDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTailDropPPS.setStatus('current')
h3cIfQoSTailDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTailDropBPS.setStatus('current')
h3cIfQoSWredDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropPkts.setStatus('current')
h3cIfQoSWredDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropBytes.setStatus('current')
h3cIfQoSWredDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropPPS.setStatus('current')
h3cIfQoSWredDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropBPS.setStatus('current')
h3cIfQoSHQueueTcpRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2), )
if mibBuilder.loadTexts: h3cIfQoSHQueueTcpRunInfoTable.setStatus('current')
h3cIfQoSHQueueTcpRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSQueueID"))
if mibBuilder.loadTexts: h3cIfQoSHQueueTcpRunInfoEntry.setStatus('current')
h3cIfQoSWredDropLPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreNTcpPkts.setStatus('current')
h3cIfQoSWredDropLPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreNTcpBytes.setStatus('current')
h3cIfQoSWredDropLPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreNTcpPPS.setStatus('current')
h3cIfQoSWredDropLPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreNTcpBPS.setStatus('current')
h3cIfQoSWredDropLPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreTcpPkts.setStatus('current')
h3cIfQoSWredDropLPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreTcpBytes.setStatus('current')
h3cIfQoSWredDropLPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreTcpPPS.setStatus('current')
h3cIfQoSWredDropLPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropLPreTcpBPS.setStatus('current')
h3cIfQoSWredDropHPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreNTcpPkts.setStatus('current')
h3cIfQoSWredDropHPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreNTcpBytes.setStatus('current')
h3cIfQoSWredDropHPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreNTcpPPS.setStatus('current')
h3cIfQoSWredDropHPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreNTcpBPS.setStatus('current')
h3cIfQoSWredDropHPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreTcpPkts.setStatus('current')
h3cIfQoSWredDropHPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreTcpBytes.setStatus('current')
h3cIfQoSWredDropHPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreTcpPPS.setStatus('current')
h3cIfQoSWredDropHPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredDropHPreTcpBPS.setStatus('current')
h3cIfQoSSoftwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2))
h3cIfQoSFIFOObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1))
h3cIfQoSFIFOConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSFIFOConfigTable.setStatus('current')
h3cIfQoSFIFOConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSFIFOConfigEntry.setStatus('current')
h3cIfQoSFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSFIFOMaxQueueLen.setStatus('current')
h3cIfQoSFIFORunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSFIFORunInfoTable.setStatus('current')
h3cIfQoSFIFORunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSFIFORunInfoEntry.setStatus('current')
h3cIfQoSFIFOSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSFIFOSize.setStatus('current')
h3cIfQoSFIFODiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSFIFODiscardPackets.setStatus('current')
h3cIfQoSPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2))
h3cIfQoSPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1))
h3cIfQoSPQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSPQDefaultTable.setStatus('current')
h3cIfQoSPQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSPQListNumber"))
if mibBuilder.loadTexts: h3cIfQoSPQDefaultEntry.setStatus('current')
h3cIfQoSPQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: h3cIfQoSPQListNumber.setStatus('current')
h3cIfQoSPQDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 1, 1, 2), PriorityQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSPQDefaultQueueType.setStatus('current')
h3cIfQoSPQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSPQQueueLengthTable.setStatus('current')
h3cIfQoSPQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSPQListNumber"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPQQueueLengthType"))
if mibBuilder.loadTexts: h3cIfQoSPQQueueLengthEntry.setStatus('current')
h3cIfQoSPQQueueLengthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 2, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: h3cIfQoSPQQueueLengthType.setStatus('current')
h3cIfQoSPQQueueLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSPQQueueLengthValue.setStatus('current')
h3cIfQoSPQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: h3cIfQoSPQClassRuleTable.setStatus('current')
h3cIfQoSPQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSPQListNumber"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPQClassRuleType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPQClassRuleValue"))
if mibBuilder.loadTexts: h3cIfQoSPQClassRuleEntry.setStatus('current')
h3cIfQoSPQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: h3cIfQoSPQClassRuleType.setStatus('current')
h3cIfQoSPQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cIfQoSPQClassRuleValue.setStatus('current')
h3cIfQoSPQClassRuleQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3, 1, 3), PriorityQueue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPQClassRuleQueueType.setStatus('current')
h3cIfQoSPQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPQClassRowStatus.setStatus('current')
h3cIfQoSPQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: h3cIfQoSPQApplyTable.setStatus('current')
h3cIfQoSPQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSPQApplyEntry.setStatus('current')
h3cIfQoSPQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPQApplyListNumber.setStatus('current')
h3cIfQoSPQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPQApplyRowStatus.setStatus('current')
h3cIfQoSPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2))
h3cIfQoSPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSPQRunInfoTable.setStatus('current')
h3cIfQoSPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPQType"))
if mibBuilder.loadTexts: h3cIfQoSPQRunInfoEntry.setStatus('current')
h3cIfQoSPQType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: h3cIfQoSPQType.setStatus('current')
h3cIfQoSPQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPQSize.setStatus('current')
h3cIfQoSPQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPQLength.setStatus('current')
h3cIfQoSPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPQDiscardPackets.setStatus('current')
h3cIfQoSCQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3))
h3cIfQoSCQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1))
h3cIfQoSCQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSCQDefaultTable.setStatus('current')
h3cIfQoSCQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSCQListNumber"))
if mibBuilder.loadTexts: h3cIfQoSCQDefaultEntry.setStatus('current')
h3cIfQoSCQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: h3cIfQoSCQListNumber.setStatus('current')
h3cIfQoSCQDefaultQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSCQDefaultQueueID.setStatus('current')
h3cIfQoSCQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSCQQueueLengthTable.setStatus('current')
h3cIfQoSCQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSCQListNumber"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: h3cIfQoSCQQueueLengthEntry.setStatus('current')
h3cIfQoSCQQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: h3cIfQoSCQQueueID.setStatus('current')
h3cIfQoSCQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSCQQueueLength.setStatus('current')
h3cIfQoSCQQueueServing = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 2, 1, 3), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSCQQueueServing.setStatus('current')
h3cIfQoSCQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3), )
if mibBuilder.loadTexts: h3cIfQoSCQClassRuleTable.setStatus('current')
h3cIfQoSCQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSCQListNumber"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSCQClassRuleType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSCQClassRuleValue"))
if mibBuilder.loadTexts: h3cIfQoSCQClassRuleEntry.setStatus('current')
h3cIfQoSCQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: h3cIfQoSCQClassRuleType.setStatus('current')
h3cIfQoSCQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cIfQoSCQClassRuleValue.setStatus('current')
h3cIfQoSCQClassRuleQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCQClassRuleQueueID.setStatus('current')
h3cIfQoSCQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCQClassRowStatus.setStatus('current')
h3cIfQoSCQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 4), )
if mibBuilder.loadTexts: h3cIfQoSCQApplyTable.setStatus('current')
h3cIfQoSCQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSCQApplyEntry.setStatus('current')
h3cIfQoSCQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCQApplyListNumber.setStatus('current')
h3cIfQoSCQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCQApplyRowStatus.setStatus('current')
h3cIfQoSCQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2))
h3cIfQoSCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSCQRunInfoTable.setStatus('current')
h3cIfQoSCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: h3cIfQoSCQRunInfoEntry.setStatus('current')
h3cIfQoSCQRunInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCQRunInfoSize.setStatus('current')
h3cIfQoSCQRunInfoLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCQRunInfoLength.setStatus('current')
h3cIfQoSCQRunInfoDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSCQRunInfoDiscardPackets.setStatus('current')
h3cIfQoSWFQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4))
h3cIfQoSWFQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1))
h3cIfQoSWFQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSWFQTable.setStatus('current')
h3cIfQoSWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSWFQEntry.setStatus('current')
h3cIfQoSWFQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWFQQueueLength.setStatus('current')
h3cIfQoSWFQQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size16", 1), ("size32", 2), ("size64", 3), ("size128", 4), ("size256", 5), ("size512", 6), ("size1024", 7), ("size2048", 8), ("size4096", 9))).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWFQQueueNumber.setStatus('current')
h3cIfQoSWFQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWFQRowStatus.setStatus('current')
h3cIfQoSWFQType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-precedence", 1), ("dscp", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWFQType.setStatus('current')
h3cIfQoSWFQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2))
h3cIfQoSWFQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSWFQRunInfoTable.setStatus('current')
h3cIfQoSWFQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSWFQRunInfoEntry.setStatus('current')
h3cIfQoSWFQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWFQSize.setStatus('current')
h3cIfQoSWFQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWFQLength.setStatus('current')
h3cIfQoSWFQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWFQDiscardPackets.setStatus('current')
h3cIfQoSWFQHashedActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWFQHashedActiveQueues.setStatus('current')
h3cIfQoSWFQHashedMaxActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWFQHashedMaxActiveQueues.setStatus('current')
h3fIfQosWFQhashedTotalQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3fIfQosWFQhashedTotalQueues.setStatus('current')
h3cIfQoSBandwidthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5))
h3cIfQoSBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5, 1), )
if mibBuilder.loadTexts: h3cIfQoSBandwidthTable.setStatus('current')
h3cIfQoSBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSBandwidthEntry.setStatus('current')
h3cIfQoSMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSMaxBandwidth.setStatus('current')
h3cIfQoSReservedBandwidthPct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSReservedBandwidthPct.setStatus('current')
h3cIfQoSBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSBandwidthRowStatus.setStatus('current')
h3cIfQoSQmtokenGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 6))
h3cIfQoSQmtokenTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 6, 1), )
if mibBuilder.loadTexts: h3cIfQoSQmtokenTable.setStatus('current')
h3cIfQoSQmtokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSQmtokenEntry.setStatus('current')
h3cIfQoSQmtokenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSQmtokenNumber.setStatus('current')
h3cIfQoSQmtokenRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSQmtokenRosStatus.setStatus('current')
h3cIfQoSRTPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7))
h3cIfQoSRTPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1))
h3cIfQoSRTPQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSRTPQConfigTable.setStatus('current')
h3cIfQoSRTPQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSRTPQConfigEntry.setStatus('current')
h3cIfQoSRTPQStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRTPQStartPort.setStatus('current')
h3cIfQoSRTPQEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRTPQEndPort.setStatus('current')
h3cIfQoSRTPQReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRTPQReservedBandwidth.setStatus('current')
h3cIfQoSRTPQCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRTPQCbs.setStatus('current')
h3cIfQoSRTPQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRTPQRowStatus.setStatus('current')
h3cIfQoSRTPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2))
h3cIfQoSRTPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSRTPQRunInfoTable.setStatus('current')
h3cIfQoSRTPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSRTPQRunInfoEntry.setStatus('current')
h3cIfQoSRTPQPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSRTPQPacketNumber.setStatus('current')
h3cIfQoSRTPQPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSRTPQPacketSize.setStatus('current')
h3cIfQoSRTPQOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSRTPQOutputPackets.setStatus('current')
h3cIfQoSRTPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 7, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSRTPQDiscardPackets.setStatus('current')
h3cIfQoSCarListObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8))
h3cIfQoCarListGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1))
h3cIfQoSCarlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSCarlTable.setStatus('current')
h3cIfQoSCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSCarlListNum"))
if mibBuilder.loadTexts: h3cIfQoSCarlEntry.setStatus('current')
h3cIfQoSCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIfQoSCarlListNum.setStatus('current')
h3cIfQoSCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddress", 1), ("precMask", 2), ("dscpMask", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCarlParaType.setStatus('current')
h3cIfQoSCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCarlParaValue.setStatus('current')
h3cIfQoSCarlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 2, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSCarlRowStatus.setStatus('current')
h3cIfQoSLineRateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3))
h3cIfQoSLRConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1), )
if mibBuilder.loadTexts: h3cIfQoSLRConfigTable.setStatus('current')
h3cIfQoSLRConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSLRDirection"))
if mibBuilder.loadTexts: h3cIfQoSLRConfigEntry.setStatus('current')
h3cIfQoSLRDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1, 1), Direction())
if mibBuilder.loadTexts: h3cIfQoSLRDirection.setStatus('current')
h3cIfQoSLRCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSLRCir.setStatus('current')
h3cIfQoSLRCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSLRCbs.setStatus('current')
h3cIfQoSLREbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSLREbs.setStatus('current')
h3cIfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSRowStatus.setStatus('current')
h3cIfQoSLRRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2), )
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoTable.setStatus('current')
h3cIfQoSLRRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSLRDirection"))
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoEntry.setStatus('current')
h3cIfQoSLRRunInfoPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoPassedPackets.setStatus('current')
h3cIfQoSLRRunInfoPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoPassedBytes.setStatus('current')
h3cIfQoSLRRunInfoDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoDelayedPackets.setStatus('current')
h3cIfQoSLRRunInfoDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoDelayedBytes.setStatus('current')
h3cIfQoSLRRunInfoActiveShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSLRRunInfoActiveShaping.setStatus('current')
h3cIfQoSCARObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4))
h3cIfQoSAggregativeCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1))
h3cIfQoSAggregativeCarNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarNextIndex.setStatus('current')
h3cIfQoSAggregativeCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarConfigTable.setStatus('current')
h3cIfQoSAggregativeCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarConfigEntry.setStatus('current')
h3cIfQoSAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarIndex.setStatus('current')
h3cIfQoSAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarName.setStatus('current')
h3cIfQoSAggregativeCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarCir.setStatus('current')
h3cIfQoSAggregativeCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarCbs.setStatus('current')
h3cIfQoSAggregativeCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarEbs.setStatus('current')
h3cIfQoSAggregativeCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarPir.setStatus('current')
h3cIfQoSAggregativeCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 7), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarGreenActionType.setStatus('current')
h3cIfQoSAggregativeCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarGreenActionValue.setStatus('current')
h3cIfQoSAggregativeCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 9), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarYellowActionType.setStatus('current')
h3cIfQoSAggregativeCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarYellowActionValue.setStatus('current')
h3cIfQoSAggregativeCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 11), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRedActionType.setStatus('current')
h3cIfQoSAggregativeCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRedActionValue.setStatus('current')
h3cIfQoSAggregativeCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregative", 1), ("notAggregative", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarType.setStatus('current')
h3cIfQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRowStatus.setStatus('current')
h3cIfQoSAggregativeCarApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3), )
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyTable.setStatus('current')
h3cIfQoSAggregativeCarApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSAggregativeCarApplyDirection"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSAggregativeCarApplyRuleType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSAggregativeCarApplyRuleValue"))
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyEntry.setStatus('current')
h3cIfQoSAggregativeCarApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1, 1), Direction())
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyDirection.setStatus('current')
h3cIfQoSAggregativeCarApplyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyRuleType.setStatus('current')
h3cIfQoSAggregativeCarApplyRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyRuleValue.setStatus('current')
h3cIfQoSAggregativeCarApplyCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyCarIndex.setStatus('current')
h3cIfQoSAggregativeCarApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarApplyRowStatus.setStatus('current')
h3cIfQoSAggregativeCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4), )
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRunInfoTable.setStatus('current')
h3cIfQoSAggregativeCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRunInfoEntry.setStatus('current')
h3cIfQoSAggregativeCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarGreenPackets.setStatus('current')
h3cIfQoSAggregativeCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarGreenBytes.setStatus('current')
h3cIfQoSAggregativeCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarYellowPackets.setStatus('current')
h3cIfQoSAggregativeCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarYellowBytes.setStatus('current')
h3cIfQoSAggregativeCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRedPackets.setStatus('current')
h3cIfQoSAggregativeCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSAggregativeCarRedBytes.setStatus('current')
h3cIfQoSTricolorCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2))
h3cIfQoSTricolorCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSTricolorCarConfigTable.setStatus('current')
h3cIfQoSTricolorCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarDirection"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: h3cIfQoSTricolorCarConfigEntry.setStatus('current')
h3cIfQoSTricolorCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 1), Direction())
if mibBuilder.loadTexts: h3cIfQoSTricolorCarDirection.setStatus('current')
h3cIfQoSTricolorCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: h3cIfQoSTricolorCarType.setStatus('current')
h3cIfQoSTricolorCarValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: h3cIfQoSTricolorCarValue.setStatus('current')
h3cIfQoSTricolorCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarCir.setStatus('current')
h3cIfQoSTricolorCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarCbs.setStatus('current')
h3cIfQoSTricolorCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarEbs.setStatus('current')
h3cIfQoSTricolorCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarPir.setStatus('current')
h3cIfQoSTricolorCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 8), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarGreenActionType.setStatus('current')
h3cIfQoSTricolorCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarGreenActionValue.setStatus('current')
h3cIfQoSTricolorCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 10), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarYellowActionType.setStatus('current')
h3cIfQoSTricolorCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarYellowActionValue.setStatus('current')
h3cIfQoSTricolorCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 12), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRedActionType.setStatus('current')
h3cIfQoSTricolorCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRedActionValue.setStatus('current')
h3cIfQoSTricolorCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRowStatus.setStatus('current')
h3cIfQoSTricolorCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2), )
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRunInfoTable.setStatus('current')
h3cIfQoSTricolorCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarDirection"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRunInfoEntry.setStatus('current')
h3cIfQoSTricolorCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarGreenPackets.setStatus('current')
h3cIfQoSTricolorCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarGreenBytes.setStatus('current')
h3cIfQoSTricolorCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarYellowPackets.setStatus('current')
h3cIfQoSTricolorCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarYellowBytes.setStatus('current')
h3cIfQoSTricolorCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRedPackets.setStatus('current')
h3cIfQoSTricolorCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSTricolorCarRedBytes.setStatus('current')
h3cIfQoSGTSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5))
h3cIfQoSGTSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1), )
if mibBuilder.loadTexts: h3cIfQoSGTSConfigTable.setStatus('current')
h3cIfQoSGTSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSGTSClassRuleType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: h3cIfQoSGTSConfigEntry.setStatus('current')
h3cIfQoSGTSClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("queue", 4))))
if mibBuilder.loadTexts: h3cIfQoSGTSClassRuleType.setStatus('current')
h3cIfQoSGTSClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cIfQoSGTSClassRuleValue.setStatus('current')
h3cIfQoSGTSCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSGTSCir.setStatus('current')
h3cIfQoSGTSCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSGTSCbs.setStatus('current')
h3cIfQoSGTSEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSGTSEbs.setStatus('current')
h3cIfQoSGTSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSGTSQueueLength.setStatus('current')
h3cIfQoSGTSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSGTSConfigRowStatus.setStatus('current')
h3cIfQoSGTSRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2), )
if mibBuilder.loadTexts: h3cIfQoSGTSRunInfoTable.setStatus('current')
h3cIfQoSGTSRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSGTSClassRuleType"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: h3cIfQoSGTSRunInfoEntry.setStatus('current')
h3cIfQoSGTSQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSQueueSize.setStatus('current')
h3cIfQoSGTSPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSPassedPackets.setStatus('current')
h3cIfQoSGTSPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSPassedBytes.setStatus('current')
h3cIfQoSGTSDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSDiscardPackets.setStatus('current')
h3cIfQoSGTSDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSDiscardBytes.setStatus('current')
h3cIfQoSGTSDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSDelayedPackets.setStatus('current')
h3cIfQoSGTSDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSGTSDelayedBytes.setStatus('current')
h3cIfQoSWREDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6))
h3cIfQoSWredGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1))
h3cIfQoSWredGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredGroupNextIndex.setStatus('current')
h3cIfQoSWredGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSWredGroupTable.setStatus('current')
h3cIfQoSWredGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupIndex"))
if mibBuilder.loadTexts: h3cIfQoSWredGroupEntry.setStatus('current')
h3cIfQoSWredGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIfQoSWredGroupIndex.setStatus('current')
h3cIfQoSWredGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupName.setStatus('current')
h3cIfQoSWredGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userdefined", 0), ("dot1p", 1), ("ippre", 2), ("dscp", 3), ("localpre", 4), ("atmclp", 5), ("frde", 6), ("exp", 7), ("queue", 8), ("dropLevel", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupType.setStatus('current')
h3cIfQoSWredGroupWeightingConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupWeightingConstant.setStatus('current')
h3cIfQoSWredGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupRowStatus.setStatus('current')
h3cIfQoSWredGroupContentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3), )
if mibBuilder.loadTexts: h3cIfQoSWredGroupContentTable.setStatus('current')
h3cIfQoSWredGroupContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupContentIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: h3cIfQoSWredGroupContentEntry.setStatus('current')
h3cIfQoSWredGroupContentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: h3cIfQoSWredGroupContentIndex.setStatus('current')
h3cIfQoSWredGroupContentSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: h3cIfQoSWredGroupContentSubIndex.setStatus('current')
h3cIfQoSWredLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredLowLimit.setStatus('current')
h3cIfQoSWredHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredHighLimit.setStatus('current')
h3cIfQoSWredDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredDiscardProb.setStatus('current')
h3cIfQoSWredGroupExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupExponent.setStatus('current')
h3cIfQoSWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredRowStatus.setStatus('current')
h3cIfQoSWredGroupApplyIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 4), )
if mibBuilder.loadTexts: h3cIfQoSWredGroupApplyIfTable.setStatus('current')
h3cIfQoSWredGroupApplyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSWredGroupApplyIfEntry.setStatus('current')
h3cIfQoSWredGroupApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupApplyIndex.setStatus('current')
h3cIfQoSWredGroupApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredGroupApplyName.setStatus('current')
h3cIfQoSWredGroupIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSWredGroupIfRowStatus.setStatus('current')
h3cIfQoSWredApplyIfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 5), )
if mibBuilder.loadTexts: h3cIfQoSWredApplyIfRunInfoTable.setStatus('current')
h3cIfQoSWredApplyIfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupContentIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: h3cIfQoSWredApplyIfRunInfoEntry.setStatus('current')
h3cIfQoSWredPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredPreRandomDropNum.setStatus('current')
h3cIfQoSWredPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWredPreTailDropNum.setStatus('current')
h3cIfQoSPortWredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2))
h3cIfQoSPortWredWeightConstantTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 1), )
if mibBuilder.loadTexts: h3cIfQoSPortWredWeightConstantTable.setStatus('current')
h3cIfQoSPortWredWeightConstantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSPortWredWeightConstantEntry.setStatus('current')
h3cIfQoSPortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 1, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredEnable.setStatus('current')
h3cIfQoSPortWredWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredWeightConstant.setStatus('current')
h3cIfQoSPortWredWeightConstantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredWeightConstantRowStatus.setStatus('current')
h3cIfQoSPortWredPreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2), )
if mibBuilder.loadTexts: h3cIfQoSPortWredPreConfigTable.setStatus('current')
h3cIfQoSPortWredPreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: h3cIfQoSPortWredPreConfigEntry.setStatus('current')
h3cIfQoSPortWredPreID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIfQoSPortWredPreID.setStatus('current')
h3cIfQoSPortWredPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredPreLowLimit.setStatus('current')
h3cIfQoSPortWredPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredPreHighLimit.setStatus('current')
h3cIfQoSPortWredPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredPreDiscardProbability.setStatus('current')
h3cIfQoSPortWredPreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPortWredPreRowStatus.setStatus('current')
h3cIfQoSPortWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 3), )
if mibBuilder.loadTexts: h3cIfQoSPortWredRunInfoTable.setStatus('current')
h3cIfQoSPortWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: h3cIfQoSPortWredRunInfoEntry.setStatus('current')
h3cIfQoSWREDTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWREDTailDropNum.setStatus('current')
h3cIfQoSWREDRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSWREDRandomDropNum.setStatus('current')
h3cIfQoSPortPriorityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7))
h3cIfQoSPortPriorityConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1))
h3cIfQoSPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSPortPriorityTable.setStatus('current')
h3cIfQoSPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSPortPriorityEntry.setStatus('current')
h3cIfQoSPortPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSPortPriorityValue.setStatus('current')
h3cIfQoSPortPirorityTrustTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSPortPirorityTrustTable.setStatus('current')
h3cIfQoSPortPirorityTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSPortPirorityTrustEntry.setStatus('current')
h3cIfQoSPortPriorityTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrust", 1), ("dot1p", 2), ("dscp", 3), ("exp", 4))).clone('untrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSPortPriorityTrustTrustType.setStatus('current')
h3cIfQoSPortPriorityTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cIfQoSPortPriorityTrustOvercastType.setStatus('current')
h3cIfQoSMapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9))
h3cIfQoSPriMapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1))
h3cIfQoSPriMapGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupNextIndex.setStatus('current')
h3cIfQoSPriMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2), )
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupTable.setStatus('current')
h3cIfQoSPriMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSPriMapGroupIndex"))
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupEntry.setStatus('current')
h3cIfQoSPriMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupIndex.setStatus('current')
h3cIfQoSPriMapGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("userdefined", 1), ("dot1p-dp", 2), ("dot1p-dscp", 3), ("dot1p-lp", 4), ("dscp-dot1p", 5), ("dscp-dp", 6), ("dscp-dscp", 7), ("dscp-lp", 8), ("exp-dp", 9), ("exp-lp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupType.setStatus('current')
h3cIfQoSPriMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupName.setStatus('current')
h3cIfQoSPriMapGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupRowStatus.setStatus('current')
h3cIfQoSPriMapContentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 3), )
if mibBuilder.loadTexts: h3cIfQoSPriMapContentTable.setStatus('current')
h3cIfQoSPriMapContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 3, 1), ).setIndexNames((0, "H3C-IFQOS2-MIB", "h3cIfQoSPriMapGroupIndex"), (0, "H3C-IFQOS2-MIB", "h3cIfQoSPriMapGroupImportValue"))
if mibBuilder.loadTexts: h3cIfQoSPriMapContentEntry.setStatus('current')
h3cIfQoSPriMapGroupImportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupImportValue.setStatus('current')
h3cIfQoSPriMapGroupExportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPriMapGroupExportValue.setStatus('current')
h3cIfQoSPriMapContentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 9, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSPriMapContentRowStatus.setStatus('current')
h3cIfQoSL3PlusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10))
h3cIfQoSPortBindingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10, 1))
h3cIfQoSPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10, 1, 1), )
if mibBuilder.loadTexts: h3cIfQoSPortBindingTable.setStatus('current')
h3cIfQoSPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cIfQoSPortBindingEntry.setStatus('current')
h3cIfQoSBindingIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSBindingIf.setStatus('current')
h3cIfQoSBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 10, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cIfQoSBindingRowStatus.setStatus('current')
h3cQoSTraStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11))
h3cQoSTraStaConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1))
h3cQoSIfTraStaConfigInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1), )
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigInfoTable.setStatus('current')
h3cQoSIfTraStaConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cQoSIfTraStaConfigDirection"))
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigInfoEntry.setStatus('current')
h3cQoSIfTraStaConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 1), Direction())
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigDirection.setStatus('current')
h3cQoSIfTraStaConfigQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigQueue.setStatus('current')
h3cQoSIfTraStaConfigDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigDot1p.setStatus('current')
h3cQoSIfTraStaConfigDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigDscp.setStatus('current')
h3cQoSIfTraStaConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigVlan.setStatus('current')
h3cQoSIfTraStaConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cQoSIfTraStaConfigStatus.setStatus('current')
h3cQoSTraStaRunGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2))
h3cQoSIfTraStaRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1), )
if mibBuilder.loadTexts: h3cQoSIfTraStaRunInfoTable.setStatus('current')
h3cQoSIfTraStaRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-IFQOS2-MIB", "h3cQoSIfTraStaRunObjectType"), (0, "H3C-IFQOS2-MIB", "h3cQoSIfTraStaRunObjectValue"), (0, "H3C-IFQOS2-MIB", "h3cQoSIfTraStaRunDirection"))
if mibBuilder.loadTexts: h3cQoSIfTraStaRunInfoEntry.setStatus('current')
h3cQoSIfTraStaRunObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue", 1), ("dot1p", 2), ("dscp", 3), ("vlanID", 4))))
if mibBuilder.loadTexts: h3cQoSIfTraStaRunObjectType.setStatus('current')
h3cQoSIfTraStaRunObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cQoSIfTraStaRunObjectValue.setStatus('current')
h3cQoSIfTraStaRunDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 3), Direction())
if mibBuilder.loadTexts: h3cQoSIfTraStaRunDirection.setStatus('current')
h3cQoSIfTraStaRunPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunPassPackets.setStatus('current')
h3cQoSIfTraStaRunDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunDropPackets.setStatus('current')
h3cQoSIfTraStaRunPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunPassBytes.setStatus('current')
h3cQoSIfTraStaRunDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunDropBytes.setStatus('current')
h3cQoSIfTraStaRunPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunPassPPS.setStatus('current')
h3cQoSIfTraStaRunPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 65, 1, 11, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cQoSIfTraStaRunPassBPS.setStatus('current')
mibBuilder.exportSymbols("H3C-IFQOS2-MIB", h3cIfQoSPQClassRuleTable=h3cIfQoSPQClassRuleTable, h3cQoSIfTraStaRunDropPackets=h3cQoSIfTraStaRunDropPackets, h3cIfQoSAggregativeCarYellowBytes=h3cIfQoSAggregativeCarYellowBytes, h3cQoSIfTraStaConfigVlan=h3cQoSIfTraStaConfigVlan, h3cIfQoSGTSEbs=h3cIfQoSGTSEbs, h3cQoSIfTraStaRunInfoEntry=h3cQoSIfTraStaRunInfoEntry, h3cIfQoSCQApplyRowStatus=h3cIfQoSCQApplyRowStatus, h3cIfQoSFIFOConfigEntry=h3cIfQoSFIFOConfigEntry, h3cIfQoSPQClassRuleValue=h3cIfQoSPQClassRuleValue, h3cIfQoSQmtokenGroup=h3cIfQoSQmtokenGroup, h3cIfQoSPortPriorityEntry=h3cIfQoSPortPriorityEntry, h3cIfQoSWredGroupWeightingConstant=h3cIfQoSWredGroupWeightingConstant, h3cIfQoSPQApplyTable=h3cIfQoSPQApplyTable, h3cIfQoSPortWredWeightConstantTable=h3cIfQoSPortWredWeightConstantTable, h3cIfQoSTricolorCarYellowPackets=h3cIfQoSTricolorCarYellowPackets, h3cIfQoSQueueGroupType=h3cIfQoSQueueGroupType, h3cIfQos2=h3cIfQos2, h3cIfQoSFIFORunInfoTable=h3cIfQoSFIFORunInfoTable, h3cIfQoSLRConfigTable=h3cIfQoSLRConfigTable, h3cIfQoSWredDropHPreNTcpBPS=h3cIfQoSWredDropHPreNTcpBPS, h3cIfQoSCarlRowStatus=h3cIfQoSCarlRowStatus, h3cIfQoSPQApplyRowStatus=h3cIfQoSPQApplyRowStatus, h3cIfQoSPortWredPreConfigTable=h3cIfQoSPortWredPreConfigTable, h3cIfQoSAggregativeCarApplyRuleType=h3cIfQoSAggregativeCarApplyRuleType, h3cIfQoSPQRunInfoEntry=h3cIfQoSPQRunInfoEntry, h3cIfQoSCQConfigGroup=h3cIfQoSCQConfigGroup, h3cQoSIfTraStaRunPassBPS=h3cQoSIfTraStaRunPassBPS, h3cIfQoSCarlParaValue=h3cIfQoSCarlParaValue, h3cIfQoSWredGroupApplyIndex=h3cIfQoSWredGroupApplyIndex, h3cIfQoSCQQueueLengthEntry=h3cIfQoSCQQueueLengthEntry, h3cIfQoSQmtokenEntry=h3cIfQoSQmtokenEntry, h3cIfQoSPriMapGroupTable=h3cIfQoSPriMapGroupTable, h3cIfQoSWredDropLPreNTcpPkts=h3cIfQoSWredDropLPreNTcpPkts, h3cIfQoSWredDropLPreNTcpPPS=h3cIfQoSWredDropLPreNTcpPPS, h3cIfQoSWFQQueueLength=h3cIfQoSWFQQueueLength, h3cIfQoSAggregativeCarPir=h3cIfQoSAggregativeCarPir, h3cIfQoSPortWredRunInfoEntry=h3cIfQoSPortWredRunInfoEntry, Direction=Direction, h3cIfQoSPortWredGroup=h3cIfQoSPortWredGroup, h3cIfQoSCQRunInfoSize=h3cIfQoSCQRunInfoSize, h3cIfQoSAggregativeCarRedBytes=h3cIfQoSAggregativeCarRedBytes, h3cIfQoSWredDropPkts=h3cIfQoSWredDropPkts, h3cIfQoSLRCir=h3cIfQoSLRCir, h3cIfQoSWredDropHPreTcpPkts=h3cIfQoSWredDropHPreTcpPkts, h3cIfQoSPortBindingTable=h3cIfQoSPortBindingTable, h3cIfQoSQSWeightTable=h3cIfQoSQSWeightTable, h3cIfQoSWredGroupGroup=h3cIfQoSWredGroupGroup, h3cIfQoSLineRateObjects=h3cIfQoSLineRateObjects, h3cIfQoSGTSCbs=h3cIfQoSGTSCbs, h3cIfQoSPriMapContentTable=h3cIfQoSPriMapContentTable, h3cQoSIfTraStaRunPassPackets=h3cQoSIfTraStaRunPassPackets, h3cIfQoSWredGroupTable=h3cIfQoSWredGroupTable, h3cIfQoSWredGroupContentTable=h3cIfQoSWredGroupContentTable, h3cIfQoSPortBindingGroup=h3cIfQoSPortBindingGroup, h3cIfQoSTricolorCarValue=h3cIfQoSTricolorCarValue, h3cIfQoSGTSDelayedBytes=h3cIfQoSGTSDelayedBytes, h3cIfQoSWredGroupContentIndex=h3cIfQoSWredGroupContentIndex, h3cIfQoSWFQConfigGroup=h3cIfQoSWFQConfigGroup, h3cIfQoSWredDropHPreNTcpPkts=h3cIfQoSWredDropHPreNTcpPkts, h3cIfQoSPQQueueLengthTable=h3cIfQoSPQQueueLengthTable, h3cQoSTraStaRunGroup=h3cQoSTraStaRunGroup, h3cIfQoSDropBytes=h3cIfQoSDropBytes, h3cQoSIfTraStaRunObjectValue=h3cQoSIfTraStaRunObjectValue, h3cIfQoSPortWredPreConfigEntry=h3cIfQoSPortWredPreConfigEntry, h3cIfQoSQSModeTable=h3cIfQoSQSModeTable, h3cIfQoSAggregativeCarRedPackets=h3cIfQoSAggregativeCarRedPackets, h3cIfQoSAggregativeCarGreenBytes=h3cIfQoSAggregativeCarGreenBytes, h3cIfQoSCQClassRuleQueueID=h3cIfQoSCQClassRuleQueueID, h3cIfQoSFIFORunInfoEntry=h3cIfQoSFIFORunInfoEntry, h3cIfQoSPortWredPreDiscardProbability=h3cIfQoSPortWredPreDiscardProbability, h3cIfQoSCarlListNum=h3cIfQoSCarlListNum, h3cIfQoSTricolorCarCir=h3cIfQoSTricolorCarCir, h3cIfQoSTricolorCarRedActionValue=h3cIfQoSTricolorCarRedActionValue, h3cIfQoSPortPirorityTrustEntry=h3cIfQoSPortPirorityTrustEntry, h3cIfQoSTailDropPkts=h3cIfQoSTailDropPkts, h3cIfQoSTailDropPPS=h3cIfQoSTailDropPPS, h3cIfQoSWredGroupEntry=h3cIfQoSWredGroupEntry, h3cIfQoSPortWredWeightConstantRowStatus=h3cIfQoSPortWredWeightConstantRowStatus, h3cIfQoSAggregativeCarNextIndex=h3cIfQoSAggregativeCarNextIndex, h3cIfQoSAggregativeCarRunInfoTable=h3cIfQoSAggregativeCarRunInfoTable, h3cIfQoSPriMapConfigGroup=h3cIfQoSPriMapConfigGroup, h3cIfQoSPQClassRuleType=h3cIfQoSPQClassRuleType, h3cIfQoSPassBytes=h3cIfQoSPassBytes, h3cIfQoSPriMapGroupEntry=h3cIfQoSPriMapGroupEntry, h3cIfQoSLRRunInfoActiveShaping=h3cIfQoSLRRunInfoActiveShaping, h3cIfQoSAggregativeCarApplyRowStatus=h3cIfQoSAggregativeCarApplyRowStatus, h3cQos2=h3cQos2, h3cIfQoSGTSObjects=h3cIfQoSGTSObjects, h3cIfQoSPQRunInfoTable=h3cIfQoSPQRunInfoTable, h3cIfQoSCQDefaultEntry=h3cIfQoSCQDefaultEntry, h3cIfQoSLRRunInfoDelayedBytes=h3cIfQoSLRRunInfoDelayedBytes, h3cIfQoSWredGroupRowStatus=h3cIfQoSWredGroupRowStatus, h3cIfQoSPortPriorityTable=h3cIfQoSPortPriorityTable, h3cIfQoSHardwareQueueObjects=h3cIfQoSHardwareQueueObjects, h3cQoSIfTraStaConfigStatus=h3cQoSIfTraStaConfigStatus, h3cIfQoSWFQTable=h3cIfQoSWFQTable, h3cIfQoSWFQSize=h3cIfQoSWFQSize, h3cIfQoSLRCbs=h3cIfQoSLRCbs, h3cIfQoSGTSCir=h3cIfQoSGTSCir, h3cIfQoSWredGroupIndex=h3cIfQoSWredGroupIndex, h3cIfQoSTricolorCarGreenPackets=h3cIfQoSTricolorCarGreenPackets, h3cIfQoSLRDirection=h3cIfQoSLRDirection, h3cIfQoSHardwareQueueRunInfoTable=h3cIfQoSHardwareQueueRunInfoTable, h3cIfQoSCQQueueServing=h3cIfQoSCQQueueServing, h3cIfQoSWredGroupIfRowStatus=h3cIfQoSWredGroupIfRowStatus, h3cIfQoSPQQueueLengthValue=h3cIfQoSPQQueueLengthValue, h3cIfQoSQmtokenTable=h3cIfQoSQmtokenTable, h3cIfQoSAggregativeCarApplyRuleValue=h3cIfQoSAggregativeCarApplyRuleValue, h3cIfQoSTricolorCarCbs=h3cIfQoSTricolorCarCbs, h3cIfQoSAggregativeCarRedActionType=h3cIfQoSAggregativeCarRedActionType, h3cIfQoSPortWredPreLowLimit=h3cIfQoSPortWredPreLowLimit, h3cIfQoSPriMapGroupNextIndex=h3cIfQoSPriMapGroupNextIndex, h3cIfQoSWFQRunInfoEntry=h3cIfQoSWFQRunInfoEntry, h3cIfQoSGTSRunInfoTable=h3cIfQoSGTSRunInfoTable, h3cIfQoSAggregativeCarIndex=h3cIfQoSAggregativeCarIndex, h3cIfQoSQSWeightEntry=h3cIfQoSQSWeightEntry, h3cIfQoSTricolorCarGreenActionValue=h3cIfQoSTricolorCarGreenActionValue, h3cIfQoSAggregativeCarApplyTable=h3cIfQoSAggregativeCarApplyTable, h3cIfQoSPortPirorityTrustTable=h3cIfQoSPortPirorityTrustTable, h3cIfQoSLRRunInfoEntry=h3cIfQoSLRRunInfoEntry, h3cIfQoSGTSClassRuleValue=h3cIfQoSGTSClassRuleValue, h3cIfQoSCQRunInfoGroup=h3cIfQoSCQRunInfoGroup, h3cIfQoSAggregativeCarApplyDirection=h3cIfQoSAggregativeCarApplyDirection, h3cIfQoSWredDropLPreTcpPPS=h3cIfQoSWredDropLPreTcpPPS, h3cIfQoSCarlTable=h3cIfQoSCarlTable, h3cIfQoSTricolorCarRedBytes=h3cIfQoSTricolorCarRedBytes, h3cIfQoSCQRunInfoLength=h3cIfQoSCQRunInfoLength, h3cIfQoSWFQObject=h3cIfQoSWFQObject, h3cIfQoSWredLowLimit=h3cIfQoSWredLowLimit, h3cIfQoSPassPackets=h3cIfQoSPassPackets, h3cIfQoSAggregativeCarGreenActionValue=h3cIfQoSAggregativeCarGreenActionValue, h3cIfQoSWREDObjects=h3cIfQoSWREDObjects, h3cIfQoSAggregativeCarGreenPackets=h3cIfQoSAggregativeCarGreenPackets, h3cIfQoSWredDropBytes=h3cIfQoSWredDropBytes, h3cIfQoSAggregativeCarRowStatus=h3cIfQoSAggregativeCarRowStatus, h3cIfQoSPortWredWeightConstantEntry=h3cIfQoSPortWredWeightConstantEntry, h3cIfQoSBandwidthTable=h3cIfQoSBandwidthTable, h3cIfQoSPriMapGroupRowStatus=h3cIfQoSPriMapGroupRowStatus, h3cIfQoSFIFOConfigTable=h3cIfQoSFIFOConfigTable, h3cIfQoSAggregativeCarName=h3cIfQoSAggregativeCarName, h3cIfQoSQSModeEntry=h3cIfQoSQSModeEntry, h3cQoSIfTraStaConfigInfoTable=h3cQoSIfTraStaConfigInfoTable, h3cIfQoSBandwidthEntry=h3cIfQoSBandwidthEntry, h3cIfQoSAggregativeCarApplyCarIndex=h3cIfQoSAggregativeCarApplyCarIndex, h3cIfQoSFIFOObject=h3cIfQoSFIFOObject, h3cQoSIfTraStaRunPassPPS=h3cQoSIfTraStaRunPassPPS, h3cIfQoSPriMapContentEntry=h3cIfQoSPriMapContentEntry, h3cIfQoSWredPreRandomDropNum=h3cIfQoSWredPreRandomDropNum, h3cIfQoSWredApplyIfRunInfoEntry=h3cIfQoSWredApplyIfRunInfoEntry, h3cIfQoSPQListNumber=h3cIfQoSPQListNumber, h3cIfQoSQSMode=h3cIfQoSQSMode, h3cIfQoSPriMapGroupName=h3cIfQoSPriMapGroupName, h3cIfQoSGTSDiscardBytes=h3cIfQoSGTSDiscardBytes, h3cIfQoSPQLength=h3cIfQoSPQLength, h3cIfQoSHQueueTcpRunInfoEntry=h3cIfQoSHQueueTcpRunInfoEntry, h3cIfQoSCQClassRuleValue=h3cIfQoSCQClassRuleValue, h3cIfQoSCQClassRuleType=h3cIfQoSCQClassRuleType, h3cIfQoSHardwareQueueRunInfoGroup=h3cIfQoSHardwareQueueRunInfoGroup, h3cIfQoSPortWredEnable=h3cIfQoSPortWredEnable, h3cIfQoSPQDefaultQueueType=h3cIfQoSPQDefaultQueueType, h3cIfQoSWredDropHPreNTcpPPS=h3cIfQoSWredDropHPreNTcpPPS, h3cIfQoSRTPQRowStatus=h3cIfQoSRTPQRowStatus, h3cIfQoSTricolorCarRunInfoEntry=h3cIfQoSTricolorCarRunInfoEntry, h3cIfQoSWFQType=h3cIfQoSWFQType, h3cIfQoSRTPQCbs=h3cIfQoSRTPQCbs, h3cIfQoSWFQRunInfoGroup=h3cIfQoSWFQRunInfoGroup, h3cIfQoSSoftwareQueueObjects=h3cIfQoSSoftwareQueueObjects, h3cIfQoSWFQQueueNumber=h3cIfQoSWFQQueueNumber, h3cIfQoSGTSQueueSize=h3cIfQoSGTSQueueSize, h3cIfQoSQueueLengthInBytes=h3cIfQoSQueueLengthInBytes, h3cIfQoSGTSRunInfoEntry=h3cIfQoSGTSRunInfoEntry, h3cIfQoSWFQLength=h3cIfQoSWFQLength, h3cIfQoSPortWredPreID=h3cIfQoSPortWredPreID, h3cIfQoSPriMapGroupType=h3cIfQoSPriMapGroupType, h3cIfQoSTricolorCarYellowActionValue=h3cIfQoSTricolorCarYellowActionValue, h3cIfQoSGTSPassedBytes=h3cIfQoSGTSPassedBytes, h3cIfQoSAggregativeCarType=h3cIfQoSAggregativeCarType, h3cIfQoSCarListObject=h3cIfQoSCarListObject, h3cIfQoSRTPQReservedBandwidth=h3cIfQoSRTPQReservedBandwidth, h3cIfQoSGTSDiscardPackets=h3cIfQoSGTSDiscardPackets, h3cIfQoSGTSConfigTable=h3cIfQoSGTSConfigTable, h3cIfQoSGTSQueueLength=h3cIfQoSGTSQueueLength, h3cIfQoSBandwidthGroup=h3cIfQoSBandwidthGroup, h3fIfQosWFQhashedTotalQueues=h3fIfQosWFQhashedTotalQueues, h3cIfQoSAggregativeCarConfigTable=h3cIfQoSAggregativeCarConfigTable, h3cIfQoSPQSize=h3cIfQoSPQSize, h3cIfQoSPortWredRunInfoTable=h3cIfQoSPortWredRunInfoTable, h3cIfQoSWredGroupExponent=h3cIfQoSWredGroupExponent, h3cIfQoSWredDropLPreTcpBPS=h3cIfQoSWredDropLPreTcpBPS, h3cIfQoSPassBPS=h3cIfQoSPassBPS, h3cIfQoSWredDropHPreTcpBPS=h3cIfQoSWredDropHPreTcpBPS, h3cIfQoSQueueID=h3cIfQoSQueueID, h3cIfQoSPortWredWeightConstant=h3cIfQoSPortWredWeightConstant, h3cIfQoSTricolorCarConfigEntry=h3cIfQoSTricolorCarConfigEntry, h3cIfQoSGTSDelayedPackets=h3cIfQoSGTSDelayedPackets, h3cIfQoSAggregativeCarConfigEntry=h3cIfQoSAggregativeCarConfigEntry, h3cIfQoSRowStatus=h3cIfQoSRowStatus, h3cIfQoSPortPriorityObjects=h3cIfQoSPortPriorityObjects, h3cIfQoSAggregativeCarApplyEntry=h3cIfQoSAggregativeCarApplyEntry, h3cIfQoSTricolorCarRedPackets=h3cIfQoSTricolorCarRedPackets, h3cIfQoSHardwareQueueRunInfoEntry=h3cIfQoSHardwareQueueRunInfoEntry, h3cIfQoSCQDefaultQueueID=h3cIfQoSCQDefaultQueueID, h3cIfQoSTailDropBPS=h3cIfQoSTailDropBPS, h3cIfQoSTricolorCarYellowActionType=h3cIfQoSTricolorCarYellowActionType, h3cIfQoSGTSConfigRowStatus=h3cIfQoSGTSConfigRowStatus, h3cIfQoSHQueueTcpRunInfoTable=h3cIfQoSHQueueTcpRunInfoTable, h3cIfQoSCQRunInfoDiscardPackets=h3cIfQoSCQRunInfoDiscardPackets, PYSNMP_MODULE_ID=h3cIfQos2, h3cIfQoSWredDropHPreTcpBytes=h3cIfQoSWredDropHPreTcpBytes, h3cIfQoSTricolorCarRunInfoTable=h3cIfQoSTricolorCarRunInfoTable, h3cIfQoSPortPriorityTrustTrustType=h3cIfQoSPortPriorityTrustTrustType, h3cIfQoSCQObject=h3cIfQoSCQObject, h3cIfQoSGTSPassedPackets=h3cIfQoSGTSPassedPackets, h3cIfQoSCurQueueBPS=h3cIfQoSCurQueueBPS, h3cIfQoSRTPQConfigGroup=h3cIfQoSRTPQConfigGroup, h3cIfQoSQmtokenRosStatus=h3cIfQoSQmtokenRosStatus, h3cIfQoSTricolorCarDirection=h3cIfQoSTricolorCarDirection, h3cIfQoSAggregativeCarRedActionValue=h3cIfQoSAggregativeCarRedActionValue, h3cIfQoSWredGroupApplyIfTable=h3cIfQoSWredGroupApplyIfTable, CarAction=CarAction, h3cIfQoSMaxBandwidth=h3cIfQoSMaxBandwidth, h3cIfQoSDropPackets=h3cIfQoSDropPackets, h3cIfQoSTricolorCarEbs=h3cIfQoSTricolorCarEbs, h3cIfQoSReservedBandwidthPct=h3cIfQoSReservedBandwidthPct, h3cIfQoSWredGroupApplyIfEntry=h3cIfQoSWredGroupApplyIfEntry, h3cIfQoSPriMapGroupExportValue=h3cIfQoSPriMapGroupExportValue, h3cIfQoSAggregativeCarGreenActionType=h3cIfQoSAggregativeCarGreenActionType, h3cIfQoSQueueLengthInPkts=h3cIfQoSQueueLengthInPkts, h3cIfQoSCQListNumber=h3cIfQoSCQListNumber, h3cIfQoSCQRunInfoTable=h3cIfQoSCQRunInfoTable, h3cIfQoSCarlParaType=h3cIfQoSCarlParaType, h3cIfQoSWredGroupContentSubIndex=h3cIfQoSWredGroupContentSubIndex, h3cIfQoSBindingIf=h3cIfQoSBindingIf, h3cQoSIfTraStaConfigDirection=h3cQoSIfTraStaConfigDirection, h3cIfQoSCQQueueLengthTable=h3cIfQoSCQQueueLengthTable, h3cIfQoSAggregativeCarYellowActionType=h3cIfQoSAggregativeCarYellowActionType, h3cIfQoSPQClassRuleQueueType=h3cIfQoSPQClassRuleQueueType, h3cIfQoSWFQHashedMaxActiveQueues=h3cIfQoSWFQHashedMaxActiveQueues, h3cIfQoSTricolorCarType=h3cIfQoSTricolorCarType, h3cIfQoSAggregativeCarCir=h3cIfQoSAggregativeCarCir, h3cIfQoSPQQueueLengthEntry=h3cIfQoSPQQueueLengthEntry, h3cIfQoSPriMapGroupIndex=h3cIfQoSPriMapGroupIndex, h3cIfQoSCQClassRuleEntry=h3cIfQoSCQClassRuleEntry, h3cIfQoSRTPQConfigTable=h3cIfQoSRTPQConfigTable, h3cIfQoSWredDropHPreNTcpBytes=h3cIfQoSWredDropHPreNTcpBytes, h3cIfQoSWredGroupContentEntry=h3cIfQoSWredGroupContentEntry, h3cIfQoSWFQRowStatus=h3cIfQoSWFQRowStatus, h3cIfQoSAggregativeCarGroup=h3cIfQoSAggregativeCarGroup, h3cIfQoSTricolorCarRowStatus=h3cIfQoSTricolorCarRowStatus, h3cIfQoCarListGroup=h3cIfQoCarListGroup, h3cQoSIfTraStaConfigDscp=h3cQoSIfTraStaConfigDscp, h3cIfQoSWredGroupName=h3cIfQoSWredGroupName, h3cIfQoSGTSClassRuleType=h3cIfQoSGTSClassRuleType, h3cIfQoSQmtokenNumber=h3cIfQoSQmtokenNumber)
mibBuilder.exportSymbols("H3C-IFQOS2-MIB", h3cIfQoSPortPriorityTrustOvercastType=h3cIfQoSPortPriorityTrustOvercastType, h3cIfQoSQSValue=h3cIfQoSQSValue, h3cIfQoSPortBindingEntry=h3cIfQoSPortBindingEntry, h3cIfQoSWredDropLPreNTcpBytes=h3cIfQoSWredDropLPreNTcpBytes, h3cIfQoSPriMapGroupImportValue=h3cIfQoSPriMapGroupImportValue, h3cIfQoSWredGroupNextIndex=h3cIfQoSWredGroupNextIndex, h3cIfQoSRTPQPacketNumber=h3cIfQoSRTPQPacketNumber, h3cIfQoSWFQDiscardPackets=h3cIfQoSWFQDiscardPackets, h3cIfQoSRTPQEndPort=h3cIfQoSRTPQEndPort, h3cIfQoSPQDefaultEntry=h3cIfQoSPQDefaultEntry, h3cIfQoSTricolorCarRedActionType=h3cIfQoSTricolorCarRedActionType, h3cIfQoSRTPQOutputPackets=h3cIfQoSRTPQOutputPackets, h3cQoSIfTraStaRunInfoTable=h3cQoSIfTraStaRunInfoTable, h3cIfQoSWFQRunInfoTable=h3cIfQoSWFQRunInfoTable, h3cIfQoSPQClassRowStatus=h3cIfQoSPQClassRowStatus, h3cIfQoSPortPriorityConfigGroup=h3cIfQoSPortPriorityConfigGroup, h3cIfQoSCQApplyTable=h3cIfQoSCQApplyTable, h3cIfQoSPQDiscardPackets=h3cIfQoSPQDiscardPackets, h3cIfQoSCQDefaultTable=h3cIfQoSCQDefaultTable, h3cIfQoSPQClassRuleEntry=h3cIfQoSPQClassRuleEntry, h3cIfQoSRTPQObject=h3cIfQoSRTPQObject, h3cIfQoSLREbs=h3cIfQoSLREbs, h3cIfQoSAggregativeCarEbs=h3cIfQoSAggregativeCarEbs, h3cIfQoSWREDTailDropNum=h3cIfQoSWREDTailDropNum, h3cIfQoSTricolorCarYellowBytes=h3cIfQoSTricolorCarYellowBytes, h3cIfQoSPQType=h3cIfQoSPQType, h3cIfQoSTricolorCarConfigTable=h3cIfQoSTricolorCarConfigTable, h3cIfQoSPortWredPreHighLimit=h3cIfQoSPortWredPreHighLimit, h3cIfQoSWredGroupType=h3cIfQoSWredGroupType, h3cIfQoSCarlEntry=h3cIfQoSCarlEntry, PriorityQueue=PriorityQueue, h3cIfQoSPQApplyListNumber=h3cIfQoSPQApplyListNumber, h3cIfQoSPortWredPreRowStatus=h3cIfQoSPortWredPreRowStatus, h3cIfQoSWFQHashedActiveQueues=h3cIfQoSWFQHashedActiveQueues, h3cIfQoSBandwidthRowStatus=h3cIfQoSBandwidthRowStatus, h3cIfQoSTricolorCarGreenBytes=h3cIfQoSTricolorCarGreenBytes, h3cIfQoSLRRunInfoPassedBytes=h3cIfQoSLRRunInfoPassedBytes, h3cIfQoSRTPQPacketSize=h3cIfQoSRTPQPacketSize, h3cIfQoSCQRunInfoEntry=h3cIfQoSCQRunInfoEntry, h3cIfQoSRTPQRunInfoGroup=h3cIfQoSRTPQRunInfoGroup, h3cIfQoSPQRunInfoGroup=h3cIfQoSPQRunInfoGroup, h3cIfQoSTricolorCarPir=h3cIfQoSTricolorCarPir, h3cIfQoSPQConfigGroup=h3cIfQoSPQConfigGroup, h3cIfQoSCQClassRowStatus=h3cIfQoSCQClassRowStatus, h3cIfQoSWREDRandomDropNum=h3cIfQoSWREDRandomDropNum, h3cQoSIfTraStaConfigInfoEntry=h3cQoSIfTraStaConfigInfoEntry, h3cIfQoSWFQEntry=h3cIfQoSWFQEntry, h3cIfQoSGTSConfigEntry=h3cIfQoSGTSConfigEntry, h3cIfQoSCQQueueID=h3cIfQoSCQQueueID, h3cIfQoSAggregativeCarCbs=h3cIfQoSAggregativeCarCbs, h3cIfQoSWredDiscardProb=h3cIfQoSWredDiscardProb, h3cQoSIfTraStaRunPassBytes=h3cQoSIfTraStaRunPassBytes, h3cIfQoSWredDropPPS=h3cIfQoSWredDropPPS, h3cIfQoSPQObject=h3cIfQoSPQObject, h3cIfQoSAggregativeCarRunInfoEntry=h3cIfQoSAggregativeCarRunInfoEntry, h3cIfQoSFIFOSize=h3cIfQoSFIFOSize, h3cIfQoSPQQueueLengthType=h3cIfQoSPQQueueLengthType, h3cIfQoSWredApplyIfRunInfoTable=h3cIfQoSWredApplyIfRunInfoTable, h3cQoSTraStaConfigGroup=h3cQoSTraStaConfigGroup, h3cIfQoSRTPQDiscardPackets=h3cIfQoSRTPQDiscardPackets, h3cIfQoSAggregativeCarYellowPackets=h3cIfQoSAggregativeCarYellowPackets, h3cIfQoSTailDropBytes=h3cIfQoSTailDropBytes, h3cIfQoSQSMaxDelay=h3cIfQoSQSMaxDelay, h3cIfQoSCurQueueBytes=h3cIfQoSCurQueueBytes, h3cIfQoSWredDropLPreTcpBytes=h3cIfQoSWredDropLPreTcpBytes, h3cIfQoSFIFODiscardPackets=h3cIfQoSFIFODiscardPackets, h3cIfQoSLRRunInfoPassedPackets=h3cIfQoSLRRunInfoPassedPackets, h3cIfQoSQSType=h3cIfQoSQSType, h3cIfQoSCurQueuePPS=h3cIfQoSCurQueuePPS, h3cIfQoSHardwareQueueConfigGroup=h3cIfQoSHardwareQueueConfigGroup, h3cIfQoSPQDefaultTable=h3cIfQoSPQDefaultTable, h3cQoSIfTraStaRunDropBytes=h3cQoSIfTraStaRunDropBytes, h3cIfQoSAggregativeCarYellowActionValue=h3cIfQoSAggregativeCarYellowActionValue, h3cIfQoSWredDropLPreNTcpBPS=h3cIfQoSWredDropLPreNTcpBPS, h3cIfQoSL3PlusObjects=h3cIfQoSL3PlusObjects, h3cIfQoSWredRowStatus=h3cIfQoSWredRowStatus, h3cIfQoSRTPQStartPort=h3cIfQoSRTPQStartPort, h3cIfQoSTricolorCarGroup=h3cIfQoSTricolorCarGroup, h3cIfQoSWredDropHPreTcpPPS=h3cIfQoSWredDropHPreTcpPPS, h3cQoSIfTraStaRunObjectType=h3cQoSIfTraStaRunObjectType, h3cQoSIfTraStaConfigDot1p=h3cQoSIfTraStaConfigDot1p, h3cQoSIfTraStaRunDirection=h3cQoSIfTraStaRunDirection, h3cIfQoSCQQueueLength=h3cIfQoSCQQueueLength, h3cIfQoSMapObjects=h3cIfQoSMapObjects, h3cIfQoSLRConfigEntry=h3cIfQoSLRConfigEntry, h3cIfQoSRTPQRunInfoEntry=h3cIfQoSRTPQRunInfoEntry, h3cIfQoSWredPreTailDropNum=h3cIfQoSWredPreTailDropNum, h3cIfQoSWredDropBPS=h3cIfQoSWredDropBPS, h3cIfQoSPortPriorityValue=h3cIfQoSPortPriorityValue, h3cIfQoSRTPQConfigEntry=h3cIfQoSRTPQConfigEntry, h3cIfQoSCQApplyEntry=h3cIfQoSCQApplyEntry, h3cQoSTraStaObjects=h3cQoSTraStaObjects, h3cIfQoSTricolorCarGreenActionType=h3cIfQoSTricolorCarGreenActionType, h3cIfQoSFIFOMaxQueueLen=h3cIfQoSFIFOMaxQueueLen, h3cIfQoSWredHighLimit=h3cIfQoSWredHighLimit, h3cIfQoSWredDropLPreTcpPkts=h3cIfQoSWredDropLPreTcpPkts, h3cIfQoSPQApplyEntry=h3cIfQoSPQApplyEntry, h3cIfQoSWredGroupApplyName=h3cIfQoSWredGroupApplyName, h3cIfQoSBindingRowStatus=h3cIfQoSBindingRowStatus, h3cIfQoSLRRunInfoTable=h3cIfQoSLRRunInfoTable, h3cIfQoSCQClassRuleTable=h3cIfQoSCQClassRuleTable, h3cIfQoSCurQueuePkts=h3cIfQoSCurQueuePkts, h3cQoSIfTraStaConfigQueue=h3cQoSIfTraStaConfigQueue, h3cIfQoSCQApplyListNumber=h3cIfQoSCQApplyListNumber, h3cIfQoSLRRunInfoDelayedPackets=h3cIfQoSLRRunInfoDelayedPackets, h3cIfQoSPassPPS=h3cIfQoSPassPPS, h3cIfQoSPriMapContentRowStatus=h3cIfQoSPriMapContentRowStatus, h3cIfQoSRTPQRunInfoTable=h3cIfQoSRTPQRunInfoTable, h3cIfQoSCARObjects=h3cIfQoSCARObjects)
