#
# PySNMP MIB module VINES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VINES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, MibIdentifier, ModuleIdentity, Counter64, Gauge32, Unsigned32, IpAddress, Integer32, enterprises, NotificationType, Bits, iso, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "MibIdentifier", "ModuleIdentity", "Counter64", "Gauge32", "Unsigned32", "IpAddress", "Integer32", "enterprises", "NotificationType", "Bits", "iso", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
banyan = MibIdentifier((1, 3, 6, 1, 4, 1, 130))
vinesmibs = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1))
mib1 = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 1))
mib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2))
systemsummary = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 1))
services = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 2))
peripherals = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 3))
filesystem = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 4))
commresources = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 5))
vip = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 6))
vrtp = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 7))
vspp = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 8))
vinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 9))
os = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 10))
ossysstats = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1))
osinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2))
ossummstats = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3))
nmthresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 11))
trapdata = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 12))
ams = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 13))
mailservice = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 14))
vlogs = MibIdentifier((1, 3, 6, 1, 4, 1, 130, 1, 2, 15))
ssName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssName.setStatus('mandatory')
ssNetid = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssNetid.setStatus('mandatory')
ssSwRev = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSwRev.setStatus('mandatory')
ssLoadAvg1 = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssLoadAvg1.setStatus('mandatory')
ssLoadAvg5 = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssLoadAvg5.setStatus('mandatory')
ssLoadAvg15 = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssLoadAvg15.setStatus('mandatory')
ssMsgAvg1 = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssMsgAvg1.setStatus('mandatory')
ssMsgsIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssMsgsIn.setStatus('mandatory')
ssMsgsOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssMsgsOut.setStatus('mandatory')
ssDrops = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssDrops.setStatus('mandatory')
ssSwapAvg = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSwapAvg.setStatus('mandatory')
ssProcType = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("i386", 2), ("i486", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssProcType.setStatus('mandatory')
ssProdType = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("cns", 2), ("pcvines", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssProdType.setStatus('mandatory')
ssProdDescr = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssProdDescr.setStatus('mandatory')
ssRealMemory = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssRealMemory.setStatus('mandatory')
ssOsType = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unixsystemv", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssOsType.setStatus('mandatory')
ssOsRev = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssOsRev.setStatus('mandatory')
ssSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSystemUptime.setStatus('mandatory')
ssSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSystemDate.setStatus('mandatory')
ssSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("shutdown", 2), ("reboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssSystemStatus.setStatus('mandatory')
ssUserLicenseCfg = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssUserLicenseCfg.setStatus('mandatory')
svcNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumber.setStatus('mandatory')
svcTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2), )
if mibBuilder.loadTexts: svcTable.setStatus('mandatory')
svcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1), ).setIndexNames((0, "VINES-MIB", "svcIndex"))
if mibBuilder.loadTexts: svcEntry.setStatus('mandatory')
svcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIndex.setStatus('mandatory')
svcName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcName.setStatus('mandatory')
svcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("running", 1), ("initializing", 2), ("crashing", 3), ("inconsistent", 4), ("stopped", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcStatus.setStatus('mandatory')
svcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcUpTime.setStatus('mandatory')
svcMsgsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMsgsIn.setStatus('mandatory')
svcMsgsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcMsgsOut.setStatus('mandatory')
svcLocIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLocIn.setStatus('mandatory')
svcLocOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLocOut.setStatus('mandatory')
svcActSess = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcActSess.setStatus('mandatory')
svcTotSess = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotSess.setStatus('mandatory')
svcCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCategory.setStatus('mandatory')
svcCpuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcCpuTime.setStatus('mandatory')
svcSize = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSize.setStatus('mandatory')
svcSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSockets.setStatus('mandatory')
svcSPPs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSPPs.setStatus('mandatory')
svcLogMask = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("maskdef", 1), ("masklow", 2), ("maskmed", 3), ("maskhigh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcLogMask.setStatus('mandatory')
svcDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDiskName.setStatus('mandatory')
svcUserTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3), )
if mibBuilder.loadTexts: svcUserTable.setStatus('mandatory')
svcUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3, 1), ).setIndexNames((0, "VINES-MIB", "svcUserSvcIndex"), (0, "VINES-MIB", "svcUserIndex"))
if mibBuilder.loadTexts: svcUserEntry.setStatus('mandatory')
svcUserSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcUserSvcIndex.setStatus('mandatory')
svcUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcUserIndex.setStatus('mandatory')
svcUserSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcUserSvcName.setStatus('mandatory')
svcUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcUserName.setStatus('mandatory')
dskNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskNumber.setStatus('mandatory')
dskTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dskTable.setStatus('mandatory')
dskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1), ).setIndexNames((0, "VINES-MIB", "dskIndex"))
if mibBuilder.loadTexts: dskEntry.setStatus('mandatory')
dskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskIndex.setStatus('mandatory')
dskName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskName.setStatus('mandatory')
dskUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: dskUtil.setStatus('mandatory')
dskDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: dskDemand.setStatus('mandatory')
dskSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskSizeMB.setStatus('mandatory')
dskUsedPct = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskUsedPct.setStatus('mandatory')
dskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskStatus.setStatus('mandatory')
dskNOperations = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskNOperations.setStatus('mandatory')
dskNBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskNBlocks.setStatus('mandatory')
dskResp = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskResp.setStatus('mandatory')
dskActive = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskActive.setStatus('mandatory')
dskBlkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskBlkSize.setStatus('mandatory')
dskNMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskNMisc.setStatus('mandatory')
dskNErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskNErrs.setStatus('mandatory')
dskPctBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskPctBusy.setStatus('optional')
dskAvgWait = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskAvgWait.setStatus('optional')
dskAvgService = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskAvgService.setStatus('optional')
fsTotCache = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsTotCache.setStatus('mandatory')
fsCacheBufSize = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsCacheBufSize.setStatus('mandatory')
fsMaxOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxOpenFiles.setStatus('mandatory')
fsOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOpenFiles.setStatus('mandatory')
fsMaxOpensOnFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxOpensOnFiles.setStatus('mandatory')
fsOpensOnFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOpensOnFiles.setStatus('mandatory')
fsRecLocks = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsRecLocks.setStatus('mandatory')
fsMaxRecLocks = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxRecLocks.setStatus('mandatory')
fsPctCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsPctCacheHits.setStatus('mandatory')
fsCacheUnavail = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsCacheUnavail.setStatus('mandatory')
commTotBufs = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTotBufs.setStatus('mandatory')
commBufUsage = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commBufUsage.setStatus('mandatory')
commAllocsFailed = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commAllocsFailed.setStatus('mandatory')
commSocksCfg = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSocksCfg.setStatus('mandatory')
commSocksInUse = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commSocksInUse.setStatus('mandatory')
commMaxOpenSocks = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commMaxOpenSocks.setStatus('mandatory')
vipTotIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipTotIn.setStatus('mandatory')
vipTotOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipTotOut.setStatus('mandatory')
vipBad = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipBad.setStatus('mandatory')
vipRouted = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipRouted.setStatus('mandatory')
vipRoutedHWM = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipRoutedHWM.setStatus('mandatory')
vipBcast = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipBcast.setStatus('mandatory')
vipBcastHWM = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipBcastHWM.setStatus('mandatory')
vipReass = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipReass.setStatus('mandatory')
vipFrags = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipFrags.setStatus('mandatory')
vipToDodIP = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipToDodIP.setStatus('mandatory')
vipFromDodIP = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipFromDodIP.setStatus('mandatory')
vipInFragments = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipInFragments.setStatus('mandatory')
vipTooSmall = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipTooSmall.setStatus('mandatory')
vipBadLength = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipBadLength.setStatus('mandatory')
vipNoBuffers = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipNoBuffers.setStatus('mandatory')
vrtpNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrNumber.setStatus('mandatory')
vrtpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2), )
if mibBuilder.loadTexts: vrtpNbrTable.setStatus('mandatory')
vrtpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1), ).setIndexNames((0, "VINES-MIB", "vrtpNbrNetid"), (0, "VINES-MIB", "vrtpNbrSubNetid"), (0, "VINES-MIB", "vrtpNbrIfType"), (0, "VINES-MIB", "vrtpNbrLocSlot"), (0, "VINES-MIB", "vrtpNbrLocLine"))
if mibBuilder.loadTexts: vrtpNbrEntry.setStatus('mandatory')
vrtpNbrNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrNetid.setStatus('mandatory')
vrtpNbrSubNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrSubNetid.setStatus('mandatory')
vrtpNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("workstation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrType.setStatus('mandatory')
vrtpNbrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103))).clone(namedValues=NamedValues(("ethernet3Com", 1), ("ethernetNI5010", 2), ("ethernetBICC", 3), ("ethernetUB", 4), ("omninetCorvus", 5), ("arcnetSMC", 6), ("pcnetSytek", 7), ("proNetProteon", 8), ("frag", 9), ("prsystctrl", 10), ("hdlc", 11), ("blkAsync", 12), ("intersys", 13), ("x25EICON", 14), ("tokenRingIBM", 15), ("x25", 16), ("tokenRingUB", 17), ("ipaDavidSys", 18), ("tokenRingPronet4", 19), ("ethernetEplus3Com", 20), ("lanLinkNT", 21), ("ctrllerGanges", 22), ("ethernetNI5210", 23), ("ipTCPIP", 24), ("ipBanyan", 25), ("hdlcTCPIP", 26), ("starlanWDigital", 27), ("ethernetWDigital", 28), ("starlanATT", 29), ("starlanNI5210", 30), ("ethernet3Com3C503", 31), ("ethernet3Com3C523", 32), ("tokenRing3Com3C603", 33), ("lanLinkNTMC", 34), ("serialVGsystems", 35), ("ethernetIntelPC586E", 36), ("starlanATT10", 37), ("pronetProteonMC", 38), ("arcnetSMCMC", 39), ("tokenRingIBMMC", 40), ("ethernetNI9210MC", 41), ("ethernetICAMC", 42), ("pseudoIBM", 43), ("starlanATT10MC", 44), ("ps2UBNICMC", 45), ("llTurboNT", 46), ("tokenRingProteon", 47), ("ethernetNovellNE", 48), ("ctrlerDATACO", 49), ("hughes", 50), ("ethernetNDIS", 51), ("gatewayAPI", 52), ("tokenRingMadge", 53), ("ethernetIBMMC", 54), ("tokenRingIBMBM", 55), ("ethernetWDigitalMC", 56), ("interlanEISA", 57), ("ethernetBICC", 58), ("ethernetNT2R15", 59), ("ethernetNTMC", 60), ("ethernetNTTurbo", 61), ("tokenRingPronet", 62), ("tokenRingCompaq", 63), ("isoSvrSvr", 64), ("ethernetNovellNE3200", 65), ("ethernetPureData", 66), ("ethernetPureDataMC", 67), ("ethernetCabletron", 68), ("ftp", 69), ("arcnetNDIS", 70), ("tokenRingNDIS", 71), ("starlanATTEISA", 72), ("appleTalk", 73), ("localTalk", 74), ("etherLink3COM16", 75), ("interlanNI6510", 76), ("tokenRingProteonP1890", 77), ("ethernetBICCMC", 78), ("icaPlus", 79), ("ipNSRouting", 80), ("etherExpressIntel", 81), ("tokenRingOlicom", 82), ("tokenRingOlicomMC", 83), ("tokenRingOlicamEISA", 84), ("tokenExpressIntelISA", 85), ("tokenExpressIntelMC", 86), ("tokenExpressIntelEISA", 87), ("tokenRingIrmaTracPCAT", 88), ("tokenRingIrmaTracMCA", 89), ("ethernetDGCODE", 90), ("isdnBRIDatavoice", 91), ("wavelanNCR", 92), ("unused", 93), ("unused", 94), ("unused", 95), ("unused", 96), ("unused", 97), ("unused", 98), ("unused", 99), ("promptusT1", 100), ("promptusE1", 101), ("lapdT1", 102), ("isdnDchannel", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrIfType.setStatus('mandatory')
vrtpNbrRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrRemAddress.setStatus('mandatory')
vrtpNbrLocAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrLocAddress.setStatus('mandatory')
vrtpNbrLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrLocSlot.setStatus('mandatory')
vrtpNbrLocLine = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrLocLine.setStatus('mandatory')
vrtpNbrSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrSvrName.setStatus('optional')
vrtpRtNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtNumber.setStatus('mandatory')
vrtpRtTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4), )
if mibBuilder.loadTexts: vrtpRtTable.setStatus('mandatory')
vrtpRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1), ).setIndexNames((0, "VINES-MIB", "vrtpRtNetid"))
if mibBuilder.loadTexts: vrtpRtEntry.setStatus('mandatory')
vrtpRtNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtNetid.setStatus('mandatory')
vrtpRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtMetric.setStatus('mandatory')
vrtpRtIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtIdle.setStatus('mandatory')
vrtpRtGateNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtGateNetid.setStatus('mandatory')
vrtpRtSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtSvrName.setStatus('optional')
vrtpRtGateSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtGateSvrName.setStatus('optional')
vrtpTotIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpTotIn.setStatus('mandatory')
vrtpTotOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpTotOut.setStatus('mandatory')
vrtpErrsIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpErrsIn.setStatus('mandatory')
vrtpNoBuffersIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNoBuffersIn.setStatus('optional')
vrtpUpdatesIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpUpdatesIn.setStatus('optional')
vrtpResponsesIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpResponsesIn.setStatus('optional')
vrtpRqstsIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstsIn.setStatus('optional')
vrtpRqstLkUpIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstLkUpIn.setStatus('optional')
vrtpRqstSlrInfoIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstSlrInfoIn.setStatus('optional')
vrtpReinitIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpReinitIn.setStatus('optional')
vrtpResyncIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpResyncIn.setStatus('optional')
vrtpRedirIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRedirIn.setStatus('optional')
vrtpFragsIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsIn.setStatus('optional')
vrtpFragsDropIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsDropIn.setStatus('optional')
vrtpFragsBadIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsBadIn.setStatus('optional')
vrtpFragsDupIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsDupIn.setStatus('optional')
vrtpFragsDoneIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsDoneIn.setStatus('optional')
vrtpReassBadIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpReassBadIn.setStatus('optional')
vrtpOutdatedIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpOutdatedIn.setStatus('optional')
vrtpNetInfoBad = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNetInfoBad.setStatus('optional')
vrtpBadRdrs = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpBadRdrs.setStatus('optional')
vrtpBdcstIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpBdcstIn.setStatus('optional')
vrtpNoBuffersOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNoBuffersOut.setStatus('optional')
vrtpUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpUpdatesOut.setStatus('optional')
vrtpRqstLkUpOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstLkUpOut.setStatus('optional')
vrtpRqstSlrInfoOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstSlrInfoOut.setStatus('optional')
vrtpRqstsOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRqstsOut.setStatus('optional')
vrtpReinitOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpReinitOut.setStatus('optional')
vrtpResyncOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpResyncOut.setStatus('optional')
vrtpRedirOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRedirOut.setStatus('optional')
vrtpFragsOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsOut.setStatus('optional')
vrtpFragsDoneOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsDoneOut.setStatus('optional')
vrtpFragsBadOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsBadOut.setStatus('optional')
vrtpFragsDropOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpFragsDropOut.setStatus('optional')
vrtpBdcstOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpBdcstOut.setStatus('optional')
vrtpRtCr = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtCr.setStatus('optional')
vrtpRtMod = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpRtMod.setStatus('optional')
vrtpNbrAnchors = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrAnchors.setStatus('optional')
vrtpNbrEntries = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNbrEntries.setStatus('optional')
vrtpNetEntries = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNetEntries.setStatus('optional')
vrtpLkUp = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpLkUp.setStatus('optional')
vrtpBadLkUp = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpBadLkUp.setStatus('optional')
vrtpNonSeqTotIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqTotIn.setStatus('optional')
vrtpNonSeqTotOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqTotOut.setStatus('optional')
vrtpNonSeqErrsIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqErrsIn.setStatus('optional')
vrtpNonSeqUpdIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqUpdIn.setStatus('optional')
vrtpNonSeqRspIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRspIn.setStatus('optional')
vrtpNonSeqRqstIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRqstIn.setStatus('optional')
vrtpNonSeqRdrIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRdrIn.setStatus('optional')
vrtpBadNonSeqRdrIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpBadNonSeqRdrIn.setStatus('optional')
vrtpNonSeqBdcstIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqBdcstIn.setStatus('optional')
vrtpNonSeqUpdOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqUpdOut.setStatus('optional')
vrtpNonSeqRspOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRspOut.setStatus('optional')
vrtpNonSeqRqstOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRqstOut.setStatus('optional')
vrtpNonSeqRdrOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqRdrOut.setStatus('optional')
vrtpNonSeqBdcstOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpNonSeqBdcstOut.setStatus('optional')
vrtpResponsesOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 7, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrtpResponsesOut.setStatus('optional')
vsppConnsInUse = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppConnsInUse.setStatus('mandatory')
vsppConnsCfg = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsppConnsCfg.setStatus('mandatory')
vsppMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppMaxConns.setStatus('mandatory')
vsppTotIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppTotIn.setStatus('mandatory')
vsppTotOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppTotOut.setStatus('mandatory')
vsppInErrs = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppInErrs.setStatus('optional')
vsppBadType = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppBadType.setStatus('optional')
vsppNoBuffers = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppNoBuffers.setStatus('optional')
vsppNoPort = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppNoPort.setStatus('optional')
vsppDups = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppDups.setStatus('optional')
vsppBadOrder = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppBadOrder.setStatus('optional')
vsppDataIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppDataIn.setStatus('optional')
vsppAcksIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppAcksIn.setStatus('optional')
vsppDiscIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppDiscIn.setStatus('optional')
vsppProbesIn = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppProbesIn.setStatus('optional')
vsppDataOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppDataOut.setStatus('optional')
vsppAcksOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppAcksOut.setStatus('optional')
vsppDiscOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppDiscOut.setStatus('optional')
vsppProbesOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppProbesOut.setStatus('optional')
vsppAbortsOut = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppAbortsOut.setStatus('optional')
vsppLocal = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 8, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsppLocal.setStatus('optional')
vifNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifNumber.setStatus('mandatory')
vifTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2), )
if mibBuilder.loadTexts: vifTable.setStatus('mandatory')
vifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1), ).setIndexNames((0, "VINES-MIB", "vifSlot"))
if mibBuilder.loadTexts: vifEntry.setStatus('mandatory')
vifSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifSlot.setStatus('mandatory')
vifType = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103))).clone(namedValues=NamedValues(("ethernet3Com", 1), ("ethernetNI5010", 2), ("ethernetBICC", 3), ("ethernetUB", 4), ("omninetCorvus", 5), ("arcnetSMC", 6), ("pcnetSytek", 7), ("proNetProteon", 8), ("frag", 9), ("prsystctrl", 10), ("hdlc", 11), ("blkAsync", 12), ("intersys", 13), ("x25EICON", 14), ("tokenRingIBM", 15), ("x25", 16), ("tokenRingUB", 17), ("ipaDavidSys", 18), ("tokenRingPronet4", 19), ("ethernetEplus3Com", 20), ("lanLinkNT", 21), ("ctrllerGanges", 22), ("ethernetNI5210", 23), ("ipTCPIP", 24), ("ipBanyan", 25), ("hdlcTCPIP", 26), ("starlanWDigital", 27), ("ethernetWDigital", 28), ("starlanATT", 29), ("starlanNI5210", 30), ("ethernet3Com3C503", 31), ("ethernet3Com3C523", 32), ("tokenRing3Com3C603", 33), ("lanLinkNTMC", 34), ("serialVGsystems", 35), ("ethernetIntelPC586E", 36), ("starlanATT10", 37), ("pronetProteonMC", 38), ("arcnetSMCMC", 39), ("tokenRingIBMMC", 40), ("ethernetNI9210MC", 41), ("ethernetICAMC", 42), ("pseudoIBM", 43), ("starlanATT10MC", 44), ("ps2UBNICMC", 45), ("llTurboNT", 46), ("tokenRingProteon", 47), ("ethernetNovellNE", 48), ("ctrlerDATACO", 49), ("hughes", 50), ("ethernetNDIS", 51), ("gatewayAPI", 52), ("tokenRingMadge", 53), ("ethernetIBMMC", 54), ("tokenRingIBMBM", 55), ("ethernetWDigitalMC", 56), ("interlanEISA", 57), ("ethernetBICC", 58), ("ethernetNT2R15", 59), ("ethernetNTMC", 60), ("ethernetNTTurbo", 61), ("tokenRingPronet", 62), ("tokenRingCompaq", 63), ("isoSvrSvr", 64), ("ethernetNovellNE3200", 65), ("ethernetPureData", 66), ("ethernetPureDataMC", 67), ("ethernetCabletron", 68), ("ftp", 69), ("arcnetNDIS", 70), ("tokenRingNDIS", 71), ("starlanATTEISA", 72), ("appleTalk", 73), ("localTalk", 74), ("etherLink3COM16", 75), ("interlanNI6510", 76), ("tokenRingProteonP1890", 77), ("ethernetBICCMC", 78), ("icaPlus", 79), ("ipNSRouting", 80), ("etherExpressIntel", 81), ("tokenRingOlicom", 82), ("tokenRingOlicomMC", 83), ("tokenRingOlicamEISA", 84), ("tokenExpressIntelISA", 85), ("tokenExpressIntelMC", 86), ("tokenExpressIntelEISA", 87), ("tokenRingIrmaTracPCAT", 88), ("tokenRingIrmaTracMCA", 89), ("ethernetDGCODE", 90), ("isdnBRIDatavoice", 91), ("wavelanNCR", 92), ("unused", 93), ("unused", 94), ("unused", 95), ("unused", 96), ("unused", 97), ("unused", 98), ("unused", 99), ("promptusT1", 100), ("promptusE1", 101), ("lapdT1", 102), ("isdnDchannel", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifType.setStatus('mandatory')
vifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifDescr.setStatus('mandatory')
vifAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifAddress.setStatus('mandatory')
vifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifInPkts.setStatus('mandatory')
vifInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifInErrs.setStatus('mandatory')
vifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifOutPkts.setStatus('mandatory')
vifOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifOutErrs.setStatus('mandatory')
vifLnkNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkNumber.setStatus('mandatory')
vifLnkTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4), )
if mibBuilder.loadTexts: vifLnkTable.setStatus('mandatory')
vifLnkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1), ).setIndexNames((0, "VINES-MIB", "vifLnkSlot"), (0, "VINES-MIB", "vifLnkLine"))
if mibBuilder.loadTexts: vifLnkEntry.setStatus('mandatory')
vifLnkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkSlot.setStatus('mandatory')
vifLnkLine = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkLine.setStatus('mandatory')
vifLnkType = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ate", 1), ("unused2", 2), ("unused3", 3), ("unused4", 4), ("unused5", 5), ("unused6", 6), ("blkasynch", 7), ("hdlc", 8), ("x25", 9), ("sdlcv1", 10), ("bsc3270", 11), ("sdlcv2", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkType.setStatus('mandatory')
vifLnkTotIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkTotIn.setStatus('mandatory')
vifLnkTotOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkTotOut.setStatus('mandatory')
vifLnkRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkRetrans.setStatus('mandatory')
vifLnkCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkCRCErrs.setStatus('mandatory')
vifLnkDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkDrops.setStatus('mandatory')
vifLnkUnders = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkUnders.setStatus('mandatory')
vifLnkOvers = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkOvers.setStatus('mandatory')
vifLnkFrmErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLnkFrmErrs.setStatus('mandatory')
vifX25VCNumber = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCNumber.setStatus('mandatory')
vifX25VCTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6), )
if mibBuilder.loadTexts: vifX25VCTable.setStatus('mandatory')
vifX25VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1), ).setIndexNames((0, "VINES-MIB", "vifX25VCSlot"), (0, "VINES-MIB", "vifX25VCLine"), (0, "VINES-MIB", "vifX25VCSession"))
if mibBuilder.loadTexts: vifX25VCEntry.setStatus('mandatory')
vifX25VCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCSlot.setStatus('mandatory')
vifX25VCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCLine.setStatus('mandatory')
vifX25VCSession = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCSession.setStatus('mandatory')
vifX25VCTotIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCTotIn.setStatus('mandatory')
vifX25VCTotOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCTotOut.setStatus('mandatory')
vifX25VCInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCInErrs.setStatus('mandatory')
vifX25VCOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCOutErrs.setStatus('mandatory')
vifX25VCPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCPktsOut.setStatus('mandatory')
vifX25VCPktsAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCPktsAwaitAck.setStatus('mandatory')
vifX25VCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCBytesOut.setStatus('mandatory')
vifX25VCBytesAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCBytesAwaitAck.setStatus('mandatory')
vifX25VCPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCPktsIn.setStatus('mandatory')
vifX25VCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCBytesIn.setStatus('mandatory')
vifX25VCResetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCResetsIn.setStatus('mandatory')
vifX25VCResetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCResetsOut.setStatus('mandatory')
vifX25VCLogChnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCLogChnNum.setStatus('mandatory')
vifX25VCRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 6, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifX25VCRemAddr.setStatus('mandatory')
vifStatsList = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7), )
if mibBuilder.loadTexts: vifStatsList.setStatus('mandatory')
vifStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7, 1), ).setIndexNames((0, "VINES-MIB", "vifStatSlot"), (0, "VINES-MIB", "vifStatIndex"))
if mibBuilder.loadTexts: vifStatEntry.setStatus('mandatory')
vifStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifStatSlot.setStatus('mandatory')
vifStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifStatIndex.setStatus('mandatory')
vifStatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifStatDescr.setStatus('mandatory')
vifStatValue = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 9, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifStatValue.setStatus('mandatory')
oscpuNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscpuNum.setStatus('mandatory')
oscpuTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2), )
if mibBuilder.loadTexts: oscpuTable.setStatus('mandatory')
oscpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1), ).setIndexNames((0, "VINES-MIB", "cpuIndex"))
if mibBuilder.loadTexts: oscpuEntry.setStatus('mandatory')
cpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIndex.setStatus('mandatory')
cpuIdleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleUsage.setStatus('mandatory')
cpuUserUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUserUsage.setStatus('mandatory')
cpuSysUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSysUsage.setStatus('mandatory')
cpuWIOUserUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuWIOUserUsage.setStatus('mandatory')
cpuProcSwappedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProcSwappedOut.setStatus('mandatory')
cpuWIOUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuWIOUsage.setStatus('mandatory')
cpuWSUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuWSUsage.setStatus('mandatory')
cpuWPIOUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuWPIOUsage.setStatus('mandatory')
osBReads = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBReads.setStatus('mandatory')
osBWrites = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBWrites.setStatus('mandatory')
osLReads = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osLReads.setStatus('mandatory')
osLWrites = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osLWrites.setStatus('mandatory')
osPReads = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osPReads.setStatus('mandatory')
osPWrites = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osPWrites.setStatus('mandatory')
osInSwaps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osInSwaps.setStatus('mandatory')
osOutSwaps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osOutSwaps.setStatus('mandatory')
osInBSwaps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osInBSwaps.setStatus('mandatory')
osOutBSwaps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osOutBSwaps.setStatus('mandatory')
osProcessSwitches = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osProcessSwitches.setStatus('mandatory')
osSystemCalls = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSystemCalls.setStatus('mandatory')
osSystemRead = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSystemRead.setStatus('mandatory')
osSystemWrite = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSystemWrite.setStatus('mandatory')
osSystemFork = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSystemFork.setStatus('mandatory')
osSystemExec = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSystemExec.setStatus('mandatory')
osRunQueue = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osRunQueue.setStatus('mandatory')
osRunQueueOcc = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osRunQueueOcc.setStatus('mandatory')
osSwapQueueTotals = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwapQueueTotals.setStatus('mandatory')
osSwapQueueOcc = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwapQueueOcc.setStatus('mandatory')
osIPCMsgOps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osIPCMsgOps.setStatus('mandatory')
osSemOps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSemOps.setStatus('mandatory')
osPnpFault = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osPnpFault.setStatus('mandatory')
osWrtFault = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osWrtFault.setStatus('mandatory')
osCurrentInodes = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osCurrentInodes.setStatus('mandatory')
osHWInodes = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osHWInodes.setStatus('mandatory')
osCurrentFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osCurrentFiles.setStatus('mandatory')
osHWFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osHWFiles.setStatus('mandatory')
osMaxInodes = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMaxInodes.setStatus('mandatory')
osMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMaxFiles.setStatus('mandatory')
osMaxProcesses = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMaxProcesses.setStatus('mandatory')
osSwapSpaceAvailable = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwapSpaceAvailable.setStatus('mandatory')
osFreeMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osFreeMemoryTotal.setStatus('mandatory')
osIOBufs = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osIOBufs.setStatus('mandatory')
osMounts = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osMounts.setStatus('mandatory')
osUserMaxPu = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osUserMaxPu.setStatus('mandatory')
osUserMaxFp = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osUserMaxFp.setStatus('mandatory')
osCurrentProcesses = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osCurrentProcesses.setStatus('mandatory')
osSwapSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwapSpaceUsed.setStatus('mandatory')
osFreeMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osFreeMemoryAvailable.setStatus('mandatory')
osUserUsagePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osUserUsagePct.setStatus('optional')
osSysUsagePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSysUsagePct.setStatus('mandatory')
osWIOUsagePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osWIOUsagePct.setStatus('mandatory')
osIdleUsagePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osIdleUsagePct.setStatus('mandatory')
osRunOccPct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osRunOccPct.setStatus('mandatory')
osSwapOccPct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwapOccPct.setStatus('mandatory')
osBuffRdRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBuffRdRate.setStatus('mandatory')
osRdCachePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osRdCachePct.setStatus('mandatory')
osBuffWrRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBuffWrRate.setStatus('mandatory')
osWrCachePct = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osWrCachePct.setStatus('mandatory')
osBswpInRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBswpInRate.setStatus('mandatory')
osBswpOutRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osBswpOutRate.setStatus('mandatory')
osVfltRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osVfltRate.setStatus('mandatory')
osSwitchRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSwitchRate.setStatus('mandatory')
osSysCallRate = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 10, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osSysCallRate.setStatus('mandatory')
nmLoadAvg15HighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmLoadAvg15HighThres.setStatus('mandatory')
nmSockInUseHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmSockInUseHighThres.setStatus('mandatory')
nmDiskUseHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmDiskUseHighThres.setStatus('mandatory')
nmSwapAvgHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmSwapAvgHighThres.setStatus('mandatory')
nmDropsHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmDropsHighThres.setStatus('mandatory')
nmSwapSpaceLowThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmSwapSpaceLowThres.setStatus('mandatory')
nmFreeMemLowThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmFreeMemLowThres.setStatus('mandatory')
nmCommBuffHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmCommBuffHighThres.setStatus('mandatory')
nmAllocFailHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmAllocFailHighThres.setStatus('mandatory')
nmCacheHitsLowThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmCacheHitsLowThres.setStatus('mandatory')
nmDiskBusyHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmDiskBusyHighThres.setStatus('mandatory')
nmMsgAvgHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmMsgAvgHighThres.setStatus('mandatory')
nmInodeUseHighThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmInodeUseHighThres.setStatus('mandatory')
tpAlertTime = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 1), Integer32())
if mibBuilder.loadTexts: tpAlertTime.setStatus('mandatory')
tpErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 2), Integer32())
if mibBuilder.loadTexts: tpErrorCode.setStatus('mandatory')
tpUserName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 3), OctetString())
if mibBuilder.loadTexts: tpUserName.setStatus('mandatory')
tpSvcName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 4), OctetString())
if mibBuilder.loadTexts: tpSvcName.setStatus('mandatory')
tpSvrName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 5), OctetString())
if mibBuilder.loadTexts: tpSvrName.setStatus('mandatory')
tpRefSvcName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 6), OctetString())
if mibBuilder.loadTexts: tpRefSvcName.setStatus('mandatory')
tpRefSvrName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 7), OctetString())
if mibBuilder.loadTexts: tpRefSvrName.setStatus('mandatory')
tpJobId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 8), Integer32())
if mibBuilder.loadTexts: tpJobId.setStatus('mandatory')
tpPaperFormat = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 9), OctetString())
if mibBuilder.loadTexts: tpPaperFormat.setStatus('mandatory')
tpJobTotal = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 10), Integer32())
if mibBuilder.loadTexts: tpJobTotal.setStatus('mandatory')
tpConnId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 11), Integer32())
if mibBuilder.loadTexts: tpConnId.setStatus('mandatory')
tpMailSender = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 12), OctetString())
if mibBuilder.loadTexts: tpMailSender.setStatus('mandatory')
tpPortId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 13), OctetString())
if mibBuilder.loadTexts: tpPortId.setStatus('mandatory')
tpRtnName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 14), OctetString())
if mibBuilder.loadTexts: tpRtnName.setStatus('mandatory')
tp162erravg = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 15), Integer32())
if mibBuilder.loadTexts: tp162erravg.setStatus('mandatory')
tp162errThresHigh = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 16), Integer32())
if mibBuilder.loadTexts: tp162errThresHigh.setStatus('mandatory')
tp162errTotal = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 17), Integer32())
if mibBuilder.loadTexts: tp162errTotal.setStatus('mandatory')
tpGrpName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 18), OctetString())
if mibBuilder.loadTexts: tpGrpName.setStatus('mandatory')
tpNumGrps = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 19), Integer32())
if mibBuilder.loadTexts: tpNumGrps.setStatus('mandatory')
tpGrpLimit = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 20), Integer32())
if mibBuilder.loadTexts: tpGrpLimit.setStatus('mandatory')
tpOldSerNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 21), Integer32())
if mibBuilder.loadTexts: tpOldSerNum.setStatus('mandatory')
tpNewSerNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 22), Integer32())
if mibBuilder.loadTexts: tpNewSerNum.setStatus('mandatory')
tpDiskSpaceLeft = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 23), Integer32())
if mibBuilder.loadTexts: tpDiskSpaceLeft.setStatus('mandatory')
tpMailMessageId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 24), OctetString())
if mibBuilder.loadTexts: tpMailMessageId.setStatus('mandatory')
tpSockOvFlowNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 25), Integer32())
if mibBuilder.loadTexts: tpSockOvFlowNum.setStatus('mandatory')
tpDiskNName = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 26), OctetString())
if mibBuilder.loadTexts: tpDiskNName.setStatus('mandatory')
tpSvrNetId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 27), Integer32())
if mibBuilder.loadTexts: tpSvrNetId.setStatus('mandatory')
tpSubNetId = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 28), Integer32())
if mibBuilder.loadTexts: tpSubNetId.setStatus('mandatory')
tpSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 29), Integer32())
if mibBuilder.loadTexts: tpSlotNum.setStatus('mandatory')
tpLineNum = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 30), Integer32())
if mibBuilder.loadTexts: tpLineNum.setStatus('mandatory')
tpFRcvd = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 31), Integer32())
if mibBuilder.loadTexts: tpFRcvd.setStatus('mandatory')
tpFXmtd = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 32), Integer32())
if mibBuilder.loadTexts: tpFXmtd.setStatus('mandatory')
tpLnkDropsThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 33), Integer32())
if mibBuilder.loadTexts: tpLnkDropsThres.setStatus('mandatory')
tpLnkReXtThres = MibScalar((1, 3, 6, 1, 4, 1, 130, 1, 2, 12, 34), Integer32())
if mibBuilder.loadTexts: tpLnkReXtThres.setStatus('mandatory')
amsRegTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1), )
if mibBuilder.loadTexts: amsRegTable.setStatus('mandatory')
amsRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1), ).setIndexNames((0, "VINES-MIB", "amsRegIndex"))
if mibBuilder.loadTexts: amsRegEntry.setStatus('mandatory')
amsRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegIndex.setStatus('mandatory')
amsRegIdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegIdInstance.setStatus('mandatory')
amsRegIdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegIdClass.setStatus('mandatory')
amsRegIdTid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegIdTid.setStatus('mandatory')
amsRegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegPort.setStatus('mandatory')
amsRegWhoAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegWhoAdded.setStatus('mandatory')
amsRegAlertee = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegAlertee.setStatus('mandatory')
amsRegAction = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendipcport", 1), ("bleepstname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsRegAction.setStatus('mandatory')
amsAlertLogTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2), )
if mibBuilder.loadTexts: amsAlertLogTable.setStatus('mandatory')
amsLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1), ).setIndexNames((0, "VINES-MIB", "amsLogFileIndex"), (0, "VINES-MIB", "amsLogRecIndex"))
if mibBuilder.loadTexts: amsLogEntry.setStatus('mandatory')
amsLogFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("previous", 1), ("current", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogFileIndex.setStatus('mandatory')
amsLogRecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogRecIndex.setStatus('mandatory')
amsLogIdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogIdInstance.setStatus('mandatory')
amsLogIdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogIdClass.setStatus('mandatory')
amsLogIdTid = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogIdTid.setStatus('mandatory')
amsLogAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogAlertTime.setStatus('mandatory')
amsLogAlertString = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 13, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amsLogAlertString.setStatus('mandatory')
mlMailBoxTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1), )
if mibBuilder.loadTexts: mlMailBoxTable.setStatus('mandatory')
mlMailBoxTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1, 1), ).setIndexNames((0, "VINES-MIB", "mlMBTableIndex"))
if mibBuilder.loadTexts: mlMailBoxTableEntry.setStatus('mandatory')
mlMBTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlMBTableIndex.setStatus('mandatory')
mlMBTableMBOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlMBTableMBOwner.setStatus('mandatory')
mlMBTableUnreadMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlMBTableUnreadMsgs.setStatus('mandatory')
mlMBTableTotalMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlMBTableTotalMsgs.setStatus('mandatory')
vlogsTable = MibTable((1, 3, 6, 1, 4, 1, 130, 1, 2, 15, 1), )
if mibBuilder.loadTexts: vlogsTable.setStatus('mandatory')
vlogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 130, 1, 2, 15, 1, 1), ).setIndexNames((0, "VINES-MIB", "vlogsFileIndex"))
if mibBuilder.loadTexts: vlogsEntry.setStatus('mandatory')
vlogsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("patch", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlogsFileIndex.setStatus('mandatory')
vlogsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 130, 1, 2, 15, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlogsDescr.setStatus('mandatory')
nmLoadAvgHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,1)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmLoadAvg15HighThres"))
nmSwapAvgHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,2)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmSwapAvgHighThres"))
nmDropsHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,3)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmDropsHighThres"))
nmFreeSwapLow = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,4)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmSwapSpaceLowThres"))
nmFreeMemLow = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,5)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmFreeMemLowThres"))
nmCommBuffHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,6)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmCommBuffHighThres"))
nmSockInUseHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,7)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmSockInUseHighThres"))
nmSockOvflow = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,8)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"), ("VINES-MIB", "tpSockOvFlowNum"))
nmMsgAvgHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,9)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmMsgAvgHighThres"))
nmAllocFail_High = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,10)).setLabel("nmAllocFail-High").setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmAllocFailHighThres"))
nmCacheHits_Low = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,11)).setLabel("nmCacheHits-Low").setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmCacheHitsLowThres"))
nmDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,12)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpDiskNName"), ("VINES-MIB", "nmDiskUseHighThres"))
nmDiskBusy = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,13)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpDiskNName"), ("VINES-MIB", "nmDiskBusyHighThres"))
nmInodesHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,14)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "nmInodeUseHighThres"))
nmProcsHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,15)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
nmTKRingOpen = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,16)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSlotNum"))
nmTKRingSigLoss = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,17)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSlotNum"))
nmTKRingHardErr = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,18)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSlotNum"))
nmTKRingRmvHardErr = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,19)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSlotNum"))
nmTKRingRmvMacFrame = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,20)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSlotNum"))
nmLnkDropsHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,21)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpLnkDropsThres"), ("VINES-MIB", "tpSlotNum"), ("VINES-MIB", "tpLineNum"), ("VINES-MIB", "tpFRcvd"))
nmLnkReTXHigh = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,22)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpLnkReXtThres"), ("VINES-MIB", "tpSlotNum"), ("VINES-MIB", "tpLineNum"), ("VINES-MIB", "tpFXmtd"))
bsSysBkUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,23)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
bsIncBkUpAborted = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,24)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
bsIncBkUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,25)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
bsSvcBkUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,26)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
psFormUnavail = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,27)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpJobId"), ("VINES-MIB", "tpPaperFormat"))
psUserNoAuth = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,28)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"), ("VINES-MIB", "tpRefSvcName"))
psBadDest = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,29)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"))
psJobReject = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,30)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpJobId"), ("VINES-MIB", "tpRefSvcName"), ("VINES-MIB", "tpUserName"))
psQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,31)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"), ("VINES-MIB", "tpJobTotal"))
psOffline = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,32)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"))
psPapError = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,33)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"), ("VINES-MIB", "tpConnId"))
psAtalkErr = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,34)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
psPsPrinterErr = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,35)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssSvcNoStart = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,36)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"), ("VINES-MIB", "tpErrorCode"))
ssNoReconnVS = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,37)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
ssNoReconnST = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,38)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
ssSvcCrashed = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,39)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"))
ssSvcRecrashed = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,40)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvcName"))
ssBadSvcDB = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,41)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,42)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssDying = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,43)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
ssPanicDBWrite = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,44)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssPanicWait = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,45)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssPanicUlimit = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,46)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssNoMemory = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,47)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
ssTimeSet = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,48)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
msMBoxFull = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,49)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"), ("VINES-MIB", "tpMailSender"))
msDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,50)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpDiskSpaceLeft"))
msPanic = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,51)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
msCompressFail = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,52)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpMailMessageId"))
msDecompressFail = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,53)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpMailMessageId"))
msMasquerade = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,54)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpMailSender"), ("VINES-MIB", "tpUserName"))
msMTAPanic = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,55)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
msBMSPanic = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,56)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
vsNoReachST = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,57)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
vsBadLoginPhysLoc = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,58)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpPortId"), ("VINES-MIB", "tpUserName"))
vsBadLoginDialin = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,59)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpPortId"), ("VINES-MIB", "tpUserName"))
vsBadLoginTime = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,60)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"))
vsMaxBadLogins = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,61)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpPortId"), ("VINES-MIB", "tpUserName"))
vsSDBInconsist = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,62)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
vsNoSessAvail = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,63)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
vsSvrSvrPwd = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,64)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRefSvrName"))
vsNoSTLogin = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,65)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
vsNoSpace = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,66)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
vsLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,67)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpSvrNetId"))
vsPCDialTerm = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,68)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"), ("VINES-MIB", "tpSvrNetId"), ("VINES-MIB", "tpSubNetId"), ("VINES-MIB", "tpSlotNum"), ("VINES-MIB", "tpLineNum"))
vsPCDialInit = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,69)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"), ("VINES-MIB", "tpSvrNetId"), ("VINES-MIB", "tpSubNetId"), ("VINES-MIB", "tpSlotNum"), ("VINES-MIB", "tpLineNum"))
afpAtalkDown = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,70)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"))
afpSessDiscon = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,71)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpUserName"))
daGCoreDump = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,72)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRtnName"))
daSCoreDump = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,73)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpRtnName"))
stCoreDump = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,74)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpErrorCode"))
st162Errs = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,75)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tp162erravg"), ("VINES-MIB", "tp162errThresHigh"), ("VINES-MIB", "tp162errTotal"))
stAddedGrp = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,76)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpGrpName"), ("VINES-MIB", "tpRefSvrName"))
stDeletedGrp = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,77)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpGrpName"), ("VINES-MIB", "tpRefSvrName"))
stRebuild = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,78)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpGrpName"))
stGrpLimit = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,79)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpNumGrps"), ("VINES-MIB", "tpGrpLimit"))
stSerialNum = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,80)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpOldSerNum"), ("VINES-MIB", "tpNewSerNum"))
stDupGrp = NotificationType((1, 3, 6, 1, 4, 1, 130, 1, 2) + (0,81)).setObjects(("VINES-MIB", "tpSvrName"), ("VINES-MIB", "tpSvcName"), ("VINES-MIB", "tpAlertTime"), ("VINES-MIB", "tpGrpName"), ("VINES-MIB", "tpSvrNetId"))
mibBuilder.exportSymbols("VINES-MIB", vrtpRqstLkUpOut=vrtpRqstLkUpOut, vifOutErrs=vifOutErrs, osUserUsagePct=osUserUsagePct, vipNoBuffers=vipNoBuffers, vifOutPkts=vifOutPkts, fsTotCache=fsTotCache, vsppDataOut=vsppDataOut, bsSysBkUpFailed=bsSysBkUpFailed, nmSockInUseHighThres=nmSockInUseHighThres, vifLnkFrmErrs=vifLnkFrmErrs, amsLogAlertString=amsLogAlertString, svcSPPs=svcSPPs, osinfo=osinfo, vifLnkEntry=vifLnkEntry, dskName=dskName, vifX25VCPktsOut=vifX25VCPktsOut, vrtpRtCr=vrtpRtCr, ssNoReconnVS=ssNoReconnVS, ssLoadAvg5=ssLoadAvg5, cpuProcSwappedOut=cpuProcSwappedOut, vrtpUpdatesIn=vrtpUpdatesIn, amsLogIdClass=amsLogIdClass, vifLnkUnders=vifLnkUnders, dskAvgService=dskAvgService, vrtpNonSeqRspIn=vrtpNonSeqRspIn, vipTotIn=vipTotIn, vifEntry=vifEntry, ssProdDescr=ssProdDescr, vifX25VCBytesAwaitAck=vifX25VCBytesAwaitAck, ssOsRev=ssOsRev, vifType=vifType, ssNoReconnST=ssNoReconnST, dskNOperations=dskNOperations, commSocksCfg=commSocksCfg, osWrCachePct=osWrCachePct, stCoreDump=stCoreDump, dskResp=dskResp, vrtpRedirOut=vrtpRedirOut, tpLnkDropsThres=tpLnkDropsThres, vrtpNonSeqUpdIn=vrtpNonSeqUpdIn, vifDescr=vifDescr, vip=vip, vinterfaces=vinterfaces, svcUserIndex=svcUserIndex, dskNumber=dskNumber, fsMaxOpenFiles=fsMaxOpenFiles, msPanic=msPanic, nmLoadAvg15HighThres=nmLoadAvg15HighThres, services=services, vifSlot=vifSlot, mlMBTableTotalMsgs=mlMBTableTotalMsgs, vifStatSlot=vifStatSlot, vifX25VCBytesOut=vifX25VCBytesOut, vsppProbesIn=vsppProbesIn, ssPanicDBWrite=ssPanicDBWrite, osSystemFork=osSystemFork, vipFrags=vipFrags, nmMsgAvgHigh=nmMsgAvgHigh, nmFreeMemLow=nmFreeMemLow, vifAddress=vifAddress, vifLnkCRCErrs=vifLnkCRCErrs, osSystemExec=osSystemExec, ssMsgsIn=ssMsgsIn, dskNMisc=dskNMisc, vrtpNbrAnchors=vrtpNbrAnchors, fsCacheUnavail=fsCacheUnavail, amsAlertLogTable=amsAlertLogTable, vsppDiscOut=vsppDiscOut, dskDemand=dskDemand, nmDiskFull=nmDiskFull, amsLogIdTid=amsLogIdTid, stSerialNum=stSerialNum, ssNetid=ssNetid, osMaxInodes=osMaxInodes, nmCommBuffHighThres=nmCommBuffHighThres, vipTotOut=vipTotOut, tpNewSerNum=tpNewSerNum, vrtpRtGateSvrName=vrtpRtGateSvrName, svcEntry=svcEntry, vrtpNbrLocSlot=vrtpNbrLocSlot, vsppAcksIn=vsppAcksIn, fsOpensOnFiles=fsOpensOnFiles, nmInodesHigh=nmInodesHigh, vipBcastHWM=vipBcastHWM, commMaxOpenSocks=commMaxOpenSocks, tpGrpName=tpGrpName, osMaxFiles=osMaxFiles, vsppConnsCfg=vsppConnsCfg, vlogsFileIndex=vlogsFileIndex, dskBlkSize=dskBlkSize, vrtpRtMod=vrtpRtMod, osRdCachePct=osRdCachePct, vifLnkTable=vifLnkTable, amsRegAction=amsRegAction, svcUserSvcIndex=svcUserSvcIndex, dskIndex=dskIndex, vifX25VCOutErrs=vifX25VCOutErrs, tpDiskNName=tpDiskNName, tpErrorCode=tpErrorCode, vlogs=vlogs, vrtpBadLkUp=vrtpBadLkUp, vifX25VCResetsOut=vifX25VCResetsOut, amsRegIndex=amsRegIndex, nmLnkDropsHigh=nmLnkDropsHigh, tpUserName=tpUserName, vrtpResponsesIn=vrtpResponsesIn, osIPCMsgOps=osIPCMsgOps, systemsummary=systemsummary, osVfltRate=osVfltRate, cpuSysUsage=cpuSysUsage, dskStatus=dskStatus, nmProcsHigh=nmProcsHigh, daGCoreDump=daGCoreDump, vsSDBInconsist=vsSDBInconsist, svcDiskName=svcDiskName, osSwapQueueTotals=osSwapQueueTotals, vlogsDescr=vlogsDescr, tp162erravg=tp162erravg, msMBoxFull=msMBoxFull, vrtpBdcstOut=vrtpBdcstOut, svcCategory=svcCategory, ssBadSvcDB=ssBadSvcDB, ssOsType=ssOsType, osInSwaps=osInSwaps, osCurrentProcesses=osCurrentProcesses, msMasquerade=msMasquerade, ssSystemStatus=ssSystemStatus, commSocksInUse=commSocksInUse, tpRefSvcName=tpRefSvcName, vrtpRqstSlrInfoOut=vrtpRqstSlrInfoOut, vrtpNonSeqErrsIn=vrtpNonSeqErrsIn, vsppBadOrder=vsppBadOrder, mib2=mib2, vrtpNbrNetid=vrtpNbrNetid, osOutBSwaps=osOutBSwaps, psAtalkErr=psAtalkErr, commBufUsage=commBufUsage, vrtpResyncOut=vrtpResyncOut, svcUpTime=svcUpTime, tpOldSerNum=tpOldSerNum, vrtpBadRdrs=vrtpBadRdrs, vipBadLength=vipBadLength, nmCacheHitsLowThres=nmCacheHitsLowThres, ssDrops=ssDrops, vsppInErrs=vsppInErrs, vrtpFragsBadIn=vrtpFragsBadIn, dskNBlocks=dskNBlocks, osPWrites=osPWrites, tp162errThresHigh=tp162errThresHigh, nmSwapAvgHigh=nmSwapAvgHigh, vrtpNonSeqRdrIn=vrtpNonSeqRdrIn, osPnpFault=osPnpFault, ssName=ssName, svcStatus=svcStatus, cpuWIOUsage=cpuWIOUsage, amsRegIdClass=amsRegIdClass, osLWrites=osLWrites, osSystemWrite=osSystemWrite, stAddedGrp=stAddedGrp, vsLinkDown=vsLinkDown, psUserNoAuth=psUserNoAuth, osCurrentInodes=osCurrentInodes, osHWInodes=osHWInodes, ssSwRev=ssSwRev, vrtpNonSeqBdcstOut=vrtpNonSeqBdcstOut, osSemOps=osSemOps, nmSwapSpaceLowThres=nmSwapSpaceLowThres, vinesmibs=vinesmibs, nmLoadAvgHigh=nmLoadAvgHigh, vifX25VCPktsIn=vifX25VCPktsIn, osSystemRead=osSystemRead, vsPCDialInit=vsPCDialInit, fsMaxRecLocks=fsMaxRecLocks, dskUtil=dskUtil, tpSvrName=tpSvrName, nmCacheHits_Low=nmCacheHits_Low, commresources=commresources, vrtpNonSeqRspOut=vrtpNonSeqRspOut, svcIndex=svcIndex, vrtpRtEntry=vrtpRtEntry, osProcessSwitches=osProcessSwitches, vsNoSessAvail=vsNoSessAvail, tpGrpLimit=tpGrpLimit, amsLogRecIndex=amsLogRecIndex, vifX25VCSession=vifX25VCSession, vsppProbesOut=vsppProbesOut, dskTable=dskTable, vipInFragments=vipInFragments, vrtpNbrLocAddress=vrtpNbrLocAddress, nmDiskUseHighThres=nmDiskUseHighThres, vifX25VCTotIn=vifX25VCTotIn, nmTKRingOpen=nmTKRingOpen, vipBcast=vipBcast, vrtpReassBadIn=vrtpReassBadIn, svcUserSvcName=svcUserSvcName, tpRefSvrName=tpRefSvrName, ssMsgsOut=ssMsgsOut, ssPanicWait=ssPanicWait, tpMailMessageId=tpMailMessageId, vifLnkTotOut=vifLnkTotOut, nmAllocFail_High=nmAllocFail_High, cpuWSUsage=cpuWSUsage, vrtpRtSvrName=vrtpRtSvrName, svcName=svcName, vrtpNbrIfType=vrtpNbrIfType, vrtpNbrSvrName=vrtpNbrSvrName, vlogsTable=vlogsTable, osBswpInRate=osBswpInRate, nmSockInUseHigh=nmSockInUseHigh, osMounts=osMounts, vrtpNbrTable=vrtpNbrTable, ssLoadAvg15=ssLoadAvg15, vifLnkRetrans=vifLnkRetrans, osFreeMemoryTotal=osFreeMemoryTotal, amsLogEntry=amsLogEntry, osInBSwaps=osInBSwaps, osSwapOccPct=osSwapOccPct, tpSvcName=tpSvcName, vrtpReinitOut=vrtpReinitOut, vsppNoBuffers=vsppNoBuffers, vrtpNoBuffersIn=vrtpNoBuffersIn, vipFromDodIP=vipFromDodIP, tpDiskSpaceLeft=tpDiskSpaceLeft, svcUserName=svcUserName, vifLnkOvers=vifLnkOvers, ssDying=ssDying, vrtpRqstSlrInfoIn=vrtpRqstSlrInfoIn, vsMaxBadLogins=vsMaxBadLogins, vifX25VCInErrs=vifX25VCInErrs, amsRegPort=amsRegPort, ssProcType=ssProcType, vrtpRtMetric=vrtpRtMetric, vrtpReinitIn=vrtpReinitIn, osBReads=osBReads, tpAlertTime=tpAlertTime, tpLineNum=tpLineNum, vrtpNbrNumber=vrtpNbrNumber, nmTKRingSigLoss=nmTKRingSigLoss, afpAtalkDown=afpAtalkDown, nmTKRingRmvHardErr=nmTKRingRmvHardErr, bsSvcBkUpFailed=bsSvcBkUpFailed, dskNErrs=dskNErrs, nmSwapAvgHighThres=nmSwapAvgHighThres, osPReads=osPReads, osBWrites=osBWrites, amsLogAlertTime=amsLogAlertTime, nmDropsHighThres=nmDropsHighThres, tpSlotNum=tpSlotNum, mlMBTableMBOwner=mlMBTableMBOwner, ssSvcCrashed=ssSvcCrashed, vsppAcksOut=vsppAcksOut, vifStatIndex=vifStatIndex, svcLocOut=svcLocOut, tpSubNetId=tpSubNetId)
mibBuilder.exportSymbols("VINES-MIB", vsppBadType=vsppBadType, osWIOUsagePct=osWIOUsagePct, tpFXmtd=tpFXmtd, ssPanicUlimit=ssPanicUlimit, vsppAbortsOut=vsppAbortsOut, vsNoSpace=vsNoSpace, fsMaxOpensOnFiles=fsMaxOpensOnFiles, commAllocsFailed=commAllocsFailed, stRebuild=stRebuild, fsCacheBufSize=fsCacheBufSize, vrtpBadNonSeqRdrIn=vrtpBadNonSeqRdrIn, svcTotSess=svcTotSess, ams=ams, svcUserEntry=svcUserEntry, nmSockOvflow=nmSockOvflow, vsppMaxConns=vsppMaxConns, afpSessDiscon=afpSessDiscon, os=os, tpFRcvd=tpFRcvd, vrtpResyncIn=vrtpResyncIn, vrtpErrsIn=vrtpErrsIn, nmCommBuffHigh=nmCommBuffHigh, vrtpRtTable=vrtpRtTable, msDecompressFail=msDecompressFail, fsPctCacheHits=fsPctCacheHits, vrtpRtGateNetid=vrtpRtGateNetid, svcSize=svcSize, vifStatValue=vifStatValue, nmDiskBusyHighThres=nmDiskBusyHighThres, psOffline=psOffline, osOutSwaps=osOutSwaps, vrtpFragsDoneIn=vrtpFragsDoneIn, tp162errTotal=tp162errTotal, dskPctBusy=dskPctBusy, vifNumber=vifNumber, svcMsgsIn=svcMsgsIn, vsPCDialTerm=vsPCDialTerm, vrtpNbrEntry=vrtpNbrEntry, tpJobTotal=tpJobTotal, vrtpNonSeqRdrOut=vrtpNonSeqRdrOut, vrtpRqstsOut=vrtpRqstsOut, tpLnkReXtThres=tpLnkReXtThres, osHWFiles=osHWFiles, osBuffRdRate=osBuffRdRate, vrtpRtNumber=vrtpRtNumber, vifX25VCResetsIn=vifX25VCResetsIn, cpuWIOUserUsage=cpuWIOUserUsage, peripherals=peripherals, vifX25VCLine=vifX25VCLine, osRunQueueOcc=osRunQueueOcc, daSCoreDump=daSCoreDump, vrtpRqstLkUpIn=vrtpRqstLkUpIn, cpuIdleUsage=cpuIdleUsage, tpPortId=tpPortId, banyan=banyan, osSysCallRate=osSysCallRate, mailservice=mailservice, ossysstats=ossysstats, svcSockets=svcSockets, vipBad=vipBad, nmthresholds=nmthresholds, vifLnkSlot=vifLnkSlot, vrtpNonSeqRqstIn=vrtpNonSeqRqstIn, vsSvrSvrPwd=vsSvrSvrPwd, osSystemCalls=osSystemCalls, stGrpLimit=stGrpLimit, cpuIndex=cpuIndex, amsRegWhoAdded=amsRegWhoAdded, dskEntry=dskEntry, vipToDodIP=vipToDodIP, vifStatDescr=vifStatDescr, osCurrentFiles=osCurrentFiles, ssNoMemory=ssNoMemory, ssSwapAvg=ssSwapAvg, vrtpNonSeqUpdOut=vrtpNonSeqUpdOut, vrtpFragsDupIn=vrtpFragsDupIn, fsRecLocks=fsRecLocks, nmFreeSwapLow=nmFreeSwapLow, mlMBTableIndex=mlMBTableIndex, vlogsEntry=vlogsEntry, osBswpOutRate=osBswpOutRate, msMTAPanic=msMTAPanic, osIOBufs=osIOBufs, oscpuEntry=oscpuEntry, nmAllocFailHighThres=nmAllocFailHighThres, vsppTotIn=vsppTotIn, vrtpNonSeqBdcstIn=vrtpNonSeqBdcstIn, mlMailBoxTable=mlMailBoxTable, vrtpFragsIn=vrtpFragsIn, svcLogMask=svcLogMask, oscpuTable=oscpuTable, vsBadLoginDialin=vsBadLoginDialin, cpuWPIOUsage=cpuWPIOUsage, ssPowerFail=ssPowerFail, bsIncBkUpFailed=bsIncBkUpFailed, filesystem=filesystem, vrtpFragsDropIn=vrtpFragsDropIn, tpPaperFormat=tpPaperFormat, vipReass=vipReass, osRunOccPct=osRunOccPct, vrtpNoBuffersOut=vrtpNoBuffersOut, mlMailBoxTableEntry=mlMailBoxTableEntry, mlMBTableUnreadMsgs=mlMBTableUnreadMsgs, psPsPrinterErr=psPsPrinterErr, dskAvgWait=dskAvgWait, vrtpRedirIn=vrtpRedirIn, vspp=vspp, vrtpNbrType=vrtpNbrType, psPapError=psPapError, vifLnkLine=vifLnkLine, vifInPkts=vifInPkts, st162Errs=st162Errs, vrtpFragsDoneOut=vrtpFragsDoneOut, amsLogIdInstance=amsLogIdInstance, fsOpenFiles=fsOpenFiles, vifLnkTotIn=vifLnkTotIn, trapdata=trapdata, psFormUnavail=psFormUnavail, vsppTotOut=vsppTotOut, ssProdType=ssProdType, vifX25VCTotOut=vifX25VCTotOut, vipTooSmall=vipTooSmall, vrtpTotOut=vrtpTotOut, vifLnkNumber=vifLnkNumber, vrtpFragsOut=vrtpFragsOut, dskUsedPct=dskUsedPct, osLReads=osLReads, amsRegAlertee=amsRegAlertee, vsppDataIn=vsppDataIn, nmDiskBusy=nmDiskBusy, svcLocIn=svcLocIn, nmFreeMemLowThres=nmFreeMemLowThres, vipRouted=vipRouted, amsRegEntry=amsRegEntry, vsBadLoginPhysLoc=vsBadLoginPhysLoc, ssSvcRecrashed=ssSvcRecrashed, vsNoSTLogin=vsNoSTLogin, nmTKRingHardErr=nmTKRingHardErr, tpSockOvFlowNum=tpSockOvFlowNum, nmLnkReTXHigh=nmLnkReTXHigh, ssRealMemory=ssRealMemory, vrtpLkUp=vrtpLkUp, tpMailSender=tpMailSender, tpRtnName=tpRtnName, psBadDest=psBadDest, tpNumGrps=tpNumGrps, vifInErrs=vifInErrs, msBMSPanic=msBMSPanic, svcCpuTime=svcCpuTime, tpSvrNetId=tpSvrNetId, vsNoReachST=vsNoReachST, vrtpOutdatedIn=vrtpOutdatedIn, tpJobId=tpJobId, vifX25VCTable=vifX25VCTable, nmDropsHigh=nmDropsHigh, psQueueFull=psQueueFull, tpConnId=tpConnId, vrtpUpdatesOut=vrtpUpdatesOut, svcNumber=svcNumber, vifLnkDrops=vifLnkDrops, ssSvcNoStart=ssSvcNoStart, vifTable=vifTable, vifX25VCLogChnNum=vifX25VCLogChnNum, ssTimeSet=ssTimeSet, stDeletedGrp=stDeletedGrp, vsppConnsInUse=vsppConnsInUse, msDiskFull=msDiskFull, vifLnkType=vifLnkType, osWrtFault=osWrtFault, vrtpTotIn=vrtpTotIn, svcTable=svcTable, vifX25VCEntry=vifX25VCEntry, vrtpBdcstIn=vrtpBdcstIn, osUserMaxPu=osUserMaxPu, vifX25VCNumber=vifX25VCNumber, vrtpRqstsIn=vrtpRqstsIn, vrtpNetInfoBad=vrtpNetInfoBad, vrtpNonSeqTotIn=vrtpNonSeqTotIn, vifX25VCBytesIn=vifX25VCBytesIn, vsppNoPort=vsppNoPort, ssLoadAvg1=ssLoadAvg1, amsRegIdTid=amsRegIdTid, vrtpNbrSubNetid=vrtpNbrSubNetid, amsLogFileIndex=amsLogFileIndex, svcUserTable=svcUserTable, vifX25VCPktsAwaitAck=vifX25VCPktsAwaitAck, vrtpRtIdle=vrtpRtIdle, vifX25VCRemAddr=vifX25VCRemAddr, svcActSess=svcActSess, osFreeMemoryAvailable=osFreeMemoryAvailable, commTotBufs=commTotBufs, vrtpNbrRemAddress=vrtpNbrRemAddress, vrtpFragsDropOut=vrtpFragsDropOut, ssSystemDate=ssSystemDate, dskActive=dskActive, stDupGrp=stDupGrp, bsIncBkUpAborted=bsIncBkUpAborted, osSwapSpaceUsed=osSwapSpaceUsed, msCompressFail=msCompressFail, vipRoutedHWM=vipRoutedHWM, oscpuNum=oscpuNum, dskSizeMB=dskSizeMB, osIdleUsagePct=osIdleUsagePct, vrtpNonSeqTotOut=vrtpNonSeqTotOut, vrtpRtNetid=vrtpRtNetid, osMaxProcesses=osMaxProcesses, ssSystemUptime=ssSystemUptime, psJobReject=psJobReject, osUserMaxFp=osUserMaxFp, osBuffWrRate=osBuffWrRate, nmTKRingRmvMacFrame=nmTKRingRmvMacFrame, osSwapSpaceAvailable=osSwapSpaceAvailable, vrtp=vrtp, svcMsgsOut=svcMsgsOut, vifStatsList=vifStatsList, vsppLocal=vsppLocal, vsBadLoginTime=vsBadLoginTime, ssMsgAvg1=ssMsgAvg1, osRunQueue=osRunQueue, ssUserLicenseCfg=ssUserLicenseCfg, amsRegTable=amsRegTable, osSwapQueueOcc=osSwapQueueOcc, mib1=mib1, vrtpNbrLocLine=vrtpNbrLocLine, osSwitchRate=osSwitchRate, vrtpNetEntries=vrtpNetEntries, vifStatEntry=vifStatEntry, vsppDiscIn=vsppDiscIn, vifX25VCSlot=vifX25VCSlot, vrtpNbrEntries=vrtpNbrEntries, vrtpFragsBadOut=vrtpFragsBadOut, ossummstats=ossummstats, amsRegIdInstance=amsRegIdInstance, nmMsgAvgHighThres=nmMsgAvgHighThres, cpuUserUsage=cpuUserUsage, vrtpNonSeqRqstOut=vrtpNonSeqRqstOut, vsppDups=vsppDups, nmInodeUseHighThres=nmInodeUseHighThres, osSysUsagePct=osSysUsagePct, vrtpResponsesOut=vrtpResponsesOut)
