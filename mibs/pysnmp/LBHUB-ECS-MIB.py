#
# PySNMP MIB module LBHUB-ECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LBHUB-ECS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, ModuleIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, enterprises, Integer32, ObjectIdentity, mgmt, IpAddress, iso, Unsigned32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "ModuleIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "enterprises", "Integer32", "ObjectIdentity", "mgmt", "IpAddress", "iso", "Unsigned32", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
egp = MibIdentifier((1, 3, 6, 1, 2, 1, 8))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1))
terminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 1))
dedicatedBridgeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 2))
dedicatedRouteServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 3))
brouter = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 4))
genericMSWorkstation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 5))
genericMSServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 6))
genericUnixServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 7))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9))
linkBuilder3GH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 1))
linkBuilder10BTi = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 2))
linkBuilderECS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 3))
linkBuilderMSH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 4))
linkBuilderFMS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 5))
linkBuilderFMSLBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 10))
linkBuilderFMSII = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 7))
linkBuilder3GH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 1)).setLabel("linkBuilder3GH-cards")
linkBuilder10BTi_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2)).setLabel("linkBuilder10BTi-cards")
linkBuilderECS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 3)).setLabel("linkBuilderECS-cards")
linkBuilderMSH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 4)).setLabel("linkBuilderMSH-cards")
linkBuilderFMS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5)).setLabel("linkBuilderFMS-cards")
linkBuilderFMSII_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6)).setLabel("linkBuilderFMSII-cards")
linkBuilder10BTi_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 1)).setLabel("linkBuilder10BTi-cards-utp")
linkBuilder10BT_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 2)).setLabel("linkBuilder10BT-cards-utp")
linkBuilderFMS_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 1)).setLabel("linkBuilderFMS-cards-utp")
linkBuilderFMS_cards_coax = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 2)).setLabel("linkBuilderFMS-cards-coax")
linkBuilderFMS_cards_fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 3)).setLabel("linkBuilderFMS-cards-fiber")
linkBuilderFMS_cards_12fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 4)).setLabel("linkBuilderFMS-cards-12fiber")
linkBuilderFMS_cards_24utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 5)).setLabel("linkBuilderFMS-cards-24utp")
linkBuilderFMSII_cards_12tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 1)).setLabel("linkBuilderFMSII-cards-12tp-rj45")
linkBuilderFMSII_cards_10coax_bnc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 2)).setLabel("linkBuilderFMSII-cards-10coax-bnc")
linkBuilderFMSII_cards_6fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 3)).setLabel("linkBuilderFMSII-cards-6fiber-st")
linkBuilderFMSII_cards_12fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 4)).setLabel("linkBuilderFMSII-cards-12fiber-st")
linkBuilderFMSII_cards_24tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 5)).setLabel("linkBuilderFMSII-cards-24tp-rj45")
linkBuilderFMSII_cards_24tp_telco = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 6)).setLabel("linkBuilderFMSII-cards-24tp-telco")
amp_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 3)).setLabel("amp-mib")
genericTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 4))
viewBuilderApps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 5))
specificTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 6))
linkBuilder3GH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7)).setLabel("linkBuilder3GH-mib")
linkBuilder10BTi_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8)).setLabel("linkBuilder10BTi-mib")
linkBuilderECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9)).setLabel("linkBuilderECS-mib")
generic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10))
genExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1))
setup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2))
sysLoader = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 4))
gauges = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 5))
asciiAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 6))
serialIf = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 7))
repeaterMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8))
endStation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 9))
localSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 10))
manager = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 11))
unusedGeneric12 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 12))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 14))
mrmResilience = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 15))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 16))
multiRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17))
bridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 18))
fault = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 19))
poll = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 20))
powerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 21))
testData = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 1))
ifExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 2))
netBuilder_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 11)).setLabel("netBuilder-mib")
lBridgeECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 12)).setLabel("lBridgeECS-mib")
deskMan_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 13)).setLabel("deskMan-mib")
linkBuilderMSH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 14)).setLabel("linkBuilderMSH-mib")
ecsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 1))
ecsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 2))
ecsRLCResilientLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 3))
ecsSecureRepeaterLineCards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 4))
ecsRepeaterLineCard = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 5))
ecsRLCStationLocate = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 6))
ecsHubStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 8))
ecsVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 9))
lbecsXENDOFMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 255))
ecsAgentSystemIdentifier = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9, 1, 1))
ecsManufacturerId = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsManufacturerId.setStatus('deprecated')
ecsManufacturerProductId = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsManufacturerProductId.setStatus('mandatory')
ecsSoftwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSoftwareVersionNumber.setStatus('deprecated')
ecsHardwareVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHardwareVersionNumber.setStatus('deprecated')
ecsAgentSystemName = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemName.setStatus('deprecated')
ecsAgentSystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemLocation.setStatus('deprecated')
ecsAgentSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSystemTime.setStatus('deprecated')
ecsAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentStatus.setStatus('mandatory')
ecsAgentAuthenticationStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentAuthenticationStatus.setStatus('mandatory')
ecsAgentSecureManagementStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("secure-menu-entered", 3), ("secure-password-violation", 4), ("secure-config-update", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentSecureManagementStatus.setStatus('mandatory')
ecsAgentFrontPanelSetupPassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelSetupPassword.setStatus('mandatory')
ecsAgentFrontPanelDisplay = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelDisplay.setStatus('mandatory')
ecsAgentFrontPanelPassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelPassword.setStatus('mandatory')
ecsAgentFrontPanelSecurePassword = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelSecurePassword.setStatus('mandatory')
ecsAgentFrontPanelLock = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentFrontPanelLock.setStatus('mandatory')
ecsAgentResetDevice = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentResetDevice.setStatus('mandatory')
ecsAgentRestart = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notrestart", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentRestart.setStatus('mandatory')
ecsAgentDefaultConfig = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reverting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentDefaultConfig.setStatus('mandatory')
ecsAgentManagementTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 1, 20), )
if mibBuilder.loadTexts: ecsAgentManagementTable.setStatus('mandatory')
ecsAgentManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAgentManagementAddr"))
if mibBuilder.loadTexts: ecsAgentManagementEntry.setStatus('mandatory')
ecsAgentManagementAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManagementAddr.setStatus('mandatory')
ecsAgentManagementAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("invalid", 1), ("off", 2), ("superread", 3), ("superreadwrite", 4), ("readonly", 5), ("readwrite", 6), ("readonlysecure", 7), ("readwritesecure", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManagementAccess.setStatus('mandatory')
ecsAgentManAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentManAccessLevel.setStatus('mandatory')
ecsAgentTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 1, 21), )
if mibBuilder.loadTexts: ecsAgentTrapReceiverTable.setStatus('mandatory')
ecsAgentTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAgentTrapReceiverAddr"))
if mibBuilder.loadTexts: ecsAgentTrapReceiverEntry.setStatus('mandatory')
ecsAgentTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapReceiverAddr.setStatus('mandatory')
ecsAgentTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("invalid", 1), ("off-on", 2), ("generic", 3), ("psu", 4), ("fanfail", 5), ("configuractionchange", 6), ("port", 7), ("resilience", 8), ("rate", 9), ("stationlocate", 10), ("secure", 11), ("secureport", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapType.setStatus('mandatory')
ecsAgentTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentTrapReceiverComm.setStatus('mandatory')
ecsAgentTrapLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 1, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentTrapLevel.setStatus('mandatory')
ecsAgentAuthTrapState = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentAuthTrapState.setStatus('deprecated')
ecsAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpAddr.setStatus('mandatory')
ecsAgentIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpNetmask.setStatus('mandatory')
ecsAgentDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentDefaultGateway.setStatus('mandatory')
ecsAgentIpBroadAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentIpBroadAddr.setStatus('mandatory')
ecsAgentMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentMACAddress.setStatus('mandatory')
ecsAgentSecureTrapState = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAgentSecureTrapState.setStatus('mandatory')
ecsAgentLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentLastSystemError.setStatus('mandatory')
ecsAgentLastTrap = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 1, 30), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAgentLastTrap.setStatus('mandatory')
ecsRackType = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ecs4", 2), ("ecs10", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRackType.setStatus('mandatory')
ecsRackConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 2, 2), )
if mibBuilder.loadTexts: ecsRackConfigurationTable.setStatus('mandatory')
ecsSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsSlotConfigIndex"))
if mibBuilder.loadTexts: ecsSlotConfigEntry.setStatus('mandatory')
ecsSlotConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotConfigIndex.setStatus('mandatory')
ecsSlotCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSlotCardName.setStatus('mandatory')
ecsSlotDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("empty", 1), ("unknown", 2), ("managementcard", 3), ("thinEthernetCard", 4), ("thinEthernetCardpAUI", 5), ("unshieldedTwistedPair", 6), ("fibre", 7), ("bridge-Line-Card", 8), ("monitor", 9), ("shieldedTwistedPair", 10), ("fanout", 11), ("secureUnshieldedTP", 12), ("secureSheildedTP", 13), ("secureFibre", 14), ("secureFanout", 15), ("secureThinEthernet", 16), ("terminalserver", 17), ("remotebridge", 18), ("videoswitch", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotDeviceType.setStatus('mandatory')
ecsSlotSoftVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotSoftVerNum.setStatus('mandatory')
ecsSlotHardVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotHardVerNum.setStatus('mandatory')
ecsSlotNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotNumOfPorts.setStatus('mandatory')
ecsSlotMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSlotMediaType.setStatus('mandatory')
ecsCardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCardReset.setStatus('mandatory')
ecsLampOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsLampOverRide.setStatus('mandatory')
ecsCardIsolated = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-isolated", 1), ("isolated", 2), ("cant-isolate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCardIsolated.setStatus('mandatory')
ecsCardIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 2, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCardIpAddress.setStatus('mandatory')
ecsPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("psu1failed", 2), ("psu2failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPSUStatus.setStatus('mandatory')
ecsFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsFanStatus.setStatus('mandatory')
ecsRLCNumberOfResilientLinks = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumberOfResilientLinks.setStatus('mandatory')
ecsRLCNumberOfDOBPorts = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumberOfDOBPorts.setStatus('mandatory')
ecsRLCResilientLinkTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 3, 3), )
if mibBuilder.loadTexts: ecsRLCResilientLinkTable.setStatus('mandatory')
ecsRLCResilientLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLMainLinkSlot"), (0, "LBHUB-ECS-MIB", "ecsRLMainLinkPort"))
if mibBuilder.loadTexts: ecsRLCResilientLinkEntry.setStatus('mandatory')
ecsRLMainLinkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLMainLinkSlot.setStatus('mandatory')
ecsRLMainLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLMainLinkPort.setStatus('mandatory')
ecsRLStandbySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLStandbySlot.setStatus('mandatory')
ecsRLStandbyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLStandbyPort.setStatus('mandatory')
ecsRLActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("main", 3), ("standby", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLActiveLink.setStatus('mandatory')
ecsResLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("operational", 2), ("non-operational", 3), ("switchlink", 4), ("standby-jumperfault", 5), ("main-absent", 6), ("standby-absent", 7), ("main-failed", 8), ("standby-failed", 9), ("both-failed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsResLinkState.setStatus('mandatory')
ecsSecureRLCMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecureRLCMode.setStatus('mandatory')
ecsSecureTrapRepRate = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("continuous", 1), ("one-minute", 2), ("fifteen-mins", 3), ("sixty-minutes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecureTrapRepRate.setStatus('mandatory')
ecsSecureRLCTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 4, 3), )
if mibBuilder.loadTexts: ecsSecureRLCTable.setStatus('mandatory')
ecsSecureRLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsSecRLCSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsSecRLCPortIndex"))
if mibBuilder.loadTexts: ecsSecureRLCEntry.setStatus('mandatory')
ecsSecRLCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCSlotIndex.setStatus('mandatory')
ecsSecRLCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCPortIndex.setStatus('mandatory')
ecsSecRLCLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("secure", 2), ("repeater", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsSecRLCLinkState.setStatus('mandatory')
ecsSecRLCPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("unauthorised-station-seen", 4), ("unauthorised-station-port-disabled", 5), ("authorised-station-learnt", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCPortState.setStatus('mandatory')
ecsSecRLCNTKState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCNTKState.setStatus('mandatory')
ecsSecRLCBroadState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCBroadState.setStatus('mandatory')
ecsSecRLCMultiState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCMultiState.setStatus('mandatory')
ecsSecRLCLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("single", 2), ("continual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCLearnMode.setStatus('mandatory')
ecsSecRLCReportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("reportonly", 2), ("disconnectandreport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCReportMode.setStatus('mandatory')
ecsSecRLCMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 4, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsSecRLCMACAddress.setStatus('mandatory')
ecsRLCPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 1), )
if mibBuilder.loadTexts: ecsRLCPortStatisticsTable.setStatus('mandatory')
ecsRLCPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRepeaterSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsRepeaterPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortStatisticsEntry.setStatus('mandatory')
ecsRepeaterSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterSlotIndex.setStatus('mandatory')
ecsRepeaterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterPortIndex.setStatus('mandatory')
ecsRepeaterPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("disabled-linkdown", 3), ("enabled-linkdown", 4), ("disabled-linkup", 5), ("enabled-linkup", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRepeaterPortState.setStatus('mandatory')
ecsRepeaterPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("partitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRepeaterPartitionState.setStatus('mandatory')
ecsGoodRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsGoodRcvdFrames.setStatus('mandatory')
ecsTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTotalByteCount.setStatus('mandatory')
ecsTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTotalErrorCount.setStatus('mandatory')
ecsRxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRxBroadcastFrames.setStatus('mandatory')
ecsRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRxMulticastFrames.setStatus('mandatory')
ecsRLCPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 2), )
if mibBuilder.loadTexts: ecsRLCPortErrorTable.setStatus('mandatory')
ecsRLCPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsErrorSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsErrorPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortErrorEntry.setStatus('mandatory')
ecsErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsErrorSlotIndex.setStatus('mandatory')
ecsErrorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsErrorPortIndex.setStatus('mandatory')
ecsCollisionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionsCount.setStatus('mandatory')
ecsPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPartitions.setStatus('mandatory')
ecsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSenseErrors.setStatus('mandatory')
ecsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignErrors.setStatus('mandatory')
ecsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCErrors.setStatus('mandatory')
ecsJabberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberErrors.setStatus('mandatory')
ecsRLCPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 3), )
if mibBuilder.loadTexts: ecsRLCPortInfoTable.setStatus('mandatory')
ecsRLCPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsInfoSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsInfoPortIndex"))
if mibBuilder.loadTexts: ecsRLCPortInfoEntry.setStatus('mandatory')
ecsInfoSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsInfoSlotIndex.setStatus('mandatory')
ecsInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsInfoPortIndex.setStatus('mandatory')
ecsInfoPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsInfoPortName.setStatus('mandatory')
ecsRepeaterPartitionAlgor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRepeaterPartitionAlgor.setStatus('mandatory')
ecsJabberLockProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberLockProtect.setStatus('mandatory')
ecsPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-in-test", 1), ("test", 2), ("passed", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortTest.setStatus('mandatory')
ecsPortErrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("hi-collision", 3), ("partition", 4), ("high-crc-errorrate", 5), ("high-alignment-errorrate", 6), ("high-traffic-rate", 7), ("high-jabber-errorrate", 8), ("high-carriersense-errorrate", 9), ("unpartitioned", 10), ("linkstatechange-up", 11), ("linkstatechange-down", 12), ("acknowledged", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortErrorState.setStatus('mandatory')
ecsPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-reset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortReset.setStatus('mandatory')
ecsPortPartitionTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortPartitionTraps.setStatus('mandatory')
ecsPortLinkTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortLinkTraps.setStatus('mandatory')
ecsPortBootState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsPortBootState.setStatus('mandatory')
ecsPortSLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsPortSLMode.setStatus('mandatory')
ecsRLCcrcTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 4), )
if mibBuilder.loadTexts: ecsRLCcrcTable.setStatus('mandatory')
ecsRLCcrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCRCSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCRCPortIndex"))
if mibBuilder.loadTexts: ecsRLCcrcEntry.setStatus('mandatory')
ecsCRCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCSlotIndex.setStatus('mandatory')
ecsCRCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCPortIndex.setStatus('mandatory')
ecsCRCErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCRCErrorRate.setStatus('mandatory')
ecsCRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCThreshold.setStatus('mandatory')
ecsCRCDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCDecRateValue.setStatus('mandatory')
ecsCRCDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCDecRateUnits.setStatus('mandatory')
ecsCRCHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCRCHysteresisValue.setStatus('mandatory')
ecsRLCtrafficTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 5), )
if mibBuilder.loadTexts: ecsRLCtrafficTable.setStatus('mandatory')
ecsRLCtrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsTrafficSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsTrafficPortIndex"))
if mibBuilder.loadTexts: ecsRLCtrafficEntry.setStatus('mandatory')
ecsTrafficSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficSlotIndex.setStatus('mandatory')
ecsTrafficPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficPortIndex.setStatus('mandatory')
ecsTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsTrafficRate.setStatus('mandatory')
ecsTrafficThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficThreshold.setStatus('mandatory')
ecsTrafficDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficDecRateValue.setStatus('mandatory')
ecsTrafficDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficDecRateUnits.setStatus('mandatory')
ecsTrafficHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsTrafficHysteresisValue.setStatus('mandatory')
ecsRLCcollisionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 6), )
if mibBuilder.loadTexts: ecsRLCcollisionTable.setStatus('mandatory')
ecsRLCcollisionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCollisionSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCollisionPortIndex"))
if mibBuilder.loadTexts: ecsRLCcollisionEntry.setStatus('mandatory')
ecsCollisionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionSlotIndex.setStatus('mandatory')
ecsCollisionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionPortIndex.setStatus('mandatory')
ecsCollisionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCollisionRate.setStatus('mandatory')
ecsCollisionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionThreshold.setStatus('mandatory')
ecsCollisionDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionDecRateValue.setStatus('mandatory')
ecsCollisionDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionDecRateUnits.setStatus('mandatory')
ecsCollisionHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCollisionHysteresisValue.setStatus('mandatory')
ecsRLCjabberTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 7), )
if mibBuilder.loadTexts: ecsRLCjabberTable.setStatus('mandatory')
ecsRLCjabberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsJabberSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsJabberPortIndex"))
if mibBuilder.loadTexts: ecsRLCjabberEntry.setStatus('mandatory')
ecsJabberSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberSlotIndex.setStatus('mandatory')
ecsJabberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberPortIndex.setStatus('mandatory')
ecsJabberErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsJabberErrorRate.setStatus('mandatory')
ecsJabberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberThreshold.setStatus('mandatory')
ecsJabberDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberDecRateValue.setStatus('mandatory')
ecsJabberDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberDecRateUnits.setStatus('mandatory')
ecsJabberHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsJabberHysteresisValue.setStatus('mandatory')
ecsRLCalignTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 8), )
if mibBuilder.loadTexts: ecsRLCalignTable.setStatus('mandatory')
ecsRLCalignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsAlignSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsAlignPortIndex"))
if mibBuilder.loadTexts: ecsRLCalignEntry.setStatus('mandatory')
ecsAlignSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignSlotIndex.setStatus('mandatory')
ecsAlignPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignPortIndex.setStatus('mandatory')
ecsAlignErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsAlignErrorRate.setStatus('mandatory')
ecsAlignThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignThreshold.setStatus('mandatory')
ecsAlignDecRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignDecRateValue.setStatus('mandatory')
ecsAlignDecRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignDecRateUnits.setStatus('mandatory')
ecsAlignHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsAlignHysteresisValue.setStatus('mandatory')
ecsRLCcarrierTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 9), )
if mibBuilder.loadTexts: ecsRLCcarrierTable.setStatus('mandatory')
ecsRLCcarrierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsCarrierSlotIndex"), (0, "LBHUB-ECS-MIB", "ecsCarrierPortIndex"))
if mibBuilder.loadTexts: ecsRLCcarrierEntry.setStatus('mandatory')
ecsCarrierSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSlotIndex.setStatus('mandatory')
ecsCarrierPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierPortIndex.setStatus('mandatory')
ecsCarrierSenseErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsCarrierSenseErrorRate.setStatus('mandatory')
ecsCarrierSenseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseThreshold.setStatus('mandatory')
ecsCarrierSenseRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseRateValue.setStatus('mandatory')
ecsCarrierSenseRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("microseconds", 2), ("milliseconds", 3), ("seconds", 4), ("minutes", 5), ("hours", 6), ("days", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseRateUnits.setStatus('mandatory')
ecsCarrierSenseHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsCarrierSenseHysteresisValue.setStatus('mandatory')
ecsRLCSlotStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 10), )
if mibBuilder.loadTexts: ecsRLCSlotStatisticsTable.setStatus('mandatory')
ecsRLCSlotStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCSlotIndex"))
if mibBuilder.loadTexts: ecsRLCSlotStatisticsEntry.setStatus('mandatory')
ecsRLCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSlotIndex.setStatus('mandatory')
ecsRLCGoodRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCGoodRcvdFrames.setStatus('mandatory')
ecsRLCTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalByteCount.setStatus('mandatory')
ecsRLCTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalErrorCount.setStatus('mandatory')
ecsRLCTotalBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalBroadcasts.setStatus('mandatory')
ecsRLCTotalMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCTotalMulticasts.setStatus('mandatory')
ecsRLCSlotErrorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 5, 11), )
if mibBuilder.loadTexts: ecsRLCSlotErrorTable.setStatus('mandatory')
ecsRLCSlotErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCErrorSlotIndex"))
if mibBuilder.loadTexts: ecsRLCSlotErrorEntry.setStatus('mandatory')
ecsRLCErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCErrorSlotIndex.setStatus('mandatory')
ecsRLCCollisionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCollisionsCount.setStatus('mandatory')
ecsRLCPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCPartitions.setStatus('mandatory')
ecsRLCCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCarrierSenseErrors.setStatus('mandatory')
ecsRLCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCAlignErrors.setStatus('mandatory')
ecsRLCCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCCRCErrors.setStatus('mandatory')
ecsRLCJabberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 5, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCJabberErrors.setStatus('mandatory')
ecsHubTotalGoodRcvdFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalGoodRcvdFrames.setStatus('mandatory')
ecsHubTotalByteCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalByteCount.setStatus('mandatory')
ecsHubTotalErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalErrorCount.setStatus('mandatory')
ecsHubTotalBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalBroadcasts.setStatus('mandatory')
ecsHubTotalMultiFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalMultiFrames.setStatus('mandatory')
ecsHubTotalCollisionsCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCollisionsCount.setStatus('mandatory')
ecsHubTotalPartitions = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalPartitions.setStatus('mandatory')
ecsHubTotalCarrierSenseErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCarrierSenseErrors.setStatus('mandatory')
ecsHubTotalAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalAlignErrors.setStatus('mandatory')
ecsHubTotalCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalCRCErrors.setStatus('mandatory')
ecsHubTotalJabberErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsHubTotalJabberErrors.setStatus('mandatory')
ecsRLCSizeOfStationLocateDB = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSizeOfStationLocateDB.setStatus('mandatory')
ecsRLCNumbOfSLEntries = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNumbOfSLEntries.setStatus('mandatory')
ecsRLCSLDataBaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("changed", 1), ("unchanged", 2), ("clear", 3), ("full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLDataBaseStatus.setStatus('mandatory')
ecsRLCSLowFilterAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLowFilterAddress.setStatus('mandatory')
ecsRLCSLhighFilterAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 9, 6, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLhighFilterAddress.setStatus('mandatory')
ecsRLCStationLocateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 6, 6), )
if mibBuilder.loadTexts: ecsRLCStationLocateTable.setStatus('mandatory')
ecsRLCStationLocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCSLAddress"))
if mibBuilder.loadTexts: ecsRLCStationLocateEntry.setStatus('mandatory')
ecsRLCSLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLAddress.setStatus('mandatory')
ecsRLCSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLSlotIndex.setStatus('mandatory')
ecsRLCSLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCSLPortIndex.setStatus('mandatory')
ecsRLCSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsRLCSLStatus.setStatus('mandatory')
ecsRLCNewStationLocateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 6, 7), )
if mibBuilder.loadTexts: ecsRLCNewStationLocateTable.setStatus('mandatory')
ecsRLCNewStationLocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsRLCNewSLAddress"))
if mibBuilder.loadTexts: ecsRLCNewStationLocateEntry.setStatus('mandatory')
ecsRLCNewSLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLAddress.setStatus('mandatory')
ecsRLCNewSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLSlotIndex.setStatus('mandatory')
ecsRLCNewSLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsRLCNewSLPortIndex.setStatus('mandatory')
xecsDummyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 9, 255, 1), )
if mibBuilder.loadTexts: xecsDummyTable.setStatus('mandatory')
ecsDummyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1), ).setIndexNames((0, "LBHUB-ECS-MIB", "ecsDummyIndex"))
if mibBuilder.loadTexts: ecsDummyEntry.setStatus('mandatory')
ecsDummyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecsDummyIndex.setStatus('mandatory')
ecsDummyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 9, 255, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecsDummyValue.setStatus('mandatory')
powerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,0)).setObjects(("LBHUB-ECS-MIB", "ecsPSUStatus"))
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,1))
configurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,2))
portTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,3)).setObjects(("LBHUB-ECS-MIB", "ecsInfoSlotIndex"), ("LBHUB-ECS-MIB", "ecsInfoPortIndex"), ("LBHUB-ECS-MIB", "ecsPortErrorState"))
resilientLinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,4)).setObjects(("LBHUB-ECS-MIB", "ecsRLMainLinkSlot"), ("LBHUB-ECS-MIB", "ecsRLMainLinkPort"), ("LBHUB-ECS-MIB", "ecsRLStandbySlot"), ("LBHUB-ECS-MIB", "ecsRLStandbyPort"), ("LBHUB-ECS-MIB", "ecsRLActiveLink"), ("LBHUB-ECS-MIB", "ecsResLinkState"))
rateTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,5)).setObjects(("LBHUB-ECS-MIB", "ecsInfoSlotIndex"), ("LBHUB-ECS-MIB", "ecsInfoPortIndex"), ("LBHUB-ECS-MIB", "ecsPortErrorState"))
stationlocateTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,6)).setObjects(("LBHUB-ECS-MIB", "ecsRLCSLDataBaseStatus"))
secureRLCTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,7)).setObjects(("LBHUB-ECS-MIB", "ecsAgentSecureManagementStatus"))
secureRLCportTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 1, 8, 3) + (0,8)).setObjects(("LBHUB-ECS-MIB", "ecsSecRLCSlotIndex"), ("LBHUB-ECS-MIB", "ecsSecRLCPortIndex"), ("LBHUB-ECS-MIB", "ecsSecRLCPortState"), ("LBHUB-ECS-MIB", "ecsSecRLCMACAddress"))
mibBuilder.exportSymbols("LBHUB-ECS-MIB", ecsRLCStationLocateEntry=ecsRLCStationLocateEntry, tokenRing=tokenRing, cards=cards, ecsRLCNumberOfDOBPorts=ecsRLCNumberOfDOBPorts, ecsRLCcollisionTable=ecsRLCcollisionTable, interfaces=interfaces, ecsHubTotalCarrierSenseErrors=ecsHubTotalCarrierSenseErrors, ecsTrafficDecRateUnits=ecsTrafficDecRateUnits, ecsCRCSlotIndex=ecsCRCSlotIndex, ecsRxMulticastFrames=ecsRxMulticastFrames, ecsInfoPortName=ecsInfoPortName, ecsInfoSlotIndex=ecsInfoSlotIndex, ecsCollisionsCount=ecsCollisionsCount, ecsRLCSLowFilterAddress=ecsRLCSLowFilterAddress, dedicatedRouteServer=dedicatedRouteServer, ecsHubTotalMultiFrames=ecsHubTotalMultiFrames, ecsAgentTrapLevel=ecsAgentTrapLevel, ecsRLCPortInfoTable=ecsRLCPortInfoTable, linkBuilderFMS_cards_fiber=linkBuilderFMS_cards_fiber, ecsRLActiveLink=ecsRLActiveLink, configurationChanged=configurationChanged, specificTrap=specificTrap, bridgeMgmt=bridgeMgmt, ecsAgentAuthTrapState=ecsAgentAuthTrapState, at=at, chassis=chassis, ecsAgent=ecsAgent, ecsCardReset=ecsCardReset, ecsAlignDecRateUnits=ecsAlignDecRateUnits, mib_2=mib_2, ecsRLCResilientLinkEntry=ecsRLCResilientLinkEntry, ecsRLCGoodRcvdFrames=ecsRLCGoodRcvdFrames, ecsCarrierSenseRateValue=ecsCarrierSenseRateValue, ecsRepeaterLineCard=ecsRepeaterLineCard, ecsSecureRLCTable=ecsSecureRLCTable, serialIf=serialIf, ecsCRCPortIndex=ecsCRCPortIndex, ecsRLCtrafficEntry=ecsRLCtrafficEntry, ecsAlignErrors=ecsAlignErrors, ecsAgentSystemName=ecsAgentSystemName, ecsSecRLCLinkState=ecsSecRLCLinkState, genericMSServer=genericMSServer, ecsRLCPortErrorEntry=ecsRLCPortErrorEntry, ecsRLCSLDataBaseStatus=ecsRLCSLDataBaseStatus, ecsSecRLCLearnMode=ecsSecRLCLearnMode, ecsCarrierSlotIndex=ecsCarrierSlotIndex, ecsRLCPortStatisticsTable=ecsRLCPortStatisticsTable, ifExtensions=ifExtensions, secureRLCTrap=secureRLCTrap, fanFailure=fanFailure, dedicatedBridgeServer=dedicatedBridgeServer, viewBuilderApps=viewBuilderApps, localSnmp=localSnmp, ecsRLCSlotIndex=ecsRLCSlotIndex, rateTrap=rateTrap, linkBuilder3GH=linkBuilder3GH, ecsSlotCardName=ecsSlotCardName, ecsPartitions=ecsPartitions, ecsSoftwareVersionNumber=ecsSoftwareVersionNumber, ecsRLCCarrierSenseErrors=ecsRLCCarrierSenseErrors, ecsSlotMediaType=ecsSlotMediaType, powerSupplyFailure=powerSupplyFailure, ip=ip, linkBuilder10BT_cards_utp=linkBuilder10BT_cards_utp, ecsAgentManagementTable=ecsAgentManagementTable, ecsCRCErrors=ecsCRCErrors, ecsPSUStatus=ecsPSUStatus, ecsFanStatus=ecsFanStatus, ecsSlotHardVerNum=ecsSlotHardVerNum, linkBuilderFMS_cards_24utp=linkBuilderFMS_cards_24utp, ecsCRCDecRateUnits=ecsCRCDecRateUnits, ecsJabberDecRateValue=ecsJabberDecRateValue, ecsRLCcarrierEntry=ecsRLCcarrierEntry, ecsAgentManagementAddr=ecsAgentManagementAddr, ecsErrorSlotIndex=ecsErrorSlotIndex, ecsRLCResilientLinkTable=ecsRLCResilientLinkTable, ecsAgentManagementAccess=ecsAgentManagementAccess, ecsRLCCRCErrors=ecsRLCCRCErrors, ecsSlotNumOfPorts=ecsSlotNumOfPorts, ecsSecRLCSlotIndex=ecsSecRLCSlotIndex, genericTrap=genericTrap, linkBuilderFMS_cards_utp=linkBuilderFMS_cards_utp, DisplayString=DisplayString, linkBuilderFMSII=linkBuilderFMSII, ecsPortErrorState=ecsPortErrorState, ecsRLCjabberTable=ecsRLCjabberTable, terminalServer=terminalServer, ecsVideo=ecsVideo, ecsAgentFrontPanelSecurePassword=ecsAgentFrontPanelSecurePassword, ecsRepeaterPortIndex=ecsRepeaterPortIndex, ecsAgentSecureTrapState=ecsAgentSecureTrapState, ecsRxBroadcastFrames=ecsRxBroadcastFrames, ecsRLCNewSLPortIndex=ecsRLCNewSLPortIndex, ecsHardwareVersionNumber=ecsHardwareVersionNumber, egp=egp, lBridgeECS_mib=lBridgeECS_mib, ecsAgentAuthenticationStatus=ecsAgentAuthenticationStatus, udp=udp, ecsRLCNewStationLocateTable=ecsRLCNewStationLocateTable, ecsSecRLCPortIndex=ecsSecRLCPortIndex, ecsHubTotalPartitions=ecsHubTotalPartitions, ecsSecRLCMultiState=ecsSecRLCMultiState, powerSupply=powerSupply, resilientLinkTrap=resilientLinkTrap, ecsSecRLCPortState=ecsSecRLCPortState, ecsRLCSizeOfStationLocateDB=ecsRLCSizeOfStationLocateDB, ecsCollisionHysteresisValue=ecsCollisionHysteresisValue, ecsAgentSystemIdentifier=ecsAgentSystemIdentifier, ecsAlignSlotIndex=ecsAlignSlotIndex, ecsSecureTrapRepRate=ecsSecureTrapRepRate, ecsJabberLockProtect=ecsJabberLockProtect, generic=generic, sysLoader=sysLoader, tcp=tcp, ecsRLCSlotStatisticsEntry=ecsRLCSlotStatisticsEntry, ecsCRCDecRateValue=ecsCRCDecRateValue, linkBuilderFMSII_cards_24tp_rj45=linkBuilderFMSII_cards_24tp_rj45, ecsAgentIpBroadAddr=ecsAgentIpBroadAddr, ecsHubStatistics=ecsHubStatistics, ecsResLinkState=ecsResLinkState, endStation=endStation, portTrap=portTrap, ecsRLMainLinkPort=ecsRLMainLinkPort, icmp=icmp, ecsCarrierSenseErrorRate=ecsCarrierSenseErrorRate, ecsPortReset=ecsPortReset, ecsRLCNewStationLocateEntry=ecsRLCNewStationLocateEntry, deskMan_mib=deskMan_mib, ecsPortSLMode=ecsPortSLMode, linkBuilderFMSII_cards_10coax_bnc=linkBuilderFMSII_cards_10coax_bnc, ecsRepeaterPortState=ecsRepeaterPortState, ecsHubTotalByteCount=ecsHubTotalByteCount, linkBuilder10BTi=linkBuilder10BTi, ecsAgentRestart=ecsAgentRestart, ecsAgentManAccessLevel=ecsAgentManAccessLevel, ecsJabberSlotIndex=ecsJabberSlotIndex, ecsRLCalignTable=ecsRLCalignTable, ecsRepeaterPartitionAlgor=ecsRepeaterPartitionAlgor, products=products, ecsTrafficPortIndex=ecsTrafficPortIndex, ecsCarrierPortIndex=ecsCarrierPortIndex, linkBuilder10BTi_mib=linkBuilder10BTi_mib, linkBuilder3GH_cards=linkBuilder3GH_cards, ecsTotalByteCount=ecsTotalByteCount, linkBuilder10BTi_cards=linkBuilder10BTi_cards, ecsRLCSlotErrorEntry=ecsRLCSlotErrorEntry, ecsJabberThreshold=ecsJabberThreshold, fault=fault, ecsJabberErrorRate=ecsJabberErrorRate, ecsTrafficSlotIndex=ecsTrafficSlotIndex, ecsDummyEntry=ecsDummyEntry, lbecsXENDOFMIB=lbecsXENDOFMIB, setup=setup, ecsTrafficDecRateValue=ecsTrafficDecRateValue, ecsHubTotalGoodRcvdFrames=ecsHubTotalGoodRcvdFrames, ecsRLCSLStatus=ecsRLCSLStatus, ecsRLCTotalErrorCount=ecsRLCTotalErrorCount, system=system, ecsRepeaterSlotIndex=ecsRepeaterSlotIndex, ecsRackType=ecsRackType, ecsAgentStatus=ecsAgentStatus, security=security, linkBuilderFMSII_cards_12tp_rj45=linkBuilderFMSII_cards_12tp_rj45, ecsHubTotalCRCErrors=ecsHubTotalCRCErrors, ecsRLCcrcEntry=ecsRLCcrcEntry, ecsAgentSystemTime=ecsAgentSystemTime, ecsHubTotalAlignErrors=ecsHubTotalAlignErrors, ecsTrafficHysteresisValue=ecsTrafficHysteresisValue, linkBuilderFMS_cards_12fiber=linkBuilderFMS_cards_12fiber, amp_mib=amp_mib, ecsJabberPortIndex=ecsJabberPortIndex, ecsCardIpAddress=ecsCardIpAddress, ecsManufacturerProductId=ecsManufacturerProductId, ecsSlotSoftVerNum=ecsSlotSoftVerNum, linkBuilderFMSLBridge=linkBuilderFMSLBridge, ecsCarrierSenseErrors=ecsCarrierSenseErrors, ecsRLCTotalByteCount=ecsRLCTotalByteCount, ecsAgentTrapReceiverAddr=ecsAgentTrapReceiverAddr, snmp=snmp, linkBuilderFMSII_cards_12fiber_st=linkBuilderFMSII_cards_12fiber_st, ecsRLCSLAddress=ecsRLCSLAddress, ecsPortBootState=ecsPortBootState, xecsDummyTable=xecsDummyTable, ecsEnvironment=ecsEnvironment, ecsRLStandbyPort=ecsRLStandbyPort, linkBuilder3GH_mib=linkBuilder3GH_mib, ecsRLCNumbOfSLEntries=ecsRLCNumbOfSLEntries, unusedGeneric12=unusedGeneric12, ecsRepeaterPartitionState=ecsRepeaterPartitionState, ecsSecureRepeaterLineCards=ecsSecureRepeaterLineCards, ecsCRCHysteresisValue=ecsCRCHysteresisValue, ecsRLCJabberErrors=ecsRLCJabberErrors, poll=poll, ecsAgentSecureManagementStatus=ecsAgentSecureManagementStatus, ecsRLCcrcTable=ecsRLCcrcTable, ecsRLStandbySlot=ecsRLStandbySlot, ecsRLCNewSLSlotIndex=ecsRLCNewSLSlotIndex, ecsTrafficRate=ecsTrafficRate, ecsCarrierSenseThreshold=ecsCarrierSenseThreshold, ecsRLCStationLocateTable=ecsRLCStationLocateTable, ecsAgentLastSystemError=ecsAgentLastSystemError, ecsRLCTotalBroadcasts=ecsRLCTotalBroadcasts, ecsRLCcarrierTable=ecsRLCcarrierTable, ecsCollisionDecRateUnits=ecsCollisionDecRateUnits, ecsPortLinkTraps=ecsPortLinkTraps, ecsErrorPortIndex=ecsErrorPortIndex, ecsRLCNumberOfResilientLinks=ecsRLCNumberOfResilientLinks, hub=hub, ecsRLCSlotErrorTable=ecsRLCSlotErrorTable, ecsAgentIpAddr=ecsAgentIpAddr, ecsLampOverRide=ecsLampOverRide, linkBuilderECS=linkBuilderECS, ecsRLCResilientLinks=ecsRLCResilientLinks, ecsRackConfigurationTable=ecsRackConfigurationTable, ecsAgentIpNetmask=ecsAgentIpNetmask, ecsRLCSLPortIndex=ecsRLCSLPortIndex, linkBuilder10BTi_cards_utp=linkBuilder10BTi_cards_utp, ecsRLCPortStatisticsEntry=ecsRLCPortStatisticsEntry, linkBuilderFMS=linkBuilderFMS, ecsCollisionDecRateValue=ecsCollisionDecRateValue, ecsSecRLCBroadState=ecsSecRLCBroadState, ecsRLCSLSlotIndex=ecsRLCSLSlotIndex, genExperimental=genExperimental, ecsRLCPortErrorTable=ecsRLCPortErrorTable, a3Com=a3Com, repeaterMgmt=repeaterMgmt, linkBuilderECS_mib=linkBuilderECS_mib, ecsAgentTrapReceiverTable=ecsAgentTrapReceiverTable, ecsAgentTrapReceiverEntry=ecsAgentTrapReceiverEntry, ecsAgentTrapType=ecsAgentTrapType, ecsAgentLastTrap=ecsAgentLastTrap, ecsRLCcollisionEntry=ecsRLCcollisionEntry, ecsRLCPortInfoEntry=ecsRLCPortInfoEntry, linkBuilderMSH_cards=linkBuilderMSH_cards, ecsAgentManagementEntry=ecsAgentManagementEntry, ecsSlotConfigIndex=ecsSlotConfigIndex, transmission=transmission, linkBuilderFMSII_cards_6fiber_st=linkBuilderFMSII_cards_6fiber_st, linkBuilderFMSII_cards_24tp_telco=linkBuilderFMSII_cards_24tp_telco, ecsJabberDecRateUnits=ecsJabberDecRateUnits, ecsAgentFrontPanelSetupPassword=ecsAgentFrontPanelSetupPassword, testData=testData, ecsTotalErrorCount=ecsTotalErrorCount, linkBuilderMSH=linkBuilderMSH, ecsCollisionPortIndex=ecsCollisionPortIndex, ecsRLCjabberEntry=ecsRLCjabberEntry, ecsJabberErrors=ecsJabberErrors, ecsPortTest=ecsPortTest, stationlocateTrap=stationlocateTrap, linkBuilderFMS_cards_coax=linkBuilderFMS_cards_coax, ecsCardIsolated=ecsCardIsolated, ecsAgentFrontPanelPassword=ecsAgentFrontPanelPassword, ecsHubTotalJabberErrors=ecsHubTotalJabberErrors, ecsRLCStationLocate=ecsRLCStationLocate)
mibBuilder.exportSymbols("LBHUB-ECS-MIB", ecsAlignPortIndex=ecsAlignPortIndex, multiRepeater=multiRepeater, PhysAddress=PhysAddress, ecsRLCNewSLAddress=ecsRLCNewSLAddress, ecsAlignHysteresisValue=ecsAlignHysteresisValue, brouter=brouter, ecsSecRLCMACAddress=ecsSecRLCMACAddress, ecsPortPartitionTraps=ecsPortPartitionTraps, ecsCarrierSenseRateUnits=ecsCarrierSenseRateUnits, ecsHubTotalBroadcasts=ecsHubTotalBroadcasts, ecsManufacturerId=ecsManufacturerId, ecsAgentResetDevice=ecsAgentResetDevice, ecsRLCSLhighFilterAddress=ecsRLCSLhighFilterAddress, manager=manager, asciiAgent=asciiAgent, ecsHubTotalCollisionsCount=ecsHubTotalCollisionsCount, ecsAgentSystemLocation=ecsAgentSystemLocation, ecsGoodRcvdFrames=ecsGoodRcvdFrames, ecsAgentDefaultGateway=ecsAgentDefaultGateway, ecsSlotDeviceType=ecsSlotDeviceType, ecsRLCtrafficTable=ecsRLCtrafficTable, ecsSlotConfigEntry=ecsSlotConfigEntry, ecsDummyIndex=ecsDummyIndex, ecsRLCCollisionsCount=ecsRLCCollisionsCount, linkBuilderFMS_cards=linkBuilderFMS_cards, linkBuilderFMSII_cards=linkBuilderFMSII_cards, mrmResilience=mrmResilience, ecsJabberHysteresisValue=ecsJabberHysteresisValue, ecsAlignThreshold=ecsAlignThreshold, ecsRLCPartitions=ecsRLCPartitions, ecsTrafficThreshold=ecsTrafficThreshold, secureRLCportTrap=secureRLCportTrap, ecsRLCAlignErrors=ecsRLCAlignErrors, ecsInfoPortIndex=ecsInfoPortIndex, ecsRLCTotalMulticasts=ecsRLCTotalMulticasts, ecsRLCErrorSlotIndex=ecsRLCErrorSlotIndex, ecsAlignErrorRate=ecsAlignErrorRate, linkBuilderECS_cards=linkBuilderECS_cards, ecsCollisionSlotIndex=ecsCollisionSlotIndex, ecsAgentDefaultConfig=ecsAgentDefaultConfig, ecsCarrierSenseHysteresisValue=ecsCarrierSenseHysteresisValue, ecsAgentFrontPanelLock=ecsAgentFrontPanelLock, ecsRLCSlotStatisticsTable=ecsRLCSlotStatisticsTable, ecsSecRLCNTKState=ecsSecRLCNTKState, ecsCollisionThreshold=ecsCollisionThreshold, linkBuilderMSH_mib=linkBuilderMSH_mib, genericUnixServer=genericUnixServer, ecsRLCalignEntry=ecsRLCalignEntry, genericMSWorkstation=genericMSWorkstation, ecsAgentFrontPanelDisplay=ecsAgentFrontPanelDisplay, ecsCRCErrorRate=ecsCRCErrorRate, ecsCollisionRate=ecsCollisionRate, gauges=gauges, ecsAgentTrapReceiverComm=ecsAgentTrapReceiverComm, ecsAgentMACAddress=ecsAgentMACAddress, ecsSecRLCReportMode=ecsSecRLCReportMode, ecsAlignDecRateValue=ecsAlignDecRateValue, ecsSecureRLCEntry=ecsSecureRLCEntry, ecsSecureRLCMode=ecsSecureRLCMode, netBuilder_mib=netBuilder_mib, ecsCRCThreshold=ecsCRCThreshold, ecsRLMainLinkSlot=ecsRLMainLinkSlot, ecsDummyValue=ecsDummyValue, ecsHubTotalErrorCount=ecsHubTotalErrorCount)
