#
# PySNMP MIB module CISCO-CACHE-ENGINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CACHE-ENGINE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:34:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, iso, ModuleIdentity, IpAddress, Counter32, Bits, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "iso", "ModuleIdentity", "IpAddress", "Counter32", "Bits", "Integer32", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoCacheEngineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 39))
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setLastUpdated('9811041200Z')
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setOrganization('Cisco Systems, Inc.')
ciscoCacheEngineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1))
ciscoCacheEngineConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1))
cceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1))
cceTuningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2))
cceAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3))
cceReportGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4))
cceStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5))
cceHardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6))
cceFarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1))
cceBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2))
cceDns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3))
cceIcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4))
cceIcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5))
cceProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6))
cceTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7))
cceCacheFarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1))
cceFreshness = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2))
cceTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3))
cceUrlFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3, 1))
cceEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1))
cceLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2))
cceDiagDump = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1))
cceIms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2))
ccePerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3))
cceRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4))
cceSavings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5))
cceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6))
cceInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6, 1))
cceFarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cceFarmTable.setStatus('current')
cceFarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceFarmEntryIndex"))
if mibBuilder.loadTexts: cceFarmEntry.setStatus('current')
cceFarmEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceFarmEntryIndex.setStatus('current')
cceFarmEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFarmEntryIpAddress.setStatus('current')
cceBasicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicIPAddress.setStatus('current')
cceBasicNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicNetMask.setStatus('current')
cceBasicGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicGatewayIpAddress.setStatus('current')
cceBasicCacheName = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicCacheName.setStatus('current')
cceBasicFarmName = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicFarmName.setStatus('current')
cceDnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDnsDomain.setStatus('current')
cceDnsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: cceDnsTable.setStatus('current')
cceDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceDnsEntryIndex"))
if mibBuilder.loadTexts: cceDnsEntry.setStatus('current')
cceDnsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cceDnsEntryIndex.setStatus('current')
cceDnsEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDnsEntryIpAddress.setStatus('current')
cceIcpClientEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientEnabled.setStatus('current')
cceIcpClientWait = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientWait.setStatus('current')
cceIcpClientRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRetry.setStatus('current')
cceIcpClientLocalDomains = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientLocalDomains.setStatus('current')
cceIcpClientRemServTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5), )
if mibBuilder.loadTexts: cceIcpClientRemServTable.setStatus('current')
cceIcpClientRemServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIndex"))
if mibBuilder.loadTexts: cceIcpClientRemServEntry.setStatus('current')
cceIcpClientRemServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceIcpClientRemServIndex.setStatus('current')
cceIcpClientRemServIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServIpAddress.setStatus('current')
cceIcpClientRemServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServState.setStatus('current')
cceIcpClientRemServType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("parent", 1), ("sibling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServType.setStatus('current')
cceIcpClientRemServIcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServIcpPort.setStatus('current')
cceIcpClientRemServHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServHttpPort.setStatus('current')
cceIcpClientRemServSelDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServSelDomains.setStatus('current')
cceIcpServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerEnabled.setStatus('current')
cceIcpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerPort.setStatus('current')
cceIcpServerRemClntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: cceIcpServerRemClntTable.setStatus('current')
cceIcpServerRemClntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntIndex"))
if mibBuilder.loadTexts: cceIcpServerRemClntEntry.setStatus('current')
cceIcpServerRemClntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceIcpServerRemClntIndex.setStatus('current')
cceIcpServerRemClntIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerRemClntIPAddress.setStatus('current')
cceIcpServerRemClntFetch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerRemClntFetch.setStatus('current')
cceProxyIncomingPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyIncomingPort.setStatus('current')
cceProxyOutgoingAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyOutgoingAddress.setStatus('current')
cceProxyOutgoingPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyOutgoingPort.setStatus('current')
cceTimeGmtTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeGmtTime.setStatus('current')
cceTimeGmtDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeGmtDate.setStatus('current')
cceTimeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3), )
if mibBuilder.loadTexts: cceTimeTable.setStatus('current')
cceTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceTimeEntryIndex"))
if mibBuilder.loadTexts: cceTimeEntry.setStatus('current')
cceTimeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cceTimeEntryIndex.setStatus('current')
cceTimeEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeEntryIpAddress.setStatus('current')
cceCacheFarmHealingModeWait = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmHealingModeWait.setStatus('current')
cceCacheFarmHealingModeRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmHealingModeRetry.setStatus('current')
cceCacheFarmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmVersion.setStatus('current')
cceFreshnessTextAgeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextAgeMultiplier.setStatus('current')
cceFreshnessBinaryAgeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryAgeMultiplier.setStatus('current')
cceFreshnessTextMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextMaximumTTL.setStatus('current')
cceFreshnessBinaryMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryMaximumTTL.setStatus('current')
cceFreshnessUnitsMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seconds", 1), ("minutes", 2), ("hours", 3), ("days", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessUnitsMaximumTTL.setStatus('current')
cceFreshnessCacheCookies = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessCacheCookies.setStatus('current')
cceFreshnessTextMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextMaxAge.setStatus('current')
cceFreshnessBinaryMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryMaxAge.setStatus('current')
cceFreshnessForceMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revalidate", 1), ("retrieve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessForceMiss.setStatus('current')
cceTcpServerSendBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerSendBuffer.setStatus('current')
cceTcpClientSendBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientSendBuffer.setStatus('current')
cceTcpServerRecvBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerRecvBuffer.setStatus('current')
cceTcpClientRecvBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientRecvBuffer.setStatus('current')
cceTcpServerReadWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerReadWriteTimeout.setStatus('current')
cceTcpClientReadWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientReadWriteTimeout.setStatus('current')
cceTcpConnectionIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionIdleTimeout.setStatus('current')
cceTcpConnectionWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 7200))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionWaitTimeout.setStatus('current')
cceTcpConnectionRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionRetry.setStatus('current')
cceUrlFilterState = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("blockBad", 2), ("allowGood", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUrlFilterState.setStatus('current')
cceEventsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsTotal.setStatus('current')
cceEventsCritical = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsCritical.setStatus('current')
cceEventsWarning = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsWarning.setStatus('current')
cceEventsNotice = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsNotice.setStatus('current')
cceEventsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5), )
if mibBuilder.loadTexts: cceEventsTable.setStatus('current')
cceEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceEventsEntryIndex"))
if mibBuilder.loadTexts: cceEventsEntry.setStatus('current')
cceEventsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 999), )))
if mibBuilder.loadTexts: cceEventsEntryIndex.setStatus('current')
cceEventsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notice", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryType.setStatus('current')
cceEventsEntryMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryMessage.setStatus('current')
cceEventsEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryTime.setStatus('current')
cceLoggingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingEnabled.setStatus('current')
cceLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingInterval.setStatus('current')
cceLoggingWorkingLogPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingWorkingLogPresent.setStatus('current')
cceLoggingSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingSize.setStatus('current')
cceLoggingAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingAge.setStatus('current')
cceLoggingArchiveLogPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingArchiveLogPresent.setStatus('current')
cceLoggingArchiveLogSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingArchiveLogSize.setStatus('current')
cceLoggingWriteFailReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingWriteFailReason.setStatus('current')
cceDiagDumpDiskCreates = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCreates.setStatus('current')
cceDiagDumpDiskOpens = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskOpens.setStatus('current')
cceDiagDumpDiskCloses = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCloses.setStatus('current')
cceDiagDumpDiskDeletes = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskDeletes.setStatus('current')
cceDiagDumpDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskReads.setStatus('current')
cceDiagDumpDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskWrites.setStatus('current')
cceDiagDumpDiskStats = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskStats.setStatus('current')
cceDiagDumpDiskFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskFree.setStatus('current')
cceDiagDumpDiskWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskWraps.setStatus('current')
cceDiagDumpDiskOverWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskOverWrites.setStatus('current')
cceDiagDumpDiskTruncReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskTruncReads.setStatus('current')
cceDiagDumpDiskInodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskInodeErrors.setStatus('current')
cceDiagDumpDiskCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCrcErrors.setStatus('current')
cceDiagDumpDiskDirCollisions = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskDirCollisions.setStatus('current')
cceDiagDumpBufferReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferReads.setStatus('current')
cceDiagDumpBufferReadErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferReadErrors.setStatus('current')
cceDiagDumpBufferWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferWrites.setStatus('current')
cceDiagDumpBufferWriteErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferWriteErrors.setStatus('current')
cceDiagDumpBufferHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferHits.setStatus('current')
cceDiagDumpBufferMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferMisses.setStatus('current')
cceDiagDumpBufferSeekErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferSeekErrors.setStatus('current')
cceImsClientRequestTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientRequestTotal.setStatus('current')
cceImsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsReceived.setStatus('current')
cceImsClientTotalFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalFromCache.setStatus('current')
cceImsClientFreshFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshFromCache.setStatus('current')
cceImsClientStaleFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleFromCache.setStatus('current')
cceImsClientTotalCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalCacheMiss.setStatus('current')
cceImsClientFreshCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshCacheMiss.setStatus('current')
cceImsClientStaleCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleCacheMiss.setStatus('current')
cceImsClientTotalReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalReval.setStatus('current')
cceImsClientFreshReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshReval.setStatus('current')
cceImsClientStaleReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleReval.setStatus('current')
cceImsClientRequestToServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientRequestToServer.setStatus('current')
cceImsServerTotalIssued = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalIssued.setStatus('current')
cceImsServerTotalDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalDueClient.setStatus('current')
cceImsServerFreshDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerFreshDueClient.setStatus('current')
cceImsServerStaleDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerStaleDueClient.setStatus('current')
cceImsServerTotalDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalDueExpiration.setStatus('current')
cceImsClientFreshDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshDueExpiration.setStatus('current')
cceImsServerStaleDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerStaleDueExpiration.setStatus('current')
ccePerformanceReqPerSecMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceReqPerSecMax.setStatus('current')
ccePerformanceReqPerSecLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceReqPerSecLast.setStatus('current')
ccePerformanceBytesPerSecMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 3), Gauge32()).setUnits('Bytes-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceBytesPerSecMax.setStatus('current')
ccePerformanceBytesPerSecLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceBytesPerSecLast.setStatus('current')
ccePerformanceSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqAvg.setStatus('current')
ccePerformanceSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqMin.setStatus('current')
ccePerformanceSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 7), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqMax.setStatus('current')
ccePerformanceSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqLast.setStatus('current')
ccePerformanceHitsSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqAvg.setStatus('current')
ccePerformanceHitsSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMin.setStatus('current')
ccePerformanceHitsSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 11), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMax.setStatus('current')
ccePerformanceHitsSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqLast.setStatus('current')
ccePerformanceMissSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqAvg.setStatus('current')
ccePerformanceMissSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMin.setStatus('current')
ccePerformanceMissSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 15), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMax.setStatus('current')
ccePerformanceMissSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqLast.setStatus('current')
ccePerformanceObjectSizeAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('byte/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeAvg.setStatus('current')
ccePerformanceObjectSizeMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeMin.setStatus('current')
ccePerformanceObjectSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 19), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeMax.setStatus('current')
ccePerformanceObjectSizeLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('bytes/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeLast.setStatus('current')
cceRequestsForcedReloadTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsForcedReloadTotal.setStatus('current')
cceRequestsForcedReloadPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsForcedReloadPercent.setStatus('current')
cceRequestsNearHitsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsNearHitsTotal.setStatus('current')
cceRequestsNearHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsNearHitsPercent.setStatus('current')
cceRequestsServerErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsServerErrorTotal.setStatus('current')
cceRequestsServerErrorPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsServerErrorPercent.setStatus('current')
cceRequestsUrlBlockedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsUrlBlockedTotal.setStatus('current')
cceRequestsUrlBlockedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsUrlBlockedPercent.setStatus('current')
cceRequestsIcpClientHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpClientHits.setStatus('current')
cceRequestsIcpClientPercentage = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpClientPercentage.setStatus('current')
cceRequestsIcpServerHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpServerHits.setStatus('current')
cceRequestsIcpServerPercentage = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpServerPercentage.setStatus('current')
cceSavingsRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsTotal.setStatus('current')
cceSavingsRequestsHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsHits.setStatus('current')
cceSavingsRequestsMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsMiss.setStatus('current')
cceSavingsRequestsSavings = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsSavings.setStatus('current')
cceSavingsBytesServedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedTotal.setStatus('current')
cceSavingsBytesServedHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedHits.setStatus('current')
cceSavingsBytesServedMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedMiss.setStatus('current')
cceSavingsBytesServedSavings = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedSavings.setStatus('current')
cceUsageCPUCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageCPUCurrent.setStatus('current')
cceUsageCPUPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 2), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageCPUPeak.setStatus('current')
cceUsageDiskCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskCurrent.setStatus('obsolete')
cceUsageDiskPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 4), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskPeak.setStatus('obsolete')
cceUsageNetCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageNetCurrent.setStatus('current')
cceUsageNetPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 6), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageNetPeak.setStatus('current')
cceUsageConnsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageConnsCurrent.setStatus('current')
cceUsageConnsPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageConnsPeak.setStatus('current')
cceUsageDiskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9), )
if mibBuilder.loadTexts: cceUsageDiskVolumeTable.setStatus('current')
cceUsageDiskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeEntryIndex"))
if mibBuilder.loadTexts: cceUsageDiskVolumeEntry.setStatus('current')
cceUsageDiskVolumeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cceUsageDiskVolumeEntryIndex.setStatus('current')
cceUsageDiskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeName.setStatus('current')
cceUsageDiskVolumeEverMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeEverMounted.setStatus('current')
cceUsageDiskVolumeCurrentlyMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrentlyMounted.setStatus('current')
cceUsageDiskVolumeUnmountReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("normal", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeUnmountReason.setStatus('current')
cceUsageDiskVolumeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrent.setStatus('current')
cceUsageDiskVolumePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 7), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumePeak.setStatus('current')
cceUsageDosfsVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10), )
if mibBuilder.loadTexts: cceUsageDosfsVolumeTable.setStatus('current')
cceUsageDosfsVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeEntryIndex"))
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntry.setStatus('current')
cceUsageDosfsVolumeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntryIndex.setStatus('current')
cceUsageDosfsVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeName.setStatus('current')
cceUsageDosfsVolumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeState.setStatus('current')
cceUsageDosfsVolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 4), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeFreeSpace.setStatus('current')
cceUsageDosfsVolumeTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 5), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeTotalSpace.setStatus('current')
cceIfFullDuplex = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIfFullDuplex.setStatus('current')
ciscoCacheEngineMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 2))
ciscoCacheEngineMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0))
cacheTrapReadDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 1))
if mibBuilder.loadTexts: cacheTrapReadDiskError.setStatus('current')
cacheTrapWriteDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 2))
if mibBuilder.loadTexts: cacheTrapWriteDiskError.setStatus('current')
cacheTrapWriteTransFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 3))
if mibBuilder.loadTexts: cacheTrapWriteTransFailed.setStatus('current')
cacheTrapTooManyThreadsDead = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 4))
if mibBuilder.loadTexts: cacheTrapTooManyThreadsDead.setStatus('current')
cacheTrapWccpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 5))
if mibBuilder.loadTexts: cacheTrapWccpDisabled.setStatus('current')
cacheTrapDiskVolUnmounted = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 6)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeName"))
if mibBuilder.loadTexts: cacheTrapDiskVolUnmounted.setStatus('current')
cacheTrapDosfsVolFull = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 7)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeName"))
if mibBuilder.loadTexts: cacheTrapDosfsVolFull.setStatus('current')
ciscoCacheEngineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3))
ciscoCacheEngineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 1))
ciscoCacheEngineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2))
ciscoCacheEngineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 1, 1)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFarmGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceDnsGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceTCPGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceUrlGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceLogGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceImsGroup"), ("CISCO-CACHE-ENGINE-MIB", "ccePerfGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceReqGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceSaveGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceInterfacesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCacheEngineMIBCompliance = ciscoCacheEngineMIBCompliance.setStatus('current')
cceFarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 1)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFarmEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceFarmGroup = cceFarmGroup.setStatus('current')
cceBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 2)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceBasicIPAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicNetMask"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicGatewayIpAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicCacheName"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicFarmName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceBasicGroup = cceBasicGroup.setStatus('current')
cceDnsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 3)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceDnsDomain"), ("CISCO-CACHE-ENGINE-MIB", "cceDnsEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceDnsGroup = cceDnsGroup.setStatus('current')
cceIcpClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 4)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIcpClientEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientWait"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRetry"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientLocalDomains"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIpAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServState"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServType"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIcpPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServHttpPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServSelDomains"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceIcpClientGroup = cceIcpClientGroup.setStatus('current')
cceIcpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 5)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIcpServerEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntIPAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntFetch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceIcpServerGroup = cceIcpServerGroup.setStatus('current')
cceProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 6)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceProxyIncomingPort"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyOutgoingAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyOutgoingPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceProxyGroup = cceProxyGroup.setStatus('current')
cceTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 7)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceTimeGmtTime"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeGmtDate"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceTimeGroup = cceTimeGroup.setStatus('current')
cceCacheFarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 8)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmHealingModeWait"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmHealingModeRetry"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceCacheFarmGroup = cceCacheFarmGroup.setStatus('current')
cceFreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 9)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextAgeMultiplier"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryAgeMultiplier"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessUnitsMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessCacheCookies"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextMaxAge"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryMaxAge"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessForceMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceFreshGroup = cceFreshGroup.setStatus('current')
cceTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 10)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceTcpServerSendBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientSendBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpServerRecvBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientRecvBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpServerReadWriteTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientReadWriteTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionIdleTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionWaitTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionRetry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceTCPGroup = cceTCPGroup.setStatus('current')
cceUrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 11)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUrlFilterState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceUrlGroup = cceUrlGroup.setStatus('current')
cceEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 12)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceEventsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsCritical"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsWarning"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsNotice"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryType"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryMessage"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceEventsGroup = cceEventsGroup.setStatus('current')
cceLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 13)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceLoggingEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingInterval"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingWorkingLogPresent"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingSize"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingAge"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingArchiveLogPresent"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingArchiveLogSize"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingWriteFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceLogGroup = cceLogGroup.setStatus('current')
cceDiagDumpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 14)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCreates"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskOpens"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCloses"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskDeletes"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskStats"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskFree"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskWraps"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskOverWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskTruncReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskInodeErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCrcErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskDirCollisions"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferReadErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferWriteErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferHits"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferMisses"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferSeekErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceDiagDumpGroup = cceDiagDumpGroup.setStatus('current')
cceImsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 15)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceImsClientRequestTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceImsReceived"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientRequestToServer"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalIssued"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerFreshDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerStaleDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalDueExpiration"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshDueExpiration"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerStaleDueExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceImsGroup = cceImsGroup.setStatus('current')
ccePerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 16)).setObjects(("CISCO-CACHE-ENGINE-MIB", "ccePerformanceReqPerSecMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceReqPerSecLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceBytesPerSecMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceBytesPerSecLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeLast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccePerfGroup = ccePerfGroup.setStatus('current')
cceReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 17)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceRequestsForcedReloadTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsForcedReloadPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsNearHitsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsNearHitsPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsServerErrorTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsServerErrorPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsUrlBlockedTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsUrlBlockedPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpClientHits"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpClientPercentage"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpServerHits"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpServerPercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceReqGroup = cceReqGroup.setStatus('current')
cceSaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 18)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsHits"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsSavings"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedHits"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedSavings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceSaveGroup = cceSaveGroup.setStatus('current')
cceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 19)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageCPUCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageCPUPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageNetCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageNetPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageConnsCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageConnsPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeName"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeEverMounted"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeCurrentlyMounted"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeUnmountReason"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumePeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeName"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeState"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeFreeSpace"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeTotalSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceUsageGroup = cceUsageGroup.setStatus('current')
cceInterfacesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 20)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIfFullDuplex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceInterfacesGroup = cceInterfacesGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CACHE-ENGINE-MIB", cceUrlFilter=cceUrlFilter, cceReqGroup=cceReqGroup, cceUsageGroup=cceUsageGroup, cceUrlFilterState=cceUrlFilterState, cceBasicFarmName=cceBasicFarmName, ccePerformanceSecPerReqMax=ccePerformanceSecPerReqMax, cceUsageDiskVolumeTable=cceUsageDiskVolumeTable, cceDnsEntry=cceDnsEntry, cceFarmTable=cceFarmTable, ccePerfGroup=ccePerfGroup, cceRequestsIcpServerHits=cceRequestsIcpServerHits, ccePerformanceHitsSecPerReqMin=ccePerformanceHitsSecPerReqMin, cceFreshnessForceMiss=cceFreshnessForceMiss, cceCacheFarmVersion=cceCacheFarmVersion, cceDiagDumpDiskDirCollisions=cceDiagDumpDiskDirCollisions, cceImsClientRequestToServer=cceImsClientRequestToServer, cceTcp=cceTcp, cceFreshnessTextAgeMultiplier=cceFreshnessTextAgeMultiplier, cceLoggingArchiveLogPresent=cceLoggingArchiveLogPresent, cceUsageDiskVolumeName=cceUsageDiskVolumeName, cceRequests=cceRequests, cceIcpServerGroup=cceIcpServerGroup, cceTime=cceTime, cceIcpClientGroup=cceIcpClientGroup, cceLogging=cceLogging, cceHardwareGroup=cceHardwareGroup, cceIcpClientRemServType=cceIcpClientRemServType, cceLoggingSize=cceLoggingSize, cceEventsNotice=cceEventsNotice, cceDiagDumpDiskDeletes=cceDiagDumpDiskDeletes, cceRequestsUrlBlockedPercent=cceRequestsUrlBlockedPercent, cceUsageDosfsVolumeFreeSpace=cceUsageDosfsVolumeFreeSpace, cceIcpClientWait=cceIcpClientWait, cceTimeEntryIpAddress=cceTimeEntryIpAddress, cceIcpServerRemClntFetch=cceIcpServerRemClntFetch, ciscoCacheEngineMIBTraps=ciscoCacheEngineMIBTraps, cceSavingsRequestsTotal=cceSavingsRequestsTotal, ccePerformanceReqPerSecLast=ccePerformanceReqPerSecLast, cceFarmEntry=cceFarmEntry, cceTcpClientReadWriteTimeout=cceTcpClientReadWriteTimeout, cceEventsGroup=cceEventsGroup, cceFreshnessTextMaxAge=cceFreshnessTextMaxAge, cceDiagDumpBufferReadErrors=cceDiagDumpBufferReadErrors, cceSavingsRequestsMiss=cceSavingsRequestsMiss, cceTimeGroup=cceTimeGroup, cceLoggingInterval=cceLoggingInterval, cceUsageCPUPeak=cceUsageCPUPeak, cceLoggingWorkingLogPresent=cceLoggingWorkingLogPresent, cceProxyIncomingPort=cceProxyIncomingPort, cceImsClientFreshReval=cceImsClientFreshReval, cceRequestsIcpClientPercentage=cceRequestsIcpClientPercentage, cceIcpClientEnabled=cceIcpClientEnabled, cceIcpServerRemClntIndex=cceIcpServerRemClntIndex, cceEventsEntryMessage=cceEventsEntryMessage, cceUsageDiskCurrent=cceUsageDiskCurrent, cceUsageDosfsVolumeTotalSpace=cceUsageDosfsVolumeTotalSpace, cceIcpClientRemServIpAddress=cceIcpClientRemServIpAddress, cceCacheFarm=cceCacheFarm, ciscoCacheEngineConf=ciscoCacheEngineConf, cceProxyOutgoingPort=cceProxyOutgoingPort, cceSavingsBytesServedSavings=cceSavingsBytesServedSavings, ciscoCacheEngineMIBConformance=ciscoCacheEngineMIBConformance, cceImsClientFreshDueExpiration=cceImsClientFreshDueExpiration, cceEventsEntryIndex=cceEventsEntryIndex, cceRequestsForcedReloadTotal=cceRequestsForcedReloadTotal, cceRequestsNearHitsTotal=cceRequestsNearHitsTotal, cceUrlGroup=cceUrlGroup, cceSavings=cceSavings, cceIcpServer=cceIcpServer, cceImsServerTotalIssued=cceImsServerTotalIssued, cceTimeGmtTime=cceTimeGmtTime, cceTimeEntryIndex=cceTimeEntryIndex, cceDiagDumpDiskWrites=cceDiagDumpDiskWrites, cceUsageDiskVolumeEverMounted=cceUsageDiskVolumeEverMounted, cceFarm=cceFarm, cceSavingsBytesServedHits=cceSavingsBytesServedHits, cceImsClientTotalCacheMiss=cceImsClientTotalCacheMiss, ccePerformanceHitsSecPerReqMax=ccePerformanceHitsSecPerReqMax, cceIms=cceIms, cceEvents=cceEvents, cceDiagDumpDiskInodeErrors=cceDiagDumpDiskInodeErrors, ccePerformanceHitsSecPerReqLast=ccePerformanceHitsSecPerReqLast, ccePerformanceObjectSizeMax=ccePerformanceObjectSizeMax, cceDiagDumpDiskCreates=cceDiagDumpDiskCreates, cceIcpServerRemClntTable=cceIcpServerRemClntTable, cceDnsEntryIpAddress=cceDnsEntryIpAddress, cceLoggingEnabled=cceLoggingEnabled, cceTimeTable=cceTimeTable, cceUsageDiskVolumeEntryIndex=cceUsageDiskVolumeEntryIndex, cceFreshnessUnitsMaximumTTL=cceFreshnessUnitsMaximumTTL, cceTcpConnectionRetry=cceTcpConnectionRetry, cceImsClientFreshCacheMiss=cceImsClientFreshCacheMiss, cceFreshGroup=cceFreshGroup, cceEventsEntryType=cceEventsEntryType, cacheTrapDiskVolUnmounted=cacheTrapDiskVolUnmounted, cceFreshnessCacheCookies=cceFreshnessCacheCookies, cceBasicNetMask=cceBasicNetMask, cceProxyOutgoingAddress=cceProxyOutgoingAddress, cceImsClientRequestTotal=cceImsClientRequestTotal, ciscoCacheEngineMIBTrapPrefix=ciscoCacheEngineMIBTrapPrefix, cceFarmEntryIpAddress=cceFarmEntryIpAddress, ciscoCacheEngineMIBCompliances=ciscoCacheEngineMIBCompliances, cceIcpClientRemServSelDomains=cceIcpClientRemServSelDomains, cceDiagDump=cceDiagDump, cceFreshnessBinaryMaximumTTL=cceFreshnessBinaryMaximumTTL, cceBasic=cceBasic, cceTcpConnectionIdleTimeout=cceTcpConnectionIdleTimeout, cceIcpClientRemServState=cceIcpClientRemServState, cceRequestsServerErrorPercent=cceRequestsServerErrorPercent, cceCacheFarmHealingModeWait=cceCacheFarmHealingModeWait, cceDiagDumpDiskTruncReads=cceDiagDumpDiskTruncReads, cceTcpServerRecvBuffer=cceTcpServerRecvBuffer, ccePerformanceBytesPerSecLast=ccePerformanceBytesPerSecLast, cceImsServerStaleDueClient=cceImsServerStaleDueClient, cceCacheFarmGroup=cceCacheFarmGroup, cceIcpClientRemServTable=cceIcpClientRemServTable, cceDiagDumpGroup=cceDiagDumpGroup, ciscoCacheEngineMIB=ciscoCacheEngineMIB, ccePerformanceSecPerReqLast=ccePerformanceSecPerReqLast, cceEventsTotal=cceEventsTotal, cceIcpServerEnabled=cceIcpServerEnabled, ccePerformanceSecPerReqAvg=ccePerformanceSecPerReqAvg, cceDiagDumpBufferWrites=cceDiagDumpBufferWrites, ciscoCacheEngineMIBCompliance=ciscoCacheEngineMIBCompliance, cceEventsEntry=cceEventsEntry, cceImsServerTotalDueExpiration=cceImsServerTotalDueExpiration, ccePerformanceMissSecPerReqAvg=ccePerformanceMissSecPerReqAvg, cceIcpClientLocalDomains=cceIcpClientLocalDomains, ccePerformanceMissSecPerReqMin=ccePerformanceMissSecPerReqMin, cceIcpClientRetry=cceIcpClientRetry, cceImsServerStaleDueExpiration=cceImsServerStaleDueExpiration, cceSavingsRequestsSavings=cceSavingsRequestsSavings, cceUsageDiskVolumeEntry=cceUsageDiskVolumeEntry, cceIcpServerRemClntEntry=cceIcpServerRemClntEntry, cceTCPGroup=cceTCPGroup, cceUsageNetCurrent=cceUsageNetCurrent, cceEventsCritical=cceEventsCritical, cceTuningGroup=cceTuningGroup, cceStatsGroup=cceStatsGroup, cceDiagDumpBufferWriteErrors=cceDiagDumpBufferWriteErrors, cceRequestsUrlBlockedTotal=cceRequestsUrlBlockedTotal, cceIcpClient=cceIcpClient, cceRequestsNearHitsPercent=cceRequestsNearHitsPercent, ccePerformance=ccePerformance, cceUsageConnsCurrent=cceUsageConnsCurrent, cceUsageDosfsVolumeEntry=cceUsageDosfsVolumeEntry, cceDiagDumpBufferMisses=cceDiagDumpBufferMisses, cceUsageDosfsVolumeTable=cceUsageDosfsVolumeTable, ccePerformanceSecPerReqMin=ccePerformanceSecPerReqMin, cceIcpClientRemServIndex=cceIcpClientRemServIndex, cceImsClientStaleCacheMiss=cceImsClientStaleCacheMiss, cceImsClientTotalReval=cceImsClientTotalReval, cceFarmEntryIndex=cceFarmEntryIndex, ccePerformanceHitsSecPerReqAvg=ccePerformanceHitsSecPerReqAvg, cceRequestsForcedReloadPercent=cceRequestsForcedReloadPercent, cceUsageDiskVolumeCurrentlyMounted=cceUsageDiskVolumeCurrentlyMounted, cceUsageDosfsVolumeName=cceUsageDosfsVolumeName, cceFreshnessTextMaximumTTL=cceFreshnessTextMaximumTTL, cceDiagDumpDiskOpens=cceDiagDumpDiskOpens, cceFreshness=cceFreshness, cceIcpClientRemServIcpPort=cceIcpClientRemServIcpPort, cacheTrapWriteDiskError=cacheTrapWriteDiskError, ciscoCacheEngineMIBObjects=ciscoCacheEngineMIBObjects, cceDnsGroup=cceDnsGroup, cacheTrapReadDiskError=cacheTrapReadDiskError, PYSNMP_MODULE_ID=ciscoCacheEngineMIB, cceLoggingAge=cceLoggingAge, cceIcpClientRemServHttpPort=cceIcpClientRemServHttpPort, ccePerformanceMissSecPerReqLast=ccePerformanceMissSecPerReqLast, cceProxyGroup=cceProxyGroup, cceTcpConnectionWaitTimeout=cceTcpConnectionWaitTimeout, cacheTrapWriteTransFailed=cacheTrapWriteTransFailed, cceDns=cceDns, cceImsClientFreshFromCache=cceImsClientFreshFromCache, cceTimeGmtDate=cceTimeGmtDate, cceSaveGroup=cceSaveGroup, cceInterfacesGroup=cceInterfacesGroup, cceUsage=cceUsage, cceCacheFarmHealingModeRetry=cceCacheFarmHealingModeRetry, cceTcpClientRecvBuffer=cceTcpClientRecvBuffer, cceEventsWarning=cceEventsWarning, cceImsServerTotalDueClient=cceImsServerTotalDueClient, cceBasicGatewayIpAddress=cceBasicGatewayIpAddress, cceBasicGroup=cceBasicGroup, ccePerformanceReqPerSecMax=ccePerformanceReqPerSecMax, cceTimeEntry=cceTimeEntry, cceTcpServerReadWriteTimeout=cceTcpServerReadWriteTimeout, cceDiagDumpBufferReads=cceDiagDumpBufferReads, cceEventsTable=cceEventsTable, ccePerformanceMissSecPerReqMax=ccePerformanceMissSecPerReqMax, cceDiagDumpDiskOverWrites=cceDiagDumpDiskOverWrites, cceDiagDumpBufferHits=cceDiagDumpBufferHits, cceLogGroup=cceLogGroup, cceSavingsRequestsHits=cceSavingsRequestsHits, cceBasicCacheName=cceBasicCacheName, cceDiagDumpBufferSeekErrors=cceDiagDumpBufferSeekErrors, cceProxy=cceProxy, cacheTrapTooManyThreadsDead=cacheTrapTooManyThreadsDead, cceTcpServerSendBuffer=cceTcpServerSendBuffer, cceUsageDiskVolumePeak=cceUsageDiskVolumePeak, cceIcpServerRemClntIPAddress=cceIcpServerRemClntIPAddress, ccePerformanceBytesPerSecMax=ccePerformanceBytesPerSecMax, cceReportGroup=cceReportGroup, cceUsageDiskVolumeCurrent=cceUsageDiskVolumeCurrent, cceUsageDiskPeak=cceUsageDiskPeak, cceLoggingWriteFailReason=cceLoggingWriteFailReason, cceTcpClientSendBuffer=cceTcpClientSendBuffer, cceAccessGroup=cceAccessGroup, cceInterfaces=cceInterfaces, cceRequestsIcpClientHits=cceRequestsIcpClientHits, cceFarmGroup=cceFarmGroup, ccePerformanceObjectSizeMin=ccePerformanceObjectSizeMin, cceSavingsBytesServedTotal=cceSavingsBytesServedTotal, cceBasicIPAddress=cceBasicIPAddress, cceDnsDomain=cceDnsDomain, cceUsageDosfsVolumeEntryIndex=cceUsageDosfsVolumeEntryIndex, cceDiagDumpDiskFree=cceDiagDumpDiskFree, cceEventsEntryTime=cceEventsEntryTime, cceLoggingArchiveLogSize=cceLoggingArchiveLogSize, cceConfigGroup=cceConfigGroup, ccePerformanceObjectSizeAvg=ccePerformanceObjectSizeAvg, cceIfFullDuplex=cceIfFullDuplex, ciscoCacheEngineMIBGroups=ciscoCacheEngineMIBGroups, cceImsGroup=cceImsGroup, cceFreshnessBinaryMaxAge=cceFreshnessBinaryMaxAge, cceFreshnessBinaryAgeMultiplier=cceFreshnessBinaryAgeMultiplier, cceImsClientStaleReval=cceImsClientStaleReval, cceIcpClientRemServEntry=cceIcpClientRemServEntry, cceDnsTable=cceDnsTable, cceImsServerFreshDueClient=cceImsServerFreshDueClient, ccePerformanceObjectSizeLast=ccePerformanceObjectSizeLast, cceRequestsServerErrorTotal=cceRequestsServerErrorTotal, cceUsageDiskVolumeUnmountReason=cceUsageDiskVolumeUnmountReason, cceUsageNetPeak=cceUsageNetPeak, cacheTrapWccpDisabled=cacheTrapWccpDisabled, cceIcpServerPort=cceIcpServerPort, cceRequestsIcpServerPercentage=cceRequestsIcpServerPercentage, cceUsageCPUCurrent=cceUsageCPUCurrent, cceDiagDumpDiskCrcErrors=cceDiagDumpDiskCrcErrors, cceImsClientTotalFromCache=cceImsClientTotalFromCache, cceImsClientStaleFromCache=cceImsClientStaleFromCache, cceUsageDosfsVolumeState=cceUsageDosfsVolumeState, cceDiagDumpDiskWraps=cceDiagDumpDiskWraps, cacheTrapDosfsVolFull=cacheTrapDosfsVolFull, cceUsageConnsPeak=cceUsageConnsPeak, cceImsReceived=cceImsReceived, cceDiagDumpDiskCloses=cceDiagDumpDiskCloses, cceDnsEntryIndex=cceDnsEntryIndex, cceDiagDumpDiskStats=cceDiagDumpDiskStats, cceSavingsBytesServedMiss=cceSavingsBytesServedMiss, cceDiagDumpDiskReads=cceDiagDumpDiskReads)
