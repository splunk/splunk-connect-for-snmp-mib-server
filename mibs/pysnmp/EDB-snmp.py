#
# PySNMP MIB module EDB-snmp (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EDB-snmp
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
internet, MibIdentifier, TimeTicks, mgmt, Bits, Integer32, Counter64, Gauge32, ModuleIdentity, Unsigned32, Counter32, iso, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "internet", "MibIdentifier", "TimeTicks", "mgmt", "Bits", "Integer32", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "Counter32", "iso", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fm800 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51))
fmsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1))
fmslot = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 2))
fmlu = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 3))
fmdiag = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 5))
fmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 1))
fmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 2))
rTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 1, 1), )
if mibBuilder.loadTexts: rTrapAddrTbl.setStatus('mandatory')
rTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1), ).setIndexNames((0, "EDB-snmp", "rTrapAddrAddr"))
if mibBuilder.loadTexts: rTrapAddrEntry.setStatus('mandatory')
rTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrAddr.setStatus('mandatory')
rTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrComm.setStatus('mandatory')
rTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrVer.setStatus('mandatory')
rTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrType.setStatus('mandatory')
rTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrState.setStatus('mandatory')
rTrapAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fixed", 0), ("removable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrFlag.setStatus('mandatory')
rTrapAddrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAge.setStatus('mandatory')
rTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapLearning.setStatus('mandatory')
rTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAging.setStatus('mandatory')
pTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 2, 1), )
if mibBuilder.loadTexts: pTrapAddrTbl.setStatus('mandatory')
pTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1), ).setIndexNames((0, "EDB-snmp", "pTrapAddrAddr"))
if mibBuilder.loadTexts: pTrapAddrEntry.setStatus('mandatory')
pTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrAddr.setStatus('mandatory')
pTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrComm.setStatus('mandatory')
pTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrVer.setStatus('mandatory')
pTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrType.setStatus('mandatory')
pTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrState.setStatus('mandatory')
pTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapLearning.setStatus('mandatory')
pTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAging.setStatus('mandatory')
fmSystemPSAdmin = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary-power", 1), ("secondary-power", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemPSAdmin.setStatus('mandatory')
fmSystemPSOper = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary-power", 1), ("secondary-power", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemPSOper.setStatus('mandatory')
fmSystemPSCfg = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary-power", 1), ("secondary-power", 2), ("primary-and-secondary-power", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemPSCfg.setStatus('mandatory')
fmSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 127))).clone(namedValues=NamedValues(("cold-reset", 0), ("warm-reset", 1), ("power-up", 2), ("meaning-less-value", 127)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemReset.setStatus('mandatory')
fmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("partial", 1), ("full", 2), ("extended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemSelfTestLevel.setStatus('mandatory')
fmSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemVersion.setStatus('mandatory')
fmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIpAddr.setStatus('mandatory')
fmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIPNetMask.setStatus('mandatory')
fmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIPDefGway.setStatus('mandatory')
fmSystemFileServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemFileServer.setStatus('mandatory')
fmSystemBootFile = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemBootFile.setStatus('mandatory')
fmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemBootMode.setStatus('deprecated')
fmSystemDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 127))).clone(namedValues=NamedValues(("download", 1), ("meaning-less-value", 127)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemDownLoad.setStatus('mandatory')
fmSystemSlipIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipIpAddr.setStatus('mandatory')
fmSystemSlipIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipIPNetMask.setStatus('mandatory')
fmSystemSlipBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud1200", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipBaudRate.setStatus('mandatory')
fmSystemSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipParity.setStatus('mandatory')
fmSystemSlipStopBits = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipStopBits.setStatus('mandatory')
pfmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIpAddr.setStatus('mandatory')
pfmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIPNetMask.setStatus('mandatory')
pfmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIPDefGway.setStatus('mandatory')
pfmSystemFileServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemFileServer.setStatus('mandatory')
pfmSystemBootFile = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemBootFile.setStatus('mandatory')
pfmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemBootMode.setStatus('mandatory')
pfmSystemReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemReadCommunity.setStatus('mandatory')
pfmSystemWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemWriteCommunity.setStatus('mandatory')
pfmSystemSlipIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipIpAddr.setStatus('mandatory')
pfmSystemSlipIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipIPNetMask.setStatus('mandatory')
pfmSystemSlipBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud1200", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipBaudRate.setStatus('mandatory')
pfmSystemSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipParity.setStatus('mandatory')
pfmSystemSlipStopBits = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipStopBits.setStatus('mandatory')
fmSlotMasterClear = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotMasterClear.setStatus('mandatory')
fmSlotTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 2, 2), )
if mibBuilder.loadTexts: fmSlotTable.setStatus('mandatory')
fmSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1), ).setIndexNames((0, "EDB-snmp", "fmSlotIndex"))
if mibBuilder.loadTexts: fmSlotEntry.setStatus('mandatory')
fmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSlotIndex.setStatus('mandatory')
fmSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 65537, 65540, 65544, 65545, 65548, 65552, 65553, 65560, 65562, 65563, 65568, 65576, 65580, 65584, 65588, 65589, 65591, 65590, 65592, 65594, 65595, 65550, 65551, 65566, 65567, 65578, 65541, 65542, 65543, 65557, 65558, 65559, 131072, 131073, 131075, 131077))).clone(namedValues=NamedValues(("unconfig", 0), ("empty", 1), ("cc832-10", 2), ("cc832-12", 3), ("cc832-20", 4), ("cc832-31", 5), ("cc832-32", 6), ("cc832-41", 7), ("cc832-42", 8), ("cc832-44", 9), ("cc832-46A", 10), ("cc892-832", 65537), ("lc322", 65540), ("cc892-201", 65544), ("cc892-202", 65545), ("cc892-214", 65548), ("cc892-321", 65552), ("cc892-46B", 65553), ("cc892-301", 65560), ("cc892-303", 65562), ("cc892-308", 65563), ("cc892-233", 65568), ("cc892-260", 65576), ("cc892-427", 65580), ("sw892-11X", 65584), ("cc892-432", 65588), ("cc892-420", 65589), ("cc892-421", 65591), ("cc892-422", 65590), ("cc892-401", 65592), ("cc892-240", 65594), ("cc892-241", 65595), ("cc892-211", 65550), ("cc892-212", 65551), ("lc303", 65566), ("lc308", 65567), ("lc312", 65578), ("cc832-10-ID", 65541), ("cc832-12-ID", 65542), ("cc832-20-ID", 65543), ("cc832-41-ID", 65557), ("cc832-42-ID", 65558), ("cc832-44-ID", 65559), ("general-smartcard", 131072), ("lc308-129", 131073), ("lc303-129", 131075), ("lc312-129", 131077)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotID.setStatus('mandatory')
fmSlotDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSlotDescr.setStatus('mandatory')
fmSlotInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotInfo.setStatus('mandatory')
fmSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSlotStatus.setStatus('mandatory')
fmSlotPrevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSlotPrevStatus.setStatus('mandatory')
fmSlotRLBSet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotRLBSet.setStatus('mandatory')
fmSlotRLBClear = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotRLBClear.setStatus('mandatory')
fmSlotExpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotExpCode.setStatus('mandatory')
fmSlotTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-mask", 0), ("mask", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSlotTrapMask.setStatus('mandatory')
pfmSlotTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-mask", 0), ("mask", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSlotTrapMask.setStatus('mandatory')
fmSlotIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSlotIpAddr.setStatus('mandatory')
fmLUID = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unconfig", 0), ("none", 1), ("lu100", 2), ("lu101", 3), ("lu102", 4), ("lu103", 5), ("lu104", 6), ("lu105", 7), ("lu106", 8), ("lu107", 9), ("lu108", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLUID.setStatus('mandatory')
fmLUDescr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmLUDescr.setStatus('mandatory')
fmLUStatus = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmLUStatus.setStatus('mandatory')
fmLULinkSelect = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("main-link", 0), ("sec-link", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLULinkSelect.setStatus('mandatory')
fmLULoopBackSet = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLULoopBackSet.setStatus('mandatory')
fmLULoopBackClr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLULoopBackClr.setStatus('mandatory')
fmLUTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-mask", 0), ("mask", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmLUTrapMask.setStatus('mandatory')
pfmLUTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-mask", 0), ("mask", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmLUTrapMask.setStatus('mandatory')
fmDiagConfig = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagConfig.setStatus('mandatory')
fmDiagTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagTrapInfo.setStatus('mandatory')
fmDiagFaultTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 5, 3), )
if mibBuilder.loadTexts: fmDiagFaultTable.setStatus('optional')
fmDiagFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1), ).setIndexNames((0, "EDB-snmp", "fmDiagFaultIndex"))
if mibBuilder.loadTexts: fmDiagFaultEntry.setStatus('optional')
fmDiagFaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagFaultIndex.setStatus('optional')
fmDiagFaultReport = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagFaultReport.setStatus('optional')
fmDiagDebug = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal-mode", 0), ("debug-mode", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDiagDebug.setStatus('mandatory')
fmPowerSupplyFail = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,1)).setObjects(("EDB-snmp", "fmSystemPSOper"))
fmPrimaryPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,2)).setObjects(("EDB-snmp", "fmSystemPSOper"))
fmSecondPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,3)).setObjects(("EDB-snmp", "fmSystemPSOper"))
fmPowerSupplyChangeConfig = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,4)).setObjects(("EDB-snmp", "fmSystemPSCfg"), ("EDB-snmp", "fmSystemPSOper"))
fmLUOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,7)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUReturnToSync = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,8)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUPassToMain = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,9)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUPassToSecond = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,10)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUPrimaryLinkFail = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,11)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUPrimaryLinkOK = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,12)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUSecondLinkFail = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,13)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUSecondLinkOK = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,14)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLULLBOn = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,15)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLULLBOff = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,16)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmLUChangeConfig = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,20)).setObjects(("EDB-snmp", "fmLUID"), ("EDB-snmp", "fmLUStatus"))
fmSlotTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,25)).setObjects(("EDB-snmp", "fmSlotIndex"), ("EDB-snmp", "fmSlotID"), ("EDB-snmp", "fmSlotStatus"), ("EDB-snmp", "fmSlotPrevStatus"))
fmSlotChangeConfig = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,26)).setObjects(("EDB-snmp", "fmSlotIndex"), ("EDB-snmp", "fmSlotID"), ("EDB-snmp", "fmSlotStatus"))
fmDiagGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,30)).setObjects(("EDB-snmp", "fmDiagTrapInfo"))
mibBuilder.exportSymbols("EDB-snmp", fmSystemSlipStopBits=fmSystemSlipStopBits, fmSystemSlipIpAddr=fmSystemSlipIpAddr, fmDiagConfig=fmDiagConfig, pfmSystemSlipStopBits=pfmSystemSlipStopBits, rTrapAddrState=rTrapAddrState, fmLUSecondLinkFail=fmLUSecondLinkFail, pTrapAging=pTrapAging, fmSystemVersion=fmSystemVersion, rTrapAddrComm=rTrapAddrComm, traprun=traprun, fmLUPrimaryLinkOK=fmLUPrimaryLinkOK, fmSlotStatus=fmSlotStatus, fmDiagDebug=fmDiagDebug, fmLULoopBackSet=fmLULoopBackSet, pfmSystemSlipParity=pfmSystemSlipParity, fmsystemrun=fmsystemrun, trap=trap, fmLUStatus=fmLUStatus, pfmSystemBootFile=pfmSystemBootFile, fmLUPrimaryLinkFail=fmLUPrimaryLinkFail, fmDiagGenericTrap=fmDiagGenericTrap, fmLULinkSelect=fmLULinkSelect, fmDiagFaultReport=fmDiagFaultReport, fmSlotRLBSet=fmSlotRLBSet, fmSlotDescr=fmSlotDescr, enterprises=enterprises, fmSlotIpAddr=fmSlotIpAddr, fmSystemPSCfg=fmSystemPSCfg, pTrapAddrEntry=pTrapAddrEntry, fmSystemPSAdmin=fmSystemPSAdmin, fmLUReturnToSync=fmLUReturnToSync, fmSystemBootMode=fmSystemBootMode, rTrapAddrEntry=rTrapAddrEntry, fmsystem=fmsystem, fmSlotPrevStatus=fmSlotPrevStatus, pfmSystemBootMode=pfmSystemBootMode, fm800=fm800, rTrapAddrType=rTrapAddrType, pTrapAddrType=pTrapAddrType, fmLUChangeConfig=fmLUChangeConfig, rTrapAddrVer=rTrapAddrVer, trapvar=trapvar, fmSystemIpAddr=fmSystemIpAddr, fmSlotExpCode=fmSlotExpCode, pfmLUTrapMask=pfmLUTrapMask, rTrapAddrAge=rTrapAddrAge, rTrapLearning=rTrapLearning, fmSlotMasterClear=fmSlotMasterClear, fmDiagTrapInfo=fmDiagTrapInfo, fmSlotIndex=fmSlotIndex, fmSlotID=fmSlotID, pfmSystemFileServer=pfmSystemFileServer, fmPrimaryPowerSupplyOK=fmPrimaryPowerSupplyOK, rTrapAddrTbl=rTrapAddrTbl, fmDiagFaultIndex=fmDiagFaultIndex, fmSystemSlipParity=fmSystemSlipParity, fmPowerSupplyFail=fmPowerSupplyFail, fmLUPassToSecond=fmLUPassToSecond, rTrapAddrFlag=rTrapAddrFlag, fmSystemFileServer=fmSystemFileServer, private=private, fmLUTrapMask=fmLUTrapMask, pTrapAddrAddr=pTrapAddrAddr, pfmSystemSlipBaudRate=pfmSystemSlipBaudRate, pTrapAddrState=pTrapAddrState, fmSlotChangeConfig=fmSlotChangeConfig, fmLULoopBackClr=fmLULoopBackClr, fmLUPassToMain=fmLUPassToMain, fmSystemSlipIPNetMask=fmSystemSlipIPNetMask, pfmSystemReadCommunity=pfmSystemReadCommunity, fmDiagFaultTable=fmDiagFaultTable, fmSystemPSOper=fmSystemPSOper, fmSlotTable=fmSlotTable, fmSlotInfo=fmSlotInfo, fmDiagFaultEntry=fmDiagFaultEntry, fmslot=fmslot, fmSystemDownLoad=fmSystemDownLoad, pfmSlotTrapMask=pfmSlotTrapMask, fmLUDescr=fmLUDescr, fmLULLBOn=fmLULLBOn, pTrapAddrTbl=pTrapAddrTbl, fmPowerSupplyChangeConfig=fmPowerSupplyChangeConfig, pfmSystemIPDefGway=pfmSystemIPDefGway, pTrapAddrVer=pTrapAddrVer, pfmSystemSlipIpAddr=pfmSystemSlipIpAddr, pTrapAddrComm=pTrapAddrComm, fmLULLBOff=fmLULLBOff, fmLUOutOfSync=fmLUOutOfSync, fmSystemSelfTestLevel=fmSystemSelfTestLevel, rTrapAddrAddr=rTrapAddrAddr, rTrapAging=rTrapAging, pTrapLearning=pTrapLearning, fmSystemReset=fmSystemReset, pfmSystemIpAddr=pfmSystemIpAddr, fmSlotRLBClear=fmSlotRLBClear, pfmSystemIPNetMask=pfmSystemIPNetMask, fmLUID=fmLUID, fmLUSecondLinkOK=fmLUSecondLinkOK, fmSystemIPNetMask=fmSystemIPNetMask, fmSlotEntry=fmSlotEntry, traperm=traperm, fmSystemSlipBaudRate=fmSystemSlipBaudRate, fmSystemBootFile=fmSystemBootFile, fmsystemperm=fmsystemperm, fmlu=fmlu, pfmSystemSlipIPNetMask=pfmSystemSlipIPNetMask, pfmSystemWriteCommunity=pfmSystemWriteCommunity, fmSlotTrap=fmSlotTrap, fmSystemIPDefGway=fmSystemIPDefGway, fmdiag=fmdiag, fibronics=fibronics, fmSecondPowerSupplyOK=fmSecondPowerSupplyOK, fmSlotTrapMask=fmSlotTrapMask)
