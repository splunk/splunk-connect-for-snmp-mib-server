#
# PySNMP MIB module Novell-LANtern-Admin-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Novell-LANtern-Admin-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, MibIdentifier, enterprises, Bits, iso, NotificationType, ModuleIdentity, ObjectIdentity, Counter32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "MibIdentifier", "enterprises", "Bits", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
productType = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
networkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1))
ethernetLANtern = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1, 1))
lantern = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 1))
lanternAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 1, 1))
class Time(Integer32):
    pass

class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

class Seconds(Integer32):
    pass

adminIdentification = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminIdentification.setStatus('mandatory')
adminDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 2), Time()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDateAndTime.setStatus('mandatory')
adminTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTimeZone.setStatus('mandatory')
adminPowerOnTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 4), Time()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminPowerOnTime.setStatus('mandatory')
adminPowerOffTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 5), Time()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminPowerOffTime.setStatus('mandatory')
adminNetworkDataLink = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ethernetDIX", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNetworkDataLink.setStatus('mandatory')
adminNetworkIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 7), IpAddress().clone(hexValue="c044cd01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNetworkIPAddr.setStatus('mandatory')
adminNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 8), IpAddress().clone(hexValue="ffffff80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNetworkSubnetMask.setStatus('mandatory')
adminNetworkGateway = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNetworkGateway.setStatus('mandatory')
adminClientTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10), )
if mibBuilder.loadTexts: adminClientTable.setStatus('mandatory')
adminClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10, 1), ).setIndexNames((0, "Novell-LANtern-Admin-MIB", "adminClientIPAddr"))
if mibBuilder.loadTexts: adminClientEntry.setStatus('mandatory')
adminClientIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminClientIPAddr.setStatus('mandatory')
adminClientIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminClientIPMask.setStatus('mandatory')
adminClientCommunities = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10, 1, 3), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminClientCommunities.setStatus('mandatory')
adminClientDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adminClientDelete.setStatus('mandatory')
adminUnauthorizedIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 11), IpAddress())
if mibBuilder.loadTexts: adminUnauthorizedIPAddr.setStatus('mandatory')
adminUnauthorizedCommunity = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 12), OctetString())
if mibBuilder.loadTexts: adminUnauthorizedCommunity.setStatus('mandatory')
adminNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13), )
if mibBuilder.loadTexts: adminNotificationTable.setStatus('mandatory')
adminNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1), ).setIndexNames((0, "Novell-LANtern-Admin-MIB", "adminNotificationIPAddr"))
if mibBuilder.loadTexts: adminNotificationEntry.setStatus('mandatory')
adminNotificationIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminNotificationIPAddr.setStatus('mandatory')
adminNotificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryContact", 1), ("backupContact", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationStatus.setStatus('mandatory')
adminNotificationTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationTrapMask.setStatus('mandatory')
adminNotificationConfirmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationConfirmMask.setStatus('mandatory')
adminNotificationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 5), Seconds().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationTimeout.setStatus('mandatory')
adminNotificationRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 6), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationRetries.setStatus('mandatory')
adminNotificationBackupIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminNotificationBackupIPAddr.setStatus('mandatory')
adminNotificationDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 13, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adminNotificationDelete.setStatus('mandatory')
adminTrapHandle = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 14), Integer32())
if mibBuilder.loadTexts: adminTrapHandle.setStatus('mandatory')
adminTrapAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 15), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adminTrapAcknowledge.setStatus('mandatory')
adminDownLoadFile = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDownLoadFile.setStatus('mandatory')
adminDownLoadServer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDownLoadServer.setStatus('mandatory')
adminDownload = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("temporaryChange", 1), ("permanentChange", 2), ("downloadSuccess", 3), ("tftpFailed", 4), ("badFile", 5), ("tftpUndefined", 6), ("tftpFileNotFound", 7), ("tftpAccessViolation", 8), ("tftpIllegalOperation", 10), ("tftpUnknownTransferID", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDownload.setStatus('mandatory')
adminReset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coldRestart", 1), ("warmRestart", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adminReset.setStatus('mandatory')
adminSerialDataLink = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("slip", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialDataLink.setStatus('mandatory')
adminSerialIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 21), IpAddress().clone(hexValue="c044cd81")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialIPAddr.setStatus('mandatory')
adminSerialSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 22), IpAddress().clone(hexValue="ffffff80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialSubnetMask.setStatus('mandatory')
adminSerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud300", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud7200", 5), ("baud9600", 6), ("baud19200", 7), ("baud38400", 8))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialBaudRate.setStatus('mandatory')
adminSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 24), Seconds().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialTimeout.setStatus('mandatory')
adminSerialConnection = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modem", 1), ("direct", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialConnection.setStatus('mandatory')
adminSerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rts-cts", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSerialFlowControl.setStatus('mandatory')
adminModemControl = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 27), OctetString().clone('#^ATS0=1 Q0 V1 X4 &S1 &D2^M^1AT &W0\n                     &Y0^M#^1ATDT#^2+++^2ATH0^M#')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminModemControl.setStatus('mandatory')
adminModemConnect = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 28), OctetString().clone('#19200#CONNECT 19200#9600#CONNECT\n                     9600#4800#CONNECT 4800#2400#CONNECT\n                     2400#1200#CONNECT 1200#300#CONNECT#')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminModemConnect.setStatus('mandatory')
adminModemNoConnect = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 29), OctetString().clone('#NO DIALTONE#NO CARRIER#BUSY#VOICE#TIMEOUT#')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminModemNoConnect.setStatus('mandatory')
adminGatewayControl = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gateway-off", 1), ("gateway-on", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminGatewayControl.setStatus('mandatory')
adminPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31), )
if mibBuilder.loadTexts: adminPhoneTable.setStatus('mandatory')
adminPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1), ).setIndexNames((0, "Novell-LANtern-Admin-MIB", "adminPhoneIPAddr"))
if mibBuilder.loadTexts: adminPhoneEntry.setStatus('mandatory')
adminPhoneIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminPhoneIPAddr.setStatus('mandatory')
adminPhoneIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPhoneIPMask.setStatus('mandatory')
adminPhoneLocalIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPhoneLocalIPAddr.setStatus('mandatory')
adminPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPhoneNumber.setStatus('mandatory')
adminPhoneConnectionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPhoneConnectionProtocol.setStatus('mandatory')
adminPhoneDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 31, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adminPhoneDelete.setStatus('mandatory')
adminFCBControl = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFCBControl.setStatus('mandatory')
mibBuilder.exportSymbols("Novell-LANtern-Admin-MIB", adminClientIPMask=adminClientIPMask, adminNotificationDelete=adminNotificationDelete, adminPhoneTable=adminPhoneTable, adminPhoneDelete=adminPhoneDelete, adminNetworkSubnetMask=adminNetworkSubnetMask, adminClientTable=adminClientTable, adminDownLoadFile=adminDownLoadFile, productType=productType, PhysAddress=PhysAddress, adminSerialConnection=adminSerialConnection, adminPowerOnTime=adminPowerOnTime, adminSerialDataLink=adminSerialDataLink, adminSerialTimeout=adminSerialTimeout, lanternAdmin=lanternAdmin, adminClientDelete=adminClientDelete, adminClientIPAddr=adminClientIPAddr, adminTrapAcknowledge=adminTrapAcknowledge, adminNotificationEntry=adminNotificationEntry, adminGatewayControl=adminGatewayControl, adminNetworkGateway=adminNetworkGateway, novell=novell, mibDoc=mibDoc, networkMonitor=networkMonitor, adminUnauthorizedCommunity=adminUnauthorizedCommunity, adminNotificationRetries=adminNotificationRetries, adminModemControl=adminModemControl, adminPhoneIPAddr=adminPhoneIPAddr, ethernetLANtern=ethernetLANtern, adminFCBControl=adminFCBControl, adminNotificationTimeout=adminNotificationTimeout, adminNotificationStatus=adminNotificationStatus, adminNotificationTrapMask=adminNotificationTrapMask, adminNetworkIPAddr=adminNetworkIPAddr, adminPhoneLocalIPAddr=adminPhoneLocalIPAddr, adminSerialBaudRate=adminSerialBaudRate, adminModemConnect=adminModemConnect, Seconds=Seconds, adminNotificationConfirmMask=adminNotificationConfirmMask, adminPhoneEntry=adminPhoneEntry, adminNotificationTable=adminNotificationTable, adminPhoneNumber=adminPhoneNumber, adminDownload=adminDownload, adminClientEntry=adminClientEntry, adminTrapHandle=adminTrapHandle, adminDateAndTime=adminDateAndTime, DisplayString=DisplayString, adminPowerOffTime=adminPowerOffTime, adminSerialIPAddr=adminSerialIPAddr, Time=Time, adminTimeZone=adminTimeZone, lantern=lantern, adminNetworkDataLink=adminNetworkDataLink, adminClientCommunities=adminClientCommunities, adminPhoneIPMask=adminPhoneIPMask, adminIdentification=adminIdentification, adminNotificationIPAddr=adminNotificationIPAddr, adminSerialFlowControl=adminSerialFlowControl, adminDownLoadServer=adminDownLoadServer, adminUnauthorizedIPAddr=adminUnauthorizedIPAddr, adminNotificationBackupIPAddr=adminNotificationBackupIPAddr, adminPhoneConnectionProtocol=adminPhoneConnectionProtocol, adminSerialSubnetMask=adminSerialSubnetMask, adminModemNoConnect=adminModemNoConnect, adminReset=adminReset)
