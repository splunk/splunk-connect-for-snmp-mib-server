#
# PySNMP MIB module REDLINE-AN50-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-AN50-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
an50pmpLastModifiedCID, an50pmpLastMissedSsMacAddress, an50pmpLastRegisteredSsMacAddress = mibBuilder.importSymbols("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastModifiedCID", "an50pmpLastMissedSsMacAddress", "an50pmpLastRegisteredSsMacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, Counter64, Gauge32, ModuleIdentity, ObjectIdentity, Integer32, NotificationType, enterprises, NotificationType, iso, Unsigned32, MibIdentifier, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Counter64", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Integer32", "NotificationType", "enterprises", "NotificationType", "iso", "Unsigned32", "MibIdentifier", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
redline = MibIdentifier((1, 3, 6, 1, 4, 1, 10728))
redlineProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 1))
redlineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2))
redlineAn50 = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16))
an50General = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1))
an50Config = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2))
an50Pm = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3))
an50Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 4))
an50LinkPmp = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5))
an50GenUBR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenUBR.setStatus('mandatory')
an50GenRFLink = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRFLink.setStatus('mandatory')
an50GenFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenFrequency.setStatus('mandatory')
an50GenAllignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltage", 1), ("buzzer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenAllignmentMode.setStatus('mandatory')
an50GenEncryptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenEncryptionEnabled.setStatus('mandatory')
an50GenFlowControlEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenFlowControlEnabled.setStatus('mandatory')
an50GenHttpAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenHttpAccessEnabled.setStatus('mandatory')
an50GenTelnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenTelnetAccessEnabled.setStatus('mandatory')
an50GenTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenTelnetPort.setStatus('mandatory')
an50GenOptionsKey = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenOptionsKey.setStatus('mandatory')
an50GenResetDevice = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenResetDevice.setStatus('mandatory')
an50GenFault = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenFault.setStatus('mandatory')
an50GenTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenTxPower.setStatus('mandatory')
an50GenRegisteredStations = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRegisteredStations.setStatus('mandatory')
an50GenRegisteredConnections = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRegisteredConnections.setStatus('mandatory')
an50GenActiveWirelessLinks = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenActiveWirelessLinks.setStatus('mandatory')
an50GenChannelAutoScan = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenChannelAutoScan.setStatus('mandatory')
an50GenIduType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenIduType.setStatus('mandatory')
an50GenOduType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenOduType.setStatus('mandatory')
an50ConfigEther = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1))
an50EtherMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherMacAddress.setStatus('mandatory')
an50EtherGateway = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherGateway.setStatus('mandatory')
an50EtherPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherPortStatus.setStatus('mandatory')
an50EtherIP = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherIP.setStatus('mandatory')
an50EtherMask = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMask.setStatus('mandatory')
an50Ether100 = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s10Mbs", 1), ("s100Mbs", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50Ether100.setStatus('mandatory')
an50EtherFd = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherFd.setStatus('mandatory')
an50EtherMgmVidEn = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMgmVidEn.setStatus('mandatory')
an50EtherMgmVid = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMgmVid.setStatus('mandatory')
an50EtherLben = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherLben.setStatus('mandatory')
an50ConfigWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2))
an50WrlsChannel = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("chan1", 1), ("chan1A", 2), ("chan2", 3), ("chan2A", 4), ("chan3", 5), ("chan3A", 6), ("chan4", 7), ("chan4A", 8), ("chan5", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsChannel.setStatus('mandatory')
an50WrlsTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsTxPower.setStatus('mandatory')
an50WrlsModReduction = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsModReduction.setStatus('mandatory')
an50WrlsAdaptiveMod = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAdaptiveRate", 1), ("adaptiveRate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAdaptiveMod.setStatus('mandatory')
an50WrlsUBR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsUBR.setStatus('mandatory')
an50WrlsMaster = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ptpSlave", 1), ("ptpMaster", 2), ("pmpSlave", 3), ("pmpMaster", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMaster.setStatus('mandatory')
an50WrlsVersion = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firstFlash", 1), ("secondFlash", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsVersion.setStatus('mandatory')
an50WrlsEncryptCode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsEncryptCode.setStatus('mandatory')
an50WrlsCableAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsCableAttenuation.setStatus('mandatory')
an50WrlsRfPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfPortStatus.setStatus('mandatory')
an50WrlsSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsSaveConfig.setStatus('mandatory')
an50WrlsActivateConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("activeConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsActivateConfig.setStatus('mandatory')
an50WrlsRadioEnable = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txOff", 1), ("txOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRadioEnable.setStatus('mandatory')
an50WrlsRfStatusErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfStatusErrorCode.setStatus('mandatory')
an50WrlsRfSignal = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("blinking", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfSignal.setStatus('mandatory')
an50WrlsLLMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLLMode.setStatus('mandatory')
an50WrlsLMU = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mile", 1), ("km", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLMU.setStatus('mandatory')
an50WrlsLL = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLL.setStatus('mandatory')
an50ConfigScheduler = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19))
an50WrlsFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsFrameSize.setStatus('mandatory')
an50WrlsMinBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMinBlockSize.setStatus('mandatory')
an50WrlsDownlinkSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsDownlinkSize.setStatus('mandatory')
an50WrlsRoundTripDelay = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRoundTripDelay.setStatus('mandatory')
an50WrlsAdaptiveDLSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAdaptiveDLSize.setStatus('mandatory')
an50WrlsExtSyncronize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsExtSyncronize.setStatus('mandatory')
an50WrlsMaximumDistance = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMaximumDistance.setStatus('mandatory')
an50WrlsRegistrationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRegistrationPeriod.setStatus('mandatory')
an50ConfigDefGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20))
an50WrlsBroadcastDLCIR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsBroadcastDLCIR.setStatus('mandatory')
an50WrlsBroadcastDLPIR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsBroadcastDLPIR.setStatus('mandatory')
an50WrlsDFSAction = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("txDisabled", 2), ("changeFreq", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsDFSAction.setStatus('mandatory')
an50WrlsAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAntennaGain.setStatus('mandatory')
an50WrlsATPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsATPEnabled.setStatus('mandatory')
an50ResetStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50ResetStatistics.setStatus('mandatory')
an50PmEther = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2))
an50PmEtherRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPackets.setStatus('mandatory')
an50PmEtherRxPacketsErr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPacketsErr.setStatus('mandatory')
an50PmEtherTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPackets.setStatus('mandatory')
an50PmEtherTxPacketsErr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPacketsErr.setStatus('mandatory')
an50PmEtherRxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPacketsDisc.setStatus('mandatory')
an50PmEtherTxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPacketsDisc.setStatus('mandatory')
an50PmWrls = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3))
an50PmWrlsRxSigMin = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMin.setStatus('mandatory')
an50PmWrlsRxSigMean = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMean.setStatus('mandatory')
an50PmWrlsRxSigMax = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMax.setStatus('mandatory')
an50PmWrlsAvgSinAdr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsAvgSinAdr.setStatus('mandatory')
an50PmWrlsRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPackets.setStatus('mandatory')
an50PmWrlsRxPacketsRetx = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPacketsRetx.setStatus('mandatory')
an50PmWrlsRxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPacketsDisc.setStatus('mandatory')
an50PmWrlsTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPackets.setStatus('mandatory')
an50PmWrlsTxPacketsRetx = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPacketsRetx.setStatus('mandatory')
an50PmWrlsTxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPacketsDisc.setStatus('mandatory')
an50PmWrlsCalcDst = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsCalcDst.setStatus('mandatory')
an50Sw = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3))
an50SwServer = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwServer.setStatus('mandatory')
an50SwFilename = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwFilename.setStatus('mandatory')
an50SwAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUpgrade", 1), ("upgrade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwAdminStatus.setStatus('mandatory')
an50SwOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("completeSuccess", 2), ("failed", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwOperStatus.setStatus('mandatory')
an50SwCurrentVers = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwCurrentVers.setStatus('mandatory')
an50SwOtherVers = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwOtherVers.setStatus('mandatory')
an50SysLastTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SysLastTrapTime.setStatus('mandatory')
an50TftpFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,1)).setObjects(("REDLINE-AN50-MIB", "an50SwServer"), ("REDLINE-AN50-MIB", "an50SwFilename"), ("REDLINE-AN50-MIB", "an50SwAdminStatus"), ("REDLINE-AN50-MIB", "an50SwOperStatus"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50TftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,2)).setObjects(("REDLINE-AN50-MIB", "an50SwServer"), ("REDLINE-AN50-MIB", "an50SwFilename"), ("REDLINE-AN50-MIB", "an50SwAdminStatus"), ("REDLINE-AN50-MIB", "an50SwOperStatus"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50PswdChangeFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,3)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50FirmwareConfigFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,4)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50EepromCorruptedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,5)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50PowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,6)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50SaveConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,7)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50ModifiedIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,8)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastModifiedCID"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50pmpRegistrationMissed = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,9)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastMissedSsMacAddress"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50pmpRegistrationSuccessful = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,10)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastRegisteredSsMacAddress"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50DFSEvent = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,11)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
an50MaxCid = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50MaxCid.setStatus('mandatory')
an50LinkCurrentAvailId = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50LinkCurrentAvailId.setStatus('mandatory')
mibBuilder.exportSymbols("REDLINE-AN50-MIB", redline=redline, an50WrlsBroadcastDLCIR=an50WrlsBroadcastDLCIR, an50GenTelnetAccessEnabled=an50GenTelnetAccessEnabled, an50GenEncryptionEnabled=an50GenEncryptionEnabled, an50WrlsModReduction=an50WrlsModReduction, an50PmEther=an50PmEther, an50GenChannelAutoScan=an50GenChannelAutoScan, an50EepromCorruptedTrap=an50EepromCorruptedTrap, an50EtherPortStatus=an50EtherPortStatus, an50EtherFd=an50EtherFd, an50PmWrls=an50PmWrls, an50GenTelnetPort=an50GenTelnetPort, an50WrlsDFSAction=an50WrlsDFSAction, an50WrlsAntennaGain=an50WrlsAntennaGain, an50WrlsRfSignal=an50WrlsRfSignal, an50DFSEvent=an50DFSEvent, an50WrlsEncryptCode=an50WrlsEncryptCode, an50SwCurrentVers=an50SwCurrentVers, an50WrlsRoundTripDelay=an50WrlsRoundTripDelay, an50SwOperStatus=an50SwOperStatus, an50ConfigDefGroup=an50ConfigDefGroup, an50WrlsLLMode=an50WrlsLLMode, an50GenUBR=an50GenUBR, an50PmWrlsRxPacketsRetx=an50PmWrlsRxPacketsRetx, an50GenOduType=an50GenOduType, an50WrlsTxPower=an50WrlsTxPower, an50ResetStatistics=an50ResetStatistics, an50EtherLben=an50EtherLben, an50GenRFLink=an50GenRFLink, an50WrlsLMU=an50WrlsLMU, an50Sw=an50Sw, an50WrlsLL=an50WrlsLL, an50PmWrlsRxPackets=an50PmWrlsRxPackets, an50LinkCurrentAvailId=an50LinkCurrentAvailId, an50WrlsRfStatusErrorCode=an50WrlsRfStatusErrorCode, an50WrlsAdaptiveDLSize=an50WrlsAdaptiveDLSize, redlineProducts=redlineProducts, an50Pm=an50Pm, an50Ether100=an50Ether100, an50PowerSupplyFailureTrap=an50PowerSupplyFailureTrap, an50WrlsExtSyncronize=an50WrlsExtSyncronize, an50PmWrlsTxPackets=an50PmWrlsTxPackets, an50PmWrlsTxPacketsRetx=an50PmWrlsTxPacketsRetx, an50WrlsSaveConfig=an50WrlsSaveConfig, an50Config=an50Config, an50EtherIP=an50EtherIP, an50PmEtherRxPackets=an50PmEtherRxPackets, an50WrlsAdaptiveMod=an50WrlsAdaptiveMod, an50ModifiedIDTrap=an50ModifiedIDTrap, an50GenFlowControlEnabled=an50GenFlowControlEnabled, an50GenActiveWirelessLinks=an50GenActiveWirelessLinks, an50WrlsMaster=an50WrlsMaster, an50GenAllignmentMode=an50GenAllignmentMode, an50PmEtherRxPacketsErr=an50PmEtherRxPacketsErr, an50WrlsCableAttenuation=an50WrlsCableAttenuation, an50SwFilename=an50SwFilename, an50EtherMacAddress=an50EtherMacAddress, an50SaveConfigTrap=an50SaveConfigTrap, an50Trap=an50Trap, an50PmWrlsRxSigMax=an50PmWrlsRxSigMax, an50EtherMgmVid=an50EtherMgmVid, an50GenOptionsKey=an50GenOptionsKey, redlineAn50=redlineAn50, an50PmEtherTxPacketsDisc=an50PmEtherTxPacketsDisc, an50EtherMask=an50EtherMask, an50ConfigScheduler=an50ConfigScheduler, an50ConfigWireless=an50ConfigWireless, an50SwServer=an50SwServer, an50SysLastTrapTime=an50SysLastTrapTime, an50WrlsMaximumDistance=an50WrlsMaximumDistance, an50SwOtherVers=an50SwOtherVers, an50EtherGateway=an50EtherGateway, an50PmWrlsRxPacketsDisc=an50PmWrlsRxPacketsDisc, an50EtherMgmVidEn=an50EtherMgmVidEn, an50FirmwareConfigFailTrap=an50FirmwareConfigFailTrap, an50WrlsRadioEnable=an50WrlsRadioEnable, an50PmEtherRxPacketsDisc=an50PmEtherRxPacketsDisc, an50PmEtherTxPackets=an50PmEtherTxPackets, an50WrlsChannel=an50WrlsChannel, an50pmpRegistrationSuccessful=an50pmpRegistrationSuccessful, an50PmEtherTxPacketsErr=an50PmEtherTxPacketsErr, an50TftpSuccessTrap=an50TftpSuccessTrap, an50WrlsRfPortStatus=an50WrlsRfPortStatus, an50WrlsMinBlockSize=an50WrlsMinBlockSize, redlineMgmt=redlineMgmt, an50WrlsRegistrationPeriod=an50WrlsRegistrationPeriod, an50WrlsVersion=an50WrlsVersion, an50WrlsUBR=an50WrlsUBR, an50pmpRegistrationMissed=an50pmpRegistrationMissed, an50GenTxPower=an50GenTxPower, an50GenIduType=an50GenIduType, an50GenRegisteredConnections=an50GenRegisteredConnections, an50WrlsActivateConfig=an50WrlsActivateConfig, an50WrlsDownlinkSize=an50WrlsDownlinkSize, an50ConfigEther=an50ConfigEther, an50PmWrlsTxPacketsDisc=an50PmWrlsTxPacketsDisc, an50SwAdminStatus=an50SwAdminStatus, an50PswdChangeFailTrap=an50PswdChangeFailTrap, an50GenResetDevice=an50GenResetDevice, an50WrlsBroadcastDLPIR=an50WrlsBroadcastDLPIR, an50WrlsATPEnabled=an50WrlsATPEnabled, an50General=an50General, an50PmWrlsAvgSinAdr=an50PmWrlsAvgSinAdr, an50GenRegisteredStations=an50GenRegisteredStations, an50PmWrlsRxSigMean=an50PmWrlsRxSigMean, an50GenFault=an50GenFault, an50GenFrequency=an50GenFrequency, an50WrlsFrameSize=an50WrlsFrameSize, an50TftpFailTrap=an50TftpFailTrap, an50PmWrlsCalcDst=an50PmWrlsCalcDst, an50GenHttpAccessEnabled=an50GenHttpAccessEnabled, an50MaxCid=an50MaxCid, an50LinkPmp=an50LinkPmp, an50PmWrlsRxSigMin=an50PmWrlsRxSigMin)
